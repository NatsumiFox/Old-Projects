;
		cpu 68000
		include "sonic3k.macrosetup.asm"	; include a few basic macros
		include "sonic3k.constants.asm"		; include a few basic macros
		include "sonic3k.macros.asm"		; include some simplifying macros and functions
; ---------------------------------------------------------------------------
; Assembly options:

; 'Sonic3_Complete' is set via build scripts to 0 or 1.
; If 1, includes all required Sonic 3 data in order to assemble a smaller version of S3K (with all redundancies removed)

strip_padding = 0|Sonic3_Complete	; If 1, strips all unnecessary padding

Size_of_Snd_driver_guess = $DFE
Size_of_Snd_driver2_guess = $6C6	; Approximate size of compressed sound driver. Change when appropriate

demorecord =	1		; set to 1 to enable recording demos into SRAM
extra_flags =	0		; extra SMPS flags enable
CompID	=	$0F		; competition mode Zone ID to start from (was originally E)
; ---------------------------------------------------------------------------

StartOfROM:
	if * <> 0
		fatal "StartOfROM was $\{*} but it should be 0"
	endif

Vectors:	dc.l	$00000000,	EntryPoint,	BusError,	AddressError	; 0
		dc.l	IllegalInstr,	ZeroDivide,	ChkInstr,	TrapvInstr	; 4
		dc.l	PrivilegeViol,	Trace,		Line1010Emu,	Line1111Emu	; 8
		dc.l	ErrorExcept,	ErrorExcept,	ErrorExcept,	ErrorExcept	; 12
		dc.l	ErrorExcept,	ErrorExcept,	ErrorExcept,	ErrorExcept	; 16
		dc.l	ErrorExcept,	ErrorExcept,	ErrorExcept,	ErrorExcept	; 20
		dc.l	ErrorExcept,	ErrorTrap,	ErrorTrap,	ErrorTrap	; 24
		dc.l	H_int_jump,	ErrorTrap,	V_int_jump,	ErrorTrap	; 28
		dc.l	Trap0,		ErrorTrap,	ErrorTrap,	ErrorTrap	; 32
		dc.l	ErrorTrap,	ErrorTrap,	ErrorTrap,	ErrorTrap	; 36
		dc.l	ErrorTrap,	ErrorTrap,	ErrorTrap,	ErrorTrap	; 40
		dc.l	ErrorTrap,	ErrorTrap,	ErrorTrap,	ErrorTrap	; 44
		dc.l	ErrorTrap,	ErrorTrap,	ErrorTrap,	ErrorTrap	; 48
		dc.l	ErrorTrap,	ErrorTrap,	ErrorTrap,	ErrorTrap	; 52
		dc.l	ErrorTrap,	ErrorTrap,	ErrorTrap,	ErrorTrap	; 56
		dc.l	ErrorTrap,	ErrorTrap,	ErrorTrap,	ErrorTrap	; 60
Header:		dc.b	"SEGA GENESIS    "
Copyright:	dc.b	"MARKEY & NATSUMI"
Domestic_Name:	dc.b	"SONIC 3 & KNUCKLES BATTLE RACE - FULL RELEASE   "
Overseas_Name:	dc.b	"SONIC 3 & KNUCKLES BATTLE RACE - FULL RELEASE   "
Serial_Number:	dc.b	"NOT A PRODUCT "
Checksum:	dc.w	$DFB3
Input:		dc.b	"J           "
ROMStart:	dc.l	StartOfROM
ROMFinish:	dc.l	EndOfROM-1
RAMStart:	dc.l	$00FF0000
RAMFinish:	dc.l	$00FFFFFF

SupportRAM:	dc.b	'R','A',%11111000,%00100000
SRAMStart:	dc.l	$00200000
	if demorecord
SRAMFinish:	dc.l	$00210000
	else
SRAMFinish:	dc.l	$00200400
	endif

ModemInfo:	dc.b	"                                                    "
ProductRegion:	dc.b	"JUE             "

; ---------------------------------------------------------------------------
; Always replaces an index previous passed to this function
; ---------------------------------------------------------------------------

Play_Sound:
		move	#$2700,sr	; disable ints so we can safely stop z80
	stopZ80
		move.b	d0,(Z80_RAM+zMusicNumber).l
	startZ80
		move	#$2300,sr	; enable ints again
		rts
; ---------------------------------------------------------------------------

sub_85E52:
		move.b	(V_int_run_count+3).w,d1
		andi.b	#$F,d1
		bne.s	Play_Sound_2_Done
; ---------------------------------------------------------------------------
; Can handle up to two different indexes in one frame
; ---------------------------------------------------------------------------

Play_Sound_2:
		move	#$2700,sr	; disable ints so we can safely stop z80
	stopZ80
		cmp.b	(Z80_RAM+zSFXNumber0).l,d0
		beq.s	++
		tst.b	(Z80_RAM+zSFXNumber0).l
		bne.s	+
		move.b	d0,(Z80_RAM+zSFXNumber0).l
	startZ80
		move	#$2300,sr	; enable ints again
		rts

+		move.b	d0,(Z80_RAM+zSFXNumber1).l

+	startZ80
		move	#$2300,sr	; enable ints again

Play_Sound_2_Done:
		rts
; ---------------------------------------------------------------------------

Change_Music_Tempo:
		move	#$2700,sr	; disable ints so we can safely stop z80
	stopZ80
		move.b	d0,(Z80_RAM+zTempoSpeedup).l
	startZ80
		move	#$2300,sr	; enable ints again
		rts
; ---------------------------------------------------------------------------

Set_PCM_Status:
	;	move	#$2700,sr	; disable ints so we can safely stop z80
	stopZ80
		move.b	d0,(Z80_RAM+PCM_Status).l
	startZ80
	;	move	#$2300,sr	; enable ints again
		rts
; ---------------------------------------------------------------------------

	include "General/ObjLib.asm"

ErrorTrap:
		nop

EntryPoint:
		lea	(System_stack).w,sp
		tst.l	(HW_Port_1_Control-1).l
		bne.s	+
		tst.w	(HW_Expansion_Control-1).l
+
		bne.s	Init_SkipPowerOn	; in case of a soft reset
		lea	SetupValues(pc),a5
		movem.w	(a5)+,d5-d7
		movem.l	(a5)+,a0-a4
		move.b	HW_Version-Z80_bus_request(a1),d0	; get hardware version
		andi.b	#$F,d0
		beq.s	SkipSecurity ; branch if hardware is older than Genesis III
		move.l	#'SEGA',Security_addr-Z80_bus_request(a1) ; satisfy the TMSS

SkipSecurity:
		move.w	(a4),d0	; check if VDP works
		moveq	#0,d0
		movea.l	d0,a6
		move.l	a6,usp	; set usp to $0
		moveq	#VDPInitValues_End-VDPInitValues-1,d1

Init_VDPRegs:
		move.b	(a5)+,d5
		move.w	d5,(a4)
		add.w	d7,d5
		dbf	d1,Init_VDPRegs	; set all 24 registers

		move.l	(a5)+,(a4)	; set VRAM write mode
		move.w	d0,(a3)	; clear the screen
		move.w	d7,(a1)	; stop the Z80
		move.w	d7,(a2)	; reset the Z80

WaitForZ80:
		btst	d0,(a1)	; has the Z80 stopped?
		bne.s	WaitForZ80	; if not, branch
		moveq	#Z80StartupCodeEnd-Z80StartupCodeBegin-1,d2

Init_SoundRAM:
		move.b	(a5)+,(a0)+
		dbf	d2,Init_SoundRAM

		move.w	d0,(a2)
		move.w	d0,(a1)	; start the Z80
		move.w	d7,(a2)	; reset the Z80

Init_ClearRAM:
		move.l	d0,-(a6)		; Clear normal RAM
		dbf	d6,Init_ClearRAM
		move.l	(a5)+,(a4)	; set VDP display mode and increment
		move.l	(a5)+,(a4)	; set VDP to CRAM write
		moveq	#bytesToLcnt($80),d3

Init_ClearCRAM:
		move.l	d0,(a3)			; Clear CRAM
		dbf	d3,Init_ClearCRAM
		move.l	(a5)+,(a4)
		moveq	#bytesToLcnt($50),d4

Init_ClearVSRAM:
		move.l	d0,(a3)			; Clear VSRAM
		dbf	d4,Init_ClearVSRAM
		moveq	#PSGInitValues_End-PSGInitValues-1,d5

Init_InputPSG:
		move.b	(a5)+,PSG_input-VDP_data_port(a3) ; reset the PSG
		dbf	d5,Init_InputPSG
		move.w	d0,(a2)
		movem.l	(a6),d0-a6	; clear all registers
		move	#$2700,sr	; set the sr

Init_SkipPowerOn:
		bra.s	Test_LockOn
; ---------------------------------------------------------------------------
; InitArray:
SetupValues:
		dc.w	$8000,bytesToLcnt($10000),$100

		dc.l	Z80_RAM
		dc.l	Z80_bus_request
		dc.l	Z80_reset
		dc.l	VDP_data_port, VDP_control_port

VDPInitValues:	; values for VDP registers
		dc.b 4			; Command $8004 - HInt off, Enable HV counter read
		dc.b $14		; Command $8114 - Display off, VInt off, DMA on, PAL off
		dc.b $30		; Command $8230 - Scroll A Address $C000
		dc.b $3C		; Command $833C - Window Address $F000
		dc.b 7			; Command $8407 - Scroll B Address $E000
		dc.b $6C		; Command $856C - Sprite Table Addres $D800
		dc.b 0			; Command $8600 - Null
		dc.b 0			; Command $8700 - Background color Pal 0 Color 0
		dc.b 0			; Command $8800 - Null
		dc.b 0			; Command $8900 - Null
		dc.b $FF		; Command $8AFF - Hint timing $FF scanlines
		dc.b 0			; Command $8B00 - Ext Int off, VScroll full, HScroll full
		dc.b $81		; Command $8C81 - 40 cell mode, shadow/highlight off, no interlace
		dc.b $37		; Command $8D37 - HScroll Table Address $DC00
		dc.b 0			; Command $8E00 - Null
		dc.b 1			; Command $8F01 - VDP auto increment 1 byte
		dc.b 1			; Command $9001 - 64x32 cell scroll size
		dc.b 0			; Command $9100 - Window H left side, Base Point 0
		dc.b 0			; Command $9200 - Window V upside, Base Point 0
		dc.b $FF		; Command $93FF - DMA Length Counter $FFFF
		dc.b $FF		; Command $94FF - See above
		dc.b 0			; Command $9500 - DMA Source Address $0
		dc.b 0			; Command $9600 - See above
		dc.b $80		; Command $9700	- See above + VRAM fill mode
VDPInitValues_End:

		dc.l	vdpComm($0000,VRAM,DMA) ; value for VRAM write mode

		; Z80 instructions (not the sound driver; that gets loaded later)
Z80StartupCodeBegin: ; loc_2CA:
	if (*)+$26 < $10000
	save
	CPU Z80 ; start assembling Z80 code
	phase 0 ; pretend we're at address 0
		xor	a	; clear a to 0
		ld	bc,((Z80_RAM_end-Z80_RAM)-zStartupCodeEndLoc)-1 ; prepare to loop this many times
		ld	de,zStartupCodeEndLoc+1	; initial destination address
		ld	hl,zStartupCodeEndLoc	; initial source address
		ld	sp,hl	; set the address the stack starts at
		ld	(hl),a	; set first byte of the stack to 0
		ldir		; loop to fill the stack (entire remaining available Z80 RAM) with 0
		pop	ix	; clear ix
		pop	iy	; clear iy
		ld	i,a	; clear i
		ld	r,a	; clear r
		pop	de	; clear de
		pop	hl	; clear hl
		pop	af	; clear af
		ex	af,af'	; swap af with af'
		exx		; swap bc/de/hl with their shadow registers too
		pop	bc	; clear bc
		pop	de	; clear de
		pop	hl	; clear hl
		pop	af	; clear af
		ld	sp,hl	; clear sp
		di		; clear iff1 (for interrupt handler)
		im	1	; interrupt handling mode = 1
		ld	(hl),0E9h ; replace the first instruction with a jump to itself
		jp	(hl)	  ; jump to the first instruction (to stay there forever)
zStartupCodeEndLoc:
	dephase ; stop pretending
		restore
	padding off ; unfortunately our flags got reset so we have to set them again...
	else ; due to an address range limitation I could work around but don't think is worth doing so:
		message "Warning: using pre-assembled Z80 startup code."
		dc.w $AF01,$D91F,$1127,$0021,$2600,$F977,$EDB0,$DDE1,$FDE1,$ED47,$ED4F,$D1E1,$F108,$D9C1,$D1E1,$F1F9,$F3ED,$5636,$E9E9
	endif
Z80StartupCodeEnd:

		dc.w	$8104	; value for VDP display mode
		dc.w	$8F02	; value for VDP increment
		dc.l	vdpComm($0000,CRAM,WRITE)	; value for CRAM write mode
		dc.l	vdpComm($0000,VSRAM,WRITE)	; value for VSRAM write mode

PSGInitValues:
		dc.b	$9F,$BF,$DF,$FF	; values for PSG channel volumes
PSGInitValues_End:
; ---------------------------------------------------------------------------

Test_LockOn:
		tst.w	(VDP_control_port).l
		move.w	#$4EF9,(V_int_jump).w	; machine code for jmp
		move.l	#VInt,(V_int_addr).w
		move.w	#$4EF9,(H_int_jump).w
		move.l	#HInt,(H_int_addr).w
		move.l	#'3kBR',Checksum_string.w; NAT: put in magic str. Make sure RAM is valid (gsx)

-		move.w	(VDP_control_port).l,d1
		btst	#1,d1
		bne.s	-	; wait till a DMA is completed
		lea	RAM_start,a6
		moveq	#0,d7
		move.w	#bytesToLcnt($FE00),d6

-		move.l	d7,(a6)+
		dbf	d6,-

SonicAndKnucklesStartup:
		move.b	(HW_Version).l,d6		; NAT: Readd check
		andi.b	#$C0,d6
		move.b	d6,(Graphics_flags).w

		clr.w	(SK_alone_flag).w
		jsr	DetectPAL(pc)
		jsr	Init_VDP(pc)
		jsr	SndDrvInit(pc)
		jsr	Init_Controllers(pc)

		jsr	SRAM_Init			; MJ: initialise/check SRAM

		move.b	#%10101111,OptBits_Menu.w
		clr.b	(Game_mode).w
		move.b	#(MMCL_Zones_End-MMCL_Zones)/$04,(RandomLevList).l ; set number of zones to check through randomly
		move.b	#STARTINGMODE,(Game_mode).w		; see constants file...

GameLoop:
		move.b	(Game_mode).w,d0
		andi.w	#$7C,d0
		movea.l	GameModes(pc,d0.w),a0
		jsr	(a0)
		bra.s	GameLoop
; ---------------------------------------------------------------------------
GameModes:	dc.l SEGAScreen			;   0
		dc.l MainMenu			;   4
		dc.l Level			;   8
		dc.l Level			;  $C
		dc.l Menu_SpecialStage		; $10
		dc.l SEGAScreen			; $14
		dc.l SEGAScreen			; $18
		dc.l SEGAScreen			; $1C
		dc.l SEGAScreen			; $20
		dc.l SEGAScreen			; $24
		dc.l SEGAScreen			; $28
		dc.l SEGAScreen			; $2C
		dc.l SEGAScreen			; $30
		dc.l SEGAScreen			; $34
		dc.l SEGAScreen			; $38
		dc.l SEGAScreen			; $3C
		dc.l SEGAScreen			; $40
		dc.l SEGAScreen			; $44
		dc.l SEGAScreen			; $48
		dc.l SEGAScreen			; $4C
		dc.l SEGAScreen			; $50
		dc.l Intro			; $54
		dc.l TitleScreen		; $58
		dc.l SoundTest			; $5C
		dc.l Disclaimer			; $60
		dc.l SpecialStage		; $64
		dc.l Museum			; $68
; =============== S U B R O U T I N E =======================================

;	include "General/Nemesis.asm"
	include "General/Kosinski.asm"
	include "SRAM.asm"

DetectPAL:
		lea	(VDP_control_port).l,a5
		move.w	#$8174,(a5)		; VDP Command $8174 - Display on, VInt on, DMA on, PAL off
		moveq	#0,d0

.waitForVBlankStart:
		move.w	(a5),d1
		andi.w	#8,d1
		beq.s	.waitForVBlankStart

.waitForVBlankEnd:
		move.w	(a5),d1
		andi.w	#8,d1
		bne.s	.waitForVBlankEnd	; Wait for VBlank to run once

.waitForNextVBlank:
		addq.w	#1,d0
		move.w	(a5),d1
		andi.w	#8,d1
		beq.s	.waitForNextVBlank
		move.w	d0,(V_blank_cycles).w	; Count cycles between VBlanks (likely to detect PAL systems and/or for other timing mechanisms

NullRTS:
		rts

; ---------------------------------------------------------------------------
; Vertical interrupt handler
; ---------------------------------------------------------------------------

VInt:
		movem.l	d0-a6,-(sp)
		tst.b	(V_int_routine).w
		beq.w	VInt_0_Main

-		move.w	(VDP_control_port).l,d0
		andi.w	#8,d0
		beq.s	-	; wait until vertical blanking is taking place

		move.l	#vdpComm($0000,VSRAM,WRITE),(VDP_control_port).l
		move.l	(V_scroll_value).w,(VDP_data_port).l
		btst	#6,(Graphics_flags).w
		beq.s	+	; branch if it's not a PAL system
		move.w	#$700,d0
-		dbf	d0,-	; otherwise, waste a bit of time here

+

		move.b	(V_int_routine).w,d0
		move.b	#0,(V_int_routine).w
		move.w	#1,(H_int_flag).w		; Allow H Interrupt code to run
		andi.w	#$3E,d0
		move.w	VInt_Table(pc,d0.w),d1
		jsr	VInt_Table(pc,d1.w)

VInt_Done:
		addq.l	#1,(V_int_run_count).w
		movem.l	(sp)+,d0-a6

NulReturn:
NullRTE:
		rte
; ---------------------------------------------------------------------------
VInt_Table:	dc.w VInt_0-VInt_Table
		dc.w VInt_2-VInt_Table
		dc.w VInt_4-VInt_Table
		dc.w VInt_6-VInt_Table
		dc.w VInt_8-VInt_Table
		dc.w VInt_A_C-VInt_Table
		dc.w VInt_A_C-VInt_Table
		dc.w VInt_E-VInt_Table
		dc.w VInt_10-VInt_Table
		dc.w VInt_12-VInt_Table
		dc.w VInt_14-VInt_Table
		dc.w VInt_16-VInt_Table
		dc.w VInt_18-VInt_Table
		dc.w VInt_1A-VInt_Table
		dc.w VInt_1C-VInt_Table
		dc.w VInt_1E-VInt_Table
; ---------------------------------------------------------------------------

VInt_0:
		addq.w	#4,sp

VInt_0_Main:
		addq.w	#1,(Lag_frame_count).w

		; branch if a level or demo is running
		cmpi.b	#$88,(Game_mode).w
		beq.s	VInt_0_Level
		cmpi.b	#$8C,(Game_mode).w
		beq.s	VInt_0_Level
		cmpi.b	#8,(Game_mode).w
		beq.s	VInt_0_Level
		cmpi.b	#$C,(Game_mode).w
		bne.s	VInt_Done		; otherwise, return from V-int
; ---------------------------------------------------------------------------

VInt_0_Level:
		tst.b	(Water_flag).w
		beq.w	VInt_0_NoWater
		move.w	(VDP_control_port).l,d0
		btst	#6,(Graphics_flags).w
		beq.s	+			; branch if it isn't a PAL system
		move.w	#$700,d0
-		dbf	d0,-			; otherwise waste a bit of time here

+
		move.w	#1,(H_int_flag).w
		moveq	#1,d0
		jsr	Set_PCM_Status.w	; NAT: Set PCM status as write only

		tst.b	(Water_full_screen_flag).w
		bne.s	VInt_0_FullyUnderwater
		dma68kToVDP Normal_palette,$0000,$80,CRAM
		bra.s	VInt_0_Water_Cont
; ---------------------------------------------------------------------------

VInt_0_FullyUnderwater:
		dma68kToVDP Water_palette,$0000,$80,CRAM

VInt_0_Water_Cont:
		move.w	(H_int_counter_command).w,(a5)
		moveq	#-1,d0
		jsr	Set_PCM_Status.w	; NAT: Set PCM status as execute tracker
		bra.w	VInt_Done
; ---------------------------------------------------------------------------

VInt_0_NoWater:
		move.w	(VDP_control_port).l,d0
		btst	#6,(Graphics_flags).w
		beq.s	+			; branch if it isn't a PAL system
		move.w	#$700,d0
-		dbf	d0,-			; otherwise, waste a bit of time here

+
		move.w	#1,(H_int_flag).w
		move.w	(H_int_counter_command).w,(VDP_control_port).l
		moveq	#1,d0
		jsr	Set_PCM_Status.w	; NAT: Set PCM status as write only

		tst.w	(Competition_mode).w
		beq.s	VInt_0_Done
		move.l	#vdpComm($0000,VSRAM,WRITE),(VDP_control_port).l
		move.l	(V_scroll_value).w,(VDP_data_port).l
		tst.w	(Use_normal_sprite_table).w
		beq.s	+
		dma68kToVDP Sprite_table_buffer,$F800,$280,VRAM
		bra.s	VInt_0_Done
+
		dma68kToVDP Sprite_table_buffer_2,$F800,$280,VRAM

VInt_0_Done:
		moveq	#-1,d0
		jsr	Set_PCM_Status.w	; NAT: Set PCM status as execute tracker
		bra.w	VInt_Done
; ---------------------------------------------------------------------------

VInt_2:
		bsr.w	Do_ControllerPal
		tst.w	(Demo_timer).w
		beq.w	+
		subq.w	#1,(Demo_timer).w
+		rts
; ---------------------------------------------------------------------------

VInt_14:
		move.b	(V_int_run_count+3).w,d0
		andi.w	#$F,d0
		bne.s	+	; run the following code once every 16 frames

		stopZ80
		bsr.w	Poll_Controllers
		startZ80
+
		tst.w	(Demo_timer).w
		beq.w	+
		subq.w	#1,(Demo_timer).w
+
		jmp	(Set_Kos_Bookmark).l
; ---------------------------------------------------------------------------

VInt_4:
;		bsr.w	TitleAnim_FlipBuffer
		bsr.w	Do_ControllerPal
		tst.w	(Demo_timer).w
		beq.w	+
		subq.w	#1,(Demo_timer).w
+
		rts
; ---------------------------------------------------------------------------

VInt_6:
		bra.w	Do_ControllerPal
	;	rts
; ---------------------------------------------------------------------------

VInt_10:
		cmpi.b	#$34,(Game_mode).w
		beq.w	VInt_1C		; If in a special stage, branch

VInt_8:
		moveq	#1,d0
		jsr	Set_PCM_Status.w	; NAT: Set PCM status as write only
		bsr.w	Poll_Controllers

	lea	($C00000).l,a5
	lea	$04(a5),a6
	jsr	DrawDebugMap
		tst.b	(Hyper_Sonic_flash_timer).w
		beq.s	VInt_8_NoFlash

		; flash screen white when Hyper Sonic's double jump move is used
		subq.b	#1,(Hyper_Sonic_flash_timer).w
		lea	(VDP_data_port).l,a6
		move.l	#vdpComm($0000,CRAM,WRITE),(VDP_control_port).l
		move.w	#$EEE,d0
		move.w	#$1F,d1

-		move.w	d0,(a6)
		dbf	d1,-	; fill entire first and second palette lines with white
		move.w	#0,(a6)	; keep backdrop black
		move.w	#$1E,d1

-		move.w	d0,(a6)
		dbf	d1,-	; fill remaining colours with white
		bra.s	VInt_8_Cont
; ---------------------------------------------------------------------------

VInt_8_NoFlash:
		tst.b	(Water_full_screen_flag).w
		bne.s	+
		dma68kToVDP Normal_palette,$0000,$80,CRAM
		bra.s	++
+
		dma68kToVDP Water_palette,$0000,$80,CRAM
+
		move.w	(H_int_counter_command).w,(a5)

VInt_8_Cont:
		dma68kToVDP H_scroll_buffer,$F000,$380,VRAM
		tst.w	(Competition_mode).w
		beq.s	++
		tst.w	(Chg_sprite_table).w
		beq.s	+
		clr.w	(Chg_sprite_table).w
		eori.w	#$FFFF,(Use_normal_sprite_table).w	; a not.w would've accomplished the same thing ...
+
		tst.w	(Use_normal_sprite_table).w
		bne.s	+
		dma68kToVDP Sprite_table_buffer_2,$F800,$280,VRAM
		bra.s	++
+
		dma68kToVDP Sprite_table_buffer,$F800,$280,VRAM
+
		bsr.w	Process_DMA_Queue
		jsr	(SpecialVInt_Function).l
		jsr	(VInt_DrawLevel).l

		moveq	#-1,d0
		jsr	Set_PCM_Status.w	; NAT: Set PCM status as execute tracker

		move	#$2300,sr
		tst.b	(Water_flag).w
		beq.s	+
		cmpi.b	#92,(H_int_counter).w	; is H-int occuring on or below line 92?
		bhs.s	+	; if it is, branch
		move.b	#1,(Do_Updates_in_H_int).w
		jmp	(Set_Kos_Bookmark).l
+
		bsr.s	Do_Updates
		jmp	(Set_Kos_Bookmark).l

; =============== S U B R O U T I N E =======================================


Do_Updates:
		lea	VDP_data_port,a6
		moveq	#0,d1			; NAT; Make sure upper bits are 0!!!
		tst.b	(Debug_On).w
		bne.s	.debug			; NAT: If debug mode, draw debug numbers
		move.l	ModeTable.w,a1		; NAT: Get mode table
		jsr	$08(a1)			; update HUD
		bra.s	.cont

.debug		jsr	DrawDebugNumbers

.cont		clr.w	(Lag_frame_count).w
		tst.w	(Demo_timer).w
		beq.w	+
		subq.w	#1,(Demo_timer).w
+
		rts
; End of function Do_Updates

; ---------------------------------------------------------------------------

VInt_A_C:
		moveq	#1,d0
		jsr	Set_PCM_Status.w	; NAT: Set PCM status as write only

		bsr.w	Poll_Controllers
		tst.b	(Water_full_screen_flag).w
		bne.s	+
		dma68kToVDP Normal_palette,$0000,$80,CRAM
		bra.s	++
+
		dma68kToVDP Water_palette,$0000,$80,CRAM
+
		move.w	(H_int_counter_command).w,(a5)
		dma68kToVDP H_scroll_buffer,$F000,$380,VRAM
		tst.w	(Competition_mode).w
		beq.s	++
		tst.w	(Chg_sprite_table).w
		beq.s	+
		clr.w	(Chg_sprite_table).w
		eori.w	#$FFFF,(Use_normal_sprite_table).w
+
		tst.w	(Use_normal_sprite_table).w
		bne.s	+
		dma68kToVDP Sprite_table_buffer_2,$F800,$280,VRAM
		bra.s	++
+
		dma68kToVDP Sprite_table_buffer,$F800,$280,VRAM
+
		bsr.w	Process_DMA_Queue
		moveq	#-1,d0
		jsr	Set_PCM_Status.w	; NAT: Set PCM status as execute tracker
		jmp	(Set_Kos_Bookmark).l
; ---------------------------------------------------------------------------

VInt_E:
		bsr.w	Do_ControllerPal
		move.b	#$E,(V_int_routine).w
		rts
; ---------------------------------------------------------------------------

VInt_12:
		bsr.w	Do_ControllerPal
		move.w	(H_int_counter_command).w,(a5)
		rts
; ---------------------------------------------------------------------------

VInt_18:
		moveq	#1,d0
		jsr	Set_PCM_Status.w	; NAT: Set PCM status as write only
		bsr.w	Poll_Controllers

		dma68kToVDP Normal_palette,$0000,$80,CRAM
		dma68kToVDP Sprite_table_buffer,$F800,$280,VRAM
		dma68kToVDP H_scroll_buffer,$F000,$380,VRAM

		bclr	#0,(__u_FA88).w
		beq.s	+
		dma68kToVDP Chunk_table+$2000,$C000,$2000,VRAM
+
		bsr.w	Process_DMA_Queue
		moveq	#-1,d0
		jmp	Set_PCM_Status.w	; NAT: Set PCM status as execute tracker
	;	rts
; ---------------------------------------------------------------------------

VInt_16:
		moveq	#1,d0
		jsr	Set_PCM_Status.w	; NAT: Set PCM status as write only
		bsr.w	Poll_Controllers

		dma68kToVDP Normal_palette,$0000,$80,CRAM
		dma68kToVDP Sprite_table_buffer,$F800,$280,VRAM
		dma68kToVDP H_scroll_buffer,$F000,$380,VRAM

		bsr.w	Process_DMA_Queue
		moveq	#-1,d0
		jsr	Set_PCM_Status.w	; NAT: Set PCM status as execute tracker

		tst.w	(Demo_timer).w
		beq.w	+
		subq.w	#1,(Demo_timer).w
+
		jmp	(Set_Kos_Bookmark).l
; ---------------------------------------------------------------------------

VInt_1A:
		bsr.w	Do_ControllerPal
		tst.w	(Demo_timer).w
		beq.w	+
		subq.w	#1,(Demo_timer).w
+
		jmp	(Set_Kos_Bookmark).l
; ---------------------------------------------------------------------------

VInt_1C:
;		jsr	Rotate_SSPal
		bsr.w	Do_ControllerPal
;		jsr	Update_SSMap
		tst.w	(Demo_timer).w
		beq.w	+
		subq.w	#1,(Demo_timer).w
+
		jmp	(Set_Kos_Bookmark).l
; ---------------------------------------------------------------------------

VInt_1E:
		bsr.s	Do_ControllerPal
		movea.l	(__u_EF44).w,a0
		jsr	(a0)
		jmp	(Set_Kos_Bookmark).l

; =============== S U B R O U T I N E =======================================


Do_ControllerPal:
		moveq	#1,d0
		jsr	Set_PCM_Status.w	; NAT: Set PCM status as write only

		bsr.w	Poll_Controllers
		tst.b	(Water_full_screen_flag).w
		bne.s	+
		dma68kToVDP Normal_palette,$0000,$80,CRAM
		bra.s	++
+
		dma68kToVDP Water_palette,$0000,$80,CRAM
+
		dma68kToVDP Sprite_table_buffer,$F800,$280,VRAM
		dma68kToVDP H_scroll_buffer,$F000,$380,VRAM

		bsr.w	Process_DMA_Queue
		moveq	#-1,d0
		jmp	Set_PCM_Status.w	; NAT: Set PCM status as execute tracker

; ---------------------------------------------------------------------------
; Horizontal interrupt handler for Competition Mode
; ---------------------------------------------------------------------------

HInt:
		tst.w	(H_int_flag).w
		beq.w	HInt_Done
		move.w	#0,(H_int_flag).w
		move.l	a5,-(sp)
		move.l	d0,-(sp)

-		move.w	(VDP_control_port).l,d0
		andi.w	#4,d0	; is horizontal blanking occuring?
		beq.s	-	; if not, wait until it is

		move.w	(VDP_reg_1_command).w,d0
		andi.b	#$BF,d0
		move.w	d0,(VDP_control_port).l	; blank the display
		move.l	#vdpComm($0000,VSRAM,WRITE),(VDP_control_port).l
	;	move.l	(V_scroll_value_P2_copy).w,(VDP_data_port).l

		moveq	#1,d0
		jsr	Set_PCM_Status.w	; NAT: Set PCM status as write only

		tst.w	(Use_normal_sprite_table).w
		beq.s	+
		dma68kToVDP Sprite_table_buffer_P2,$F800,$280,VRAM
		bra.s	++

+		dma68kToVDP Sprite_table_buffer_P2_2,$F800,$280,VRAM

+		moveq	#0,d0
		jsr	Set_PCM_Status.w	; NAT: Set PCM status as read & write

-		move.w	(VDP_control_port).l,d0
		andi.w	#4,d0			; is a horizontal blank occuring?
		beq.s	-			; if not, wait
		move.w	(VDP_reg_1_command).w,d0
		ori.b	#$40,d0
		move.w	d0,(VDP_control_port).l	; enable display
		move.l	(sp)+,d0
		movea.l	(sp)+,a5

HInt_Done:
		rte

; ---------------------------------------------------------------------------
; Used for water levels apart from Hydrocity, for uneven water surfaces
; ---------------------------------------------------------------------------

HInt3:
		tst.w	(H_int_flag).w
		beq.s	HInt3_Done
		clr.w	(H_int_flag).w
		movem.l	d0-d1/a0-a2,-(sp)

		lea	(VDP_data_port).l,a1
		move.w	#$8AFF,VDP_control_port-VDP_data_port(a1)		; Reset HInt timing
		moveq	#1,d0
		jsr	Set_PCM_Status.w			; NAT: Set PCM status as read only

		movea.l	(Water_palette_data_addr).w,a2
		nop
		or.l	d0,d0
	;	moveq	#1,d0
-	;	dbf	d0,-	; waste a few cycles here

		move.w	(a2)+,d1
		move.w	8(a1),d0	; NAT: Getting v-line from VDP instead of flag.
		lsr.w	#8,d0		; NAT: Since VDP updates 1 frame late, getting FF instead of like DE is dangerous!
		subi.b	#200,d0		; is H-int occuring below line 200?
		bcs.s	.transferColors	; if it is, branch
		sub.b	d0,d1
		bcs.s	.skipTransfer

.transferColors:
		move.w	(a2)+,d0
		lea	(Water_palette).w,a0
		adda.w	d0,a0
		addi.w	#$C000,d0
		swap	d0
		move.l	d0,VDP_control_port-VDP_data_port(a1)	; write to CRAM at appropriate address
		move.l	(a0)+,(a1)	; transfer two colors
		move.w	(a0)+,(a1)	; transfer the third color
		nop
		nop
		moveq	#$24,d0

.wasteSomeCycles:
		dbf	d0,.wasteSomeCycles
		dbf	d1,.transferColors	; repeat for number of colors

.skipTransfer:
		moveq	#0,d0
		jsr	Set_PCM_Status.w			; NAT: Set PCM status as read & write

		movem.l	(sp)+,d0-d1/a0-a2
		tst.b	(Do_Updates_in_H_int).w
		bne.s	HInt3_Do_Updates

HInt3_Done:
		rte
; ---------------------------------------------------------------------------

HInt3_Do_Updates:
		clr.b	(Do_Updates_in_H_int).w
		movem.l	d0-a6,-(sp)
		jsr	Do_Updates
		movem.l	(sp)+,d0-a6
		rte

; ---------------------------------------------------------------------------
; Identical to HInt3 except it transfers colors from the above water palette
; Seems to be unused
; ---------------------------------------------------------------------------

HInt5:
		tst.w	(H_int_flag).w		; Seems to be a compliment to HInt 3, but doesn't seem to be usedj
		beq.s	HInt5_Done
		clr.w	(H_int_flag).w
		movem.l	d0-d1/a0-a2,-(sp)

		lea	(VDP_data_port).l,a1
		move.w	#$8AFF,VDP_control_port-VDP_data_port(a1)
		stopZ80
		movea.l	(Water_palette_data_addr).w,a2
		moveq	#$C-2,d0
-		dbf	d0,-

		move.w	(a2)+,d1
		move.w	8(a1),d0	; NAT: Getting v-line from VDP instead of flag.
		lsr.w	#8,d0		; NAT: Since VDP updates 1 frame late, getting FF instead of like DE is dangerous!
		subi.b	#200,d0
		bcs.s	.transferColors
		sub.b	d0,d1
		bcs.s	.skipTransfer

.transferColors:
		move.w	(a2)+,d0
		lea	(Normal_palette).w,a0
		adda.w	d0,a0
		addi.w	#$C000,d0
		swap	d0
		move.l	d0,VDP_control_port-VDP_data_port(a1)
		move.l	(a0)+,(a1)
		move.w	(a0)+,(a1)
		nop
		nop
		moveq	#$24,d0

.wasteSomeCycles:
		dbf	d0,.wasteSomeCycles
		dbf	d1,.transferColors

.skipTransfer:
		startZ80
		movem.l	(sp)+,d0-d1/a0-a2
		tst.b	(Do_Updates_in_H_int).w
		bne.s	HInt5_Do_Updates

HInt5_Done:
		rte
; ---------------------------------------------------------------------------

HInt5_Do_Updates:
		clr.b	(Do_Updates_in_H_int).w
		movem.l	d0-a6,-(sp)
		jsr	(Do_Updates).l
		movem.l	(sp)+,d0-a6
		rte

; ---------------------------------------------------------------------------
; Identical to HInt3, except for faster systems
; ---------------------------------------------------------------------------

HInt4:
		tst.w	(H_int_flag).w
		beq.s	Hint4_Done
		clr.w	(H_int_flag).w
		movem.l	d0-d1/a0-a2,-(sp)

		lea	(VDP_data_port).l,a1
		move.w	#$8AFF,VDP_control_port-VDP_data_port(a1)
		moveq	#1,d0
		jsr	Set_PCM_Status.w			; NAT: Set PCM status as read only

		movea.l	(Water_palette_data_addr).w,a2
		moveq	#$1B-9,d0
-		dbf	d0,-

		move.w	(a2)+,d1
		move.w	8(a1),d0	; NAT: Getting v-line from VDP instead of flag.
		lsr.w	#8,d0		; NAT: Since VDP updates 1 frame late, getting FF instead of like DE is dangerous!
		subi.b	#200,d0
		bcs.s	.transferColors
		sub.b	d0,d1
		bcs.s	.skipTransfer

.transferColors:
		move.w	(a2)+,d0
		lea	(Water_palette).w,a0
		adda.w	d0,a0
		addi.w	#$C000,d0
		swap	d0
		move.l	d0,VDP_control_port-VDP_data_port(a1)
		move.l	(a0)+,(a1)
		move.w	(a0)+,(a1)
		nop
		moveq	#$33,d0

.wasteSomeCycles:
		dbf	d0,.wasteSomeCycles
		dbf	d1,.transferColors

.skipTransfer:
		moveq	#0,d0
		jsr	Set_PCM_Status.w			; NAT: Set PCM status as read & write
		movem.l	(sp)+,d0-d1/a0-a2
		tst.b	(Do_Updates_in_H_int).w
		bne.s	HInt4_Do_Updates

Hint4_Done:
		rte
; ---------------------------------------------------------------------------

HInt4_Do_Updates:
		clr.b	(Do_Updates_in_H_int).w
		movem.l	d0-a6,-(sp)
		jsr	(Do_Updates).l
		movem.l	(sp)+,d0-a6
		rte

; ---------------------------------------------------------------------------
; Identical to HInt5, except for faster systems
; ---------------------------------------------------------------------------

HInt_6:
		tst.w	(H_int_flag).w
		beq.s	HInt6_Done
		move.w	#0,(H_int_flag).w
		movem.l	d0-d1/a0-a2,-(sp)

		lea	(VDP_data_port).l,a1
		move.w	#$8AFF,VDP_control_port-VDP_data_port(a1)
		stopZ80
		movea.l	(Water_palette_data_addr).w,a2
		moveq	#$1B-2,d0
-		dbf	d0,-

		move.w	(a2)+,d1
		move.w	8(a1),d0	; NAT: Getting v-line from VDP instead of flag.
		lsr.w	#8,d0		; NAT: Since VDP updates 1 frame late, getting FF instead of like DE is dangerous!
		subi.b	#200,d0
		bcs.s	.transferColors
		sub.b	d0,d1
		bcs.s	.skipTransfer

.transferColors:
		move.w	(a2)+,d0
		lea	(Normal_palette).w,a0
		adda.w	d0,a0
		addi.w	#$C000,d0
		swap	d0
		move.l	d0,VDP_control_port-VDP_data_port(a1)
		move.l	(a0)+,(a1)
		move.w	(a0)+,(a1)
		nop
		moveq	#$33,d0

.wasteSomeCycles:
		dbf	d0,.wasteSomeCycles
		dbf	d1,.transferColors

.skipTransfer:
		startZ80
		movem.l	(sp)+,d0-d1/a0-a2
		tst.b	(Do_Updates_in_H_int).w
		bne.s	HInt6_Do_Updates

HInt6_Done:
		rte
; ---------------------------------------------------------------------------

HInt6_Do_Updates:
		clr.b	(Do_Updates_in_H_int).w
		movem.l	d0-a6,-(sp)
		jsr	(Do_Updates).l
		movem.l	(sp)+,d0-a6
		rte

; ---------------------------------------------------------------------------
; Copies the entire water palette to CRAM, used only in Hydrocity
; ---------------------------------------------------------------------------

HInt2:
		move	#$2700,sr
		tst.w	(H_int_flag).w
		beq.s	HInt2_Done
		clr.w	(H_int_flag).w
		movem.l	a0-a1,-(sp)

		lea	(VDP_data_port).l,a1
		move.w	#$8ADF,VDP_control_port-VDP_data_port(a1)
		lea	(Water_palette).w,a0
		move.l	#vdpComm($0000,CRAM,WRITE),VDP_control_port-VDP_data_port(a1)
	rept 32
		move.l	(a0)+,(a1)
	endm
		movem.l	(sp)+,a0-a1
		tst.b	(Do_Updates_in_H_int).w
		bne.s	HInt2_Do_Updates

HInt2_Done:
		rte
; ---------------------------------------------------------------------------

HInt2_Do_Updates:
		clr.b	(Do_Updates_in_H_int).w
		movem.l	d0-a6,-(sp)
		bsr.w	Do_Updates
		movem.l	(sp)+,d0-a6
		rte

; =============== S U B R O U T I N E =======================================


Init_Controllers:
		stopZ80
		moveq	#$40,d0
		move.b	d0,(HW_Port_1_Control).l
		move.b	d0,(HW_Port_2_Control).l
		move.b	d0,(HW_Expansion_Control).l
		startZ80
		rts
; End of function Init_Controllers


; =============== S U B R O U T I N E =======================================


Poll_Controllers:
		lea	(Ctrl_1).w,a0
		lea	(HW_Port_1_Data).l,a1
		bsr.s	Poll_Controller	; poll first controller
		addq.w	#2,a1	; poll second controller
; End of function Poll_Controllers


; =============== S U B R O U T I N E =======================================


Poll_Controller:
		move.b	#0,(a1)			; Poll controller data port
		nop
		nop
		move.b	(a1),d0			; Get controller port data (start/A)
		lsl.b	#2,d0
		andi.b	#$C0,d0
		move.b	#$40,(a1)		; Poll controller data port again
		nop
		nop
		move.b	(a1),d1			; Get controller port data (B/C/Dpad)
		andi.b	#$3F,d1
		or.b	d1,d0			; Fuse together into one controller bit array
		not.b	d0
		move.b	(a0),d1			; Get press button data
		eor.b	d0,d1			; Toggle off buttons that are being held
		move.b	d0,(a0)+		; Put raw controller input (for held buttons) in F604/F606
		and.b	d0,d1
		move.b	d1,(a0)+		; Put pressed controller input in F605/F607
		rts
; End of function Poll_Controller


; =============== S U B R O U T I N E =======================================


Init_VDP:
		lea	(VDP_control_port).l,a0
		lea	(VDP_data_port).l,a1
		lea	(VDP_register_values).l,a2
		moveq	#18,d7

.setRegisters:
		move.w	(a2)+,(a0)
		dbf	d7,.setRegisters
		move.w	(VDP_register_values+2).l,d0	; get command for register #1
		move.w	d0,(VDP_reg_1_command).w	; and store it in RAM (for easy display blanking/enabling)
		move.w	#$8ADF,(H_int_counter_command).w
		moveq	#0,d0
		move.l	#vdpComm($0000,VSRAM,WRITE),(VDP_control_port).l
		move.w	d0,(a1)
		move.w	d0,(a1)
		move.l	#vdpComm($0000,CRAM,WRITE),(VDP_control_port).l
		move.w	#$3F,d7

.clearCRAM:
		move.w	d0,(a1)
		dbf	d7,.clearCRAM
		clr.l	(V_scroll_value).w
		move.l	d1,-(sp)
		dmaFillVRAM 0,$0000,$10000	; clear entire VRAM
		move.l	(sp)+,d1
		rts
; End of function Init_VDP

; ---------------------------------------------------------------------------
VDP_register_values:
		dc.w $8004 ; H-int disabled
		dc.w $8134 ; V-int enabled, display blanked, DMA enabled, 224 line display
		dc.w $8230 ; Scroll A PNT base $C000
		dc.w $8320 ; Window PNT base $8000
		dc.w $8407 ; Scroll B PNT base $E000
		dc.w $857C ; Sprite attribute table base $F800
		dc.w $8600
		dc.w $8700 ; Backdrop color is color 0 of the first palette line
		dc.w $8800
		dc.w $8900
		dc.w $8A00
		dc.w $8B00 ; Full-screen horizontal and vertical scrolling
		dc.w $8C81 ; 40 cell wide display, no interlace
		dc.w $8D3C ; Horizontal scroll table base $F000
		dc.w $8E00
		dc.w $8F02 ; Auto-ncrement is 2
		dc.w $9001 ; Scroll planes are 64x32 cells
		dc.w $9100
		dc.w $9200 ; Window disabled

; =============== S U B R O U T I N E =======================================


Clear_DisplayData:
		stopZ80
		dmaFillVRAM 0,$0000,$40

		tst.w	(Competition_mode).w
		beq.s	Clear_DisplayData_No2P
		dmaFillVRAM 0,$8000,$4000
		bra.s	Clear_DisplayData_Cont
; ---------------------------------------------------------------------------

Clear_DisplayData_No2P:
		dmaFillVRAM 0,$C000,$1000	; clear plane A PNT
		dmaFillVRAM 0,$E000,$1000	; clear plane B PNT

Clear_DisplayData_Cont:
		clr.l	(V_scroll_value).w
		clearRAM Sprite_table_buffer,$284
		clearRAM H_scroll_buffer,$404

		startZ80
		rts
; End of function Clear_DisplayData



; =============== S U B R O U T I N E =======================================


SndDrvInit:
		move.w	#$100,(Z80_bus_request).l


;SDI_Wait:	btst	#0,(Z80_bus_request).l		; has the Z80 stopped?
;		bne.s	SDI_Wait			; if not, branch
	move.w	#$1000,d1
	dbf	d1,*
		move.w	#$100,(Z80_reset).l	; release Z80 reset

		lea	($A00000).l,a1			; load Z80 RAM
		moveq	#$00,d0				; clear d0
		move.w	#$2000-1,d1			; set size of RAM to clear

SDI_ClearZ80:
		move.b	d0,(a1)+			; clear Z80 RAM
		dbf	d1,SDI_ClearZ80			; repeat until RAM is all cleared


		lea	(z80_SoundDriver).l,a0
		lea	(Z80_RAM).l,a1
		jsr	Kos_Decomp.w
		lea	(Z80_Snd_Driver2).l,a0
		lea	(Z80_RAM+$1300).l,a1
		jsr	Kos_Decomp.w

		lea	(Z80_Blank_Dat).l,a0
		lea	(Z80_RAM+zDataStart).l,a1
		move.w	#$F,d0

-		move.b	(a0)+,(a1)+
		dbf	d0,-
		btst	#6,(Graphics_flags).w
		beq.s	+
		move.b	#1,(Z80_RAM+zPalFlag).l	; set PAL mode flag
+
		move.w	#0,(Z80_reset).l	; reset Z80
		nop
		nop
		nop
		nop
		move.w	#$100,(Z80_reset).l	; release reset
		startZ80
		rts
; End of function SndDrvInit

; ---------------------------------------------------------------------------
Z80_Blank_Dat:	dc.b  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

; ===========================================================================
; ---------------------------------------------------------------------------
; Pausing/unpausing loop
; ---------------------------------------------------------------------------
; Pause_Game: Pause_Main:

		include	"General\Pause\Pause Game.asm"

; ===========================================================================
; ---------------------------------------------------------------------------
; Copies a plane map to a plane PNT
; Inputs:
; a1 = map address
; d0 = VDP command to write to the PNT
; d1 = number of cells in a row - 1
; d2 = number of cell rows - 1
; ---------------------------------------------------------------------------

; =============== S U B R O U T I N E =======================================


Plane_Map_To_VRAM:
		lea	(VDP_data_port).l,a6
		move.l	#$800000,d4	; row increment value

-		move.l	d0,VDP_control_port-VDP_data_port(a6)
		move.w	d1,d3

-		move.w	(a1)+,(a6)
		dbf	d3,-	; copy one row
		add.l	d4,d0	; move onto next row
		dbf	d2,--	; and copy it
		rts
; End of function Plane_Map_To_VRAM

; ---------------------------------------------------------------------------
; Copies a plane map to a plane PNT, used for a 128-cell wide plane
; Inputs:
; a1 = map address
; d0 = VDP command to write to the PNT
; d1 = number of cells in a row - 1
; d2 = number of cell rows - 1
; ---------------------------------------------------------------------------

; =============== S U B R O U T I N E =======================================


Plane_Map_To_VRAM_2:
		lea	(VDP_data_port).l,a6
		move.l	#$1000000,d4	; row increment value

-		move.l	d0,VDP_control_port-VDP_data_port(a6)
		move.w	d1,d3

-		move.w	(a1)+,(a6)
		dbf	d3,-	; copy one row
		add.l	d4,d0	; move onto next row
		dbf	d2,--	; and copy it
		rts

; =============== S U B R O U T I N E =======================================


Process_DMA_Queue:
		lea	(VDP_control_port).l,a5
		lea	(DMA_queue).w,a1

.loop:
		move.w	(a1)+,d0	; has a stop token been encountered?
		beq.s	.stop	; if it has, branch
		move.w	d0,(a5)
		move.l	(a1)+,(a5)
		move.l	(a1)+,(a5)
		move.l	(a1)+,(a5)
		cmpa.w	#DMA_queue_slot,a1	; has the end of the queue been reached?
		bne.s	.loop	; if not, loop

.stop:
		clr.w	(DMA_queue).w
		move.w	#DMA_queue,(DMA_queue_slot).w
		rts
; End of function Process_DMA_Queue

; ---------------------------------------------------------------------------
; Enigma decompression subroutine
; Inputs:
; a0 = compressed data location
; a1 = destination (in RAM)
; d0 = starting art tile
; See http://www.segaretro.org/Enigma_compression for format description
; ---------------------------------------------------------------------------

; =============== S U B R O U T I N E =======================================

Eni_Decomp:
		movem.l	d0-d7/a1-a5,-(sp)
		movea.w	d0,a3	; store starting art tile
		move.b	(a0)+,d0
		ext.w	d0
		movea.w	d0,a5	; store number of bits in inline copy value
		move.b	(a0)+,d4
		lsl.b	#3,d4	; store PCCVH flags bitfield
		movea.w	(a0)+,a2
		adda.w	a3,a2	; store incremental copy word
		movea.w	(a0)+,a4
		adda.w	a3,a4	; store literal copy word
		move.b	(a0)+,d5
		asl.w	#8,d5
		move.b	(a0)+,d5	; get first word in format list
		moveq	#$10,d6		; initial shift value

Eni_Decomp_Loop:
		moveq	#7,d0	; assume a format list entry is 7 bits
		move.w	d6,d7
		sub.w	d0,d7
		move.w	d5,d1
		lsr.w	d7,d1
		andi.w	#$7F,d1	; get format list entry
		move.w	d1,d2	; and copy it
		cmpi.w	#$40,d1	; is the high bit of the entry set?
		bhs.s	+
		moveq	#6,d0	; if it isn't, the entry is actually 6 bits
		lsr.w	#1,d2
+
		bsr.w	Eni_Decomp_FetchByte
		andi.w	#$F,d2	; get repeat count
		lsr.w	#4,d1
		add.w	d1,d1
		jmp	Eni_Decomp_Index(pc,d1.w)
; ---------------------------------------------------------------------------

Eni_Decomp_00:
		move.w	a2,(a1)+	; copy incremental copy word
		addq.w	#1,a2	; increment it
		dbf	d2,Eni_Decomp_00	; repeat
		bra.s	Eni_Decomp_Loop
; ---------------------------------------------------------------------------

Eni_Decomp_01:
		move.w	a4,(a1)+	; copy literal copy word
		dbf	d2,Eni_Decomp_01	; repeat
		bra.s	Eni_Decomp_Loop
; ---------------------------------------------------------------------------

Eni_Decomp_100:
		bsr.w	Eni_Decomp_FetchInlineValue

-		move.w	d1,(a1)+	; copy inline value
		dbf	d2,-	; repeat
		bra.s	Eni_Decomp_Loop
; ---------------------------------------------------------------------------

Eni_Decomp_101:
		bsr.w	Eni_Decomp_FetchInlineValue

-		move.w	d1,(a1)+	; copy inline value
		addq.w	#1,d1	; increment
		dbf	d2,-	; repeat
		bra.s	Eni_Decomp_Loop
; ---------------------------------------------------------------------------

Eni_Decomp_110:
		bsr.w	Eni_Decomp_FetchInlineValue

-		move.w	d1,(a1)+	; copy inline value
		subq.w	#1,d1	; decrement
		dbf	d2,-	; repeat
		bra.s	Eni_Decomp_Loop
; ---------------------------------------------------------------------------

Eni_Decomp_111:
		cmpi.w	#$F,d2
		beq.s	Eni_Decomp_Done

-		bsr.w	Eni_Decomp_FetchInlineValue	; fetch new inline value
		move.w	d1,(a1)+	; copy it
		dbf	d2,-	; and repeat
		bra.s	Eni_Decomp_Loop
; ---------------------------------------------------------------------------

Eni_Decomp_Index:
		bra.s	Eni_Decomp_00
; ---------------------------------------------------------------------------
		bra.s	Eni_Decomp_00
; ---------------------------------------------------------------------------
		bra.s	Eni_Decomp_01
; ---------------------------------------------------------------------------
		bra.s	Eni_Decomp_01
; ---------------------------------------------------------------------------
		bra.s	Eni_Decomp_100
; ---------------------------------------------------------------------------
		bra.s	Eni_Decomp_101
; ---------------------------------------------------------------------------
		bra.s	Eni_Decomp_110
; ---------------------------------------------------------------------------
		bra.s	Eni_Decomp_111
; ---------------------------------------------------------------------------

Eni_Decomp_Done:
		subq.w	#1,a0	; go back by one byte
		cmpi.w	#$10,d6
		bne.s	+
		subq.w	#1,a0	; and another one if needed
+
		move.w	a0,d0
		lsr.w	#1,d0
		bcc.s	+
		addq.w	#1,a0	; make sure it's an even address
+
		movem.l	(sp)+,d0-d7/a1-a5
		rts
; End of function Eni_Decomp

; ---------------------------------------------------------------------------
; Part of the Enigma decompressor
; Fetches an inline copy value and stores it in d1
; ---------------------------------------------------------------------------

; =============== S U B R O U T I N E =======================================


Eni_Decomp_FetchInlineValue:
		move.w	a3,d3	; copy starting art tile
		move.b	d4,d1	; copy PCCVH bitfield
		add.b	d1,d1	; is the priority bit set?
		bcc.s	+	; if not, branch
		subq.w	#1,d6
		btst	d6,d5	; is the priority bit set in the inline render flags?
		beq.s	+	; if not, branch
		ori.w	#$8000,d3	; otherwise set priority bit in art tile
+
		add.b	d1,d1	; is the high palette line bit set?
		bcc.s	+	; if not, branch
		subq.w	#1,d6
		btst	d6,d5
		beq.s	+
		addi.w	#$4000,d3
+
		add.b	d1,d1	; is the low palette line bit set?
		bcc.s	+	; if not, branch
		subq.w	#1,d6
		btst	d6,d5
		beq.s	+
		addi.w	#$2000,d3
+
		add.b	d1,d1	; is the vertical flip flag set?
		bcc.s	+	; if not, branch
		subq.w	#1,d6
		btst	d6,d5
		beq.s	+
		ori.w	#$1000,d3
+
		add.b	d1,d1	; is the horizontal flip flag set?
		bcc.s	+	; if not, branch
		subq.w	#1,d6
		btst	d6,d5
		beq.s	+
		ori.w	#$800,d3
+
		move.w	d5,d1
		move.w	d6,d7
		sub.w	a5,d7	; subtract length in bits of inline copy value
		bcc.s	.enoughBits	; branch if a new word doesn't need to be read
		move.w	d7,d6
		addi.w	#$10,d6
		neg.w	d7	; calculate bit deficit
		lsl.w	d7,d1	; and make space for that many bits
		move.b	(a0),d5	; get next byte
		rol.b	d7,d5	; and rotate the required bits into the lowest positions
		add.w	d7,d7
		and.w	Eni_Decomp_Masks-2(pc,d7.w),d5
		add.w	d5,d1	; combine upper bits with lower bits

.maskValue:
		move.w	a5,d0	; get length in bits of inline copy value
		add.w	d0,d0
		and.w	Eni_Decomp_Masks-2(pc,d0.w),d1	; mask value appropriately
		add.w	d3,d1	; add starting art tile
		move.b	(a0)+,d5
		lsl.w	#8,d5
		move.b	(a0)+,d5	; get next word
		rts
; ---------------------------------------------------------------------------

.enoughBits:
		beq.s	.justEnough	; if the word has been exactly exhausted, branch
		lsr.w	d7,d1	; get inline copy value
		move.w	a5,d0
		add.w	d0,d0
		and.w	Eni_Decomp_Masks-2(pc,d0.w),d1	; and mask it appropriately
		add.w	d3,d1	; add starting art tile
		move.w	a5,d0
		bra.s	Eni_Decomp_FetchByte
; ---------------------------------------------------------------------------

.justEnough:
		moveq	#$10,d6	; reset shift value
		bra.s	.maskValue
; End of function Eni_Decomp_FetchInlineValue

; ---------------------------------------------------------------------------
Eni_Decomp_Masks:
		dc.w     1
		dc.w     3
		dc.w     7
		dc.w    $F
		dc.w   $1F
		dc.w   $3F
		dc.w   $7F
		dc.w   $FF
		dc.w  $1FF
		dc.w  $3FF
		dc.w  $7FF
		dc.w  $FFF
		dc.w $1FFF
		dc.w $3FFF
		dc.w $7FFF
		dc.w $FFFF

; ---------------------------------------------------------------------------
; Part of the Enigma decompressor, fetches the next byte if needed
; ---------------------------------------------------------------------------

; =============== S U B R O U T I N E =======================================


Eni_Decomp_FetchByte:
		sub.w	d0,d6	; subtract length of current entry from shift value so that next entry is read next time around
		cmpi.w	#9,d6	; does a new byte need to be read?
		bhs.s	+	; if not, branch
		addq.w	#8,d6
		asl.w	#8,d5
		move.b	(a0)+,d5
+
		rts
; End of function Eni_Decomp_FetchByte

; ---------------------------------------------------------------------------
; Called at the end of each frame to perform vertical synchronization
; ---------------------------------------------------------------------------

; =============== S U B R O U T I N E =======================================


Wait_VSync:
		move	#$2300,sr

-		tst.b	(V_int_routine).w
		bne.s	-	; wait until V-int's run
		rts
; ---------------------------------------------------------------------------

AnPal_Load:
		bsr.w	SuperHyper_PalCycle
		moveq	#0,d2
		moveq	#0,d0
		move.w	(Current_zone_and_act).w,d0
		ror.b	#1,d0
		lsr.w	#6,d0
		move.w	OffsAnPal(pc,d0.w),d0
		jmp	OffsAnPal(pc,d0.w)
; ---------------------------------------------------------------------------
OffsAnPal:	dc.w AnPal_AIZ1-OffsAnPal
		dc.w AnPal_AIZ2-OffsAnPal
		dc.w AnPal_HCZ1-OffsAnPal
		dc.w AnPal_None2-OffsAnPal
		dc.w AnPal_None-OffsAnPal
		dc.w AnPal_None-OffsAnPal
		dc.w AnPal_CNZ-OffsAnPal
		dc.w AnPal_CNZ-OffsAnPal
		dc.w AnPal_FBZ-OffsAnPal
		dc.w AnPal_FBZ-OffsAnPal
		dc.w AnPal_ICZ-OffsAnPal
		dc.w AnPal_ICZ-OffsAnPal
		dc.w AnPal_LBZ1-OffsAnPal
		dc.w AnPal_LBZ2-OffsAnPal
		dc.w AnPal_None-OffsAnPal
		dc.w AnPal_None-OffsAnPal
		dc.w AnPal_SOZ1-OffsAnPal
		dc.w AnPal_SOZ2-OffsAnPal
		dc.w AnPal_LRZ1-OffsAnPal
		dc.w AnPal_LRZ2-OffsAnPal
		dc.w AnPal_None-OffsAnPal
		dc.w AnPal_None-OffsAnPal
		dc.w AnPal_DEZ1-OffsAnPal
		dc.w AnPal_DEZ2-OffsAnPal
		dc.w AnPal_None-OffsAnPal
		dc.w AnPal_None-OffsAnPal
		dc.w AnPal_None-OffsAnPal
		dc.w AnPal_None-OffsAnPal
		dc.w AnPal_None-OffsAnPal
		dc.w AnPal_None-OffsAnPal
		dc.w AnPal_BPZ-OffsAnPal
		dc.w AnPal_BPZ-OffsAnPal
		dc.w AnPal_None-OffsAnPal
		dc.w AnPal_None-OffsAnPal
		dc.w AnPal_CGZ-OffsAnPal
		dc.w AnPal_CGZ-OffsAnPal
		dc.w AnPal_EMZ-OffsAnPal
		dc.w AnPal_EMZ-OffsAnPal
		dc.w AnPal_None-OffsAnPal
		dc.w AnPal_None-OffsAnPal
		dc.w AnPal_Pachinko-OffsAnPal
		dc.w AnPal_Pachinko-OffsAnPal
		dc.w AnPal_Slots-OffsAnPal
		dc.w AnPal_Slots-OffsAnPal
		dc.w AnPal_LRZ3-OffsAnPal
		dc.w AnPal_HPZ_A-OffsAnPal
		dc.w AnPal_None-OffsAnPal
		dc.w AnPal_HPZ_A-OffsAnPal
; ---------------------------------------------------------------------------

AnPal_None:
		rts

; =============== S U B R O U T I N E =======================================


AnPal_AIZ1:
		move.b	(AIZ_Palette_Flag).w,d0
		bne.s	loc_221E
		subq.w	#1,(PalCyc_Counters+$2).w
		bpl.s	locret_221C
		move.w	#7,(PalCyc_Counters+$2).w
		move.w	(PalCyc_Counters).w,d0
		addq.w	#8,(PalCyc_Counters).w
		andi.w	#$18,d0
		lea	(AnPal_PalAIZ1_1).l,a0
		move.l	(a0,d0.w),(Normal_palette_line_3+$16).w
		move.l	4(a0,d0.w),(Normal_palette_line_3+$1A).w
		tst.b	(PalCyc_Counters2).w
		bne.s	locret_221C
		move.w	(PalCyc_Counters2+$2).w,d0
		addq.w	#6,(PalCyc_Counters2+$2).w
		cmpi.w	#$30,(PalCyc_Counters2+$2).w
		blo.s	loc_220A
		move.w	#0,(PalCyc_Counters2+$2).w

loc_220A:
		lea	(AnPal_PalAIZ1_2).l,a0
		move.l	(a0,d0.w),(Normal_palette_line_4+$18).w
		move.w	4(a0,d0.w),(Normal_palette_line_4+$1C).w

locret_221C:
		rts
; ---------------------------------------------------------------------------

loc_221E:
		subq.w	#1,(PalCyc_Counters+$2).w
		bpl.s	locret_227A
		move.w	#9,(PalCyc_Counters+$2).w
		move.w	(PalCyc_Counters).w,d0
		addq.w	#8,(PalCyc_Counters).w
		cmpi.w	#$50,(PalCyc_Counters).w
		blo.s	loc_2240
		move.w	#0,(PalCyc_Counters).w

loc_2240:
		lea	(AnPal_PalAIZ1_3).l,a0
		move.l	(a0,d0.w),(Normal_palette_line_4+$4).w

loc_224C:
		move.l	4(a0,d0.w),(Normal_palette_line_4+$8).w
		move.w	(PalCyc_Counters2+$2).w,d0
		addq.w	#6,(PalCyc_Counters2+$2).w
		cmpi.w	#$3C,(PalCyc_Counters2+$2).w
		blo.s	loc_2268
		move.w	#0,(PalCyc_Counters2+$2).w

loc_2268:
		lea	(AnPal_PalAIZ1_4).l,a0
		move.l	(a0,d0.w),(Normal_palette_line_4+$1A).w
		move.w	4(a0,d0.w),(Normal_palette_line_4+$1E).w

locret_227A:
		rts
; End of function AnPal_AIZ1

; ---------------------------------------------------------------------------

AnPal_AIZ2:
		subq.w	#1,(PalCyc_Counters+$2).w
		bpl.s	loc_22F6
		move.w	#5,(PalCyc_Counters+$2).w
		move.w	(PalCyc_Counters).w,d0
		addq.w	#8,(PalCyc_Counters).w
		andi.w	#$18,d0
		lea	(AnPal_PalAIZ2_1).l,a0
		move.l	(a0,d0.w),(Normal_palette_line_4+$18).w
		move.l	4(a0,d0.w),(Normal_palette_line_4+$1C).w
		move.w	(PalCyc_Counters2+$2).w,d0
		addq.w	#6,(PalCyc_Counters2+$2).w
		cmpi.w	#$30,(PalCyc_Counters2+$2).w
		blo.s	loc_22BC
		move.w	#0,(PalCyc_Counters2+$2).w

loc_22BC:
		lea	(AnPal_PalAIZ2_2).l,a0
		cmpi.w	#$3800,(Camera_X_pos).w
		blo.s	loc_22D0
		lea	(AnPal_PalAIZ2_3).l,a0

loc_22D0:
		move.w	(a0,d0.w),(Normal_palette_line_3+$8).w
		move.w	2(a0,d0.w),(Normal_palette_line_3+$10).w
		move.w	4(a0,d0.w),(Normal_palette_line_4+$16).w
		move.w	#$A0E,(Normal_palette_line_3+$1C).w
		cmpi.w	#$1C0,(Camera_X_pos).w
		bhs.s	loc_22F6
		move.w	4(a0,d0.w),(Normal_palette_line_3+$1C).w

loc_22F6:
		subq.w	#1,(PalCyc_Counters2+$8).w
		bpl.s	locret_2332
		move.w	#1,(PalCyc_Counters2+$8).w
		move.w	(PalCyc_Counters2+$4).w,d0
		addq.w	#2,(PalCyc_Counters2+$4).w
		cmpi.w	#$34,(PalCyc_Counters2+$4).w
		blo.s	loc_2318
		move.w	#0,(PalCyc_Counters2+$4).w

loc_2318:
		lea	(AnPal_PalAIZ2_4).l,a0
		cmpi.w	#$3800,(Camera_X_pos).w
		blo.s	loc_232C
		lea	(AnPal_PalAIZ2_5).l,a0

loc_232C:
		move.w	(a0,d0.w),(Normal_palette_line_4+$2).w

locret_2332:
		rts

; =============== S U B R O U T I N E =======================================


AnPal_HCZ1:
		subq.w	#1,(PalCyc_Counters+$2).w
		bpl.s	locret_2380
		move.w	#7,(PalCyc_Counters+$2).w
		tst.b	(PalCyc_Counters2).w
		beq.s	loc_234C
		move.w	#0,(PalCyc_Counters+$2).w

loc_234C:
		lea	(AnPal_PalHCZ1).l,a0
		move.w	(PalCyc_Counters).w,d0
		addq.w	#8,(PalCyc_Counters).w
		cmpi.w	#$20,(PalCyc_Counters).w
		blo.s	loc_2368
		move.w	#0,(PalCyc_Counters).w

loc_2368:
		move.l	(a0,d0.w),(Normal_palette_line_3+$6).w
		move.l	4(a0,d0.w),(Normal_palette_line_3+$A).w
		move.l	(a0,d0.w),(Water_palette_line_3+$6).w
		move.l	4(a0,d0.w),(Water_palette_line_3+$A).w

locret_2380:
		rts
; End of function AnPal_HCZ1

; ---------------------------------------------------------------------------

AnPal_None2:
		rts
; ---------------------------------------------------------------------------

AnPal_CNZ:
		subq.w	#1,(PalCyc_Counters+$2).w
		bpl.s	loc_23CA
		move.w	#3,(PalCyc_Counters+$2).w
		lea	(AnPal_PalCNZ_1).l,a0
		move.w	(PalCyc_Counters).w,d0
		addq.w	#6,(PalCyc_Counters).w
		cmpi.w	#$60,(PalCyc_Counters).w
		blo.s	loc_23AC
		move.w	#0,(PalCyc_Counters).w

loc_23AC:
		move.l	(a0,d0.w),(Normal_palette_line_4+$12).w
		move.w	4(a0,d0.w),(Normal_palette_line_4+$16).w
		lea	(AnPal_PalCNZ_2).l,a0
		move.l	(a0,d0.w),(Water_palette_line_4+$12).w
		move.w	4(a0,d0.w),(Water_palette_line_4+$16).w

loc_23CA:
		lea	(AnPal_PalCNZ_3).l,a0
		move.w	(PalCyc_Counters2+$2).w,d0
		addq.w	#6,(PalCyc_Counters2+$2).w
		cmpi.w	#$B4,(PalCyc_Counters2+$2).w
		blo.s	loc_23E6
		move.w	#0,(PalCyc_Counters2+$2).w

loc_23E6:
		move.l	(a0,d0.w),(Normal_palette_line_3+$12).w
		move.w	4(a0,d0.w),(Normal_palette_line_3+$16).w
		lea	(AnPal_PalCNZ_4).l,a0
		move.l	(a0,d0.w),(Water_palette_line_3+$12).w
		move.w	4(a0,d0.w),(Water_palette_line_3+$16).w
		subq.w	#1,(PalCyc_Counters2+$8).w
		bpl.s	locret_243E
		move.w	#2,(PalCyc_Counters2+$8).w
		lea	(AnPal_PalCNZ_5).l,a0
		move.w	(PalCyc_Counters2+$4).w,d0
		addq.w	#4,(PalCyc_Counters2+$4).w
		cmpi.w	#$40,(PalCyc_Counters2+$4).w
		blo.s	loc_242C
		move.w	#0,(PalCyc_Counters2+$4).w

loc_242C:
		move.l	(a0,d0.w),(Normal_palette_line_3+$E).w
		lea	(AnPal_PalCNZ_5).l,a0
		move.l	(a0,d0.w),(Water_palette_line_3+$E).w

locret_243E:
		rts
; ---------------------------------------------------------------------------

AnPal_FBZ:
		tst.b	(Level_frame_counter+1).w
		bne.s	locret_244C
		bchg	#0,(__u_F7C1).w

locret_244C:
		rts
; ---------------------------------------------------------------------------

AnPal_ICZ:
		subq.w	#1,(PalCyc_Counters+$2).w
		bpl.s	loc_247C
		move.w	#5,(PalCyc_Counters+$2).w
		lea	(AnPal_PalICZ_1).l,a0
		move.w	(PalCyc_Counters).w,d0
		addq.w	#4,(PalCyc_Counters).w
		cmpi.w	#$40,(PalCyc_Counters).w
		blo.s	loc_2476
		move.w	#0,(PalCyc_Counters).w

loc_2476:
		move.l	(a0,d0.w),(Normal_palette_line_3+$1C).w

loc_247C:
		subq.w	#1,(PalCyc_Counters2+$8).w
		bpl.s	loc_24B0
		move.w	#9,(PalCyc_Counters2+$8).w
		lea	(AnPal_PalICZ_2).l,a0
		move.w	(PalCyc_Counters2+$2).w,d0
		addq.w	#4,(PalCyc_Counters2+$2).w
		cmpi.w	#$48,(PalCyc_Counters2+$2).w
		blo.s	loc_24A4
		move.w	#0,(PalCyc_Counters2+$2).w

loc_24A4:
		tst.w	(ScrEvents_D).w
		beq.s	loc_24B0
		move.l	(a0,d0.w),(Normal_palette_line_4+$1C).w

loc_24B0:
		subq.w	#1,(PalCyc_Counters2+$A).w
		bpl.s	locret_2506
		move.w	#7,(PalCyc_Counters2+$A).w
		lea	(AnPal_PalICZ_3).l,a0
		move.w	(PalCyc_Counters2+$4).w,d0
		addq.w	#4,(PalCyc_Counters2+$4).w
		cmpi.w	#$18,(PalCyc_Counters2+$4).w
		blo.s	loc_24D8
		move.w	#0,(PalCyc_Counters2+$4).w

loc_24D8:
		tst.w	(ScrEvents_D).w
		beq.s	loc_24E4
		move.l	(a0,d0.w),(Normal_palette_line_4+$18).w

loc_24E4:
		lea	(AnPal_PalICZ_4).l,a0
		move.w	(PalCyc_Counters2+$6).w,d0
		addq.w	#4,(PalCyc_Counters2+$6).w
		cmpi.w	#$40,(PalCyc_Counters2+$6).w
		blo.s	loc_2500
		move.w	#0,(PalCyc_Counters2+$6).w

loc_2500:
		move.l	(a0,d0.w),(Normal_palette_line_3+$18).w

locret_2506:
		rts
; ---------------------------------------------------------------------------

AnPal_LBZ1:
		lea	(AnPal_PalLBZ1).l,a0
		bra.s	loc_2516
; ---------------------------------------------------------------------------

AnPal_LBZ2:
		lea	(AnPal_PalLBZ2).l,a0

loc_2516:
		subq.w	#1,(PalCyc_Counters+$2).w
		bpl.s	locret_2544
		move.w	#3,(PalCyc_Counters+$2).w
		move.w	(PalCyc_Counters).w,d0
		addq.w	#6,(PalCyc_Counters).w
		cmpi.w	#$12,(PalCyc_Counters).w
		blo.s	loc_2538
		move.w	#0,(PalCyc_Counters).w

loc_2538:
		move.l	(a0,d0.w),(Normal_palette_line_3+$10).w
		move.w	4(a0,d0.w),(Normal_palette_line_3+$14).w

locret_2544:
		rts
; ---------------------------------------------------------------------------

AnPal_SOZ1:
		subq.w	#1,(PalCyc_Counters2+$A).w
		bpl.s	locret_257A
		move.w	#5,(PalCyc_Counters2+$A).w
		lea	(AnPal_PalSOZ1).l,a0
		move.w	(PalCyc_Counters2+$4).w,d0
		addq.w	#8,(PalCyc_Counters2+$4).w
		cmpi.w	#$20,(PalCyc_Counters2+$4).w
		blo.s	loc_256E
		move.w	#0,(PalCyc_Counters2+$4).w

loc_256E:
		move.l	(a0,d0.w),(Normal_palette_line_3+$18).w
		move.l	4(a0,d0.w),(Normal_palette_line_3+$1C).w

locret_257A:
		rts
; ---------------------------------------------------------------------------
		; unused
		move.w	#$383,(PalCyc_Counters+$2).w
		move.b	#0,(__u_F7C3).w
		move.w	(PalCyc_Counters2+$6).w,d0
		neg.b	d0
		move.b	d0,(PalCyc_Counters2).w
		move.w	#0,(PalCyc_Counters2+$8).w

AnPal_SOZ2:
		subq.w	#1,(PalCyc_Counters+$2).w
		bpl.s	loc_25C4

loc_259E:
		move.w	#$383,(PalCyc_Counters+$2).w
		cmpi.b	#5,(__u_F7C3).w
		bhs.s	loc_25C4
		addq.b	#1,(__u_F7C3).w
		btst	#0,(__u_F7C3).w
		bne.s	loc_25C4
		move.b	#2,(PalCyc_Counters2).w
		move.w	#0,(PalCyc_Counters2+$8).w

loc_25C4:
		tst.b	OptionsBits.w		; NAT: Check if alternate layout
		bmi.s	loc_262C		; if yes, do not make it dark
		tst.b	(PalCyc_Counters2).w
		beq.s	loc_262C
		subq.w	#1,(PalCyc_Counters2+$8).w
		bpl.s	loc_262C
		move.w	#3,(PalCyc_Counters2+$8).w
		tst.b	(PalCyc_Counters2).w
		bmi.s	loc_25EC
		subq.b	#1,(PalCyc_Counters2).w
		addi.w	#$34,(PalCyc_Counters2+$2).w
		addq.w	#1,(PalCyc_Counters2+$6).w
		bra.s	loc_25FA
; ---------------------------------------------------------------------------

loc_25EC:
		addq.b	#1,(PalCyc_Counters2).w
		subi.w	#$34,(PalCyc_Counters2+$2).w
		subq.w	#1,(PalCyc_Counters2+$6).w

loc_25FA:
		move.w	(PalCyc_Counters2+$2).w,d0
		lea	(AnPal_PalSOZ2_Light).l,a0
		lea	(a0,d0.w),a0
		lea	(Normal_palette_line_3+$2).w,a1
		moveq	#$A,d0

loc_260E:
		move.w	(a0)+,(a1)+
		dbf	d0,loc_260E
		lea	(Normal_palette_line_4+$2).w,a1
		moveq	#$E,d0

loc_261A:
		move.w	(a0)+,(a1)+
		dbf	d0,loc_261A
		move.w	(PalCyc_Counters2+$4).w,d0
		subq.w	#1,(PalCyc_Counters2+$A).w
		bpl.s	loc_264E
		bra.s	loc_2632
; ---------------------------------------------------------------------------

loc_262C:
		subq.w	#1,(PalCyc_Counters2+$A).w
		bpl.s	locret_266A

loc_2632:
		move.w	#5,(PalCyc_Counters2+$A).w
		move.w	(PalCyc_Counters2+$4).w,d0
		addq.w	#8,(PalCyc_Counters2+$4).w
		cmpi.w	#$20,(PalCyc_Counters2+$4).w
		blo.s	loc_264E
		move.w	#0,(PalCyc_Counters2+$4).w

loc_264E:
		lea	(AnPal_PalSOZ1).l,a0
		move.w	(PalCyc_Counters2+$6).w,d1
		lsl.w	#5,d1
		lea	(a0,d1.w),a0
		move.l	(a0,d0.w),(Normal_palette_line_3+$18).w
		move.l	4(a0,d0.w),(Normal_palette_line_3+$1C).w

locret_266A:
		rts
; ---------------------------------------------------------------------------

AnPal_LRZ1:
		subq.w	#1,(PalCyc_Counters+$2).w
		bpl.s	loc_26C2
		move.w	#$F,(PalCyc_Counters+$2).w
		move.w	(PalCyc_Counters).w,d0
		addq.w	#8,(PalCyc_Counters).w
		cmpi.w	#$80,(PalCyc_Counters).w
		blo.s	loc_268E
		move.w	#0,(PalCyc_Counters).w

loc_268E:
		lea	(AnPal_PalLRZ12_1).l,a0
		move.l	(a0,d0.w),(Normal_palette_line_3+$2).w
		move.l	4(a0,d0.w),(Normal_palette_line_3+$6).w
		move.w	(PalCyc_Counters2+$2).w,d0
		addq.w	#4,(PalCyc_Counters2+$2).w
		cmpi.w	#$1C,(PalCyc_Counters2+$2).w
		blo.s	loc_26B6
		move.w	#0,(PalCyc_Counters2+$2).w

loc_26B6:
		lea	(AnPal_PalLRZ12_2).l,a0
		move.l	(a0,d0.w),(Normal_palette_line_4+$2).w

loc_26C2:
		subq.w	#1,(PalCyc_Counters2+$8).w
		bpl.s	locret_26F0
		move.w	#7,(PalCyc_Counters2+$8).w
		move.w	(PalCyc_Counters2+$4).w,d0
		addq.w	#2,(PalCyc_Counters2+$4).w
		cmpi.w	#$22,(PalCyc_Counters2+$4).w
		blo.s	loc_26E4
		move.w	#0,(PalCyc_Counters2+$4).w

loc_26E4:
		lea	(AnPal_PalLRZ1_3).l,a0
		move.w	(a0,d0.w),(Normal_palette_line_3+$16).w

locret_26F0:
		rts
; ---------------------------------------------------------------------------

AnPal_LRZ2:
		subq.w	#1,(PalCyc_Counters+$2).w
		bpl.s	loc_2748
		move.w	#$F,(PalCyc_Counters+$2).w
		move.w	(PalCyc_Counters).w,d0
		addq.w	#8,(PalCyc_Counters).w
		cmpi.w	#$80,(PalCyc_Counters).w
		blo.s	loc_2714
		move.w	#0,(PalCyc_Counters).w

loc_2714:
		lea	(AnPal_PalLRZ12_1).l,a0
		move.l	(a0,d0.w),(Normal_palette_line_3+$2).w
		move.l	4(a0,d0.w),(Normal_palette_line_3+$6).w
		move.w	(PalCyc_Counters2+$2).w,d0
		addq.w	#4,(PalCyc_Counters2+$2).w
		cmpi.w	#$1C,(PalCyc_Counters2+$2).w
		blo.s	loc_273C
		move.w	#0,(PalCyc_Counters2+$2).w

loc_273C:
		lea	(AnPal_PalLRZ12_2).l,a0
		move.l	(a0,d0.w),(Normal_palette_line_4+$2).w

loc_2748:
		subq.w	#1,(PalCyc_Counters2+$8).w
		bpl.s	locret_277C
		move.w	#$F,(PalCyc_Counters2+$8).w
		move.w	(PalCyc_Counters2+$4).w,d0
		addq.w	#8,(PalCyc_Counters2+$4).w
		cmpi.w	#$100,(PalCyc_Counters2+$4).w
		blo.s	loc_276A
		move.w	#0,(PalCyc_Counters2+$4).w

loc_276A:
		lea	(AnPal_PalLRZ2_3).l,a0
		move.l	(a0,d0.w),(Normal_palette_line_4+$16).w
		move.l	(a0,d0.w),(Normal_palette_line_4+$1A).w

locret_277C:
		rts
; ---------------------------------------------------------------------------

AnPal_DEZ1:
		subq.w	#1,(PalCyc_Counters2+$A).w
		bpl.s	AnPal_DEZ2
		move.w	#$F,(PalCyc_Counters2+$A).w
		move.w	(PalCyc_Counters2+$4).w,d0
		addq.w	#8,(PalCyc_Counters2+$4).w
		cmpi.w	#$30,(PalCyc_Counters2+$4).w
		blo.s	loc_27A0
		move.w	#0,(PalCyc_Counters2+$4).w

loc_27A0:
		lea	(AnPal_PalDEZ1).l,a0
		move.l	(a0,d0.w),(Normal_palette_line_4+$18).w
		move.l	4(a0,d0.w),(Normal_palette_line_4+$1C).w

AnPal_DEZ2:
		subq.w	#1,(PalCyc_Counters+$2).w
		bpl.s	loc_27E0
		move.w	#4,(PalCyc_Counters+$2).w
		move.w	(PalCyc_Counters).w,d0
		addq.w	#4,(PalCyc_Counters).w
		cmpi.w	#$30,(PalCyc_Counters).w
		blo.s	loc_27D4
		move.w	#0,(PalCyc_Counters).w

loc_27D4:
		lea	(AnPal_PalDEZ12_1).l,a0
		move.l	(a0,d0.w),(Normal_palette_line_3+$1A).w

loc_27E0:
		subq.w	#1,(PalCyc_Counters2+$8).w
		bpl.s	locret_2818
		move.w	#$13,(PalCyc_Counters2+$8).w
		move.w	(PalCyc_Counters2+$2).w,d0
		addi.w	#$A,(PalCyc_Counters2+$2).w
		cmpi.w	#$28,(PalCyc_Counters2+$2).w
		blo.s	loc_2804
		move.w	#0,(PalCyc_Counters2+$2).w

loc_2804:
		lea	(AnPal_PalDEZ12_2).l,a0
		lea	(a0,d0.w),a0
		lea	(Normal_palette_line_3+$10).w,a1
		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		move.w	(a0)+,(a1)+

locret_2818:
AnPal_BPZ:
AnPal_CGZ:
AnPal_EMZ:
AnPal_Pachinko:
AnPal_Slots:
		rts
; ---------------------------------------------------------------------------

AnPal_LRZ3:
		tst.b	(PalCyc_Counters2).w
		bmi.s	locret_2ABE
		subq.w	#1,(PalCyc_Counters+$2).w
		bpl.s	loc_2A8A
		move.w	#$F,(PalCyc_Counters+$2).w
		move.w	(PalCyc_Counters).w,d0
		addq.w	#8,(PalCyc_Counters).w
		cmpi.w	#$80,(PalCyc_Counters).w
		blo.s	loc_2A78
		move.w	#0,(PalCyc_Counters).w

loc_2A78:
		lea	(AnPal_PalLRZ12_1).l,a0
		move.l	(a0,d0.w),(Normal_palette_line_3+$2).w
		move.l	4(a0,d0.w),(Normal_palette_line_3+$6).w

loc_2A8A:
		tst.b	(PalCyc_Counters2).w
		beq.s	locret_2ABE
		subq.w	#1,(PalCyc_Counters2+$8).w
		bpl.s	locret_2ABE
		move.w	#7,(PalCyc_Counters2+$8).w
		move.w	(PalCyc_Counters2+$4).w,d0
		addq.w	#4,(PalCyc_Counters2+$4).w
		cmpi.w	#$3C,(PalCyc_Counters2+$4).w
		blo.s	loc_2AB2
		move.w	#0,(PalCyc_Counters2+$4).w

loc_2AB2:
		lea	(AnPal_PalLRZ3).l,a0
		move.l	(a0,d0.w),(Normal_palette_line_4+$18).w

locret_2ABE:

		rts
; ---------------------------------------------------------------------------

AnPal_HPZ_A:
		tst.b	(PalCyc_Counters2).w
		bne.s	locret_2AF4
		subq.w	#1,(PalCyc_Counters+$2).w
		bpl.s	locret_2AF4
		move.w	#7,(PalCyc_Counters+$2).w
		move.w	(PalCyc_Counters).w,d0
		addq.w	#4,(PalCyc_Counters).w
		cmpi.w	#$28,(PalCyc_Counters).w
		blo.s	loc_2AE8
		move.w	#0,(PalCyc_Counters).w

loc_2AE8:
		lea	(AnPal_PalHPZ).l,a0
		move.l	(a0,d0.w),(Normal_palette_line_4+$2).w

locret_2AF4:

		rts
; ---------------------------------------------------------------------------
AnPal_PalAIZ1_1:	dc.w $EE8,$EE2,$EA4,$E64,$EE2,$EA4,$E64,$EE8,$EA4,$E64,$EE8,$EE2,$E64,$EE8,$EE2,$EA4

AnPal_PalAIZ1_3:	dc.w $EEC,$EEE,$EE8,$E40,$EEC,$EE8,$EE8,$EEE,$EEA,$E86,$EE8,$EE8,$EE8,$E40,$EE8,$E86
					dc.w $EE6,$EEE,$EE8,$E40,$EEA,$EE8,$EE8,$EEE,$EE8,$E86,$EE8,$EE8,$EE8,$E40,$EE8,$E86
					dc.w $EE6,$EEE,$EE8,$E40,$EE8,$EE8,$EE8,$EEE,$EEA,$E86,$EE8,$EE8,$EEC,$E40,$EE8,$E86
					dc.w $EEC,$EEE,$EE8,$E40,$EEC,$EE8,$EE8,$EEE,$EEC,$E86,$EE8,$EE8,$EEC,$E40,$EE8,$E86

AnPal_PalAIZ1_4:	dc.w $CEC,$CEE,$EEE,$CEE,$EEE,$EEE,$EEE,$EEE,$EEE,$EEE,$EEE,$EEE,$EEE,$EEE,$EEE,$EEE
					dc.w $EEE,$EEE,$EEE,$EEE,$EEE,$EE8,$EEE,$EEE,$EE8,$EE8,$EEE,$EE8,$EE8,$EE8,$EE8,$EE8
					dc.w $EE8,$EE8,$EE8,$EE8,$EE8,$EE8,$EE8,$EE8,$EE8,$AEC,$EE8,$AEC,$CEC,$AEC,$CEC,$CEC

AnPal_PalAIZ1_2:	dc.w $EA4,$E60,$EE2,$EA4,$EE8,$EA4,$E60,$EE8,$EEE,$E60,$EE2,$EE2,$EE8,$EA4,$EA4,$EE2
					dc.w $E60,$E60,$EE2,$E60,$EEE,$EE2,$E60,$EE8

AnPal_PalAIZ2_1:	dc.w $EE8,$EE2,$EC4,$EA4,$EE2,$EC4,$EA4,$EE8,$EC4,$EA4,$EE8,$EE2,$EA4,$EE8,$EE2,$EC4

AnPal_PalAIZ2_2:	dc.w  $24, $44,	$8E, $26, $46, $AE, $24, $48, $8E, $26,	$4A, $AE, $24, $4C, $8E, $26
					dc.w  $4A, $AE,	$24, $48, $8E, $24, $46, $8E

AnPal_PalAIZ2_3:	dc.w  $24, $44,	 $C, $26, $46,	$E, $24, $48,  $C, $26,	$4A,  $E, $24, $4C,  $C, $26
					dc.w  $4A,  $E,	$24, $48,  $C, $24, $46,  $C

AnPal_PalAIZ2_4:	dc.w  $6E, $6E,	$6E, $6E,$28E,$4AE,$6AE,$8CE,$8EE,$AEE,$AEE,$AEE,$AEE,$AEE,$8EE,$8EE
					dc.w $8EE,$8EE,$8CE,$8CE,$8CE,$6AE,$6AE,$4AE,$4AE,$28E

AnPal_PalAIZ2_5:	dc.w   $C,  $C,	 $C,  $C, $2C,	$E, $2E, $4E, $6E, $8E,	$8E, $8E, $8E, $8E, $6E, $4E
					dc.w  $4E, $4E,	$2E, $2E, $2E,	$E,  $E, $2C, $2C, $2C

AnPal_PalHCZ1:	dc.w $EC8,$EC0,$EA0,$E80,$EC0,$EA0,$E80,$EC8,$EA0,$E80,$EC8,$EC0,$E80,$EC8,$EC0,$EA0

AnPal_PalCNZ_1:	dc.w	0, $66,	$EE, $22, $44, $CC, $44, $22, $AA, $66,	  0, $88, $88,	 0, $66, $AA
				dc.w  $22, $44,	$CC, $44, $22, $EE, $66,   0, $EE, $88,	  0, $CC, $AA, $22, $AA, $CC
				dc.w  $44, $88,	$EE, $66, $66, $EE, $88, $44, $CC, $AA,	$22, $AA, $CC,	 0, $88, $EE

AnPal_PalCNZ_3:	dc.w $E20, $8A,$C0E,$C42, $6C,$E0E,$A64, $4C,$E0C,$884,	$2E,$E0A,$6A6,	$E,$E08,$4C6
				dc.w $20E,$E06,$2E8,$40E,$E04, $E8,$60E,$E02, $C8,$80E,$E00, $AA,$A0E,$E00, $8A,$C0E
				dc.w $E20, $6C,$E0E,$C42, $4C,$E0C,$A64, $2E,$E0A,$884,	 $E,$E08,$6A6,$20E,$E06,$4C6
				dc.w $40E,$E04,$2E8,$60E,$E02, $E8,$80E,$E00, $C8,$A0E,$E00, $AA,$C0E,$E20, $8A,$E0E
				dc.w $C42, $6C,$E0C,$A64, $4C,$E0A,$884, $2E,$E08,$6A6,	 $E,$E06,$4C6,$20E,$E04,$2E8
				dc.w $40E,$E02,	$E8,$60E,$E00, $C8,$80E,$E00, $AA,$A0E

AnPal_PalCNZ_5:	dc.w $2E0,$ECE,$4E2,$EAC,$6E4,$E8A,$8E6,$E68,$AE8,$E46,$CEA,$E24,$EEC,$E02,$EEE,$E00
				dc.w $EEC,$E02,$CEA,$E24,$AE8,$E46,$8E6,$E68,$6E4,$E8A,$4E2,$EAC,$2E0,$ECE, $E0,$EEE

AnPal_PalCNZ_2:	dc.w $800,$800,$886,$800,$800,$864,$800,$800,$842,$800,$800,$820,$820,$800,$800,$842
				dc.w $800,$800,$864,$800,$800,$886,$800,$800,$886,$820,$800,$864,$842,$800,$842,$864
				dc.w $800,$820,$886,$800,$800,$886,$820,$800,$864,$842,$800,$842,$864,$800,$820,$886

AnPal_PalCNZ_4:	dc.w $E20,$E8A,$E0A,$E42,$E6A,$E0A,$E64,$E4A,$E0A,$E84,$E2A,$E0A,$EA6,$E0A,$E08,$EC6
				dc.w $E0A,$E06,$EE8,$E0A,$E04,$EE8,$E0A,$E02,$EC8,$E0A,$E00,$EAA,$E0A,$E00,$E8A,$E0A
				dc.w $E20,$E6A,$E0A,$C42,$E4A,$E0A,$E64,$E2A,$E0A,$E84,$E0A,$E08,$EA6,$E0A,$E06,$EC6
				dc.w $E0A,$E04,$EE8,$E0A,$E02,$EE8,$E0A,$E00,$EC8,$E0A,$E00,$EAA,$E0A,$E20,$E8A,$E0A
				dc.w $E42,$E6A,$E0A,$E64,$E4A,$E0A,$E84,$E2A,$E08,$EA6,$E0A,$E06,$EC6,$E0A,$E04,$EE8
				dc.w $E0A,$E02,$EE8,$E0A,$E00,$EC8,$E0A,$E00,$EAA,$E0A,$840,$ECA,$862,$EAA,$884,$E88
				dc.w $8A6,$E66,$AE8,$E44,$CEA,$E22,$EEC,$E00,$EEC,$E00,$EEC,$E00,$CEA,$E22,$AE8,$E44
				dc.w $8A6,$E66,$884,$E88,$862,$EAA,$840,$ECA,$822,$ECA

AnPal_PalICZ_1:	dc.w $E62,$E20,$E44,$E20,$E44,$E00,$E42,$E00,$E62,$C00,$E82,$A00,$EA2,$C00,$EC0,$E00
				dc.w $EE0,$E20,$EE4,$E00,$EE4,$C00,$EE4,$A00,$EE0,$800,$EC2,$A00,$EA2,$C00,$E82,$E20

AnPal_PalICZ_2:	dc.w $E06,$E08,$E04,$E06,$C04,$E04,$C02,$C04,$A02,$C02,$A00,$A02,$800,$A00,$600,$800
				dc.w $600,$800,$600,$800,$600,$800,$800,$A00,$A00,$A02,$A02,$C02,$C02,$C04,$C04,$E04
				dc.w $E04,$E06,$E06,$E08

AnPal_PalICZ_3:	dc.w $840,$EEA,$860,$EE0,$A80,$EC0,$EC0,$A80,$A80,$EC0,$860,$EE0

AnPal_PalICZ_4:	dc.w  $E8,$CEC,	$C8,$AEA, $C8,$AEA, $A6,$6E8, $A6,$6E8,	$84, $E8, $84, $E8, $82, $C8
				dc.w  $64, $A6,	$64, $A6, $82, $C8, $84, $E8, $A6,$6E8,	$C8,$AEA, $E8,$CEC, $E8,$CEC

AnPal_PalLBZ1:	dc.w $8E0, $C0,	$80, $C0, $80,$8E0, $80,$8E0, $C0

AnPal_PalLBZ2:	dc.w $EEA,$EA4,$C62,$EA4,$C62,$EEA,$C62,$EEA,$EA4

AnPal_PalSOZ1:	dc.w $2CE,$6CE,	$AE, $6C, $6C,$2CE,$6CE, $AE, $AE, $6C,$2CE,$6CE,$6CE, $AE, $6C,$2CE
				dc.w $28A,$6AC,	$8A, $48, $48,$28A,$6AC, $8A, $8A, $48,$28A,$6AC,$6AC, $8A, $48,$28A
				dc.w $468,$668,$248, $26, $26,$468,$668,$248,$248, $26,$468,$668,$668,$248, $26,$468
				dc.w $424,$846,$224,$222,$222,$424,$846,$224,$224,$222,$424,$846,$846,$224,$222,$424
				dc.w $602,$824,$402,$200,$200,$602,$824,$402,$402,$200,$602,$824,$824,$402,$200,$602

AnPal_PalSOZ2_Light:	dc.w $EEE

AnPal_PalSOZ2_Light_2:	dc.w $8EE,$4EE,	$CE,$24C,   6,	 0,$CEA,$886,$424, $E0,$EEE,$AEE,$6EE,$4AC, $68, $46
						dc.w  $22,$8AA,$468,$224,   2,$28E,$4EE, $8C,  $C,$8CE,$6CC,$4AC, $8A,$248,   4,   0
						dc.w $8A8,$664,$422, $80,$CEE,$ACC,$6CC,$48A,$266, $46,	$22,$ACC,$468,$224,   2,$28E
						dc.w $6EE,$28C,$22C,$2CE,$28A,$268,$246,$224,$202,   0,$464,$222,$200, $40,$ACE,$8AA
						dc.w $688,$468,$244, $24, $22,$CCC,$468,$224,	2,$26C,$6EE,$28C,$24C,$88A,$668,$646
						dc.w $424,$224,$202,   0,$444,$222,$200, $40,$8CE,$888,$666,$446,$222, $22, $22,$EEE
						dc.w $468,$224,	  2,$26A,$6EE,$48C,$26C,$C46,$824,$804,$402,$202,$200,	 0,$422,$402
						dc.w $200, $40,$6AE,$664,$422,$402,$200,   0,	0,$EEE,$466,$224,   0, $46,$6EE,$48C
						dc.w $26A

AnPal_PalLRZ12_1:	dc.w  $EE, $AE,	$6E,  $E, $AE, $6E,  $E, $EE, $6E,  $E,	$EE,$2CE, $2E,$8EE,$4EE, $6E
					dc.w $AEE,$6EE,	$8E, $4E,$4EE, $6E, $2E,$8EE, $6E,  $E,	$EE,$2CE,  $E, $EE,$2CE, $6E
					dc.w  $EE, $AE,	$6E,  $E, $8E, $4E,  $C, $CE, $2E,  $A,	$AC, $6E,   8, $8E, $4C,  $C
					dc.w  $AC, $6E,	$2E,  $A, $8E, $4E,  $C, $CE, $6E,  $E,	$EE, $AE,  $E, $EE, $AE, $6E

AnPal_PalLRZ12_2:	dc.w $224,$224,$224,$424,$224,$426,$426,$224,$424,$224,$224,$224,$224,$224,$224,$422
					dc.w $422,$422

AnPal_PalLRZ1_3:	dc.w $624,$624,$624,$624,$624,$624,$626,$626,$826,$826,$826,$826,$826,$826,$826,$626
					dc.w $626

AnPal_PalLRZ2_3:	dc.w $824,$C44,$E2A,$EAE,$824,$C44,$E2A,$EAE,$824,$C44,$E2A,$EAE,$824,$C44,$E48,$EAC
					dc.w $822,$C44,$E66,$EAA,$822,$C44,$E66,$EAA,$822,$C44,$E66,$EAA,$842,$C64,$EA4,$EC6
					dc.w $642,$A82,$CC2,$EE0,$642,$A82,$CC2,$EE0,$642,$A82,$CC2,$EE0,$642,$882,$AC2,$CE0
					dc.w $642,$682,$8C2,$8E0,$642,$682,$8C2,$8E0,$642,$682,$8C2,$8E0,$642,$486,$4C8,$4E8
					dc.w $442,$288,$2CA,$2EC,$442,$288,$2CC,$2EE,$442,$288,$2CA,$2EC,$642,$486,$4C8,$4E8
					dc.w $642,$682,$8C2,$8E0,$642,$882,$AC2,$CE0,$642,$A82,$CC2,$EE0,$842,$C64,$EA4,$EC6
					dc.w $822,$C44,$E66,$EAA,$824,$C44,$E48,$EAC,$824,$C44,$E2A,$EAE,$826,$C46,$E4A,$E8E
					dc.w $624,$A48,$C6C,$E6E,$624,$A48,$C6C,$E6E,$624,$A48,$C6C,$E6E,$826,$C46,$E4A,$E8E

AnPal_PalDEZ12_1:	dc.w  $E0,   0,	  0,$E0E,$E00,	 0,   0, $EE,  $E,   0,	  0,$EE0,$EE0,	 0,   0,  $E
					dc.w  $EE,   0,	  0,$E00,$E0E,	 0,   0, $E0

AnPal_PalDEZ12_2:	dc.w  $8E, $6C,	$4A, $28,$6AE,$28C,$26A, $4A,$226,$4AC,$48A,$468,$248,$424,$4AA,$28C
					dc.w $26A, $4A,$226,$4AC

AnPal_PalDEZ1:	dc.w $8AC,$68A,$468,$246,$246,$8AC,$68A,$468,$468,$246,$8AC,$68A,$68A,$468,$246,$8AC
				dc.w $468,$246,$8AC,$68A,$246,$8AC,$68A,$468

AnPal_PalLRZ3:	dc.w $424, $AE,$424, $AE,$424, $AE,$426, $8E,$428, $6E,$42A, $4E,$42C, $2E,$42E,  $E
				dc.w $42E,  $E,$42E,  $E,$42C, $2E,$42A, $4E,$428, $6E,$426, $8E,$424, $AE

AnPal_PalHPZ:	dc.w   $E,  $A,	 $E,  $A,  $E,	$A,  $E,  $A,  $C,   8,	 $A,   6,   8,	 4,   8,   4
				dc.w   $A,   6,	 $C,   8

; =============== S U B R O U T I N E =======================================

; SuperSonic_PalFlash:
SuperHyper_PalCycle:
		move.b	(Super_Hyper_palette_status).w,d0	; 0 = off | 1 = fading | -1 = fading done
		beq.w	locret_37EC			; return, if player isn't super
		bmi.w	SuperHyper_PalCycle_Normal	; branch, if fade-in is done
		subq.b	#1,d0
		bne.w	SuperHyper_PalCycle_Revert	; branch for values greater than 1

		; fade from Sonic's to Super Sonic's palette
		; run frame timer
		subq.b	#1,(Palette_timer).w
		bpl.w	locret_37EC
		move.b	#1,(Palette_timer).w

		; Tails and Knuckles only
		; Only Sonic has a fade-in; Tails and Knuckles just *pop* into their normal Super/Hyper palette cycle
		cmpi.w	#2,(Player_mode).w
		blo.s	SuperHyper_PalCycle_FadeIn
		move.b	#-1,(Super_Hyper_palette_status).w	; -1 = fading done
		move.w	#0,(Palette_frame).w			; Used by Knuckles and Tails' Super Flickies
		move.b	#0,(Palette_frame_Tails).w		; Used by Tails
		move.b	#0,(Player_1+object_control).w		; restore Player's movement
		rts
; ---------------------------------------------------------------------------
; loc_3792:
SuperHyper_PalCycle_FadeIn:
		; increment palette frame and update Sonic's palette
		lea	(PalCycle_SuperSonic).l,a0
		move.w	(Palette_frame).w,d0
		addq.w	#6,(Palette_frame).w			; 1 palette entry = 1 word, Sonic uses 3 shades of blue
		cmpi.w	#$24,(Palette_frame).w			; has palette cycle reached the 6th frame?
		blo.s	SuperHyper_PalCycle_SonicApply		; if not, branch
		move.b	#-1,(Super_Hyper_palette_status).w	; mark fade-in as done
		move.b	#0,(Player_1+object_control).w		; restore Sonic's movement
; loc_37B4:
SuperHyper_PalCycle_SonicApply:
		lea	(Normal_palette+$4).w,a1
		move.l	(a0,d0.w),(a1)+	; Write first two palette entries
		move.w	4(a0,d0.w),(a1) ; Write last palette entry

; SuperHyper_PalCycle_Underwater:
		tst.b	(Water_flag).w
		beq.s	locret_37EC
		lea	(PalCycle_SuperSonicUnderwaterAIZICZ).l,a0	; Load underwater fade-in palette
		tst.b	(Current_zone).w				; Is Sonic in Angel Island Zone?
		beq.s	SuperHyper_PalCycle_ApplyUnderwater		; If so, branch
		cmpi.b	#5,(Current_zone).w				; Is Sonic in IceCap Zone?
		beq.s	SuperHyper_PalCycle_ApplyUnderwater		; If so, branch
		lea	(PalCycle_SuperSonicUnderwaterHCZCNZLBZ).l,a0	; Load alternate underwater fade-in palette
; loc_37E0:
SuperHyper_PalCycle_ApplyUnderwater:
		lea	(Water_palette+$4).w,a1
		move.l	(a0,d0.w),(a1)+	; Write first two palette entries
		move.w	4(a0,d0.w),(a1) ; Write last palette entry

locret_37EC:
		rts
; ---------------------------------------------------------------------------
; loc_37EE:
SuperHyper_PalCycle_Revert:	; runs the fade in transition backwards
		cmpi.w	#2,(Player_mode).w	; If Tails or Knuckles, branch, making this code Sonic-specific
		bhs.s	SuperHyper_PalCycle_RevertNotSonic

; SuperHyper_PalCycle_RevertSonic:
		; run frame timer
		subq.b	#1,(Palette_timer).w
		bpl.s	locret_37EC
		move.b	#3,(Palette_timer).w

		; decrement palette frame and update Sonic's palette
		lea	(PalCycle_SuperSonic).l,a0
		move.w	(Palette_frame).w,d0
		subq.w	#6,(Palette_frame).w	; previous frame
		bhs.s	loc_381E		; branch, if it isn't the first frame
		; The following line should be a move.w
		; This causes the fade-in to be bugged
		move.b	#0,(Palette_frame).w
		move.b	#0,(Super_Hyper_palette_status).w	; 0 = off
loc_381E:
		bra.s	SuperHyper_PalCycle_SonicApply
; ---------------------------------------------------------------------------
; loc_3820:
SuperHyper_PalCycle_RevertNotSonic:
		moveq	#0,d0
		move.w	d0,(Palette_frame).w
		move.b	d0,(Super_Hyper_palette_status).w	; 0 = off
		move.b	d0,(Palette_frame_Tails).w
		cmpi.w	#3,(Player_mode).w			; If Knuckles, branch, making this code Tails-specific
		bhs.s	SuperHyper_PalCycle_RevertKnuckles

; SuperHyper_PalCycle_RevertTails:
		lea	(PalCycle_SuperTails).l,a0		; Used here because the first set of colours is Tails' normal palette
		bsr.w	SuperHyper_PalCycle_ApplyTails
		lea	(PalCycle_SuperSonic).l,a0		; Why does Tails manipulate Sonic's palette? For his Super-form's Super Flickies
		bra.w	SuperHyper_PalCycle_Apply
; ---------------------------------------------------------------------------
; loc_384A:
SuperHyper_PalCycle_RevertKnuckles:
		lea	(PalCycle_SuperHyperKnucklesRevert).l,a0
		bra.w	SuperHyper_PalCycle_Apply
; ---------------------------------------------------------------------------
; loc_3854:
SuperHyper_PalCycle_Normal:
		cmpi.w	#2,(Player_mode).w		; If Tails...
		beq.w	SuperHyper_PalCycle_NormalTails
		cmpi.w	#3,(Player_mode).w		; ...or Knuckles, branch, making this code Sonic-specific
		beq.w	SuperHyper_PalCycle_NormalKnuckles
		tst.b	(Super_Sonic_Knux_flag).w	; If Hyper Sonic, branch
		bmi.s	SuperHyper_PalCycle_HyperSonic
; loc_386E:
SuperHyper_PalCycle_SuperSonic:	; Tails' code falls back here so the Super Flickies' palette can update
		; run frame timer
		subq.b	#1,(Palette_timer).w
		bpl.w	locret_37EC
		move.b	#6,(Palette_timer).w

		; increment palette frame and update Sonic's palette
		lea	(PalCycle_SuperSonic).l,a0
		move.w	(Palette_frame).w,d0
		addq.w	#6,(Palette_frame).w	; next frame
		cmpi.w	#$36,(Palette_frame).w	; is it the last frame?
		blo.s	loc_3898		; if not, branch
		move.w	#$24,(Palette_frame).w	; reset frame counter (Super Sonic's normal palette cycle starts at $24. Everything before that is for the palette fade)
loc_3898:
		bra.w	SuperHyper_PalCycle_SonicApply
; ---------------------------------------------------------------------------
; loc_389C:
SuperHyper_PalCycle_HyperSonic:
		; run frame timer
		subq.b	#1,(Palette_timer).w
		bpl.w	locret_37EC
		move.b	#4,(Palette_timer).w

		; increment palette frame and update Sonic's palette
		lea	(PalCycle_HyperSonic).l,a0
		move.w	(Palette_frame).w,d0
		addq.w	#6,(Palette_frame).w			; next frame
		cmpi.w	#$48,(Palette_frame).w			; is it the last frame?
		blo.s	SuperHyper_PalCycle_HyperSonicApply	; if not, branch
		move.w	#0,(Palette_frame).w			; reset frame counter
; loc_38C6:
SuperHyper_PalCycle_HyperSonicApply:
		; Redundant. SuperHyper_PalCycle_Apply does the exact same thing
		; and other areas of code do branch to it instead of duplicating the code as seen here
		lea	(Normal_palette+$4).w,a1
		move.l	(a0,d0.w),(a1)+	; Write first two palette entries
		move.w	4(a0,d0.w),(a1) ; Write last palette entry
		tst.b	(Water_flag).w
		beq.w	locret_37EC
		lea	(Water_palette+$4).w,a1
		move.l	(a0,d0.w),(a1)+	; Write first two palette entries
		move.w	4(a0,d0.w),(a1) ; Write last palette entry
		rts
; ---------------------------------------------------------------------------
; loc_38E8:
SuperHyper_PalCycle_NormalTails:
		; run frame timer
		subq.b	#1,(Palette_timer_Tails).w
		bpl.w	SuperHyper_PalCycle_SuperSonic
		move.b	#$B,(Palette_timer_Tails).w

		; increment palette frame and update Tails' palette
		lea	(PalCycle_SuperTails).l,a0
		moveq	#0,d0
		move.b	(Palette_frame_Tails).w,d0
		addq.b	#6,(Palette_frame_Tails).w	; next frame
		cmpi.b	#$24,(Palette_frame_Tails).w	; is it the last frame?
		blo.s	SuperHyper_PalCycle_ApplyTails	; if not, branch
		move.b	#0,(Palette_frame_Tails).w	; reset frame counter
		; go straight to SuperHyper_PalCycle_ApplyTails...
; End of function SuperHyper_PalCycle


; =============== S U B R O U T I N E =======================================

; sub_3914
SuperHyper_PalCycle_ApplyTails:
		; Tails gets his own because of the unique location of his palette entries
		lea	(Normal_palette+$10).w,a1
		move.l	(a0,d0.w),(a1)+		; Write first two palette entries
		move.w	4(a0,d0.w),2(a1)	; Write last palette entry
		tst.b	(Water_flag).w
		beq.w	SuperHyper_PalCycle_SuperSonic
		lea	(Water_palette+$10).w,a1
		move.l	(a0,d0.w),(a1)+		; Write first two palette entries
		move.w	4(a0,d0.w),2(a1)	; Write last palette entry
		bra.w	SuperHyper_PalCycle_SuperSonic
; End of function SuperHyper_PalCycle_ApplyTails

; ---------------------------------------------------------------------------
; loc_393C:
SuperHyper_PalCycle_NormalKnuckles:
		; run frame timer
		subq.b	#1,(Palette_timer).w
		bpl.w	locret_37EC
		move.b	#2,(Palette_timer).w

		; increment palette frame and update Knuckles' palette
		lea	(PalCycle_SuperHyperKnuckles).l,a0
		move.w	(Palette_frame).w,d0
		addq.w	#6,(Palette_frame).w			; next frame
		cmpi.w	#$3C,(Palette_frame).w			; is it the last frame?
		blo.s	SuperHyper_PalCycle_Apply		; if not, branch
		move.w	#0,(Palette_frame).w			; reset frame counter
		move.b	#$E,(Palette_timer).w
; SuperHyper_PalCycle_KnucklesApply:
; loc_396C:
SuperHyper_PalCycle_Apply:
		lea	(Normal_palette+$4).w,a1
		move.l	(a0,d0.w),(a1)+	; Write first two palette entries
		move.w	4(a0,d0.w),(a1)	; Write last palette entry
		tst.b	(Water_flag).w
		beq.w	locret_37EC
		lea	(Water_palette+$4).w,a1
		move.l	(a0,d0.w),(a1)+	; Write first two palette entries
		move.w	4(a0,d0.w),(a1)	; Write last palette entry
		rts
; ---------------------------------------------------------------------------
; AnPal_SuperSonic_1:
PalCycle_SuperSonic:
		dc.w $E66,$C42,$822
		dc.w $E88,$C66,$844
		dc.w $EAA,$C88,$A66
		dc.w $ECC,$EAA,$C88
		dc.w $EEE,$ECC,$EAA
		dc.w $EEE,$EEE,$EEE
		dc.w $CEE,$CEE,$AEE
		dc.w $AEE,$8EE,$6CC
		dc.w $8EE,$0EE,$0AA
		dc.w $AEE,$8EE,$6CC
; AnPal_SuperSonic_2:
PalCycle_SuperSonicUnderwaterAIZICZ:
		dc.w $A82,$860,$640
		dc.w $E88,$C66,$844
		dc.w $EAA,$C88,$A66
		dc.w $ECC,$EAA,$C88
		dc.w $EEE,$ECC,$EAA
		dc.w $EEE,$EEE,$EEE
		dc.w $CEE,$CEC,$AEC
		dc.w $AEC,$8EC,$6CA
		dc.w $8EC,$4EA,$4A8
		dc.w $CEE,$CEC,$AEC
; AnPal_SuperSonic_3:
PalCycle_SuperSonicUnderwaterHCZCNZLBZ:
		dc.w $C66,$A44,$624
		dc.w $E88,$C66,$844
		dc.w $EAA,$C88,$A66
		dc.w $ECC,$EAA,$C88
		dc.w $EEE,$ECC,$EAA
		dc.w $EEE,$EEE,$EEE
		dc.w $CEE,$CEC,$AEC
		dc.w $AEC,$8EC,$6CA
		dc.w $8EC,$4EA,$4A8
		dc.w $CEE,$CEC,$AEC
; AnPal_SuperSonic_4:
PalCycle_HyperSonic:
		dc.w $EEC,$ECA,$EA8
		dc.w $EEE,$EEE,$EEE
		dc.w $CEC,$AEA,$2E0
		dc.w $EEE,$EEE,$EEE
		dc.w $AEC,$4EC,$0CC
		dc.w $EEE,$EEE,$EEE
		dc.w $CEE,$8EE,$4CE
		dc.w $EEE,$EEE,$EEE
		dc.w $EEE,$CCE,$AAE
		dc.w $EEE,$EEE,$EEE
		dc.w $EEE,$ECE,$CAC
		dc.w $EEE,$EEE,$EEE
; AnPal_SuperSonic_5:
PalCycle_SuperTails:
		dc.w $0AE,$08E,$46A
		dc.w $4CE,$2AE,$46A
		dc.w $8CE,$4CE,$46C
		dc.w $AEE,$8CE,$48E
		dc.w $8CE,$4CE,$46C
		dc.w $4CE,$2AE,$46A
; AnPal_SuperSonic_6:
PalCycle_SuperHyperKnuckles:
		dc.w $A6E,$64E,$428
		dc.w $C8E,$86E,$64A
		dc.w $EAE,$A8E,$86C
		dc.w $ECE,$CAE,$A8E
		dc.w $EEE,$ECE,$CAE
		dc.w $ECE,$CAE,$A8E
		dc.w $EAE,$A8E,$86C
		dc.w $C8E,$86E,$64A
		dc.w $A6E,$64E,$428
		dc.w $84E,$40C,$206
; AnPal_SuperSonic_7:
PalCycle_SuperHyperKnucklesRevert:
		dc.w $64E,$20C,$206

; =============== S U B R O U T I N E =======================================


Pal_FadeFromBlack:
		move.w	#$3F,(Palette_fade_info).w
		jsr	Pal_FillBlack(pc)
		move.w	#$15,d4

loc_3AFE:
		move.b	#$12,(V_int_routine).w
		bsr.w	Wait_VSync
		bsr.s	Pal_FromBlack
		dbf	d4,loc_3AFE
		rts
; End of function Pal_FadeFromBlack


; =============== S U B R O U T I N E =======================================


Pal_FromBlack:
		moveq	#0,d0
		lea	(Normal_palette).w,a0
		lea	(Target_palette).w,a1
		move.b	(Palette_fade_info).w,d0
		adda.w	d0,a0
		adda.w	d0,a1
		move.b	(Palette_fade_count).w,d0

loc_3B2A:
		bsr.s	Pal_AddColor
		dbf	d0,loc_3B2A
		tst.b	(Water_flag).w
		beq.s	locret_3B52
		moveq	#0,d0
		lea	(Water_palette).w,a0
		lea	(Target_water_palette).w,a1
		move.b	(Palette_fade_info).w,d0
		adda.w	d0,a0
		adda.w	d0,a1
		move.b	(Palette_fade_count).w,d0

loc_3B4C:
		bsr.s	Pal_AddColor
		dbf	d0,loc_3B4C

locret_3B52:
		rts
; End of function Pal_FromBlack


; =============== S U B R O U T I N E =======================================


Pal_AddColor:
		move.w	(a1)+,d2
		move.w	(a0),d3
		cmp.w	d2,d3
		beq.s	loc_3B7C
		move.w	d3,d1
		addi.w	#$200,d1
		cmp.w	d2,d1
		bhi.s	loc_3B6A
		move.w	d1,(a0)+
		rts
; ---------------------------------------------------------------------------

loc_3B6A:
		move.w	d3,d1
		addi.w	#$20,d1
		cmp.w	d2,d1
		bhi.s	loc_3B78
		move.w	d1,(a0)+
		rts
; ---------------------------------------------------------------------------

loc_3B78:
		addq.w	#2,(a0)+
		rts
; ---------------------------------------------------------------------------

loc_3B7C:
		addq.w	#2,a0
		rts
; End of function Pal_AddColor


; =============== S U B R O U T I N E =======================================


Pal_FillBlack:
		cmpi.w	#$D01,(Current_zone_and_act).w
		beq.w	Pal_FillWhite
		cmpi.w	#$1701,(Current_zone_and_act).w
		beq.w	Pal_FillWhite				; If one of either Sky Sanctuary Knuckles level or the hyper emerald special stage arena, branch
		moveq	#0,d0
		lea	(Normal_palette).w,a0
		move.b	(Palette_fade_info).w,d0
		adda.w	d0,a0
		moveq	#0,d1
		move.b	(Palette_fade_count).w,d0

loc_3BA6:
		move.w	d1,(a0)+
		tst.b	(Water_flag).w
		beq.s	loc_3BB2
		move.w	d1,-$B82(a0)

loc_3BB2:
		dbf	d0,loc_3BA6
		rts
; End of function Pal_FillBlack


; =============== S U B R O U T I N E =======================================


Animate_Palette:
		tst.w	(Palette_fade_timer).w
		bmi.s	locret_3BE2
		beq.s	loc_3BDC
		subq.w	#1,(Palette_fade_timer).w
		cmpi.w	#$D01,(Current_zone_and_act).w
		beq.w	Pal_FromWhite
		cmpi.w	#$1701,(Current_zone_and_act).w
		beq.w	Pal_FromWhite
		bra.w	Pal_FromBlack
; ---------------------------------------------------------------------------

loc_3BDC:
		jmp	(AnPal_Load).l
; ---------------------------------------------------------------------------

locret_3BE2:
		rts
; End of function Animate_Palette


; =============== S U B R O U T I N E =======================================


Pal_FadeToBlack:

		move.w	#$3F,(Palette_fade_info).w
		move.w	#$15,d4

loc_3BEE:
		move.b	#$12,(V_int_routine).w
		bsr.w	Wait_VSync
		bsr.s	Pal_ToBlack
		dbf	d4,loc_3BEE
		rts
; End of function Pal_FadeToBlack


; =============== S U B R O U T I N E =======================================


Pal_ToBlack:

		moveq	#0,d0
		lea	(Normal_palette).w,a0
		move.b	(Palette_fade_info).w,d0
		adda.w	d0,a0
		move.b	(Palette_fade_count).w,d0

loc_3C14:
		bsr.s	Pal_DecColor
		dbf	d0,loc_3C14
		moveq	#0,d0
		lea	(Water_palette).w,a0
		move.b	(Palette_fade_info).w,d0
		adda.w	d0,a0
		move.b	(Palette_fade_count).w,d0

loc_3C2A:
		bsr.s	Pal_DecColor
		dbf	d0,loc_3C2A
		rts
; End of function Pal_ToBlack


; =============== S U B R O U T I N E =======================================


Pal_DecColor:
		move.w	(a0),d2
		beq.s	loc_3C5E
		move.w	d2,d1
		andi.w	#$E,d1
		beq.s	loc_3C42
		subq.w	#2,(a0)+
		rts
; ---------------------------------------------------------------------------

loc_3C42:
		move.w	d2,d1
		andi.w	#$E0,d1
		beq.s	loc_3C50
		subi.w	#$20,(a0)+
		rts
; ---------------------------------------------------------------------------

loc_3C50:
		move.w	d2,d1
		andi.w	#$E00,d1
		beq.s	loc_3C5E
		subi.w	#$200,(a0)+
		rts
; ---------------------------------------------------------------------------

loc_3C5E:
		addq.w	#2,a0
		rts
; End of function Pal_DecColor


; =============== S U B R O U T I N E =======================================


Pal_FillWhite:
		moveq	#0,d0
		lea	(Normal_palette).w,a0
		move.b	(Palette_fade_info).w,d0
		adda.w	d0,a0
		move.w	#$EEE,d1
		move.b	(Palette_fade_count).w,d0

loc_3C76:
		move.w	d1,(a0)+
		dbf	d0,loc_3C76
		clr.w	(__u_FACE).w
		rts
; End of function Pal_FillWhite


; =============== S U B R O U T I N E =======================================


Pal_FromBlackWhite:

		move.w	#$3F,(Palette_fade_info).w
		bsr.s	Pal_FillWhite
		move.w	#$15,d4

loc_3C8E:
		move.b	#$12,(V_int_routine).w
		bsr.w	Wait_VSync
		bsr.s	Pal_FromWhite
		dbf	d4,loc_3C8E
		rts
; End of function Pal_FromBlackWhite


; =============== S U B R O U T I N E =======================================


Pal_FromWhite:
		subq.w	#1,(__u_FACE).w
		bpl.s	locret_3CEE
		move.w	#2,(__u_FACE).w
		moveq	#0,d0

		lea	(Normal_palette).w,a0
		lea	(Target_palette).w,a1
		move.b	(Palette_fade_info).w,d0
		adda.w	d0,a0
		adda.w	d0,a1
		move.b	(Palette_fade_count).w,d0

loc_3CC6:
		bsr.s	Pal_DecColor2
		dbf	d0,loc_3CC6
		tst.b	(Water_flag).w
		beq.s	locret_3CEE
		moveq	#0,d0
		lea	(Water_palette).w,a0
		lea	(Target_water_palette).w,a1
		move.b	(Palette_fade_info).w,d0
		adda.w	d0,a0
		adda.w	d0,a1
		move.b	(Palette_fade_count).w,d0

loc_3CE8:
		bsr.s	Pal_DecColor2
		dbf	d0,loc_3CE8

locret_3CEE:
		rts
; End of function Pal_FromWhite


; =============== S U B R O U T I N E =======================================


Pal_DecColor2:
		move.b	(a1)+,d2
		andi.b	#$E,d2
		move.b	(a0),d3
		andi.b	#$E,d3
		cmp.b	d2,d3
		bls.s	loc_3D02
		subq.b	#2,d3

loc_3D02:
		move.b	d3,(a0)+
		move.b	(a1)+,d1
		move.b	d1,d2
		andi.b	#$E0,d1
		move.b	(a0),d3
		move.b	d3,d5
		andi.b	#$E0,d3
		cmp.b	d1,d3
		bls.s	loc_3D1C
		subi.b	#$20,d3

loc_3D1C:
		andi.b	#$E,d2
		andi.b	#$E,d5
		cmp.b	d2,d5
		bls.s	loc_3D2A
		subq.b	#2,d5

loc_3D2A:
		or.b	d5,d3
		move.b	d3,(a0)+
		rts
; End of function Pal_DecColor2


; =============== S U B R O U T I N E =======================================


Pal_FadeToWhite:

		move.w	#$3F,(Palette_fade_info).w
		move.w	#$15,d4

loc_3D3A:
		move.b	#$12,(V_int_routine).w
		bsr.w	Wait_VSync
		bsr.s	Pal_ToWhite
		dbf	d4,loc_3D3A
		rts
; End of function Pal_FadeToWhite


; =============== S U B R O U T I N E =======================================


Pal_ToWhite:

		moveq	#0,d0
		lea	(Normal_palette).w,a0
		move.b	(Palette_fade_info).w,d0
		adda.w	d0,a0
		move.b	(Palette_fade_count).w,d0

loc_3D60:
		bsr.s	Pal_AddColor2
		dbf	d0,loc_3D60
		moveq	#0,d0
		lea	(Water_palette).w,a0
		move.b	(Palette_fade_info).w,d0
		adda.w	d0,a0
		move.b	(Palette_fade_count).w,d0

loc_3D76:
		bsr.s	Pal_AddColor2
		dbf	d0,loc_3D76
		rts
; End of function Pal_ToWhite


; =============== S U B R O U T I N E =======================================


Pal_AddColor2:
		move.w	(a0),d2
		cmpi.w	#$EEE,d2
		beq.s	loc_3DBA
		move.w	d2,d1
		andi.w	#$E,d1
		cmpi.w	#$E,d1
		beq.s	loc_3D96
		addq.w	#2,(a0)+
		rts
; ---------------------------------------------------------------------------

loc_3D96:
		move.w	d2,d1
		andi.w	#$E0,d1
		cmpi.w	#$E0,d1
		beq.s	loc_3DA8
		addi.w	#$20,(a0)+
		rts
; ---------------------------------------------------------------------------

loc_3DA8:
		move.w	d2,d1
		andi.w	#$E00,d1
		cmpi.w	#$E00,d1
		beq.s	loc_3DBA
		addi.w	#$200,(a0)+
		rts
; ---------------------------------------------------------------------------

loc_3DBA:
		addq.w	#2,a0
		rts
; ---------------------------------------------------------------------------

Sega_Screen:
		move.b	#4,(Game_mode).w
		rts
; ---------------------------------------------------------------------------

ClearVRAMArea:
		lea	(VDP_data_port).l,a6
		move.l	d0,VDP_control_port-VDP_data_port(a6)
		moveq	#0,d0

loc_5D5A:
		move.l	d0,(a6)
		dbf	d3,loc_5D5A
		rts

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to load constant debug number art into VRAM to be displayed later
; ---------------------------------------------------------------------------

LoadDebugArt:
		lea	(byte_E5CA).l,a0			; load uncompressed debug art
		lea	($C00000).l,a5				; load VDP port
		move.l	#vdpComm((AT_HUD)*32,VRAM,WRITE),$04(a5); set VDP VRAM write address (F380)
		moveq	#$0A-1,d1				; set number of tiles to load
		moveq	#$02-1,d2				; set loop for letters afterwards

LDA_NextDigit:
		move.l	(a0)+,(a5)				; copy art to VRAM
		move.l	(a0)+,(a5)				; ''
		move.l	(a0)+,(a5)				; ''
		move.l	(a0)+,(a5)				; ''
		move.l	(a0)+,(a5)				; ''
		move.l	(a0)+,(a5)				; ''
		move.l	(a0)+,(a5)				; ''
		move.l	(a0)+,(a5)				; ''
		dbf	d1,LDA_NextDigit			; repeat for all tiles
		moveq	#$07-1,d1				; set number of letters
		lea	$07*$20(a0),a0				; advance to letters (ughhh damn Sonic Team)
		dbf	d2,LDA_NextDigit			; repeat for the letters now
		rts						; return

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to map out the debug numbers in the VDP's window VRAM area
; ---------------------------------------------------------------------------

DrawDebugMap:
		tst.b	(Debug_mode_flag).w			; is debug mode enabled?
		beq.s	DBM_NoWrite				; if not, branch
		move.l	#$70000003+((($40*$1B)*2)<<$10),(a6)	; set address where the numbers would display
		lea	(DBM_Convert).l,a1			; load converter table
		lea	$100*2(a1),a2				; ''
		lea	(Debug00).w,a0				; load RAM address to display
		moveq	#$05-1,d1				; set to display 5 long-words

DBM_NextLong:
		moveq	#$00,d0					; clear d0
		move.b	(a0)+,d0				; load numbers
		add.w	d0,d0					; multiply by size of word
		move.w	(a1,d0.w),(a5)				; write map word
		move.w	(a2,d0.w),(a5)				; write map word
		moveq	#$00,d0					; clear d0
		move.b	(a0)+,d0				; load numbers
		add.w	d0,d0					; multiply by size of word
		move.w	(a1,d0.w),(a5)				; write map word
		move.w	(a2,d0.w),(a5)				; write map word
		moveq	#$00,d0					; clear d0
		move.b	(a0)+,d0				; load numbers
		add.w	d0,d0					; multiply by size of word
		move.w	(a1,d0.w),(a5)				; write map word
		move.w	(a2,d0.w),(a5)				; write map word
		moveq	#$00,d0					; clear d0
		move.b	(a0)+,d0				; load numbers
		add.w	d0,d0					; multiply by size of word
		move.w	(a1,d0.w),(a5)				; write map word
		move.w	(a2,d0.w),(a5)				; write map word
		move.w	#DAD+$10,(a5)				; write blank word
		dbf	d1,DBM_NextLong				; repeat for number of longs

DBM_NoWrite:
		rts						; return

; ---------------------------------------------------------------------------
; converter table for debug numbers
; ---------------------------------------------------------------------------
DAD	=	AT_HUD|$8000	; Debug art address
; ---------------------------------------------------------------------------

DBM_Convert:	dc.w	DAD+$0,DAD+$0,DAD+$0,DAD+$0,DAD+$0,DAD+$0,DAD+$0,DAD+$0,DAD+$0,DAD+$0,DAD+$0,DAD+$0,DAD+$0,DAD+$0,DAD+$0,DAD+$0
		dc.w	DAD+$1,DAD+$1,DAD+$1,DAD+$1,DAD+$1,DAD+$1,DAD+$1,DAD+$1,DAD+$1,DAD+$1,DAD+$1,DAD+$1,DAD+$1,DAD+$1,DAD+$1,DAD+$1
		dc.w	DAD+$2,DAD+$2,DAD+$2,DAD+$2,DAD+$2,DAD+$2,DAD+$2,DAD+$2,DAD+$2,DAD+$2,DAD+$2,DAD+$2,DAD+$2,DAD+$2,DAD+$2,DAD+$2
		dc.w	DAD+$3,DAD+$3,DAD+$3,DAD+$3,DAD+$3,DAD+$3,DAD+$3,DAD+$3,DAD+$3,DAD+$3,DAD+$3,DAD+$3,DAD+$3,DAD+$3,DAD+$3,DAD+$3
		dc.w	DAD+$4,DAD+$4,DAD+$4,DAD+$4,DAD+$4,DAD+$4,DAD+$4,DAD+$4,DAD+$4,DAD+$4,DAD+$4,DAD+$4,DAD+$4,DAD+$4,DAD+$4,DAD+$4
		dc.w	DAD+$5,DAD+$5,DAD+$5,DAD+$5,DAD+$5,DAD+$5,DAD+$5,DAD+$5,DAD+$5,DAD+$5,DAD+$5,DAD+$5,DAD+$5,DAD+$5,DAD+$5,DAD+$5
		dc.w	DAD+$6,DAD+$6,DAD+$6,DAD+$6,DAD+$6,DAD+$6,DAD+$6,DAD+$6,DAD+$6,DAD+$6,DAD+$6,DAD+$6,DAD+$6,DAD+$6,DAD+$6,DAD+$6
		dc.w	DAD+$7,DAD+$7,DAD+$7,DAD+$7,DAD+$7,DAD+$7,DAD+$7,DAD+$7,DAD+$7,DAD+$7,DAD+$7,DAD+$7,DAD+$7,DAD+$7,DAD+$7,DAD+$7
		dc.w	DAD+$8,DAD+$8,DAD+$8,DAD+$8,DAD+$8,DAD+$8,DAD+$8,DAD+$8,DAD+$8,DAD+$8,DAD+$8,DAD+$8,DAD+$8,DAD+$8,DAD+$8,DAD+$8
		dc.w	DAD+$9,DAD+$9,DAD+$9,DAD+$9,DAD+$9,DAD+$9,DAD+$9,DAD+$9,DAD+$9,DAD+$9,DAD+$9,DAD+$9,DAD+$9,DAD+$9,DAD+$9,DAD+$9
		dc.w	DAD+$A,DAD+$A,DAD+$A,DAD+$A,DAD+$A,DAD+$A,DAD+$A,DAD+$A,DAD+$A,DAD+$A,DAD+$A,DAD+$A,DAD+$A,DAD+$A,DAD+$A,DAD+$A
		dc.w	DAD+$B,DAD+$B,DAD+$B,DAD+$B,DAD+$B,DAD+$B,DAD+$B,DAD+$B,DAD+$B,DAD+$B,DAD+$B,DAD+$B,DAD+$B,DAD+$B,DAD+$B,DAD+$B
		dc.w	DAD+$C,DAD+$C,DAD+$C,DAD+$C,DAD+$C,DAD+$C,DAD+$C,DAD+$C,DAD+$C,DAD+$C,DAD+$C,DAD+$C,DAD+$C,DAD+$C,DAD+$C,DAD+$C
		dc.w	DAD+$D,DAD+$D,DAD+$D,DAD+$D,DAD+$D,DAD+$D,DAD+$D,DAD+$D,DAD+$D,DAD+$D,DAD+$D,DAD+$D,DAD+$D,DAD+$D,DAD+$D,DAD+$D
		dc.w	DAD+$E,DAD+$E,DAD+$E,DAD+$E,DAD+$E,DAD+$E,DAD+$E,DAD+$E,DAD+$E,DAD+$E,DAD+$E,DAD+$E,DAD+$E,DAD+$E,DAD+$E,DAD+$E
		dc.w	DAD+$F,DAD+$F,DAD+$F,DAD+$F,DAD+$F,DAD+$F,DAD+$F,DAD+$F,DAD+$F,DAD+$F,DAD+$F,DAD+$F,DAD+$F,DAD+$F,DAD+$F,DAD+$F

		dc.w	DAD+$0,DAD+$1,DAD+$2,DAD+$3,DAD+$4,DAD+$5,DAD+$6,DAD+$7,DAD+$8,DAD+$9,DAD+$A,DAD+$B,DAD+$C,DAD+$D,DAD+$E,DAD+$F
		dc.w	DAD+$0,DAD+$1,DAD+$2,DAD+$3,DAD+$4,DAD+$5,DAD+$6,DAD+$7,DAD+$8,DAD+$9,DAD+$A,DAD+$B,DAD+$C,DAD+$D,DAD+$E,DAD+$F
		dc.w	DAD+$0,DAD+$1,DAD+$2,DAD+$3,DAD+$4,DAD+$5,DAD+$6,DAD+$7,DAD+$8,DAD+$9,DAD+$A,DAD+$B,DAD+$C,DAD+$D,DAD+$E,DAD+$F
		dc.w	DAD+$0,DAD+$1,DAD+$2,DAD+$3,DAD+$4,DAD+$5,DAD+$6,DAD+$7,DAD+$8,DAD+$9,DAD+$A,DAD+$B,DAD+$C,DAD+$D,DAD+$E,DAD+$F
		dc.w	DAD+$0,DAD+$1,DAD+$2,DAD+$3,DAD+$4,DAD+$5,DAD+$6,DAD+$7,DAD+$8,DAD+$9,DAD+$A,DAD+$B,DAD+$C,DAD+$D,DAD+$E,DAD+$F
		dc.w	DAD+$0,DAD+$1,DAD+$2,DAD+$3,DAD+$4,DAD+$5,DAD+$6,DAD+$7,DAD+$8,DAD+$9,DAD+$A,DAD+$B,DAD+$C,DAD+$D,DAD+$E,DAD+$F
		dc.w	DAD+$0,DAD+$1,DAD+$2,DAD+$3,DAD+$4,DAD+$5,DAD+$6,DAD+$7,DAD+$8,DAD+$9,DAD+$A,DAD+$B,DAD+$C,DAD+$D,DAD+$E,DAD+$F
		dc.w	DAD+$0,DAD+$1,DAD+$2,DAD+$3,DAD+$4,DAD+$5,DAD+$6,DAD+$7,DAD+$8,DAD+$9,DAD+$A,DAD+$B,DAD+$C,DAD+$D,DAD+$E,DAD+$F
		dc.w	DAD+$0,DAD+$1,DAD+$2,DAD+$3,DAD+$4,DAD+$5,DAD+$6,DAD+$7,DAD+$8,DAD+$9,DAD+$A,DAD+$B,DAD+$C,DAD+$D,DAD+$E,DAD+$F
		dc.w	DAD+$0,DAD+$1,DAD+$2,DAD+$3,DAD+$4,DAD+$5,DAD+$6,DAD+$7,DAD+$8,DAD+$9,DAD+$A,DAD+$B,DAD+$C,DAD+$D,DAD+$E,DAD+$F
		dc.w	DAD+$0,DAD+$1,DAD+$2,DAD+$3,DAD+$4,DAD+$5,DAD+$6,DAD+$7,DAD+$8,DAD+$9,DAD+$A,DAD+$B,DAD+$C,DAD+$D,DAD+$E,DAD+$F
		dc.w	DAD+$0,DAD+$1,DAD+$2,DAD+$3,DAD+$4,DAD+$5,DAD+$6,DAD+$7,DAD+$8,DAD+$9,DAD+$A,DAD+$B,DAD+$C,DAD+$D,DAD+$E,DAD+$F
		dc.w	DAD+$0,DAD+$1,DAD+$2,DAD+$3,DAD+$4,DAD+$5,DAD+$6,DAD+$7,DAD+$8,DAD+$9,DAD+$A,DAD+$B,DAD+$C,DAD+$D,DAD+$E,DAD+$F
		dc.w	DAD+$0,DAD+$1,DAD+$2,DAD+$3,DAD+$4,DAD+$5,DAD+$6,DAD+$7,DAD+$8,DAD+$9,DAD+$A,DAD+$B,DAD+$C,DAD+$D,DAD+$E,DAD+$F
		dc.w	DAD+$0,DAD+$1,DAD+$2,DAD+$3,DAD+$4,DAD+$5,DAD+$6,DAD+$7,DAD+$8,DAD+$9,DAD+$A,DAD+$B,DAD+$C,DAD+$D,DAD+$E,DAD+$F
		dc.w	DAD+$0,DAD+$1,DAD+$2,DAD+$3,DAD+$4,DAD+$5,DAD+$6,DAD+$7,DAD+$8,DAD+$9,DAD+$A,DAD+$B,DAD+$C,DAD+$D,DAD+$E,DAD+$F

; ===========================================================================
; ---------------------------------------------------------------------------
; Level game mode
; ---------------------------------------------------------------------------

Level:
		btst.b	#$06,(Ctrl_1_held).w		; MJ: is "A" being held?
		sne	Debug_mode_flag.w		; NAT: if yes, enable debug mode

LV_NoDebugCheck:
		bset	#7,(Game_mode).w		; Set bit 7 of F600 is indicate that we're loading the level
		tst.w	(Demo_mode_flag).w
		bmi.s	loc_5FC4
		moveq	#-$1F,d0			; If a demo
		jsr	Play_Sound_2.w

loc_5FC4:
		clr.w	(Kos_decomp_queue_count).w
		lea	(Kos_decomp_stored_registers).w,a1
		moveq	#0,d0
		move.w	#$1A,d1

loc_5FD6:
		move.l	d0,(a1)+			; Clear the KosM bytes
		dbf	d1,loc_5FD6

		lea	MonContTable.w,a1
		moveq	#-1,d0
		moveq	#($80/4)-1,d1
.clear		move.l	d0,(a1)+			; clear monitor contents data
		dbf	d1,.clear

		jsr	Clear_KosM_Queue.w		; Clear PLCs
		bsr.w	Pal_FadeToBlack			; If any normal level

	if oazflag=1
	cmpi.b	#$0E,(Current_zone).w			; is this OAZ?
	bne.s	loc_6000				; if not, branch
	move.l	#HB_OAZ_Null,(H_int_addr).w		; set H-blank routine
	move.l	#VB_OAZ_Null,(V_int_addr).w		; set V-blank routine
	move.w	#$4EF9,(H_int_jump).w			; setup "jmp" instruction for H-blank
	move.l	#$8ADF8014,($C00004).l			; enable H-blank but keep interrupt line to end...
	endif

loc_6000:
	tst.b	(Debug_mode_flag).w			; is debug mode enabled?
	beq.s	Level_NoDebugArt			; if not, branch and ignore window
	jsr	LoadDebugArt(pc)			; load debug number art

Level_NoDebugArt:
		tst.w	(Demo_mode_flag).w
		bmi.w	loc_60DE			; Skip ahead if FFFFD0 is negative (?)
		move	#$2700,sr
		bsr.w	Clear_DisplayData		; Clear the screen
		move	#$2300,sr
		moveq	#0,d0
		move.w	d0,(Level_frame_counter).w

loc_6034:
loc_6040:

		move.w	(Current_zone_and_act).w,d0
		bne.s	loc_6058
		move.w	#$D00,d0			; Set the level ID to skip the intro

loc_6058:

		cmpi.w	#$401,(Current_zone_and_act).w
		bne.s	loc_6068
		cmpi.b	#6,(Last_star_post_hit).w
		beq.s	loc_6088			; If level is Flying Battery 2 and lamppost is 6 or above (presumably the one before the boss) don't bother loading level PLCs

loc_6068:
		ror.b	#1,d0
		lsr.w	#4,d0
		andi.w	#$1F8,d0
		move.w	d0,d1
		add.w	d0,d0
		add.w	d0,d1
		lea	(LevelLoadBlock).l,a2
		moveq	#0,d0
		move.b	(a2,d1.w),d0			; Get the first PLC number for the level
		beq.s	loc_6088
		jsr	Load_PLC.w

loc_6088:
		clr.l	PlayerSpawn.w			; NAT: Clear respawn location
		clr.w	(Player_mode).w			; NAT: Clear the player mode (dont need it)
		cmpi.w	#$1700,(Current_zone_and_act).w
		beq.s	loc_60DE			; NAT: Oops, DEZ3 doesnt like floating monitors

		lea	ModeTable.w,a1			; NAT: Load mode table address to a1
		move.b	$0C(a1),d0			; load the PLc number from it
		jsr	Load_PLC.w

loc_60DE:
		lea	(Sprite_table_input).w,a1
		moveq	#0,d0
		move.w	#$FF,d1

loc_60E8:
		move.l	d0,(a1)+
		dbf	d1,loc_60E8
		lea	(Object_RAM).w,a1
		moveq	#0,d0
		move.w	#$7FF,d1

loc_60F8:
		move.l	d0,(a1)+
		dbf	d1,loc_60F8
		lea	(Lag_frame_count).w,a1
		moveq	#0,d0
		move.w	#$15,d1

loc_6108:
		move.l	d0,(a1)+
		dbf	d1,loc_6108
		lea	(__u_F700).w,a1
		moveq	#0,d0
		move.w	#$3F,d1

loc_6118:
		move.l	d0,(a1)+
		dbf	d1,loc_6118
		lea	(OscNumbers).w,a1
		moveq	#0,d0
		move.w	#$12,d1

loc_6128:
		move.l	d0,(a1)+
		dbf	d1,loc_6128
		lea	(__u_FA80).w,a1
		moveq	#0,d0
		move.w	#$1F,d1

loc_6138:
		move.l	d0,(a1)+
		dbf	d1,loc_6138

		move.l	#HeightMaps,(ColArrayNorm).w			; set to use normal collision array
		move.l	#HeightMapsRot,(ColArrayRot).w			; ''
		move.l	#AngleArray,(ColArrayAngle).w			; ''

	if oazflag=1
		cmpi.b	#$0E,(Current_zone).w				; is this OAZ?
		bne.s	Level_NormalArray				; if not, branch
		move.l	#OAZ1_CA_Normal,(ColArrayNorm).w		; set to use act 1's collision array
		move.l	#OAZ1_CA_Rotated,(ColArrayRot).w		; ''
		move.l	#OAZ1_CA_Angles,(ColArrayAngle).w		; ''

		tst.b	(Current_act).w					; is this OAZ act 2?
		beq.s	Level_NormalArray				; if not, branch
		move.l	#OAZ2_CA_Normal,(ColArrayNorm).w		; set to use act 2's collision array
		move.l	#OAZ2_CA_Rotated,(ColArrayRot).w		; ''
		move.l	#OAZ2_CA_Angles,(ColArrayAngle).w		; ''
	endif

Level_NormalArray:
		jsr	(Init_SpriteTable).l
		lea	(VDP_control_port).l,a6
		move.w	#$8B03,(a6)
		move.w	#$8230,(a6)
		move.w	#$8407,(a6)
		move.w	#$857C,(a6)
		move.w	#$9001,(a6)
		move.w	#$9200,(a6)
		move.w	#$8720,(a6)
		move.w	#$8C81,(a6)
		move.w	#$8AFF,(H_int_counter_command).w

	if oazflag=1
		cmpi.b	#$0E,(Current_zone).w			; is this OAZ?
		beq.s	Level_OAZ_NoHBlank			; if so, branch
	endif

		move.w	#$8004,(a6)
		move.w	#$4EF9,(H_int_jump).w
		move.l	#HInt,(H_int_addr).w

Level_OAZ_NoHBlank:
		move.w	(H_int_counter_command).w,(a6)
		clr.w	(DMA_queue).w
		move.w	#DMA_queue,(DMA_queue_slot).w
		moveq	#3,d0
		jsr	LoadPalette_Immediate.w

		bsr.w	CheckLevelForWater
		lea	(Water_palette_line_2).w,a1
		moveq	#0,d0
		move.w	#$17,d1

loc_61EC:
		move.l	d0,(a1)+
		dbf	d1,loc_61EC
		tst.b	(Water_flag).w
		beq.s	loc_61FC
		move.w	#$8014,(a6)

loc_61FC:
		moveq	#0,d0
		tst.b	(Last_star_post_hit).w
		bne.s	loc_6404
		move.w	d0,(Ring_count).w
		move.l	d0,(Timer).w
		move.w	d0,CameraOffY.w		; clear camera off

		cmpi.w	#$1600,(Current_zone_and_act).w
		beq.s	loc_6400
		cmpi.w	#$1700,(Current_zone_and_act).w
		beq.s	loc_6400
		cmpi.w	#$1701,(Current_zone_and_act).w
		beq.s	loc_6404
		cmpi.b	#$16,(Current_zone).w
		bhs.s	loc_63FC
		cmpi.b	#$13,(Current_zone).w
		bhs.s	loc_6404

loc_63FC:
	;	move.b	d0,(Saved2_status_secondary).w

loc_6400:

		move.b	d0,(NoReset_RespawnTbl).w

loc_6404:
		tst.w	(Demo_mode_flag).w
		bmi.w	loc_6310
		moveq	#0,d1
		move.w	(Current_zone_and_act).w,d1
		ror.b	#1,d1
		lsr.w	#7,d1
		jsr	InitGameMode				; NAT: Init game mode stuff

		move.b	OptBits_Menu.w,d2			; get optionbits menu
		and.b	d0,d2					; and value
		or.b	d1,d2					; or value
		move.b	d2,OptionsBits.w			; save flag

		cmpi.w	#1,(Current_zone_and_act).w
		bne.s	loc_622A
		cmpi.b	#3,(Last_star_post_hit).w
		bne.s	loc_622A
		moveq	#1,d7

loc_622A:
		cmpi.w	#$700,(Current_zone_and_act).w
		bne.s	loc_6248
		cmpi.w	#3,(Player_mode).w
		bne.s	loc_6248
		tst.w	(SK_alone_flag).w
		beq.s	loc_6248
		tst.b	(Last_star_post_hit).w
		bne.s	loc_6248
		moveq	#$1F,d7

loc_6248:
		move.w	d7,(Level_music).w
		move.b	d7,(Level_music).w
		exg	d0,d7
		jsr	Play_Sound.w

loc_6268:
	; NAT: Check for HPZ1 minigame (credits)
		cmp.w	#$1601,Current_zone_and_act.w
		bne.s	.notHPZ
		cmp.b	#6,PlayMode.w
		beq.s	loc_62FE

.notHPZ		cmpi.w	#$1701,(Current_zone_and_act).w
		beq.s	loc_62FE
		tst.b	(Act_3_flag).w
		bne.s	loc_62FE
		move.l	#Obj_TitleCard,(Dynamic_object_RAM+$172).w

loc_62CC:
		move.b	#$C,(V_int_routine).w
		jsr	(Process_Kos_Queue).l
		bsr.w	Wait_VSync
		jsr	(Process_Sprites).l
		jsr	(Render_Sprites).l
		jsr	Process_Kos_Module_Queue.w
		tst.w	(Dynamic_object_RAM+$1BA).w
		bne.s	loc_62CC
		tst.l	(Kos_module_queue).w
		bne.s	loc_62CC

loc_62FE:
		clr.b	(Act_3_flag).w
		move	#$2700,sr
		jsr	(HUD_DrawInitial).l
		move	#$2300,sr

loc_6310:
		moveq	#3,d0
		jsr	LoadPalette.w
		jsr	(Get_LevelSizeStart).l
		jsr	(DeformBgLayer).l
		bsr.w	LoadLevelLoadBlock
		jsr	(LoadLevelLoadBlock2).l
		move	#$2700,sr
		jsr	LevelSetup
		move	#$2300,sr
		jsr	(Animate_Init).l
		bsr.w	LoadSolids
		bsr.w	Handle_Onscreen_Water_Height
		move.w	(Ctrl_2).w,(__u_FF7C).w
		move.w	#0,(Ctrl_1_logical).w
		move.w	#0,(Ctrl_2_logical).w
		move.w	#0,(Ctrl_1).w
		move.w	#0,(Ctrl_2).w
		move.b	#1,(Ctrl_1_locked).w
		move.b	#1,(Ctrl_2_locked).w
		move.b	#0,(Level_started_flag).w
		tst.b	(Water_flag).w
		beq.s	loc_63A4
		cmpi.b	#1,(Current_zone).w
		bne.s	loc_63A4

loc_638E:
		move.l	#Obj_HCZWaveSplash,Super_stars.w		; NAT free RAM
		move.l	#Obj_HCZWaterSplash,(Dynamic_object_RAM+$94).w
		move.b	#1,(Dynamic_object_RAM+$C0).w

loc_63A4:

		cmpi.b	#7,(Current_zone).w
		bne.s	loc_63B4
		move.l	#Obj_MHZ_Pollen_Spawner,(Dynamic_object_RAM+$4A).w

loc_63B4:
		moveq	#0,d0
		move.b	d0,(Debug_On).w
		move.b	d0,(Restart_level_flag).w
		move.b	d0,(LRZ_Rock_Routine).w
		move.b	d0,(Super_Sonic_Knux_flag).w
		bsr.w	sub_76E6
		addq.w	#1,d0
		move.b	d0,(Update_HUD_score).w
		move.b	d0,(Update_HUD_ring_count).w
		move.b	d0,(Update_HUD_timer).w
		move.b	d0,(Level_started_flag).w
		cmpi.w	#$D01,(Current_zone_and_act).w
		beq.s	loc_6460
		cmpi.w	#$1701,(Current_zone_and_act).w
		bne.s	loc_6468

loc_6460:
		clr.b	(Update_HUD_timer).w
		clr.b	(Level_started_flag).w

loc_6468:
		bsr.w	SpawnLevelMainSprites
		jsr	(Load_Sprites).l
		jsr	(Load_Rings).l
		jsr	(Draw_LRZ_Special_Rock_Sprites).l
		jsr	(Process_Sprites).l
		jsr	(Render_Sprites).l
		jsr	(Animate_Tiles).l
		move.w	#$708,(Demo_timer).w
		bsr.w	LoadWaterPalette
		lea	(Water_palette_line_2).w,a1
		moveq	#0,d0
		move.w	#$17,d1

loc_64A4:
		move.l	d0,(a1)+
		dbf	d1,loc_64A4
		move.b	#0,(Ctrl_1_locked).w
		move.b	#0,(Ctrl_2_locked).w

loc_64CE:
		cmpi.b	#CompID,(Current_zone).w
		bhs.s	loc_64DC
		jsr	(PLCLoad_AnimalsAndExplosion).l

loc_64DC:
		move.w	#$202F,(Palette_fade_info).w
		jsr	(Pal_FillBlack).l

		move.w	#$16,(Palette_fade_timer).w
		move.w	#$16,(Dynamic_object_RAM+$1A0).w
		move.w	#$7F00,(Ctrl_1).w
		move.w	#$7F00,(Ctrl_2).w
		andi.b	#$7F,(Last_star_post_hit).w
		bclr	#7,(Game_mode).w
	;	jsr	LoadPauseArt(pc)
		tst.b	(Debug_mode_flag).w			; MJ: is debug mode enabled?
		beq.s	LevelLoop				; MJ: if not, branch
	;	move.w	#$92FB,($C00004).l			; MJ: allow window to display on-screen
		move.w	#$8300|((($F000)>>$0A)&$FF),($C00004).l	; 00FE DCB0 / 00FE DC00 (20 H-resol) - Window Plane A Map Table VRam address

LevelLoop:
		bsr.w	Pause_Game
		move.b	#8,(V_int_routine).w
		jsr	(Process_Kos_Queue).l
		bsr.w	Wait_VSync
		addq.w	#1,(Level_frame_counter).w
		bsr.w	Demo_PlayRecord
		jsr	(Animate_Palette).l
		jsr	(SpecialEvents).l
		jsr	(Load_Sprites).l
		jsr	(Process_Sprites).l
		tst.b	(Restart_level_flag).w
		bne.w	Level
	move.l	ModeTable.w,a1		; NAT: Get mode table address
	jsr	(a1)			; get custom gamemode routine and jump

		jsr	(DeformBgLayer).l
		jsr	(ScreenEvents).l
		bsr.w	Handle_Onscreen_Water_Height
		jsr	(Load_Rings).l
		cmpi.b	#9,(Current_zone).w
		bne.s	Level_NotLRZ
		jsr	(Draw_LRZ_Special_Rock_Sprites).l

Level_NotLRZ:
		jsr	(Animate_Tiles).l
		jsr	Process_Kos_Module_Queue.w
		bsr.w	sub_773C
		bsr.w	sub_77D2
		jsr	(Render_Sprites).l
	if oazflag=1
		jsr	SpriteReflect
	endif
	;	cmpi.b	#$15,(Current_zone).w
	;	bne.s	Level_NotSlots
	;	jsr	(Ending_4B356).l
	;	jsr	(Slots_CycleOptions).l

Level_NotSlots:
		cmpi.b	#$C,(Game_mode).w
		beq.w	LevelLoop
		rts
; ---------------------------------------------------------------------------

DemoMode:
		tst.b	(Restart_level_flag).w
		bne.s	loc_65D0
		tst.w	(Demo_timer).w
		beq.s	loc_65D0
		cmpi.b	#8,(Game_mode).w
		beq.w	LevelLoop
		move.b	#0,(Game_mode).w
		rts
; ---------------------------------------------------------------------------

loc_65D0:

		cmpi.b	#8,(Game_mode).w
		bne.s	loc_65E0
		move.b	#0,(Game_mode).w
		rts
; ---------------------------------------------------------------------------

loc_65E0:
		move.w	#$3C,(Demo_timer).w
		move.w	#$3F,(Palette_fade_info).w
		clr.w	(Palfade_Timer).w

loc_65F0:
		move.b	#8,(V_int_routine).w
		bsr.w	Wait_VSync
		bsr.w	Demo_PlayRecord
		jsr	(Process_Sprites).l
		jsr	(DeformBgLayer).l
		jsr	(ScreenEvents).l
		jsr	(Render_Sprites).l
		jsr	(Load_Sprites).l
		jsr	Process_Kos_Module_Queue.w
		subq.w	#1,(Palfade_Timer).w
		bpl.s	loc_6632
		move.w	#2,(Palfade_Timer).w
		bsr.w	Pal_ToBlack

loc_6632:
		tst.w	(Demo_timer).w
		bne.s	loc_65F0
		rts
; ---------------------------------------------------------------------------

loc_663A:
		clr.w	(__u_FF7E).w

		move.w	#$3F,(Palette_fade_info).w
		jsr	(Pal_FillBlack).l
		move.w	#$16,(Palette_fade_timer).w
		clr.w	(__u_FF7C).w
		bclr	#7,(Game_mode).w

loc_6678:

		bsr.w	Pause_Game
		move.b	#8,(V_int_routine).w
		jsr	(Process_Kos_Queue).l
		bsr.w	Wait_VSync
		addq.w	#1,(Level_frame_counter).w
		move.w	#4,-(sp)
		bra.s	loc_66DA
; ---------------------------------------------------------------------------

loc_6696:
		move.w	(__u_FF7E).w,d0
		add.w	d0,(__u_FF7C).w
		bcc.s	loc_66EA
		bsr.w	Pause_Game
		move.w	#$100,(Z80_bus_request).l
		bsr.w	Poll_Controllers
		startZ80
		move.w	#0,(DMA_queue).w
		move.w	#DMA_queue,(DMA_queue_slot).w
		lea	(Sprite_table_input).w,a5

loc_66CA:
		move.w	#0,(a5)
		lea	$80(a5),a5
		cmpa.l	#Player_1,a5
		blo.s	loc_66CA

loc_66DA:
		bsr.w	Demo_PlayRecord
		jsr	(Process_Sprites).l
		jsr	(DeformBgLayer).l

loc_66EA:
		subq.w	#1,(sp)
		bne.s	loc_6696
		addq.w	#2,sp
		tst.b	(Restart_level_flag).w
		bne.w	Level
		jsr	(ScreenEvents).l
		jsr	(Animate_Tiles).l
		jsr	(Render_Sprites).l
		jsr	(Animate_Palette).l
		jsr	Process_Kos_Module_Queue.w
		cmpi.b	#8,(Game_mode).w
		beq.s	loc_672E
		cmpi.b	#$C,(Game_mode).w
		beq.w	loc_6678
		rts
; ---------------------------------------------------------------------------

loc_672E:
		tst.b	(Restart_level_flag).w
		bne.s	loc_674C
		tst.w	(Demo_timer).w
		beq.s	loc_674C
		cmpi.b	#8,(Game_mode).w
		beq.w	loc_6678
		move.b	#0,(Game_mode).w
		rts
; ---------------------------------------------------------------------------

loc_674C:

		cmpi.b	#8,(Game_mode).w
		bne.s	loc_675C
		move.b	#0,(Game_mode).w
		rts
; ---------------------------------------------------------------------------

loc_675C:
		move.w	#$3C,(Demo_timer).w
		move.w	#$3F,(Palette_fade_info).w
		clr.w	(Palfade_Timer).w

loc_676C:
		move.b	#8,(V_int_routine).w
		bsr.w	Wait_VSync
		bsr.w	Demo_PlayRecord
		jsr	(Process_Sprites).l
		jsr	(DeformBgLayer).l
		jsr	(ScreenEvents).l
		jsr	(Render_Sprites).l
		jsr	(Load_Sprites).l
		jsr	Process_Kos_Module_Queue.w
		subq.w	#1,(Palfade_Timer).w
		bpl.s	loc_67AE
		move.w	#2,(Palfade_Timer).w
		bsr.w	Pal_ToBlack

loc_67AE:
		tst.w	(Demo_timer).w
		bne.s	loc_676C
		rts

; =============== S U B R O U T I N E =======================================


SpawnLevelMainSprites:
_nobounce =	$04		; flag for disabling bounce for x frames
		move.l	#Obj_ColRespBounceCheck,Reserved_object_3.w
		move.b	#4,Reserved_object_3+_nobounce.w	; NAT: force no bounce to be on
		bsr.w	SpawnLevelMainSprites_SpawnPlayers

		tst.b	(Last_star_post_hit).w
		bne.w	locret_69B6
		lea	(Player_1).w,a1
		lea	(Player_2).w,a2

loc_6834:
		cmpi.w	#$100,(Current_zone_and_act).w
		bne.s	loc_6886
		move.b	#$1B,$20(a1)
		bset	#1,$2A(a1)

		tst.l	(a2)
		beq.s	loc_6886
		move.b	#$1B,$20(a2)
		bset	#1,$2A(a2)
		move.b	#1,$40(a2)

loc_6886:
		cmpi.w	#$900,(Current_zone_and_act).w
		beq.s	loc_68A6
		cmpi.w	#$1600,(Current_zone_and_act).w
		beq.s	loc_68A6
		cmpi.w	#$200,(Current_zone_and_act).w
		bne.s	loc_68C2

loc_68A6:
		move.b	#$1B,$20(a1)
		bset	#1,$2A(a1)
		tst.l	(a2)
		beq.s	loc_68C2
		move.b	#$1B,$20(a2)
		bset	#1,$2A(a2)

loc_68C2:
		cmpi.w	#$600,(Current_zone_and_act).w
		bne.s	loc_693E
		cmp.b	#6,PlayMode.w			; NAT: Check if this is minigame
		beq.s	locret_69B6			; branch if so
		move.l	#Obj_LevelIntro_PlayerLaunchFromGround,(Dynamic_object_RAM+$94).w

loc_693E:
		cmpi.w	#$800,(Current_zone_and_act).w
		bne.s	loc_6986
		move.l	#Obj_LevelIntro_PlayerFallIntoGround,(Dynamic_object_RAM+$94).w
		move.b	#2,$20(a1)
		bset	#1,$2A(a1)
		tst.l	(a2)
		beq.s	loc_6986
		move.b	#2,$20(a2)
		bset	#1,$2A(a2)

loc_6986:
locret_69B6:
		rts

; =============== S U B R O U T I N E =======================================

SpawnLevelMainSprites_SpawnPlayers:
		move.l	#Obj_Sonic,(Player_1).w
		move.l	#Obj_Tails,(Player_2).w
		move.l	#Obj_DashDust,(Dust).w
		move.l	#Obj_DashDust,(Dust_P2).w
		move.w	(Player_1+x_pos).w,(Player_2+x_pos).w
		move.w	(Player_1+y_pos).w,(Player_2+y_pos).w

		cmp.b	#2,PlayMode.w		; NAT: Check if this is team mode
		bne.s	.noteam			; if not, branch
		sub.w	#$20,Player_2+x_pos.w	; move Tails back

.noteam		clr.w	(CPU_Routine).w

		cmp.b	#6,PlayMode.w		; check if minigame
		bne.s	.yes			; branch if not
		cmp.w	#$300,Current_Zone.w	; check if minigame
		beq.s	.nope			; branch if not

.yes		move.l	#Obj_Insta_Shield,(Shield).w
		move.l	#Obj_Insta_Shield,(Shield_P2).w
		move.w	#Player_1,(Shield+$42).w
		move.w	#Player_2,(Shield_P2+$42).w

.nope		jsr	ResetPlayerStatus	; reset player status
		clr.b	Player_1+$34.w		; NAT: reset invinciblity time
		clr.b	Player_2+$34.w		;
		move.w	#ArtTile_ArtUnc_Tails,SavedTileP2.w	; reset tile
		move.w	#ArtTile_ArtUnc_Sonic,SavedTileP1.w	; reset tile

		clr.w	Collision_response_list.w		; NAT: Move here for simplicity
		rts
; ---------------------------------------------------------------------------

Obj_ColRespBounceCheck:
_bouncewait =	45		; time to wait after bounce happened
_itlrdelay =	$05		; delay for disabling interlace
_colwidth =	$18		; width of collision
_colheight =	$1C		; height of collision

_speedmult =	$600		; bounce speed multiplier for roll collision
_speedmultw =	$4A0		; bounce speed multiplier for roll collision underwater
_sbncspdx =	-$200		; x-velocity for shortbounce
_sbncspdy =	-$400		; y-velocity for shortbounce
_sbncspdxw =	-$160		; x-velocity for shortbounce underwater
_sbncspdyw =	-$280		; y-velocity for shortbounce underwater

		clr.w	Collision_response_list.w

	; check for look up/down
		lea	Distance_from_screen_top.w,a1	; get screen top to a1
		lea	CameraOffY.w,a2			; get camera offset to a2
		moveq	#0,d0				; clear accumulator

		tst.w	(a1)+				; check offset
		beq.s	.centre				; if 0, branch
		smi	d1				; if less than 0, set d1
		sub.b	d1,d0				; sub d2 from d0 (offset by 1)

		tst.w	(a1)				; check offset
		beq.s	.centre				; if 0, branch
		smi	d1				; if less than 0, set d1
		add.b	d1,d0				; add d2 to d0 (offset by -1)
		bne.s	.centre				; if nto same, branch

		move.w	(a1),d0				; get second position
		bpl.s	.abs1				; if positive, branch
		neg.w	d0				; negate it

.abs1		move.w	-(a1),d1			; get first position
		bpl.s	.abs2				; if positive, branch
		neg.w	d1				; negate it

.abs2		cmp.w	d0,d1				; check which one has smaller
		ble.s	.got				; if first, branch
		addq.w	#2,a1				; use second position
.got		move.w	(a1),(a2)			; set camera y-pos
		bra.s	.intlc

.centre		tst.w	(a2)				; check if camera is already centered
		beq.s	.intlc				; if so, just go interlace
		bpl.s	.posy				; if positive, branch
		addq.w	#4,(a2)				; centre (double for the next instruction)
.posy		subq.w	#2,(a2)				; centre

	; decrease interlace delay
.intlc		tst.b	_itlrdelay(a0)			; check if delay is 0
		beq.s	.nodel				; if ye, brahch
		subq.b	#1,_itlrdelay(a0)		; decrease delay

	; NAT: check for bounce or interlace effect
.nodel		tst.b	SpawnWait.w			; check if spawnwait is non0
		beq.s	.nostop				; if so, dont stop bounce
		move.b	#4,_nobounce(a0)		; force no bounce to be on

	; check for death
.nostop		lea	Player_1.w,a1			; get p1 to a1
		lea	Player_2.w,a2			; get p2 to a2

		cmp.b	#6,routine(a1)			; check if player is dead
		bhs.s	.nocollbnc			; if so, ignore
		cmp.b	#6,routine(a2)			; check if player is dead
		bhs.s	.nocollbnc			; if so, ignore

	; check for user level collision
		move.w	x_pos(a1),d0			; get p1 xpos to d0
		sub.w	x_pos(a2),d0			; sub p2 xpos from d0
		add.w	#_colwidth,d0			; add collision radius to d0
		cmp.w	#_colwidth*2,d0			; check against total width
		bhs.s	.nocoll				; if no collision, branch

		move.w	y_pos(a1),d0			; get p1 xpos to d0
		sub.w	y_pos(a2),d0			; sub p2 xpos from d0
		add.w	#_colheight,d0			; sub collision radius to d0
		cmp.w	#_colheight*2,d0		; check against total width
		bhs.s	.nocoll				; if no collision, branch

	; check for action to take
		btst	#4,OptionsBits.w		; check if bounce mode is enabled
		beq.s	.interlace			; if not, process interlace effect
		tst.b	_nobounce(a0)			; check if noounce is set to 0
		beq.s	.checkbounce			; if so, check bounce status

	; enable interlacing
.interlace	tst.b	_itlrdelay(a0)			; check if we set a delay for interlace
		bne.s	.nointer			; if yes, branch
		st	EnableInterlace.w		; enable interlace effect
		rts

	; disable interlacing and decrease bounce disable flag
.nocollbnc	move.b	#4+1,_nobounce(a0)		; force no bounce to be on
.nocoll		subq.b	#1,_nobounce(a0)		; decrease nobounce ctr
		bpl.s	.nointer			; if above 0, branch
		clr.b	_nobounce(a0)			; force nobounce ctr to 0

.nointer	clr.b	EnableInterlace.w		; disable interlace effect
		rts
; ---------------------------------------------------------------------------

	; first we check if a player is invincible
.checkbounce	moveq	#0,d0				; set DOMINATE to 0
		tst.b	double_jump_flag(a1)		; check if player is performing jump move
		sne	d1				; if so, add 1 to d0
		sub.b	d1,d0				;

		tst.b	invincibility_timer(a1)		; check if p1 is invincible
		sne	d1				; if so, add 2 to d0
		sub.b	d1,d0				;
		sub.b	d1,d0				;

		tst.b	double_jump_flag(a2)		; check if player is performing jump move
		sne	d1				; if so, sub 1 from d0
		add.b	d1,d0				;

		tst.b	invincibility_timer(a2)		; check if p2 is invincible
		sne	d1				; if so, sub 2 from d0
		add.b	d1,d0				;
		add.b	d1,d0				;
		bne.w	.dominatecheck			; if not 0, branch to dominate check code

	; then we check rolling behavior
		moveq	#0,d1				; set ROLL to 0
		cmp.b	#2,anim(a1)			; check Sonic rolling
		beq.s	.dmp1				; if so, branch
		cmp.b	#9,anim(a1)			; check Sonic spindashing
		bne.s	.noap1				; if not, branch
.dmp1		addq.b	#1,d0				; increment DOMINATE to p1
		addq.b	#1,d1				; set ROLL

.noap1		cmp.b	#2,anim(a2)			; check Tails rolling
		beq.s	.dmp2				; if so, branch
		cmp.b	#9,anim(a2)			; check Tails spindashing
		bne.s	.noap2				; if not, branch
.dmp2		subq.b	#1,d0				; decrement DOMINATE to p2
		addq.b	#1,d1				; set ROLL

.noap2		tst.b	d0				; check for DOMINATE
		bne.s	.dominatecheck			; if not 0, branch to dominate check code
		tst.b	d1				; check for ROLL
		bne.w	.rollcheck			; if not 0, branch to dominate check code

	; do a short bounce in hurt animation
		move.b	#_bouncewait,_nobounce(a0)	; force no bounce to be on
		move.b	#10,_itlrdelay(a0)		; set some interlace delay
		move.w	x_pos(a1),d0			; get x-pos for p1 to d0
		sub.w	x_pos(a2),d0			; sub x-pos for p2 from d0
		spl	d0				; decide direction for movement

		bsr.s	.shortbounce			; do short bounce for p1
		exg	a1,a2				; do short bounce for p2
		tst.b	d0				; setup flags
		seq	d0				; move player the opposite way

.shortbounce	cmp.b	#4,routine(a1)			; check if player is hurt
		bhs.s	.rts2				; if so, ignore

		or.b	#$12,status(a1)			; make airborne and fake rolljump
		move.w	#4,move_lock(a1)		; lock control for some frames
		bclr	#0,spin_dash_flag(a1)		; disable spindash
		move.b	#$1A,anim(a1)			; set to hurt animation
		clr.w	ground_vel(a1)			; clear inertia
		clr.b	stick_to_convex(a1)		; do not stick to convex surfaces (fix CNZ disc)

		move.w	#_sbncspdy,y_vel(a1) 		; give some speed to bounce away
		move.w	#_sbncspdx,d1
		btst	#Status_Underwater,status(a1)	; check if underwater
		beq.s	.nowater2			; if not, branch
		move.w	#_sbncspdyw,y_vel(a1) 		; give some speed to bounce away
		move.w	#_sbncspdxw,d1

.nowater2	tst.b	d0				; check if movement needs to be flipped
		bpl.s	.setsped			; if not, branch
		neg.w	d1				; negate x-velocity

.setsped	move.w	d1,x_vel(a1)			; set as the x-velocity
.rts2		rts
; ---------------------------------------------------------------------------

.dominatecheck	bpl.s	.donimatep2			; branch if p1 is DOMINATING p2
		exg	a1,a2				; swap addresses of players

.donimatep2	move.b	#_bouncewait,_nobounce(a0)	; force no bounce to be on
		move.b	#10,_itlrdelay(a0)		; set some interlace delay

		tst.b	double_jump_flag(a1)		; check if DOMINATING player is in air is performing jump move
		bne.s	.onfloor			; if so, branch
		btst	#1,status(a1)			; check if DOMINATING player is in air
		beq.s	.onfloor			; if not, branch
		bsr.s	.processroll			; process roll for DOMINATING player

.onfloor	move.w	x_pos(a1),d0			; get x-pos for p1 to d0
		sub.w	x_pos(a2),d0			; sub x-pos for p2 from d0
		smi	d0				; decide direction for movement
		exg	a1,a2				; swap addresses of pkjlayers
		bra.s	.shortbounce			; do a short bounce
; ---------------------------------------------------------------------------

.rollcheck	move.b	#_bouncewait,_nobounce(a0)	; force no bounce to be on
		move.b	#10,_itlrdelay(a0)		; set some interlace delay

		bsr.s	.processroll			; process roll for player 1
		exg	a1,a2				; process roll for player 2

.processroll	cmp.b	#4,routine(a1)			; check if player is hurt
		bhs.s	.rts3				; if so, ignore
		or.b	#$12,status(a1)			; make airborne and fake rolljump
		bclr	#0,spin_dash_flag(a1)		; disable spindash
		clr.b	stick_to_convex(a1)		; do not stick to convex surfaces (fix CNZ disc)
		move.b	#2,anim(a1)			; set to roll animation

		move.w	#_speedmult,d2			; set above water speed
		btst	#Status_Underwater,status(a1)	; check if underwater
		beq.s	.nowater			; if not, branch
		move.w	#_speedmultw,d2			; set under water speed

.nowater	move.w	x_pos(a1),d1			; get p1 x-pos to d0
		move.w	y_pos(a1),d2			; get p1 y-pos to d1
		sub.w	x_pos(a2),d1			; sub p1 x-pos from d0
		sub.w	y_pos(a2),d2			; sub p1 y-pos from d1
		jsr	GetArcTan.w			; get resulting angle
		jsr	GetSineCosine.w			; calculate real angle

		muls.w	#_speedmult,d1			; multiply by specific speed
		asr.l	#8,d1				; shift into position
		move.w	d1,x_vel(a1)			; save as new x-velocity

		muls.w	#_speedmult,d0			; multiply by specific speed
		asr.l	#8,d0				; shift into position
		move.w	d0,y_vel(a1)			; save as new x-velocity
.rts3		rts

; =============== S U B R O U T I N E =======================================

Handle_Onscreen_Water_Height:
		tst.b	(Water_flag).w
		beq.w	sub_714E
		tst.b	(Deform_lock).w
		bne.s	loc_6C52
		bsr.w	sub_6F4A		; HCZ water tunnel crap
		bsr.w	DynamicWaterHeight

loc_6C52:
		clr.b	(Water_full_screen_flag).w
		move.w	(Mean_water_level).w,(Water_level).w
		cmpi.w	#$100,(Current_zone_and_act).w
		bne.s	loc_6C70
		cmpi.w	#$900,(Camera_X_pos).w
		blo.s	loc_6C86

loc_6C70:
		move.w	(Water_level).w,d0
		sub.w	(Camera_Y_pos).w,d0
		beq.s	loc_6C80
		bcc.s	loc_6C8E
		tst.w	d0
		bpl.s	loc_6C8E

loc_6C80:
		move.b	#1,(Water_full_screen_flag).w

loc_6C86:
		st	(H_int_counter).w
		rts
; ---------------------------------------------------------------------------

loc_6C8E:
		cmpi.w	#$DF,d0
		blo.s	loc_6C98
		moveq	#-1,d0

loc_6C98:
		move.b	d0,(H_int_counter).w

loc_6C9C:
		bra.w	sub_714E
; End of function Handle_Onscreen_Water_Height

; ---------------------------------------------------------------------------
		clr.b	(Water_full_screen_flag).w
		move.w	(Mean_water_level).w,(Water_level).w
		move.l	#HInt3,(H_int_addr).w
		cmpi.w	#$1000,(V_blank_cycles).w
		blo.s	loc_6CC4
		move.l	#HInt4,(H_int_addr).w

loc_6CC4:
		move.w	(Water_level).w,d0
		sub.w	(Camera_Y_pos).w,d0
		beq.s	loc_6CDC
		bcc.s	loc_6D18
		tst.w	d0
		bpl.s	loc_6D18
		addi.w	#$1E0,d0
		beq.s	loc_6CDC
		bcs.s	loc_6CEA

loc_6CDC:

		move.b	#1,(Water_full_screen_flag).w
		move.b	#-1,(H_int_counter).w
		rts
; ---------------------------------------------------------------------------

loc_6CEA:
		cmpi.w	#$DF,d0
		blo.s	loc_6CF4
		move.w	#$FF,d0

loc_6CF4:
		move.b	d0,(H_int_counter).w
		move.b	#1,(Water_full_screen_flag).w
		move.l	#HInt5,(H_int_addr).w
		cmpi.w	#$1000,(V_blank_cycles).w
		blo.s	loc_6D16
		move.l	#HInt_6,(H_int_addr).w

loc_6D16:
		bra.w	sub_714E
; ---------------------------------------------------------------------------

loc_6D18:

		cmpi.w	#$DF,d0
		blo.s	loc_6D22
		move.w	#$FF,d0

loc_6D22:
		move.b	d0,(H_int_counter).w

loc_6D26:
		bra.w	sub_714E
; ---------------------------------------------------------------------------
StartingWaterHeights:	binclude "Levels/Misc/StartingWaterHeights.bin"
	even


; =============== S U B R O U T I N E =======================================


DynamicWaterHeight:
		moveq	#0,d0
		move.w	(Current_zone_and_act).w,d0
		ror.b	#1,d0
		lsr.w	#6,d0
		andi.w	#-2,d0
		move.w	off_6D9C(pc,d0.w),d0
		jsr	off_6D9C(pc,d0.w)
		moveq	#0,d1
		move.b	(Water_speed).w,d1
		move.w	(Target_water_level).w,d0
		sub.w	(Mean_water_level).w,d0
		beq.s	locret_6D9A
		bcc.s	loc_6D96
		neg.w	d1

loc_6D96:
		add.w	d1,(Mean_water_level).w

locret_6D9A:
		rts
; End of function DynamicWaterHeight

; ---------------------------------------------------------------------------
off_6D9C:	dc.w locret_6DDC-off_6D9C

		dc.w loc_6DDE-off_6D9C
		dc.w loc_6E82-off_6D9C
		dc.w loc_6E9C-off_6D9C
		dc.w locret_6ECA-off_6D9C
		dc.w locret_6ECA-off_6D9C
		dc.w locret_6ECA-off_6D9C
		dc.w locret_6ECA-off_6D9C
		dc.w locret_6ECA-off_6D9C
		dc.w locret_6ECA-off_6D9C
		dc.w locret_6ECA-off_6D9C
		dc.w locret_6ECA-off_6D9C
		dc.w loc_6ECC-off_6D9C
		dc.w loc_6EE8-off_6D9C
		dc.w locret_6F1A-off_6D9C
		dc.w locret_6F1A-off_6D9C
		dc.w locret_6F1A-off_6D9C
		dc.w locret_6F1A-off_6D9C
		dc.w locret_6F1A-off_6D9C
		dc.w locret_6F1A-off_6D9C
		dc.w locret_6F1A-off_6D9C
		dc.w locret_6F1A-off_6D9C
		dc.w locret_6F1A-off_6D9C
		dc.w locret_6F1A-off_6D9C
		dc.w locret_6F1A-off_6D9C
		dc.w locret_6F1A-off_6D9C
		dc.w locret_6F1A-off_6D9C
		dc.w loc_6F1C-off_6D9C
		dc.w locret_6F1A-off_6D9C
		dc.w locret_6F1A-off_6D9C
		dc.w locret_6F1A-off_6D9C
		dc.w locret_6F1A-off_6D9C
; ---------------------------------------------------------------------------

locret_6DDC:
		rts
; ---------------------------------------------------------------------------

loc_6DDE:
		cmpi.w	#3,(Player_mode).w
		bne.s	loc_6DF6
		cmpi.w	#$820,(Camera_target_max_Y_pos).w
		beq.s	locret_6E6C
		cmpi.w	#$3B60,(Camera_X_pos).w
		bhs.s	locret_6E6C

loc_6DF6:
		cmpi.w	#$2440,(Camera_X_pos).w
		bhs.s	loc_6E14
		cmpi.w	#$618,(Target_water_level).w
		bne.s	locret_6E6C
		move.w	#$528,(Target_water_level).w
		move.b	#2,(Water_speed).w
		rts
; ---------------------------------------------------------------------------

loc_6E14:
		tst.b	(Level_trigger_array).w
		bne.s	loc_6E28
		cmpi.w	#$2850,(Camera_X_pos).w
		blo.s	locret_6E6C
		move.b	#1,(Level_trigger_array).w

loc_6E28:
		cmpi.w	#$618,(Target_water_level).w
		beq.s	locret_6E6C
		cmpi.w	#$2900,(Camera_X_pos).w
		bhs.s	loc_6E52
		move.w	#-1,(ScrShake_Value).w
		jsr	Create_New_Sprite.w
		bne.s	loc_6E52
		move.l	#Obj_6E6E,(a1)
		move.b	#$B4,$24(a1)

loc_6E52:

		lea	(Level_layout_main+$1C).w,a3
		moveq	#3,d1

loc_6E58:
		movea.w	(a3),a1
		move.b	#0,$4E(a1)
		addq.w	#4,a3
		dbf	d1,loc_6E58
		move.w	#$618,(Target_water_level).w

locret_6E6C:

		rts
; ---------------------------------------------------------------------------

Obj_6E6E:
		subq.b	#1,$24(a0)
		beq.s	loc_6E76
		rts
; ---------------------------------------------------------------------------

loc_6E76:
		move.w	#0,(ScrShake_Value).w
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_6E82:
		lea	(dword_6E8C).l,a1
		bra.w	loc_6F2C
; ---------------------------------------------------------------------------
dword_6E8C:	dc.l $85000900
		dc.l $86802A00
		dc.l $86803500
		dc.l $86A0FFFF
; ---------------------------------------------------------------------------

loc_6E9C:
		tst.b	(__u_FAA2).w
		beq.s	loc_6EA4
		rts
; ---------------------------------------------------------------------------

loc_6EA4:
		lea	(dword_6EBA).l,a1
		cmpi.w	#3,(Player_mode).w
		bne.s	loc_6F2C
		lea	(dword_6EC2).l,a1
		bra.s	loc_6F2C
; ---------------------------------------------------------------------------
dword_6EBA:	dc.l $7003E00
		dc.l $7E0FFFF
dword_6EC2:	dc.l $7004100
		dc.l $8360FFFF
; ---------------------------------------------------------------------------

locret_6ECA:
		rts
; ---------------------------------------------------------------------------

loc_6ECC:
		lea	(dword_6ED4).l,a1
		bra.s	loc_6F2C
; ---------------------------------------------------------------------------
dword_6ED4:	dc.l $8B000E00
		dc.l $8A001980
		dc.l $8A002340
		dc.l $8AC82C00
		dc.l $8FF0FFFF
; ---------------------------------------------------------------------------

loc_6EE8:
		cmpi.w	#3,(Player_mode).w
		beq.s	loc_6EF2
		rts
; ---------------------------------------------------------------------------

loc_6EF2:
		tst.b	(__u_F7C2).w
		bne.s	loc_6F00
		lea	(dword_6F12).l,a1
		bra.s	loc_6F2C
; ---------------------------------------------------------------------------

loc_6F00:
		move.w	(Camera_Y_pos).w,d0
		cmp.w	(Mean_water_level).w,d0
		blo.s	locret_6F10
		move.w	#$660,(Mean_water_level).w

locret_6F10:
		rts
; ---------------------------------------------------------------------------
dword_6F12:	dc.l $8FF00D80
		dc.l $8B20FFFF
; ---------------------------------------------------------------------------

locret_6F1A:
		rts
; ---------------------------------------------------------------------------

loc_6F1C:
		cmpi.w	#$1DE0,(Camera_X_pos).w
		blo.s	locret_6F2A
		move.w	#$510,(Target_water_level).w

locret_6F2A:
		rts
; ---------------------------------------------------------------------------

loc_6F2C:

		move.w	(Camera_X_pos).w,d0

loc_6F30:
		move.l	(a1)+,d1
		cmp.w	d1,d0
		bhi.s	loc_6F30
		swap	d1
		tst.w	d1
		bpl.s	loc_6F44
		andi.w	#$7FFF,d1
		move.w	d1,(Mean_water_level).w

loc_6F44:
		move.w	d1,(Target_water_level).w

locret_6F48:
		rts

; =============== S U B R O U T I N E =======================================


sub_6F4A:
		tst.b	(Debug_On).w
		bne.s	locret_6F48
		cmpi.b	#1,(Current_zone).w
		bne.s	locret_6F48
		cmpi.w	#2,(Player_mode).w
		beq.s	loc_6F82
		lea	(WindTunnel_flag).w,a3
		lea	(Player_1).w,a1
		move.b	(Ctrl_1_logical).w,d6
		moveq	#0,d5
		bsr.s	HCZ_WaterTunnels
		addq.w	#1,a3
		lea	(Player_2).w,a1
		move.b	(Ctrl_2_logical).w,d6
		moveq	#1,d5
		bra.s	HCZ_WaterTunnels
; ---------------------------------------------------------------------------

loc_6F82:
		lea	(WindTunnel_flag_P2).w,a3
		lea	(Player_1).w,a1
		move.b	(Ctrl_1_logical).w,d6
		moveq	#0,d5
; End of function sub_6F4A


; =============== S U B R O U T I N E =======================================


HCZ_WaterTunnels:
		lea	(HCZ1_WaterTunLocs).l,a2
		tst.b	(Current_act).w
		beq.s	loc_6FA2
		lea	(HCZ2_WaterTunLocs).l,a2

loc_6FA2:
		move.w	(a2)+,d2

loc_6FA4:
		move.w	$10(a1),d0
		cmp.w	(a2),d0
		blo.w	loc_7046
		cmp.w	4(a2),d0
		bhs.w	loc_7046
		move.w	$14(a1),d1
		cmp.w	2(a2),d1
		blo.w	loc_7046
		cmp.w	6(a2),d1
		bhs.w	loc_7046
		cmpi.b	#4,5(a1)
		bhs.w	loc_7058
		btst	d5,(__u_F7C7).w
		bne.s	locret_702E
		tst.b	$2E(a1)
		bne.s	loc_7058
		move.b	#1,(a3)
		move.w	8(a2),d0
		move.w	d0,$18(a1)
		ext.l	d0
		lsl.l	#8,d0
		add.l	d0,$10(a1)
		move.w	$A(a2),d1
		move.w	d1,$1A(a1)
		ext.l	d1
		lsl.l	#8,d1
		add.l	d1,$14(a1)

		move.b	#$F,anim(a1)
		bset	#1,status(a1)
		clr.b	double_jump_flag(a1)
		clr.b	spin_dash_flag(a1)		; NAT: Also clear spindash flag

		tst.b	$C(a2)
		bne.s	loc_7030
		btst	#0,d6
		beq.s	loc_7024
		subq.w	#1,$14(a1)

loc_7024:
		btst	#1,d6
		beq.s	locret_702E
		addq.w	#1,$14(a1)

locret_702E:
		rts
; ---------------------------------------------------------------------------

loc_7030:
		btst	#2,d6
		beq.s	loc_703A
		subq.w	#1,$10(a1)

loc_703A:
		btst	#3,d6
		beq.s	locret_7044
		addq.w	#1,$10(a1)

locret_7044:
		rts
; ---------------------------------------------------------------------------

loc_7046:
		adda.w	#$E,a2
		dbf	d2,loc_6FA4
		tst.b	(a3)
		beq.s	locret_705A
		move.b	#$1A,$20(a1)

loc_7058:
		clr.b	(a3)

locret_705A:
		rts
; End of function HCZ_WaterTunnels

; ---------------------------------------------------------------------------
HCZ1_WaterTunLocs:	dc.w	 $E
		dc.w   $380,  $580,  $5A0,  $5C0,  $3F0,	$FFE0,	   0	; Min X, Min Y, Max X, Max Y, X Velo, Y Velo, Player can influence which axis flag (Set = X, Clear = Y)
		dc.w   $5A0,  $560,  $A80,  $5C0,  $3F0, $FFF0,	    0
		dc.w   $1400, $A80, $15A0,  $AC0,  $400,     0,     0
		dc.w   $15A0,	$A40, $1960,  $AC0,  $400, $FFC0,     0
		dc.w   $1990,	 $780, $19E0, $7F0,	 0, $FC00,  $100
		dc.w   $1990,  $7F0,	$19F0,	$878, $FEC0, $FC00,  $100
		dc.w   $1990,  $878, $19F0,	 $8FD,	$140, $FC00,  $100
		dc.w   $1990,  $8FD, $19F0,  $978,	$FEC0, $FC00,  $100
		dc.w   $1990,  $978, $19F0,  $A10,  $100,	$FC00,	$100
		dc.w   $1960,  $A10, $19D0,  $A80,  $300, $FD80,	 $100
		dc.w   $2B00,  $800, $2C20,  $840,  $400,     0,     0
		dc.w   $2C20,	$7C0, $2EE0,  $840,  $400, $FFC0,     0
		dc.w   $2EE0,	 $790, $2F50,  $800,  $300, $FD00,  $100
		dc.w   $2F00,  $700,	$2F70,	$790, $100, $FC00,  $100
		dc.w   $2F30,  $680, $2F70,	 $700,	   0, $FC00,  $100
HCZ2_WaterTunLocs:	dc.w	  1
		dc.w   $3980,  $800, $3AA0,  $840,  $400,	    0,	   0
		dc.w   $3AA0,  $7C0, $3F00,  $840,  $400, $FFC0,	    0


; =============== S U B R O U T I N E =======================================


sub_714E:

		cmpi.w	#$101,(Current_zone_and_act).w
		beq.s	loc_716A
		cmpi.w	#$500,(Current_zone_and_act).w
		beq.s	loc_71D2
		cmpi.b	#8,(Current_zone).w
		beq.w	loc_72FA
		rts
; ---------------------------------------------------------------------------

loc_716A:
		lea	(Player_1).w,a1
		move.b	(Ctrl_1_logical).w,d2
		bsr.s	sub_717C
		lea	(Player_2).w,a1
		move.b	(Ctrl_2_logical).w,d2
; End of function sub_714E


; =============== S U B R O U T I N E =======================================


sub_717C:
		btst	#1,$2A(a1)
		bne.s	loc_71B8
		cmpi.b	#$C,$46(a1)
		beq.s	loc_71B8
		lea	(Level_layout_header).w,a2
		move.w	$14(a1),d0
		lsr.w	#5,d0
		and.w	(Layout_row_index_mask).w,d0
		move.w	8(a2,d0.w),d0
		move.w	$10(a1),d1
		lsr.w	#7,d1
		add.w	d1,d0
		movea.w	d0,a2
		move.b	(a2),d0
		lea	byte_7498(pc),a2
		moveq	#9,d1

loc_71B0:
		cmp.b	-(a2),d0
		dbeq	d1,loc_71B0
		beq.s	loc_71CC

loc_71B8:
		tst.b	$2B(a1)
		bpl.s	locret_71CA
		move.w	#5,$32(a1)
		andi.b	#$7F,$2B(a1)

locret_71CA:
		rts
; ---------------------------------------------------------------------------

loc_71CC:
		moveq	#-8,d0
		bra.w	loc_723E
; End of function sub_717C

; ---------------------------------------------------------------------------

loc_71D2:
		lea	(Player_1).w,a1
		move.b	(Ctrl_1_logical).w,d2
		bsr.s	sub_71E4
		lea	(Player_2).w,a1
		move.b	(Ctrl_2_logical).w,d2

; =============== S U B R O U T I N E =======================================


sub_71E4:
		btst	#1,$2A(a1)
		bne.s	loc_7220
		btst	#3,$2A(a1)
		bne.s	loc_7220
		lea	(Level_layout_header).w,a2
		move.w	$14(a1),d0
		lsr.w	#5,d0
		and.w	(Layout_row_index_mask).w,d0
		move.w	8(a2,d0.w),d0
		move.w	$10(a1),d1
		lsr.w	#7,d1
		add.w	d1,d0
		movea.w	d0,a2
		move.b	(a2),d0
		lea	byte_74A2(pc),a2
		moveq	#9,d1

loc_7218:
		cmp.b	-(a2),d0
		dbeq	d1,loc_7218
		beq.s	loc_7234

loc_7220:
		tst.b	$2B(a1)
		bpl.s	locret_7232
		move.w	#5,$32(a1)
		andi.b	#$7F,$2B(a1)

locret_7232:
		rts
; ---------------------------------------------------------------------------

loc_7234:
		lea	(byte_74A2).l,a2
		move.b	(a2,d1.w),d0

loc_723E:
		beq.s	loc_728A
		move.b	$1C(a1),d1
		tst.b	d0
		bpl.s	loc_7254
		cmp.b	d0,d1
		ble.s	loc_725E
		subi.w	#$40,$1C(a1)
		bra.s	loc_725E
; ---------------------------------------------------------------------------

loc_7254:
		cmp.b	d0,d1
		bge.s	loc_725E
		addi.w	#$40,$1C(a1)

loc_725E:
		bclr	#0,$2A(a1)
		tst.b	d1
		bpl.s	loc_726E
		bset	#0,$2A(a1)

loc_726E:
		move.b	#$1B,$20(a1)
		cmpi.b	#5,(Current_zone).w
		bne.s	loc_7282
		move.b	#$19,$20(a1)

loc_7282:
		ori.b	#$80,$2B(a1)
		rts
; ---------------------------------------------------------------------------

loc_728A:
		move.w	#4,d1
		move.w	$1C(a1),d0
		btst	#2,d2
		beq.s	loc_72AC
		move.b	#0,$20(a1)
		bset	#0,$2A(a1)
		sub.w	d1,d0
		tst.w	d0
		bpl.s	loc_72AC
		sub.w	d1,d0

loc_72AC:
		btst	#3,d2
		beq.s	loc_72C6
		move.b	#0,$20(a1)
		bclr	#0,$2A(a1)
		add.w	d1,d0
		tst.w	d0
		bmi.s	loc_72C6
		add.w	d1,d0

loc_72C6:
		move.w	#4,d1
		tst.w	d0
		beq.s	loc_72EE
		bmi.s	loc_72E0
		sub.w	d1,d0
		bhi.s	loc_72DE
		move.w	#0,d0
		move.b	#5,$20(a1)

loc_72DE:
		bra.s	loc_72EE
; ---------------------------------------------------------------------------

loc_72E0:
		add.w	d1,d0
		bhi.s	loc_72EE
		move.w	#0,d0
		move.b	#5,$20(a1)

loc_72EE:
		move.w	d0,$1C(a1)
		ori.b	#$80,$2B(a1)
		rts
; End of function sub_71E4

; ---------------------------------------------------------------------------

loc_72FA:
		lea	(Player_1).w,a1
		move.b	(Ctrl_1_logical).w,d2
		bsr.s	sub_730C
		lea	(Player_2).w,a1
		move.b	(Ctrl_2_logical).w,d2

; =============== S U B R O U T I N E =======================================


sub_730C:
		btst	#1,$2A(a1)
		bne.s	loc_734A
		btst	#3,$2A(a1)
		bne.s	loc_734A
		lea	(Level_layout_header).w,a2
		moveq	#$14,d0
		add.w	$14(a1),d0
		lsr.w	#5,d0
		and.w	(Layout_row_index_mask).w,d0
		move.w	8(a2,d0.w),d0
		move.w	$10(a1),d1
		lsr.w	#7,d1
		add.w	d1,d0
		movea.w	d0,a2
		move.b	(a2),d0
		lea	byte_74BD(pc),a2
		moveq	#$10,d1

loc_7342:
		cmp.b	-(a2),d0
		dbeq	d1,loc_7342
		beq.s	loc_7384

loc_734A:
		tst.b	$2B(a1)
		bpl.s	locret_7382
		move.w	#5,$32(a1)
		andi.b	#$7F,$2B(a1)
		btst	#1,$2A(a1)
		bne.s	locret_7382
		move.b	$44(a1),$1E(a1)
		move.b	$45(a1),$1F(a1)
		bclr	#2,$2A(a1)
		bclr	#4,$2A(a1)
		move.b	#0,$20(a1)

locret_7382:
		rts
; ---------------------------------------------------------------------------

loc_7384:
		add.w	d1,d1
		lea	(byte_74BD).l,a2
		move.b	(a2,d1.w),d0
		move.b	1(a2,d1.w),d1
		bne.w	loc_7448

loc_7398:

		move.b	$1C(a1),d1
		tst.b	d0
		bpl.s	loc_73C8
		cmp.b	d0,d1
		ble.s	loc_73EE
		subi.w	#$40,$1C(a1)
		tst.b	$2B(a1)
		bmi.s	loc_73EE
		tst.w	$1C(a1)
		bmi.s	loc_73EE
		asr	$1C(a1)
		cmpi.b	#-8,d0
		bne.s	loc_73EE
		move.w	#0,$1C(a1)
		bra.s	loc_73EE
; ---------------------------------------------------------------------------

loc_73C8:
		cmp.b	d0,d1
		bge.s	loc_73EE
		addi.w	#$40,$1C(a1)
		tst.b	$2B(a1)
		bmi.s	loc_73EE
		tst.w	$1C(a1)
		bpl.s	loc_73EE
		asr	$1C(a1)
		cmpi.b	#8,d0
		bne.s	loc_73EE
		move.w	#0,$1C(a1)

loc_73EE:
		tst.b	d1
		beq.s	loc_7402
		bclr	#0,$2A(a1)
		tst.b	d1
		bpl.s	loc_7402
		bset	#0,$2A(a1)

loc_7402:
		move.b	#$19,$20(a1)
		move.b	$1E(a1),d0
		subi.b	#$E,d0
		ext.w	d0
		add.w	d0,$14(a1)
		move.b	#$E,$1E(a1)
		move.b	#7,$1F(a1)
		bclr	#2,$2A(a1)
		bclr	#4,$2A(a1)
		ori.b	#$80,$2B(a1)
		move.b	(V_int_run_count+3).w,d0
		andi.b	#$F,d0
		bne.s	locret_7446
		moveq	#-$38,d0
		jmp	Play_Sound_2.w

locret_7446:
		rts
; ---------------------------------------------------------------------------

loc_7448:
		cmpi.b	#1,d1
		bne.s	loc_7462
		move.w	$10(a1),d1
		andi.w	#$7F,d1
		cmpi.w	#$40,d1
		blo.w	loc_7398
		bra.w	loc_734A
; ---------------------------------------------------------------------------

loc_7462:
		cmpi.b	#2,d1
		bne.s	loc_747C
		move.w	$10(a1),d1
		andi.w	#$7F,d1
		cmpi.w	#$40,d1
		bhs.w	loc_7398
		bra.w	loc_734A
; ---------------------------------------------------------------------------

loc_747C:
		moveq	#-8,d0
		cmpi.b	#$C,$46(a1)
		beq.w	loc_7398
		moveq	#8,d0
		bra.w	loc_7398
; End of function sub_730C

; ---------------------------------------------------------------------------
		dc.b  $1C, $72,	$83, $84, $8B, $91, $9F, $A0, $A5, $A6
byte_7498:	dc.b  $2E, $C6,	$33, $C5, $24, $2A, $44, $1F, $27, $2B

byte_74A2:	dc.b  $F8, $F8,	  8,   8, $F4, $F4, $F4,  $C,  $C,  $C,	 $F, $13, $14, $15, $16, $17, $35, $6C,	$6D, $76
		dc.b  $77, $7E, $7F, $85, $8A, $8C, $90

byte_74BD:	dc.b  $F8,   0,	$F8,   0, $FA,	 1, $FA,   2, $F8,   0,	$F8,   0, $F8,	 0,   6,   1,	0,   3,	  6,   2
		dc.b    8,   0,   8,   0,   8,   0,   8,   0,   8,   0,   0,   3, $F8,   0,   0

; ---------------------------------------------------------------------------
; Water palette transition tables

; These are used by HInt3 to load the water palette only a small bit at a time,
; this is to space out the CRAM writes to push the VDP dots offscreen.
;
; Each value is an offset into Water_palette.
; From there, 6 bytes, meaning 3 palette entries, are transferred to CRAM.
; ---------------------------------------------------------------------------

watertransheader macro {INTLABEL}
__LABEL__ label *
	; Number of entries in list minus one
	dc.w (((__LABEL___End - __LABEL__ - 2) / 2) - 1)
	endm

WaterTransition_AIZ1: watertransheader
		dc.w 2
		dc.w $68
		dc.w $62
		dc.w $42
		dc.w $48
		dc.w $4E
		dc.w $54
		dc.w 8
		dc.w $E
		dc.w $14
		dc.w $1A
		dc.w $34
		dc.w $22
		dc.w $3A
		dc.w $2E
		dc.w $28
WaterTransition_AIZ1_End

WaterTransition_AIZ2: watertransheader
		dc.w $6E
		dc.w $68
		dc.w 2
		dc.w $48
		dc.w $42
		dc.w $4E
		dc.w $5A
		dc.w $54
		dc.w $62
		dc.w $74
		dc.w 8
		dc.w $E
		dc.w $14
		dc.w $1A
		dc.w $34
		dc.w $22
		dc.w $3A
		dc.w $2E
		dc.w $28
WaterTransition_AIZ2_End

WaterTransition_CNZ2ICZ2: watertransheader
		dc.w $6E
		dc.w $68
		dc.w $7A
		dc.w $74
		dc.w $62
		dc.w 2
		dc.w $42
		dc.w $48
		dc.w $4E
		dc.w $5A
		dc.w 8
		dc.w $E
		dc.w $14
		dc.w $1A
		dc.w $34
		dc.w $22
		dc.w $3A
		dc.w $2E
		dc.w $28
		dc.w $54
WaterTransition_CNZ2ICZ2_End

; Hydrocity Zone doesn't use this?
WaterTransition_HCZLBZ1: watertransheader
		dc.w 2
		dc.w $74
		dc.w $62
		dc.w $68
		dc.w $6E
		dc.w $42
		dc.w $48
		dc.w $7A
		dc.w $5A
		dc.w $54
		dc.w 8
		dc.w $E
		dc.w $14
		dc.w $1A
		dc.w $2E
		dc.w $34
		dc.w $28
		dc.w $3A
		dc.w $22
		dc.w $4E
WaterTransition_HCZLBZ1_End

WaterTransition_LBZ2: watertransheader
		dc.w 2
		dc.w $6E
		dc.w $68
		dc.w $7A
		dc.w $62
		dc.w $74
		dc.w $42
		dc.w $48
		dc.w $5A
		dc.w $54
		dc.w 8
		dc.w $E
		dc.w $14
		dc.w $1A
		dc.w $2E
		dc.w $34
		dc.w $28
		dc.w $3A
		dc.w $22
		dc.w $4E
WaterTransition_LBZ2_End

; Unknown and unused
WaterTransition_Unk: watertransheader
		dc.w 2
		dc.w 8
		dc.w $E
		dc.w $14
		dc.w $1A
		dc.w $42
		dc.w $48
		dc.w $4E
		dc.w $54
		dc.w $5A
		dc.w $62
		dc.w $68
		dc.w $6E
		dc.w $74
		dc.w $7A
		dc.w $22
		dc.w $28
		dc.w $2E
		dc.w $34
		dc.w $3A
WaterTransition_Unk_End

; =============== S U B R O U T I N E =======================================


GetDemoPtr:
Demo_PlayRecord:
	rts
; =============== S U B R O U T I N E =======================================


LoadSolids:

		moveq	#0,d0
		move.w	(Current_zone_and_act).w,d0
		ror.b	#1,d0
		lsr.w	#5,d0
		lea	(SolidIndexes).l,a1
		adda.l	d0,a1
		move.l	(a1),d0
		move.l	d0,(Primary_collision_addr).w
		addq.l	#1,d0
		move.l	d0,(Secondary_collision_addr).w
		move.l	(Primary_collision_addr).w,(Collision_addr).w
		rts
; End of function LoadSolids


; =============== S U B R O U T I N E =======================================


sub_76E6:
		lea	(OscNumbers).w,a1
		lea	(word_76FA).l,a2
		moveq	#$20,d1

loc_76F2:
		move.w	(a2)+,(a1)+
		dbf	d1,loc_76F2
		rts
; End of function sub_76E6

; ---------------------------------------------------------------------------
word_76FA:	dc.w $7D
		dc.w $80
		dc.w 0
		dc.w $80
		dc.w 0
		dc.w $80
		dc.w 0
		dc.w $80
		dc.w 0
		dc.w $80
		dc.w 0
		dc.w $80
		dc.w 0
		dc.w $80
		dc.w 0
		dc.w $80
		dc.w 0
		dc.w $80
		dc.w 0
		dc.w $3848
		dc.w $EE
		dc.w $2080
		dc.w $B4
		dc.w $3080
		dc.w $10E
		dc.w $5080
		dc.w $1C2
		dc.w $7080
		dc.w $276
		dc.w $80
		dc.w 0
		dc.w $4000
		dc.w $FE

; =============== S U B R O U T I N E =======================================


sub_773C:

loc_774A:
		lea	(OscNumbers).w,a1
		lea	(word_7792).l,a2
		move.w	(a1)+,d3
		moveq	#$F,d1

loc_7758:
		move.w	(a2)+,d2
		move.w	(a2)+,d4
		btst	d1,d3
		bne.s	loc_7774
		move.w	2(a1),d0
		add.w	d2,d0
		move.w	d0,2(a1)
		add.w	d0,(a1)
		cmp.b	(a1),d4
		bhi.s	loc_7786
		bset	d1,d3
		bra.s	loc_7786
; ---------------------------------------------------------------------------

loc_7774:
		move.w	2(a1),d0
		sub.w	d2,d0
		move.w	d0,2(a1)
		add.w	d0,(a1)
		cmp.b	(a1),d4
		bls.s	loc_7786
		bclr	d1,d3

loc_7786:
		addq.w	#4,a1
		dbf	d1,loc_7758
		move.w	d3,(OscNumbers).w

locret_7790:
		rts
; End of function sub_773C

; ---------------------------------------------------------------------------
word_7792:	dc.w 2
		dc.w $10
		dc.w 2
		dc.w $18
		dc.w 2
		dc.w $20
		dc.w 2
		dc.w $30
		dc.w 4
		dc.w $20
		dc.w 8
		dc.w 8
		dc.w 8
		dc.w $40
		dc.w 4
		dc.w $40
		dc.w 2
		dc.w $38
		dc.w 2
		dc.w $38
		dc.w 2
		dc.w $20
		dc.w 3
		dc.w $30
		dc.w 5
		dc.w $50
		dc.w 7
		dc.w $70
		dc.w 2
		dc.w $40
		dc.w 2
		dc.w $40

; =============== S U B R O U T I N E =======================================


sub_77D2:
	;	btst	#0,Level_frame_counter+1.w		; NAT: Check if odd frame
	;	beq.s	.notodd					; if not, branch
		add.w	#$80,Monitor_Frame_Offset.w		; increment offset
		cmp.w	#$A*$80,Monitor_Frame_Offset.w		; check if already past the last frame
		blo.s	.noreset				; if not, dont reset
		clr.w	Monitor_Frame_Offset.w			; reset

.noreset	move.l	#ArtUnc_MonitorFans,d1			; get art
		add.w	Monitor_Frame_Offset.w,d1		; get offset
		andi.l	#Checksum_string+$3,d1
		move.w	#AT_PR*32,d2
		moveq	#$80/2,d3
		jsr	Add_To_DMA_Queue.w			; DMAN

.notodd		subq.b	#1,(Rings_frame_timer).w
		bpl.s	loc_77E8
		move.b	#7,(Rings_frame_timer).w
		addq.b	#1,(Rings_frame).w
		andi.b	#3,(Rings_frame).w

loc_77E8:
		tst.b	(Ring_spill_anim_counter).w
		beq.s	loc_780A
		moveq	#0,d0
		move.b	(Ring_spill_anim_counter).w,d0
		add.w	(Ring_spill_anim_accum).w,d0
		move.w	d0,(Ring_spill_anim_accum).w
		rol.w	#7,d0
		andi.w	#3,d0
		move.b	d0,(Ring_spill_anim_frame).w
		subq.b	#1,(Ring_spill_anim_counter).w

loc_780A:
		addi.w	#$180,(__u_FEBA).w
		rts
; End of function sub_77D2


; =============== S U B R O U T I N E =======================================


LoadLevelLoadBlock:
		move.w	(Current_zone_and_act).w,d0	; NAT: load only AIZ1 main tiles
		bne.s	loc_782A
		move.w	#$D00,d0

loc_782A:
					; LoadLevelLoadBlock+12j
		ror.b	#1,d0
		lsr.w	#4,d0
		andi.w	#$1F8,d0
		move.w	d0,d1
		add.w	d0,d0
		add.w	d1,d0
		lea	(LevelLoadBlock).l,a4
		lea	(a4,d0.w),a4
		move.l	(a4)+,d0
		andi.l	#Checksum_string+$3,d0
		move.l	d0,d7
		movea.l	d0,a1
		move.w	(a1),d4
		move.w	#0,d2
		jsr	Queue_Kos_Module.w
		move.l	(a4)+,d0
		andi.l	#Checksum_string+$3,d0
		cmp.l	d0,d7
		beq.s	loc_7870
		movea.l	d0,a1
		move.w	d4,d2
		jsr	Queue_Kos_Module.w

loc_7870:
					; LoadLevelLoadBlock+7Cj
		move.b	#$C,(V_int_routine).w
		jsr	(Process_Kos_Queue).l
		bsr.w	Wait_VSync
		jsr	Process_Kos_Module_Queue.w
		tst.b	(Kos_modules_left).w
		bne.s	loc_7870
		rts
; End of function LoadLevelLoadBlock


; =============== S U B R O U T I N E =======================================


CheckLevelForWater:

		cmpi.w	#0,(Current_zone_and_act).w
		beq.s	loc_78F2
		cmpi.w	#1,(Current_zone_and_act).w
		bne.s	loc_78B2
		cmpi.w	#1,(Apparent_zone_and_act).w
		bne.s	loc_78F2
		cmpi.w	#3,(Player_mode).w
		bne.s	loc_78F2

loc_78B2:
		cmpi.b	#1,(Current_zone).w
		beq.s	loc_78F2
		cmpi.w	#$301,(Current_zone_and_act).w
		bne.s	loc_78CA
		cmpi.w	#3,(Player_mode).w
		bne.s	loc_78F2

loc_78CA:
		cmpi.w	#$501,(Current_zone_and_act).w
		beq.s	loc_78F2
		cmpi.w	#$601,(Current_zone_and_act).w
		beq.s	loc_78F2
		move.w	#$1000,d0
		move.w	d0,(Water_level).w
		move.w	d0,(Mean_water_level).w
		move.w	d0,(Target_water_level).w
		move.b	#0,(Water_flag).w
		rts
; ---------------------------------------------------------------------------

loc_78F2:
					; CheckLevelForWater+16j ...
		move.b	#1,(Water_flag).w
		clr.w	(Competition_mode).w
		tst.b	(Water_flag).w
		beq.s	LoadWaterPalette
		move.w	#$4EF9,(H_int_jump).w
		move.l	#HInt2,(H_int_addr).w
		cmpi.b	#1,(Current_zone).w
		beq.s	loc_7932
		move.l	#HInt3,(H_int_addr).w
		cmpi.w	#$1000,(V_blank_cycles).w
		blo.s	loc_7932
		move.l	#HInt4,(H_int_addr).w

loc_7932:
					; CheckLevelForWater+96j
		move.l	#WaterTransition_AIZ1,(Water_palette_data_addr).w
		moveq	#0,d0
		move.w	(Current_zone_and_act).w,d0
		ror.b	#1,d0
		lsr.w	#6,d0
		andi.w	#$FFFE,d0
		lea	(StartingWaterHeights).l,a1
		move.w	(a1,d0.w),d0
		move.w	d0,(Water_level).w
		move.w	d0,(Mean_water_level).w
		move.w	d0,(Target_water_level).w
		clr.b	(Water_entered_counter).w
		clr.b	(Water_full_screen_flag).w
		move.b	#1,(Water_speed).w
; End of function CheckLevelForWater


; =============== S U B R O U T I N E =======================================


LoadWaterPalette:
		tst.b	(Water_flag).w
		beq.w	locret_7A20
		moveq	#$2B,d0
		cmpi.w	#0,(Current_zone_and_act).w
		beq.w	loc_7A00
		moveq	#$2C,d0
		move.l	#WaterTransition_AIZ2,(Water_palette_data_addr).w
		cmpi.w	#1,(Current_zone_and_act).w
		beq.s	loc_7A00
		moveq	#$31,d0
		move.l	#WaterTransition_HCZLBZ1,(Water_palette_data_addr).w
		cmpi.w	#$100,(Current_zone_and_act).w
		beq.s	loc_7A00
		moveq	#$32,d0
		move.l	#WaterTransition_HCZLBZ1,(Water_palette_data_addr).w
		cmpi.w	#$101,(Current_zone_and_act).w
		beq.s	loc_7A00
		moveq	#$3A,d0
		move.l	#WaterTransition_CNZ2ICZ2,(Water_palette_data_addr).w
		cmpi.w	#$301,(Current_zone_and_act).w
		beq.s	loc_7A00
		moveq	#$39,d0
		move.l	#WaterTransition_CNZ2ICZ2,(Water_palette_data_addr).w
		cmpi.w	#$501,(Current_zone_and_act).w
		beq.s	loc_7A00
		moveq	#$2D,d0
		move.l	#WaterTransition_HCZLBZ1,(Water_palette_data_addr).w
		cmpi.w	#$600,(Current_zone_and_act).w
		beq.s	loc_7A00
		moveq	#$2E,d0
		move.l	#WaterTransition_LBZ2,(Water_palette_data_addr).w
		cmpi.w	#$601,(Current_zone_and_act).w
		beq.s	loc_7A00
		nop

loc_7A00:
		move.w	d0,d1
		jsr	LoadPalette2.w
		move.w	d1,d0
		jsr	LoadPalette2_Immediate.w
	;	tst.b	(Last_star_post_hit).w
	;	beq.s	loc_7A18
	;	move.b	(Saved_water_full_screen_flag).w,(Water_full_screen_flag).w

loc_7A18:
		cmpi.w	#3,(Player_mode).w
		beq.s	loc_7A22

locret_7A20:
		rts
; ---------------------------------------------------------------------------

loc_7A22:
		moveq	#0,d0
		move.b	(Current_zone).w,d0
		move.w	d0,d1
		add.w	d0,d0
		add.w	d1,d0
		add.w	d0,d0
		lea	Pal_WaterKnux(pc,d0.w),a1
		move.l	(a1),(Water_palette+$4).w
		move.w	4(a1),(Water_palette+$8).w
		move.l	(a1),(Target_water_palette+$4).w
		move.w	4(a1),(Target_water_palette+$8).w
		rts
; End of function LoadWaterPalette

; ---------------------------------------------------------------------------
Pal_WaterKnux:	binclude "Levels/Misc/Palettes/Water Knuckles Patch.bin"
	even
; ---------------------------------------------------------------------------

Create_New_Sprite2:
		movea.l	a0,a1
		move.w	#$CF82,d0
		sub.w	a0,d0
		lsr.w	#6,d0
		move.b	Find_First_Sprite_Table(pc,d0.w),d0
		bmi.s	locret_8D76

loc_8D6C:
		lea	next_object(a1),a1
		tst.l	(a1)
		dbeq	d0,loc_8D6C

locret_8D76:
		rts
; End of function Create_New_Sprite2

; ---------------------------------------------------------------------------
Find_First_Sprite_Table:
		dc.b  $FF,   0,   1,   2,   3,   4,   5,   5,   6,   7,   8,   9,  $A,  $B,  $B,  $C,  $D,  $E,  $F, $10
		dc.b  $11, $12, $12, $13, $14, $15, $16, $17, $18, $18, $19, $1A, $1B, $1C, $1D, $1E, $1E, $1F, $20, $21
		dc.b  $22, $23, $24, $25, $25, $26, $27, $28, $29, $2A, $2B, $2B, $2C, $2D, $2E, $2F, $30, $31, $32, $32
		dc.b  $33, $34, $35, $36, $37, $38, $38, $39, $3A, $3B, $3C, $3D, $3E, $3E, $3F, $40, $41, $42, $43, $44
		dc.b  $45, $45, $46, $47, $48, $49, $4A, $4B, $4B, $4C, $4D, $4E, $4F, $50, $51, $52, $52, $53, $54, $55
		dc.b  $56, $57, $58, $58, $59, $5A, $5B, $5C, $5D, $5E, $5E, $5F, $60, $61, $62, $63, $64, $65, $65, $66
		dc.b  $67, $68, $69, $6A, $6B, $6B, $6C, $6D
; ---------------------------------------------------------------------------

LevelSelect_StartZone:
		andi.w	#$3FFF,d0
		move.w	d0,(Current_zone_and_act).w
		move.w	d0,(Apparent_zone_and_act).w
	;	move.w	d0,(Saved_zone_and_act).w
	;	move.w	d0,(Saved_apparent_zone_and_act).w
	;	move.w	#$1000,d0
	;	move.w	d0,(Saved_camera_max_Y_pos).w
	;	move.w	d0,(Saved2_camera_max_Y_pos).w
		move.b	#$C,(Game_mode).w
		moveq	#0,d0
		move.w	d0,(Ring_count).w
		move.l	d0,(Timer).w
		move.l	d0,(Score).w
		move.w	d0,(Demo_mode_flag).w
		cmpi.b	#$1C,(Game_Mode).w			; MJ2: is this code being ran by the level select?
		bne.s	LSSZ_NoFadeSound			; MJ2: if not, branch
		moveq	#-$1F,d0
		jsr	Play_Sound_2.w

LSSZ_NoFadeSound:
		moveq	#0,d0
		move.w	d0,(Competition_mode).w

locret_7E62:
		rts

; ---------------------------------------------------------------------------
sub_A230:
		add.w	d0,d0
		addi.w	#$80,d0
		andi.w	#$1FE,d0
		move.w	ScalarTable2(pc,d0.w),d1
		subi.w	#$80,d0
		andi.w	#$1FE,d0
		move.w	ScalarTable2(pc,d0.w),d0
		rts
; ---------------------------------------------------------------------------
ScalarTable2:	dc.w	  0,  $192,  $324,  $4B5,  $646,  $7D6,	 $964,	$AF1,  $C7C,  $E06,  $F8D, $1112, $1294, $1413,	$1590, $1709
		dc.w  $187E, $19EF, $1B5D, $1CC6, $1E2B, $1F8C,	$20E7, $223D, $238E, $24DA, $2620, $2760, $289A, $29CE,	$2AFB, $2C21
		dc.w  $2D41, $2E5A, $2F6C, $3076, $3179, $3274,	$3368, $3453, $3537, $3612, $36E5, $37B0, $3871, $392B,	$39DB, $3A82
		dc.w  $3B21, $3BB6, $3C42, $3CC5, $3D3F, $3DAF,	$3E15, $3E72, $3EC5, $3F0F, $3F4F, $3F85, $3FB1, $3FD4,	$3FEC, $3FFB
		dc.w  $4000, $3FFB, $3FEC, $3FD4, $3FB1, $3F85,	$3F4F, $3F0F, $3EC5, $3E72, $3E15, $3DAF, $3D3F, $3CC5,	$3C42, $3BB6
		dc.w  $3B21, $3A82, $39DB, $392B, $3871, $37B0,	$36E5, $3612, $3537, $3453, $3368, $3274, $3179, $3076,	$2F6C, $2E5A
		dc.w  $2D41, $2C21, $2AFB, $29CE, $289A, $2760,	$2620, $24DA, $238E, $223D, $20E7, $1F8C, $1E2B, $1CC6,	$1B5D, $19EF
		dc.w  $187E, $1709, $1590, $1413, $1294, $1112,	 $F8D,	$E06,  $C7C,  $AF1,  $964,  $7D6,  $646,  $4B5,	 $324,	$192
		dc.w	  0, $FE6E, $FCDC, $FB4B, $F9BA, $F82A,	$F69C, $F50F, $F384, $F1FA, $F073, $EEEE, $ED6C, $EBED,	$EA70, $E8F7
		dc.w  $E782, $E611, $E4A3, $E33A, $E1D5, $E074,	$DF19, $DDC3, $DC72, $DB26, $D9E0, $D8A0, $D766, $D632,	$D505, $D3DF
		dc.w  $D2BF, $D1A6, $D094, $CF8A, $CE87, $CD8C,	$CC98, $CBAD, $CAC9, $C9EE, $C91B, $C850, $C78F, $C6D5,	$C625, $C57E
		dc.w  $C4DF, $C44A, $C3BE, $C33B, $C2C1, $C251,	$C1EB, $C18E, $C13B, $C0F1, $C0B1, $C07B, $C04F, $C02C,	$C014, $C005
		dc.w  $C000, $C005, $C014, $C02C, $C04F, $C07B,	$C0B1, $C0F1, $C13B, $C18E, $C1EB, $C251, $C2C1, $C33B,	$C3BE, $C44A
		dc.w  $C4DF, $C57E, $C625, $C6D5, $C78F, $C850,	$C91B, $C9EE, $CAC9, $CBAD, $CC98, $CD8C, $CE87, $CF8A,	$D094, $D1A6
		dc.w  $D2BF, $D3DF, $D505, $D632, $D766, $D8A0,	$D9E0, $DB26, $DC72, $DDC3, $DF19, $E074, $E1D5, $E33A,	$E4A3, $E611
		dc.w  $E782, $E8F7, $EA70, $EBED, $ED6C, $EEEE,	$F073, $F1FA, $F384, $F50F, $F69C, $F82A, $F9BA, $FB4B,	$FCDC, $FE6E
; ---------------------------------------------------------------------------

sub_DB3C:
		tst.b	(Debug_mode_flag).w
		bne.s	sub_DB44

locret_DBB2:
HUD_AddToScore:
		rts

sub_DB44:
		move.l	ModeTable.w,a1			; NAT: Get mode table
		move.l	$0C(a1),a1			; get mappings address

		tst.b	Debug_On.w
		beq.s	.nodebug			; NAT: If debug mode, draw special HUD
		lea	SpecialDebugHUD(pc),a1

.nodebug	move.b	(Level_started_flag).w,d0
		ext.w	d0
		bpl.s	loc_DB92
		addq.w	#8,d0
		move.b	d0,(Level_started_flag).w

loc_DB92:
		addi.w	#$8F,d0
		move.w	#$108,d1
		move.w	#$8000|AT_HUD,d5
		move.w	(a1)+,d4
		subq.w	#1,d4
		bmi.s	locret_DBB2

		add.w	(HudPos).w,d1			; MJ: add HUD position
		jmp	(sub_1AF6C).l
; ---------------------------------------------------------------------------

hudmap	macro y, s, a, x, f
	dc.b y, s

	if f==1
		dc.w (AT_HUD_Numbers-AT_HUD)+a
	elseif f==2
		dc.w (AT_HUD_Timer-AT_HUD)+a
	else
		dc.w a
	endif

	dc.w x
    endm

HudMap_BattleRace:
HudMap_TagBattle:
	dc.w 8
	hudmap $80, $0D, $0000, $007C, 0	; SCOR-
	hudmap $80, $01, $0008, $009C, 0	; ----E
	hudmap $90, $0D, $000A, $007C, 0	; RING-
	hudmap $90, $01, $0012, $009C, 0	; ----S
	hudmap $82, $05, $0000, $0064, 1	; Sonic's score
	hudmap $82, $05, $0004, $00AC, 1	; Tails' score
	hudmap $92, $05, $0008, $0064, 1	; Sonic's rings
	hudmap $92, $05, $000C, $00AC, 1	; Tails' rings

HudMap_TeamMode:
	dc.w 8
	hudmap $80, $0D, $0000, $0066, 0	; TIME-
	hudmap $80, $01, $0008, $0086, 0	; ----R
	hudmap $90, $0D, $000A, $007C, 0	; RING-
	hudmap $90, $01, $0012, $009C, 0	; ----S
	hudmap $82, $05, $0000, $0096, 1	; time
	hudmap $82, $05, $0004, $00AA, 1	; time
	hudmap $92, $05, $0008, $0064, 1	; Sonic's rings
	hudmap $92, $05, $000C, $00AC, 1	; Tails' rings

HudMap_MiniCNZ1:
	dc.w 4
	hudmap $80, $0D, $000A, $007C, 0	; RING-
	hudmap $80, $01, $0012, $009C, 0	; ----S
	hudmap $82, $05, $0008, $0064, 1	; Sonic's rings
	hudmap $82, $05, $000C, $00AC, 1	; Tails' rings

HudMap_MiniSSZ:
	dc.w 12
	hudmap $80, $0D, $0000, $007C, 0	; SCOR-
	hudmap $80, $01, $0008, $009C, 0	; ----E
	hudmap $90, $0D, $000A, $007C, 0	; RING-
	hudmap $90, $01, $0012, $009C, 0	; ----S
	hudmap $40, $0D, $0000, $0066, 2	; TIME-
	hudmap $40, $01, $0008, $0086, 2	; ----R
	hudmap $82, $05, $0000, $0064, 1	; Sonic's score
	hudmap $82, $05, $0004, $00AC, 1	; Tails' score
	hudmap $92, $05, $0008, $0064, 1	; Sonic's rings
	hudmap $92, $05, $000C, $00AC, 1	; Tails' rings
	hudmap $42, $05, $0010, $0096, 1	; time
	hudmap $42, $05, $0014, $00AA, 1	; time

SpecialDebugHUD:
	dc.w 2
	hudmap $80, $0D, $0000, $0000, 1	; X
	hudmap $90, $0D, $0008, $0000, 1	; Y

; =============== S U B R O U T I N E =======================================


Load_Rings:

		moveq	#0,d0
		move.b	(Rings_manager_routine).w,d0
		move.w	off_E8B8(pc,d0.w),d0
		jmp	off_E8B8(pc,d0.w)
; End of function Load_Rings

; ---------------------------------------------------------------------------
off_E8B8:	dc.w loc_E8BE-off_E8B8

		dc.w loc_E942-off_E8B8
;		dc.w loc_E9CA-off_E8B8
; ---------------------------------------------------------------------------

loc_E8BE:
		addq.b	#2,(Rings_manager_routine).w
		bsr.w	sub_EB1A
;		cmpi.b	#$14,(Current_zone).w
;		beq.s	loc_E904
		movea.l	(Ring_start_addr_ROM).w,a1
		lea	(Ring_status_table).w,a2
		move.w	(Camera_X_pos).w,d4
		subq.w	#8,d4
		bhi.s	loc_E8E6
		moveq	#1,d4
		bra.s	loc_E8E6
; ---------------------------------------------------------------------------

loc_E8E2:
		addq.w	#4,a1
		addq.w	#2,a2

loc_E8E6:

		cmp.w	(a1),d4
		bhi.s	loc_E8E2
		move.l	a1,(Ring_start_addr_ROM).w
		move.w	a2,(Ring_start_addr_RAM).w
		addi.w	#$150,d4
		bra.s	loc_E8FA
; ---------------------------------------------------------------------------

loc_E8F8:
		addq.w	#4,a1
		addq.w	#2,a2		; NAT: End addr

loc_E8FA:
		cmp.w	(a1),d4
		bhi.s	loc_E8F8
		move.l	a1,(Ring_end_addr_ROM).w
		move.w	a2,(Ring_end_addr_RAM).w		; NAT: End addr
		rts
; ---------------------------------------------------------------------------

;loc_E904:
;		addq.b	#2,(Rings_manager_routine).w
;		movea.l	(Ring_start_addr_ROM).w,a1
;		lea	(Level_layout_main+$5F8).w,a2
;		move.w	(Camera_Y_pos).w,d4
;		subq.w	#8,d4
;		bhi.s	loc_E920
;		moveq	#1,d4
;		bra.s	loc_E920
; ---------------------------------------------------------------------------

;loc_E91C:
;		addq.w	#4,a1
;		addq.w	#2,a2

;loc_E920:

;		cmp.w	2(a1),d4
;		bhi.s	loc_E91C
;		move.l	a1,(Ring_start_addr_ROM).w
;		move.w	a2,(Ring_start_addr_RAM).w
;		addi.w	#$F0,d4
;		bra.s	loc_E936
; ---------------------------------------------------------------------------

;loc_E934:
;		addq.w	#4,a1

;loc_E936:
;		cmp.w	2(a1),d4
;		bhi.s	loc_E934
;		move.l	a1,(Ring_end_addr_ROM).w
;		rts
; ---------------------------------------------------------------------------

loc_E942:
		bsr.s	sub_E994
		movea.l	(Ring_start_addr_ROM).w,a1
		movea.w	(Ring_start_addr_RAM).w,a2
		move.w	(Camera_X_pos).w,d4
		subq.w	#8,d4
		bhi.s	loc_E95C
		moveq	#1,d4
		bra.s	loc_E95C
; ---------------------------------------------------------------------------

loc_E958:
		addq.w	#4,a1
		tst.w	(a2)+		; NAT: Check if ring is despawning
		bpl.s	loc_E95C	; protip: If ring was not despawning, it works anyway
		clr.w	-2(a2)		; NAT: Allow rings to get reset
;		addq.w	#2,a2

loc_E95C:

		cmp.w	(a1),d4
		bhi.s	loc_E958
		bra.s	loc_E966
; ---------------------------------------------------------------------------

loc_E962:
		subq.w	#4,a1
		tst.w	-(a2)		; NAT: Check if ring is despawning
		bpl.s	loc_E966	; protip: If ring was not despawning, it works anyway
		clr.w	(a2)		; NAT: Allow rings to get reset
;		subq.w	#2,a2

loc_E966:
		cmp.w	-4(a1),d4
		bls.s	loc_E962
		move.l	a1,(Ring_start_addr_ROM).w
		move.w	a2,(Ring_start_addr_RAM).w
		movea.l	(Ring_end_addr_ROM).w,a1
		movea.w	(Ring_end_addr_RAM).w,a2	; NAT: Deal with end addr
		addi.w	#$150,d4
		bra.s	loc_E980
; ---------------------------------------------------------------------------

loc_E97E:
		addq.w	#4,a1
		tst.w	(a2)+		; NAT: Check if ring is despawning
		bpl.s	loc_E980	; protip: If ring was not despawning, it works anyway
		clr.w	-2(a2)		; NAT: Allow rings to get reset

loc_E980:
		cmp.w	(a1),d4
		bhi.s	loc_E97E
		bra.s	loc_E988
; ---------------------------------------------------------------------------

loc_E986:
		subq.w	#4,a1
		tst.w	-(a2)		; NAT: Check if ring is despawning
		bpl.s	loc_E988	; protip: If ring was not despawning, it works anyway
		clr.w	(a2)		; NAT: Allow rings to get reset

loc_E988:
		cmp.w	-4(a1),d4
		bls.s	loc_E986
		move.l	a1,(Ring_end_addr_ROM).w
		move.w	a2,(Ring_end_addr_RAM).w
		rts

; =============== S U B R O U T I N E =======================================


sub_E994:

		lea	(Ring_consumption_table).w,a2
		move.w	(a2)+,d1
		subq.w	#1,d1
		bcs.s	locret_E9C8

loc_E99E:
		move.w	(a2)+,d0
		beq.s	loc_E99E
		movea.w	d0,a1
		subq.b	#1,(a1)
		bne.s	loc_E9C4
		move.b	#6,(a1)
		addq.b	#1,1(a1)
		cmpi.b	#8,1(a1)
		bne.s	loc_E9C4
		move.w	#-1,(a1)
		clr.w	-2(a2)
		subq.w	#1,(Ring_consumption_table).w

loc_E9C4:
		dbf	d1,loc_E99E

locret_E9C8:
		rts
; End of function sub_E994

; ---------------------------------------------------------------------------

loc_E9CA:
		bsr.s	sub_E994
		movea.l	(Ring_start_addr_ROM).w,a1
		movea.w	(Ring_start_addr_RAM).w,a2
		move.w	(Camera_Y_pos).w,d4
		subq.w	#8,d4
		bhi.s	loc_E9E4
		moveq	#1,d4
		bra.s	loc_E9E4
; ---------------------------------------------------------------------------

loc_E9E0:
		addq.w	#4,a1
		addq.w	#2,a2

loc_E9E4:

		cmp.w	2(a1),d4
		bhi.s	loc_E9E0
		bra.s	loc_E9F0
; ---------------------------------------------------------------------------

loc_E9EC:
		subq.w	#4,a1
		subq.w	#2,a2

loc_E9F0:
		cmp.w	-2(a1),d4
		bls.s	loc_E9EC
		move.l	a1,(Ring_start_addr_ROM).w
		move.w	a2,(Ring_start_addr_RAM).w
		movea.l	(Ring_end_addr_ROM).w,a2
		addi.w	#$F0,d4
		bra.s	loc_EA0A
; ---------------------------------------------------------------------------

loc_EA08:
		addq.w	#4,a2

loc_EA0A:
		cmp.w	2(a2),d4
		bhi.s	loc_EA08
		bra.s	loc_EA14
; ---------------------------------------------------------------------------

loc_EA12:
		subq.w	#4,a2

loc_EA14:
		cmp.w	-2(a2),d4
		bls.s	loc_EA12
		move.l	a2,(Ring_end_addr_ROM).w
		rts

; =============== S U B R O U T I N E =======================================


Test_Ring_Collisions:
		cmpi.b	#$5A,$34(a0)
		bhs.w	locret_EAE4
		movea.l	(Ring_start_addr_ROM).w,a1
		movea.l	(Ring_end_addr_ROM).w,a2
		cmpa.l	a1,a2
		beq.w	locret_EAE4
		movea.w	(Ring_start_addr_RAM).w,a4
		btst	#5,$2B(a0)
		beq.s	Test_Ring_Collisions_NoAttraction
		move.w	$10(a0),d2
		move.w	$14(a0),d3
		subi.w	#$40,d2
		subi.w	#$40,d3
		move.w	#6,d1
		move.w	#$C,d6
		move.w	#$80,d4
		move.w	#$80,d5
		bra.s	Test_Ring_Collisions_NextRing
; ---------------------------------------------------------------------------

Test_Ring_Collisions_NoAttraction:
		move.w	$10(a0),d2
		move.w	$14(a0),d3
		subi.w	#8,d2
		moveq	#0,d5
		move.b	$1E(a0),d5
		subq.b	#3,d5
		sub.w	d5,d3
		move.w	#6,d1
		move.w	#$C,d6
		move.w	#$10,d4
		add.w	d5,d5

Test_Ring_Collisions_NextRing:
					; Test_Ring_Collisions+C0j
		tst.w	(a4)
		bne.w	loc_EADA
		move.w	(a1),d0
		sub.w	d1,d0
		sub.w	d2,d0
		bcc.s	loc_EAA0
		add.w	d6,d0
		bcs.s	loc_EAA6
		bra.w	loc_EADA
; ---------------------------------------------------------------------------

loc_EAA0:
		cmp.w	d4,d0
		bhi.w	loc_EADA

loc_EAA6:
		move.w	2(a1),d0
		sub.w	d1,d0
		sub.w	d3,d0
		bcc.s	loc_EAB8
		add.w	d6,d0
		bcs.s	loc_EABE
		bra.w	loc_EADA
; ---------------------------------------------------------------------------

loc_EAB8:
		cmp.w	d5,d0
		bhi.w	loc_EADA

loc_EABE:
		btst	#5,$2B(a0)
		bne.s	Test_Ring_Collisions_AttractRing

loc_EAC6:
		move.w	#$604,(a4)
		bsr.s	sub_EAE6
		lea	(Ring_consumption_list).w,a3

loc_EAD0:
		tst.w	(a3)+
		bne.s	loc_EAD0
		move.w	a4,-(a3)
		addq.w	#1,(Ring_consumption_table).w

loc_EADA:
					; Test_Ring_Collisions+7Cj ...
		addq.w	#4,a1
		addq.w	#2,a4
		cmpa.l	a1,a2
		bne.w	Test_Ring_Collisions_NextRing

locret_EAE4:
					; Test_Ring_Collisions+14j
		rts
; End of function Test_Ring_Collisions


; =============== S U B R O U T I N E =======================================


sub_EAE6:
		cmp.w	#Player_1,a0
		bne.s	.tails
		jmp	(GiveRing).l

.tails		jmp	loc_1A5F0
; End of function sub_EAE6

; ---------------------------------------------------------------------------

Test_Ring_Collisions_AttractRing:
		movea.l	a1,a3
		jsr	Create_New_Sprite.w
		bne.w	loc_EB16
		move.l	#Obj_Attracted_Ring,(a1)
		move.w	(a3),$10(a1)
		move.w	2(a3),$14(a1)
		move.w	a4,$30(a1)
		move.w	a0,parent(a1)
		move.w	#-1,(a4)
		rts
; ---------------------------------------------------------------------------

loc_EB16:
		movea.l	a3,a1
		bra.s	loc_EAC6

; =============== S U B R O U T I N E =======================================


sub_EB1A:
		moveq	#0,d0
		tst.b	(NoReset_RespawnTbl).w
		bne.s	loc_EB30
		lea	(Ring_status_table).w,a1
		move.w	#$FF,d1

loc_EB2A:
		move.l	d0,(a1)+
		dbf	d1,loc_EB2A

loc_EB30:
		lea	(Ring_consumption_table).w,a1
		moveq	#$1F,d1

loc_EB36:
		move.l	d0,(a1)+
		dbf	d1,loc_EB36
		cmpi.b	#$14,(Current_zone).w
		bne.s	loc_EB52
		lea	(Level_layout_main+$5F8).w,a1
		move.w	#$FF,d1

loc_EB4C:
		move.l	d0,(a1)+
		dbf	d1,loc_EB4C

loc_EB52:
		move.w	(Current_zone_and_act).w,d0
		ror.b	#1,d0
		lsr.w	#5,d0
		lea	(RingLocPtrs).l,a1
		movea.l	(a1,d0.w),a1
		move.l	a1,(Ring_start_addr_ROM).w
		addq.w	#4,a1
		moveq	#0,d5
		move.w	#$1FE,d0

loc_EB70:
		tst.l	(a1)+
		bmi.s	loc_EB7A
		addq.w	#1,d5
		dbf	d0,loc_EB70

loc_EB7A:
		rts
; End of function sub_EB1A


; =============== S U B R O U T I N E =======================================


sub_EB86:
		movea.l	(Ring_start_addr_ROM).w,a0
		move.l	(Ring_end_addr_ROM).w,d2
		sub.l	a0,d2
		beq.s	locret_EBEC
		lsr.l	#2,d2			; NAT: Divide by 4 then
		subq.w	#1,d2			; -1 for dbf

		movea.w	(Ring_start_addr_RAM).w,a4
		lea	CMap_Ring(pc),a1
		move.w	4(a3),d4
		move.w	#$F0,d5
		move.w	(Screen_Y_wrap_value).w,d3

loc_EBA6:
		tst.w	(a4)+
		bmi.s	loc_EBE6
		move.w	2(a0),d1
		sub.w	d4,d1
		addq.w	#8,d1
		and.w	d3,d1
		cmp.w	d5,d1
		bhs.s	loc_EBE6
		addi.w	#$78,d1
		move.w	(a0),d0
		sub.w	(a3),d0
		addi.w	#$80,d0
		move.b	-1(a4),d6
		bne.s	loc_EBCE
		move.b	(Rings_frame).w,d6

loc_EBCE:
		lsl.w	#3,d6
		lea	(a1,d6.w),a2
		add.w	(a2)+,d1
		move.w	d1,(a6)+
		move.w	(a2)+,d6
		move.b	d6,(a6)
		addq.w	#2,a6
		move.w	(a2)+,(a6)+
		add.w	(a2)+,d0
		move.w	d0,(a6)+
		subq.w	#1,d7

loc_EBE6:
		addq.w	#4,a0
		dbf	d2,loc_EBA6		; ermagerd blast processin!!!

locret_EBEC:
		rts
; End of function sub_EB86

; ---------------------------------------------------------------------------
; Custom mappings format. Compare to Map_Ring.

; Differences include...
;  No offset table (each sprite assumed to be 8 bytes)
;  No 'sprite pieces per frame' value (hardcoded to 1)
;  Sign-extended Y-pos value
;  Sign-extended sprite size value
; word_EBEE:
CMap_Ring:

;frame1:
	dc.w	$FFF8
	dc.w	$0005
	dc.w	$0000+make_art_tile(ArtTile_ArtNem_Ring,1,0)
	dc.w	$FFF8

;frame2:
	dc.w	$FFF8
	dc.w	$0005
	dc.w	$0004+make_art_tile(ArtTile_ArtNem_Ring,1,0)
	dc.w	$FFF8

;frame3:
	dc.w	$FFF8
	dc.w	$0001
	dc.w	$0008+make_art_tile(ArtTile_ArtNem_Ring,1,0)
	dc.w	$FFFC

;frame4:
	dc.w	$FFF8
	dc.w	$0005
	dc.w	$0804+make_art_tile(ArtTile_ArtNem_Ring,1,0)
	dc.w	$FFF8

;frame5:
	dc.w	$FFF8
	dc.w	$0005
	dc.w	$000A+make_art_tile(ArtTile_ArtNem_Ring,1,0)
	dc.w	$FFF8

;frame6:
	dc.w	$FFF8
	dc.w	$0005
	dc.w	$180A+make_art_tile(ArtTile_ArtNem_Ring,1,0)
	dc.w	$FFF8

;frame7:
	dc.w	$FFF8
	dc.w	$0005
	dc.w	$080A+make_art_tile(ArtTile_ArtNem_Ring,1,0)
	dc.w	$FFF8

;frame8:
	dc.w	$FFF8
	dc.w	$0005
	dc.w	$100A+make_art_tile(ArtTile_ArtNem_Ring,1,0)
	dc.w	$FFF8

; =============== S U B R O U T I N E =======================================


Player_AnglePos:

		move.l	(Primary_collision_addr).w,(Collision_addr).w
		cmpi.b	#$C,$46(a0)
		beq.s	loc_EC42
		move.l	(Secondary_collision_addr).w,(Collision_addr).w

loc_EC42:
		move.b	$46(a0),d5
		btst	#3,$2A(a0)
		beq.s	loc_EC5A
		moveq	#0,d0
		move.b	d0,(Primary_Angle).w
		move.b	d0,(Secondary_Angle).w
		rts
; ---------------------------------------------------------------------------

loc_EC5A:
		moveq	#3,d0
		move.b	d0,(Primary_Angle).w
		move.b	d0,(Secondary_Angle).w
		move.b	$26(a0),d0
		addi.b	#$20,d0
		bpl.s	loc_EC7C
		move.b	$26(a0),d0
		bpl.s	loc_EC76
		subq.b	#1,d0

loc_EC76:
		addi.b	#$20,d0
		bra.s	loc_EC88
; ---------------------------------------------------------------------------

loc_EC7C:
		move.b	$26(a0),d0
		bpl.s	loc_EC84
		addq.b	#1,d0

loc_EC84:
		addi.b	#$1F,d0

loc_EC88:
		andi.b	#$C0,d0
		cmpi.b	#$40,d0
		beq.w	Player_WalkVertL
		cmpi.b	#$80,d0
		beq.w	Player_WalkCeiling
		cmpi.b	#$C0,d0
		beq.w	Player_WalkVertR
		move.w	$14(a0),d2
		move.w	$10(a0),d3
		moveq	#0,d0
		move.b	$1E(a0),d0
		ext.w	d0
		add.w	d0,d2
		move.b	$1F(a0),d0
		ext.w	d0
		add.w	d0,d3
		lea	(Primary_Angle).w,a4
		movea.w	#$10,a3
		move.w	#0,d6
		jsr	FindFloor.w
		move.w	d1,-(sp)
		move.w	$14(a0),d2
		move.w	$10(a0),d3
		moveq	#0,d0
		move.b	$1E(a0),d0
		ext.w	d0
		add.w	d0,d2
		move.b	$1F(a0),d0
		ext.w	d0
		neg.w	d0
		add.w	d0,d3
		lea	(Secondary_Angle).w,a4
		movea.w	#$10,a3
		move.w	#0,d6
		jsr	FindFloor.w
		move.w	(sp)+,d0
		bsr.w	Player_Angle
		tst.w	d1
		beq.s	locret_ED12
		bpl.s	loc_ED14
		cmpi.w	#-$E,d1
		blt.s	locret_ED12
		add.w	d1,$14(a0)

locret_ED12:
					; Player_AnglePos+DEj
		rts
; ---------------------------------------------------------------------------

loc_ED14:
		tst.b	$3C(a0)
		bne.s	loc_ED32
		move.b	$18(a0),d0
		bpl.s	loc_ED22
		neg.b	d0

loc_ED22:
		addq.b	#4,d0
		cmpi.b	#$E,d0
		blo.s	loc_ED2E
		move.b	#$E,d0

loc_ED2E:
		cmp.b	d0,d1
		bgt.s	loc_ED38

loc_ED32:
		add.w	d1,$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_ED38:
		bset	#1,$2A(a0)
		bclr	#5,$2A(a0)
		move.b	#1,$21(a0)
		rts
; End of function Player_AnglePos


; =============== S U B R O U T I N E =======================================


Player_Angle:

		move.w	d0,d3
		move.b	(Secondary_Angle).w,d2
		cmp.w	d0,d1
		ble.s	loc_ED5E
		move.b	(Primary_Angle).w,d2
		move.w	d1,d3
		move.w	d0,d1

loc_ED5E:
		btst	#0,d2
		bne.s	loc_ED7A
		move.b	d2,d0
		sub.b	$26(a0),d0
		bpl.s	loc_ED6E
		neg.b	d0

loc_ED6E:
		cmpi.b	#$20,d0
		bhs.s	loc_ED7A
		move.b	d2,$26(a0)
		rts
; ---------------------------------------------------------------------------

loc_ED7A:
					; Player_Angle+26j
		move.b	$26(a0),d2
		addi.b	#$20,d2
		andi.b	#$C0,d2
		move.b	d2,$26(a0)
		rts
; End of function Player_Angle

; ---------------------------------------------------------------------------

Player_WalkVertR:
		move.w	$14(a0),d2
		move.w	$10(a0),d3
		moveq	#0,d0
		move.b	$1F(a0),d0
		ext.w	d0
		neg.w	d0
		add.w	d0,d2
		move.b	$1E(a0),d0
		ext.w	d0
		add.w	d0,d3
		lea	(Primary_Angle).w,a4
		movea.w	#$10,a3
		move.w	#0,d6
		jsr	FindWall.w
		move.w	d1,-(sp)
		move.w	$14(a0),d2
		move.w	$10(a0),d3
		moveq	#0,d0
		move.b	$1F(a0),d0
		ext.w	d0
		add.w	d0,d2
		move.b	$1E(a0),d0
		ext.w	d0
		add.w	d0,d3
		lea	(Secondary_Angle).w,a4
		movea.w	#$10,a3
		move.w	#0,d6
		jsr	FindWall.w
		move.w	(sp)+,d0
		bsr.w	Player_Angle
		tst.w	d1
		beq.s	locret_EE00
		bpl.s	loc_EE22
		cmpi.w	#-$E,d1
		blt.s	loc_EE0E
		tst.b	$41(a0)
		bne.s	loc_EE02
		add.w	d1,$10(a0)

locret_EE00:

		rts
; ---------------------------------------------------------------------------

loc_EE02:
		subq.b	#1,$41(a0)
		move.b	#$C0,$26(a0)
		rts
; ---------------------------------------------------------------------------

loc_EE0E:
		tst.w	(Current_zone_and_act).w
		bne.s	locret_EE00
		move.b	#$C0,$26(a0)
		move.b	#3,$41(a0)
		rts
; ---------------------------------------------------------------------------

loc_EE22:
		tst.b	$3C(a0)
		bne.s	loc_EE40
		move.b	$1A(a0),d0
		bpl.s	loc_EE30
		neg.b	d0

loc_EE30:
		addq.b	#4,d0
		cmpi.b	#$E,d0
		blo.s	loc_EE3C
		move.b	#$E,d0

loc_EE3C:
		cmp.b	d0,d1
		bgt.s	loc_EE46

loc_EE40:
		add.w	d1,$10(a0)
		rts
; ---------------------------------------------------------------------------

loc_EE46:
		bset	#1,$2A(a0)
		bclr	#5,$2A(a0)
		move.b	#1,$21(a0)
		rts
; ---------------------------------------------------------------------------

Player_WalkCeiling:
		move.w	$14(a0),d2
		move.w	$10(a0),d3
		moveq	#0,d0
		move.b	$1E(a0),d0
		ext.w	d0
		sub.w	d0,d2
		eori.w	#$F,d2
		move.b	$1F(a0),d0
		ext.w	d0
		add.w	d0,d3
		lea	(Primary_Angle).w,a4
		movea.w	#-$10,a3
		move.w	#$800,d6
		jsr	FindFloor.w
		move.w	d1,-(sp)
		move.w	$14(a0),d2
		move.w	$10(a0),d3
		moveq	#0,d0
		move.b	$1E(a0),d0
		ext.w	d0
		sub.w	d0,d2
		eori.w	#$F,d2
		move.b	$1F(a0),d0
		ext.w	d0
		sub.w	d0,d3
		lea	(Secondary_Angle).w,a4
		movea.w	#-$10,a3
		move.w	#$800,d6
		jsr	FindFloor.w
		move.w	(sp)+,d0
		bsr.w	Player_Angle
		tst.w	d1
		beq.s	locret_EECE
		bpl.s	loc_EED0
		cmpi.w	#-$E,d1
		blt.s	locret_EECE
		sub.w	d1,$14(a0)

locret_EECE:

		rts
; ---------------------------------------------------------------------------

loc_EED0:
		tst.b	$3C(a0)
		bne.s	loc_EEEE
		move.b	$18(a0),d0
		bpl.s	loc_EEDE
		neg.b	d0

loc_EEDE:
		addq.b	#4,d0
		cmpi.b	#$E,d0
		blo.s	loc_EEEA
		move.b	#$E,d0

loc_EEEA:
		cmp.b	d0,d1
		bgt.s	loc_EEF4

loc_EEEE:
		sub.w	d1,$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_EEF4:
		bset	#1,$2A(a0)
		bclr	#5,$2A(a0)
		move.b	#1,$21(a0)
		rts
; ---------------------------------------------------------------------------

Player_WalkVertL:
		move.w	$14(a0),d2
		move.w	$10(a0),d3
		moveq	#0,d0
		move.b	$1F(a0),d0
		ext.w	d0
		sub.w	d0,d2
		move.b	$1E(a0),d0
		ext.w	d0
		sub.w	d0,d3
		eori.w	#$F,d3
		lea	(Primary_Angle).w,a4
		movea.w	#-$10,a3
		move.w	#$400,d6
		jsr	FindWall.w
		move.w	d1,-(sp)
		move.w	$14(a0),d2
		move.w	$10(a0),d3
		moveq	#0,d0
		move.b	$1F(a0),d0
		ext.w	d0
		add.w	d0,d2
		move.b	$1E(a0),d0
		ext.w	d0
		sub.w	d0,d3
		eori.w	#$F,d3
		lea	(Secondary_Angle).w,a4
		movea.w	#-$10,a3
		move.w	#$400,d6
		jsr	FindWall.w
		move.w	(sp)+,d0
		bsr.w	Player_Angle
		tst.w	d1
		beq.s	locret_EF7C
		bpl.s	loc_EF7E
		cmpi.w	#-$E,d1
		blt.s	locret_EF7C
		sub.w	d1,$10(a0)

locret_EF7C:

		rts
; ---------------------------------------------------------------------------

loc_EF7E:
		tst.b	$3C(a0)
		bne.s	loc_EF9C
		move.b	$1A(a0),d0
		bpl.s	loc_EF8C
		neg.b	d0

loc_EF8C:
		addq.b	#4,d0
		cmpi.b	#$E,d0
		blo.s	loc_EF98
		move.b	#$E,d0

loc_EF98:
		cmp.b	d0,d1
		bgt.s	loc_EFA2

loc_EF9C:
		sub.w	d1,$10(a0)
		rts
; ---------------------------------------------------------------------------

loc_EFA2:
		bset	#1,$2A(a0)
		bclr	#5,$2A(a0)
		move.b	#1,$21(a0)
		rts
; ---------------------------------------------------------------------------

CheckRightCeilingDist:
		move.w	$14(a0),d2
		move.w	$10(a0),d3
		moveq	#0,d0
		move.b	$1F(a0),d0
		ext.w	d0
		sub.w	d0,d2
		move.b	$1E(a0),d0
		ext.w	d0
		add.w	d0,d3
		lea	(Primary_Angle).w,a4
		movea.w	#$10,a3
		move.w	#0,d6
		jsr	FindWall.w
		move.w	d1,-(sp)
		move.w	$14(a0),d2
		move.w	$10(a0),d3
		moveq	#0,d0
		move.b	$1F(a0),d0
		ext.w	d0
		add.w	d0,d2
		move.b	$1E(a0),d0
		ext.w	d0
		add.w	d0,d3
		lea	(Secondary_Angle).w,a4
		movea.w	#$10,a3
		move.w	#0,d6
		jsr	FindWall.w
		move.w	(sp)+,d0
		move.b	#-$40,d2
		jmp	loc_F7E2.w
; ---------------------------------------------------------------------------
; Subroutine to calculate how much space is empty above Sonic's/Tails' head
; d0 = input angle perpendicular to the spine
; d1 = output about how many pixels are overhead (up to some high enough amount)
; ---------------------------------------------------------------------------

CalcRoomOverHead:
		move.l	(Primary_collision_addr).w,(Collision_addr).w
		cmpi.b	#$C,top_solid_bit(a0)
		beq.s	loc_F742
		move.l	(Secondary_collision_addr).w,(Collision_addr).w

loc_F742:
		move.b	lrb_solid_bit(a0),d5
		move.b	d0,(Primary_Angle).w
		move.b	d0,(Secondary_Angle).w
		addi.b	#$20,d0
		andi.b	#$C0,d0
		cmpi.b	#$40,d0
		beq.w	CheckLeftCeilingDist
		cmpi.b	#$80,d0
		beq.w	Sonic_CheckCeiling
		cmpi.b	#$C0,d0
		beq.w	CheckRightCeilingDist
; ---------------------------------------------------------------------------

Sonic_CheckFloor:
		move.l	(Primary_collision_addr).w,(Collision_addr).w
		cmpi.b	#$C,top_solid_bit(a0)
		beq.s	loc_F782
		move.l	(Secondary_collision_addr).w,(Collision_addr).w

loc_F782:
		move.b	top_solid_bit(a0),d5

Sonic_CheckFloor2:
		move.w	y_pos(a0),d2
		move.w	x_pos(a0),d3
		moveq	#0,d0
		move.b	y_radius(a0),d0
		ext.w	d0
		add.w	d0,d2
		move.b	x_radius(a0),d0
		ext.w	d0
		add.w	d0,d3
		lea	(Primary_Angle).w,a4
		movea.w	#$10,a3
		move.w	#0,d6
		jsr	FindFloor.w
		move.w	d1,-(sp)
		move.w	y_pos(a0),d2
		move.w	x_pos(a0),d3
		moveq	#0,d0
		move.b	y_radius(a0),d0
		ext.w	d0
		add.w	d0,d2
		move.b	x_radius(a0),d0
		ext.w	d0
		sub.w	d0,d3
		lea	(Secondary_Angle).w,a4
		movea.w	#$10,a3
		move.w	#0,d6
		jsr	FindFloor.w
		move.w	(sp)+,d0
		move.b	#0,d2
		jmp	loc_F7E2.w
; ---------------------------------------------------------------------------

Sonic_CheckCeiling2:
		move.l	(Primary_collision_addr).w,(Collision_addr).w
		cmpi.b	#$C,top_solid_bit(a0)
		beq.s	+
		move.l	(Secondary_collision_addr).w,(Collision_addr).w

+		move.b	top_solid_bit(a0),d5

Sonic_CheckCeiling:
		move.w	$14(a0),d2
		move.w	$10(a0),d3
		moveq	#0,d0
		move.b	$1E(a0),d0
		ext.w	d0
		sub.w	d0,d2
		eori.w	#$F,d2
		move.b	$1F(a0),d0
		ext.w	d0
		add.w	d0,d3
		lea	(Primary_Angle).w,a4
		movea.w	#-$10,a3
		move.w	#$800,d6
		jsr	FindFloor.w
		move.w	d1,-(sp)
		move.w	$14(a0),d2
		move.w	$10(a0),d3
		moveq	#0,d0
		move.b	$1E(a0),d0
		ext.w	d0
		sub.w	d0,d2
		eori.w	#$F,d2
		move.b	$1F(a0),d0
		ext.w	d0
		sub.w	d0,d3
		lea	(Secondary_Angle).w,a4
		movea.w	#-$10,a3
		move.w	#$800,d6
		jsr	FindFloor.w
		move.w	(sp)+,d0
		move.b	#-$80,d2
		jmp	loc_F7E2.w

; ---------------------------------------------------------------------------
; loc_FC4A:
ChkFloorEdge_ReverseGravity:
		move.w	y_pos(a0),d2
		moveq	#0,d0
		move.b	y_radius(a0),d0
		ext.w	d0
		sub.w	d0,d2
		eori.w	#$F,d2
; sub_FC5C:
ChkFloorEdge_ReverseGravity_Part2:
		move.l	(Primary_collision_addr).w,(Collision_addr).w
		cmpi.b	#$C,top_solid_bit(a0)
		beq.s	loc_FC70
		move.l	(Secondary_collision_addr).w,(Collision_addr).w
loc_FC70:	; +
		lea	(Primary_Angle).w,a4
		move.b	#0,(a4)
		movea.w	#-$10,a3
		move.w	#$800,d6
		move.b	top_solid_bit(a0),d5
		movem.l	a4-a6,-(sp)
		jsr	FindFloor.w
		movem.l	(sp)+,a4-a6
		move.b	(Primary_Angle).w,d3
		btst	#0,d3
		beq.s	locret_FC9E
		move.b	#0,d3

locret_FC9E:
		rts
; ---------------------------------------------------------------------------

ChkFloorEdge:
		move.w	x_pos(a0),d3

ChkFloorEdge_Part2:
		move.w	y_pos(a0),d2
		moveq	#0,d0
		move.b	y_radius(a0),d0
		ext.w	d0
		add.w	d0,d2

ChkFloorEdge_Part3:
		move.l	(Primary_collision_addr).w,(Collision_addr).w
		cmpi.b	#$C,top_solid_bit(a0)
		beq.s	loc_F8BA
		move.l	(Secondary_collision_addr).w,(Collision_addr).w
loc_F8BA:
		lea	(Primary_Angle).w,a4
		move.b	#0,(a4)
		movea.w	#$10,a3
		move.w	#0,d6
		move.b	top_solid_bit(a0),d5
		movem.l	a4-a6,-(sp)
		jsr	FindFloor.w
		movem.l	(sp)+,a4-a6
		move.b	(Primary_Angle).w,d3
		btst	#0,d3
		beq.s	locret_F8E8
		move.b	#0,d3

locret_F8E8:
		rts
; ---------------------------------------------------------------------------

SonicOnObjHitFloor:
		move.w	$10(a1),d3
		move.w	$14(a1),d2
		moveq	#0,d0
		move.b	$1E(a1),d0
		ext.w	d0
		add.w	d0,d2
		move.l	(Primary_collision_addr).w,(Collision_addr).w
		cmpi.b	#$C,$46(a1)
		beq.s	loc_F910
		move.l	(Secondary_collision_addr).w,(Collision_addr).w

loc_F910:
		lea	(Primary_Angle).w,a4
		move.b	#0,(a4)
		movea.w	#$10,a3
		move.w	#0,d6
		move.b	$46(a1),d5
		jsr	FindFloor.w
		move.b	(Primary_Angle).w,d3
		btst	#0,d3
		beq.s	locret_F936
		move.b	#0,d3

locret_F936:
		rts

; =============== S U B R O U T I N E =======================================

; sub_FCCA:
CheckLeftCeilingDist:
		move.w	$14(a0),d2
		move.w	$10(a0),d3
		moveq	#0,d0
		move.b	$1F(a0),d0
		ext.w	d0
		sub.w	d0,d2
		move.b	$1E(a0),d0
		ext.w	d0
		sub.w	d0,d3
		eori.w	#$F,d3
		lea	(Primary_Angle).w,a4
		movea.w	#-$10,a3
		move.w	#$400,d6
		jsr	FindWall.w
		move.w	d1,-(sp)
		move.w	$14(a0),d2
		move.w	$10(a0),d3
		moveq	#0,d0
		move.b	$1F(a0),d0
		ext.w	d0
		add.w	d0,d2
		move.b	$1E(a0),d0
		ext.w	d0
		sub.w	d0,d3
		eori.w	#$F,d3
		lea	(Secondary_Angle).w,a4
		movea.w	#-$10,a3
		move.w	#$400,d6
		jsr	FindWall.w
		move.w	(sp)+,d0
		move.b	#$40,d2
		jmp	loc_F7E2.w

; =============== S U B R O U T I N E =======================================


sub_FDEC:

		move.l	(Primary_collision_addr).w,(Collision_addr).w
		cmpi.b	#$C,$46(a0)
		beq.s	loc_FE00
		move.l	(Secondary_collision_addr).w,(Collision_addr).w

loc_FE00:
		move.w	$10(a0),d3
		move.w	$14(a0),d2
		move.b	$1E(a0),d0
		ext.w	d0
		sub.w	d0,d3
		eori.w	#$F,d3
		lea	(Primary_Angle).w,a4

loc_FE18:
		move.b	#0,(a4)
		movea.w	#-$10,a3
		move.w	#$400,d6
		move.b	$47(a0),d5
		jsr	FindWall.w
		move.b	(Primary_Angle).w,d3
		btst	#0,d3
		beq.s	locret_FE3A
		move.b	#$40,d3

locret_FE3A:
		rts

; =============== S U B R O U T I N E =======================================

TouchResponse_CompetitionMode:
TouchResponse:
		jsr	(Test_Ring_Collisions).l
		bsr.w	ShieldTouchResponse

		move.b	status_secondary(a0),d0
		andi.b	#$73,d0					; Does the player have any shields or is invincible?
		bne.s	Touch_NoInstaShield			; If so, branch
		cmpi.b	#1,double_jump_flag(a0)			; Is the Insta-Shield currently in its 'attacking' mode?
		bne.s	Touch_NoInstaShield			; If not, branch

		move.b	status_secondary(a0),d0			; Get status_secondary...
		move.w	d0,-(sp)				; ...and save it
		bset	#Status_Invincible,status_secondary(a0)	; Make the player invincible

		move.w	x_pos(a0),d2				; Get player's x_pos
		move.w	y_pos(a0),d3				; Get player's y_pos
		subi.w	#$18,d2					; Subtract width of Insta-Shield
		subi.w	#$18,d3					; Subtract height of Insta-Shield
		move.w	#$30,d4					; Player's width
		move.w	#$30,d5					; Player's height
		bsr.s	Touch_Process

		move.w	(sp)+,d0				; Get the backed-up status_secondary
		btst	#Status_Invincible,d0			; Was the player already invincible (wait, what? An earlier check ensures that this can't happen)
		bne.s	.alreadyinvincible			; If so, branch
		bclr	#Status_Invincible,status_secondary(a0)	; Make the player vulnerable again
; loc_FEE6:
.alreadyinvincible:
		moveq	#0,d0
		rts
; ---------------------------------------------------------------------------

Touch_NoInstaShield:
		move.w	x_pos(a0),d2				; Get player's x_pos
		move.w	y_pos(a0),d3				; Get player's y_pos
		subi.w	#8,d2					; Subtract Obj_Sonic's x_radius-1 from x_pos (becomes player's left collision boundary)
		moveq	#0,d5
		move.b	y_radius(a0),d5
		subq.b	#3,d5					; Now player's collision height
		sub.w	d5,d3
		; Note the lack of a check for if the player is ducking
		; Height is no longer reduced by ducking
		move.w	#$10,d4					; Player's collision width
		add.w	d5,d5
; loc_FF06:
Touch_Process:
		lea	(Collision_response_list).w,a4
		move.w	(a4)+,d6				; Get number of objects queued
		beq.s	locret_FF1C				; If there are none, return
; loc_FF0E:
Touch_Loop:
		movea.w	(a4)+,a1				; Get address of first object's RAM
		move.b	collision_flags(a1),d0			; Get its collision_flags
		bne.s	Touch_Width				; If it actually has collision, branch
; loc_FF16:
Touch_NextObj:
		subq.w	#2,d6					; Count the object as done
		bne.s	Touch_Loop				; If there are still objects left, loop
		moveq	#0,d0

locret_FF1C:
		rts
; ---------------------------------------------------------------------------
; loc_FF1E:
Touch_Width:
		andi.w	#$3F,d0					; Get only collision size
		add.w	d0,d0					; Turn into index
		lea	Touch_Sizes(pc,d0.w),a2
		moveq	#0,d1
		move.b	(a2)+,d1				; Get width value from Touch_Sizes
		move.w	x_pos(a1),d0				; Get object's x_pos
		sub.w	d1,d0					; Subtract object's width
		sub.w	d2,d0					; Subtract player's left collision boundary
		bcc.s	.checkrightside				; If player's left side is to the left of the object, branch
		add.w	d1,d1					; Double object's width value
		add.w	d1,d0					; Add object's width*2 (now at right of object)
		bcs.s	Touch_Height				; If carry, branch (player is within the object's boundaries)
		bra.s	Touch_NextObj				; If not, loop and check next object
; ---------------------------------------------------------------------------
; loc_FF3E:
.checkrightside:
		cmp.w	d4,d0					; Is player's right side to the left of the object?
		bhi.s	Touch_NextObj				; If so, loop and check next object
; loc_FF42:
Touch_Height:
		moveq	#0,d1
		move.b	(a2)+,d1				; Get height value from Touch_Sizes
		move.w	y_pos(a1),d0				; Get object's y_pos
		sub.w	d1,d0					; Subtract object's height
		sub.w	d3,d0					; Subtract player's bottom collision boundary
		bcc.s	.checktop				; If bottom of player is under the object, branch
		add.w	d1,d1					; Double object's height value
		add.w	d1,d0					; Add object's height*2 (now at top of object)
		bcs.w	Touch_ChkValue				; If carry, branch (player is within the object's boundaries)
		bra.s	Touch_NextObj				; If not, loop and check next object
; ---------------------------------------------------------------------------
; loc_FF5A:
.checktop:
		cmp.w	d5,d0					; Is top of player under the object?
		bhi.s	Touch_NextObj				; If so, loop and check next object
		bra.w	Touch_ChkValue
; ---------------------------------------------------------------------------
; collision sizes (width,height)
; byte_FF62:
Touch_Sizes:
		dc.b    4,   4
		dc.b  $14, $14
		dc.b   $C, $14
		dc.b  $14,  $C
		dc.b    4, $10
		dc.b   $C, $12
		dc.b  $10, $10
		dc.b    6,   6
		dc.b  $18,  $C
		dc.b   $C, $10
		dc.b  $10,   8
		dc.b    8,   8
		dc.b  $14, $10
		dc.b  $14,   8
		dc.b   $E,  $E
		dc.b  $18, $18
		dc.b  $28, $10
		dc.b  $10, $18
		dc.b    8, $10
		dc.b  $20, $70
		dc.b  $40, $20
		dc.b  $80, $20
		dc.b  $20, $20
		dc.b    8,   8
		dc.b    4,   4
		dc.b  $20,   8
		dc.b   $C,  $C
		dc.b    8,   4
		dc.b  $18,   4
		dc.b  $28,   4
		dc.b    4,   8
		dc.b    4, $18
		dc.b    4, $28
		dc.b  $18, $18
		dc.b  $18, $18
		dc.b   $C, $18
		dc.b  $48,   8
		dc.b  $18, $28
		dc.b  $10,   4
		dc.b  $20,   2
		dc.b  $10, $1C
		dc.b   $C, $24
		dc.b  $10,   2
		dc.b    4, $40
		dc.b  $18, $40
		dc.b  $20, $10
		dc.b  $1C, $14
		dc.b  $10,   2
		dc.b  $10,   1
		dc.b    2,   8
		dc.b  $10, $40
		dc.b   $C,   4
		dc.b    8,  $C
		dc.b  $28, $20
		dc.b  $40,   2
		dc.b  $60,   2
		dc.b  $28, $28
		dc.b  $10,  $C		; NAT: Monitors
; ---------------------------------------------------------------------------
; loc_FFD4:
Touch_ChkValue:
		move.b	collision_flags(a1),d1			; Get its collision_flags
		andi.b	#$C0,d1					; Get only collision type bits
		beq.w	Touch_Enemy				; If 00, enemy, branch
		cmpi.b	#$C0,d1
		beq.w	Touch_Special				; If 11, "special thing for starpole", branch
		tst.b	d1
		bmi.w	Touch_ChkHurt				; If 10, "harmful", branch
		; If 01...
		move.b	collision_flags(a1),d0			; Get collision_flags
		andi.b	#$3F,d0					; Get only collision size
		cmpi.b	#6,d0					; Is touch response $46 ?
		beq.s	Touch_Monitor				; If yes, branch
		cmpi.b	#$39,d0					; NAT: Is float?
		beq.w	Touch_Monitor.setparen			; If yes, branch
		move.b	invulnerability_timer(a0),d0		; Get invulnerability_timer from whoever branched to TouchResponse
; loc_1000A:
.notcompetition:
		cmpi.b	#90,d0					; Is there more than 90 frames on the timer remaining?
		bhs.w	.locret					; If so, branch
		move.b	#4,routine(a1)				; Set target object's routine to 4 (must be reserved for collision response)
		move.w	a0,parent(a1)
; locret_10018:
.locret:
		rts
; ---------------------------------------------------------------------------
; loc_1001A:
Touch_Monitor:
		move.w	y_vel(a0),d0				; Get player's y_vel
		tst.b	(Reverse_gravity_flag).w		; Are we in reverse gravity mode?
		beq.s	.normalgravity				; If not, branch
		neg.w	d0					; Negate player's y_vel
; loc_10026:
.normalgravity:
		btst	#1,render_flags(a1)			; Is the monitor upside down?
		beq.s	.monitornotupsidedown			; If not, branch
		tst.w	d0
		beq.s	.checkdestroy				; If player isn't moving up or down at all, branch
		bmi.s	.checkdestroy				; If player is moving up, branch
		bra.s	.checkfall				; If player is moving down, branch
; ---------------------------------------------------------------------------
; loc_10036:
.monitornotupsidedown:
		tst.w	d0
		bpl.s	.checkdestroy				; If player is moving down, branch
; loc_1003A:
.checkfall:
		; This check is responsible for S&K's monitors not falling if hit from below (but only in regular gravity. See below)
		btst	#1,status(a1)				; Is the monitor upside down (different way of checking)?
		beq.s	.checkdestroy				; If not, branch
		btst	#1,render_flags(a1)			; Is the monitor upside down?
		bne.s	.monitorupsidedown			; If so, branch
		move.w	y_pos(a0),d0				; Get player's y_pos
		subi.w	#$10,d0					; Subtract height of monitor from it
		cmp.w	y_pos(a1),d0
		blo.s	.locret					; If new value is lower than monitor's y_pos, return
		bra.s	.monitorfall
; ---------------------------------------------------------------------------
; loc_1005A:
.monitorupsidedown:
		move.w	y_pos(a0),d0				; Get player's y_pos
		addi.w	#$10,d0					; Add height of monitor from it
		cmp.w	y_pos(a1),d0
		bhs.s	.locret					; If new value is higher than monitor's y_pos, return
; loc_10068:
.monitorfall:
		; Fun fact: In S3, like the games before it, hitting a monitor from below would make it fall
		; In S&K, that was removed, and they are destroyed as normal.
		; However, according to this code, if a monitor is upside down, and player is in reverse gravity,
		; hitting the monitor from below will still make it fall.
		; Playing with Debug Mode confirms this.
		neg.w	y_vel(a0)				; Reverse Sonic's y-motion
		move.w	#-$180,y_vel(a1)
		tst.b	routine_secondary(a1)
		bne.s	.locret
		move.b	#4,routine_secondary(a1)		; Set the monitor's routine_secondary counter,
		rts
; ---------------------------------------------------------------------------
.checkdestroy
.validcharacter	cmpi.b	#2,anim(a0)				; Is player in his rolling animation?
		beq.s	.okaytodestroy				; If so, branch
		cmpi.b	#2,character_id(a0)			; Is player Knuckles?
		bne.s	.locret					; If not, return
		cmpi.b	#1,double_jump_flag(a0)			; Is Knuckles gliding?
		beq.s	.okaytodestroy				; If so, branch
		cmpi.b	#3,double_jump_flag(a0)			; Is Knuckles sliding across the ground after gliding?
		bne.s	.locret					; If not, branch
.okaytodestroy	neg.w	y_vel(a0)

.setparen	move.b	#4,routine(a1)
		tst.w	parent(a1)			; parent 0?
		bne.s	.noparent			; if yes, branch
		move.w	a0,parent(a1)
.locret		rts

.noparent	clr.w	parent(a1)			; neither player gets monitor
		rts
; ---------------------------------------------------------------------------
; loc_100BC:
Touch_Enemy:
		btst	#Status_Invincible,status_secondary(a0)	; Is player invincible?
		bne.s	.checkhurtenemy				; If so, branch
		cmpi.b	#9,anim(a0)				; Is player in their spin dash animation?
		beq.s	.checkhurtenemy				; If so, branch
		cmpi.b	#2,anim(a0)				; Is player in their rolling animation?
		beq.s	.checkhurtenemy				; If so, branch
	;	cmpi.b	#2,character_id(a0)			; Is player Knuckles?
	;	bne.s	.notknuckles				; If not, branch
	;	cmpi.b	#1,double_jump_flag(a0)			; Is Knuckles gliding?
	;	beq.s	.checkhurtenemy				; If so, branch
	;	cmpi.b	#3,double_jump_flag(a0)			; Is Knuckles sliding across the ground after gliding?
	;	beq.s	.checkhurtenemy				; If so, branch
		bra.w	Touch_ChkHurt
; ---------------------------------------------------------------------------
; loc_100F0:
.notknuckles:
	;	cmpi.b	#1,character_id(a0)			; Is player Tails
	;	bne.w	Touch_ChkHurt				; If not, branch
	;	tst.b	double_jump_flag(a0)			; Is Tails flying ("gravity-affected")
	;	beq.w	Touch_ChkHurt				; If not, branch
	;	btst	#Status_Underwater,status(a0)		; Is Tails underwater
	;	bne.w	Touch_ChkHurt				; If not, branch
	;	move.w	x_pos(a0),d1
	;	move.w	y_pos(a0),d2
	;	sub.w	x_pos(a1),d1
	;	sub.w	y_pos(a1),d2
	;	jsr	GetArcTan.w
	;	subi.b	#$20,d0
	;	cmpi.b	#$40,d0
	;	bhs.w	Touch_ChkHurt
; loc_1012E:
.checkhurtenemy:
		; Boss related? Could be special enemies in general
		tst.b	boss_hitcount2(a1)		; Is this a boss? (?)
		beq.w	Touch_EnemyNormal		; If not, branch
		neg.w	x_vel(a0)			; Bounce player directly off boss
		neg.w	y_vel(a0)
		neg.w	ground_vel(a0)
		move.b	collision_flags(a1),$25(a1)	; save flags
		move.w	a0,d0				; Save value of RAM address of which player hit the boss:
		move.b	d0,$1C(a1)			; Chaos_emerald_count$00 for main character, Chaos_emerald_count$4A for sidekick
		clr.b	collision_flags(a1)

		tst.b	BossHitMode.w			; NAT: Check if boss hit mode is on
		bpl.s	.ok				; no? branch
;		or.b	#1,Update_HUD_score.w		; update score

;		lea	Score.w,a2			; get score
;		cmp.w	#Player_1,a0			; check if sanic
;		beq.s	.sanic				; if so, branch
;		addq.w	#1,a2				; inc to tails

;.sanic		addq.b	#1,(a2)				; add score
;		cmp.b	#99,(a2)			; check max
;		ble.s	.ok				; if not, branch
;		move.b	#99,(a2)			; set max

		lea	BossHitsP1.w,a2			; get score
		move.w	a2,a3				; and to a3
		cmp.w	#Player_1,a0			; check if sanic
		beq.s	.sanic				; if so, branch
		addq.w	#1,a2				; inc to tails
.sanic		addq.b	#1,(a2)				; add score

	; check if we want to destroy boss now
		move.b	(a3)+,d0			; get Sonic score
		sub.b	(a3)+,d0			; sub Tails score
		bpl.s	.abs				; if positive difference, branch
		neg.b	d0				; negate

.abs		cmp.b	boss_hitcount2(a1),d0		; check if more hits are possible to do,
		bmi.s	.ok				; than leading player wins by, and branch if so
		clr.b	boss_hitcount2(a1)		; clear hit count
		bra.s	.defeat				; set as defeated

.ok		subq.b	#1,boss_hitcount2(a1)		; Subtract from boss hit counter
		bne.s	.bossnotedefeated		; If boss is not defeated yet, branch
.defeat		bset	#7,status(a1)
; loc_1015E:
.bossnotedefeated:
;		cmpi.b	#2,character_id(a0)		; Is player Knuckles?
;		bne.s	.locret				; If not, return
;		cmpi.b	#1,double_jump_flag(a0)		; Is Knuckles gliding?
;		bne.s	.locret				; If not, return
;		move.b	#2,double_jump_flag(a0)		; Make him stop gliding
;		move.b	#$21,anim(a0)			; Put Knuckles in his falling animation
		; Decide which direction to make Knuckles face
;		bclr	#0,status(a0)
;		tst.w	x_vel(a0)
;		bmi.s	.directiondecided
;		bset	#0,status(a0)
; loc_1018C:
.directiondecided:
;		move.b	default_y_radius(a0),y_radius(a0)
;		move.b	default_x_radius(a0),x_radius(a0)
; locret_10198:
.locret:
		rts
; ---------------------------------------------------------------------------
; loc_1019A:
Touch_EnemyNormal:
		btst	#2,status(a1)			; Should the object remember that it's been destroyed (Remember Sprite State flag)?
		beq.s	.dontremember			; If not, branch
		move.b	ros_bit(a1),d0
		movea.w	ros_addr(a1),a2
		bclr	d0,(a2)				; Mark object as destroyed
; loc_101AC:
.dontremember:
		bset	#7,status(a1)
		moveq	#0,d0
		move.w	(Chain_bonus_counter).w,d0	; Get copy of chain bonus counter
		addq.w	#2,(Chain_bonus_counter).w	; Add 2 to chain bonus counter
		cmpi.w	#6,d0				; Has the counter already surpassed 5?
		blo.s	.notreachedlimit		; If not, branch
		moveq	#6,d0				; Cap counter at 6
; loc_101C4:
.notreachedlimit:
		move.w	d0,objoff_3E(a1)
		move.w	Enemy_Points(pc,d0.w),d0	; Get appropriate number of points
		cmpi.w	#16*2,(Chain_bonus_counter).w	; Have 16 enemies been destroyed?
		blo.s	.notreachedlimit2		; If not, branch
		move.w	#1000,d0			; Fix bonus to 10000 points
		move.w	#$A,objoff_3E(a1)
; loc_101DE:
.notreachedlimit2:
		movea.w	a0,a3
		bsr.w	HUD_AddToScore

		tst.b	SpecialEnemyFlag.w		; NAT: Check for special flag
		beq.s	.noflag				; branch if cleared
		cmp.l	#Obj_Explosion,(a1)		; check if this is an explosion (double kill?)
		sne	d0				; set d0 if not
		add.b	d0,SpecialEnemyCtr.w		; NAT: Decrease enemy counter

		lea	Score.w,a2			; get p1 score to a2
		cmp.w	#Player_1,a0			; check if this is Sonic
		beq.s	.sonic				; branch if so
		addq.w	#1,a2				; get p2 score

.sonic		addq.b	#1,(a2)				; increase score
		or.b	#1,Update_HUD_score.w		; update score too

.noflag		move.l	#Obj_Explosion,(a1)		; Create enemy destruction explosion
		move.b	#0,routine(a1)
		tst.w	y_vel(a0)			; Is player moving up?
		bmi.s	.bounceplayerdown		; If so, branch
		move.w	y_pos(a0),d0
		cmp.w	y_pos(a1),d0			; Was player above, or at the same height as, the enemy when it was destroyed
		bhs.s	.bounceplayerup			; If so, branch
		neg.w	y_vel(a0)			; Totally negate velocity (???)
		rts
; ---------------------------------------------------------------------------
; loc_10206:
.bounceplayerdown:
		addi.w	#$100,y_vel(a0)			; Bounce down
		rts
; ---------------------------------------------------------------------------
; loc_1020E:
.bounceplayerup:
		subi.w	#$100,y_vel(a0)			; Bounce up
		rts
; ---------------------------------------------------------------------------
; word_10216:
Enemy_Points:	dc.w 10, 20, 50, 100
; ---------------------------------------------------------------------------

; ---------------------------------------------------------------------------
; Subroutine for checking if Sonic/Tails/Knuckles should be hurt and hurting them if so
; note: character must be at a0
; ---------------------------------------------------------------------------

; =============== S U B R O U T I N E =======================================

Touch_ChkHurt:
		move.b	status_secondary(a0),d0
		andi.b	#$73,d0					; Does player have any shields or is invincible?
		beq.s	Touch_ChkHurt_NoPowerUp			; If not, branch
		and.b	shield_reaction(a1),d0			; Does one of the player's shields grant immunity to this object??
		bne.s	Touch_ChkHurt_Return			; If so, branch
		btst	#Status_Shield,status_secondary(a0)	; Does the player have a shield (strange time to ask)
		bne.s	Touch_ChkHurt_HaveShield		; If so, branch

Touch_ChkHurt2:
		btst	#Status_Invincible,status_secondary(a0)	; Is player invincible?
		beq.s	Touch_Hurt				; If not, branch

Touch_ChkHurt_Return:
		moveq	#-1,d0
		rts
; ---------------------------------------------------------------------------

Touch_ChkHurt_NoPowerUp:
		; Note that this check could apply to the Insta-Shield,
		; but the check that branches to this requires the player not be invincible.
		; The Insta-Shield grants temporary invincibility. See the problem?
		cmpi.b	#1,double_jump_flag(a0)			; Is player Insta-Shield-attacking (Sonic), flying (Tails) or gliding (Knuckles)?
		bne.s	Touch_ChkHurt2				; If not, branch

Touch_ChkHurt_HaveShield:
		move.b	shield_reaction(a1),d0
		andi.b	#8,d0					; Should the object be bounced away by a shield?
		beq.s	Touch_ChkHurt2				; If not, branch

Touch_ChkHurt_Bounce_Projectile:
		move.w	x_pos(a0),d1
		move.w	y_pos(a0),d2
		sub.w	x_pos(a1),d1
		sub.w	y_pos(a1),d2
		jsr	GetArcTan.w
		jsr	GetSineCosine.w
		muls.w	#-$800,d1
		asr.l	#8,d1
		move.w	d1,x_vel(a1)
		muls.w	#-$800,d0
		asr.l	#8,d0
		move.w	d0,y_vel(a1)
		clr.b	collision_flags(a1)
		bra.s	Touch_ChkHurt_Return
; ---------------------------------------------------------------------------
; HurtSonic:
Touch_Hurt:
		tst.b	invulnerability_timer(a0)	; Is the player invulnerable?
		bne.s	Touch_ChkHurt_Return		; If so, branch
		movea.l	a1,a2

; End of function TouchResponse
; continue straight to HurtCharacter

; ---------------------------------------------------------------------------
; Hurting Sonic/Tails/Knuckles subroutine
; ---------------------------------------------------------------------------

; =============== S U B R O U T I N E =======================================

; HurtSonic2:
HurtCharacter:
		moveq	#0,d0
		move.b	Ring_count.w,d0
		cmpa.w	#Player_1,a0
		beq.s	loc_102A8
		move.b	Ring_count+1.w,d0

loc_102A8:
		btst	#0,$2B(a0)
		bne.s	loc_102DA
		tst.b	$37(a0)
		bmi.s	loc_102E0
		tst.w	d0
		beq.w	loc_10350
		jsr	Create_New_Sprite.w
		bne.s	loc_102DA
		move.l	#Obj_Bouncing_Ring,(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		move.w	a0,$3E(a1)

loc_102DA:
		andi.b	#$8E,$2B(a0)

loc_102E0:

		move.b	#4,5(a0)
		jsr	(Player_TouchFloor).l
		bset	#1,$2A(a0)
		move.w	#-$400,$1A(a0)
		move.w	#-$200,$18(a0)
		btst	#6,$2A(a0)
		beq.s	loc_10312
		move.w	#-$200,$1A(a0)
		move.w	#-$100,$18(a0)

loc_10312:
		move.w	$10(a0),d0
		cmp.w	$10(a2),d0
		blo.s	loc_10320
		neg.w	$18(a0)

loc_10320:
		move.w	#0,$1C(a0)
		move.b	#$1A,$20(a0)
		move.b	#$78,$34(a0)
		moveq	#$35,d0
		cmpi.l	#Obj_Spikes,(a2)
		blo.s	loc_10346
		cmpi.l	#sub_24280,(a2)
		bhs.s	loc_10346
		moveq	#$37,d0

loc_10346:

		jsr	Play_Sound_2.w
		moveq	#-1,d0
		rts
; ---------------------------------------------------------------------------

loc_10350:
		moveq	#$35,d0
		cmpi.l	#Obj_Spikes,(a2)
		blo.s	loc_10364
		cmpi.l	#sub_24280,(a2)
		bhs.s	loc_10364
		moveq	#$37,d0

loc_10364:

		bra.s	loc_1036E
; ---------------------------------------------------------------------------

Kill_Character:
		moveq	#$35,d0

loc_1036E:
		andi.b	#$0E,$2B(a0)
		clr.b	$37(a0)
		move.b	#6,5(a0)
		move.w	d0,-(sp)
		jsr	(Player_TouchFloor).l
		move.w	(sp)+,d0
		bset	#1,$2A(a0)
		move.w	#-$700,$1A(a0)
		move.w	#0,$18(a0)
		move.w	#0,$1C(a0)
		move.b	#$18,$20(a0)
		jsr	Play_Sound_2.w

		pea	(a1)
		move.l	ModeTable.w,a1			; NAT: Get mode table address
		move.l	$20(a1),a1			; get death routine

		cmp.w	#Player_1,a0			; check if the current player is Sonic
		bne.s	.ok				; if not, branch
		addq.l	#2,a1				; skip over the bra.s
.ok		jsr	(a1)				; jump to the target routine

		move.l	(sp)+,a1
		bset	#7,$A(a0)
		moveq	#-1,d0
		rts
; ---------------------------------------------------------------------------
; loc_103BA:
Touch_Special:
		move.b	collision_flags(a1),d1	; Get collision_flags
		andi.b	#$3F,d1			; Get only collision size (but that doesn't seems to be its use here)
		cmpi.b	#7,d1
		beq.s	loc_103FA
		cmpi.b	#6,d1
		beq.s	loc_103FA
		cmpi.b	#$A,d1
		beq.s	loc_103FA
		cmpi.b	#$C,d1
		beq.s	loc_103FA
		cmpi.b	#$15,d1
		beq.s	loc_103FA
		cmpi.b	#$16,d1
		beq.s	loc_103FA
		cmpi.b	#$17,d1
		beq.s	loc_103FA
		cmpi.b	#$18,d1
		beq.s	loc_103FA
		cmpi.b	#$21,d1
		beq.s	loc_103FA
		rts
; ---------------------------------------------------------------------------

loc_103FA:

		move.w	a0,d1				; Get RAM address of what object hit this
		subi.w	#Object_RAM,d1
		beq.s	.ismaincharacter		; If the main character hit it, branch
		addq.b	#1,collision_property(a1)	; Otherwise, it seems everything else does double
; loc_10406:
.ismaincharacter:
		addq.b	#1,collision_property(a1)	; So hitting a boss with your Tails sidekick does double damage?
		rts

; =============== S U B R O U T I N E =======================================

; sub_1041E:
ShieldTouchResponse:
		move.b	status_secondary(a0),d0
		andi.b	#$71,d0				; Does the player have any shields?
		beq.s	locret_1045C
		move.w	x_pos(a0),d2			; Get player's x_pos
		move.w	y_pos(a0),d3			; Get player's y_pos
		subi.w	#$18,d2				; Subtract width of shield
		subi.w	#$18,d3				; Subtract height of shield
		move.w	#$30,d4				; Player's width
		move.w	#$30,d5				; Player's height
		lea	(Collision_response_list).w,a4
		move.w	(a4)+,d6			; Get number of objects queued
		beq.s	locret_1045C			; If there are none, return
; loc_10448:
ShieldTouch_Loop:
		movea.w	(a4)+,a1			; Get address of first object's RAM
		move.b	collision_flags(a1),d0		; Get its collision_flags
		andi.b	#$C0,d0				; Get only collision type bits
		cmpi.b	#$80,d0				; Is only the high bit set ("harmful")?
		beq.s	ShieldTouch_Width		; If so, branch
		cmpi.b	#$40,d0				; Is only the high bit set ("harmful")?
		beq.s	ShieldTouch_Width		; If so, branch
; loc_10458:
ShieldTouch_NextObj:
		subq.w	#2,d6				; Count the object as done
		bne.s	ShieldTouch_Loop		; If there are still objects left, loop

locret_1045C:
		rts
; ---------------------------------------------------------------------------
; loc_1045E:
ShieldTouch_Width:
		move.b	collision_flags(a1),d0		; Get collision_flags
		andi.w	#$3F,d0				; Get only collision size
		beq.s	ShieldTouch_NextObj		; If it doesn't have a size, branch
		add.w	d0,d0				; Turn into index
		lea	(Touch_Sizes).l,a2
		lea	(a2,d0.w),a2			; Go to correct entry
		moveq	#0,d1
		move.b	(a2)+,d1			; Get width value from Touch_Sizes
		move.w	x_pos(a1),d0			; Get object's x_pos
		sub.w	d1,d0				; Subtract object's width
		sub.w	d2,d0				; Subtract player's left collision boundary
		bhs.s	.checkrightside			; If player's left side is to the left of the object, branch
		add.w	d1,d1				; Double object's width value
		add.w	d1,d0				; Add object's width*2 (now at right of object)
		blo.s	ShieldTouch_Height		; If carry, branch (player is within the object's boundaries)
		bra.s	ShieldTouch_NextObj		; If not, loop and check next object
; ---------------------------------------------------------------------------
; loc_1048A:
.checkrightside:
		cmp.w	d4,d0				; Is player's right side to the left of the object?
		bhi.s	ShieldTouch_NextObj		; If so, loop and check next object
; loc_1048E:
ShieldTouch_Height:
		moveq	#0,d1
		move.b	(a2)+,d1			; Get height value from Touch_Sizes
		move.w	y_pos(a1),d0			; Get object's y_pos
		sub.w	d1,d0				; Subtract object's height
		sub.w	d3,d0				; Subtract player's bottom collision boundary
		bcc.s	.checktop			; If bottom of player is under the object, branch
		add.w	d1,d1				; Double object's height value
		add.w	d1,d0				; Add object's height*2 (now at top of object)
		bcs.w	.checkdeflect			; If carry, branch (player is within the object's boundaries)
		bra.s	ShieldTouch_NextObj		; If not, loop and check next object
; ---------------------------------------------------------------------------
; loc_104A6:
.checktop:
		cmp.w	d5,d0				; Is top of player under the object?
		bhi.s	ShieldTouch_NextObj		; If so, loop and check next object
; loc_104AA:
.checkdeflect:
		move.b	shield_reaction(a1),d0
		andi.b	#8,d0				; Should the object be bounced away by a shield?
		beq.s	ShieldTouch_NextObj		; If not, branch
		move.w	x_pos(a0),d1
		move.w	y_pos(a0),d2
		sub.w	x_pos(a1),d1
		sub.w	y_pos(a1),d2
		jsr	GetArcTan.w
		jsr	GetSineCosine.w
		muls.w	#-$800,d1
		asr.l	#8,d1
		move.w	d1,x_vel(a1)
		muls.w	#-$800,d0
		asr.l	#8,d0
		move.w	d0,y_vel(a1)
		clr.b	collision_flags(a1)
		rts
; End of function ShieldTouchResponse


; =============== S U B R O U T I N E =======================================

; It seems this is used by Hyper Sonic & Hyper Knuckles for their screen-nukes
; (Hyper Dash, and Hyper Knuckles gliding into a wall)

; sub_104EA:
HyperAttackTouchResponse:
		movem.l	a2-a4,-(sp)
		lea	(Collision_response_list).w,a4
		move.w	(a4)+,d6			; Get number of objects queued
		beq.s	HyperTouch_Exit			; If there are none, branch
; loc_104F6:
HyperTouch_Loop:
		movea.w	(a4)+,a1			; Get address of first object's RAM
		move.b	collision_flags(a1),d0		; Get its collision_flags
		beq.s	HyperTouch_NextObj		; If it doesn't have collision, branch
		bsr.s	HyperTouch_ChkValue		; Else, process object

; loc_10500:
HyperTouch_NextObj:
		subq.w	#2,d6				; Count the object as done
		bne.s	HyperTouch_Loop			; If there are still objects left, loop
		moveq	#0,d0
; loc_10506:
HyperTouch_Exit:
		movem.l	(sp)+,a2-a4
		rts
; End of function HyperAttackTouchResponse


; =============== S U B R O U T I N E =======================================

; sub_1050C:
HyperTouch_ChkValue:
		tst.b	render_flags(a1)		; Is object on-screen?
		bpl.s	.offscreen			; If not, return (screen-nuke only affects what's on-screen)
		andi.b	#$C0,d0				; Get collision_flags type data
		beq.s	HyperTouch_Enemy		; If 00, enemy, branch
		cmpi.b	#$C0,d0
		beq.w	HyperTouch_Special		; If 11, "special thing for starpole", branch
		tst.b	d0
		bmi.s	HyperTouch_Harmful		; If 10, "harmful", branch
; locret_10524:
.offscreen:
		rts
; ---------------------------------------------------------------------------
; loc_10526:
HyperTouch_Enemy:
		tst.b	collision_property(a1)		; Is this a special enemy?
		beq.s	HyperTouch_DestroyEnemy		; If not, branch
		rts
; ---------------------------------------------------------------------------

; Similar to other enemy destruction subroutines, but this one doesn't make the player bounce

; loc_1052E:
HyperTouch_DestroyEnemy:
		btst	#2,status(a1)			; Should the object remember that it's been destroyed (Remember Sprite State flag)?
		beq.s	.dontremember			; If not, branch
		move.b	ros_bit(a1),d0
		movea.w	ros_addr(a1),a2
		bclr	d0,(a2)				; Mark object as destroyed
; loc_10540:
.dontremember:
		bset	#7,status(a1)
		moveq	#0,d0
		move.w	(Chain_bonus_counter).w,d0	; Get copy of chain bonus counter
		addq.w	#2,(Chain_bonus_counter).w	; Add 2 to chain bonus counter
		cmpi.w	#6,d0				; Has the counter already surpassed 5?
		blo.s	.notreachedlimit		; If not, branch
		moveq	#6,d0				; Cap counter at 6
; loc_10558:
.notreachedlimit:
		move.w	d0,objoff_3E(a1)
		move.w	HyperEnemy_Score(pc,d0.w),d0	; Get appropriate number of points
		cmpi.w	#16*2,(Chain_bonus_counter).w	; Have 16 enemies been destroyed?
		blo.s	.notreachedlimit2		; If not, branch
		move.w	#1000,d0			; Fix bonus to 10000 points
		move.w	#$A,objoff_3E(a1)
; loc_10572:
.notreachedlimit2:
		movea.w	a0,a3
		bsr.w	HUD_AddToScore
		move.l	#Obj_Explosion,(a1)		; Create enemy destruction explosion
		clr.b	routine(a1)
		rts
; ---------------------------------------------------------------------------
; word_10586:
HyperEnemy_Score:	dc.w 10, 20, 50, 100
; ---------------------------------------------------------------------------
; loc_1058E:
HyperTouch_Harmful:
		move.b	shield_reaction(a1),d0
		andi.b	#8,d0				; Should the object be bounced away by a shield?
		bne.w	Touch_ChkHurt_Bounce_Projectile	; If so, branch
		rts
; ---------------------------------------------------------------------------
; loc_1059C:
HyperTouch_Special:
		ori.b	#3,collision_property(a1)
		cmpi.w	#3,(Player_mode).w		; Are we in Knuckles Alone mode?
		bne.s	.sonicortails			; If not, branch
		move.w	x_pos(a1),(Player_2+x_pos).w	; ???
		move.w	y_pos(a1),(Player_2+y_pos).w	; ???
; loc_105B6:
.sonicortails:
		move.b	#2,(Player_2+anim).w		; Put sidekick in his rolling animation
		bset	#Status_InAir,(Player_2+status).w
		rts
; ===========================================================================
; ---------------------------------------------------------------------------
; Routines for processing death for both players
; ---------------------------------------------------------------------------

Death_BattleRace:
		bra.s	.tails				; NAT: Run tails code if necessary
		move.w	$A(a0),SavedTileP1.w		; Save the current tile to RAM (silly S3K)
		lea	Score+1.w,a1			; get Tails' score byte to a1
		bra.s	.addscore

.tails		move.w	$A(a0),SavedTileP2.w		; Save the current tile to RAM (silly S3K)
		lea	Score.w,a1			; get Sonic's score byte to a1

.addscore	addq.b	#1,(a1)				; increase player score
		cmp.b	#99,(a1)			; check against max
		bls.s	Death_MiniLBZ1.uscor		; if not max, update score display
		subq.b	#1,(a1)				; decrease score to cap at 99 max
		rts
; ---------------------------------------------------------------------------

Death_MiniLBZ1:
		bra.s	.tails				; NAT: Run tails code if necessary
		move.w	$A(a0),SavedTileP1.w		; Save the current tile to RAM (silly S3K)
		lea	Score.w,a1			; get Sonic's score byte to a1
		bra.s	.addscore

.tails		move.w	$A(a0),SavedTileP2.w		; Save the current tile to RAM (silly S3K)
		lea	Score+1.w,a1			; get Tails' score byte to a1

.addscore	subq.b	#3,(a1)				; decrease player score by 3
		bpl.s	.uscor				; if not below 0, update score display
		clr.b	(a1)				; reset score to 0

.uscor		or.b	#1,Update_HUD_score.w		; NAT: update score display
		rts
; ---------------------------------------------------------------------------

Death_TeamMode:
		bra.s	.tails				; NAT: Run tails code if necessary
		move.w	$A(a0),SavedTileP1.w		; Save the current tile to RAM (silly S3K)
		bra.s	.time

.tails		move.w	$A(a0),SavedTileP2.w		; Save the current tile to RAM (silly S3K)
.time		add.w	#10,MiniTimer+1.w		; add a 30 sec penalty
		rts
; ---------------------------------------------------------------------------

Obj_Sonic2P:
		cmpa.w	#Player_1,a0
		bne.s	loc_105F2
		lea	(Sonic_Knux_top_speed).w,a4
		lea	(Distance_from_screen_top).w,a5
		lea	(Dust).w,a6
		move.b	(Player_2+character_id).w,d0
		cmp.b	$38(a0),d0
		bne.s	loc_105E6
		bchg	#3,4(a0)

loc_105E6:
		tst.b	(Debug_On).w
		beq.s	loc_1060E
		jmp	(DebugMode).l
; ---------------------------------------------------------------------------

loc_105F2:
		lea	(Tails_top_speed).w,a4
		lea	(Distance_from_screen_top_P2).w,a5
		lea	(Dust_P2).w,a6
		move.b	(Player_1+character_id).w,d0
		cmp.b	$38(a0),d0
		bne.s	loc_1060E
		bchg	#4,4(a0)

loc_1060E:

		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_1061C(pc,d0.w),d1
		jmp	off_1061C(pc,d1.w)
; ---------------------------------------------------------------------------
off_1061C:	dc.w loc_10628-off_1061C

		dc.w loc_10740-off_1061C; 1
		dc.w loc_122BE-off_1061C; 2
		dc.w loc_12390-off_1061C; 3
		dc.w loc_1257C-off_1061C; 4
		dc.w loc_12590-off_1061C; 5
; ---------------------------------------------------------------------------

loc_10628:
		addq.b	#2,5(a0)
		move.b	#$B,$1E(a0)
		move.b	#5,$1F(a0)
		move.b	#$B,$44(a0)
		move.b	#5,$45(a0)
		move.w	#prio(2),8(a0)
		move.b	#$C,7(a0)
		move.b	#$C,6(a0)
		move.b	#4,4(a0)
		lea	(Character_Speeds).l,a1
		moveq	#0,d0
		move.b	$38(a0),d0
		lsl.w	#3,d0
		lea	(a1,d0.w),a1
		move.w	(a1)+,(a4)
		move.w	(a1)+,2(a4)
		move.w	(a1)+,4(a4)
		tst.b	(Last_star_post_hit).w
		bne.w	loc_10724
		move.b	#$C,$46(a0)
		move.b	#$D,$47(a0)
		cmpa.w	#Player_1,a0
		bne.s	loc_106DC
		move.w	#$680,$A(a0)
		move.l	#Map_Sonic2P,$C(a0)
		tst.b	$38(a0)
		beq.s	loc_106B4
		move.l	#Map_Knuckles2P,$C(a0)
		addi.w	#$2000,$A(a0)

loc_106B4:
		cmpi.b	#$12,(Current_zone).w
		bne.s	loc_106C2
		ori.w	#$8000,$A(a0)

loc_106C2:
	;	move.w	$10(a0),(Saved_X_pos).w
	;	move.w	$14(a0),(Saved_Y_pos).w
	;	move.w	$A(a0),(Saved_art_tile).w
	;	move.w	$46(a0),(Saved_solid_bits).w
		bra.s	loc_10724
; ---------------------------------------------------------------------------

loc_106DC:
		move.w	#$6A0,$A(a0)
		move.l	#Map_Sonic2P,$C(a0)
		tst.b	$38(a0)
		beq.s	loc_106FE
		move.l	#Map_Knuckles2P,$C(a0)
		addi.w	#$2000,$A(a0)

loc_106FE:
		cmpi.b	#$12,(Current_zone).w
		bne.s	loc_1070C
		ori.w	#$8000,$A(a0)

loc_1070C:
	;	move.w	$10(a0),(Saved2_X_pos).w
	;	move.w	$14(a0),(Saved2_Y_pos).w
	;	move.w	$A(a0),(Saved2_art_tile).w
	;	move.w	$46(a0),(Saved2_solid_bits).w

loc_10724:

		move.b	#0,$30(a0)
		move.b	#4,$31(a0)
		move.b	#0,(Super_Sonic_Knux_flag).w
		move.b	#$1E,$2C(a0)
		bsr.w	Reset_Player_Position_Array

loc_10740:
		tst.b	(Debug_mode_flag).w
		beq.s	loc_10760
		cmpa.w	#Player_1,a0
		bne.s	loc_10760
		btst	#4,(Ctrl_1_pressed).w
		beq.s	loc_10760
		st	(Debug_On).w
		clr.b	(Ctrl_1_locked).w
		rts
; ---------------------------------------------------------------------------

loc_10760:

		cmpa.w	#Player_1,a0
		bne.s	loc_10774
		tst.b	(Ctrl_1_locked).w
		bne.s	loc_10780
		move.w	(Ctrl_1).w,(Ctrl_1_logical).w
		bra.s	loc_10780
; ---------------------------------------------------------------------------

loc_10774:
		tst.b	(Ctrl_2_locked).w
		bne.s	loc_10780
		move.w	(Ctrl_2).w,(Ctrl_1_logical).w

loc_10780:

		bsr.w	Sonic_Display
		btst	#0,$2E(a0)
		bne.s	loc_1079E
		moveq	#0,d0
		move.b	$2A(a0),d0
		andi.w	#6,d0
		move.w	off_107EE(pc,d0.w),d1
		jsr	off_107EE(pc,d1.w)

loc_1079E:
		cmpi.w	#-$100,(Camera_min_Y_pos).w
		bne.s	loc_107AE
		move.w	(Screen_Y_wrap_value).w,d0
		and.w	d0,$14(a0)

loc_107AE:
		move.w	(Screen_X_wrap_value).w,d0
		and.w	d0,$10(a0)
		addi.w	#$400,$10(a0)
		bsr.w	Sonic_RecordPos
		move.b	(Primary_Angle).w,$3A(a0)
		move.b	(Secondary_Angle).w,$3B(a0)
		btst	#1,$2E(a0)
		bne.s	loc_107DC
		bsr.w	Animate_SonicKnuckles_2P
		bsr.w	SonicKnuckles2P_Load_PLC

loc_107DC:
		move.b	$2E(a0),d0
		andi.b	#$A0,d0
		bne.s	locret_107EC
		jsr	(TouchResponse_CompetitionMode).l

locret_107EC:
		rts
; ---------------------------------------------------------------------------
off_107EE:	dc.w loc_107F6-off_107EE

		dc.w loc_10868-off_107EE
		dc.w loc_10896-off_107EE
		dc.w loc_108B8-off_107EE
; ---------------------------------------------------------------------------

loc_107F6:
		move.b	(Ctrl_1_pressed_logical).w,d0
		andi.b	#$70,d0
		bne.s	loc_10844
		cmpi.b	#$A,$20(a0)
		beq.s	locret_10866
		cmpi.b	#$B,$20(a0)
		beq.s	locret_10866
		cmpi.b	#5,$20(a0)
		bne.s	loc_10844
		cmpi.b	#$1E,$23(a0)
		blo.s	loc_10844
		bsr.w	Player_SlopeResist
		move.b	(Ctrl_1_logical).w,d0
		andi.b	#$7F,d0
		beq.s	loc_1085E
		move.b	#$A,$20(a0)
		cmpi.b	#$AC,$23(a0)
		blo.s	loc_1085E
		move.b	#$B,$20(a0)
		bra.s	loc_1085E
; ---------------------------------------------------------------------------

loc_10844:

		bsr.w	sub_1094C
		bsr.w	Sonic_Jump
		bsr.w	Player_SlopeResist
		bsr.w	Sonic_Move
		bsr.w	sub_108E6
		jsr	MoveSprite2.w

loc_1085E:

		bsr.w	Player_AnglePos
		bsr.w	Player_SlopeRepel

locret_10866:

		rts
; ---------------------------------------------------------------------------

loc_10868:
		bsr.w	Sonic_JumpHeight
		bsr.w	Sonic_ChgJumpDir
		jsr	MoveSprite.w
		btst	#6,$2A(a0)
		beq.s	loc_10884
		subi.w	#$28,$1A(a0)

loc_10884:
		bsr.w	Player_JumpAngle
		movem.l	a4-a6,-(sp)
		bsr.w	SonicKnux_DoLevelCollision
		movem.l	(sp)+,a4-a6
		rts
; ---------------------------------------------------------------------------

loc_10896:
		tst.b	$3D(a0)
		bne.s	loc_108A0
		bsr.w	Sonic_Jump

loc_108A0:
		bsr.w	Player_RollRepel
		bsr.w	Sonic_RollSpeed
		jsr	MoveSprite2.w
		bsr.w	Player_AnglePos
		bsr.w	Player_SlopeRepel
		rts
; ---------------------------------------------------------------------------

loc_108B8:
		bsr.w	Sonic_JumpHeight
		bsr.w	Sonic_ChgJumpDir
		jsr	MoveSprite.w
		btst	#6,$2A(a0)
		beq.s	loc_108D4
		subi.w	#$28,$1A(a0)

loc_108D4:
		bsr.w	Player_JumpAngle
		movem.l	a4-a6,-(sp)
		bsr.w	SonicKnux_DoLevelCollision
		movem.l	(sp)+,a4-a6
		rts

; =============== S U B R O U T I N E =======================================


sub_108E6:
		tst.b	$2B(a0)
		bmi.s	locret_1090C
		move.w	$1C(a0),d0
		bpl.s	loc_108F4
		neg.w	d0

loc_108F4:
		cmpi.w	#$80,d0
		blo.s	locret_1090C
		move.b	(Ctrl_1_logical).w,d0
		andi.b	#$C,d0
		bne.s	locret_1090C
		btst	#1,(Ctrl_1_logical).w
		bne.s	loc_1090E

locret_1090C:

		rts
; ---------------------------------------------------------------------------

loc_1090E:
		btst	#2,$2A(a0)
		beq.s	loc_10918
		rts
; ---------------------------------------------------------------------------

loc_10918:
		bset	#2,$2A(a0)
		move.b	#7,$1E(a0)
		move.b	#3,$1F(a0)
		move.b	#2,$20(a0)
		addq.w	#4,$14(a0)
		move.w	#$3C,d0
		jsr	Play_Sound_2.w
		tst.w	$1C(a0)
		bne.s	locret_1094A
		move.w	#$200,$1C(a0)

locret_1094A:
		rts
; End of function sub_108E6


; =============== S U B R O U T I N E =======================================

sub_1094C:
		tst.b	$3D(a0)
		bne.s	loc_10998
		cmpi.b	#8,$20(a0)
		bne.s	locret_10996
		move.b	(Ctrl_1_pressed_logical).w,d0
		andi.b	#$70,d0
		beq.w	locret_10996
		move.b	#9,$20(a0)
		move.w	#$FFAB,d0
		jsr	Play_Sound_2.w
		addq.l	#4,sp
		move.b	#1,$3D(a0)
		move.w	#0,$3E(a0)
		cmpi.b	#$C,$2C(a0)
		blo.s	loc_10992
		move.b	#2,$20(a6)

loc_10992:
		bsr.w	Player_AnglePos

locret_10996:

		rts
; ---------------------------------------------------------------------------

loc_10998:
		move.b	(Ctrl_1_logical).w,d0
		btst	#1,d0
		bne.w	loc_10A38
		move.b	#7,$1E(a0)
		move.b	#3,$1F(a0)
		move.b	#2,$20(a0)
		addq.w	#4,$14(a0)
		move.b	#0,$3D(a0)
		moveq	#0,d0
		move.b	$3E(a0),d0
		add.w	d0,d0
		move.w	word_10A14(pc,d0.w),$1C(a0)
		move.w	$1C(a0),d0
		subi.w	#$800,d0
		add.w	d0,d0
		andi.w	#$1F00,d0
		neg.w	d0
		addi.w	#$2000,d0
		lea	(H_scroll_frame_offset).w,a1
		cmpa.w	#Player_1,a0
		beq.s	loc_109F0
		lea	(H_scroll_frame_offset_P2).w,a1

loc_109F0:
		move.w	d0,(a1)
		btst	#0,$2A(a0)
		beq.s	loc_109FE
		neg.w	$1C(a0)

loc_109FE:
		bset	#2,$2A(a0)
		move.b	#0,$20(a6)
		moveq	#-$4A,d0
		jsr	Play_Sound_2.w
		bra.s	loc_10A80
; ---------------------------------------------------------------------------
word_10A14:	dc.w $800
		dc.w $880
		dc.w $900
		dc.w $980
		dc.w $A00
		dc.w $A80
		dc.w $B00
		dc.w $B80
		dc.w $C00
		dc.w $B00
		dc.w $B80
		dc.w $C00
		dc.w $C80
		dc.w $D00
		dc.w $D80
		dc.w $E00
		dc.w $E80
		dc.w $F00
; ---------------------------------------------------------------------------

loc_10A38:
		tst.w	$3E(a0)
		beq.s	loc_10A50
		move.w	$3E(a0),d0
		lsr.w	#5,d0
		sub.w	d0,$3E(a0)
		bcc.s	loc_10A50
		move.w	#0,$3E(a0)

loc_10A50:

		move.b	(Ctrl_1_pressed_logical).w,d0
		andi.b	#$70,d0
		beq.w	loc_10A80
		move.w	#$900,$20(a0)
		move.w	#$FFAB,d0
		jsr	Play_Sound_2.w
		addi.w	#$200,$3E(a0)
		cmpi.w	#$800,$3E(a0)
		blo.s	loc_10A80
		move.w	#$800,$3E(a0)

loc_10A80:

		addq.l	#4,sp
		tst.w	(a5)
		beq.s	loc_10A8E
		bpl.s	loc_10A8C
		addq.w	#4,(a5)

loc_10A8C:
		subq.w	#2,(a5)

loc_10A8E:
		bra.w	Player_AnglePos
; ---------------------------------------------------------------------------

Obj_Sonic_FixPlat:
		lea	Player_2.w,a1		; get player 2
	CheckPlatStuff %11010111, %01010000
		move.l	#Obj_Sonic,(a0)		; use normal object

Obj_Sonic:
		; Load some addresses into registers
		; This is done to allow some subroutines to be
		; shared with Tails/Knuckles.
		lea	(Sonic_Knux_top_speed).w,a4
		lea	Distance_from_screen_top.w,a5
		lea	(Dust).w,a6

		tst.b	(Debug_mode_flag).w		; is debug cheat enabled?
		beq.s	Sonic_Normal			; if not, branch

		cmpa.w	#Player_1,a0
		bne.s	Sonic_NoDebug
		btst	#button_B,(Ctrl_1_pressed).w	; is button B pressed?
		bne.w	Sonic_SetDebug			; if so, branch
		bclr.b	#button_B,(Ctrl_2_Pressed).w		; MJ: clear player 2 button
		beq.s	Sonic_NoDebug				; MJ: if it wasn't pressed, branch
		move.l	#Obj_Tails,(Player_2).w			; MJ: enable tails
		move.l	#Obj_Tails_Tail,(Tails_tails).w		; MJ: enable tails' tails
		not.b	(SinglePlayer).w			; MJ: enable/disable single player mode

Sonic_NoDebug:
		tst.b	(Debug_On).w
		beq.s	Sonic_Normal
		jmp	Debug_Control
; loc_10ADE:
Sonic_Normal:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	Sonic_Index(pc,d0.w),d1
		jsr	Sonic_Index(pc,d1.w)		; MJ: changed to jsr

		tst.b	(SinglePlayer).w		; MJ: is single player mode on?
		beq.s	Sonic_NoSingle			; MJ: if not, branch
		lea	(Player_2).w,a1			; MJ: load tails RAM
		clr.l	(a1)				; MJ: disable tails
		move.l	x_pos(a0),x_pos(a1)		; MJ: move tails to Sonic
		move.l	y_pos(a0),y_pos(a1)		; MJ: ''

		lea	(Tails_tails).w,a1		; MJ: load tails's tails RAM
		clr.l	(a1)				; MJ: disable tails
		move.l	x_pos(a0),x_pos(a1)		; MJ: move tails to Sonic
		move.l	y_pos(a0),y_pos(a1)		; MJ: ''

Sonic_NoSingle:
		rts					; MJ: return

; ---------------------------------------------------------------------------
; off_10AEC:
Sonic_Index:
		dc.w Sonic_Init-Sonic_Index	;  0
		dc.w Sonic_Control-Sonic_Index	;  2
		dc.w loc_122BE-Sonic_Index	;  4
		dc.w loc_12390-Sonic_Index	;  6
		dc.w loc_1257C-Sonic_Index	;  8
		dc.w loc_12590-Sonic_Index	; $A
		dc.w loc_125AC-Sonic_Index	; $C
; ---------------------------------------------------------------------------
; loc_10AFA:
Sonic_Init:	; Routine 0
		addq.b	#2,routine(a0)		; => Obj01_Control
		move.b	#$13,y_radius(a0)	; this sets Sonic's collision height (2*pixels)
		move.b	#9,x_radius(a0)
		move.b	#$13,default_y_radius(a0)
		move.b	#9,default_x_radius(a0)
		move.b	#$18,width_pixels(a0)
		move.b	#$18,height_pixels(a0)
		move.l	#Map_Sonic,mappings(a0)
		move.w	#prio(2),priority(a0)
		move.b	#$84,render_flags(a0)
		move.b	#0,character_id(a0)	; NAT: Do not update! Very serious we dont
	;	move.w	#$600,Sonic_Knux_top_speed-Sonic_Knux_top_speed(a4)
	;	move.w	#$C,Sonic_Knux_acceleration-Sonic_Knux_top_speed(a4)
	;	move.w	#$80,Sonic_Knux_deceleration-Sonic_Knux_top_speed(a4)

		; only happens when not starting at a checkpoint:
		or.w	#make_art_tile(ArtTile_ArtUnc_Sonic,0,0),art_tile(a0)
		move.w	SavedTileP1.w,$A(a0)	; load saved tile to art address
		move.b	#$C,top_solid_bit(a0)
		move.b	#$D,lrb_solid_bit(a0)
		; only happens when not starting at a Special Stage ring:
	;	move.w	x_pos(a0),(Saved_X_pos).w
	;	move.w	y_pos(a0),(Saved_Y_pos).w
	;	move.w	art_tile(a0),(Saved_art_tile).w
	;	move.w	top_solid_bit(a0),(Saved_solid_bits).w
; loc_10B84:
Sonic_Init_Continued:
		move.b	#0,flips_remaining(a0)
		move.b	#4,flip_speed(a0)
		move.b	#0,(Super_Sonic_Knux_flag).w
		move.b	#$1E,air_left(a0)
		subi.w	#$20,x_pos(a0)
		addi.w	#4,y_pos(a0)
		bsr.w	Reset_Player_Position_Array
		addi.w	#$20,x_pos(a0)
		subi.w	#4,y_pos(a0)
		rts

; ---------------------------------------------------------------------------
; Normal state for Sonic
; ---------------------------------------------------------------------------
; loc_10BBA:
Sonic_Control:	; Routine 2
;		tst.b	4(a0)		; TEMP!!!
;		bmi.s	.ok
;		jsr	Kill_Character

.ok		tst.b	(Debug_mode_flag).w		; is debug cheat enabled?
		beq.s	loc_10BF0			; if not, branch
		bclr	#button_A,(Ctrl_1_pressed).w	; is button A pressed?
		beq.s	loc_10BCE			; if not, branch
		eori.b	#1,(Reverse_gravity_flag).w	; toggle reverse gravity
loc_10BCE:
	bra.s	loc_10BF0
		btst	#button_B,(Ctrl_1_pressed).w	; is button B pressed?
		beq.s	loc_10BF0			; if not, branch

Sonic_SetDebug:
		st.b	(Debug_On).w		; change Sonic into a ring/item
		clr.b	(Ctrl_1_locked).w		; unlock control
	;	btst	#button_C,(Ctrl_1_held).w	; was button C held before pressing B?
	;	beq.s	locret_10BEE			; if not, branch
	;	move.b	#2,(Debug_On).w	; enter animation cycle mode

locret_10BEE:
		rts
; ---------------------------------------------------------------------------

loc_10BF0:
		tst.b	(Ctrl_1_locked).w		; are controls locked?
		bne.s	loc_10BFC			; if yes, branch
		move.w	(Ctrl_1).w,(Ctrl_1_logical).w	; copy new held buttons, to enable joypad control
loc_10BFC:
		btst	#0,object_control(a0)	; is Sonic interacting with another object that holds him in place or controls his movement somehow?
		beq.s	loc_10C0C		; if yes, branch to skip Sonic's control
		move.b	#0,double_jump_flag(a0)	; enable double jump
		bra.s	loc_10C26
; ---------------------------------------------------------------------------

loc_10C0C:
		movem.l	a4-a6,-(sp)
		moveq	#0,d0
		move.b	status(a0),d0
		andi.w	#6,d0
		move.w	Sonic_Modes(pc,d0.w),d1
		jsr	Sonic_Modes(pc,d1.w)	; run Sonic's movement control code
		movem.l	(sp)+,a4-a6
loc_10C26:
		cmpi.w	#-$100,(Camera_min_Y_pos).w	; is vertical wrapping enabled?
		bne.s	loc_10C36			; if not, branch
		move.w	(Screen_Y_wrap_value).w,d0
		and.w	d0,y_pos(a0)			; perform wrapping of Sonic's y position
loc_10C36:
		bsr.s	Sonic_Display
		bsr.w	SonicKnux_SuperHyper
		bsr.w	Sonic_RecordPos
		bsr.w	Sonic_Water
		move.b	(Primary_Angle).w,next_tilt(a0)
		move.b	(Secondary_Angle).w,tilt(a0)
		tst.b	(WindTunnel_flag).w
		beq.s	loc_10C62
		tst.b	anim(a0)
		bne.s	loc_10C62
		move.b	prev_anim(a0),anim(a0)
loc_10C62:
		btst	#1,object_control(a0)
		bne.s	loc_10C7E
		bsr.w	Animate_Sonic
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_10C7A
		eori.b	#2,render_flags(a0)

loc_10C7A:
		bsr.w	Sonic_Load_PLC

loc_10C7E:
		move.b	object_control(a0),d0
		andi.b	#$A0,d0
		bne.s	locret_10C8E
		jmp	(TouchResponse).l

locret_10C8E:
		rts
; ---------------------------------------------------------------------------
; secondary states under state Sonic_Control
; off_10C90:
Sonic_Modes:
		dc.w Sonic_MdNormal-Sonic_Modes
		dc.w Sonic_MdAir-Sonic_Modes
		dc.w Sonic_MdRoll-Sonic_Modes
		dc.w Sonic_MdJump-Sonic_Modes

; =============== S U B R O U T I N E =======================================

; sub_10C98:
Sonic_Display:
		tst.b	EnableInterlace.w		; NAT: check if interlace mode is enabled
		beq.s	.nointerlace			; if not, skip
		btst	#0,Level_frame_counter+1.w	; check if even frame
		bne.s	Sonic_ChkInvin			; if not, do not display

.nointerlace	move.b	invulnerability_timer(a0),d0
		beq.s	loc_10CA6
		subq.b	#1,invulnerability_timer(a0)
		lsr.b	#3,d0
		bcc.s	Sonic_ChkInvin

loc_10CA6:
		jsr	Draw_Sprite.w
; loc_10CAC:
Sonic_ChkInvin:	; Checks if invincibility has expired and disables it if it has.
		btst	#Status_Invincible,status_secondary(a0)
		beq.s	Sonic_ChkShoes
		tst.b	invincibility_timer(a0)
		beq.s	Sonic_ChkShoes	; If there wasn't any time left, that means we're in Super/Hyper mode
		move.b	(Level_frame_counter+1).w,d0
		andi.b	#7,d0
		bne.s	Sonic_ChkShoes
		subq.b	#1,invincibility_timer(a0)	; reduce invincibility_timer only on every 8th frame
		bne.s	Sonic_ChkShoes			; if time is still left, branch
	;	tst.b	(Boss_flag).w		; Don't change music if in a boss fight
	;	bne.s	Sonic_RmvInvin
	;	cmpi.b	#$C,air_left(a0)	; Don't change music if drowning
	;	blo.s	Sonic_RmvInvin
	;	move.w	(Level_music).w,d0
	;	jsr	Play_Sound.w		; stop playing invincibility theme and resume normal level music
		jsr	CheckRightMusicTrack.w
; loc_10CE2:
Sonic_RmvInvin:
		bclr	#Status_Invincible,status_secondary(a0)
; loc_10CE8:
Sonic_ChkShoes:	; Checks if Speed Shoes have expired and disables them if they have.
		btst	#Status_SpeedShoes,status_secondary(a0)	; does Sonic have speed shoes?
		beq.s	Sonic_ExitChk				; if so, branch
		tst.b	speed_shoes_timer(a0)
		beq.s	Sonic_ExitChk
		move.b	(Level_frame_counter+1).w,d0
		andi.b	#7,d0
		bne.s	Sonic_ExitChk
		subq.b	#1,speed_shoes_timer(a0)	; reduce speed_shoes_timer only on every 8th frame
		bne.s	Sonic_ExitChk
		move.w	#$600,(a4)	; set Sonic_Knux_top_speed
		move.w	#$C,2(a4)	; set Sonic_Knux_acceleration
		move.w	#$80,4(a4)	; set Sonic_Knux_deceleration
		tst.b	(Super_Sonic_Knux_flag).w
		beq.s	loc_10D32	; if Super/Hyper, set different values
		move.w	#$A00,(a4)	; set Sonic_Knux_top_speed
		move.w	#$30,2(a4)	; set Sonic_Knux_acceleration
		move.w	#$100,4(a4)	; set Sonic_Knux_deceleration
loc_10D32:
		bclr	#Status_SpeedShoes,status_secondary(a0)
		tst.b	speed_shoes_timer+$4A(a0)
		bne.s	Sonic_ExitChk
		moveq	#0,d0		; Slow down tempo
		jmp	Change_Music_Tempo.w

Sonic_ExitChk:
		rts

; ---------------------------------------------------------------------------
; Subroutine to record Sonic's previous positions for invincibility stars
; and input/status flags for Tails' AI to follow
; ---------------------------------------------------------------------------

; =============== S U B R O U T I N E =======================================

Tails_RecordPos:
		move.w	(Pos_table_index_P2).w,d0
		lea	(Pos_table_P2).w,a1
		addq.b	#4,(Pos_table_index_P2+1).w	; increment index as the post-increments did a1
		bra.s	Sonic_RecordPos.c

Sonic_RecordPos:
		move.w	(Pos_table_index).w,d0
		lea	(Pos_table).w,a1
		addq.b	#4,(Pos_table_index+1).w	; increment index as the post-increments did a1

.c		lea	(a1,d0.w),a1
		move.w	x_pos(a0),(a1)+			; write location to pos_table
		move.w	y_pos(a0),(a1)+
;		lea	(Stat_table).w,a1
;		lea	(a1,d0.w),a1
;		move.w	(Ctrl_1_logical).w,(a1)+
;		move.b	status(a0),(a1)+
;		move.b	art_tile(a0),(a1)+

locret_10D9E:
		rts
; ---------------------------------------------------------------------------

Reset_Player_Position_Array:
Reset_Player_Position_ArrayP2:
		lea	Pos_table_index.w,a2		; NAT: Fix this code to work for Tails
		lea	Pos_table.w,a1
		cmpa.w	#Player_1,a0			; is object player 1?
		beq.s	.gottbl				; if yes, branch
		lea	Pos_table_index_P2.w,a2
		lea	Pos_table_P2.w,a1

.gottbl		clr.w	(a2)
		moveq	#$3F,d0

-		move.w	x_pos(a0),(a1)+			; write location to pos_table
		move.w	y_pos(a0),(a1)+
		dbf	d0,-
		rts
; ---------------------------------------------------------------------------
; Subroutine for Sonic when he's underwater
; ---------------------------------------------------------------------------

Sonic_Water:
		tst.b	(Water_flag).w	; does level have water?
		bne.s	Sonic_InWater	; if yes, branch

locret_10E2C:
		rts
; ---------------------------------------------------------------------------
; loc_10E2E:
Sonic_InWater:
		move.w	(Water_level).w,d0
		cmp.w	y_pos(a0),d0	; is Sonic above the water?
		bge.w	Sonic_OutWater	; if yes, branch

		tst.w	Breathing_bubbles+$40.w		; NAT: Check if spawned
		bne.s	.yes				; if yes, branch
		move.l	#Obj_Air_CountDown,Breathing_bubbles.w; load Sonic's breathing bubbles
		move.b	#$81,Breathing_bubbles+subtype.w
		move.l	a0,Breathing_bubbles+$40.w

.yes		bset	#Status_Underwater,status(a0)	; set underwater flag
		bne.s	locret_10E2C	; if already underwater, branch

		addq.b	#1,(Water_entered_counter).w

		movea.l	a0,a1
		bsr.w	Player_ResetAirTimer
		move.l	#Obj_Air_CountDown,(Breathing_bubbles).w	; load Sonic's breathing bubbles
		move.b	#$81,(Breathing_bubbles+subtype).w
		move.l	a0,(Breathing_bubbles+$40).w
		move.w	#$300,Sonic_Knux_top_speed-Sonic_Knux_top_speed(a4)
		move.w	#6,Sonic_Knux_acceleration-Sonic_Knux_top_speed(a4)
		move.w	#$40,Sonic_Knux_deceleration-Sonic_Knux_top_speed(a4)
		tst.b	(Super_Sonic_Knux_flag).w
		beq.s	loc_10E82	; if Super/Hyper, set different values
		move.w	#$500,Sonic_Knux_top_speed-Sonic_Knux_top_speed(a4)
		move.w	#$18,Sonic_Knux_acceleration-Sonic_Knux_top_speed(a4)
		move.w	#$80,Sonic_Knux_deceleration-Sonic_Knux_top_speed(a4)
loc_10E82:
		btst	#2,$2B(a1)			; check for speed shoes
		beq.s	.noshoes			; if no, branch
		move.w	#$500,(a4)
		move.w	#$A,Sonic_Knux_acceleration-Sonic_Knux_top_speed(a4)
		move.w	#$60,Sonic_Knux_deceleration-Sonic_Knux_top_speed(a4)

.noshoes	tst.b	object_control(a0)
		bne.w	locret_10E2C
		asr	x_vel(a0)
		asr	y_vel(a0)	; memory operands can only be shifted one bit at a time
		asr	y_vel(a0)
		beq.w	locret_10E2C
		move.w	#$100,anim(a6)	; splash animation, write 1 to anim and clear prev_anim
		move.w	#$39,d0		; splash sound
		jmp	Play_Sound_2.w
; ---------------------------------------------------------------------------
; loc_10EA6:
Sonic_OutWater:
		bclr	#Status_Underwater,status(a0)	; unset underwater flag
		beq.w	locret_10E2C			; if already above water, branch
		addq.b	#1,(Water_entered_counter).w

		movea.l	a0,a1
		bsr.w	Player_ResetAirTimer
		move.w	#$600,Sonic_Knux_top_speed-Sonic_Knux_top_speed(a4)
		move.w	#$C,Sonic_Knux_acceleration-Sonic_Knux_top_speed(a4)
		move.w	#$80,Sonic_Knux_deceleration-Sonic_Knux_top_speed(a4)
		tst.b	(Super_Sonic_Knux_flag).w
		beq.s	loc_10EE0	; if Super/Hyper, set different values
		move.w	#$A00,Sonic_Knux_top_speed-Sonic_Knux_top_speed(a4)
		move.w	#$30,Sonic_Knux_acceleration-Sonic_Knux_top_speed(a4)
		move.w	#$100,Sonic_Knux_deceleration-Sonic_Knux_top_speed(a4)
loc_10EE0:
		btst	#2,$2B(a0)
		beq.s	.noshoes
		move.w	#$C00,Sonic_Knux_top_speed-Sonic_Knux_top_speed(a4)
		move.w	#$18,Sonic_Knux_acceleration-Sonic_Knux_top_speed(a4)
		move.w	#$80,Sonic_Knux_deceleration-Sonic_Knux_top_speed(a4)

.noshoes	cmpi.b	#4,routine(a0)	; is Sonic falling back from getting hurt?
		beq.s	loc_10EFC	; if yes, branch
		tst.b	object_control(a0)
		bne.s	loc_10EFC
		move.w	y_vel(a0),d0
		cmpi.w	#-$400,d0
		blt.s	loc_10EFC
		asl	y_vel(a0)
loc_10EFC:
		cmpi.b	#$1C,anim(a0)	; is Sonic in his 'blank' animation
		beq.w	locret_10E2C	; if so, branch
		tst.w	y_vel(a0)
		beq.w	locret_10E2C
		move.w	#$100,anim(a6)	; splash animation, write 1 to anim and clear prev_anim
		cmpi.w	#-$1000,y_vel(a0)
		bgt.s	loc_10F22
		move.w	#-$1000,y_vel(a0)	; limit upward y velocity exiting the water
loc_10F22:
		move.w	#$39,d0		; splash sound
		jmp	Play_Sound_2.w
; End of function Sonic_Water

; ---------------------------------------------------------------------------
; ---------------------------------------------------------------------------
; Start of subroutine Obj01_MdNormal
; Called if Sonic is neither airborne nor rolling this frame
; ---------------------------------------------------------------------------
; Sonic_Stand_Path:
Sonic_MdNormal:
		bsr.w	SonicKnux_Spindash
		bsr.w	Sonic_Jump
		bsr.w	Player_SlopeResist
		bsr.w	Sonic_Move
		bsr.w	SonicKnux_Roll
		bsr.w	Player_LevelBound
		jsr	MoveSprite_TestGravity2.w
		bsr.w	Call_Player_AnglePos
		bsr.w	Player_SlopeRepel
		tst.b	(BG_Collision).w
		beq.s	locret_10F82
		jsr	sub_F846.w
		tst.w	d1
		bmi.w	Kill_Character
		movem.l	a4-a6,-(sp)
		jsr	CheckLeftWallDist.w
		tst.w	d1
		bpl.s	loc_10F72
		sub.w	d1,x_pos(a0)
loc_10F72:
		jsr	CheckRightWallDist.w
		tst.w	d1
		bpl.s	loc_10F7E
		add.w	d1,x_pos(a0)
loc_10F7E:
		movem.l	(sp)+,a4-a6

locret_10F82:
		rts

; =============== S U B R O U T I N E =======================================


Call_Player_AnglePos:
		tst.b	(Reverse_gravity_flag).w
		beq.w	Player_AnglePos
		move.b	angle(a0),d0
		addi.b	#$40,d0
		neg.b	d0
		subi.b	#$40,d0
		move.b	d0,angle(a0)
		bsr.w	Player_AnglePos
		move.b	angle(a0),d0
		addi.b	#$40,d0
		neg.b	d0
		subi.b	#$40,d0
		move.b	d0,angle(a0)
		rts
; End of function Call_Player_AnglePos

; ---------------------------------------------------------------------------
; Start of subroutine Sonic_MdAir
; Called if Sonic is airborne, but not in a ball (thus, probably not jumping)
; Sonic_Stand_Freespace:
Sonic_MdAir:
		bsr.w	Sonic_JumpHeight
		bsr.w	Sonic_ChgJumpDir
		bsr.w	Player_LevelBound
		jsr	MoveSprite_TestGravity.w
		btst	#Status_Underwater,status(a0)	; is Sonic underwater?
		beq.s	loc_10FD6			; if not, branch
		subi.w	#$28,y_vel(a0)			; reduce gravity by $28 ($38-$28=$10)
loc_10FD6:
		bsr.w	Player_JumpAngle
		bsr.w	SonicKnux_DoLevelCollision
		rts
; ---------------------------------------------------------------------------
; Start of subroutine Sonic_MdRoll
; Called if Sonic is in a ball, but not airborne (thus, probably rolling)
; Sonic_Spin_Path:
Sonic_MdRoll:
		tst.b	spin_dash_flag(a0)
		bne.s	loc_10FEA
		bsr.w	Sonic_Jump
loc_10FEA:
		bsr.w	Player_RollRepel
		bsr.w	Sonic_RollSpeed
		bsr.w	Player_LevelBound
		jsr	MoveSprite_TestGravity2.w
		bsr.w	Call_Player_AnglePos
		bsr.w	Player_SlopeRepel
		tst.b	(BG_Collision).w
		beq.s	locret_11034
		jsr	sub_F846.w
		tst.w	d1
		bmi.w	Kill_Character
		movem.l	a4-a6,-(sp)
		jsr	CheckLeftWallDist.w
		tst.w	d1
		bpl.s	loc_11024
		sub.w	d1,x_pos(a0)
loc_11024:
		jsr	CheckRightWallDist.w
		tst.w	d1
		bpl.s	loc_11030
		add.w	d1,x_pos(a0)
loc_11030:
		movem.l	(sp)+,a4-a6

locret_11034:
		rts
; ---------------------------------------------------------------------------
; Start of subroutine Sonic_MdJump
; Called if Sonic is in a ball and airborne (he could be jumping but not necessarily)
; Notes: This is identical to Sonic_MdAir, at least at this outer level.
;        Why they gave it a separate copy of the code, I don't know.
; Sonic_Spin_Freespace:
Sonic_MdJump:
		bsr.w	Sonic_JumpHeight
		bsr.w	Sonic_ChgJumpDir
		bsr.w	Player_LevelBound
		jsr	MoveSprite_TestGravity.w
		btst	#Status_Underwater,status(a0)	; is Sonic underwater?
		beq.s	loc_11056			; if not, branch
		subi.w	#$28,y_vel(a0)			; reduce gravity by $28 ($38-$28=$10)
loc_11056:
		bsr.w	Player_JumpAngle
		bsr.w	SonicKnux_DoLevelCollision
		rts

; ---------------------------------------------------------------------------
; Subroutine to make Sonic walk/run
; ---------------------------------------------------------------------------

; =============== S U B R O U T I N E =======================================

; Sonic_InputAcceleration_Path:
Sonic_Move:
		move.w	(a4),d6		; set Sonic_Knux_top_speed
		move.w	2(a4),d5	; set Sonic_Knux_acceleration
		move.w	4(a4),d4	; set Sonic_Knux_deceleration
		tst.b	status_secondary(a0)	; is bit 7 set? (Infinite inertia)
		bmi.w	loc_11332		; if so, branch
		tst.w	move_lock(a0)
		bne.w	loc_112EA
		btst	#button_left,(Ctrl_1_logical).w	; is left being pressed?
		beq.s	Sonic_NotLeft			; if not, branch
		bsr.w	sub_113F6
; loc_11086:
Sonic_NotLeft:
		btst	#button_right,(Ctrl_1_logical).w	; is right being pressed?
		beq.s	Sonic_NotRight				; if not, branch
		bsr.w	sub_11482
; loc_11092:
Sonic_NotRight:
		move.b	angle(a0),d0
		addi.b	#$20,d0
		andi.b	#$C0,d0		; is Sonic on a slope?
		bne.w	loc_112EA	; if yes, branch
		tst.w	ground_vel(a0)	; is Sonic moving?
		bne.w	loc_112EA	; if yes, branch
		bclr	#Status_Push,status(a0)
		move.b	#5,anim(a0)	; use standing animation
		btst	#Status_OnObj,status(a0)
		beq.w	Sonic_Balance
		movea.w	interact(a0),a1	; load interacting object's RAM space
		tst.b	status(a1)	; is status bit 7 set? (unused?)
		bmi.w	loc_11276	; if so, branch

		; Calculations to determine where on the object Sonic is, and make him balance accordingly
		moveq	#0,d1			; Clear d1
		move.b	width_pixels(a1),d1	; Load interacting object's width into d1
		move.w	d1,d2			; Move to d2 for seperate calculations
		add.w	d2,d2			; Double object width, converting it to X pos' units of measurement
		subq.w	#2,d2			; Subtract 2: This is the margin for 'on edge'
		add.w	x_pos(a0),d1		; Add Sonic's X position to object width
		sub.w	x_pos(a1),d1		; Subtract object's X position from width+Sonic's X pos, giving you Sonic's distance from left edge of object
		tst.b	(Super_Sonic_Knux_flag).w	; is Sonic Super/Hyper?
		bne.w	SuperSonic_Balance		; if so, branch
		cmpi.w	#2,d1		; is Sonic within two units of object's left edge?
		blt.s	Sonic_BalanceOnObjLeft	; if so, branch
		cmp.w	d2,d1
		bge.s	Sonic_BalanceOnObjRight	; if Sonic is within two units of object's right edge, branch (Realistically, it checks this, and BEYOND the right edge of the object)
		bra.w	loc_11276	; if Sonic is more than 2 units from both edges, branch
; ---------------------------------------------------------------------------
; loc_110F6:
SuperSonic_Balance:
		cmpi.w	#2,d1		; is Sonic within two units of object's left edge?
		blt.w	loc_11268	; if so, branch
		cmp.w	d2,d1
		bge.w	loc_11258	; if Sonic is within two units of object's right edge, branch (Realistically, it checks this, and BEYOND the right edge of the object)
		bra.w	loc_11276	; if Sonic is more than 2 units from both edges, branch
; ---------------------------------------------------------------------------
; balancing checks for when you're on the right edge of an object
; loc_11108:
Sonic_BalanceOnObjRight:
		btst	#Status_Facing,status(a0)	; is Sonic facing right?
		bne.s	loc_11128			; if so, branch
		move.b	#6,anim(a0)	; Balance animation 1
		addq.w	#6,d2		; extend balance range
		cmp.w	d2,d1		; is Sonic within (two units before and) four units past the right edge?
		blt.w	loc_112EA	; if so branch
		move.b	#$C,anim(a0)	; if REALLY close to the edge, use different animation (Balance animation 2)
		bra.w	loc_112EA
loc_11128:	; +
		; Somewhat dummied out/redundant code from Sonic 2
		; Originally, Sonic displayed different animations for each direction faced
		; But now, Sonic uses only the one set of animations no matter what, making the check pointless, and the code redundant
		bclr	#Status_Facing,status(a0)
		move.b	#6,anim(a0)	; Balance animation 1
		addq.w	#6,d2		; extend balance range
		cmp.w	d2,d1		; is Sonic within (two units before and) four units past the right edge?
		blt.w	loc_112EA	; if so branch
		move.b	#$C,anim(a0)	; if REALLY close to the edge, use different animation (Balance animation 2)
		bra.w	loc_112EA
; ---------------------------------------------------------------------------
; loc_11146:
Sonic_BalanceOnObjLeft:
		btst	#Status_Facing,status(a0)	; is Sonic facing right?
		beq.s	loc_11166
		move.b	#6,anim(a0)	; Balance animation 1
		cmpi.w	#-4,d1		; is Sonic within (two units before and) four units past the left edge?
		bge.w	loc_112EA	; if so branch (instruction signed to match)
		move.b	#$C,anim(a0)	; if REALLY close to the edge, use different animation (Balance animation 2)
		bra.w	loc_112EA
loc_11166:	; +
		; Somewhat dummied out/redundant code from Sonic 2
		; Originally, Sonic displayed different animations for each direction faced
		; But now, Sonic uses only the one set of animations no matter what, making the check pointless, and the code redundant
		bset	#Status_Facing,status(a0)	; is Sonic facing right?
		move.b	#6,anim(a0)	; Balance animation 1
		cmpi.w	#-4,d1		; is Sonic within (two units before and) four units past the left edge?
		bge.w	loc_112EA	; if so branch (instruction signed to match)
		move.b	#$C,anim(a0)	; if REALLY close to the edge, use different animation (Balance animation 2)
		bra.w	loc_112EA
; ---------------------------------------------------------------------------
; balancing checks for when you're on the edge of part of the level
; loc_11184:
Sonic_Balance:
		move.w	x_pos(a0),d3
		bsr.w	ChooseChkFloorEdge
		cmpi.w	#$C,d1
		blt.w	loc_11276
		tst.b	(Super_Sonic_Knux_flag).w	; is Sonic Super/Hyper?
		bne.w	loc_11250			; if so, branch
		cmpi.b	#3,next_tilt(a0)
		bne.s	loc_111F6
		btst	#Status_Facing,status(a0)
		bne.s	loc_111CE
		move.b	#6,anim(a0)
		move.w	x_pos(a0),d3
		subq.w	#6,d3
		bsr.w	ChooseChkFloorEdge
		cmpi.w	#$C,d1
		blt.w	loc_112EA
		move.b	#$C,anim(a0)
		bra.w	loc_112EA
		; on right edge but facing left:
loc_111CE:	; +
		; Somewhat dummied out/redundant code from Sonic 2
		; Originally, Sonic displayed different animations for each direction faced
		; But now, Sonic uses only the one set of animations no matter what, making the check pointless, and the code redundant
		bclr	#Status_Facing,status(a0)
		move.b	#6,anim(a0)
		move.w	x_pos(a0),d3
		subq.w	#6,d3
		bsr.w	ChooseChkFloorEdge
		cmpi.w	#$C,d1
		blt.w	loc_112EA
		move.b	#$C,anim(a0)
		bra.w	loc_112EA
; ---------------------------------------------------------------------------

loc_111F6:
		cmpi.b	#3,$3B(a0)
		bne.s	loc_11276
		btst	#Status_Facing,status(a0)
		beq.s	loc_11228
		move.b	#6,anim(a0)
		move.w	$10(a0),d3
		addq.w	#6,d3
		bsr.w	ChooseChkFloorEdge
		cmpi.w	#$C,d1
		blt.w	loc_112EA
		move.b	#$C,anim(a0)
		bra.w	loc_112EA
; ---------------------------------------------------------------------------

loc_11228:
		bset	#0,$2A(a0)
		move.b	#6,anim(a0)
		move.w	$10(a0),d3
		addq.w	#6,d3
		bsr.w	ChooseChkFloorEdge
		cmpi.w	#$C,d1
		blt.w	loc_112EA
		move.b	#$C,anim(a0)
		bra.w	loc_112EA
; ---------------------------------------------------------------------------

loc_11250:
		cmpi.b	#3,$3A(a0)
		bne.s	loc_11260

loc_11258:
		bclr	#0,$2A(a0)
		bra.s	loc_1126E
; ---------------------------------------------------------------------------

loc_11260:
		cmpi.b	#3,$3B(a0)
		bne.s	loc_11276

loc_11268:
		bset	#0,$2A(a0)

loc_1126E:
		move.b	#6,$20(a0)
		bra.s	loc_112EA
; ---------------------------------------------------------------------------

loc_11276:
					; Sonic_Move+92j ...
		btst	#1,(Ctrl_1_logical).w
		beq.s	loc_112B0
		move.b	#8,$20(a0)
		addq.b	#1,$39(a0)
		cmpi.b	#60,$39(a0)
		blo.s	loc_112F0
		move.b	#60,$39(a0)

		tst.b	(Reverse_gravity_flag).w
		bne.s	loc_112A6
		cmpi.w	#-$58,(a5)
		beq.s	loc_112FC
		subq.w	#2,(a5)
		bra.s	loc_112FC
; ---------------------------------------------------------------------------

loc_112A6:
		cmpi.w	#$58,(a5)
		beq.s	loc_112FC
		addq.w	#2,(a5)
		bra.s	loc_112FC
; ---------------------------------------------------------------------------

loc_112B0:
		btst	#0,(Ctrl_1_logical).w
		beq.s	loc_112EA
		move.b	#7,$20(a0)
		addq.b	#1,$39(a0)
		cmpi.b	#60,$39(a0)
		blo.s	loc_112F0
		move.b	#60,$39(a0)

		tst.b	(Reverse_gravity_flag).w
		bne.s	loc_112E0
		cmpi.w	#$58,(a5)
		beq.s	loc_112FC
		addq.w	#2,(a5)
		bra.s	loc_112FC
; ---------------------------------------------------------------------------

loc_112E0:
		cmpi.w	#-$58,(a5)
		beq.s	loc_112FC
		subq.w	#2,(a5)
		bra.s	loc_112FC
; ---------------------------------------------------------------------------

loc_112EA:
					; Sonic_Move+3Ej ...
		clr.b	$39(a0)

loc_112F0:
					; Sonic_Move+268j
		tst.w	(a5)
		beq.s	loc_112FC
		bpl.s	loc_112FA
		addq.w	#4,(a5)

loc_112FA:
		subq.w	#2,(a5)

loc_112FC:
					; Sonic_Move+244j ...
		tst.b	(Super_Sonic_Knux_flag).w
		beq.s	loc_11306
		move.w	#$C,d5

loc_11306:
		move.b	(Ctrl_1_logical).w,d0
		andi.b	#$C,d0
		bne.s	loc_11332
		move.w	$1C(a0),d0
		beq.s	loc_11332
		bmi.s	loc_11326
		sub.w	d5,d0
		bcc.s	loc_11320
		move.w	#0,d0

loc_11320:
		move.w	d0,$1C(a0)
		bra.s	loc_11332
; ---------------------------------------------------------------------------

loc_11326:
		add.w	d5,d0
		bcc.s	loc_1132E
		move.w	#0,d0

loc_1132E:
		move.w	d0,$1C(a0)

loc_11332:
					; Sonic_Move+2AEj ...
		move.b	$26(a0),d0
		jsr	GetSineCosine.w
		muls.w	$1C(a0),d1
		asr.l	#8,d1
		move.w	d1,$18(a0)
		muls.w	$1C(a0),d0
		asr.l	#8,d0
		move.w	d0,$1A(a0)

loc_11350:
		btst	#6,$2E(a0)
		bne.w	locret_113F4
		move.b	$26(a0),d0
		andi.b	#$3F,d0
		beq.s	loc_11370
		move.b	$26(a0),d0
		addi.b	#$40,d0
		bmi.w	locret_113F4

loc_11370:
		move.b	#$40,d1
		tst.w	$1C(a0)
		beq.s	locret_113F4
		bmi.s	loc_1137E
		neg.w	d1

loc_1137E:
		move.b	$26(a0),d0
		add.b	d1,d0
		move.w	d0,-(sp)
		jsr	sub_F61C.w
		move.w	(sp)+,d0
		tst.w	d1
		bpl.s	locret_113F4
		asl.w	#8,d1
		cmpi.b	#8,(Current_zone).w
		bne.s	loc_113A0
		tst.b	d0
		bpl.s	loc_113A0
		subq.b	#1,d0

loc_113A0:
					; Sonic_Move+33Cj
		addi.b	#$20,d0
		andi.b	#$C0,d0
		beq.s	loc_113F0
		cmpi.b	#$40,d0
		beq.s	loc_113D6
		cmpi.b	#$80,d0
		beq.s	loc_113D0
		add.w	d1,$18(a0)
		move.w	#0,$1C(a0)
		btst	#0,$2A(a0)
		bne.s	locret_113CE
		bset	#5,$2A(a0)

locret_113CE:
					; Sonic_Move+386j
		rts
; ---------------------------------------------------------------------------

loc_113D0:
		sub.w	d1,$1A(a0)
		rts
; ---------------------------------------------------------------------------

loc_113D6:
		sub.w	d1,$18(a0)
		move.w	#0,$1C(a0)
		btst	#0,$2A(a0)
		beq.s	locret_113CE
		bset	#5,$2A(a0)
		rts
; ---------------------------------------------------------------------------

loc_113F0:
		add.w	d1,$1A(a0)

locret_113F4:
					; Sonic_Move+30Cj ...
		rts
; End of function Sonic_Move


; =============== S U B R O U T I N E =======================================


sub_113F6:
		move.w	$1C(a0),d0
		beq.s	loc_113FE
		bpl.s	loc_11430

loc_113FE:
		bset	#0,$2A(a0)
		bne.s	loc_11412
		bclr	#5,$2A(a0)
		move.b	#1,$21(a0)

loc_11412:
		sub.w	d5,d0
		move.w	d6,d1
		neg.w	d1
		cmp.w	d1,d0
		bgt.s	loc_11424
		add.w	d5,d0
		cmp.w	d1,d0
		ble.s	loc_11424
		move.w	d1,d0

loc_11424:

		move.w	d0,$1C(a0)
		move.b	#0,$20(a0)
		rts
; ---------------------------------------------------------------------------

loc_11430:
		sub.w	d4,d0
		bcc.s	loc_11438
		move.w	#-$80,d0

loc_11438:
		move.w	d0,$1C(a0)
		move.b	$26(a0),d0
		addi.b	#$20,d0
		andi.b	#$C0,d0
		bne.s	locret_11480
		cmpi.w	#$400,d0
		blt.s	locret_11480
		tst.b	$2D(a0)
		bmi.s	locret_11480
		move.w	#$36,d0
		jsr	Play_Sound_2.w
		move.b	#$D,$20(a0)
		bclr	#0,$2A(a0)
		cmpi.b	#$C,$2C(a0)
		blo.s	locret_11480
		move.b	#6,5(a6)
		move.b	#$15,$22(a6)

locret_11480:

		rts
; End of function sub_113F6


; =============== S U B R O U T I N E =======================================


sub_11482:
		move.w	$1C(a0),d0
		bmi.s	loc_114B6
		bclr	#0,$2A(a0)
		beq.s	loc_1149C
		bclr	#5,$2A(a0)
		move.b	#1,$21(a0)

loc_1149C:
		add.w	d5,d0
		cmp.w	d6,d0
		blt.s	loc_114AA
		sub.w	d5,d0
		cmp.w	d6,d0
		bge.s	loc_114AA
		move.w	d6,d0

loc_114AA:

		move.w	d0,$1C(a0)
		move.b	#0,$20(a0)
		rts
; ---------------------------------------------------------------------------

loc_114B6:
		add.w	d4,d0
		bcc.s	loc_114BE
		move.w	#$80,d0

loc_114BE:
		move.w	d0,$1C(a0)
		move.b	$26(a0),d0
		addi.b	#$20,d0
		andi.b	#$C0,d0
		bne.s	locret_11506
		cmpi.w	#-$400,d0
		bgt.s	locret_11506
		tst.b	$2D(a0)
		bmi.s	locret_11506
		move.w	#$36,d0
		jsr	Play_Sound_2.w
		move.b	#$D,$20(a0)
		bset	#0,$2A(a0)
		cmpi.b	#$C,$2C(a0)
		blo.s	locret_11506
		move.b	#6,5(a6)
		move.b	#$15,$22(a6)

locret_11506:

		rts
; End of function sub_11482


; =============== S U B R O U T I N E =======================================

; sub_11508:
Sonic_RollSpeed:
		move.w	(a4),d6
		asl.w	#1,d6
		move.w	2(a4),d5
		asr.w	#1,d5
		tst.b	(Super_Sonic_Knux_flag).w
		beq.s	loc_1151C
		move.w	#6,d5

loc_1151C:
		move.w	#$20,d4
		tst.b	$3D(a0)
		bmi.w	loc_115C6
		tst.b	$2B(a0)
		bmi.w	loc_115C6
		tst.w	$32(a0)
		bne.s	loc_1154E
		btst	#2,(Ctrl_1_logical).w
		beq.s	loc_11542
		bsr.w	sub_11608

loc_11542:
		btst	#3,(Ctrl_1_logical).w
		beq.s	loc_1154E
		bsr.w	sub_1162C

loc_1154E:

		move.w	$1C(a0),d0
		beq.s	loc_11570
		bmi.s	loc_11564
		sub.w	d5,d0
		bcc.s	loc_1155E
		move.w	#0,d0

loc_1155E:
		move.w	d0,$1C(a0)
		bra.s	loc_11570
; ---------------------------------------------------------------------------

loc_11564:
		add.w	d5,d0
		bcc.s	loc_1156C
		move.w	#0,d0

loc_1156C:
		move.w	d0,$1C(a0)

loc_11570:

		move.w	$1C(a0),d0
		bpl.s	loc_11578
		neg.w	d0

loc_11578:
		cmpi.w	#$80,d0
		bhs.s	loc_115C6
		tst.b	$3D(a0)
		bne.s	loc_115B4
		bclr	#2,$2A(a0)
		move.b	$1E(a0),d0
		move.b	$44(a0),$1E(a0)
		move.b	$45(a0),$1F(a0)
		move.b	#5,$20(a0)
		sub.b	$44(a0),d0
		ext.w	d0
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_115AE
		neg.w	d0

loc_115AE:
		add.w	d0,$14(a0)
		bra.s	loc_115C6
; ---------------------------------------------------------------------------

loc_115B4:
		move.w	#$400,$1C(a0)
		btst	#0,$2A(a0)
		beq.s	loc_115C6
		neg.w	$1C(a0)

loc_115C6:

		tst.w	(a5)
		beq.s	loc_115D2
		bpl.s	loc_115D0
		addq.w	#4,(a5)

loc_115D0:
		subq.w	#2,(a5)

loc_115D2:
		move.b	$26(a0),d0
		jsr	GetSineCosine.w
		muls.w	$1C(a0),d0
		asr.l	#8,d0
		move.w	d0,$1A(a0)
		muls.w	$1C(a0),d1
		asr.l	#8,d1
		cmpi.w	#$1000,d1
		ble.s	loc_115F6
		move.w	#$1000,d1

loc_115F6:
		cmpi.w	#-$1000,d1
		bge.s	loc_11600
		move.w	#-$1000,d1

loc_11600:
		move.w	d1,$18(a0)
		bra.w	loc_11350
; End of function Sonic_RollSpeed


; =============== S U B R O U T I N E =======================================


sub_11608:
		move.w	$1C(a0),d0
		beq.s	loc_11610
		bpl.s	loc_1161E

loc_11610:
		bset	#0,$2A(a0)
		move.b	#2,$20(a0)
		rts
; ---------------------------------------------------------------------------

loc_1161E:
		sub.w	d4,d0
		bcc.s	loc_11626
		move.w	#-$80,d0

loc_11626:
		move.w	d0,$1C(a0)
		rts
; End of function sub_11608


; =============== S U B R O U T I N E =======================================


sub_1162C:
		move.w	$1C(a0),d0
		bmi.s	loc_11640
		bclr	#0,$2A(a0)
		move.b	#2,$20(a0)
		rts
; ---------------------------------------------------------------------------

loc_11640:
		add.w	d4,d0
		bcc.s	loc_11648
		move.w	#$80,d0

loc_11648:
		move.w	d0,$1C(a0)
		rts
; End of function sub_1162C


; ---------------------------------------------------------------------------
; Subroutine for moving Sonic left or right when he's in the air
; ---------------------------------------------------------------------------

; =============== S U B R O U T I N E =======================================

; sub_1164E:
Sonic_ChgJumpDir:
		move.w	Sonic_Knux_top_speed-Sonic_Knux_top_speed(a4),d6
		move.w	Sonic_Knux_acceleration-Sonic_Knux_top_speed(a4),d5
		asl.w	#1,d5
		btst	#Status_RollJump,status(a0)		; did Sonic jump from rolling?
		bne.s	Sonic_Jump_ResetScr	; if yes, branch to skip midair control
		move.w	x_vel(a0),d0
		btst	#button_left,(Ctrl_1_logical).w
		beq.s	loc_11682	; if not holding left, branch

		bset	#Status_Facing,status(a0)
		sub.w	d5,d0	; add acceleration to the left
		move.w	d6,d1
		neg.w	d1
		cmp.w	d1,d0	; compare new speed with top speed
		bgt.s	loc_11682	; if new speed is less than the maximum, branch
		add.w	d5,d0		; remove this frame's acceleration change
		cmp.w	d1,d0		; compare speed with top speed
		ble.s	loc_11682	; if speed was already greater than the maximum, branch
		move.w	d1,d0

loc_11682:
		btst	#button_right,(Ctrl_1_logical).w
		beq.s	loc_1169E	; if not holding right, branch

		bclr	#Status_Facing,status(a0)
		add.w	d5,d0	; accelerate right in the air
		cmp.w	d6,d0	; compare new speed with top speed
		blt.s	loc_1169E	; if new speed is less than the maximum, branch
		sub.w	d5,d0		; remove this frame's acceleration change
		cmp.w	d6,d0		; compare speed with top speed
		bge.s	loc_1169E	; if speed was already greater than the maximum, branch
		move.w	d6,d0

loc_1169E:
; Sonic_JumpMove:
		move.w	d0,x_vel(a0)
; loc_116A2:
Sonic_Jump_ResetScr:
		tst.w	(a5)				; is screen in its default position?
		beq.s	Sonic_JumpPeakDecelerate	; if yes, branch
		bpl.s	loc_116AC			; depending on the sign of the difference,
		addq.w	#4,(a5)				; either add 2

loc_116AC:
		subq.w	#2,(a5)		; or subtract 2
; loc_116AE:
Sonic_JumpPeakDecelerate:
		cmpi.w	#-$400,y_vel(a0)	; is Sonic moving faster than -$400 upwards?
		blo.s	locret_116DC		; if yes, return
		move.w	x_vel(a0),d0
		move.w	d0,d1
		asr.w	#5,d1		; d1 = x_velocity / 32
		beq.s	locret_116DC	; return if d1 is 0
		bmi.s	Sonic_JumpPeakDecelerateLeft	; branch if moving left

; Sonic_JumpPeakDecelerateRight:
		sub.w	d1,d0	; reduce x velocity by d1
		bcc.s	loc_116CA
		move.w	#0,d0

loc_116CA:
		move.w	d0,x_vel(a0)
		rts
; ---------------------------------------------------------------------------
; loc_116D0:
Sonic_JumpPeakDecelerateLeft:
		sub.w	d1,d0	; reduce x velocity by d1
		bcs.s	loc_116D8
		move.w	#0,d0

loc_116D8:
		move.w	d0,x_vel(a0)

locret_116DC:

		rts
; End of function Sonic_ChgJumpDir


; ---------------------------------------------------------------------------
; Subroutine to prevent Sonic from leaving the boundaries of a level
; ---------------------------------------------------------------------------

; =============== S U B R O U T I N E =======================================

; Player_Check_Screen_Boundaries:
Player_LevelBound:
		move.l	x_pos(a0),d1
		move.w	x_vel(a0),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d1
		swap	d1
		move.w	(Camera_min_X_pos).w,d0
		addi.w	#$10,d0
		cmp.w	d1,d0			; has Sonic touched the left boundary?
		bhi.s	Player_Boundary_Sides	; if yes, branch
		move.w	(Camera_max_X_pos).w,d0
		addi.w	#$128,d0
		cmp.w	d1,d0
		blo.s	Player_Boundary_Sides
; loc_11706:
Player_Boundary_CheckBottom:
		tst.b	(Border_Bottom_Death).w
		bne.s	locret_11720
		tst.b	(Reverse_gravity_flag).w
		bne.s	loc_11722

		tst.w	y_vel(a0)			; NAT: Some code here to fix players going
		bpl.s	.checkbtm			; above the screen and dying.

		move.w	(Camera_min_Y_pos).w,d0		; HCZ2 has a place where you get stuck like this
		cmp.w	y_pos(a0),d0
		blt.s	.checkbtm
		tst.b	BossHitMode.w			; NAT: Check if boss mode is active
		bne.s	.checkbtm			; if yes, branch

		move.w	d0,y_pos(a0)
		clr.w	2+y_pos(a0)			; subpixel y
		clr.w	y_vel(a0)

.checkbtm	move.w	(Camera_max_Y_pos).w,d0
		addi.w	#$E0,d0
		cmp.w	y_pos(a0),d0		; has Sonic touched the bottom boundary?
		blt.s	Player_Boundary_Bottom	; if yes, branch

locret_11720:
		rts
; ---------------------------------------------------------------------------

loc_11722:
		move.w	(Camera_min_Y_pos).w,d0
		cmp.w	y_pos(a0),d0
		blt.s	locret_11720
; loc_1172C:
Player_Boundary_Bottom:
		jmp	(Kill_Character).l
; ---------------------------------------------------------------------------

; loc_11732:
Player_Boundary_Sides:
		move.w	d0,x_pos(a0)
		clr.w	2+x_pos(a0) ; subpixel x
		clr.w	x_vel(a0)
		clr.w	ground_vel(a0)
		bra.w	Player_Boundary_CheckBottom

; =============== S U B R O U T I N E =======================================

; Player_Spin: Player_Roll:
SonicKnux_Roll:
		tst.b	status_secondary(a0)
		bmi.s	locret_1177E
		move.b	(Ctrl_1_logical).w,d0
		andi.b	#button_left_mask|button_right_mask,d0 ; is left/right being pressed?
		bne.s	locret_1177E	; if yes, branch
		btst	#button_down,(Ctrl_1_logical).w ; is down being pressed?
		beq.s	Player_ChkWalk			; if not, branch
		move.w	ground_vel(a0),d0
		bpl.s	loc_1176A
		neg.w	d0

loc_1176A:
		cmpi.w	#$100,d0		; is Sonic moving at $100 speed or faster?
		bhs.s	Player_ChkRoll		; if so, branch
	;	btst	#Status_OnObj,status(a0)		; NAT: Disable check
	;	bne.s	locret_1177E
		move.b	#8,anim(a0)	; enter ducking animation

locret_1177E:
					; SonicKnux_Roll+Ej ...
		rts
; ---------------------------------------------------------------------------
; loc_11780:
Player_ChkWalk:
		cmpi.b	#8,anim(a0)	; is Sonic ducking?
		bne.s	locret_1177E
		clr.b	anim(a0)	; if so, enter walking animation
		rts
; ---------------------------------------------------------------------------
; loc_11790:
Player_ChkRoll:
		btst	#Status_Roll,status(a0)	; is Sonic already rolling?
		bne.s	locret_1177E	; if yes, branch
; ---------------------------------------------------------------------------
; loc_1179A:
Player_DoRoll:
		bset	#Status_Roll,status(a0)
		move.b	#$E,y_radius(a0)
		move.b	#7,x_radius(a0)
		move.b	#2,anim(a0)	; enter roll animation
		addq.w	#5,y_pos(a0)
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_117C2
		subi.w	#$A,y_pos(a0)

loc_117C2:
		move.w	#$3C,d0
		jsr	Play_Sound_2.w
		tst.w	ground_vel(a0)
		bne.s	locret_117D8
		move.w	#$200,ground_vel(a0)

locret_117D8:
		rts
; End of function SonicKnux_Roll


; ---------------------------------------------------------------------------
; Subroutine allowing Sonic to jump
; ---------------------------------------------------------------------------

; =============== S U B R O U T I N E =======================================

; sub_117DA:
Sonic_Jump:
		move.b	(Ctrl_1_pressed_logical).w,d0
		andi.b	#button_B_mask|button_C_mask|button_A_mask,d0 ; is A, B or C pressed?
		beq.w	locret_118B2	; if not, return
		moveq	#0,d0
		move.b	angle(a0),d0
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_117FC
		addi.b	#$40,d0
		neg.b	d0
		subi.b	#$40,d0

loc_117FC:
		addi.b	#-$80,d0
		movem.l	a4-a6,-(sp)
		bsr.w	CalcRoomOverHead
		movem.l	(sp)+,a4-a6
		cmpi.w	#6,d1			; does Sonic have enough room to jump?
		blt.w	locret_118B2		; if not, branch
		move.w	#$680,d2

loc_11822:
		btst	#Status_Underwater,status(a0)	; Test if underwater
		beq.s	loc_1182E
		move.w	#$380,d2	; set lower jump speed if under

loc_1182E:
		moveq	#0,d0
		move.b	angle(a0),d0
		subi.b	#$40,d0
		jsr	GetSineCosine.w
		muls.w	d2,d1
		asr.l	#8,d1
		add.w	d1,x_vel(a0)	; make Sonic jump (in X... this adds nothing on level ground)
		muls.w	d2,d0
		asr.l	#8,d0
		add.w	d0,y_vel(a0)	; make Sonic jump (in Y)
		bset	#Status_InAir,status(a0)
		bclr	#Status_Push,status(a0)
		addq.l	#4,sp
		move.b	#1,jumping(a0)
		clr.b	stick_to_convex(a0)
		move.w	#$62,d0
		jsr	Play_Sound_2.w	; play jumping sound

		move.b	#$E,y_radius(a0)		; NAT: Rolljump was setting a wrong hitbox
		move.b	#7,x_radius(a0)			; for player
		btst	#Status_Roll,status(a0)
		bne.s	Sonic_RollJump
		move.b	#2,anim(a0)	; use "jumping" animation
		bset	#Status_Roll,status(a0)
		move.b	y_radius(a0),d0
		sub.b	default_y_radius(a0),d0
		ext.w	d0
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_118AE
		neg.w	d0

loc_118AE:
		sub.w	d0,y_pos(a0)

locret_118B2:

		rts
; ---------------------------------------------------------------------------
; loc_118B4:
Sonic_RollJump:
		bset	#Status_RollJump,status(a0)	; set the rolling+jumping flag
		rts
; ===========================================================================
; ---------------------------------------------------------------------------
; Routines for checking for jump moves
; ---------------------------------------------------------------------------

JumpMove_BattleRace:
		nop
		btst	#3,OptionsBits.w		; NAT: check if shield moves are enabled
		rts

JumpMove_MiniCNZ1:
		bra.s	.tails
		lea	Ring_count.w,a2			; get sonic ring count to a1
		bra.s	.check

.tails		lea	Ring_count+1.w,a2		; get tails ring count to a1
.check		cmp.b	#2,(a2)				; check if ring count is enough
		blt.s	.ret				; if not, return
		cmp.l	#Obj_Bubble_Shield_Main,(a1)	; check if this is the bubble shield object
		bne.s	.ret				; if not, just fail

		subq.b	#2,(a2)				; remove 2 rings
		not.b	Update_HUD_ring_count.w		; update rings counter
		rts

.ret		moveq	#0,d1
		rts
; ---------------------------------------------------------------------------

; Sonic_InstaAndShieldMoves:
Sonic_JumpHeight:
		tst.b	jumping(a0)	; is Sonic jumping?
		beq.s	Sonic_UpVelCap	; if not, branch

		move.w	#-$400,d1
		btst	#Status_Underwater,status(a0)	; is Sonic underwater?
		beq.s	loc_118D2			; if not, branch
		move.w	#-$200,d1			; Underwater-specific

loc_118D2:
		cmp.w	y_vel(a0),d1		; is y speed greater than 4? (2 if underwater)
		ble.s	Player_ShieldMoves	; if no, branch

		move.b	(Ctrl_1_logical).w,d0
		andi.b	#$70,d0			; are buttons A, B or C being pressed?
		bne.s	locret_118E8		; if yes, branch
		move.w	d1,y_vel(a0)		; cap jump height

locret_118E8:
		rts
; ---------------------------------------------------------------------------
; loc_118EA:
Sonic_UpVelCap:
		tst.b	spin_dash_flag(a0)	; is Sonic charging his spin dash?
		bne.s	locret_118FE		; if yes, branch
		cmpi.w	#-$FC0,y_vel(a0)	; is Sonic's Y speed faster (less than) than -15.75 (-$FC0)?
		bge.s	locret_118FE		; if not, branch
		move.w	#-$FC0,y_vel(a0)	; cap upward speed

locret_118FE:
		rts
; ---------------------------------------------------------------------------
; loc_11900:
Player_ShieldMoves:
		lea	 Shield.w,a1
		move.b	(Ctrl_1_pressed_logical).w,d0

.c		tst.b	double_jump_flag(a0)		; is Sonic currently performing a double jump?
		bne.s	locret_118FE			; if yes, branch
		andi.b	#$70,d0				; are buttons A, B, or C being pressed?
		beq.s	locret_118FE			; if not, branch

	; NAT: Some game modes need custom code to handle jump moves correctly (namely CNZ1)
		move.l	ModeTable.w,a2			; NAT: Get mode table address
		move.l	$24(a2),a2			; get jump move routine

		cmp.w	#Player_1,a0			; check if the current player is Sonic
		bne.s	.tails				; if not, branch
		addq.l	#2,a2				; skip over the bra.s
.tails		jsr	(a2)				; jump to the target routine
		beq.s	locret_118FE			; if Z flag was set, branch

		bclr	#Status_RollJump,status(a0)
		tst.b	(Super_Sonic_Knux_flag).w	; check Super-state
		beq.s	Sonic_FireShield		; if not in a super-state, branch
	;	bmi.w	Sonic_HyperDash			; if Hyper, branch
		move.b	#1,double_jump_flag(a0)
		rts
; ---------------------------------------------------------------------------
; loc_1192C:
Sonic_FireShield:
		btst	#Status_Invincible,status_secondary(a0)	; first, does Sonic have invincibility?
		bne.s	locret_118FE				; if yes, branch
		btst	#Status_FireShield,status_secondary(a0)	; does Sonic have a Fire Shield?
		beq.s	Sonic_LightningShield			; if not, branch
		move.b	#1,anim(a1)
		move.b	#1,double_jump_flag(a0)
		move.w	#$800,d0
		btst	#Status_Facing,status(a0)		; is Sonic facing left?
		beq.s	loc_11958				; if not, branch
		neg.w	d0					; reverse speed value, moving Sonic left
loc_11958:
		move.w	d0,x_vel(a0)				; apply velocity...
		move.w	d0,ground_vel(a0)			; ...both ground and air
		clr.w	y_vel(a0)				; kill y-velocity
		move.w	#$2000,(H_scroll_frame_offset).w
		bsr.w	Reset_Player_Position_Array
		move.w	#$43,d0					; play Fire Shield attack sound
		jmp	Play_Sound_2.w
; ---------------------------------------------------------------------------
; loc_1197A:
Sonic_LightningShield:
		btst	#Status_LtngShield,status_secondary(a0)	; does Sonic have a Lightning Shield?
		beq.s	Sonic_BubbleShield			; if not, branch
		move.b	#1,anim(a1)
		move.b	#1,double_jump_flag(a0)
		move.w	#-$580,y_vel(a0)	; bounce Sonic up, creating the double jump effect
		clr.b	jumping(a0)
		move.w	#$45,d0			; play Lightning Shield attack sound
		jmp	Play_Sound_2.w
; ---------------------------------------------------------------------------
; loc_119A2:
Sonic_BubbleShield:
		btst	#Status_BublShield,status_secondary(a0)	; does Sonic have a Bubble Shield
		beq.s	Sonic_CheckTransform			; if not, branch
		move.b	#1,anim(a1)

Sonic_BubbleShield2:
		move.b	#1,double_jump_flag(a0)
		clr.w	x_vel(a0)		; halt horizontal speed...
		clr.w	ground_vel(a0)		; ...both ground and air
		move.w	#$800,y_vel(a0)		; force Sonic down
		move.w	#$44,d0			; play Bubble Shield attack sound
		jmp	Play_Sound_2.w
; ---------------------------------------------------------------------------
; Code that transforms Sonic into Super/Hyper Sonic
; if he has enough rings and emeralds
; ---------------------------------------------------------------------------
; loc_119D2:
Sonic_CheckTransform:
Sonic_InstaShield:
;		btst	#Status_Shield,status_secondary(a0)	; does Sonic have an S2 shield (The Elementals were already filtered out at this point)?
;		bne.s	locret_11A14				; if yes, branch
		move.b	#1,anim(a1)
		move.b	#1,double_jump_flag(a0)
		move.w	#$42,d0			; play Insta-Shield sound
		jmp	Play_Sound_2.w
; ---------------------------------------------------------------------------
; loc_11A16:
Sonic_Transform:
		move.b	#1,(Super_Hyper_palette_status).w	; set Super/Hyper palette status to 'fading'
		move.b	#$F,(Palette_timer).w
		move.w	#60,(Super_Hyper_frame_count).w
		move.l	#Map_SuperSonic,mappings(a0)
		move.b	#$81,object_control(a0)
		move.b	#$1F,anim(a0)				; enter 'transformation' animation
		cmpi.b	#7,(Super_emerald_count).w		; does Sonic have all 7 Super Emeralds?
		blo.s	.super					; if not, turn Super
;.hyper:
		move.b	#-1,(Super_Sonic_Knux_flag).w		; set flag to Hyper Sonic
		move.l	#Obj_HyperSonic_Stars,(Hyper_Sonic_stars).w	; load Hyper Stars object
		move.l	#Obj_HyperSonicKnux_Trail,(Super_stars).w	; load After-Images object
		bra.s	.continue
; ---------------------------------------------------------------------------
; loc_11A5C: Sonic_Transform_SuperEffects:
.super:
		move.b	#1,(Super_Sonic_Knux_flag).w		; set flag to Super Sonic
		move.l	#Obj_SuperSonicKnux_Stars,(Super_stars).w	; load Super Stars object
; loc_11A6A: Sonic_Transform_Continued:
.continue:
		move.w	#$A00,Sonic_Knux_top_speed-Sonic_Knux_top_speed(a4)
		move.w	#$30,Sonic_Knux_acceleration-Sonic_Knux_top_speed(a4)
		move.w	#$100,Sonic_Knux_deceleration-Sonic_Knux_top_speed(a4)
		move.b	#0,invincibility_timer(a0)
		bset	#Status_Invincible,status_secondary(a0)
		moveq	#$9F,d0		; play transformation sound
		jmp	Play_Sound_2.w
	;	moveq	#$2C,d0		; play invincibility theme
	;	jmp	Play_Sound.w
; ---------------------------------------------------------------------------
; loc_11A96:
Sonic_HyperDash:
		bsr.w	HyperAttackTouchResponse
		move.w	#$2000,(H_scroll_frame_offset).w
		bsr.w	Reset_Player_Position_Array
		move.b	#1,double_jump_flag(a0)
		move.b	#1,(Hyper_Sonic_stars+anim).w	; This causes the screen flash, and sparks to come out of Sonic
		moveq	#$B6,d0
		jsr	Play_Sound_2.w
		move.b	(Ctrl_1_logical).w,d0
		andi.w	#button_up_mask|button_down_mask|button_left_mask|button_right_mask,d0	; Get D-pad input
		beq.s	.noInput
		; Any values totalling $B or above are produced by holding
		; both opposing directions on the D-pad, which is invalid
		cmpi.b	#$B,d0
		bhs.s	.noInput
		lsl.w	#2,d0
		lea	Sonic_HyperDash_Velocities-4(pc,d0.w),a1
		move.w	(a1)+,d0
		move.w	d0,x_vel(a0)
		move.w	d0,ground_vel(a0)
		move.w	(a1)+,d0
		move.w	d0,y_vel(a0)
		rts
; ---------------------------------------------------------------------------
; loc_11AE0:
.noInput:
		; If there's no directional input, we just dash forward
		move.w	#$800,d0	; Go right...
		btst	#Status_Facing,status(a0)	; ...unless Sonic is facing left...
		beq.s	.applySpeeds
		neg.w	d0		; ...in which case, go left
; loc_11AEE:
.applySpeeds:
		move.w	d0,x_vel(a0)
		move.w	d0,ground_vel(a0)
		move.w	#0,y_vel(a0)
		rts
; End of function Sonic_JumpHeight

; ---------------------------------------------------------------------------
; loc_11AFE:
Sonic_HyperDash_Velocities:
		dc.w	  0, -$800	; up
		dc.w	  0,  $800	; down
		dc.w	  0,	 0	; up + down (shouldn't happen)
		dc.w  -$800,	 0	; left
		dc.w  -$800, -$800	; left + up
		dc.w  -$800,  $800	; left + down
		dc.w	  0,	 0	; left + up + down (shouldn't happen)
		dc.w   $800,	 0	; right
		dc.w   $800, -$800	; right + up
		dc.w   $800,  $800	; right + down
		; Everything after this would be bad button combinations
; ---------------------------------------------------------------------------

; loc_11B26:
Tails_Super:
		rts
		tst.b	(Super_Tails_flag).w
		beq.w	SonicKnux_SuperHyper.locret
		bra.s	SonicKnux_SuperHyper.continue

; =============== S U B R O U T I N E =======================================

; sub_11B30:
SonicKnux_SuperHyper:
		rts
		tst.b	(Super_Sonic_Knux_flag).w
		beq.w	.locret		; If not Super/Hyper, return
; loc_11B38:
.continue:
		tst.b	(Update_HUD_timer).w	; Level over?
		beq.s	.RevertToNormal
		subq.w	#1,(Super_Hyper_frame_count).w
		bpl.w	.locret			; This should be a 'bhi'; currently counts down 61 frames
		move.w	#60,(Super_Hyper_frame_count).w
		tst.w	(Ring_count).w
		beq.s	.RevertToNormal	; If rings depleted, return to normal
		; This checks if the ring counter needs to be blanked
		; for example, this ticks '10' down to ' 9' instead of '19' (yes, this does happen)
		ori.b	#1,(Update_HUD_ring_count).w	; Update ring counter
		cmpi.w	#1,(Ring_count).w
		beq.s	.resetHUD
		cmpi.w	#10,(Ring_count).w
		beq.s	.resetHUD
		cmpi.w	#100,(Ring_count).w
		bne.s	.updateHUD
; loc_11B70:
.resetHUD:
		ori.b	#$80,(Update_HUD_ring_count).w	; Re-init ring counter
; loc_11B76:
.updateHUD:
		subq.w	#1,(Ring_count).w
		bne.s	.locret	; If rings aren't depleted, we're done here
		; If rings depleted, return to normal
; loc_11B7C:
.RevertToNormal:
		move.b	#2,(Super_Hyper_palette_status).w
		move.w	#$1E,(Palette_frame).w
		move.b	#0,(Super_Sonic_Knux_flag).w
		move.b	#0,(Super_Tails_flag).w
		move.b	#-1,(Sonic_Knux_Mapnum).w
		tst.b	character_id(a0)	; Is this Sonic?
		bne.s	.notSonic
		move.l	#Map_Sonic,mappings(a0)	; If so, load Sonic's normal mappings (was using Super/Hyper mappings)
; loc_11BA8:
.notSonic:
		move.b	#1,prev_anim(a0)
		move.b	#1,invincibility_timer(a0)
		move.w	#$600,Sonic_Knux_top_speed-Sonic_Knux_top_speed(a4)
		move.w	#$C,Sonic_Knux_acceleration-Sonic_Knux_top_speed(a4)
		move.w	#$80,Sonic_Knux_deceleration-Sonic_Knux_top_speed(a4)
		btst	#6,status(a0)
		beq.s	.locret
		; If underwater, apply corrected speed/acceleration/deceleration
		move.w	#$300,Sonic_Knux_top_speed-Sonic_Knux_top_speed(a4)
		move.w	#6,Sonic_Knux_acceleration-Sonic_Knux_top_speed(a4)
		move.w	#$40,Sonic_Knux_deceleration-Sonic_Knux_top_speed(a4)
; locret_11BDC:
.locret:
		rts
; End of function SonicKnux_SuperHyper


; =============== S U B R O U T I N E =======================================

SonicKnux_Spindash:
		tst.b	$3D(a0)
		bne.s	loc_11C5E
		cmpi.b	#8,$20(a0)
		bne.s	locret_11C5C

		move.b	Ctrl_1_pressed_logical.w,d0
		cmp.w	#Player_1,a0			; NAT: Check if this is Sonic
		beq.s	.sonic				; if so, branch
		move.b	Ctrl_2_pressed_logical.w,d0	; read controller 2

.sonic		andi.b	#$70,d0
		beq.s	locret_11C5C
		move.b	#9,$20(a0)
		moveq	#$AB,d0
		jsr	Play_Sound_2.w

		addq.l	#4,sp
		move.b	#1,$3D(a0)
		clr.w	$3E(a0)
		cmpi.b	#$C,$2C(a0)
		blo.s	loc_11C24
		move.b	#2,$20(a6)

loc_11C24:
		bsr.w	Player_LevelBound
		bsr.w	Call_Player_AnglePos
		tst.b	(BG_Collision).w
		beq.s	locret_11C5C
		jsr	sub_F846.w
		tst.w	d1
		bmi.w	Kill_Character
		movem.l	a4-a6,-(sp)
		jsr	CheckLeftWallDist.w
		tst.w	d1
		bpl.s	loc_11C4C
		sub.w	d1,$10(a0)

loc_11C4C:
		jsr	CheckRightWallDist.w
		tst.w	d1
		bpl.s	loc_11C58
		add.w	d1,$10(a0)

loc_11C58:
		movem.l	(sp)+,a4-a6

locret_11C5C:
		rts
; ---------------------------------------------------------------------------

loc_11C5E:
		move.b	Ctrl_1_logical.w,d0
		cmp.w	#Player_1,a0			; NAT: Check if this is Sonic
		beq.s	.sonic				; if so, branch
		move.b	Ctrl_2_logical.w,d0		; read controller 2

.sonic		btst	#1,d0
		bne.w	loc_11D16
		move.b	#$E,$1E(a0)
		move.b	#7,$1F(a0)
		move.b	#2,$20(a0)
		addq.w	#5,$14(a0)
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_11C8C
		subi.w	#$A,$14(a0)

loc_11C8C:
		clr.b	$3D(a0)
		moveq	#0,d0
		move.b	$3E(a0),d0
		add.w	d0,d0
		move.w	word_11CF2(pc,d0.w),d0
	;	tst.b	(Super_Sonic_Knux_flag).w
	;	beq.s	loc_11CAC
	;	move.w	word_11D04(pc,d0.w),d0

loc_11CAC:
		move.w	d0,$1C(a0)
		subi.w	#$800,d0
		add.w	d0,d0
		andi.w	#$1F00,d0
		neg.w	d0
		addi.w	#$2000,d0

		lea	(H_scroll_frame_offset).w,a1
		cmpa.w	#Player_1,a0
		beq.s	loc_11CCE
		lea	(H_scroll_frame_offset_P2).w,a1

loc_11CCE:
		move.w	d0,(a1)
		jsr	Reset_Player_Position_Array(pc)	; NAT: Also be sure to reset the position array

		btst	#0,$2A(a0)
		beq.s	loc_11CDC
		neg.w	$1C(a0)

loc_11CDC:
		bset	#2,$2A(a0)
		clr.b	$20(a6)
		moveq	#-$4A,d0
		jsr	Play_Sound_2.w
		bra.s	loc_11D5E

; ---------------------------------------------------------------------------
word_11CF2:	dc.w $800
		dc.w $880
		dc.w $900
		dc.w $980
		dc.w $A00
		dc.w $A80
		dc.w $B00
		dc.w $B80
		dc.w $C00
word_11D04:;	dc.w $B00
	;	dc.w $B80
	;	dc.w $C00
	;	dc.w $C80
	;	dc.w $D00
	;	dc.w $D80
	;	dc.w $E00
	;	dc.w $E80
	;	dc.w $F00
; ---------------------------------------------------------------------------

loc_11D16:
		move.w	$3E(a0),d0
		beq.s	loc_11D2E
		lsr.w	#5,d0
		sub.w	d0,$3E(a0)
		bcc.s	loc_11D2E
		clr.w	$3E(a0)

loc_11D2E:
		move.b	Ctrl_1_pressed_logical.w,d0
		cmp.w	#Player_1,a0			; NAT: Check if this is Sonic
		beq.s	.sonic				; if so, branch
		move.b	Ctrl_2_pressed_logical.w,d0	; read controller 2

.sonic		andi.b	#$70,d0
		beq.w	loc_11D5E
		move.w	#$900,$20(a0)
		moveq	#$AB,d0
		jsr	Play_Sound_2.w
		addi.w	#$200,$3E(a0)
		cmpi.w	#$800,$3E(a0)
		blo.s	loc_11D5E
		move.w	#$800,$3E(a0)

loc_11D5E:
		addq.l	#4,sp
		tst.w	(a5)
		beq.s	loc_11D6C
		bpl.s	loc_11D6A
		addq.w	#4,(a5)

loc_11D6A:
		subq.w	#2,(a5)

loc_11D6C:
		bsr.w	Player_LevelBound
		bsr.w	Call_Player_AnglePos
		tst.b	(BG_Collision).w
		beq.s	locret_11DA4
		jsr	sub_F846.w
		tst.w	d1
		bmi.w	Kill_Character
		movem.l	a4-a6,-(sp)
		jsr	CheckLeftWallDist.w
		tst.w	d1
		bpl.s	loc_11D94
		sub.w	d1,$10(a0)

loc_11D94:
		jsr	CheckRightWallDist.w
		tst.w	d1
		bpl.s	loc_11DA0
		add.w	d1,$10(a0)

loc_11DA0:
		movem.l	(sp)+,a4-a6

locret_11DA4:
		rts

; ---------------------------------------------------------------------------
; Subroutine to slow Sonic walking up a slope
; ---------------------------------------------------------------------------

; =============== S U B R O U T I N E =======================================

; sub_11DA6:
Player_SlopeResist:
		move.b	angle(a0),d0
		addi.b	#$60,d0
		cmpi.b	#$C0,d0
		bhs.s	locret_11DDA
		move.b	angle(a0),d0
		jsr	GetSineCosine.w
		muls.w	#$20,d0
		asr.l	#8,d0
		tst.w	ground_vel(a0)
		beq.s	loc_11DDC
		bmi.s	loc_11DD6
		tst.w	d0
		beq.s	locret_11DD4
		add.w	d0,ground_vel(a0)

locret_11DD4:
		rts
; ---------------------------------------------------------------------------

loc_11DD6:
		add.w	d0,ground_vel(a0)

locret_11DDA:

		rts
; ---------------------------------------------------------------------------

loc_11DDC:
		move.w	d0,d1
		bpl.s	loc_11DE2
		neg.w	d1

loc_11DE2:
		cmpi.w	#$D,d1
		blo.s	locret_11DDA
		add.w	d0,ground_vel(a0)
		rts
; End of function Player_SlopeResist

; ---------------------------------------------------------------------------
; Subroutine to push Sonic down a slope while he's rolling
; ---------------------------------------------------------------------------

; =============== S U B R O U T I N E =======================================

; sub_11DEE:
Player_RollRepel:
		move.b	angle(a0),d0
		addi.b	#$60,d0
		cmpi.b	#-$40,d0
		bhs.s	locret_11E28
		move.b	angle(a0),d0
		jsr	GetSineCosine.w
		muls.w	#$50,d0
		asr.l	#8,d0
		tst.w	ground_vel(a0)
		bmi.s	loc_11E1E
		tst.w	d0
		bpl.s	loc_11E18
		asr.l	#2,d0

loc_11E18:
		add.w	d0,ground_vel(a0)
		rts
; ---------------------------------------------------------------------------

loc_11E1E:
		tst.w	d0
		bmi.s	loc_11E24
		asr.l	#2,d0

loc_11E24:
		add.w	d0,ground_vel(a0)

locret_11E28:
		rts
; End of function Player_RollRepel


; ---------------------------------------------------------------------------
; Subroutine to push Sonic down a slope
; ---------------------------------------------------------------------------

; =============== S U B R O U T I N E =======================================

; sub_11E2A:
Player_SlopeRepel:
		nop
		tst.b	stick_to_convex(a0)
		bne.s	locret_11E6E
		tst.w	move_lock(a0)
		bne.s	loc_11E86
		move.b	angle(a0),d0
		addi.b	#$18,d0
		cmpi.b	#$30,d0
		blo.s	locret_11E6E
		move.w	ground_vel(a0),d0
		bpl.s	loc_11E4E
		neg.w	d0

loc_11E4E:
		cmpi.w	#$280,d0
		bhs.s	locret_11E6E
		move.w	#$1E,move_lock(a0)
		move.b	angle(a0),d0
		addi.b	#$30,d0
		cmpi.b	#$60,d0
		blo.s	loc_11E70
		bset	#Status_InAir,status(a0)

locret_11E6E:

		rts
; ---------------------------------------------------------------------------

loc_11E70:
		cmpi.b	#$30,d0
		blo.s	loc_11E7E
		addi.w	#$80,ground_vel(a0)
		rts
; ---------------------------------------------------------------------------

loc_11E7E:
		subi.w	#$80,ground_vel(a0)
		rts
; ---------------------------------------------------------------------------

loc_11E86:
		subq.w	#1,move_lock(a0)
		rts
; End of function Player_SlopeRepel


; ---------------------------------------------------------------------------
; Subroutine to return Sonic's angle to 0 as he jumps
; ---------------------------------------------------------------------------

; =============== S U B R O U T I N E =======================================

; sub_11E8C:
Player_JumpAngle:
		move.b	angle(a0),d0	; get Sonic's angle
		beq.s	Player_JumpFlip	; if already 0, branch
		bpl.s	loc_11E9C	; if higher than 0, branch

		addq.b	#2,d0		; increase angle
		bcc.s	loc_11E9A
		moveq	#0,d0

loc_11E9A:
		bra.s	Player_JumpAngleSet
; ---------------------------------------------------------------------------

loc_11E9C:
		subq.b	#2,d0		; decrease angle
		bcc.s	Player_JumpAngleSet
		moveq	#0,d0
; loc_11EA2:
Player_JumpAngleSet:
		move.b	d0,angle(a0)
; End of function Player_JumpAngle
	; continue straight to Player_JumpFlip

; ---------------------------------------------------------------------------
; Updates Sonic's secondary angle if he's tumbling
; ---------------------------------------------------------------------------

; =============== S U B R O U T I N E =======================================

; loc_11EA6:
Player_JumpFlip:
		move.b	flip_angle(a0),d0
		beq.s	locret_11EEA
		tst.w	ground_vel(a0)
		bmi.s	Player_JumpLeftFlip
; loc_11EB2:
Player_JumpRightFlip:
		move.b	flip_speed(a0),d1
		add.b	d1,d0
		bcc.s	loc_11EC8
		subq.b	#1,flips_remaining(a0)
		bcc.s	loc_11EC8
		clr.b	flips_remaining(a0)
		moveq	#0,d0

loc_11EC8:
		bra.s	Player_JumpFlipSet
; ---------------------------------------------------------------------------
; loc_11ECA:
Player_JumpLeftFlip:
		tst.b	flip_type(a0)
		bmi.s	Player_JumpRightFlip
		move.b	flip_speed(a0),d1
		sub.b	d1,d0
		bcc.s	Player_JumpFlipSet
		subq.b	#1,flips_remaining(a0)
		bcc.s	Player_JumpFlipSet
		clr.b	flips_remaining(a0)
		moveq	#0,d0
; loc_11EE6:
Player_JumpFlipSet:
		move.b	d0,flip_angle(a0)

locret_11EEA:
		rts
; End of function Player_JumpAngle


; ---------------------------------------------------------------------------
; Subroutine for Sonic to interact with the floor and walls when he's in the air
; ---------------------------------------------------------------------------

; =============== S U B R O U T I N E =======================================

; sub_11EEC: Player_DoLevelCollision:
SonicKnux_DoLevelCollision:
		move.l	(Primary_collision_addr).w,(Collision_addr).w
		cmpi.b	#$C,top_solid_bit(a0)
		beq.s	loc_11F00
		move.l	(Secondary_collision_addr).w,(Collision_addr).w

loc_11F00:
		move.b	lrb_solid_bit(a0),d5
		move.w	x_vel(a0),d1
		move.w	y_vel(a0),d2
		jsr	GetArcTan.w
		subi.b	#$20,d0
		andi.b	#$C0,d0
		cmpi.b	#$40,d0
		beq.w	Player_HitLeftWall
		cmpi.b	#$80,d0
		beq.w	Player_HitCeilingAndWalls
		cmpi.b	#$C0,d0
		beq.w	loc_12102
		jsr	CheckLeftWallDist.w
		tst.w	d1
		bpl.s	loc_11F44
		sub.w	d1,x_pos(a0)
		move.w	#0,x_vel(a0)	; stop Sonic since he hit a wall

loc_11F44:
		jsr	CheckRightWallDist.w
		tst.w	d1
		bpl.s	loc_11F56
		add.w	d1,x_pos(a0)
		move.w	#0,x_vel(a0)	; stop Sonic since he hit a wall

loc_11F56:
		bsr.w	sub_11FD6
		tst.w	d1
		bpl.s	locret_11FD4
		move.b	y_vel(a0),d2
		addq.b	#8,d2
		neg.b	d2
		cmp.b	d2,d1
		bge.s	loc_11F6E
		cmp.b	d2,d0
		blt.s	locret_11FD4

loc_11F6E:
		move.b	d3,angle(a0)
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_11F7A
		neg.w	d1

loc_11F7A:
		add.w	d1,y_pos(a0)
		move.b	d3,d0
		addi.b	#$20,d0
		andi.b	#$40,d0
		bne.s	loc_11FAE
		move.b	d3,d0
		addi.b	#$10,d0
		andi.b	#$20,d0
		beq.s	loc_11F9C
		asr	y_vel(a0)
		bra.s	loc_11FC2
; ---------------------------------------------------------------------------

loc_11F9C:
		clr.w	y_vel(a0)
		move.w	x_vel(a0),ground_vel(a0)
		bra.w	Player_TouchFloor_Check_Spindash
; ---------------------------------------------------------------------------

loc_11FAE:
		clr.w	x_vel(a0) ; stop Sonic since he hit a wall
		cmpi.w	#$FC0,y_vel(a0)
		ble.s	loc_11FC2
		move.w	#$FC0,y_vel(a0)

loc_11FC2:

		bsr.w	Player_TouchFloor_Check_Spindash
		move.w	y_vel(a0),ground_vel(a0)
		tst.b	d3
		bpl.s	locret_11FD4
		neg.w	ground_vel(a0)

locret_11FD4:

		rts
; End of function SonicKnux_DoLevelCollision


; =============== S U B R O U T I N E =======================================


sub_11FD6:
		tst.b	(Reverse_gravity_flag).w
		beq.w	Sonic_CheckFloor
		bsr.w	Sonic_CheckCeiling2
		addi.b	#$40,d3
		neg.b	d3
		subi.b	#$40,d3
		rts
; End of function sub_11FD6


; =============== S U B R O U T I N E =======================================


sub_11FEE:

		tst.b	(Reverse_gravity_flag).w
		beq.w	Sonic_CheckCeiling
		bsr.w	Sonic_CheckFloor2
		addi.b	#$40,d3
		neg.b	d3
		subi.b	#$40,d3
		rts
; End of function sub_11FEE


; =============== S U B R O U T I N E =======================================

; sub_12006:
ChooseChkFloorEdge:					; Sonic_Move+158p ...
		tst.b	(Reverse_gravity_flag).w
		beq.w	ChkFloorEdge_Part2
		bra.w	ChkFloorEdge_ReverseGravity
; End of function ChooseChkFloorEdge

; ---------------------------------------------------------------------------
; loc_12012:
Player_HitLeftWall:
		jsr	CheckLeftWallDist.w
		tst.w	d1
		bpl.s	Player_HitCeiling ; branch if distance is positive (not inside wall)
		sub.w	d1,x_pos(a0)
		clr.w	x_vel(a0) ; stop Sonic since he hit a wall
		move.w	y_vel(a0),ground_vel(a0)
; loc_1202A:
Player_HitCeiling:
		bsr.w	sub_11FEE
		tst.w	d1
		bpl.s	loc_12068	; branch if distance is positive (not inside ceiling)
		neg.w	d1
		cmpi.w	#$14,d1
		bhs.s	loc_12054
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_12042
		neg.w	d1

loc_12042:
		add.w	d1,y_pos(a0)
		tst.w	y_vel(a0)
		bpl.s	locret_12052
		clr.w	y_vel(a0) ; stop Sonic in y since he hit a ceiling

locret_12052:
		rts
; ---------------------------------------------------------------------------

loc_12054:
		jsr	CheckRightWallDist.w
		tst.w	d1
		bpl.s	locret_12066
		add.w	d1,$10(a0)
		clr.w	$18(a0)

locret_12066:
locret_1209C:
		rts
; ---------------------------------------------------------------------------

loc_12068:
		tst.b	(WindTunnel_flag).w
		bne.s	loc_12074
		tst.w	$1A(a0)
		bmi.s	locret_1209C

loc_12074:
		bsr.w	sub_11FD6
		tst.w	d1
		bpl.s	locret_1209C
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_12084
		neg.w	d1

loc_12084:
		add.w	d1,$14(a0)
		move.b	d3,$26(a0)
		clr.w	$1A(a0)
		move.w	$18(a0),$1C(a0)
		bra.w	Player_TouchFloor_Check_Spindash
; ---------------------------------------------------------------------------
; loc_1209E:
Player_HitCeilingAndWalls:
		jsr	CheckLeftWallDist.w
		tst.w	d1
		bpl.s	loc_120B0
		sub.w	d1,x_pos(a0)
		clr.w	x_vel(a0)	; stop Sonic since he hit a wall

loc_120B0:
		jsr	CheckRightWallDist.w
		tst.w	d1
		bpl.s	loc_120C2
		add.w	d1,x_pos(a0)
		clr.w	x_vel(a0)	; stop Sonic since he hit a wall

loc_120C2:
		bsr.w	sub_11FEE
		tst.w	d1
		bpl.s	locret_12100
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_120D2
		neg.w	d1

loc_120D2:
		sub.w	d1,$14(a0)
		move.b	d3,d0
		addi.b	#$20,d0
		andi.b	#$40,d0
		bne.s	loc_120EA
		clr.w	y_vel(a0) ; stop Sonic in y since he hit a ceiling
		rts
; ---------------------------------------------------------------------------

loc_120EA:
		move.b	d3,angle(a0)
		bsr.w	Player_TouchFloor_Check_Spindash
		move.w	y_vel(a0),ground_vel(a0)
		tst.b	d3
		bpl.s	locret_12100
		neg.w	ground_vel(a0)

locret_12100:

		rts
; ---------------------------------------------------------------------------

loc_12102:
		jsr	CheckRightWallDist.w
		tst.w	d1
		bpl.s	loc_1211A
		add.w	d1,$10(a0)
		move.w	#0,$18(a0)
		move.w	$1A(a0),$1C(a0)

loc_1211A:
		bsr.w	sub_11FEE
		tst.w	d1
		bpl.s	loc_1213C
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_1212A
		neg.w	d1

loc_1212A:
		sub.w	d1,$14(a0)
		tst.w	$1A(a0)
		bpl.s	locret_1213A
		clr.w	$1A(a0)

locret_1213A:
locret_12170:
		rts
; ---------------------------------------------------------------------------

loc_1213C:
		tst.b	(WindTunnel_flag).w
		bne.s	loc_12148
		tst.w	$1A(a0)
		bmi.s	locret_12170

loc_12148:
		bsr.w	sub_11FD6
		tst.w	d1
		bpl.s	locret_12170
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_12158
		neg.w	d1

loc_12158:
		add.w	d1,$14(a0)
		move.b	d3,$26(a0)
		clr.w	$1A(a0)
		move.w	$18(a0),$1C(a0)

; =============== S U B R O U T I N E =======================================


Player_TouchFloor_Check_Spindash:
		tst.b	$3D(a0)
		bne.s	loc_121D8
		clr.b	$20(a0)


; =============== S U B R O U T I N E =======================================


Player_TouchFloor:
		cmpi.b	#1,$38(a0)
		beq.w	Tails_TouchFloor
;		cmpi.b	#2,$38(a0)
;		beq.w	Knux_TouchFloor
;Sonic_TouchFloor:
		move.b	$1E(a0),d0
		move.w	$44(a0),$1E(a0)		; NAT: some micro-optimizations
;		move.b	$45(a0),$1F(a0)
		bclr	#2,$2A(a0)
		beq.s	loc_121D8
		clr.b	$20(a0)
		sub.b	$44(a0),d0
		ext.w	d0
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_121C4
		neg.w	d0

loc_121C4:
		move.w	d0,-(sp)
		move.b	$26(a0),d0
		addi.b	#$40,d0
		bpl.s	loc_121D2
		neg.w	(sp)

loc_121D2:
		move.w	(sp)+,d0
		add.w	d0,$14(a0)

loc_121D8:
		and.b	#%11001101,$2A(a0)	; <- apparently $32^$FF does not work
;		bclr	#1,$2A(a0)
;		bclr	#5,$2A(a0)
;		bclr	#4,$2A(a0)
		clr.b	$40(a0)
		clr.w	(Chain_bonus_counter).w
		clr.b	$27(a0)
		clr.b	$2D(a0)
		clr.b	$30(a0)
		clr.b	$39(a0)

		tst.b	$2F(a0)
		beq.s	locret_12230
;		tst.b	$38(a0)
;		bne.s	loc_1222A
;		tst.b	(Super_Sonic_Knux_flag).w
;		bne.s	loc_1222A
		btst	#6,$2B(a0)
		beq.s	loc_1222A
		bsr.s	BubbleShield_Bounce

loc_1222A:
		clr.b	$2F(a0)

locret_12230:
		rts
; End of function Player_TouchFloor


; =============== S U B R O U T I N E =======================================


BubbleShield_Bounce:
		movem.l	d1-d2,-(sp)
		move.w	#$780,d2
		btst	#6,$2A(a0)
		beq.s	loc_12246
		move.w	#$400,d2

loc_12246:
		moveq	#0,d0
		move.b	$26(a0),d0
		subi.b	#$40,d0
		jsr	GetSineCosine.w
		muls.w	d2,d1
		asr.l	#8,d1
		add.w	d1,$18(a0)
		muls.w	d2,d0
		asr.l	#8,d0
		add.w	d0,$1A(a0)
		movem.l	(sp)+,d1-d2
		bset	#1,$2A(a0)
		bclr	#5,$2A(a0)
		move.b	#1,$40(a0)
		clr.b	$3C(a0)
		move.b	#$E,$1E(a0)
		move.b	#7,$1F(a0)
		move.b	#2,$20(a0)
		bset	#2,$2A(a0)
		move.b	$1E(a0),d0
		sub.b	$44(a0),d0
		ext.w	d0
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_122AA
		neg.w	d0

loc_122AA:
		sub.w	d0,$14(a0)
		moveq	#$44,d0
		cmp.w	#Player_1,a0			; NAT: Check if Sonic
		bne.s	.tails				; if not, branch
		move.b	#2,Shield+anim.w
		jmp	Play_Sound_2.w

.tails		move.b	#2,Shield_P2+anim.w
		jmp	Play_Sound_2.w
; ---------------------------------------------------------------------------

loc_122BE:
		jsr	Sonic_Water(pc)
		tst.b	(Debug_mode_flag).w
		beq.s	loc_122D8
		btst	#4,(Ctrl_1_pressed).w
		beq.s	loc_122D8
		st	(Debug_On).w
		clr.b	(Ctrl_1_locked).w
		rts
; ---------------------------------------------------------------------------

loc_122D8:

		jsr	MoveSprite_TestGravity2.w
		addi.w	#$30,$1A(a0)
		btst	#6,$2A(a0)
		beq.s	loc_122F2
		subi.w	#$20,$1A(a0)

loc_122F2:
		cmpi.w	#-$100,(Camera_min_Y_pos).w
		bne.s	loc_12302
		move.w	(Screen_Y_wrap_value).w,d0
		and.w	d0,$14(a0)

loc_12302:
		bsr.w	sub_12318
		bsr.w	Player_LevelBound
		bsr.w	Sonic_RecordPos
		bsr.w	sub_125E0
		jmp	Draw_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_12318:
		tst.b	(Border_Bottom_Death).w
		bne.s	loc_12344
		tst.b	(Reverse_gravity_flag).w
		bne.s	loc_12336
		move.w	(Camera_max_Y_pos).w,d0
		addi.w	#$E0,d0
		cmp.w	$14(a0),d0
		blt.w	loc_1238A
		bra.s	loc_12344
; ---------------------------------------------------------------------------

loc_12336:
		move.w	(Camera_min_Y_pos).w,d0
		cmp.w	$14(a0),d0
		blt.s	loc_12344
		bra.w	loc_1238A
; ---------------------------------------------------------------------------

loc_12344:

		movem.l	a4-a6,-(sp)
		bsr.w	SonicKnux_DoLevelCollision
		movem.l	(sp)+,a4-a6
		btst	#1,$2A(a0)
		bne.s	locret_12388
		moveq	#0,d0
		move.w	d0,$1A(a0)
		move.w	d0,$18(a0)
		move.w	d0,$1C(a0)
		move.b	d0,$2E(a0)
		move.b	#0,$20(a0)
		move.w	#prio(2),8(a0)
		move.b	#2,5(a0)
		move.b	#$78,$34(a0)
		move.b	#0,$3D(a0)

locret_12388:
		rts
; ---------------------------------------------------------------------------

loc_1238A:

		jmp	(Kill_Character).l
; End of function sub_12318

; ---------------------------------------------------------------------------

loc_12390:
	PlatNoStand %11010111
		bsr.s	sub_123C2
		jsr	MoveSprite_TestGravity.w
		bsr.w	Sonic_RecordPos
		bsr.w	sub_125E0
		jmp	Draw_Sprite.w

; =============== S U B R O U T I N E =======================================

sub_123C2:
		move.b	#0,$3D(a0)
		move.w	$14(a0),d0			; NAT: get player pos
		sub.w	(Camera_Y_pos).w,d0		; NAT: sub camera position
		add.w	#$40,d0				; NAT: $40 pixels above screen
		cmp.w	#$160,d0			; NAT: $40 below
		bhs.s	loc_12432			; NAT: if offscreen, respawn

		move.w	$10(a0),d0			; NAT: get player pos
		sub.w	(Camera_X_pos).w,d0		; NAT: sub camera position
		add.w	#$20,d0				; NAT: $20 pixels left of screen
		cmp.w	#$180,d0			; NAT: $20 right
		blo.s	Locret_124C6			; NAT: if onscreen, do not respawn

loc_12432:
		move.b	#8,5(a0)
		move.w	#$3C10,$3E(a0)		; NAT1: Changed type
		move.b	#0,(NoReset_RespawnTbl).w

		clr.b	(Update_HUD_timer).w
		jmp	Player_ResetAirTimer

Locret_124C6:
		rts
; ---------------------------------------------------------------------------

loc_124C8:
		move.b	#2,5(a0)
		cmpa.w	#Player_1,a0
		bne.s	loc_12502
		move.b	#0,(Scroll_lock).w
		clr.b	(Ring_count).w
		bra.s	loc_1252A
; ---------------------------------------------------------------------------

loc_12502:
		clr.b	(Ring_count+1).w

loc_1252A:
		move.b	#0,$2E(a0)
		move.b	#5,$20(a0)
		move.w	#0,$18(a0)
		move.w	#0,$1A(a0)
		move.w	#0,$1C(a0)
		move.b	#2,$2A(a0)
		move.w	#0,$32(a0)
		move.w	#0,$3E(a0)
		clr.b	$36(a0)
		lea	(Character_Speeds).l,a1
		moveq	#0,d0
		move.b	$38(a0),d0
		lsl.w	#3,d0
		lea	(a1,d0.w),a1
		move.w	(a1)+,(a4)
		move.w	(a1)+,2(a4)
		move.w	(a1)+,4(a4)
		rts

; ---------------------------------------------------------------------------

SResetTimer:
		move.b	#$10,$3F(a0)		; reset spawn wait delay

locret_1258E:
		rts

loc_1257C:
		lea	Player_2.w,a1		; get player 2
		move.b	#$1E,$2C(a0)		; reset air
		btst	#6,OptionsBits.w	; check if options set
		beq.s	.normaltype		; if no, branch

		cmp.b	#6,5(a1)		; check if dead
		beq.s	locret_1258E		; if is, branch;
		bge.w	ResetPlayerPoses	; if waiting to respawn, do it

		move.b	Ctrl_1_pressed.w,d0	; get held buttons
		and.b	#$70,d0			; check if A/B/C is being held down
		bne.s	.spawn			; if so, spawn
		rts

.normaltype	subq.b	#1,$3E(a0)		; sub 1 from delay
		bpl.s	locret_1258E		; if not end, branch

		cmp.b	#6,5(a1)		; check if dead
		beq.s	locret_1258E		; if is, branch
		bge.w	ResetPlayerPoses	; if waiting to respawn, do it

.notdead	clr.b	$3E(a0)			; clear delay (make sure it does not underflow to positive!!!)
		cmp.b	#4,5(a1)		; check if another player is hurt
		beq.s	SResetTimer		; if is, branch
		cmp.b	#7,anim(a1)		; check if another player is ducking
		beq.s	SResetTimer		; if so, brah
		tst.b	$2E(a1)			; check if another player is carried
		bne.s	SResetTimer		; if so, reset spawn delay
		tst.b	$3D(a1)			; check if another player is spindashing
		bne.s	SResetTimer		; if so, reset spawn delay
		tst.b	$2A(a1)			; check if no-spawn flag is set
		bmi.s	SResetTimer		; if so, reset spawn delay

		tst.b	$40(a1)			; check if another player is jumping
		beq.s	.nojmp			; if not, skip
		move.b	Ctrl_2_held_logical.w,d0; get held buttons
		and.b	#$70,d0			; check if A/B/C is being held down
		bne.s	SResetTimer		; if so, reset timer

.nojmp		subq.b	#1,$3F(a0)		; sub 1 from spawn delay
		bne.s	locret_1258E		; if not over, branch
.spawn	CheckPlatStuff %11010111, %01010000

		move.b	4(a1),4(a0)
		move.b	#2,5(a0)
		movem.l	$10(a1),d0-d3
		movem.l	d0-d3,$10(a0)

		move.w	6(a1),6(a0)
		move.b	$20(a1),$20(a0)
		st	$21(a0)
		move.l	$26(a1),$26(a0)
		move.l	$2C(a1),$2C(a0)
		move.l	$30(a1),$30(a0)
		move.b	$34(a1),$34(a0)
		move.b	$37(a1),$37(a0)
		move.b	$39(a1),$39(a0)
		move.l	$3A(a1),$3A(a0)
		move.w	$40(a1),$40(a0)
		move.l	$44(a1),$44(a0)

		move.l	#Obj_Sonic_FixPlat,(a0)		; fix next frame
		move.b	Ring_count+1.w,Ring_count.w	; copy rings count
		clr.b	Scroll_lock.w			; clear scrolling locks
		clr.b	Ctrl_1_locked.w			; clear locked ctrl
		ori.b	#1,Update_HUD_ring_count.w	; update ring count
		st	(Sonic_Knux_Mapnum).w		; clear frame
		move.w	Pos_table_index_P2.w,Pos_table_index.w; copy pos table index

		lea	Pos_table_P2.w,a2		; load source pos table to a2
		lea	Pos_table.w,a3			; load destination pos table to a3
		moveq	#$100/4-1,d0			; load copy count

.copytbl	move.l	(a2)+,(a3)+			; copy entire pos table over
		dbf	d0, .copytbl

;		cmp.b	#4,PlayMode.w			; check if tag mode
;		bne.s	.notag				; if no, branch
;		move.b	#Tag_Cool,TagCool.w		; NAT: set tag cooldown
;		cmp.b	#2,TagWinner.w			; NAT: check if tails is winrar
;		beq.s	.notag				; NAT: If is, branch
;		move.b	#2,TagWinner.w			; NAT: Set tails as winrar
;		moveq	#Tag_ChgSFX,d0			; NAT: Get Blue Sphere sfx
;		jsr	Play_Sound.w			; NAT: Play sound

.notag		and.w	#$7FFF,$A(a0)			; clear high plane
		tst.w	$A(a1)				; check if other player is high
		bpl.s	.save				; if not, skip
		or.w	#$8000,$A(a0)			; get high

.save		move.w	$A(a0),SavedTileP1.w		; save tile address

ResetPlayerStatus:
		lea	Sonic_Knux_top_speed.w,a4
		lea	Player_1.w,a1
		bsr.s	.do
		lea	Tails_top_speed.w,a4
		lea	Player_2.w,a1

.do		move.w	#$600,(a4)
		move.w	#$C,2(a4)
		move.w	#$80,4(a4)
		bclr	#6,$2A(a1)			; set above water

		moveq	#$24,d0
		move.b	d0,$2C(a1)			; reset air
		move.b	d0,$34(a1)			; give invinciblity time

		btst	#2,$2B(a1)			; check for speed shoes
		beq.s	.noshoes			; if no, branch
		move.w	#$C00,(a4)
		move.w	#$18,2(a4)
		move.w	#$80,4(a4)

.noshoes	tst.b	Water_flag.w			; does level have water?
		beq.s	.rts				; if not, branch
		move.w	Water_level.w,d0		; Natsumi <3 MarkeyJester
		cmp.w	y_pos(a1),d0			; is Sonic above the water?
		bge.s	.rts				; if yes, branch

		move.w	#$300,(a4)
		move.w	#6,2(a4)
		move.w	#$40,4(a4)
		bset	#6,$2A(a1)			; set underwater

		btst	#2,$2B(a1)			; check for speed shoes
		beq.s	.rts				; if no, branch
		move.w	#$500,(a4)
		move.w	#$A,2(a4)
		move.w	#$60,4(a4)
.rts		rts

ResetPlayerPoses:
		lea	Player_1+$16.w,a1
		moveq	#$34/4-1,d0
.dels		clr.l	(a1)+
		dbf	d0,.dels

		lea	Player_2+$16.w,a1
		moveq	#$34/4-1,d0
.delt		clr.l	(a1)+
		dbf	d0,.delt

		tst.l	PlayerSpawn.w			; check if custom spawn pos is set
		beq.s	.nocustom			; if not, use default
		bmi.s	ResetPlayerStatus.rts		; if negative, do not respawn right now
		move.w	PlayerSpawn.w,d0		; load x-pos
		move.w	PlayerSpawn+2.w,d1		; load y-pos
		bra.s	.setspawn

.nocustom;	move.l	BoxLoc_Play1.w,d0		; load player 1's current list address
;		cmp.l	BoxLoc_Play2.w,d0		; compare it to player 2's
;		blt.s	.notails			; if p2 is on lower priority, branch
	;	cmp.b	#2,BoxWinner.w 			; check what player is winning
	;	bne.s	.notails			; if Tails is not winning, branch
;		move.l	BoxLoc_Play2.w,d0		; load player 2's current list address

.notails;	move.l	d0,a2				; copy box location to a2
;		cmp.w	#$7FFF,-2(a2)			; check if the box was the fallback box
;		blo.s	.isvalid			; branch if not
		move.l	BoxLoc_Valid.w,d0		; get last valid box loc to d0

.isvalid	move.l	(BoxLoc_Level).w,a1		; get the start of the address from actual address
		subq.w	#8,d0				; align?
		sub.l	a1,d0				; sub it from current address
		and.l	#$FFFF,d0			; for DIVU

		divu	#10,d0				; divide by 10
		add.w	d0,d0				; double value
		add.w	d0,d0				; quadruple value
		add.w	SpawnBoxPos.w,d0		; add offset
		add.w	d0,a1				; get actual data offset
		move.w	(a1)+,d0			; x-pos to save
		move.w	(a1)+,d1			; y-pos to save

.setspawn	lea	Player_1.w,a1
		lea	Player_2.w,a2
		move.w	d0,$10(a1)
		move.w	d0,$10(a2)
		move.w	d1,$14(a1)
		move.w	d1,$14(a2)
		clr.b	5(a1)
		clr.b	5(a2)
		clr.w	Ring_count.w			; clear ring count
		ori.b	#1,Update_HUD_ring_count.w	; update ring count

		move.b	#Tag_Cool,SpawnWait.w		; NAT: Also sets TagCool
		jsr	ResetPlayerStatus(pc)
		jmp	CheckRightMusicTrack.w		; also reset
; ---------------------------------------------------------------------------

loc_12590:

		tst.w	(Camera_RAM).w
		bne.s	loc_125A2
		tst.w	(V_scroll_amount).w
		bne.s	loc_125A2
		move.b	#2,5(a0)

loc_125A2:

		bsr.w	sub_125E0
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_125AC:
		tst.b	(Debug_mode_flag).w
		beq.s	loc_125C6
		btst	#4,(Ctrl_1_pressed).w
		beq.s	loc_125C6
		st	(Debug_On).w
		clr.b	(Ctrl_1_locked).w
		rts
; ---------------------------------------------------------------------------

loc_125C6:

		jsr	MoveSprite_TestGravity2.w
		addi.w	#$10,$1A(a0)
		bsr.w	Sonic_RecordPos
		bsr.w	sub_125E0
		jmp	Draw_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_125E0:

		tst.w	(Competition_mode).w
		bne.s	loc_125F8
		bsr.s	Animate_Sonic
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_125F4
		eori.b	#2,4(a0)

loc_125F4:
		bra.w	Sonic_Load_PLC
; ---------------------------------------------------------------------------

loc_125F8:
		bsr.w	Animate_SonicKnuckles_2P
		bra.w	SonicKnuckles2P_Load_PLC
; End of function sub_125E0


; =============== S U B R O U T I N E =======================================


Animate_Sonic:

		lea	(AniSonic).l,a1
		tst.b	(Super_Sonic_Knux_flag).w
		beq.s	loc_12612
		lea	(AniSuperSonic).l,a1

loc_12612:
		moveq	#0,d0
		move.b	$20(a0),d0
		cmp.b	$21(a0),d0
		beq.s	loc_12634
		move.b	d0,$21(a0)
		move.b	#0,$23(a0)
		move.b	#0,$24(a0)
		bclr	#5,$2A(a0)

loc_12634:
		add.w	d0,d0
		adda.w	(a1,d0.w),a1
		move.b	(a1),d0
		bmi.s	loc_126A4
		move.b	$2A(a0),d1
		andi.b	#1,d1
		andi.b	#-4,4(a0)
		or.b	d1,4(a0)
		subq.b	#1,$24(a0)
		bpl.s	locret_12672
		move.b	d0,$24(a0)

loc_1265A:
					; Animate_Sonic+4A2j
		moveq	#0,d1
		move.b	$23(a0),d1
		move.b	1(a1,d1.w),d0
		cmpi.b	#-4,d0
		bhs.s	loc_12674

loc_1266A:
					; Animate_Sonic+96j
		move.b	d0,$22(a0)
		addq.b	#1,$23(a0)

locret_12672:
					; Animate_Sonic+440j ...
		rts
; ---------------------------------------------------------------------------

loc_12674:
		addq.b	#1,d0
		bne.s	loc_12684
		move.b	#0,$23(a0)
		move.b	1(a1),d0
		bra.s	loc_1266A
; ---------------------------------------------------------------------------

loc_12684:
		addq.b	#1,d0
		bne.s	loc_12698
		move.b	2(a1,d1.w),d0
		sub.b	d0,$23(a0)
		sub.b	d0,d1
		move.b	1(a1,d1.w),d0
		bra.s	loc_1266A
; ---------------------------------------------------------------------------

loc_12698:
		addq.b	#1,d0
		bne.s	locret_126A2
		move.b	2(a1,d1.w),$20(a0)

locret_126A2:
		rts
; ---------------------------------------------------------------------------

loc_126A4:
		addq.b	#1,d0
		bne.w	loc_12A2A
		moveq	#0,d0
		tst.b	$2D(a0)
		bmi.w	loc_127C0
		move.b	$27(a0),d0
		bne.w	loc_127C0
		moveq	#0,d1
		move.b	$26(a0),d0
		bmi.s	loc_126C8
		beq.s	loc_126C8
		subq.b	#1,d0

loc_126C8:
					; Animate_Sonic+C4j
		move.b	$2A(a0),d2
		andi.b	#1,d2
		bne.s	loc_126D4
		not.b	d0

loc_126D4:
		addi.b	#$10,d0
		bpl.s	loc_126DC
		moveq	#3,d1

loc_126DC:
		andi.b	#-4,4(a0)
		eor.b	d1,d2
		or.b	d2,4(a0)
		btst	#5,$2A(a0)
		bne.w	loc_12A72
		lsr.b	#4,d0
		andi.b	#6,d0
		move.w	$1C(a0),d2
		bpl.s	loc_12700
		neg.w	d2

loc_12700:
		tst.b	$2B(a0)
		bpl.w	loc_1270A
		add.w	d2,d2

loc_1270A:
		tst.b	(Super_Sonic_Knux_flag).w
		bne.s	loc_12766
		lea	(byte_12AF8).l,a1
		cmpi.w	#$600,d2
		bhs.s	loc_12724
		lea	(byte_12AEE).l,a1
		add.b	d0,d0

loc_12724:
		add.b	d0,d0
		move.b	d0,d3
		moveq	#0,d1
		move.b	$23(a0),d1
		move.b	1(a1,d1.w),d0
		cmpi.b	#-1,d0
		bne.s	loc_12742
		move.b	#0,$23(a0)
		move.b	1(a1),d0

loc_12742:
		move.b	d0,$22(a0)
		add.b	d3,$22(a0)
		subq.b	#1,$24(a0)
		bpl.s	locret_12764
		neg.w	d2
		addi.w	#$800,d2
		bpl.s	loc_1275A
		moveq	#0,d2

loc_1275A:
		lsr.w	#8,d2
		move.b	d2,$24(a0)
		addq.b	#1,$23(a0)

locret_12764:
		rts
; ---------------------------------------------------------------------------

loc_12766:
		lea	(byte_12C84).l,a1
		cmpi.w	#$800,d2
		bhs.s	loc_1277E
		lea	(byte_12C7A).l,a1
		add.b	d0,d0
		add.b	d0,d0
		bra.s	loc_12780
; ---------------------------------------------------------------------------

loc_1277E:
		add.b	d0,d0

loc_12780:
		move.b	d0,d3
		moveq	#0,d1
		move.b	$23(a0),d1
		move.b	1(a1,d1.w),d0
		cmpi.b	#-1,d0
		bne.s	loc_1279C
		move.b	#0,$23(a0)
		move.b	1(a1),d0

loc_1279C:
		move.b	d0,$22(a0)
		add.b	d3,$22(a0)
		subq.b	#1,$24(a0)
		bpl.s	locret_127BE
		neg.w	d2
		addi.w	#$800,d2
		bpl.s	loc_127B4
		moveq	#0,d2

loc_127B4:
		lsr.w	#8,d2
		move.b	d2,$24(a0)
		addq.b	#1,$23(a0)

locret_127BE:
		rts
; ---------------------------------------------------------------------------

loc_127C0:
					; Animate_Sonic+B8j ...
		move.b	$2D(a0),d1
		andi.w	#$7F,d1
		bne.w	loc_12872
		move.b	$27(a0),d0
		moveq	#0,d1
		move.b	$2A(a0),d2
		andi.b	#1,d2
		bne.s	loc_1281E
		andi.b	#-4,4(a0)
		tst.b	$2D(a0)
		bpl.s	loc_12806
		cmpi.b	#$B,(Current_zone).w
		beq.s	loc_1280A
		cmpi.b	#4,(Current_zone).w
		beq.s	loc_1280A
		ori.b	#2,4(a0)
		neg.b	d0
		addi.b	#$8F,d0
		bra.s	loc_1280A
; ---------------------------------------------------------------------------

loc_12806:
		addi.b	#$B,d0

loc_1280A:
					; Animate_Sonic+1F6j ...
		divu.w	#$16,d0
		addi.b	#$31,d0
		move.b	d0,$22(a0)
		move.b	#0,$24(a0)
		rts
; ---------------------------------------------------------------------------

loc_1281E:
		andi.b	#-4,4(a0)
		tst.b	$2D(a0)
		bpl.s	loc_1284E
		cmpi.b	#4,(Current_zone).w
		beq.s	loc_12842
		cmpi.b	#$B,(Current_zone).w
		beq.s	loc_12842
		cmpi.b	#7,(Current_zone).w
		bne.s	loc_1284E

loc_12842:
					; Animate_Sonic+238j
		ori.b	#1,4(a0)
		addi.b	#$B,d0
		bra.s	loc_1285A
; ---------------------------------------------------------------------------

loc_1284E:
					; Animate_Sonic+240j
		ori.b	#3,4(a0)
		neg.b	d0
		addi.b	#$8F,d0

loc_1285A:
		divu.w	#$16,d0
		addi.b	#$31,d0
		move.b	d0,$22(a0)
		move.b	#0,$24(a0)
		rts
; ---------------------------------------------------------------------------
byte_1286E:	dc.b 0
		dc.b $3D
		dc.b $49
		dc.b $49
; ---------------------------------------------------------------------------

loc_12872:
		move.b	byte_1286E(pc,d1.w),d3
		cmpi.b	#1,d1
		bne.s	loc_128CA
		move.b	$27(a0),d0
		moveq	#0,d1
		move.b	$2A(a0),d2
		andi.b	#1,d2
		bne.s	loc_128A8
		andi.b	#-4,4(a0)
		addi.b	#-8,d0
		divu.w	#$16,d0
		add.b	d3,d0
		move.b	d0,$22(a0)
		move.b	#0,$24(a0)
		rts
; ---------------------------------------------------------------------------

loc_128A8:
		andi.b	#-4,4(a0)
		ori.b	#1,4(a0)
		addi.b	#-8,d0
		divu.w	#$16,d0
		add.b	d3,d0
		move.b	d0,$22(a0)
		move.b	#0,$24(a0)
		rts
; ---------------------------------------------------------------------------

loc_128CA:
		cmpi.b	#2,d1
		bne.s	loc_12920
		move.b	$27(a0),d0
		moveq	#0,d1
		move.b	$2A(a0),d2
		andi.b	#1,d2
		bne.s	loc_128FC
		andi.b	#-4,4(a0)
		addi.b	#$B,d0
		divu.w	#$16,d0
		add.b	d3,d0
		move.b	d0,$22(a0)
		move.b	#0,$24(a0)
		rts
; ---------------------------------------------------------------------------

loc_128FC:
		andi.b	#-4,4(a0)
		ori.b	#3,4(a0)
		neg.b	d0
		addi.b	#$8F,d0
		divu.w	#$16,d0
		add.b	d3,d0
		move.b	d0,$22(a0)
		move.b	#0,$24(a0)
		rts
; ---------------------------------------------------------------------------

loc_12920:
		cmpi.b	#3,d1
		bne.s	loc_1297C
		move.b	$27(a0),d0
		moveq	#0,d1
		move.b	$2A(a0),d2
		andi.b	#1,d2
		bne.s	loc_1295A
		andi.b	#-4,4(a0)
		ori.b	#2,4(a0)
		neg.b	d0
		addi.b	#$8F,d0
		divu.w	#$16,d0
		add.b	d3,d0
		move.b	d0,$22(a0)
		move.b	#0,$24(a0)
		rts
; ---------------------------------------------------------------------------

loc_1295A:
		andi.b	#-4,4(a0)
		ori.b	#1,4(a0)
		addi.b	#$B,d0
		divu.w	#$16,d0
		add.b	d3,d0
		move.b	d0,$22(a0)
		move.b	#0,$24(a0)
		rts
; ---------------------------------------------------------------------------

loc_1297C:
		cmpi.b	#4,d1
		bne.s	loc_129F6
		move.b	$27(a0),d0
		moveq	#0,d1
		move.b	$2A(a0),d2
		andi.b	#1,d2
		bne.s	loc_129BC
		andi.b	#-4,4(a0)
		tst.b	$2D(a0)
		bpl.s	loc_129A4
		addi.b	#$B,d0
		bra.s	loc_129A8
; ---------------------------------------------------------------------------

loc_129A4:
		addi.b	#$B,d0

loc_129A8:
		divu.w	#$16,d0
		addi.b	#$31,d0
		move.b	d0,$22(a0)
		move.b	#0,$24(a0)
		rts
; ---------------------------------------------------------------------------

loc_129BC:
		andi.b	#-4,4(a0)
		tst.b	$2D(a0)
		bpl.s	loc_129D6
		ori.b	#3,4(a0)
		neg.b	d0
		addi.b	#$8F,d0
		bra.s	loc_129E2
; ---------------------------------------------------------------------------

loc_129D6:
		ori.b	#3,4(a0)
		neg.b	d0
		addi.b	#$8F,d0

loc_129E2:
		divu.w	#$16,d0
		addi.b	#$31,d0
		move.b	d0,$22(a0)
		move.b	#0,$24(a0)
		rts
; ---------------------------------------------------------------------------

loc_129F6:
		move.b	$27(a0),d0
		andi.b	#-4,4(a0)
		moveq	#0,d1
		move.b	$2A(a0),d2
		andi.b	#1,d2
		beq.s	loc_12A12
		ori.b	#1,4(a0)

loc_12A12:
		addi.b	#$B,d0
		divu.w	#$16,d0
		addi.b	#$31,d0
		move.b	d0,$22(a0)
		move.b	#0,$24(a0)
		rts
; ---------------------------------------------------------------------------

loc_12A2A:
		move.b	$2A(a0),d1
		andi.b	#1,d1
		andi.b	#-4,4(a0)
		or.b	d1,4(a0)
		subq.b	#1,$24(a0)
		bpl.w	locret_12672
		move.w	$1C(a0),d2
		bpl.s	loc_12A4C
		neg.w	d2

loc_12A4C:
		lea	(byte_12B0C).l,a1
		cmpi.w	#$600,d2
		bhs.s	loc_12A5E
		lea	(byte_12B02).l,a1

loc_12A5E:
		neg.w	d2
		addi.w	#$400,d2
		bpl.s	loc_12A68
		moveq	#0,d2

loc_12A68:
		lsr.w	#8,d2
		move.b	d2,$24(a0)
		bra.w	loc_1265A
; ---------------------------------------------------------------------------

loc_12A72:
		subq.b	#1,$24(a0)
		bpl.w	locret_12672
		move.w	$1C(a0),d2
		bmi.s	loc_12A82
		neg.w	d2

loc_12A82:
		addi.w	#$800,d2
		bpl.s	loc_12A8A
		moveq	#0,d2

loc_12A8A:
		lsr.w	#6,d2
		move.b	d2,$24(a0)
		lea	(byte_12B16).l,a1
		tst.b	(Super_Sonic_Knux_flag).w
		beq.s	loc_12AA2
		lea	(byte_12C8E).l,a1

loc_12AA2:
		bra.w	loc_1265A
; End of function Animate_Sonic

; ---------------------------------------------------------------------------
AniSonic:	include "General/Sprites/Sonic/Anim - Sonic.asm"

; =============== S U B R O U T I N E =======================================

Sonic_Load_PLC:

		moveq	#0,d0
		move.b	$22(a0),d0

Sonic_Load_PLC2:
		cmp.b	(Sonic_Knux_Mapnum).w,d0
		beq.s	locret_12D20
		move.b	d0,(Sonic_Knux_Mapnum).w
		lea	(PLC_Sonic).l,a2
	;	tst.b	(Super_Sonic_Knux_flag).w
	;	beq.s	loc_12CD6
	;	lea	(PLC_SuperSonic).l,a2

loc_12CD6:
		add.w	d0,d0
		adda.w	(a2,d0.w),a2
		move.w	(a2)+,d5
		subq.w	#1,d5
		bmi.s	locret_12D20
		move.w	#$D000,d4
		move.l	#ArtUnc_Sonic,d6
		cmpi.w	#$1B4,d0
		blo.s	loc_12CF8
		move.l	#ArtUnc_Sonic_Extra,d6

loc_12CF8:
					; Sonic_Load_PLC+68j
		moveq	#0,d1
		move.w	(a2)+,d1
		move.w	d1,d3
		lsr.w	#8,d3
		andi.w	#$F0,d3
		addi.w	#$10,d3
		andi.w	#$FFF,d1
		lsl.l	#5,d1
		add.l	d6,d1
		move.w	d4,d2
		add.w	d3,d4
		add.w	d3,d4
		jsr	Add_To_DMA_Queue.w
		dbf	d5,loc_12CF8

locret_12D20:
					; Sonic_Load_PLC+2Cj
		rts
; End of function Sonic_Load_PLC


; =============== S U B R O U T I N E =======================================


Tails_Carry_LoadPLC:

		tst.b	$38(a1)
		beq.s	Sonic_Load_PLC2
		cmpi.b	#1,$38(a1)
		beq.w	Tails_Load_PLC2
		bra.w	Knuckles_Load_PLC2
; End of function Tails_Carry_LoadPLC


; =============== S U B R O U T I N E =======================================


Animate_SonicKnuckles_2P:

		lea	(AniSonic2P).l,a1
		tst.b	$38(a0)
		beq.s	loc_12D48
		lea	(AniKnuckles2P).l,a1

loc_12D48:
		moveq	#0,d0
		move.b	$20(a0),d0
		cmp.b	$21(a0),d0
		beq.s	loc_12D6A
		move.b	d0,$21(a0)
		move.b	#0,$23(a0)
		move.b	#0,$24(a0)
		bclr	#5,$2A(a0)

loc_12D6A:
		add.w	d0,d0
		adda.w	(a1,d0.w),a1
		move.b	(a1),d0
		bmi.s	loc_12DDA
		move.b	$2A(a0),d1
		andi.b	#1,d1
		andi.b	#-4,4(a0)
		or.b	d1,4(a0)
		subq.b	#1,$24(a0)
		bpl.s	locret_12DA8
		move.b	d0,$24(a0)

loc_12D90:
					; Animate_SonicKnuckles_2P+24Aj
		moveq	#0,d1
		move.b	$23(a0),d1
		move.b	1(a1,d1.w),d0
		cmpi.b	#-4,d0
		bhs.s	loc_12DAA

loc_12DA0:
					; Animate_SonicKnuckles_2P+96j
		move.b	d0,$22(a0)
		addq.b	#1,$23(a0)

locret_12DA8:
					; Animate_SonicKnuckles_2P+1C2j ...
		rts
; ---------------------------------------------------------------------------

loc_12DAA:
		addq.b	#1,d0
		bne.s	loc_12DBA
		move.b	#0,$23(a0)
		move.b	1(a1),d0
		bra.s	loc_12DA0
; ---------------------------------------------------------------------------

loc_12DBA:
		addq.b	#1,d0
		bne.s	loc_12DCE
		move.b	2(a1,d1.w),d0
		sub.b	d0,$23(a0)
		sub.b	d0,d1
		move.b	1(a1,d1.w),d0
		bra.s	loc_12DA0
; ---------------------------------------------------------------------------

loc_12DCE:
		addq.b	#1,d0
		bne.s	locret_12DD8
		move.b	2(a1,d1.w),$20(a0)

locret_12DD8:
		rts
; ---------------------------------------------------------------------------

loc_12DDA:
		addq.b	#1,d0
		bne.w	loc_12EF4
		moveq	#0,d0
		move.b	$27(a0),d0
		bne.w	loc_12E8E
		moveq	#0,d1
		move.b	$26(a0),d0
		bmi.s	loc_12DF6
		beq.s	loc_12DF6
		subq.b	#1,d0

loc_12DF6:
					; Animate_SonicKnuckles_2P+BCj
		move.b	$2A(a0),d2
		andi.b	#1,d2
		bne.s	loc_12E02
		not.b	d0

loc_12E02:
		addi.b	#$10,d0
		bpl.s	loc_12E0A
		moveq	#3,d1

loc_12E0A:
		andi.b	#-4,4(a0)
		eor.b	d1,d2
		or.b	d2,4(a0)
		btst	#5,$2A(a0)
		bne.w	loc_12F3C
		lsr.b	#5,d0
		andi.b	#3,d0
		move.w	$1C(a0),d2
		bpl.s	loc_12E2E
		neg.w	d2

loc_12E2E:
		tst.b	$2B(a0)
		bpl.w	loc_12E38
		add.w	d2,d2

loc_12E38:
		move.b	d0,d3
		lea	(byte_1301A).l,a1
		cmpi.w	#$600,d2
		bhs.s	loc_12E4E
		lea	(byte_13014).l,a1
		add.b	d0,d0

loc_12E4E:
		add.b	d0,d3
		moveq	#0,d1
		move.b	$23(a0),d1
		move.b	1(a1,d1.w),d0
		cmpi.b	#-1,d0
		bne.s	loc_12E6A
		move.b	#0,$23(a0)
		move.b	1(a1),d0

loc_12E6A:
		move.b	d0,$22(a0)
		add.b	d3,$22(a0)
		subq.b	#1,$24(a0)
		bpl.s	locret_12E8C
		neg.w	d2
		addi.w	#$800,d2
		bpl.s	loc_12E82
		moveq	#0,d2

loc_12E82:
		lsr.w	#8,d2
		move.b	d2,$24(a0)
		addq.b	#1,$23(a0)

locret_12E8C:
		rts
; ---------------------------------------------------------------------------

loc_12E8E:
		move.b	$27(a0),d0
		moveq	#0,d1
		move.b	$2A(a0),d2
		andi.b	#1,d2
		bne.s	loc_12EBC
		andi.b	#-4,4(a0)
		addi.b	#$16,d0
		divu.w	#$2C,d0
		addi.b	#$15,d0
		move.b	d0,$22(a0)
		move.b	#0,$24(a0)
		rts
; ---------------------------------------------------------------------------

loc_12EBC:
		andi.b	#-4,4(a0)
		tst.b	$2D(a0)
		bpl.s	loc_12ED4
		ori.b	#1,4(a0)
		addi.b	#$16,d0
		bra.s	loc_12EE0
; ---------------------------------------------------------------------------

loc_12ED4:
		ori.b	#3,4(a0)
		neg.b	d0
		addi.b	#$9A,d0

loc_12EE0:
		divu.w	#$2C,d0
		addi.b	#$15,d0
		move.b	d0,$22(a0)
		move.b	#0,$24(a0)
		rts
; ---------------------------------------------------------------------------

loc_12EF4:
		subq.b	#1,$24(a0)
		bpl.w	locret_12DA8
		move.w	$1C(a0),d2
		bpl.s	loc_12F04
		neg.w	d2

loc_12F04:
		lea	(byte_13026).l,a1
		cmpi.w	#$600,d2
		bhs.s	loc_12F16
		lea	(byte_13020).l,a1

loc_12F16:
		neg.w	d2
		addi.w	#$400,d2
		bpl.s	loc_12F20
		moveq	#0,d2

loc_12F20:
		lsr.w	#8,d2
		move.b	d2,$24(a0)
		move.b	$2A(a0),d1
		andi.b	#1,d1
		andi.b	#-4,4(a0)
		or.b	d1,4(a0)
		bra.w	loc_12D90
; ---------------------------------------------------------------------------

loc_12F3C:
		subq.b	#1,$24(a0)
		bpl.w	locret_12DA8
		move.w	$1C(a0),d2
		bmi.s	loc_12F4C
		neg.w	d2

loc_12F4C:
		addi.w	#$800,d2
		bpl.s	loc_12F54
		moveq	#0,d2

loc_12F54:
		lsr.w	#6,d2
		lea	(byte_1302C).l,a1
		tst.b	$38(a0)
		beq.s	loc_12F6A
		lea	(byte_13032).l,a1
		lsr.w	#2,d2

loc_12F6A:
		move.b	d2,$24(a0)
		move.b	$2A(a0),d1
		andi.b	#1,d1
		andi.b	#-4,4(a0)
		or.b	d1,4(a0)
		bra.w	loc_12D90
; End of function Animate_SonicKnuckles_2P

; ---------------------------------------------------------------------------
AniSonic2P:	include "General/Sprites/Sonic/Anim - Sonic Knuckles 2P.asm"
; =============== S U B R O U T I N E =======================================


SonicKnuckles2P_Load_PLC:

		moveq	#0,d0
		move.b	$22(a0),d0
		lea	(PLC_Sonic2P).l,a2
		move.l	#ArtUnc_Sonic2P,d6
		tst.b	$38(a0)
		beq.s	loc_130BE
		lea	(PLC_Knuckles2P).l,a2
		move.l	#ArtUnc_Knuckles2P,d6

loc_130BE:
		add.w	d0,d0
		adda.w	(a2,d0.w),a2
		move.w	(a2)+,d5
		subq.w	#1,d5
		bmi.s	locret_13100
		move.w	#$D000,d4
		cmpa.w	#Player_1,a0
		beq.s	loc_130D8
		move.w	#$D400,d4

loc_130D8:
					; SonicKnuckles2P_Load_PLC+62j
		moveq	#0,d1
		move.w	(a2)+,d1
		move.w	d1,d3
		lsr.w	#8,d3
		andi.w	#$F0,d3
		addi.w	#$10,d3
		andi.w	#$FFF,d1
		lsl.l	#5,d1
		add.l	d6,d1
		move.w	d4,d2
		add.w	d3,d4
		add.w	d3,d4
		jsr	Add_To_DMA_Queue.w
		dbf	d5,loc_130D8

locret_13100:
		rts
; End of function SonicKnuckles2P_Load_PLC

; ---------------------------------------------------------------------------

Obj_Tails2P:
		cmpa.w	#Player_1,a0
		bne.s	loc_13130
		lea	(Sonic_Knux_top_speed).w,a4
		lea	(Distance_from_screen_top).w,a5
		lea	(Dust).w,a6
		move.b	(Player_2+character_id).w,d0
		cmp.b	$38(a0),d0
		bne.s	loc_13124
		bchg	#3,4(a0)

loc_13124:
		tst.b	(Debug_On).w
		beq.s	loc_1314C
		jmp	(DebugMode).l
; ---------------------------------------------------------------------------

loc_13130:
		lea	(Tails_top_speed).w,a4
		lea	(Distance_from_screen_top_P2).w,a5
		lea	(Dust_P2).w,a6
		move.b	(Player_1+character_id).w,d0
		cmp.b	$38(a0),d0
		bne.s	loc_1314C
		bchg	#4,4(a0)

loc_1314C:

		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_1315A(pc,d0.w),d1
		jmp	off_1315A(pc,d1.w)
; ---------------------------------------------------------------------------
off_1315A:	dc.w loc_13166-off_1315A

		dc.w loc_13274-off_1315A
		dc.w loc_1569C-off_1315A
		dc.w loc_1578E-off_1315A
		dc.w loc_157E0-off_1315A
		dc.w loc_157F4-off_1315A
; ---------------------------------------------------------------------------

loc_13166:
		addq.b	#2,5(a0)
		move.b	#$B,$1E(a0)
		move.b	#5,$1F(a0)
		move.b	#$B,$44(a0)
		move.b	#5,$45(a0)
		move.l	#Map_Tails_2P,$C(a0)
		move.w	#prio(2),8(a0)
		move.b	#$C,7(a0)
		move.b	#$C,6(a0)
		move.b	#$84,4(a0)
		move.b	#1,$38(a0)
		lea	(Character_Speeds).l,a1
		moveq	#0,d0
		move.b	$38(a0),d0
		lsl.w	#3,d0
		lea	(a1,d0.w),a1
		move.w	(a1)+,(a4)
		move.w	(a1)+,2(a4)
		move.w	(a1)+,4(a4)
		tst.b	(Last_star_post_hit).w
		bne.w	loc_13250
		move.b	#$C,$46(a0)
		move.b	#$D,$47(a0)
		cmpa.w	#Player_1,a0
		bne.s	loc_13218
		move.w	#$680,$A(a0)
		cmpi.b	#$12,(Current_zone).w
		bne.s	loc_131F2
		ori.w	#$8000,$A(a0)

loc_131F2:
	;	move.w	$10(a0),(Saved_X_pos).w
	;	move.w	$14(a0),(Saved_Y_pos).w
	;	move.w	$A(a0),(Saved_art_tile).w
	;	move.w	$46(a0),(Saved_solid_bits).w
		move.l	#Obj_Tails2P_Tail,(Super_stars).w
		move.w	a0,(Super_stars+$30).w
		bra.s	loc_13250
; ---------------------------------------------------------------------------

loc_13218:
		move.w	#$6A0,$A(a0)
		cmpi.b	#$12,(Current_zone).w
		bne.s	loc_1322C
		ori.w	#$8000,$A(a0)

loc_1322C:
	;	move.w	$10(a0),(Saved2_X_pos).w
	;	move.w	$14(a0),(Saved2_Y_pos).w
	;	move.w	$A(a0),(Saved2_art_tile).w
	;	move.w	$46(a0),(Saved2_solid_bits).w
		move.l	#Obj_Tails2P_Tail,(Tails_tails).w
		move.w	a0,(Tails_tails+$30).w

loc_13250:

		move.b	#0,$30(a0)
		move.b	#4,$31(a0)
		move.b	#$1E,$2C(a0)
		move.w	#0,(CPU_Routine).w
		move.w	#$258,(CPU_Control_Ctr).w
		move.w	#0,(Tails_Respawn_Ctr).w

loc_13274:
		tst.b	(Debug_mode_flag).w
		beq.s	loc_13294
		cmpa.w	#Player_1,a0
		bne.s	loc_13294
		btst	#4,(Ctrl_1_pressed).w
		beq.s	loc_13294
		st	(Debug_On).w
		clr.b	(Ctrl_1_locked).w
		rts
; ---------------------------------------------------------------------------

loc_13294:

		cmpa.w	#Player_1,a0
		bne.s	loc_132B4
		move.w	(Ctrl_1_logical).w,(Ctrl_2_logical).w
		tst.b	(Ctrl_1_locked).w
		bne.s	loc_132C0
		move.w	(Ctrl_1).w,(Ctrl_2_logical).w
		move.w	(Ctrl_1).w,(Ctrl_1_logical).w
		bra.s	loc_132C0
; ---------------------------------------------------------------------------

loc_132B4:
		tst.b	(Ctrl_2_locked).w
		bne.s	loc_132C0
		move.w	(Ctrl_2).w,(Ctrl_2_logical).w

loc_132C0:

		bsr.w	loc_138FE
		btst	#0,$2E(a0)
		bne.s	loc_132DE
		moveq	#0,d0
		move.b	$2A(a0),d0
		andi.w	#6,d0
		move.w	off_1332E(pc,d0.w),d1
		jsr	off_1332E(pc,d1.w)

loc_132DE:
		cmpi.w	#-$100,(Camera_min_Y_pos).w
		bne.s	loc_132EE
		move.w	(Screen_Y_wrap_value).w,d0
		and.w	d0,$14(a0)

loc_132EE:
		move.w	(Screen_X_wrap_value).w,d0
		and.w	d0,$10(a0)
		addi.w	#$400,$10(a0)
		bsr.w	Sonic_RecordPos
		move.b	(Primary_Angle).w,$3A(a0)
		move.b	(Secondary_Angle).w,$3B(a0)
		btst	#1,$2E(a0)
		bne.s	loc_1331C
		bsr.w	Animate_Tails2P
		bsr.w	Tails2P_Load_PLC

loc_1331C:
		move.b	$2E(a0),d0
		andi.b	#$A0,d0
		bne.s	locret_1332C
		jsr	(TouchResponse_CompetitionMode).l

locret_1332C:
		rts
; ---------------------------------------------------------------------------
off_1332E:	dc.w loc_13336-off_1332E

		dc.w loc_1335A-off_1332E
		dc.w loc_1346A-off_1332E
		dc.w loc_1348C-off_1332E
; ---------------------------------------------------------------------------

loc_13336:
		bsr.w	sub_13520
		bsr.w	Tails_Jump
		bsr.w	Player_SlopeResist
		bsr.w	Tails_InputAcceleration_Path
		bsr.w	sub_134BA
		jsr	MoveSprite2.w
		bsr.w	Player_AnglePos
		bsr.w	Player_SlopeRepel
		rts
; ---------------------------------------------------------------------------

loc_1335A:
		tst.b	$2F(a0)
		bne.s	loc_1338E
		bsr.w	Tails_JumpHeight
		bsr.w	Tails_InputAcceleration_Freespace
		jsr	MoveSprite.w
		btst	#6,$2A(a0)
		beq.s	loc_1337C
		subi.w	#$28,$1A(a0)

loc_1337C:
		bsr.w	Player_JumpAngle
		movem.l	a4-a6,-(sp)
		bsr.w	Tails_DoLevelCollision
		movem.l	(sp)+,a4-a6
		rts
; ---------------------------------------------------------------------------

loc_1338E:
		bsr.w	sub_133AE
		bsr.w	Tails_InputAcceleration_Freespace
		jsr	MoveSprite2.w
		bsr.w	Player_JumpAngle
		movem.l	a4-a6,-(sp)
		bsr.w	Tails_DoLevelCollision
		movem.l	(sp)+,a4-a6
		rts

; =============== S U B R O U T I N E =======================================


sub_133AE:
		move.b	(Level_frame_counter+1).w,d0
		andi.b	#1,d0
		beq.s	loc_133C2
		tst.b	$25(a0)
		beq.s	loc_133C2
		subq.b	#1,$25(a0)

loc_133C2:
		cmpi.b	#1,$2F(a0)
		beq.s	loc_133EC
		cmpi.w	#-$100,$1A(a0)
		blt.s	loc_133E4
		subi.w	#$20,$1A(a0)
		addq.b	#1,$2F(a0)
		cmpi.b	#$20,$2F(a0)
		bne.s	loc_133EA

loc_133E4:
		move.b	#1,$2F(a0)

loc_133EA:
		bra.s	loc_1341E
; ---------------------------------------------------------------------------

loc_133EC:
		move.b	(Ctrl_2_pressed_logical).w,d0
		andi.b	#$70,d0
		beq.s	loc_13418
		cmpi.w	#-$100,$1A(a0)
		blt.s	loc_13418
		tst.b	$25(a0)
		beq.s	loc_13418
		btst	#6,$2A(a0)
		beq.s	loc_13412
		tst.b	(Flying_carrying_Sonic_flag).w
		bne.s	loc_13418

loc_13412:
		move.b	#2,$2F(a0)

loc_13418:

		addi.w	#8,$1A(a0)

loc_1341E:
		move.w	(Camera_min_Y_pos).w,d0
		addi.w	#$10,d0
		cmp.w	$14(a0),d0
		blt.s	loc_13438
		tst.w	$1A(a0)
		bpl.s	loc_13438
		move.w	#0,$1A(a0)

loc_13438:

		tst.b	$25(a0)
		bne.s	loc_13454
		move.b	(Level_frame_counter+1).w,d0
		addq.b	#8,d0
		andi.b	#$F,d0
		bne.s	locret_13452
		moveq	#-$45,d0
		jsr	Play_Sound_2.w

locret_13452:
		rts
; ---------------------------------------------------------------------------

loc_13454:
		move.b	(Level_frame_counter+1).w,d0
		addq.b	#8,d0
		andi.b	#$F,d0
		bne.s	locret_13468
		moveq	#-$46,d0
		jsr	Play_Sound_2.w

locret_13468:
		rts
; End of function sub_133AE

; ---------------------------------------------------------------------------

loc_1346A:
		tst.b	$3D(a0)
		bne.s	loc_13474
		bsr.w	Tails_Jump

loc_13474:
		bsr.w	Player_RollRepel
		bsr.w	Tails_RollSpeed
		jsr	MoveSprite2.w
		bsr.w	Player_AnglePos
		bsr.w	Player_SlopeRepel
		rts
; ---------------------------------------------------------------------------

loc_1348C:
		bsr.w	Tails_JumpHeight
		bsr.w	Tails_InputAcceleration_Freespace
		jsr	MoveSprite.w
		btst	#6,$2A(a0)
		beq.s	loc_134A8
		subi.w	#$28,$1A(a0)

loc_134A8:
		bsr.w	Player_JumpAngle
		movem.l	a4-a6,-(sp)
		bsr.w	Tails_DoLevelCollision
		movem.l	(sp)+,a4-a6
		rts

; =============== S U B R O U T I N E =======================================


sub_134BA:
		tst.b	$2B(a0)
		bmi.s	locret_134E0
		move.w	$1C(a0),d0
		bpl.s	loc_134C8
		neg.w	d0

loc_134C8:
		cmpi.w	#$80,d0
		blo.s	locret_134E0
		move.b	(Ctrl_2_logical).w,d0
		andi.b	#$C,d0
		bne.s	locret_134E0
		btst	#1,(Ctrl_2_logical).w
		bne.s	loc_134E2

locret_134E0:

		rts
; ---------------------------------------------------------------------------

loc_134E2:
		btst	#2,$2A(a0)
		beq.s	loc_134EC
		rts
; ---------------------------------------------------------------------------

loc_134EC:
		bset	#2,$2A(a0)
		move.b	#7,$1E(a0)
		move.b	#3,$1F(a0)
		move.b	#2,$20(a0)
		addq.w	#4,$14(a0)
		move.w	#$3C,d0
		jsr	Play_Sound_2.w
		tst.w	$1C(a0)
		bne.s	locret_1351E
		move.w	#$200,$1C(a0)

locret_1351E:
		rts
; End of function sub_134BA


; =============== S U B R O U T I N E =======================================


sub_13520:
		tst.b	$3D(a0)
		bne.s	loc_13570
		cmpi.b	#8,$20(a0)
		bne.s	locret_1356E
		move.b	(Ctrl_2_pressed_logical).w,d0
		andi.b	#$70,d0
		beq.w	locret_1356E
		move.b	#9,$20(a0)
		move.w	#$FFAB,d0
		jsr	Play_Sound_2.w
		addq.l	#4,sp
		move.b	#1,$3D(a0)
		move.w	#0,$3E(a0)
		cmpi.b	#$C,$2C(a0)
		blo.s	loc_13566
		move.b	#2,$20(a6)

loc_13566:
		bsr.w	Player_LevelBound
		bsr.w	Player_AnglePos

locret_1356E:

		rts
; ---------------------------------------------------------------------------

loc_13570:
		move.b	(Ctrl_2_logical).w,d0
		btst	#1,d0
		bne.w	loc_13600
		move.b	#7,$1E(a0)
		move.b	#3,$1F(a0)
		move.b	#2,$20(a0)
		addq.w	#4,$14(a0)
		move.b	#0,$3D(a0)
		moveq	#0,d0
		move.b	$3E(a0),d0
		add.w	d0,d0
		move.w	word_135EE(pc,d0.w),$1C(a0)

		btst	#0,$2A(a0)
		beq.s	loc_135D6
		neg.w	$1C(a0)

loc_135D6:
		bset	#2,$2A(a0)
		move.b	#0,$20(a6)
		move.w	#$FFB6,d0
		jsr	Play_Sound_2.w
		bra.s	loc_13648
; ---------------------------------------------------------------------------
word_135EE:	dc.w $800
		dc.w $880
		dc.w $900
		dc.w $980
		dc.w $A00
		dc.w $A80
		dc.w $B00
		dc.w $B80
		dc.w $C00
; ---------------------------------------------------------------------------

loc_13600:
		tst.w	$3E(a0)
		beq.s	loc_13618
		move.w	$3E(a0),d0
		lsr.w	#5,d0
		sub.w	d0,$3E(a0)
		bcc.s	loc_13618
		move.w	#0,$3E(a0)

loc_13618:

		move.b	(Ctrl_2_pressed_logical).w,d0
		andi.b	#$70,d0
		beq.w	loc_13648
		move.w	#$900,$20(a0)
		move.w	#$FFAB,d0
		jsr	Play_Sound_2.w
		addi.w	#$200,$3E(a0)
		cmpi.w	#$800,$3E(a0)
		blo.s	loc_13648
		move.w	#$800,$3E(a0)

loc_13648:

		addq.l	#4,sp
		tst.w	(a5)
		beq.s	loc_13656
		bpl.s	loc_13654
		addq.w	#4,(a5)

loc_13654:
		subq.w	#2,(a5)

loc_13656:
		bra.w	Player_AnglePos
; ---------------------------------------------------------------------------

Obj_Tails_FixPlat:
		lea	Player_1.w,a1		; get player 2
	CheckPlatStuff %10101111, %00101000
		move.l	#Obj_Tails,(a0)		; set to normal object

Obj_Tails:
		lea	(Tails_top_speed).w,a4
		lea	Distance_from_screen_top_P2.w,a5
		lea	(Dust_P2).w,a6
	;	cmpi.w	#2,(Player_mode).w
	;	bne.s	loc_136AE

		tst.b	(Debug_mode_flag).w		; is debug cheat enabled?
		beq.s	loc_136AE			; if not, branch

		cmpa.w	#Player_1,a0
		bne.s	Tails_NoDebug
		btst	#button_B,(Ctrl_1_pressed).w	; is button B pressed?
		bne.w	Tails_SetDebug			; if not, branch

Tails_NoDebug:
		tst.b	(Debug_On).w
		beq.s	loc_136AE
		jmp	Debug_Control

	;	cmpi.b	#1,(Debug_placement_type).w
	;	beq.s	loc_136A8
	;	btst	#4,(Ctrl_1_pressed).w
	;	beq.s	loc_1368C
	;	clr.b	(Debug_On).w

loc_1368C:
	;	addq.b	#1,$22(a0)
	;	cmpi.b	#-5,$22(a0)
	;	blo.s	loc_1369E
	;	move.b	#0,$22(a0)

loc_1369E:
	;	bsr.w	Tails_Load_PLC
	;	jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_136A8:
	;	jmp	(DebugMode).l
; ---------------------------------------------------------------------------

loc_136AE:

		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_136BC(pc,d0.w),d1
		jmp	off_136BC(pc,d1.w)
; ---------------------------------------------------------------------------
off_136BC:	dc.w loc_136CA-off_136BC

		dc.w loc_137C4-off_136BC
		dc.w loc_1569C-off_136BC
		dc.w loc_1578E-off_136BC
		dc.w loc_157E0-off_136BC
		dc.w loc_157F4-off_136BC
		dc.w loc_15810-off_136BC
; ---------------------------------------------------------------------------

loc_136CA:
		addq.b	#2,5(a0)
		move.b	#$13,y_radius(a0)	; this sets Sonic's collision height (2*pixels)
		move.b	#9,x_radius(a0)
		move.b	#$13,default_y_radius(a0)
		move.b	#9,default_x_radius(a0)
		move.b	#$18,width_pixels(a0)
		move.b	#$18,height_pixels(a0)
		move.b	#9,$45(a0)
		move.l	#Map_Tails,$C(a0)
		move.w	#prio(2),8(a0)
		move.b	#$84,4(a0)
		move.b	#1,$38(a0)
	;	move.w	#$600,(a4)
	;	move.w	#$C,2(a4)
	;	move.w	#$80,4(a4)

		move.w	SavedTileP2.w,$A(a0)	; load saved tile to art address
		move.b	#$C,$46(a0)
		move.b	#$D,$47(a0)

	;	move.w	$10(a0),(Saved_X_pos).w
	;	move.w	$14(a0),(Saved_Y_pos).w
	;	move.w	$A(a0),(Saved_art_tile).w
	;	move.w	$46(a0),(Saved_solid_bits).w

loc_13776:

		move.b	#0,$30(a0)
		move.b	#4,$31(a0)
		move.b	#0,(Super_Tails_flag).w
		move.b	#$1E,$2C(a0)
		cmpi.w	#$20,(CPU_Routine).w
		beq.s	loc_137A4
		cmpi.w	#$12,(CPU_Routine).w
		beq.s	loc_137A4
		move.w	#0,(CPU_Routine).w

loc_137A4:

		move.w	#0,(CPU_Control_Ctr).w
		move.w	#0,(Tails_Respawn_Ctr).w
		move.l	#Obj_Tails_Tail,(Tails_tails).w
		move.w	a0,Tails_tails+parent.w
		rts
; ---------------------------------------------------------------------------

loc_137C4:
		cmpi.w	#2,(Player_mode).w
		bne.s	loc_13808
		tst.b	(Debug_mode_flag).w
		beq.s	loc_13808
		bclr	#6,(Ctrl_1_pressed).w
		beq.s	loc_137E0
		eori.b	#1,(Reverse_gravity_flag).w

loc_137E0:
	bra.s	loc_13808
	;	btst	#4,(Ctrl_1_pressed).w
	;	beq.s	loc_13808

Tails_SetDebug:
		st	(Debug_On).w
		clr.b	(Ctrl_1_locked).w
	;	btst	#5,(Ctrl_1).w
	;	beq.s	locret_13806
	;	move.b	#2,(Debug_On).w
	;	move.b	#0,$20(a0)

locret_13806:
		rts
; ---------------------------------------------------------------------------

loc_13808:

		cmpa.w	#Player_1,a0
		bne.s	loc_13830
		move.w	(Ctrl_1_logical).w,(Ctrl_2_logical).w
		tst.b	(Ctrl_1_locked).w
		bne.s	loc_1384A
		move.w	(Ctrl_1).w,(Ctrl_2_logical).w
		move.w	(Ctrl_1).w,(Ctrl_1_logical).w
		cmpi.w	#$1A,(CPU_Routine).w
		bhs.s	loc_13840
		bra.s	loc_1384A
; ---------------------------------------------------------------------------

loc_13830:
		tst.b	(Ctrl_2_locked).w
		beq.s	loc_1383A
		bpl.s	loc_13840
		bra.s	loc_1384A
; ---------------------------------------------------------------------------

loc_1383A:
	;	tst.b	4(a0)		; TEMP!!!
	;	bmi.s	.ok
	;	jsr	Kill_Character
.ok		move.w	(Ctrl_2).w,(Ctrl_2_logical).w

loc_13840:
loc_1384A:

		btst	#0,$2E(a0)
		beq.s	loc_13872
		move.b	#0,$2F(a0)
		tst.b	(Flying_carrying_Sonic_flag).w
		beq.s	loc_1388C
		lea	(Player_1).w,a1
		clr.b	$2E(a1)
		bset	#1,$2A(a1)
		clr.w	(Flying_carrying_Sonic_flag).w
		bra.s	loc_1388C
; ---------------------------------------------------------------------------

loc_13872:
		movem.l	a4-a6,-(sp)
		moveq	#0,d0
		move.b	$2A(a0),d0
		andi.w	#6,d0
		move.w	off_138F6(pc,d0.w),d1
		jsr	off_138F6(pc,d1.w)
		movem.l	(sp)+,a4-a6

loc_1388C:

		cmpi.w	#-$100,(Camera_min_Y_pos).w
		bne.s	loc_1389C
		move.w	(Screen_Y_wrap_value).w,d0
		and.w	d0,$14(a0)

loc_1389C:
		bsr.s	loc_138FE
		bsr.w	Tails_Super
		bsr.w	Tails_RecordPos
		bsr.w	sub_14632
		move.b	(Primary_Angle).w,$3A(a0)
		move.b	(Secondary_Angle).w,$3B(a0)
		tst.b	(WindTunnel_flag_P2).w
		beq.s	loc_138C8
		tst.b	$20(a0)
		bne.s	loc_138C8
		move.b	$21(a0),$20(a0)

loc_138C8:

		btst	#1,$2E(a0)
		bne.s	loc_138E4
		bsr.w	Animate_Tails
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_138E0
		eori.b	#2,4(a0)

loc_138E0:
		bsr.w	Tails_Load_PLC

loc_138E4:
		move.b	$2E(a0),d0
		andi.b	#$A0,d0
		bne.s	locret_138F4
		jmp	(TouchResponse).l

locret_138F4:
		rts
; ---------------------------------------------------------------------------
off_138F6:	dc.w Tails_Stand_Path-off_138F6

		dc.w Tails_Stand_Freespace-off_138F6
		dc.w Tails_Spin_Path-off_138F6
		dc.w Tails_Spin_Freespace-off_138F6
; ---------------------------------------------------------------------------

loc_138FE:
		tst.b	EnableInterlace.w		; NAT: check if interlace mode is enabled
		beq.s	.nointerlace			; if not, skip
		btst	#0,Level_frame_counter+1.w	; check if even frame
		beq.s	loc_13912			; if yes, do not display

.nointerlace	move.b	$34(a0),d0
		beq.s	loc_1390C
		subq.b	#1,$34(a0)
		lsr.b	#3,d0
		bcc.s	loc_13912

loc_1390C:
		jsr	Draw_Sprite.w

loc_13912:
		btst	#1,$2B(a0)
		beq.s	loc_1394E
		tst.b	$35(a0)
		beq.s	loc_1394E
		move.b	(Level_frame_counter+1).w,d0
		andi.b	#7,d0
		bne.s	loc_1394E
		subq.b	#1,$35(a0)
		bne.s	loc_1394E
		jsr	CheckRightMusicTrack.w

loc_13948:

		bclr	#1,$2B(a0)

loc_1394E:

		btst	#2,$2B(a0)
		beq.s	locret_139A6
		tst.b	$36(a0)
		beq.s	locret_139A6
		move.b	(Level_frame_counter+1).w,d0
		andi.b	#7,d0
		bne.s	locret_139A6
		subq.b	#1,$36(a0)
		bne.s	locret_139A6
		move.w	#$600,(a4)
		move.w	#$C,2(a4)
		move.w	#$80,4(a4)
		tst.b	(Super_Tails_flag).w
		beq.s	loc_13998
		move.w	#$800,(a4)
		move.w	#$18,2(a4)
		move.w	#$C0,4(a4)

loc_13998:
		bclr	#2,$2B(a0)
		tst.b	speed_shoes_timer-$4A(a0)
		bne.s	locret_139A6
		moveq	#0,d0
		jmp	Change_Music_Tempo.w
; ---------------------------------------------------------------------------

locret_139A6:

		rts

; =============== S U B R O U T I N E =======================================


sub_139CC:
		rts
		move.b	(Ctrl_2_logical).w,d0
		andi.b	#$7F,d0
		beq.s	loc_139DC
		move.w	#$258,(CPU_Control_Ctr).w

loc_139DC:
		lea	(Player_1).w,a1
		move.w	(CPU_Routine).w,d0
		move.w	off_139EC(pc,d0.w),d0
		jmp	off_139EC(pc,d0.w)
; End of function sub_139CC

; ---------------------------------------------------------------------------
off_139EC:	dc.w loc_13A10-off_139EC

		dc.w Tails_Catch_Up_Flying-off_139EC
		dc.w Tails_FlySwim_Unknown-off_139EC
		dc.w loc_13D4A-off_139EC
		dc.w loc_13F40-off_139EC
		dc.w locret_13FC0-off_139EC
		dc.w loc_13FC2-off_139EC
		dc.w loc_13FFA-off_139EC
		dc.w loc_1408A-off_139EC
		dc.w loc_140C6-off_139EC
		dc.w loc_140CE-off_139EC
		dc.w loc_14106-off_139EC
		dc.w loc_1414C-off_139EC
		dc.w loc_141F2-off_139EC
		dc.w loc_1421C-off_139EC
		dc.w loc_14254-off_139EC
		dc.w loc_1425C-off_139EC
		dc.w loc_14286-off_139EC
; ---------------------------------------------------------------------------

loc_13A10:
	;	tst.b	(__u_F746).w
		bne.w	loc_13AF4
		cmpi.w	#0,(Current_zone_and_act).w
		bne.s	loc_13A32
		bsr.w	sub_13ECA
		move.w	#$A,(CPU_Routine).w
		move.b	#-$7D,$2E(a0)
		rts
; ---------------------------------------------------------------------------

loc_13A32:
		cmpi.w	#$100,(Current_zone_and_act).w
		beq.w	loc_13B12
		cmpi.w	#$200,(Current_zone_and_act).w
		beq.w	loc_13B12
		cmpi.w	#$300,(Current_zone_and_act).w
		bne.s	loc_13A74
		move.w	#$18,$10(a0)
		move.w	#$600,$14(a0)

loc_13A5A:
		move.w	#0,(CPU_Control_Ctr).w
		move.w	#0,(Tails_Respawn_Ctr).w
		move.b	#2,$2A(a0)
		move.w	#$C,(CPU_Routine).w
		rts
; ---------------------------------------------------------------------------

loc_13A74:
		cmpi.w	#$500,(Current_zone_and_act).w
		bne.s	loc_13A8E
		bsr.w	sub_13ECA
		move.w	#$A,(CPU_Routine).w
		move.b	#-$7D,$2E(a0)
		rts
; ---------------------------------------------------------------------------

loc_13A8E:
		cmpi.w	#$600,(Current_zone_and_act).w
		beq.w	loc_13B12
		cmpi.w	#$700,(Current_zone_and_act).w
		bne.s	loc_13AB4
		tst.w	(SK_alone_flag).w
		bne.s	loc_13AB4
		move.w	#$D8,$10(a0)
		move.w	#$500,$14(a0)
		bra.s	loc_13A5A
; ---------------------------------------------------------------------------

loc_13AB4:

		cmpi.w	#$800,(Current_zone_and_act).w
		beq.w	loc_13B18
		cmpi.w	#$900,(Current_zone_and_act).w
		beq.w	loc_13B12
		cmpi.w	#$A00,(Current_zone_and_act).w
		bne.s	loc_13AE2
		bsr.w	sub_13ECA
		move.w	#$A,(CPU_Routine).w
		move.b	#-$7D,$2E(a0)
		rts
; ---------------------------------------------------------------------------

loc_13AE2:
		cmpi.w	#$1600,(Current_zone_and_act).w
		beq.w	loc_13B12
		cmpi.b	#$17,(Current_zone).w
		beq.s	loc_13B18

loc_13AF4:
		move.b	#0,$20(a0)
		move.w	#0,$18(a0)
		move.w	#0,$1A(a0)
		move.w	#0,$1C(a0)
		move.b	#0,$2A(a0)

loc_13B12:

		move.b	#0,$2E(a0)

loc_13B18:

		move.w	#6,(CPU_Routine).w
		move.w	#0,(Tails_Respawn_Ctr).w
		rts
; ---------------------------------------------------------------------------

Tails_Catch_Up_Flying:
		move.b	(Ctrl_2_logical).w,d0
		andi.b	#$F0,d0
		bne.s	loc_13B50
		move.w	(Level_frame_counter).w,d0
		andi.w	#$3F,d0
		bne.w	locret_13BF6
		tst.b	$2E(a1)
		bmi.w	locret_13BF6
		move.b	$2A(a1),d0
		andi.b	#$80,d0
		bne.w	locret_13BF6

loc_13B50:
		move.w	#4,(CPU_Routine).w
		move.w	$10(a1),d0
		move.w	d0,$10(a0)
		move.w	d0,(CPU_Target_X).w
		move.w	$14(a1),d0
		move.w	d0,(CPU_Target_Y).w
		subi.w	#$C0,d0
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_13B78
		addi.w	#$180,d0

loc_13B78:
		move.w	d0,$14(a0)
		ori.w	#$8000,$A(a0)
		move.w	#prio(2),8(a0)
		moveq	#0,d0
		move.w	d0,$18(a0)
		move.w	d0,$1A(a0)
		move.w	d0,$1C(a0)
		move.b	d0,$2D(a0)
		move.b	d0,$2F(a0)
		move.b	#2,$2A(a0)
		move.b	#$1E,$2C(a0)
		move.b	#-$7F,$2E(a0)
		move.b	d0,$30(a0)
		move.b	d0,$31(a0)
		move.w	d0,$32(a0)
		move.b	d0,$34(a0)
		move.b	d0,$35(a0)
		move.b	d0,$36(a0)
		move.b	d0,$37(a0)
		move.b	d0,$39(a0)
		move.w	d0,$3A(a0)
		move.b	d0,$3C(a0)
		move.b	d0,$3D(a0)
		move.b	d0,$3D(a0)
		move.w	d0,$3E(a0)
		move.b	d0,$40(a0)
		move.b	d0,$41(a0)
		move.b	#-$10,$25(a0)
		bsr.w	Tails_Set_Flying_Animation

locret_13BF6:

		rts
; ---------------------------------------------------------------------------

Tails_FlySwim_Unknown:
		tst.b	4(a0)
		bmi.s	loc_13C3A
		addq.w	#1,(Tails_Respawn_Ctr).w
		cmpi.w	#$12C,(Tails_Respawn_Ctr).w
		blo.s	loc_13C50
		move.w	#0,(Tails_Respawn_Ctr).w
		move.w	#2,(CPU_Routine).w
		move.b	#-$7F,$2E(a0)
		move.b	#2,$2A(a0)
		move.w	#0,$10(a0)
		move.w	#0,$14(a0)
		move.b	#-$10,$25(a0)
		bsr.w	Tails_Set_Flying_Animation
		rts
; ---------------------------------------------------------------------------

loc_13C3A:
		move.b	#-$10,$25(a0)
		ori.b	#2,$2A(a0)
		bsr.w	Tails_Set_Flying_Animation
		move.w	#0,(Tails_Respawn_Ctr).w

loc_13C50:
		lea	(Pos_table).w,a2
		move.w	#$10,d2
		lsl.b	#2,d2
		addq.b	#4,d2
		move.w	(Pos_table_index).w,d3
		sub.b	d2,d3
		move.w	(a2,d3.w),(CPU_Target_X).w
		move.w	2(a2,d3.w),(CPU_Target_Y).w
		move.w	$10(a0),d0
		sub.w	(CPU_Target_X).w,d0
		beq.s	loc_13CBE
		move.w	d0,d2
		bpl.s	loc_13C7E
		neg.w	d2

loc_13C7E:
		lsr.w	#4,d2
		cmpi.w	#$C,d2
		blo.s	loc_13C88
		moveq	#$C,d2

loc_13C88:
		move.b	$18(a1),d1
		bpl.s	loc_13C90
		neg.b	d1

loc_13C90:
		add.b	d1,d2
		addq.w	#1,d2
		tst.w	d0
		bmi.s	loc_13CAA
		bset	#0,$2A(a0)
		cmp.w	d0,d2
		blo.s	loc_13CA6
		move.w	d0,d2
		moveq	#0,d0

loc_13CA6:
		neg.w	d2
		bra.s	loc_13CBA
; ---------------------------------------------------------------------------

loc_13CAA:
		bclr	#0,$2A(a0)
		neg.w	d0
		cmp.w	d0,d2
		blo.s	loc_13CBA
		move.b	d0,d2
		moveq	#0,d0

loc_13CBA:

		add.w	d2,$10(a0)

loc_13CBE:
		moveq	#1,d2
		move.w	$14(a0),d1
		sub.w	(CPU_Target_Y).w,d1
		beq.s	loc_13CD2
		bmi.s	loc_13CCE
		neg.w	d2

loc_13CCE:
		add.w	d2,$14(a0)

loc_13CD2:
		lea	(Stat_table).w,a2
		move.b	2(a2,d3.w),d2
		andi.b	#$80,d2
		bne.s	loc_13D42
		or.w	d0,d1
		bne.s	loc_13D42
		move.w	#6,(CPU_Routine).w
		move.b	#0,$2E(a0)
		move.b	#0,$20(a0)
		move.w	#0,$18(a0)
		move.w	#0,$1A(a0)
		move.w	#0,$1C(a0)
		andi.b	#$40,$2A(a0)
		ori.b	#2,$2A(a0)
		move.w	#0,$32(a0)
		andi.w	#$7FFF,$A(a0)
		tst.b	$A(a1)
		bpl.s	loc_13D34
		ori.w	#$8000,$A(a0)

loc_13D34:
		move.b	$46(a1),$46(a0)
		move.b	$47(a1),$47(a0)
		rts
; ---------------------------------------------------------------------------

loc_13D42:

		move.b	#-$7F,$2E(a0)
		rts
; ---------------------------------------------------------------------------

loc_13D4A:
		move.w	#4,(CPU_Routine).w
		move.b	#0,$3D(a0)
		move.w	#0,$3E(a0)
		move.b	#-$7F,$2E(a0)
		move.b	#2,$2A(a0)
		move.b	#$20,$20(a0)
		rts
; ---------------------------------------------------------------------------

loc_13D78:
		bsr.w	sub_13EFC
		tst.w	(CPU_Control_Ctr).w
		bne.w	loc_13EBE
		tst.b	$2E(a0)
		bmi.w	loc_13EBE
		tst.b	$37(a1)
		bmi.w	loc_13EBE
		tst.w	$32(a0)
		beq.s	loc_13DA6
		tst.w	$1C(a0)
		bne.s	loc_13DA6
		move.w	#8,(CPU_Routine).w

loc_13DA6:

		lea	(Pos_table).w,a2
		move.w	#$10,d1
		lsl.b	#2,d1
		addq.b	#4,d1
		move.w	(Pos_table_index).w,d0
		sub.b	d1,d0
		move.w	(a2,d0.w),d2
		btst	#3,$2A(a1)
		bne.s	loc_13DD0
		cmpi.w	#$400,$1C(a1)
		bge.s	loc_13DD0
		subi.w	#$20,d2

loc_13DD0:

		move.w	2(a2,d0.w),d3
		lea	(Stat_table).w,a2
		move.w	(a2,d0.w),d1
		move.b	2(a2,d0.w),d4
		move.w	d1,d0
		btst	#5,$2A(a0)
		beq.s	loc_13DF2
		btst	#5,d4
		beq.w	loc_13E9C

loc_13DF2:
		sub.w	$10(a0),d2
		beq.s	loc_13E50
		bpl.s	loc_13E26
		neg.w	d2
		cmpi.w	#$30,d2
		blo.s	loc_13E0A
		andi.w	#$F3F3,d1
		ori.w	#$404,d1

loc_13E0A:
		tst.w	$1C(a0)
		beq.s	loc_13E64
		btst	#0,$2A(a0)
		beq.s	loc_13E64
		btst	#0,$2E(a0)
		bne.s	loc_13E64
		subq.w	#1,$10(a0)
		bra.s	loc_13E64
; ---------------------------------------------------------------------------

loc_13E26:
		cmpi.w	#$30,d2
		blo.s	loc_13E34
		andi.w	#$F3F3,d1
		ori.w	#$808,d1

loc_13E34:
		tst.w	$1C(a0)
		beq.s	loc_13E64
		btst	#0,$2A(a0)
		bne.s	loc_13E64
		btst	#0,$2E(a0)
		bne.s	loc_13E64
		addq.w	#1,$10(a0)
		bra.s	loc_13E64
; ---------------------------------------------------------------------------

loc_13E50:
		bclr	#0,$2A(a0)
		move.b	d4,d0
		andi.b	#1,d0
		beq.s	loc_13E64
		bset	#0,$2A(a0)

loc_13E64:

		tst.b	(Tails_Interact+$1).w
		beq.s	loc_13E7C
		ori.w	#$7000,d1
		btst	#1,$2A(a0)
		bne.s	loc_13EB8
		move.b	#0,(Tails_Interact+$1).w

loc_13E7C:
		move.w	(Level_frame_counter).w,d0
		andi.w	#$FF,d0
		beq.s	loc_13E8C
		cmpi.w	#$40,d2
		bhs.s	loc_13EB8

loc_13E8C:
		sub.w	$14(a0),d3
		beq.s	loc_13EB8
		bpl.s	loc_13EB8
		neg.w	d3
		cmpi.w	#$20,d3
		blo.s	loc_13EB8

loc_13E9C:
		move.b	(Level_frame_counter+1).w,d0
		andi.b	#$3F,d0
		bne.s	loc_13EB8

		cmpi.b	#8,$20(a0)
		beq.s	loc_13EB8
		ori.w	#$7070,d1
		move.b	#1,(Tails_Interact+$1).w

loc_13EB8:

		move.w	d1,(Ctrl_2_logical).w
		rts
; ---------------------------------------------------------------------------

loc_13EBE:

		tst.w	(CPU_Control_Ctr).w
		beq.s	locret_13EC8
		subq.w	#1,(CPU_Control_Ctr).w

locret_13EC8:
		rts

; =============== S U B R O U T I N E =======================================


sub_13ECA:

		move.w	#0,(CPU_Control_Ctr).w
		move.w	#0,(Tails_Respawn_Ctr).w
		move.w	#2,(CPU_Routine).w
		move.b	#-$7F,$2E(a0)
		move.b	#2,$2A(a0)
		move.w	#$7F00,$10(a0)
		move.w	#0,$14(a0)
		move.b	#0,$2F(a0)
		rts
; End of function sub_13ECA


; =============== S U B R O U T I N E =======================================


sub_13EFC:

		tst.b	4(a0)
		bmi.s	loc_13F28
		btst	#3,$2A(a0)
		beq.s	loc_13F18
		moveq	#0,d0
		movea.w	$42(a0),a3
		move.w	(__u_F700).w,d0
		cmp.w	(a3),d0
		bne.s	loc_13F24

loc_13F18:
		addq.w	#1,(Tails_Respawn_Ctr).w
		cmpi.w	#$12C,(Tails_Respawn_Ctr).w
		blo.s	loc_13F2E

loc_13F24:
		bra.w	sub_13ECA
; ---------------------------------------------------------------------------

loc_13F28:
		move.w	#0,(Tails_Respawn_Ctr).w

loc_13F2E:
		btst	#3,$2A(a0)
		beq.s	locret_13F3E
		movea.w	$42(a0),a3
		move.w	(a3),(__u_F700).w

locret_13F3E:
		rts
; End of function sub_13EFC

; ---------------------------------------------------------------------------

loc_13F40:
		bsr.w	sub_13EFC
		tst.w	(CPU_Control_Ctr).w
		bne.w	locret_13FBE
		tst.w	$32(a0)
		bne.s	locret_13FBE
		tst.b	$3D(a0)
		bne.s	loc_13F94
		tst.w	$1C(a0)
		bne.s	locret_13FBE
		bclr	#0,$2A(a0)
		move.w	$10(a0),d0
		sub.w	$10(a1),d0
		bcs.s	loc_13F74
		bset	#0,$2A(a0)

loc_13F74:
		move.w	#$202,(Ctrl_2_logical).w
		move.b	(Level_frame_counter+1).w,d0
		andi.b	#$7F,d0
		beq.s	loc_13FA4
		cmpi.b	#8,$20(a0)
		bne.s	locret_13FBE
		move.w	#$7272,(Ctrl_2_logical).w
		rts
; ---------------------------------------------------------------------------

loc_13F94:
		move.w	#$202,(Ctrl_2_logical).w
		move.b	(Level_frame_counter+1).w,d0
		andi.b	#$7F,d0
		bne.s	loc_13FB2

loc_13FA4:
		move.w	#0,(Ctrl_2_logical).w
		move.w	#6,(CPU_Routine).w
		rts
; ---------------------------------------------------------------------------

loc_13FB2:
		andi.b	#$1F,d0
		bne.s	locret_13FBE
		ori.w	#$7070,(Ctrl_2_logical).w

locret_13FBE:

		rts
; ---------------------------------------------------------------------------

locret_13FC0:
		rts
; ---------------------------------------------------------------------------

loc_13FC2:
		move.b	#1,$2F(a0)
		move.b	#-$10,$25(a0)
		move.b	#2,$2A(a0)
		move.w	#$100,$18(a0)
		move.w	#0,$1A(a0)
		move.w	#0,$1C(a0)
		lea	(Player_1).w,a1
		bsr.w	sub_1459E
		move.b	#1,(Flying_carrying_Sonic_flag).w
		move.w	#$E,(CPU_Routine).w

loc_13FFA:
		move.w	#0,(CPU_Control_Ctr).w
		move.w	#0,(Ctrl_2_logical).w
		move.b	(Level_frame_counter+1).w,d0
		andi.b	#$1F,d0
		bne.s	loc_14016
		ori.w	#$808,(Ctrl_2_logical).w

loc_14016:
		lea	(Flying_carrying_Sonic_flag).w,a2
		lea	(Player_1).w,a1
		btst	#1,$2A(a1)
		bne.s	loc_14082
		move.w	#6,(CPU_Routine).w
		move.b	#0,$2E(a0)
		move.b	#0,$20(a0)
		move.w	#0,$18(a0)
		move.w	#0,$1A(a0)
		move.w	#0,$1C(a0)
		move.b	#2,$2A(a0)
		move.w	#0,$32(a0)
		andi.w	#$7FFF,$A(a0)
		tst.b	$A(a1)
		bpl.s	loc_14068
		ori.w	#-$8000,$A(a0)

loc_14068:
		move.b	$46(a1),$46(a0)
		move.b	$47(a1),$47(a0)
		cmpi.w	#1,(Player_mode).w
		bne.s	loc_14082
		move.w	#$10,(CPU_Routine).w

loc_14082:

		move.w	(Ctrl_1).w,d0
		bra.w	Tails_Carry_Sonic
; ---------------------------------------------------------------------------

loc_1408A:
		move.w	#0,(CPU_Control_Ctr).w
		move.b	#-$10,$25(a0)
		move.w	#0,(Ctrl_2_logical).w
		move.b	(Level_frame_counter+1).w,d0
		andi.b	#$F,d0
		bne.s	loc_140AC
		ori.w	#$7878,(Ctrl_2_logical).w

loc_140AC:
		tst.b	4(a0)
		bmi.s	locret_140C4
		moveq	#0,d0
		move.l	d0,(a0)
		move.w	d0,$10(a0)
		move.w	d0,$14(a0)
		move.w	#$A,(CPU_Routine).w

locret_140C4:
		rts
; ---------------------------------------------------------------------------

loc_140C6:
		move.w	#0,(Ctrl_2_logical).w
		rts
; ---------------------------------------------------------------------------

loc_140CE:
		move.b	#1,$2F(a0)
		move.b	#-$10,$25(a0)
		move.b	#2,$2A(a0)
		move.w	#0,$18(a0)
		move.w	#0,$1A(a0)
		move.w	#0,$1C(a0)
		lea	(Player_1).w,a1
		bsr.w	sub_1459E
		move.b	#1,(Flying_carrying_Sonic_flag).w
		move.w	#$16,(CPU_Routine).w

loc_14106:
		move.w	#0,(CPU_Control_Ctr).w
		move.b	#-$10,$25(a0)
		move.w	#0,(Ctrl_2_logical).w
		move.b	(Level_frame_counter+1).w,d0
		andi.b	#7,d0
		bne.s	loc_14128
		ori.w	#$7070,(Ctrl_2_logical).w

loc_14128:
		move.w	(Camera_Y_pos).w,d0
		addi.w	#$90,d0
		cmp.w	$14(a0),d0
		blo.s	loc_1413C
		move.w	#$18,(CPU_Routine).w

loc_1413C:
		lea	(Flying_carrying_Sonic_flag).w,a2
		lea	(Player_1).w,a1
		move.w	(Ctrl_1).w,d0
		bra.w	Tails_Carry_Sonic
; ---------------------------------------------------------------------------

loc_1414C:
		move.b	#-$10,$25(a0)
		tst.w	(CPU_Control_Ctr).w
		beq.s	loc_14164
		tst.b	(Flying_carrying_Sonic_flag).w
		bne.w	loc_141E2
		bra.w	loc_142E2
; ---------------------------------------------------------------------------

loc_14164:
		move.w	#0,(Ctrl_2_logical).w
		tst.b	(Flying_carrying_Sonic_flag).w
		beq.w	loc_142E2
		clr.b	(__u_FAAC).w
		btst	#1,(Ctrl_1).w
		beq.s	loc_14198
		addq.b	#1,(Tails_Interact).w
		cmpi.b	#-$40,(Tails_Interact).w
		blo.s	loc_141D2
		move.b	#0,(Tails_Interact).w
		ori.w	#$7070,(Ctrl_2_logical).w
		bra.s	loc_141D2
; ---------------------------------------------------------------------------

loc_14198:
		btst	#0,(Ctrl_1).w
		beq.s	loc_141BA
		addq.b	#1,(Tails_Interact).w
		cmpi.b	#$20,(Tails_Interact).w
		blo.s	loc_141D2
		move.b	#0,(Tails_Interact).w
		ori.w	#$7070,(Ctrl_2_logical).w
		bra.s	loc_141D2
; ---------------------------------------------------------------------------

loc_141BA:
		addq.b	#1,(Tails_Interact).w
		cmpi.b	#$58,(Tails_Interact).w
		blo.s	loc_141D2
		move.b	#0,(Tails_Interact).w
		ori.w	#$7070,(Ctrl_2_logical).w

loc_141D2:

		move.b	(Ctrl_1).w,d0
		andi.b	#$C,d0
		or.b	(Ctrl_2_logical).w,d0
		move.b	d0,(Ctrl_2_logical).w

loc_141E2:
		lea	(Flying_carrying_Sonic_flag).w,a2
		lea	(Player_1).w,a1
		move.w	(Ctrl_1).w,d0
		bra.w	Tails_Carry_Sonic
; ---------------------------------------------------------------------------

loc_141F2:
		move.b	#1,$2F(a0)
		move.b	#-$10,$25(a0)
		move.b	#2,$2A(a0)
		move.w	#0,$18(a0)
		move.w	#0,$1A(a0)
		move.w	#0,$1C(a0)
		move.w	#$1C,(CPU_Routine).w

loc_1421C:
		move.w	#0,(CPU_Control_Ctr).w
		move.b	#-$10,$25(a0)
		move.w	#0,(Ctrl_2_logical).w
		move.b	(Level_frame_counter+1).w,d0
		andi.b	#7,d0
		bne.s	loc_1423E
		ori.w	#$7070,(Ctrl_2_logical).w

loc_1423E:
		move.w	(Camera_Y_pos).w,d0
		addi.w	#$90,d0
		cmp.w	$14(a0),d0
		blo.s	locret_14252
		move.w	#$1E,(CPU_Routine).w

locret_14252:
		rts
; ---------------------------------------------------------------------------

loc_14254:
		move.b	#-$10,$25(a0)
		rts
; ---------------------------------------------------------------------------

loc_1425C:
		move.b	#1,$2F(a0)
		move.b	#-$10,$25(a0)
		move.b	#2,$2A(a0)
		move.w	#$100,$18(a0)
		move.w	#0,$1A(a0)
		move.w	#0,$1C(a0)
		move.w	#$22,(CPU_Routine).w

loc_14286:
		move.w	#0,(CPU_Control_Ctr).w
		move.w	#0,(Ctrl_2_logical).w
		move.b	(Level_frame_counter+1).w,d0
		andi.b	#$1F,d0
		bne.s	loc_142A2
		ori.w	#$808,(Ctrl_2_logical).w

loc_142A2:
		btst	#1,$2A(a0)
		bne.s	locret_142E0
		move.w	#6,(CPU_Routine).w
		move.b	#0,$2E(a0)
		move.b	#0,$20(a0)
		move.w	#0,$18(a0)
		move.w	#0,$1A(a0)
		move.w	#0,$1C(a0)
		move.b	#2,$2A(a0)
		move.w	#0,$32(a0)
		andi.w	#$7FFF,$A(a0)

locret_142E0:
		rts
; ---------------------------------------------------------------------------

loc_142E2:

		tst.b	(__u_FAAC).w
		bne.s	loc_14362
		lea	(Player_1).w,a1
		tst.b	4(a1)
		bpl.s	loc_14330
		tst.w	(CPU_Control_Ctr).w
		bne.w	loc_143AA
		cmpi.w	#$300,$1A(a1)
		bge.s	loc_14330
		move.w	#0,$18(a0)
		move.w	#0,(Ctrl_2_logical).w
		cmpi.w	#$200,$1A(a0)
		bge.s	loc_14328
		addq.b	#1,(Tails_Interact).w
		cmpi.b	#$58,(Tails_Interact).w
		blo.s	loc_1432E
		move.b	#0,(Tails_Interact).w

loc_14328:
		ori.w	#$7070,(Ctrl_2_logical).w

loc_1432E:
		bra.s	loc_143AA
; ---------------------------------------------------------------------------

loc_14330:

		st	(__u_FAAC).w
		move.w	$14(a1),d1
		sub.w	$14(a0),d1
		bpl.s	loc_14340
		neg.w	d1

loc_14340:
		lsr.w	#2,d1
		move.w	d1,d2
		lsr.w	#1,d2
		add.w	d2,d1
		move.w	d1,(__u_FA94).w
		move.w	$10(a1),d1
		sub.w	$10(a0),d1
		bpl.s	loc_14358
		neg.w	d1

loc_14358:
		lsr.w	#2,d1
		move.w	d1,(__u_FA92).w
		bra.w	loc_143AA
; ---------------------------------------------------------------------------

loc_14362:
		move.w	#0,(Ctrl_2_logical).w
		lea	(Player_1).w,a1
		move.w	$10(a0),d0
		move.w	$14(a0),d1
		subi.w	#$10,d1
		move.w	(__u_FA92).w,d2
		bclr	#0,$2A(a0)
		cmp.w	$10(a1),d0
		blo.s	loc_14390
		bset	#0,$2A(a0)
		neg.w	d2

loc_14390:
		add.w	d2,$18(a0)
		cmp.w	$14(a1),d1
		bhs.s	loc_143AA
		move.w	(__u_FA94).w,d2
		cmp.w	$14(a1),d1
		blo.s	loc_143A6
		neg.w	d2

loc_143A6:
		add.w	d2,$1A(a0)

loc_143AA:

		lea	(Flying_carrying_Sonic_flag).w,a2
		lea	(Player_1).w,a1
		move.w	(Ctrl_1).w,d0
		bra.w	Tails_Carry_Sonic

; =============== S U B R O U T I N E =======================================


Tails_Carry_Sonic:

		tst.b	(a2)
		beq.w	loc_14534
		cmpi.b	#4,5(a1)
		bhs.w	loc_14466
		btst	#1,$2A(a1)
		beq.w	loc_1445A
		move.w	(__u_F744).w,d1
		cmp.w	$18(a1),d1
		bne.s	loc_1445A
		move.w	(__u_F74C).w,d1
		cmp.w	$1A(a1),d1
		bne.s	loc_14460
		tst.b	$2E(a1)
		bmi.s	loc_1446A
		andi.b	#$70,d0
		beq.w	loc_14474
		clr.b	$2E(a1)
		clr.b	(a2)
		move.b	#$12,1(a2)
		andi.w	#$F00,d0
		beq.w	loc_14410
		move.b	#$3C,1(a2)

loc_14410:
		btst	#$A,d0
		beq.s	loc_1441C
		move.w	#-$200,$18(a1)

loc_1441C:
		btst	#$B,d0
		beq.s	loc_14428
		move.w	#$200,$18(a1)

loc_14428:
		move.w	#-$380,$1A(a1)
		bset	#1,$2A(a1)
		move.b	#1,$40(a1)
		move.b	#$E,$1E(a1)
		move.b	#7,$1F(a1)
		move.b	#2,$20(a1)
		bset	#2,$2A(a1)
		bclr	#4,$2A(a1)
		rts
; ---------------------------------------------------------------------------

loc_1445A:
		move.w	#-$100,$1A(a1)

loc_14460:
		move.b	#0,$40(a1)

loc_14466:
		clr.b	$2E(a1)

loc_1446A:
		clr.b	(a2)
		move.b	#$3C,1(a2)
		rts
; ---------------------------------------------------------------------------

loc_14474:
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		addi.w	#$1C,$14(a1)
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_14492
		subi.w	#$38,$14(a1)

loc_14492:
		andi.b	#-4,4(a1)
		andi.b	#-2,$2A(a1)
		move.b	$2A(a0),d0
		andi.b	#1,d0
		or.b	d0,4(a1)
		or.b	d0,$2A(a1)
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_144BA
		eori.b	#2,4(a1)

loc_144BA:
		subq.b	#1,$24(a1)
		bpl.s	loc_144F8
		move.b	#$B,$24(a1)
		moveq	#0,d1
		move.b	$23(a1),d1
		addq.b	#1,$23(a1)
		move.b	byte_14522(pc,d1.w),d0
		cmpi.b	#-1,d0
		bne.s	loc_144E4
		move.b	#0,$23(a1)
		move.b	byte_14522(pc),d0

loc_144E4:
		move.b	d0,$22(a1)
		moveq	#0,d0
		move.b	$22(a1),d0
		move.l	a2,-(sp)
		jsr	(Tails_Carry_LoadPLC).l
		movea.l	(sp)+,a2

loc_144F8:
		move.w	$18(a0),(Player_1+x_vel).w
		move.w	$18(a0),(__u_F744).w
		move.w	$1A(a0),(Player_1+y_vel).w
		move.w	$1A(a0),(__u_F74C).w
		movem.l	d0-a6,-(sp)
		lea	(Player_1).w,a0
		bsr.w	SonicKnux_DoLevelCollision
		movem.l	(sp)+,d0-a6
		rts
; ---------------------------------------------------------------------------
byte_14522:	dc.b $91
		dc.b $91
		dc.b $90
		dc.b $90
		dc.b $90
		dc.b $90
		dc.b $90
		dc.b $90
		dc.b $92
		dc.b $92
		dc.b $92
		dc.b $92
		dc.b $92
		dc.b $92
		dc.b $91
		dc.b $91
		dc.b $FF
		dc.b 0
; ---------------------------------------------------------------------------

loc_14534:
		tst.b	1(a2)
		beq.s	loc_14542
		subq.b	#1,1(a2)
		bne.w	locret_1459C

loc_14542:
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		addi.w	#$10,d0
		cmpi.w	#$20,d0
		bhs.w	locret_1459C
		move.w	$14(a1),d1
		sub.w	$14(a0),d1
		subi.w	#$20,d1
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_1456C
		addi.w	#$50,d1

loc_1456C:
		cmpi.w	#$10,d1
		bhs.w	locret_1459C
		tst.b	$2E(a1)
		bne.s	locret_1459C
		cmpi.b	#4,5(a1)
		bhs.s	locret_1459C
		tst.b	(Debug_On).w
		bne.s	locret_1459C
		tst.b	$3D(a1)
		bne.s	locret_1459C
		bsr.s	sub_1459E
		moveq	#$4A,d0
		jsr	Play_Sound_2.w
		move.b	#1,(a2)

locret_1459C:
					; Tails_Carry_Sonic+198j ...
		rts
; End of function Tails_Carry_Sonic


; =============== S U B R O U T I N E =======================================


sub_1459E:

		clr.w	$18(a1)
		clr.w	$1A(a1)
		clr.w	$1C(a1)
		clr.w	$26(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		addi.w	#$1C,$14(a1)
		move.w	#$2200,$20(a1)
		move.b	#0,$24(a1)
		move.b	#0,$23(a1)
		move.b	#3,$2E(a1)
		bset	#1,$2A(a1)
		bclr	#4,$2A(a1)
		move.b	#0,$3D(a1)
		andi.b	#-4,4(a1)
		andi.b	#-2,$2A(a1)
		move.b	$2A(a0),d0
		andi.b	#1,d0
		or.b	d0,4(a1)
		or.b	d0,$2A(a1)
		move.w	$18(a0),(__u_F744).w
		move.w	$18(a0),$18(a1)
		move.w	$1A(a0),(__u_F74C).w
		move.w	$1A(a0),$1A(a1)
		tst.b	(Reverse_gravity_flag).w
		beq.s	locret_14630
		subi.w	#$38,$14(a1)
		eori.b	#2,4(a1)

locret_14630:
		rts
; End of function sub_1459E


; =============== S U B R O U T I N E =======================================


sub_14632:
		tst.b	(Water_flag).w
		bne.s	loc_1463A

locret_14638:

		rts
; ---------------------------------------------------------------------------

loc_1463A:
		move.w	(Water_level).w,d0
		cmp.w	$14(a0),d0
		bge.w	loc_146BA

		tst.w	(Breathing_bubbles_P2+$40).w			; NAT: Check if spawned
		bne.s	.yes				; if yes, branch
		move.l	#Obj_Air_CountDown,(Breathing_bubbles_P2).w
		move.b	#-$7F,(Breathing_bubbles_P2+$2C).w
		move.l	a0,(Breathing_bubbles_P2+$40).w

.yes		bset	#6,$2A(a0)
		bne.s	locret_14638
		addq.b	#1,(Water_entered_counter).w
		movea.l	a0,a1
		bsr.w	Player_ResetAirTimer

		move.w	#$300,(a4)
		move.w	#6,2(a4)
		move.w	#$40,4(a4)
		tst.b	(Super_Tails_flag).w
		beq.s	loc_1468E
		move.w	#$400,(a4)
		move.w	#$C,2(a4)
		move.w	#$60,4(a4)

loc_1468E:
		btst	#2,$2B(a1)			; check for speed shoes
		beq.s	.noshoes			; if no, branch
		move.w	#$500,(a4)
		move.w	#$A,Sonic_Knux_acceleration-Sonic_Knux_top_speed(a4)
		move.w	#$60,Sonic_Knux_deceleration-Sonic_Knux_top_speed(a4)

.noshoes	cmpi.w	#4,(CPU_Routine).w
		beq.s	loc_1469C
		tst.b	$2E(a0)
		bne.w	locret_14638

loc_1469C:
		asr	$18(a0)
		asr	$1A(a0)
		asr	$1A(a0)
		beq.w	locret_14638
		move.w	#$100,$20(a6)
		move.w	#$39,d0
		jmp	Play_Sound_2.w
; ---------------------------------------------------------------------------

loc_146BA:
		bclr	#6,$2A(a0)
		beq.w	locret_14638
		addq.b	#1,(Water_entered_counter).w
		movea.l	a0,a1
		bsr.w	Player_ResetAirTimer
		move.w	#$600,(a4)
		move.w	#$C,2(a4)
		move.w	#$80,4(a4)
		tst.b	(Super_Tails_flag).w
		beq.s	loc_146F4
		move.w	#$800,(a4)
		move.w	#$18,2(a4)
		move.w	#$C0,4(a4)

loc_146F4:
		btst	#2,$2B(a0)
		beq.s	.noshoes
		move.w	#$C00,Sonic_Knux_top_speed-Sonic_Knux_top_speed(a4)
		move.w	#$18,Sonic_Knux_acceleration-Sonic_Knux_top_speed(a4)
		move.w	#$80,Sonic_Knux_deceleration-Sonic_Knux_top_speed(a4)

.noshoes	cmpi.b	#4,5(a0)
		beq.s	loc_14718
		cmpi.w	#4,(CPU_Routine).w
		beq.s	loc_1470A
		tst.b	$2E(a0)
		bne.s	loc_14718

loc_1470A:
		move.w	$1A(a0),d0
		cmpi.w	#-$400,d0
		blt.s	loc_14718
		asl	$1A(a0)

loc_14718:

		cmpi.b	#$1C,$20(a0)
		beq.w	locret_14638
		tst.w	$1A(a0)
		beq.w	locret_14638
		move.w	#$100,$20(a6)
		cmpi.w	#-$1000,$1A(a0)
		bgt.s	loc_1473E
		move.w	#-$1000,$1A(a0)

loc_1473E:
		move.w	#$39,d0
		jmp	Play_Sound_2.w
; End of function sub_14632

; ---------------------------------------------------------------------------

Tails_Stand_Path:
		tst.b	(Flying_carrying_Sonic_flag).w
		beq.s	loc_14760
		lea	(Player_1).w,a1
		clr.b	$2E(a1)
		bset	#1,$2A(a1)
		clr.w	(Flying_carrying_Sonic_flag).w

loc_14760:
		bsr.w	SonicKnux_Spindash
		bsr.w	Tails_Jump
		bsr.w	Player_SlopeResist
		bsr.w	Tails_InputAcceleration_Path
		bsr.w	Tails_Roll
		bsr.w	Player_LevelBound
		jsr	MoveSprite_TestGravity2.w
		bsr.w	Call_Player_AnglePos
		bsr.w	Player_SlopeRepel
		tst.b	(BG_Collision).w
		beq.s	locret_147B6
		jsr	sub_F846.w
		tst.w	d1
		bmi.w	Kill_Character
		movem.l	a4-a6,-(sp)
		jsr	CheckLeftWallDist.w
		tst.w	d1
		bpl.s	loc_147A6
		sub.w	d1,$10(a0)

loc_147A6:
		jsr	CheckRightWallDist.w
		tst.w	d1
		bpl.s	loc_147B2
		add.w	d1,$10(a0)

loc_147B2:
		movem.l	(sp)+,a4-a6

locret_147B6:
		rts
; ---------------------------------------------------------------------------

Tails_Stand_Freespace:
		bsr.w	Tails_JumpHeight
		bsr.w	Tails_InputAcceleration_Freespace
		bsr.w	Player_LevelBound
		jsr	MoveSprite_TestGravity.w
		btst	#6,$2A(a0)
		beq.s	loc_147DE
		subi.w	#$28,$1A(a0)

loc_147DE:
		bsr.w	Player_JumpAngle
		bsr.w	Tails_DoLevelCollision
		rts
; ---------------------------------------------------------------------------

Tails_FlyingSwimming:
		bsr.w	Tails_Move_FlySwim
		bsr.w	Tails_InputAcceleration_Freespace
		bsr.w	Player_LevelBound
		jsr	MoveSprite_TestGravity2.w
		bsr.w	Player_JumpAngle
		movem.l	a4-a6,-(sp)
		bsr.w	Tails_DoLevelCollision
		movem.l	(sp)+,a4-a6
		tst.w	(Player_mode).w
		bne.s	locret_14820
		lea	(Flying_carrying_Sonic_flag).w,a2
		lea	(Player_1).w,a1
		move.w	(Ctrl_1).w,d0
		bsr.w	Tails_Carry_Sonic

locret_14820:
		rts

; =============== S U B R O U T I N E =======================================


Tails_Move_FlySwim:
		move.b	(Level_frame_counter+1).w,d0
		andi.b	#1,d0
		beq.s	loc_14836
		tst.b	$25(a0)
		beq.s	loc_14836
		subq.b	#1,$25(a0)

loc_14836:
					; Tails_Move_FlySwim+Ej
		cmpi.b	#1,$2F(a0)
		beq.s	loc_14860
		cmpi.w	#-$100,$1A(a0)
		blt.s	loc_14858
		subi.w	#$20,$1A(a0)
		addq.b	#1,$2F(a0)
		cmpi.b	#$20,$2F(a0)
		bne.s	loc_1485E

loc_14858:
		move.b	#1,$2F(a0)

loc_1485E:
		bra.s	loc_14892
; ---------------------------------------------------------------------------

loc_14860:
		move.b	(Ctrl_2_pressed_logical).w,d0
		andi.b	#$70,d0
		beq.s	loc_1488C
		cmpi.w	#-$100,$1A(a0)
		blt.s	loc_1488C
		tst.b	$25(a0)
		beq.s	loc_1488C
		btst	#6,$2A(a0)
		beq.s	loc_14886
		tst.b	(Flying_carrying_Sonic_flag).w
		bne.s	loc_1488C

loc_14886:
		move.b	#2,$2F(a0)

loc_1488C:
					; Tails_Move_FlySwim+4Ej ...
		addi.w	#8,$1A(a0)

loc_14892:
		move.w	(Camera_min_Y_pos).w,d0
		addi.w	#$10,d0
		cmp.w	$14(a0),d0
		blt.s	Tails_Set_Flying_Animation
		tst.w	$1A(a0)
		bpl.s	Tails_Set_Flying_Animation
		move.w	#0,$1A(a0)
; End of function Tails_Move_FlySwim


; =============== S U B R O U T I N E =======================================


Tails_Set_Flying_Animation:

		btst	#6,$2A(a0)
		bne.s	loc_14914
		moveq	#$20,d0
		tst.w	(Competition_mode).w
		bne.s	loc_148F4
		tst.w	$1A(a0)
		bpl.s	loc_148C4
		moveq	#$21,d0

loc_148C4:
		tst.b	(Flying_carrying_Sonic_flag).w
		beq.s	loc_148CC
		addq.b	#2,d0

loc_148CC:
		tst.b	$25(a0)
		bne.s	loc_148F4
		moveq	#$24,d0
		move.b	d0,$20(a0)
		tst.b	4(a0)
		bpl.s	locret_148F2
		move.b	(Level_frame_counter+1).w,d0
		addq.b	#8,d0
		andi.b	#$F,d0
		bne.s	locret_148F2
		moveq	#-$45,d0
		jsr	Play_Sound_2.w

locret_148F2:
					; Tails_Set_Flying_Animation+3Cj
		rts
; ---------------------------------------------------------------------------

loc_148F4:
					; Tails_Set_Flying_Animation+24j
		move.b	d0,$20(a0)
		tst.b	4(a0)
		bpl.s	locret_14912
		move.b	(Level_frame_counter+1).w,d0
		addq.b	#8,d0
		andi.b	#$F,d0
		bne.s	locret_14912
		moveq	#-$46,d0
		jsr	Play_Sound_2.w

locret_14912:
					; Tails_Set_Flying_Animation+5Cj
		rts
; ---------------------------------------------------------------------------

loc_14914:
		moveq	#$25,d0
		tst.w	$1A(a0)
		bpl.s	loc_1491E
		moveq	#$26,d0

loc_1491E:
		tst.b	(Flying_carrying_Sonic_flag).w
		beq.s	loc_14926
		moveq	#$27,d0

loc_14926:
		tst.b	$25(a0)
		bne.s	loc_1492E
		moveq	#$28,d0

loc_1492E:
		move.b	d0,$20(a0)
		rts
; End of function Tails_Set_Flying_Animation

; ---------------------------------------------------------------------------

Tails_Spin_Path:
		tst.b	(Flying_carrying_Sonic_flag).w
		beq.s	loc_1494C
		lea	(Player_1).w,a1
		clr.b	$2E(a1)
		bset	#1,$2A(a1)
		clr.w	(Flying_carrying_Sonic_flag).w

loc_1494C:
		tst.b	$3D(a0)
		bne.s	loc_14956
		bsr.w	Tails_Jump

loc_14956:
		bsr.w	Player_RollRepel
		bsr.w	Tails_RollSpeed
		bsr.w	Player_LevelBound
		jsr	MoveSprite_TestGravity2.w
		bsr.w	Call_Player_AnglePos
		bsr.w	Player_SlopeRepel
		tst.b	(BG_Collision).w
		beq.s	locret_149A0
		jsr	sub_F846.w
		tst.w	d1
		bmi.w	Kill_Character
		movem.l	a4-a6,-(sp)
		jsr	CheckLeftWallDist.w
		tst.w	d1
		bpl.s	loc_14990
		sub.w	d1,$10(a0)

loc_14990:
		jsr	CheckRightWallDist.w
		tst.w	d1
		bpl.s	loc_1499C
		add.w	d1,$10(a0)

loc_1499C:
		movem.l	(sp)+,a4-a6

locret_149A0:
		rts
; ---------------------------------------------------------------------------

Tails_Spin_Freespace:
		bsr.w	Tails_JumpHeight
		bsr.w	Tails_InputAcceleration_Freespace
		bsr.w	Player_LevelBound
		jsr	MoveSprite_TestGravity.w
		btst	#6,$2A(a0)
		beq.s	loc_149DA
		subi.w	#$28,$1A(a0)

loc_149DA:
		bsr.w	Player_JumpAngle
		bsr.w	Tails_DoLevelCollision
		rts

; =============== S U B R O U T I N E =======================================


Tails_InputAcceleration_Path:

		move.w	(a4),d6
		move.w	2(a4),d5
		move.w	4(a4),d4
		tst.b	$2B(a0)
		bmi.w	loc_14B5C
		tst.w	$32(a0)
		bne.w	loc_14B14
		btst	#2,(Ctrl_2_logical).w
		beq.s	loc_14A0A
		bsr.w	sub_14C20

loc_14A0A:
		btst	#3,(Ctrl_2_logical).w
		beq.s	loc_14A16
		bsr.w	sub_14CAC

loc_14A16:
		move.b	$26(a0),d0
		addi.b	#$20,d0
		andi.b	#$C0,d0
		bne.w	loc_14B14
		tst.w	$1C(a0)
		bne.w	loc_14B14
		bclr	#5,$2A(a0)
		move.b	#5,$20(a0)
		btst	#3,$2A(a0)
		beq.s	loc_14A6C
		movea.w	$42(a0),a1
		tst.b	$2A(a1)
		bmi.s	loc_14AA0
		moveq	#0,d1
		move.b	7(a1),d1
		move.w	d1,d2
		add.w	d2,d2
		subq.w	#4,d2
		add.w	$10(a0),d1
		sub.w	$10(a1),d1
		cmpi.w	#4,d1
		blt.s	loc_14A92
		cmp.w	d2,d1
		bge.s	loc_14A82
		bra.s	loc_14AA0
; ---------------------------------------------------------------------------

loc_14A6C:
		move.w	$10(a0),d3
		bsr.w	ChooseChkFloorEdge
		cmpi.w	#$C,d1
		blt.s	loc_14AA0
		cmpi.b	#3,$3A(a0)
		bne.s	loc_14A8A

loc_14A82:
		bclr	#0,$2A(a0)
		bra.s	loc_14A98
; ---------------------------------------------------------------------------

loc_14A8A:
		cmpi.b	#3,$3B(a0)
		bne.s	loc_14AA0

loc_14A92:
		bset	#0,$2A(a0)

loc_14A98:
		move.b	#6,$20(a0)
		bra.s	loc_14B14
; ---------------------------------------------------------------------------

loc_14AA0:
					; Tails_InputAcceleration_Path+86j ...
		btst	#1,(Ctrl_2_logical).w
		beq.s	loc_14ADA
		move.b	#8,$20(a0)
		addq.b	#1,$39(a0)
		cmpi.b	#60,$39(a0)
		blo.s	loc_14B1A
		move.b	#60,$39(a0)

		tst.b	(Reverse_gravity_flag).w
		bne.s	loc_14AD0
		cmpi.w	#-$58,(a5)
		beq.s	loc_14B26
		subq.w	#2,(a5)
		bra.s	loc_14B26
; ---------------------------------------------------------------------------

loc_14AD0:
		cmpi.w	#$58,(a5)
		beq.s	loc_14B26
		addq.w	#2,(a5)
		bra.s	loc_14B26
; ---------------------------------------------------------------------------

loc_14ADA:
		btst	#0,(Ctrl_2_logical).w
		beq.s	loc_14B14
		move.b	#7,$20(a0)
		addq.b	#1,$39(a0)
		cmpi.b	#60,$39(a0)
		blo.s	loc_14B1A
		move.b	#60,$39(a0)

		tst.b	(Reverse_gravity_flag).w
		bne.s	loc_14B0A
		cmpi.w	#$58,(a5)
		beq.s	loc_14B26
		addq.w	#2,(a5)
		bra.s	loc_14B26
; ---------------------------------------------------------------------------

loc_14B0A:
		cmpi.w	#-$58,(a5)
		beq.s	loc_14B26
		subq.w	#2,(a5)
		bra.s	loc_14B26
; ---------------------------------------------------------------------------

loc_14B14:
					; Tails_InputAcceleration_Path+3Ej ...
		clr.b	$39(a0)

loc_14B1A:
					; Tails_InputAcceleration_Path+10Ej
		tst.w	(a5)
		beq.s	loc_14B26
		bpl.s	loc_14B24
		addq.w	#4,(a5)

loc_14B24:
		subq.w	#2,(a5)

loc_14B26:
					; Tails_InputAcceleration_Path+EAj ...
		tst.b	(Super_Tails_flag).w
		beq.s	loc_14B30
		move.w	#$C,d5

loc_14B30:
		move.b	(Ctrl_2_logical).w,d0
		andi.b	#$C,d0
		bne.s	loc_14B5C
		move.w	$1C(a0),d0
		beq.s	loc_14B5C
		bmi.s	loc_14B50
		sub.w	d5,d0
		bcc.s	loc_14B4A
		move.w	#0,d0

loc_14B4A:
		move.w	d0,$1C(a0)
		bra.s	loc_14B5C
; ---------------------------------------------------------------------------

loc_14B50:
		add.w	d5,d0
		bcc.s	loc_14B58
		move.w	#0,d0

loc_14B58:
		move.w	d0,$1C(a0)

loc_14B5C:
					; Tails_InputAcceleration_Path+154j ...
		move.b	$26(a0),d0
		jsr	GetSineCosine.w
		muls.w	$1C(a0),d1
		asr.l	#8,d1
		move.w	d1,$18(a0)
		muls.w	$1C(a0),d0
		asr.l	#8,d0
		move.w	d0,$1A(a0)

loc_14B7A:
		btst	#6,$2E(a0)
		bne.w	locret_14C1E
		move.b	$26(a0),d0
		andi.b	#$3F,d0
		beq.s	loc_14B9A
		move.b	$26(a0),d0
		addi.b	#$40,d0
		bmi.w	locret_14C1E

loc_14B9A:
		move.b	#$40,d1
		tst.w	$1C(a0)
		beq.s	locret_14C1E
		bmi.s	loc_14BA8
		neg.w	d1

loc_14BA8:
		move.b	$26(a0),d0
		add.b	d1,d0
		move.w	d0,-(sp)
		jsr	sub_F61C.w
		move.w	(sp)+,d0
		tst.w	d1
		bpl.s	locret_14C1E
		asl.w	#8,d1
		cmpi.b	#8,(Current_zone).w
		bne.s	loc_14BCA
		tst.b	d0
		bpl.s	loc_14BCA
		subq.b	#1,d0

loc_14BCA:
					; Tails_InputAcceleration_Path+1E2j
		addi.b	#$20,d0
		andi.b	#$C0,d0
		beq.s	loc_14C1A
		cmpi.b	#$40,d0
		beq.s	loc_14C00
		cmpi.b	#$80,d0
		beq.s	loc_14BFA
		add.w	d1,$18(a0)
		move.w	#0,$1C(a0)
		btst	#0,$2A(a0)
		bne.s	locret_14BF8
		bset	#5,$2A(a0)

locret_14BF8:
					; Tails_InputAcceleration_Path+22Cj
		rts
; ---------------------------------------------------------------------------

loc_14BFA:
		sub.w	d1,$1A(a0)
		rts
; ---------------------------------------------------------------------------

loc_14C00:
		sub.w	d1,$18(a0)
		move.w	#0,$1C(a0)
		btst	#0,$2A(a0)
		beq.s	locret_14BF8
		bset	#5,$2A(a0)
		rts
; ---------------------------------------------------------------------------

loc_14C1A:
		add.w	d1,$1A(a0)

locret_14C1E:
					; Tails_InputAcceleration_Path+1B2j ...
		rts
; End of function Tails_InputAcceleration_Path


; =============== S U B R O U T I N E =======================================


sub_14C20:
		move.w	$1C(a0),d0
		beq.s	loc_14C28
		bpl.s	loc_14C5A

loc_14C28:
		bset	#0,$2A(a0)
		bne.s	loc_14C3C
		bclr	#5,$2A(a0)
		move.b	#1,$21(a0)

loc_14C3C:
		sub.w	d5,d0
		move.w	d6,d1
		neg.w	d1
		cmp.w	d1,d0
		bgt.s	loc_14C4E
		add.w	d5,d0
		cmp.w	d1,d0
		ble.s	loc_14C4E
		move.w	d1,d0

loc_14C4E:

		move.w	d0,$1C(a0)
		move.b	#0,$20(a0)
		rts
; ---------------------------------------------------------------------------

loc_14C5A:
		sub.w	d4,d0
		bcc.s	loc_14C62
		move.w	#-$80,d0

loc_14C62:
		move.w	d0,$1C(a0)
		move.b	$26(a0),d0
		addi.b	#$20,d0
		andi.b	#$C0,d0
		bne.s	locret_14CAA
		cmpi.w	#$400,d0
		blt.s	locret_14CAA
		tst.b	$2D(a0)
		bmi.s	locret_14CAA
		move.w	#$36,d0
		jsr	Play_Sound_2.w
		move.b	#$D,$20(a0)
		bclr	#0,$2A(a0)
		cmpi.b	#$C,$2C(a0)
		blo.s	locret_14CAA
		move.b	#6,5(a6)
		move.b	#$15,$22(a6)

locret_14CAA:

		rts
; End of function sub_14C20


; =============== S U B R O U T I N E =======================================


sub_14CAC:
		move.w	$1C(a0),d0
		bmi.s	loc_14CE0
		bclr	#0,$2A(a0)
		beq.s	loc_14CC6
		bclr	#5,$2A(a0)
		move.b	#1,$21(a0)

loc_14CC6:
		add.w	d5,d0
		cmp.w	d6,d0
		blt.s	loc_14CD4
		sub.w	d5,d0
		cmp.w	d6,d0
		bge.s	loc_14CD4
		move.w	d6,d0

loc_14CD4:

		move.w	d0,$1C(a0)
		move.b	#0,$20(a0)
		rts
; ---------------------------------------------------------------------------

loc_14CE0:
		add.w	d4,d0
		bcc.s	loc_14CE8
		move.w	#$80,d0

loc_14CE8:
		move.w	d0,$1C(a0)
		move.b	$26(a0),d0
		addi.b	#$20,d0
		andi.b	#$C0,d0
		bne.s	locret_14D30
		cmpi.w	#-$400,d0
		bgt.s	locret_14D30
		tst.b	$2D(a0)
		bmi.s	locret_14D30
		move.w	#$36,d0
		jsr	Play_Sound_2.w
		move.b	#$D,$20(a0)
		bset	#0,$2A(a0)
		cmpi.b	#$C,$2C(a0)
		blo.s	locret_14D30
		move.b	#6,5(a6)
		move.b	#$15,$22(a6)

locret_14D30:

		rts
; End of function sub_14CAC


; =============== S U B R O U T I N E =======================================

; sub_14D32:
Tails_RollSpeed:
		move.w	(a4),d6
		asl.w	#1,d6
		move.w	2(a4),d5
		asr.w	#1,d5
		tst.b	(Super_Tails_flag).w
		beq.s	loc_14D46
		move.w	#6,d5

loc_14D46:
		move.w	#$20,d4
		tst.b	$3D(a0)
		bmi.w	loc_14DF0
		tst.b	$2B(a0)
		bmi.w	loc_14DF0
		tst.w	$32(a0)
		bne.s	loc_14D78
		btst	#2,(Ctrl_2_logical).w
		beq.s	loc_14D6C
		bsr.w	sub_14E32

loc_14D6C:
		btst	#3,(Ctrl_2_logical).w
		beq.s	loc_14D78
		bsr.w	sub_14E56

loc_14D78:

		move.w	$1C(a0),d0
		beq.s	loc_14D9A
		bmi.s	loc_14D8E
		sub.w	d5,d0
		bcc.s	loc_14D88
		move.w	#0,d0

loc_14D88:
		move.w	d0,$1C(a0)
		bra.s	loc_14D9A
; ---------------------------------------------------------------------------

loc_14D8E:
		add.w	d5,d0
		bcc.s	loc_14D96
		move.w	#0,d0

loc_14D96:
		move.w	d0,$1C(a0)

loc_14D9A:

		move.w	$1C(a0),d0
		bpl.s	loc_14DA2
		neg.w	d0

loc_14DA2:
		cmpi.w	#$80,d0
		bhs.s	loc_14DF0
		tst.b	$3D(a0)
		bne.s	loc_14DDE
		bclr	#2,$2A(a0)
		move.b	$1E(a0),d0
		move.b	$44(a0),$1E(a0)
		move.b	$45(a0),$1F(a0)
		move.b	#5,$20(a0)
		sub.b	$44(a0),d0
		ext.w	d0
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_14DD8
		neg.w	d0

loc_14DD8:
		add.w	d0,$14(a0)
		bra.s	loc_14DF0
; ---------------------------------------------------------------------------

loc_14DDE:
		move.w	#$400,$1C(a0)
		btst	#0,$2A(a0)
		beq.s	loc_14DF0
		neg.w	$1C(a0)

loc_14DF0:

		tst.w	(a5)
		beq.s	loc_14DFC
		bpl.s	loc_14DFA
		addq.w	#4,(a5)

loc_14DFA:
		subq.w	#2,(a5)

loc_14DFC:
		move.b	$26(a0),d0
		jsr	GetSineCosine.w
		muls.w	$1C(a0),d0
		asr.l	#8,d0
		move.w	d0,$1A(a0)
		muls.w	$1C(a0),d1
		asr.l	#8,d1
		cmpi.w	#$1000,d1
		ble.s	loc_14E20
		move.w	#$1000,d1

loc_14E20:
		cmpi.w	#-$1000,d1
		bge.s	loc_14E2A
		move.w	#-$1000,d1

loc_14E2A:
		move.w	d1,$18(a0)
		bra.w	loc_14B7A
; End of function Tails_RollSpeed


; =============== S U B R O U T I N E =======================================


sub_14E32:
		move.w	$1C(a0),d0
		beq.s	loc_14E3A
		bpl.s	loc_14E48

loc_14E3A:
		bset	#0,$2A(a0)
		move.b	#2,$20(a0)
		rts
; ---------------------------------------------------------------------------

loc_14E48:
		sub.w	d4,d0
		bcc.s	loc_14E50
		move.w	#-$80,d0

loc_14E50:
		move.w	d0,$1C(a0)
		rts
; End of function sub_14E32


; =============== S U B R O U T I N E =======================================


sub_14E56:
		move.w	$1C(a0),d0
		bmi.s	loc_14E6A
		bclr	#0,$2A(a0)
		move.b	#2,$20(a0)
		rts
; ---------------------------------------------------------------------------

loc_14E6A:
		add.w	d4,d0
		bcc.s	loc_14E72
		move.w	#$80,d0

loc_14E72:
		move.w	d0,$1C(a0)
		rts
; End of function sub_14E56


; =============== S U B R O U T I N E =======================================


Tails_InputAcceleration_Freespace:

		move.w	(a4),d6
		move.w	2(a4),d5
		asl.w	#1,d5
		btst	#4,$2A(a0)
		bne.s	loc_14ECC
		move.w	$18(a0),d0
		btst	#2,(Ctrl_2_logical).w
		beq.s	loc_14EAC
		bset	#0,$2A(a0)
		sub.w	d5,d0
		move.w	d6,d1
		neg.w	d1
		cmp.w	d1,d0
		bgt.s	loc_14EAC
		add.w	d5,d0
		cmp.w	d1,d0
		ble.s	loc_14EAC
		move.w	d1,d0

loc_14EAC:
					; Tails_InputAcceleration_Freespace+2Aj ...
		btst	#3,(Ctrl_2_logical).w
		beq.s	loc_14EC8
		bclr	#0,$2A(a0)
		add.w	d5,d0
		cmp.w	d6,d0
		blt.s	loc_14EC8
		sub.w	d5,d0
		cmp.w	d6,d0
		bge.s	loc_14EC8
		move.w	d6,d0

loc_14EC8:
					; Tails_InputAcceleration_Freespace+46j ...
		move.w	d0,$18(a0)

loc_14ECC:
		tst.w	(a5)
		beq.s	loc_14ED8
		bpl.s	loc_14ED6
		addq.w	#4,(a5)

loc_14ED6:
		subq.w	#2,(a5)

loc_14ED8:
		cmpi.w	#-$400,$1A(a0)
		blo.s	locret_14F06
		move.w	$18(a0),d0
		move.w	d0,d1
		asr.w	#5,d1
		beq.s	locret_14F06
		bmi.s	loc_14EFA
		sub.w	d1,d0
		bcc.s	loc_14EF4
		move.w	#0,d0

loc_14EF4:
		move.w	d0,$18(a0)
		rts
; ---------------------------------------------------------------------------

loc_14EFA:
		sub.w	d1,d0
		bcs.s	loc_14F02
		move.w	#0,d0

loc_14F02:
		move.w	d0,$18(a0)

locret_14F06:
		rts

; =============== S U B R O U T I N E =======================================

; Tails_Spin:
Tails_Roll:
		tst.b	$2B(a0)
		bmi.s	locret_14FA8
		move.b	(Ctrl_2_logical).w,d0
		andi.b	#$C,d0
		bne.s	locret_14FA8
		btst	#1,(Ctrl_2_logical).w
		beq.s	loc_14FAA
		move.w	$1C(a0),d0
		bpl.s	loc_14F94
		neg.w	d0

loc_14F94:
		cmpi.w	#$100,d0
		bhs.s	loc_14FBA
	;	btst	#3,$2A(a0)		; NAT: Disable check
	;	bne.s	locret_14FA8
		move.b	#8,$20(a0)

locret_14FA8:
		rts
; ---------------------------------------------------------------------------

loc_14FAA:
		cmpi.b	#8,$20(a0)
		bne.s	locret_14FA8
		clr.b	$20(a0)
		rts
; ---------------------------------------------------------------------------

loc_14FBA:
		btst	#2,$2A(a0)
		bne.s	locret_14FA8
; ---------------------------------------------------------------------------

loc_14FC4:
		bset	#2,$2A(a0)
		move.b	#$E,$1E(a0)
		move.b	#7,$1F(a0)
		move.b	#2,$20(a0)
		addq.w	#1,$14(a0)
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_14FEA
		subq.w	#2,$14(a0)

loc_14FEA:
		move.w	#$3C,d0
		jsr	Play_Sound_2.w
		tst.w	$1C(a0)
		bne.s	locret_15000
		move.w	#$200,$1C(a0)

locret_15000:
		rts
; End of function Tails_Roll


; =============== S U B R O U T I N E =======================================

Tails_Jump:
		moveq	#%01110000,d1				; MJ3: set buttons to normal A/B/C presses
		tst.b	(Debug_On).w		; MJ3: is debug mode enabled?
		beq.s	TJ_NoDebug				; MJ3: if not, branch
		moveq	#%00100000,d1				; MJ3: set to get only "C" now...

TJ_NoDebug:
		move.b	(Ctrl_2_pressed_logical).w,d0
		and.b	d1,d0					; MJ3: Get only button presses
		beq.w	locret_150D0
		moveq	#0,d0
		move.b	$26(a0),d0
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_15024
		addi.b	#$40,d0
		neg.b	d0
		subi.b	#$40,d0

loc_15024:
		addi.b	#$80,d0
		movem.l	a4-a6,-(sp)
		bsr.w	CalcRoomOverHead
		movem.l	(sp)+,a4-a6
		cmpi.w	#5,d1
		blt.w	locret_150D0
		move.w	#$680,d2
		btst	#6,$2A(a0)
		beq.s	loc_1504C
		move.w	#$380,d2

loc_1504C:
		moveq	#0,d0
		move.b	$26(a0),d0
		subi.b	#$40,d0
		jsr	GetSineCosine.w
		muls.w	d2,d1
		asr.l	#8,d1
		add.w	d1,$18(a0)
		muls.w	d2,d0
		asr.l	#8,d0
		add.w	d0,$1A(a0)
		bset	#1,$2A(a0)
		bclr	#5,$2A(a0)
		addq.l	#4,sp
		move.b	#1,$40(a0)
		clr.b	$3C(a0)
		move.w	#$62,d0
		jsr	Play_Sound_2.w

		move.b	#$E,$1E(a0)		; NAT: Rolljump was setting the wrong hitbox
		move.b	#7,$1F(a0)
		btst	#2,$2A(a0)
		bne.s	loc_150D2
		move.b	#2,$20(a0)
		bset	#2,$2A(a0)
		move.b	$1E(a0),d0
		sub.b	$44(a0),d0
		ext.w	d0
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_150CC
		neg.w	d0

loc_150CC:
		sub.w	d0,$14(a0)

locret_150D0:
		rts
; ---------------------------------------------------------------------------

loc_150D2:
		bset	#4,$2A(a0)
		rts
; End of function Tails_Jump


; =============== S U B R O U T I N E =======================================


Tails_JumpHeight:
		tst.b	$40(a0)
		beq.s	loc_15106
		move.w	#-$400,d1
		btst	#6,$2A(a0)
		beq.s	loc_150F0
		move.w	#-$200,d1

loc_150F0:
		cmp.w	$1A(a0),d1
		bgt.s	.nomoves
		lea	Shield_P2.w,a1
		move.b	(Ctrl_2_pressed_logical).w,d0
		jmp	Player_ShieldMoves+8(pc)	; NAT: Handle double jump moves

.nomoves	move.b	(Ctrl_2_logical).w,d0
		andi.b	#$70,d0
		bne.s	locret_15104
		move.w	d1,$1A(a0)

locret_15104:
		rts
; ---------------------------------------------------------------------------

loc_15106:
		tst.b	$3D(a0)
		bne.s	locret_1511A
		cmpi.w	#-$FC0,$1A(a0)
		bge.s	locret_1511A
		move.w	#-$FC0,$1A(a0)

locret_1511A:
					; Tails_JumpHeight+38j
		rts
; ---------------------------------------------------------------------------

Tails_Test_For_Flight:
		tst.b	$2F(a0)
		bne.w	locret_151A2
		move.b	(Ctrl_2_pressed_logical).w,d0
		andi.b	#$70,d0
		beq.w	locret_151A2
		cmpi.w	#2,(Player_mode).w
		bne.s	loc_15156
		bra.s	loc_1515C
; ---------------------------------------------------------------------------

loc_15156:
		tst.w	(CPU_Control_Ctr).w
		beq.s	locret_151A2

loc_1515C:
		btst	#2,$2A(a0)
		beq.s	loc_1518C
		bclr	#2,$2A(a0)
		move.b	$1E(a0),d1
		move.b	$44(a0),$1E(a0)
		move.b	$45(a0),$1F(a0)
		sub.b	$44(a0),d1
		ext.w	d1
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_15188
		neg.w	d0

loc_15188:
		add.w	d1,$14(a0)

loc_1518C:
		bclr	#4,$2A(a0)
		move.b	#1,$2F(a0)
		move.b	#-$10,$25(a0)
		bsr.w	Tails_Set_Flying_Animation

locret_151A2:
					; Tails_JumpHeight+52j	...
		rts
; ---------------------------------------------------------------------------
; loc_151A4:
Tails_Transform:
		move.b	#1,(Super_Hyper_palette_status).w	; set Super/Hyper palette status to 'fading'
		move.b	#$F,(Palette_timer).w
		move.b	#1,(Super_Tails_flag).w			; set flag to Super Tails
		move.w	#60,(Super_Hyper_frame_count).w
		move.b	#$81,object_control(a0)
		move.b	#$29,anim(a0)				; enter 'transformation' animation
		move.l	#Obj_HyperTails_Birds,(Hyper_Sonic_stars).w	; load Super Flickies object
		move.w	#$800,Tails_top_speed-Tails_top_speed(a4)
		move.w	#$18,Tails_acceleration-Tails_top_speed(a4)
		move.w	#$C0,Tails_deceleration-Tails_top_speed(a4)
		move.b	#0,invincibility_timer(a0)
		bset	#Status_Invincible,status_secondary(a0)
		moveq	#$9F,d0		; play transformation sound
		jmp	Play_Sound_2.w
	;	moveq	#$2C,d0		; play invincibility theme
	;	jmp	Play_Sound.w

; =============== S U B R O U T I N E =======================================

; sub_153C2:
Tails_DoLevelCollision:
		move.l	(Primary_collision_addr).w,(Collision_addr).w
		cmpi.b	#$C,$46(a0)
		beq.s	loc_153D6
		move.l	(Secondary_collision_addr).w,(Collision_addr).w

loc_153D6:
		move.b	$47(a0),d5
		move.w	$18(a0),d1
		move.w	$1A(a0),d2
		jsr	GetArcTan.w
		subi.b	#$20,d0
		andi.b	#$C0,d0
		cmpi.b	#$40,d0
		beq.w	loc_154AC
		cmpi.b	#$80,d0
		beq.w	loc_15538
		cmpi.b	#$C0,d0
		beq.w	loc_1559C
		jsr	CheckLeftWallDist.w
		tst.w	d1
		bpl.s	loc_1541A
		sub.w	d1,$10(a0)
		clr.w	$18(a0)

loc_1541A:
		jsr	CheckRightWallDist.w
		tst.w	d1
		bpl.s	loc_1542C
		add.w	d1,$10(a0)
		clr.w	$18(a0)

loc_1542C:
		bsr.w	sub_11FD6
		tst.w	d1
		bpl.s	locret_154AA
		move.b	$1A(a0),d2
		addq.b	#8,d2
		neg.b	d2
		cmp.b	d2,d1
		bge.s	loc_15444
		cmp.b	d2,d0
		blt.s	locret_154AA

loc_15444:
		move.b	d3,$26(a0)
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_15450
		neg.w	d1

loc_15450:
		add.w	d1,$14(a0)
		move.b	d3,d0
		addi.b	#$20,d0
		andi.b	#$40,d0
		bne.s	loc_15484
		move.b	d3,d0
		addi.b	#$10,d0
		andi.b	#$20,d0
		beq.s	loc_15472
		asr	$1A(a0)
		bra.s	loc_15498
; ---------------------------------------------------------------------------

loc_15472:
		clr.w	$1A(a0)
		move.w	$18(a0),$1C(a0)
		bra.w	Tails_TouchFloor_Check_Spindash
; ---------------------------------------------------------------------------

loc_15484:
		clr.w	$18(a0)
		cmpi.w	#$FC0,$1A(a0)
		ble.s	loc_15498
		move.w	#$FC0,$1A(a0)

loc_15498:

		bsr.w	Tails_TouchFloor_Check_Spindash
		move.w	$1A(a0),$1C(a0)
		tst.b	d3
		bpl.s	locret_154AA
		neg.w	$1C(a0)

locret_154AA:

		rts
; ---------------------------------------------------------------------------

loc_154AC:
		jsr	CheckLeftWallDist.w
		tst.w	d1
		bpl.s	loc_154C4
		sub.w	d1,$10(a0)
		clr.w	$18(a0)
		move.w	$1A(a0),$1C(a0)

loc_154C4:
		bsr.w	sub_11FEE
		tst.w	d1
		bpl.s	loc_15502
		neg.w	d1
		cmpi.w	#$14,d1
		bhs.s	loc_154EE
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_154DC
		neg.w	d1

loc_154DC:
		add.w	d1,$14(a0)
		tst.w	$1A(a0)
		bpl.s	locret_154EC
		clr.w	$1A(a0)

locret_154EC:
		rts
; ---------------------------------------------------------------------------

loc_154EE:
		jsr	CheckRightWallDist.w
		tst.w	d1
		bpl.s	locret_15500
		add.w	d1,$10(a0)
		clr.w	$18(a0)

locret_15500:
locret_15536:
		rts
; ---------------------------------------------------------------------------

loc_15502:
		tst.b	(WindTunnel_flag_P2).w
		bne.s	loc_1550E
		tst.w	$1A(a0)
		bmi.s	locret_15536

loc_1550E:
		bsr.w	sub_11FD6
		tst.w	d1
		bpl.s	locret_15536
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_1551E
		neg.w	d1

loc_1551E:
		add.w	d1,$14(a0)
		move.b	d3,$26(a0)
		clr.w	$1A(a0)
		move.w	$18(a0),$1C(a0)
		bra.w	Tails_TouchFloor_Check_Spindash
; ---------------------------------------------------------------------------

loc_15538:
		jsr	CheckLeftWallDist.w
		tst.w	d1
		bpl.s	loc_1554A
		sub.w	d1,$10(a0)
		clr.w	$18(a0)

loc_1554A:
		jsr	CheckRightWallDist.w
		tst.w	d1
		bpl.s	loc_1555C
		add.w	d1,$10(a0)
		clr.w	$18(a0)

loc_1555C:
		bsr.w	sub_11FEE
		tst.w	d1
		bpl.s	locret_1559A
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_1556C
		neg.w	d1

loc_1556C:
		sub.w	d1,$14(a0)
		move.b	d3,d0
		addi.b	#$20,d0
		andi.b	#$40,d0
		bne.s	loc_15584
		clr.w	$1A(a0)
		rts
; ---------------------------------------------------------------------------

loc_15584:
		move.b	d3,$26(a0)
		bsr.w	Tails_TouchFloor_Check_Spindash
		move.w	$1A(a0),$1C(a0)
		tst.b	d3
		bpl.s	locret_1559A
		neg.w	$1C(a0)

locret_1559A:

		rts
; ---------------------------------------------------------------------------

loc_1559C:
		jsr	CheckRightWallDist.w
		tst.w	d1
		bpl.s	loc_155B4
		add.w	d1,$10(a0)
		clr.w	$18(a0)
		move.w	$1A(a0),$1C(a0)

loc_155B4:
		bsr.w	sub_11FEE
		tst.w	d1
		bpl.s	loc_155D6
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_155C4
		neg.w	d1

loc_155C4:
		sub.w	d1,$14(a0)
		tst.w	$1A(a0)
		bpl.s	locret_155D4
		clr.w	$1A(a0)

locret_155D4:
locret_1560A:
		rts
; ---------------------------------------------------------------------------

loc_155D6:
		tst.b	(WindTunnel_flag_P2).w
		bne.s	loc_155E2
		tst.w	$1A(a0)
		bmi.s	locret_1560A

loc_155E2:
		bsr.w	sub_11FD6
		tst.w	d1
		bpl.s	locret_1560A
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_155F2
		neg.w	d1

loc_155F2:
		add.w	d1,$14(a0)
		move.b	d3,$26(a0)
		clr.w	$1A(a0)
		move.w	$18(a0),$1C(a0)

; =============== S U B R O U T I N E =======================================


Tails_TouchFloor_Check_Spindash:
		tst.b	$3D(a0)
		bne.s	loc_1565E
		clr.b	$20(a0)

; =============== S U B R O U T I N E =======================================


Tails_TouchFloor:
		move.b	$1E(a0),d0
		move.b	$44(a0),$1E(a0)
		move.b	$45(a0),$1F(a0)
		btst	#2,$2A(a0)
		beq.s	loc_1565E
		bclr	#2,$2A(a0)
		clr.b	$20(a0)
		sub.b	$44(a0),d0
		ext.w	d0
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_1564A
		neg.w	d0

loc_1564A:
		move.w	d0,-(sp)
		move.b	$26(a0),d0
		addi.b	#$40,d0
		bpl.s	loc_15658
		neg.w	(sp)

loc_15658:
		move.w	(sp)+,d0
		add.w	d0,$14(a0)

loc_1565E:
					; Tails_TouchFloor+16j
		bclr	#1,$2A(a0)
		bclr	#5,$2A(a0)
		bclr	#4,$2A(a0)
		clr.b	$40(a0)
		clr.w	(Chain_bonus_counter).w
		clr.b	$27(a0)
		clr.b	$2D(a0)
		clr.b	$30(a0)
		clr.b	$39(a0)

		tst.b	$2F(a0)
		beq.s	.rts
		tst.b	(Super_Sonic_Knux_flag).w
		bne.s	.clr
		btst	#6,$2B(a0)
		beq.s	.clr
		jsr	BubbleShield_Bounce

.clr		clr.b	$2F(a0)
.rts		rts

; ---------------------------------------------------------------------------

loc_1569C:

		cmpi.w	#2,(Player_mode).w
		bne.s	loc_156BE
		tst.b	(Debug_mode_flag).w
		beq.s	loc_156BE
		btst	#4,(Ctrl_1_pressed).w
		beq.s	loc_156BE
		st	(Debug_On).w
		clr.b	(Ctrl_1_locked).w
		rts
; ---------------------------------------------------------------------------

loc_156BE:
		jsr	sub_14632(pc)
		tst.b	(Flying_carrying_Sonic_flag).w
		beq.s	loc_156D6
		lea	(Player_1).w,a1
		clr.b	$2E(a1)
		bset	#1,$2A(a1)
		clr.w	(Flying_carrying_Sonic_flag).w

loc_156D6:
		jsr	MoveSprite_TestGravity2.w
		addi.w	#$30,$1A(a0)
		btst	#6,$2A(a0)
		beq.s	loc_156F0
		subi.w	#$20,$1A(a0)

loc_156F0:
		cmpi.w	#-$100,(Camera_min_Y_pos).w
		bne.s	loc_15700
		move.w	(Screen_Y_wrap_value).w,d0
		and.w	d0,$14(a0)

loc_15700:
		bsr.w	sub_15716
		bsr.w	Player_LevelBound
		bsr.w	Tails_RecordPos
		bsr.w	sub_15842
		jmp	Draw_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_15716:
		tst.b	(Border_Bottom_Death).w
		bne.s	loc_15742
		tst.b	(Reverse_gravity_flag).w
		bne.s	loc_15734
		move.w	(Camera_max_Y_pos).w,d0
		addi.w	#$E0,d0
		cmp.w	$14(a0),d0
		blt.w	loc_15788
		bra.s	loc_15742
; ---------------------------------------------------------------------------

loc_15734:
		move.w	(Camera_min_Y_pos).w,d0
		cmp.w	$14(a0),d0
		blt.s	loc_15742
		bra.w	loc_15788
; ---------------------------------------------------------------------------

loc_15742:

		movem.l	a4-a6,-(sp)
		bsr.w	Tails_DoLevelCollision
		movem.l	(sp)+,a4-a6
		btst	#1,$2A(a0)
		bne.s	locret_15786
		moveq	#0,d0
		move.w	d0,$1A(a0)
		move.w	d0,$18(a0)
		move.w	d0,$1C(a0)
		move.b	d0,$2E(a0)
		move.b	#0,$20(a0)
		move.w	#prio(2),8(a0)
		move.b	#2,5(a0)
		move.b	#$78,$34(a0)
		move.b	#0,$3D(a0)
		rts
; ---------------------------------------------------------------------------

loc_15788:

		jmp	(Kill_Character).l
; End of function sub_15716

; ---------------------------------------------------------------------------

loc_1578E:
	PlatNoStand %10101111
		bsr.w	sub_123C2
		jsr	MoveSprite_TestGravity.w
		bsr.w	Tails_RecordPos
		bsr.w	sub_15842
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

TResetTimer:
		move.b	#$10,$3F(a0)

locret_15786:
		rts

loc_157E0:
		lea	Player_1.w,a1		; get player 1
		move.b	#$1E,$2C(a0)		; reset air
		btst	#6,OptionsBits.w	; check if options set
		beq.s	.normaltype		; if no, branch

		cmp.b	#6,5(a1)		; check if dead
		beq.s	locret_15786		; if is, branch
		bge.s	.resetp			; if waiting to respawn, do it

		move.b	Ctrl_2_pressed.w,d0	; get held buttons
		and.b	#$70,d0			; check if A/B/C is being held down
		bne.s	.spawn			; if so, spawn
		rts

.normaltype	subq.b	#1,$3E(a0)		; sub 1 from delay
		bpl.s	locret_15786		; if not end, branch

		cmp.b	#6,5(a1)		; check if dead
		beq.s	locret_15786		; if is, branch
		blt.s	.notdead		; branch if not dead
.resetp		jmp	ResetPlayerPoses	; else if waiting to respawn, do it

.notdead	clr.b	$3E(a0)			; clear delay (make sure it does not underflow to positive!!!)
		cmp.b	#4,5(a1)		; check if another player is hurt
		beq.s	TResetTimer		; if is, branch
		cmp.b	#7,anim(a1)		; check if another player is ducking
		beq.s	TResetTimer		; if so, brah
		tst.b	$2E(a1)			; check if another player is carried
		bne.s	TResetTimer		; if so, reset spawn delay
		tst.b	$3D(a1)			; check if another player is spindashing
		bne.s	TResetTimer		; if so, reset spawn delay
		tst.b	$2A(a1)			; check if no-spawn flag is set
		bmi.s	TResetTimer		; if so, reset spawn delay

		tst.b	$40(a1)			; check if another player is jumping
		beq.s	.nojmp			; if not, skip
		move.b	Ctrl_1_held_logical.w,d0; get held buttons
		and.b	#$70,d0			; check if A/B/C is being held down
		bne.s	TResetTimer		; if so, reset timer

.nojmp		subq.b	#1,$3F(a0)		; sub 1 from spawn delay
		bne.s	locret_15786		; if not over, branch
.spawn	CheckPlatStuff %10101111, %00101000

		move.b	4(a1),4(a0)
		move.b	#2,5(a0)
		movem.l	$10(a1),d0-d3
		movem.l	d0-d3,$10(a0)

		move.w	6(a1),6(a0)
		move.b	$20(a1),$20(a0)
		st	$21(a0)
		move.w	$26(a1),$26(a0)
		move.l	$2C(a1),$2C(a0)
		move.l	$30(a1),$30(a0)
		move.b	$34(a1),$34(a0)
		move.b	$37(a1),$37(a0)
		move.b	$39(a1),$39(a0)
		move.l	$3A(a1),$3A(a0)
		move.w	$40(a1),$40(a0)
		move.l	$44(a1),$44(a0)

		move.l	#Obj_Tails_FixPlat,(a0)		; fix next frame
		move.b	Ring_count.w,Ring_count+1.w	; copy rings count
		clr.b	Ctrl_2_locked.w			; clear locked ctrl
		ori.b	#1,Update_HUD_ring_count.w	; update ring count
		st	(Tails_Mapnum).w		; clear frame
		move.w	Pos_table_index.w,Pos_table_index_P2.w; copy pos table index

		lea	Pos_table.w,a2			; load source pos table to a2
		lea	Pos_table_P2.w,a3		; load destination pos table to a3
		moveq	#$100/4-1,d0			; load copy count

.copytbl	move.l	(a2)+,(a3)+			; copy entire pos table over
		dbf	d0, .copytbl

;		cmp.b	#4,PlayMode.w			; check if tag mode
;		bne.s	.notag				; if no, branch
;		move.b	#Tag_Cool,TagCool.w		; NAT: set tag cooldown
;		cmp.b	#1,TagWinner.w			; NAT: check if Sonic is winrar
;		beq.s	.notag				; NAT: If is, branch
;		move.b	#1,TagWinner.w			; NAT: Set sonic as winrar
;		moveq	#Tag_ChgSFX,d0			; NAT: Get Blue Sphere sfx
;		jsr	Play_Sound.w			; NAT: Play sound

.notag		and.w	#$7FFF,$A(a0)			; clear high plane
		tst.w	$A(a1)				; check if other player is high
		bpl.s	.reset				; if not, skip
		or.w	#$8000,$A(a0)			; get high

.reset		move.w	$A(a0),SavedTileP2.w		; save tile address
		jmp	ResetPlayerStatus
; ---------------------------------------------------------------------------

loc_157F4:

		tst.w	(H_scroll_amount).w
		bne.s	loc_15806
		tst.w	(V_scroll_amount).w
		bne.s	loc_15806
		move.b	#2,5(a0)

loc_15806:

		bsr.w	sub_15842
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_15810:
		jsr	MoveSprite_TestGravity2.w
		addi.w	#$10,$1A(a0)
		bsr.w	Tails_RecordPos
		bsr.w	sub_15842
		jmp	Draw_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_15842:

		tst.w	(Competition_mode).w
		bne.s	loc_1585A
		bsr.s	Animate_Tails
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_15856
		eori.b	#2,4(a0)

loc_15856:
		bra.w	Tails_Load_PLC
; ---------------------------------------------------------------------------

loc_1585A:
		bsr.w	Animate_Tails2P
		bra.w	Tails2P_Load_PLC
; End of function sub_15842


; =============== S U B R O U T I N E =======================================


Animate_Tails:

		lea	(AniTails).l,a1

Animate_Tails_Part2:
		moveq	#0,d0
		move.b	$20(a0),d0
		cmp.b	$21(a0),d0
		beq.s	loc_1588A
		move.b	d0,$21(a0)
		move.b	#0,$23(a0)
		move.b	#0,$24(a0)
		bclr	#5,$2A(a0)

loc_1588A:
		add.w	d0,d0
		adda.w	(a1,d0.w),a1
		move.b	(a1),d0
		bmi.s	loc_158FA
		move.b	$2A(a0),d1
		andi.b	#1,d1
		andi.b	#-4,4(a0)
		or.b	d1,4(a0)
		subq.b	#1,$24(a0)
		bpl.s	locret_158C8
		move.b	d0,$24(a0)
; End of function Animate_Tails


; =============== S U B R O U T I N E =======================================


sub_158B0:

		moveq	#0,d1
		move.b	$23(a0),d1
		move.b	1(a1,d1.w),d0
		cmpi.b	#-4,d0
		bhs.s	loc_158CA

loc_158C0:

		move.b	d0,$22(a0)
		addq.b	#1,$23(a0)

locret_158C8:

		rts
; ---------------------------------------------------------------------------

loc_158CA:
		addq.b	#1,d0
		bne.s	loc_158DA
		move.b	#0,$23(a0)
		move.b	1(a1),d0
		bra.s	loc_158C0
; ---------------------------------------------------------------------------

loc_158DA:
		addq.b	#1,d0
		bne.s	loc_158EE
		move.b	2(a1,d1.w),d0
		sub.b	d0,$23(a0)
		sub.b	d0,d1
		move.b	1(a1,d1.w),d0
		bra.s	loc_158C0
; ---------------------------------------------------------------------------

loc_158EE:
		addq.b	#1,d0
		bne.s	locret_158F8
		move.b	2(a1,d1.w),$20(a0)

locret_158F8:
		rts
; End of function sub_158B0

; ---------------------------------------------------------------------------

loc_158FA:
		addq.b	#1,d0
		bne.w	loc_159C8
		moveq	#0,d0
		tst.b	$2D(a0)
		bmi.w	loc_127C0
		move.b	$27(a0),d0
		bne.w	loc_127C0
		moveq	#0,d1
		move.b	$26(a0),d0
		bmi.s	loc_1591E
		beq.s	loc_1591E
		subq.b	#1,d0

loc_1591E:

		move.b	$2A(a0),d2
		andi.b	#1,d2
		bne.s	loc_1592A
		not.b	d0

loc_1592A:
		addi.b	#$10,d0
		bpl.s	loc_15932
		moveq	#3,d1

loc_15932:
		andi.b	#-4,4(a0)
		eor.b	d1,d2
		or.b	d2,4(a0)
		btst	#5,$2A(a0)
		bne.w	loc_15A14
		lsr.b	#4,d0
		andi.b	#6,d0
		move.w	$1C(a0),d2
		bpl.s	loc_15956
		neg.w	d2

loc_15956:
		tst.b	$2B(a0)
		bpl.w	loc_15960
		add.w	d2,d2

loc_15960:
		move.b	d0,d3
		add.b	d3,d3
		add.b	d3,d3
		lea	(AniTails00).l,a1
		cmpi.w	#$600,d2
		blo.s	loc_1598A
		lea	(AniTails01).l,a1
		move.b	d0,d3
		add.b	d3,d3
		cmpi.w	#$700,d2
		blo.s	loc_1598A
		lea	(AniTails1F).l,a1
		move.b	d0,d3

loc_1598A:

		moveq	#0,d1
		move.b	$23(a0),d1
		move.b	1(a1,d1.w),d0
		cmpi.b	#-1,d0
		bne.s	loc_159A4
		move.b	#0,$23(a0)
		move.b	1(a1),d0

loc_159A4:
		move.b	d0,$22(a0)
		add.b	d3,$22(a0)
		subq.b	#1,$24(a0)
		bpl.s	locret_159C6
		neg.w	d2
		addi.w	#$800,d2
		bpl.s	loc_159BC
		moveq	#0,d2

loc_159BC:
		lsr.w	#8,d2
		move.b	d2,$24(a0)
		addq.b	#1,$23(a0)

locret_159C6:
		rts
; ---------------------------------------------------------------------------

loc_159C8:
		addq.b	#1,d0
		bne.s	loc_15A3C
		move.b	$2A(a0),d1
		andi.b	#1,d1
		andi.b	#-4,4(a0)
		or.b	d1,4(a0)
		subq.b	#1,$24(a0)
		bpl.w	locret_158C8
		move.w	$1C(a0),d2
		bpl.s	loc_159EE
		neg.w	d2

loc_159EE:
		lea	(AniTails03).l,a1
		cmpi.w	#$600,d2
		bhs.s	loc_15A00
		lea	(AniTails02).l,a1

loc_15A00:
		neg.w	d2
		addi.w	#$400,d2
		bpl.s	loc_15A0A
		moveq	#0,d2

loc_15A0A:
		lsr.w	#8,d2
		move.b	d2,$24(a0)
		bra.w	sub_158B0
; ---------------------------------------------------------------------------

loc_15A14:
		subq.b	#1,$24(a0)
		bpl.w	locret_158C8
		move.w	$1C(a0),d2
		bmi.s	loc_15A24
		neg.w	d2

loc_15A24:
		addi.w	#$800,d2
		bpl.s	loc_15A2C
		moveq	#0,d2

loc_15A2C:
		lsr.w	#6,d2
		move.b	d2,$24(a0)
		lea	(AniTails04).l,a1
		bra.w	sub_158B0
; ---------------------------------------------------------------------------

loc_15A3C:
		subq.b	#1,$24(a0)
		bpl.w	locret_158C8
		move.w	$18(a2),d1
		move.w	$1A(a2),d2
		jsr	GetArcTan.w
		cmpi.b	#$15,(Current_zone).w
		bne.s	loc_15A5E
		add.b	(Stat_table).w,d0

loc_15A5E:
		moveq	#0,d1
		move.b	$2A(a0),d2
		andi.b	#1,d2
		bne.s	loc_15A6E
		not.b	d0
		bra.s	loc_15A72
; ---------------------------------------------------------------------------

loc_15A6E:
		addi.b	#$80,d0

loc_15A72:
		addi.b	#$10,d0
		bpl.s	loc_15A7A
		moveq	#3,d1

loc_15A7A:
		andi.b	#-4,4(a0)
		eor.b	d1,d2
		or.b	d2,4(a0)
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_15A92
		eori.b	#2,4(a0)

loc_15A92:
		lsr.b	#3,d0
		andi.b	#$C,d0
		move.b	d0,d3
		lea	(AniTails_Tail03).l,a1
		move.b	#3,$24(a0)
		bsr.w	sub_158B0
		add.b	d3,$22(a0)
		rts
; ---------------------------------------------------------------------------
AniTails:	include "General/Sprites/Tails/Anim - Tails.asm"

; ---------------------------------------------------------------------------

Tails_Tail_Load_PLC:
		moveq	#0,d0
		move.b	$22(a0),d0
		cmp.b	(Tails_Tail_Mapnum).w,d0
		beq.w	locret_15CCE
		move.b	d0,(Tails_Tail_Mapnum).w
		lea	(PLC_Tails_Tail).l,a2
		add.w	d0,d0
		adda.w	(a2,d0.w),a2
		move.w	(a2)+,d5
		subq.w	#1,d5
		bmi.s	locret_15CCE
		move.w	#ArtTile_ArtUnc_Tails_Tails*$20,d4
		move.l	#ArtUnc_Tails_Tail,d6
		bra.s	loc_15CA6

; =============== S U B R O U T I N E =======================================


Tails_Load_PLC:

		moveq	#0,d0
		move.b	$22(a0),d0

Tails_Load_PLC2:
		cmp.b	(Tails_Mapnum).w,d0
		beq.s	locret_15CCE
		move.b	d0,(Tails_Mapnum).w
		lea	(PLC_Tails).l,a2
		add.w	d0,d0
		adda.w	(a2,d0.w),a2
		move.w	(a2)+,d5
		subq.w	#1,d5
		bmi.s	locret_15CCE
		move.w	#ArtTile_ArtUnc_Tails*$20,d4
		move.l	#ArtUnc_Tails,d6
		cmpi.w	#$1A2,d0
		blo.s	loc_15CA6
		move.l	#ArtUnc_Tails_Extra,d6

loc_15CA6:
					; Tails_Load_PLC+30j ...
		moveq	#0,d1
		move.w	(a2)+,d1
		move.w	d1,d3
		lsr.w	#8,d3
		andi.w	#$F0,d3

		addi.w	#$10,d3
		andi.w	#$FFF,d1
		lsl.l	#5,d1
		add.l	d6,d1
		move.w	d4,d2
		add.w	d3,d4
		add.w	d3,d4
		jsr	Add_To_DMA_Queue.w
		dbf	d5,loc_15CA6

locret_15CCE:

		rts
; End of function Tails_Load_PLC


; =============== S U B R O U T I N E =======================================


Animate_Tails2P:

		lea	(Ani_Tails2P).l,a1

Animate_Tails_Tail2P:
		moveq	#0,d0
		move.b	$20(a0),d0
		cmp.b	$21(a0),d0
		beq.s	loc_15CF8
		move.b	d0,$21(a0)
		move.b	#0,$23(a0)
		move.b	#0,$24(a0)
		bclr	#5,$2A(a0)

loc_15CF8:
		add.w	d0,d0
		adda.w	(a1,d0.w),a1
		move.b	(a1),d0
		bmi.s	loc_15D68
		move.b	$2A(a0),d1
		andi.b	#1,d1
		andi.b	#-4,4(a0)
		or.b	d1,4(a0)
		subq.b	#1,$24(a0)
		bpl.s	locret_15D36
		move.b	d0,$24(a0)
; End of function Animate_Tails2P


; =============== S U B R O U T I N E =======================================


sub_15D1E:

		moveq	#0,d1
		move.b	$23(a0),d1
		move.b	1(a1,d1.w),d0
		cmpi.b	#-$10,d0
		bhs.s	loc_15D38

loc_15D2E:

		move.b	d0,$22(a0)
		addq.b	#1,$23(a0)

locret_15D36:

		rts
; ---------------------------------------------------------------------------

loc_15D38:
		addq.b	#1,d0
		bne.s	loc_15D48
		move.b	#0,$23(a0)
		move.b	1(a1),d0
		bra.s	loc_15D2E
; ---------------------------------------------------------------------------

loc_15D48:
		addq.b	#1,d0
		bne.s	loc_15D5C
		move.b	2(a1,d1.w),d0
		sub.b	d0,$23(a0)
		sub.b	d0,d1
		move.b	1(a1,d1.w),d0
		bra.s	loc_15D2E
; ---------------------------------------------------------------------------

loc_15D5C:
		addq.b	#1,d0
		bne.s	locret_15D66
		move.b	2(a1,d1.w),$20(a0)

locret_15D66:
		rts
; End of function sub_15D1E

; ---------------------------------------------------------------------------

loc_15D68:
		addq.b	#1,d0
		bne.w	loc_15E82
		moveq	#0,d0
		move.b	$27(a0),d0
		bne.w	loc_15E1C
		moveq	#0,d1
		move.b	$26(a0),d0
		bmi.s	loc_15D84
		beq.s	loc_15D84
		subq.b	#1,d0

loc_15D84:

		move.b	$2A(a0),d2
		andi.b	#1,d2
		bne.s	loc_15D90
		not.b	d0

loc_15D90:
		addi.b	#$10,d0
		bpl.s	loc_15D98
		moveq	#3,d1

loc_15D98:
		andi.b	#-4,4(a0)
		eor.b	d1,d2
		or.b	d2,4(a0)
		btst	#5,$2A(a0)
		bne.w	loc_15ECE
		lsr.b	#5,d0
		andi.b	#3,d0
		move.w	$1C(a0),d2
		bpl.s	loc_15DBC
		neg.w	d2

loc_15DBC:
		tst.b	$2B(a0)
		bpl.w	loc_15DC6
		add.w	d2,d2

loc_15DC6:
		move.b	d0,d3
		lea	(byte_15FA8).l,a1
		cmpi.w	#$600,d2
		bhs.s	loc_15DDC
		lea	(byte_15FA2).l,a1
		add.b	d0,d0

loc_15DDC:
		add.b	d0,d3
		moveq	#0,d1
		move.b	$23(a0),d1
		move.b	1(a1,d1.w),d0
		cmpi.b	#-1,d0
		bne.s	loc_15DF8
		move.b	#0,$23(a0)
		move.b	1(a1),d0

loc_15DF8:
		move.b	d0,$22(a0)
		add.b	d3,$22(a0)
		subq.b	#1,$24(a0)
		bpl.s	locret_15E1A
		neg.w	d2
		addi.w	#$800,d2
		bpl.s	loc_15E10
		moveq	#0,d2

loc_15E10:
		lsr.w	#8,d2
		move.b	d2,$24(a0)
		addq.b	#1,$23(a0)

locret_15E1A:
		rts
; ---------------------------------------------------------------------------

loc_15E1C:
		move.b	$27(a0),d0
		moveq	#0,d1
		move.b	$2A(a0),d2
		andi.b	#1,d2
		bne.s	loc_15E4A
		andi.b	#-4,4(a0)
		addi.b	#$16,d0
		divu.w	#$2C,d0
		addi.b	#$15,d0
		move.b	d0,$22(a0)
		move.b	#0,$24(a0)
		rts
; ---------------------------------------------------------------------------

loc_15E4A:
		andi.b	#-4,4(a0)
		tst.b	$2D(a0)
		bpl.s	loc_15E62
		ori.b	#1,4(a0)
		addi.b	#$16,d0
		bra.s	loc_15E6E
; ---------------------------------------------------------------------------

loc_15E62:
		ori.b	#3,4(a0)
		neg.b	d0
		addi.b	#$9A,d0

loc_15E6E:
		divu.w	#$2C,d0
		addi.b	#$15,d0
		move.b	d0,$22(a0)
		move.b	#0,$24(a0)
		rts
; ---------------------------------------------------------------------------

loc_15E82:
		subq.b	#1,$24(a0)
		bpl.w	locret_15D36
		addq.b	#1,d0
		bne.s	loc_15F08
		move.w	$1C(a0),d2
		bpl.s	loc_15E96
		neg.w	d2

loc_15E96:
		lea	(byte_15FB3).l,a1
		cmpi.w	#$600,d2
		bhs.s	loc_15EA8
		lea	(byte_15FAE).l,a1

loc_15EA8:
		neg.w	d2
		addi.w	#$400,d2
		bpl.s	loc_15EB2
		moveq	#0,d2

loc_15EB2:
		lsr.w	#8,d2
		move.b	d2,$24(a0)
		move.b	$2A(a0),d1
		andi.b	#1,d1
		andi.b	#-4,4(a0)
		or.b	d1,4(a0)
		bra.w	sub_15D1E
; ---------------------------------------------------------------------------

loc_15ECE:
		subq.b	#1,$24(a0)
		bpl.w	locret_15D36
		move.w	$1C(a0),d2
		bmi.s	loc_15EDE
		neg.w	d2

loc_15EDE:
		addi.w	#$800,d2
		bpl.s	loc_15EE6
		moveq	#0,d2

loc_15EE6:
		lsr.w	#6,d2
		move.b	d2,$24(a0)
		lea	(byte_15FB8).l,a1
		move.b	$2A(a0),d1
		andi.b	#1,d1
		andi.b	#-4,4(a0)
		or.b	d1,4(a0)
		bra.w	sub_15D1E
; ---------------------------------------------------------------------------

loc_15F08:
		move.w	$18(a2),d1
		move.w	$1A(a2),d2
		jsr	GetArcTan.w
		moveq	#0,d1
		move.b	$2A(a0),d2
		andi.b	#1,d2
		bne.s	loc_15F26
		not.b	d0
		bra.s	loc_15F2A
; ---------------------------------------------------------------------------

loc_15F26:
		addi.b	#$80,d0

loc_15F2A:
		addi.b	#$10,d0
		bpl.s	loc_15F32
		moveq	#3,d1

loc_15F32:
		andi.b	#-4,4(a0)
		eor.b	d1,d2
		or.b	d2,4(a0)
		lsr.b	#5,d0
		andi.b	#3,d0
		move.b	d0,d3
		add.b	d0,d0
		add.b	d0,d3
		lea	(byte_162D2).l,a1
		move.b	#3,$24(a0)
		bsr.w	sub_15D1E
		add.b	d3,$22(a0)
		rts
; ---------------------------------------------------------------------------
Ani_Tails2P:	include "General/Sprites/Tails/Anim - Tails 2P.asm"


; =============== S U B R O U T I N E =======================================


Tails2P_Tail_Load_PLC:
		moveq	#0,d0
		move.b	$22(a0),d0
		lea	(DPLC_Tails2P_Tail).l,a2
		add.w	d0,d0
		adda.w	(a2,d0.w),a2
		move.w	(a2)+,d5
		subq.w	#1,d5
		bmi.s	locret_160A4
		move.l	#ArtUnc_Tails2P_Tail,d6
		move.w	#$D600,d4
		cmpa.w	#$CC0A,a0
		beq.s	loc_1607C
		move.w	#$D200,d4
		bra.s	loc_1607C
; End of function Tails2P_Tail_Load_PLC


; =============== S U B R O U T I N E =======================================


Tails2P_Load_PLC:

		moveq	#0,d0
		move.b	$22(a0),d0
		lea	(PLC_Tails2P).l,a2
		add.w	d0,d0
		adda.w	(a2,d0.w),a2
		move.w	(a2)+,d5
		subq.w	#1,d5
		bmi.s	locret_160A4
		move.l	#ArtUnc_Tails2P,d6
		move.w	#$D000,d4
		cmpa.w	#Player_1,a0
		beq.s	loc_1607C
		move.w	#$D400,d4

loc_1607C:
					; Tails2P_Tail_Load_PLC+2Cj ...
		moveq	#0,d1
		move.w	(a2)+,d1
		move.w	d1,d3
		lsr.w	#8,d3
		andi.w	#$F0,d3
		addi.w	#$10,d3
		andi.w	#$FFF,d1
		lsl.l	#5,d1
		add.l	d6,d1
		move.w	d4,d2
		add.w	d3,d4
		add.w	d3,d4
		jsr	Add_To_DMA_Queue.w
		dbf	d5,loc_1607C

locret_160A4:
					; Tails2P_Load_PLC+16j
		rts
; End of function Tails2P_Load_PLC

; ---------------------------------------------------------------------------

Obj_Tails_Tail:
		; Init
		move.l	#Map_Tails_Tail,mappings(a0)
		move.w	#make_art_tile(ArtTile_ArtUnc_Tails_Tails,0,0),art_tile(a0)
		move.w	#prio(2),priority(a0)
		move.b	#$18,width_pixels(a0)
		move.b	#$18,height_pixels(a0)
		move.b	#$84,render_flags(a0)
		move.l	#Obj_Tails_Tail_Main,(a0)
; loc_160D2:
Obj_Tails_Tail_Main:
		; Here, several SSTs are inheritied from the parent, normally Tails
		movea.w	parent(a0),a2			; NAT: Use different parent
		move.b	angle(a2),angle(a0)
		move.b	status(a2),status(a0)
		move.w	x_pos(a2),x_pos(a0)
		move.w	y_pos(a2),y_pos(a0)
		move.w	priority(a2),priority(a0)
		andi.w	#drawing_mask,art_tile(a0)
		tst.w	art_tile(a2)
		bpl.s	loc_16106
		ori.w	#high_priority,art_tile(a0)
loc_16106:
		moveq	#0,d0
		move.b	anim(a2),d0
		btst	#5,status(a2)
		beq.s	loc_1612C
		tst.b	(WindTunnel_flag_P2).w
		bne.s	loc_1612C

		; This is checking if parent (Tails) is in its pushing animation
		cmpi.b	#$A9,mapping_frame(a2)
		blo.s	loc_1612C
		cmpi.b	#$AC,mapping_frame(a2)
		bhi.s	loc_1612C
		moveq	#4,d0
loc_1612C:
		cmp.b	objoff_34(a0),d0	; Has the input parent anim changed since last check?
		beq.s	loc_1613C		; If not, branch and skip setting a matching Tails' Tails anim
		move.b	d0,objoff_34(a0)	; Store d0 for the above comparision
		move.b	Obj_Tails_Tail_AniSelection(pc,d0.w),anim(a0)	; Load anim relative to parent's
loc_1613C:
		lea	(AniTails_Tail).l,a1
		bsr.w	Animate_Tails_Part2
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_1615A
		cmpi.b	#3,anim(a0)		; Is this the Directional animation?
		beq.s	loc_1615A		; If so, skip the mirroring
		eori.b	#2,render_flags(a0)	; Reverse the vertical mirror render_flag bit (On if Off beforehand and vice versa)
loc_1615A:
		bsr.w	Tails_Tail_Load_PLC
		jmp	Obj_Shield_Display(pc)
; ===========================================================================
; animation master script table for the tails
; chooses which animation script to run depending on what Tails is doing
; byte_16164:
Obj_Tails_Tail_AniSelection:
		dc.b    0,0	; TailsAni_Walk,Run	->
		dc.b	3	; TailsAni_Roll		-> Directional
		dc.b	3	; TailsAni_Roll2	-> Directional
		dc.b	9	; TailsAni_Push		-> Pushing
		dc.b	1	; TailsAni_Wait		-> Swish
		dc.b	0	; TailsAni_Balance	-> Blank
		dc.b	1	; TailsAni_LookUp	-> Flick	; NAT: fucking
		dc.b	1	; TailsAni_Duck		-> Swish
		dc.b	7	; TailsAni_Spindash	-> Spindash
		dc.b	0,0,0	; TailsAni_Dummy1,2,3	->
		dc.b	8	; TailsAni_Stop		-> Skidding
		dc.b	0,0	; TailsAni_Float,2	->
		dc.b	0	; TailsAni_Spring	->
		dc.b	0	; TailsAni_Hang		->
		dc.b	0	;
		dc.b	0	; TailsAni_Victory	->
		dc.b	$A	; TailsAni_Hang2	-> Hanging
		dc.b	0	; TailsAni_Bubble	->
		dc.b	0,0,0	; TailsAni_Death,2,3	->
		dc.b	0	; TailsAni_Slide2?	->
		dc.b	0,0	; TailsAni_Hurt,Slide	->
		dc.b	0	; TailsAni_Blank	->
		dc.b	0,0	; TailsAni_Dummy4,5	->
		dc.b	0	; TailsAni_HaulAss	->
		dc.b	$B,$C	; TailsAni_Fly,2	-> Fly1,2
		dc.b	$B	; TailsAni_Carry	-> Fly1
		dc.b	$C	; TailsAni_Ascend	-> Fly2
		dc.b	$B	; TailsAni_Tired	-> Fly1
		dc.b	0,0	; TailsAni_Swim,2	->
		dc.b	0	; TailsAni_Tired2	->
		dc.b	0	; TailsAni_Tired3	->
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0

AniTails_Tail:	include "General/Sprites/Tails/Anim - Tails Tail.asm"

; ---------------------------------------------------------------------------

Obj_Tails2P_Tail:

		move.l	#Map_Tails2P_Tail,$C(a0)
		move.w	#$6B0,$A(a0)
		cmpa.w	#$CC0A,a0
		beq.s	loc_16214
		move.w	#$690,$A(a0)

loc_16214:
		move.w	#prio(2),8(a0)
		move.b	#$18,7(a0)
		move.b	#$18,6(a0)
		move.b	#4,4(a0)
		move.l	#loc_16232,(a0)

loc_16232:
		movea.w	$30(a0),a2
		move.b	$26(a2),$26(a0)
		move.b	$2A(a2),$2A(a0)
		move.w	$10(a2),$10(a0)
		move.w	$14(a2),$14(a0)
		move.w	8(a2),8(a0)
		andi.w	#$7FFF,$A(a0)
		tst.w	$A(a2)
		bpl.s	loc_16266
		ori.w	#$8000,$A(a0)

loc_16266:
		moveq	#0,d0
		move.b	$20(a2),d0
		btst	#5,$2A(a2)
		beq.s	loc_1627C
		cmpi.b	#5,d0
		beq.s	loc_1627C
		moveq	#4,d0

loc_1627C:

		cmp.b	$34(a0),d0
		beq.s	loc_1628C
		move.b	d0,$34(a0)
		move.b	byte_162A0(pc,d0.w),$20(a0)

loc_1628C:
		lea	(Ani_Tails2P_Tail).l,a1
		bsr.w	Animate_Tails_Tail2P
		bsr.w	Tails2P_Tail_Load_PLC
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
byte_162A0:	dc.b    0,   0,   3,   3,   0,   1,   1,   1,   1,   0,   1,   1,   1,   0,   0,   0,   0,   0,   0,   0
		dc.b    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0
Ani_Tails2P_Tail:include "General/Sprites/Tails/Anim - Tails 2P Tail.asm"

; ---------------------------------------------------------------------------

Obj_Knuckles:
		lea	(Sonic_Knux_top_speed).w,a4
		lea	(Distance_from_screen_top).w,a5
		lea	(Dust).w,a6

		tst.b	(Debug_mode_flag).w		; is debug cheat enabled?
		beq.s	loc_1648E			; if not, branch

		cmpa.w	#Player_1,a0
		bne.s	Knux_NoDebug
		btst	#button_B,(Ctrl_1_pressed).w	; is button B pressed?
		bne.w	Knux_SetDebug			; if so, branch

Knux_NoDebug:
		tst.b	(Debug_On).w
		beq.s	loc_1648E
		jmp	Debug_Control

	;	cmpi.b	#1,(Debug_placement_type).w
	;	beq.s	loc_16488
	;	btst	#4,(Ctrl_1_pressed).w
	;	beq.s	loc_1646C
	;	clr.b	(Debug_On).w

loc_1646C:
	;	addq.b	#1,$22(a0)
	;	cmpi.b	#-5,$22(a0)
	;	blo.s	loc_1647E
	;	move.b	#0,$22(a0)

loc_1647E:
	;	bsr.w	Knuckles_Load_PLC
	;	jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_16488:
	;	jmp	(DebugMode).l
; ---------------------------------------------------------------------------

loc_1648E:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_1649C(pc,d0.w),d1
		jmp	off_1649C(pc,d1.w)
; ---------------------------------------------------------------------------
off_1649C:	dc.w loc_164AA-off_1649C

		dc.w loc_1656C-off_1649C; 1
		dc.w loc_17BB6-off_1649C; 2
		dc.w loc_17C88-off_1649C; 3
		dc.w loc_17CBA-off_1649C; 4
		dc.w loc_17CCE-off_1649C; 5
		dc.w loc_17CEA-off_1649C; 6
; ---------------------------------------------------------------------------

loc_164AA:
		addq.b	#2,5(a0)
		move.b	#$13,$1E(a0)
		move.b	#9,$1F(a0)
		move.b	#$13,$44(a0)
		move.b	#9,$45(a0)
		move.l	#Map_Knuckles,$C(a0)
		move.w	#prio(2),8(a0)
		move.b	#$18,7(a0)
		move.b	#$18,6(a0)
		move.b	#4,4(a0)
		move.b	#2,$38(a0)
		move.w	#$600,(a4)
		move.w	#$C,2(a4)
		move.w	#$80,4(a4)
		tst.b	(Last_star_post_hit).w
		bne.s	loc_16534
		move.w	#$680,$A(a0)
		move.b	#$C,$46(a0)
		move.b	#$D,$47(a0)

loc_16534:

		move.b	#0,$30(a0)
		move.b	#4,$31(a0)
		move.b	#0,(Super_Sonic_Knux_flag).w
		move.b	#$1E,$2C(a0)
		subi.w	#$20,$10(a0)
		addi.w	#4,$14(a0)
		addi.w	#$20,$10(a0)
		subi.w	#4,$14(a0)
		jmp	(Reset_Player_Position_Array).l
; ---------------------------------------------------------------------------

loc_1656C:
		tst.b	(Debug_mode_flag).w
		beq.s	loc_165A2
		bclr	#6,(Ctrl_1_pressed).w
		beq.s	loc_16580
		eori.b	#1,(Reverse_gravity_flag).w

loc_16580:
	bra.s	loc_165A2
	;	btst	#4,(Ctrl_1_pressed).w
	;	beq.s	loc_165A2

Knux_SetDebug:
		st	(Debug_On).w
		clr.b	(Ctrl_1_locked).w
	;	btst	#5,(Ctrl_1).w
	;	beq.s	locret_165A0
	;	move.b	#2,(Debug_On).w

locret_165A0:
		rts
; ---------------------------------------------------------------------------

loc_165A2:

		tst.b	(Ctrl_1_locked).w
		bne.s	loc_165AE
		move.w	(Ctrl_1).w,(Ctrl_1_logical).w

loc_165AE:
		btst	#0,$2E(a0)
		beq.s	loc_165BE
		move.b	#0,$2F(a0)
		bra.s	loc_165D8
; ---------------------------------------------------------------------------

loc_165BE:
		movem.l	a4-a6,-(sp)
		moveq	#0,d0
		move.b	$2A(a0),d0
		andi.w	#6,d0
		move.w	off_16642(pc,d0.w),d1
		jsr	off_16642(pc,d1.w)
		movem.l	(sp)+,a4-a6

loc_165D8:
		cmpi.w	#$FF00,(Camera_min_Y_pos).w
		bne.s	loc_165E8
		move.w	(Screen_Y_wrap_value).w,d0
		and.w	d0,$14(a0)

loc_165E8:
		bsr.s	sub_1664A
		bsr.w	SonicKnux_SuperHyper
		bsr.w	Sonic_RecordPos
		bsr.w	sub_166EE
		move.b	(Primary_Angle).w,$3A(a0)
		move.b	(Secondary_Angle).w,$3B(a0)
		tst.b	(WindTunnel_flag).w
		beq.s	loc_16614
		tst.b	$20(a0)
		bne.s	loc_16614
		move.b	$21(a0),$20(a0)

loc_16614:

		btst	#1,$2E(a0)
		bne.s	loc_16630
		bsr.w	Animate_Knuckles
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_1662C
		eori.b	#2,4(a0)

loc_1662C:
		bsr.w	Knuckles_Load_PLC

loc_16630:
		move.b	$2E(a0),d0
		andi.b	#-$60,d0
		bne.s	locret_16640
		jsr	(TouchResponse).l

locret_16640:
		rts
; ---------------------------------------------------------------------------
off_16642:	dc.w Knux_Stand_Path-off_16642

		dc.w Knux_Stand_Freespace-off_16642
		dc.w Knux_Spin_Path-off_16642
		dc.w Knux_Spin_Freespace-off_16642

; =============== S U B R O U T I N E =======================================


sub_1664A:
		move.b	$34(a0),d0
		beq.s	loc_16658
		subq.b	#1,$34(a0)
		lsr.b	#3,d0
		bcc.s	loc_1665E

loc_16658:
		jsr	Draw_Sprite.w

loc_1665E:
		btst	#1,$2B(a0)
		beq.s	loc_1669A
		tst.b	$35(a0)
		beq.s	loc_1669A
		move.b	(Level_frame_counter+1).w,d0
		andi.b	#7,d0
		bne.s	loc_1669A
		subq.b	#1,$35(a0)
		bne.s	loc_1669A
		tst.b	(Boss_flag).w
		bne.s	loc_16694
		cmpi.b	#$C,$2C(a0)
		blo.s	loc_16694
		move.w	(Level_music).w,d0
		jsr	Play_Sound.w

loc_16694:

		bclr	#1,$2B(a0)

loc_1669A:

		btst	#2,$2B(a0)
		beq.s	locret_166EC
		tst.b	$36(a0)
		beq.s	locret_166EC
		move.b	(Level_frame_counter+1).w,d0
		andi.b	#7,d0
		bne.s	locret_166EC
		subq.b	#1,$36(a0)
		bne.s	locret_166EC
		move.w	#$600,(a4)
		move.w	#$C,2(a4)
		move.w	#$80,4(a4)
		tst.b	(Super_Sonic_Knux_flag).w
		beq.s	loc_166DE
		move.w	#$800,(a4)
		move.w	#$18,2(a4)
		move.w	#$C0,4(a4)

loc_166DE:
		bclr	#2,$2B(a0)
		moveq	#0,d0
		jmp	Change_Music_Tempo.w
; ---------------------------------------------------------------------------

locret_166EC:

		rts
; End of function sub_1664A


; =============== S U B R O U T I N E =======================================


sub_166EE:
		tst.b	(Water_flag).w
		bne.s	loc_166F6

locret_166F4:

		rts
; ---------------------------------------------------------------------------

loc_166F6:
		move.w	(Water_level).w,d0
		cmp.w	$14(a0),d0
		bge.s	loc_1676E
		bset	#6,$2A(a0)
		bne.s	locret_166F4
		addq.b	#1,(Water_entered_counter).w
		movea.l	a0,a1
		bsr.w	Player_ResetAirTimer
		move.l	#Obj_Air_CountDown,(Breathing_bubbles).w
		move.b	#-$7F,(Breathing_bubbles+$2C).w
		move.l	a0,(Breathing_bubbles+$40).w
		move.w	#$300,(a4)
		move.w	#6,2(a4)
		move.w	#$40,4(a4)
		tst.b	(Super_Sonic_Knux_flag).w
		beq.s	loc_1674A
		move.w	#$400,(a4)
		move.w	#$C,2(a4)
		move.w	#$60,4(a4)

loc_1674A:
		tst.b	$2E(a0)
		bne.s	locret_166F4
		asr	$18(a0)
		asr	$1A(a0)
		asr	$1A(a0)
		beq.s	locret_166F4
		move.w	#$100,$20(a6)
		move.w	#$39,d0
		jmp	Play_Sound_2.w
; ---------------------------------------------------------------------------

loc_1676E:
		bclr	#6,$2A(a0)
		beq.w	locret_166F4
		addq.b	#1,(Water_entered_counter).w
		movea.l	a0,a1
		bsr.w	Player_ResetAirTimer
		move.w	#$600,(a4)
		move.w	#$C,2(a4)
		move.w	#$80,4(a4)
		tst.b	(Super_Sonic_Knux_flag).w
		beq.s	loc_167A8
		move.w	#$800,(a4)
		move.w	#$18,2(a4)
		move.w	#$C0,4(a4)

loc_167A8:
		cmpi.b	#4,5(a0)
		beq.s	loc_167C4
		tst.b	$2E(a0)
		bne.s	loc_167C4
		move.w	$1A(a0),d0
		cmpi.w	#-$400,d0
		blt.s	loc_167C4
		asl	$1A(a0)

loc_167C4:

		cmpi.b	#$1C,$20(a0)
		beq.w	locret_166F4
		tst.w	$1A(a0)
		beq.w	locret_166F4
		move.w	#$100,$20(a6)
		cmpi.w	#-$1000,$1A(a0)
		bgt.s	loc_167EA
		move.w	#-$1000,$1A(a0)

loc_167EA:
		move.w	#$39,d0
		jmp	Play_Sound_2.w
; End of function sub_166EE

; ---------------------------------------------------------------------------

Knux_Stand_Path:
		bsr.w	SonicKnux_Spindash
		bsr.w	Knux_Jump
		bsr.w	Player_SlopeResist
		bsr.w	Knux_InputAcceleration_Path
		bsr.w	SonicKnux_Roll
		bsr.w	Player_LevelBound
		jsr	MoveSprite_TestGravity2.w
		bsr.w	Call_Player_AnglePos
		bsr.w	Player_SlopeRepel
		tst.b	(BG_Collision).w
		beq.s	locret_1684A
		jsr	sub_F846.w
		tst.w	d1
		bmi.w	Kill_Character
		movem.l	a4-a6,-(sp)
		jsr	CheckLeftWallDist.w
		tst.w	d1
		bpl.s	loc_1683A
		sub.w	d1,$10(a0)

loc_1683A:
		jsr	CheckRightWallDist.w
		tst.w	d1
		bpl.s	loc_16846
		add.w	d1,$10(a0)

loc_16846:
		movem.l	(sp)+,a4-a6

locret_1684A:
		rts
; ---------------------------------------------------------------------------

Knux_Stand_Freespace:
		tst.b	$2F(a0)
		bne.s	loc_1687C
		bsr.w	Knux_JumpHeight
		bsr.w	sub_17680
		bsr.w	Player_LevelBound
		jsr	MoveSprite_TestGravity.w
		btst	#6,$2A(a0)
		beq.s	loc_16872
		subi.w	#$28,$1A(a0)

loc_16872:
		bsr.w	Player_JumpAngle
		bsr.w	SonicKnux_DoLevelCollision
		rts
; ---------------------------------------------------------------------------

loc_1687C:
		bsr.w	sub_16FF6
		bsr.w	Player_LevelBound
		jsr	MoveSprite_TestGravity2.w
		bsr.w	sub_16890

locret_1688E:
		rts

; =============== S U B R O U T I N E =======================================


sub_16890:
		move.b	$2F(a0),d0
		beq.s	locret_1688E
		cmpi.b	#2,d0
		beq.w	loc_16A8E
		cmpi.b	#3,d0
		beq.w	loc_16B06
		cmpi.b	#4,d0
		beq.w	loc_16BB6
		cmpi.b	#5,d0
		beq.w	loc_16F6C
		bsr.w	sub_1793E
		btst	#1,(__u_F74E).w
		beq.s	loc_1690E
		btst	#5,(__u_F74E).w
		bne.w	loc_1696C
		move.b	(Ctrl_1_logical).w,d0
		andi.b	#$70,d0
		bne.s	loc_1690A
		move.b	#2,$2F(a0)
		move.b	#$21,$20(a0)
		bclr	#0,$2A(a0)
		tst.w	$18(a0)
		bpl.s	loc_168F4
		bset	#0,$2A(a0)

loc_168F4:
		asr	$18(a0)
		asr	$18(a0)
		move.b	$44(a0),$1E(a0)
		move.b	$45(a0),$1F(a0)
		rts
; ---------------------------------------------------------------------------

loc_1690A:
		bra.w	sub_16FA8
; ---------------------------------------------------------------------------

loc_1690E:
		bclr	#0,$2A(a0)
		tst.w	$18(a0)
		bpl.s	loc_16920
		bset	#0,$2A(a0)

loc_16920:
		move.b	$26(a0),d0
		addi.b	#$20,d0
		andi.b	#$C0,d0
		beq.s	loc_1693E
		move.w	$1C(a0),$18(a0)
		move.w	#0,$1A(a0)
		bra.w	Knux_TouchFloor
; ---------------------------------------------------------------------------

loc_1693E:
		move.b	#3,$2F(a0)
		move.b	#-$34,$22(a0)
		move.b	#$7F,$24(a0)
		move.b	#0,$23(a0)
		cmpi.b	#$C,$2C(a0)
		blo.s	locret_1696A
		move.b	#6,5(a6)
		move.b	#$15,$22(a6)

locret_1696A:
		rts
; ---------------------------------------------------------------------------

loc_1696C:
		tst.b	(Wallgrab_Disable).w
		bmi.w	loc_16A6E
		move.b	$47(a0),d5
		move.b	$25(a0),d0
		addi.b	#$40,d0
		bpl.s	loc_16996
		bset	#0,$2A(a0)
		bsr.w	CheckLeftCeilingDist
		or.w	d0,d1
		bne.s	loc_16A00
		addq.w	#1,$10(a0)
		bra.s	loc_169A6
; ---------------------------------------------------------------------------

loc_16996:
		bclr	#0,$2A(a0)
		bsr.w	CheckRightCeilingDist
		or.w	d0,d1
		bne.w	loc_16A58

loc_169A6:

		moveq	#$4A,d0
		tst.b	(Super_Sonic_Knux_flag).w
		bpl.s	loc_169C2
		cmpi.w	#$480,$1C(a0)
		blo.s	loc_169C2
		move.w	#$14,(ScrShake_Value_BG).w
		bsr.w	HyperAttackTouchResponse
		moveq	#$49,d0

loc_169C2:

		jsr	Play_Sound_2.w
		move.w	#0,$1C(a0)
		move.w	#0,$18(a0)
		move.w	#0,$1A(a0)
		move.b	#4,$2F(a0)
		move.b	#-$49,$22(a0)
		move.b	#$7F,$24(a0)
		move.b	#0,$23(a0)
		move.b	#3,$25(a0)
		move.w	$10(a0),$12(a0)
		rts
; ---------------------------------------------------------------------------

loc_16A00:
		move.w	$10(a0),d3
		move.b	$1E(a0),d0
		ext.w	d0
		sub.w	d0,d3
		subq.w	#1,d3
		tst.b	(Reverse_gravity_flag).w
		bne.s	loc_16A34

loc_16A14:
		move.w	$14(a0),d2
		subi.w	#$B,d2
		jsr	(ChkFloorEdge_Part3).l
		tst.w	d1
		bmi.s	loc_16A6E
		cmpi.w	#$C,d1
		bhs.s	loc_16A6E
		add.w	d1,$14(a0)
		bra.w	loc_169A6
; ---------------------------------------------------------------------------

loc_16A34:

		move.w	$14(a0),d2
		addi.w	#$B,d2
		eori.w	#$F,d2
		jsr	(ChkFloorEdge_ReverseGravity_Part2).l
		tst.w	d1
		bmi.s	loc_16A6E
		cmpi.w	#$C,d1
		bhs.s	loc_16A6E
		sub.w	d1,$14(a0)
		bra.w	loc_169A6
; ---------------------------------------------------------------------------

loc_16A58:
		move.w	$10(a0),d3
		move.b	$1E(a0),d0
		ext.w	d0
		add.w	d0,d3
		addq.w	#1,d3
		tst.b	(Reverse_gravity_flag).w
		bne.s	loc_16A34
		bra.s	loc_16A14
; ---------------------------------------------------------------------------

loc_16A6E:

		move.b	#2,$2F(a0)
		move.b	#$21,$20(a0)
		move.b	$44(a0),$1E(a0)
		move.b	$45(a0),$1F(a0)
		bset	#1,(__u_F74E).w
		rts
; ---------------------------------------------------------------------------

loc_16A8E:
		bsr.w	sub_17680
		addi.w	#$38,$1A(a0)
		btst	#6,$2A(a0)
		beq.s	loc_16AA6
		subi.w	#$28,$1A(a0)

loc_16AA6:
		bsr.w	sub_1793E
		btst	#1,(__u_F74E).w
		bne.s	locret_16B04
		move.w	#0,$1C(a0)
		move.w	#0,$18(a0)
		move.w	#0,$1A(a0)
		move.b	$1E(a0),d0
		sub.b	$44(a0),d0
		ext.w	d0
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_16AD6
		neg.w	d0

loc_16AD6:
		add.w	d0,$14(a0)
		moveq	#$4C,d0
		jsr	Play_Sound_2.w
		move.b	$26(a0),d0
		addi.b	#$20,d0
		andi.b	#$C0,d0
		beq.s	loc_16AF4
		bra.w	Knux_TouchFloor
; ---------------------------------------------------------------------------

loc_16AF4:
		bsr.w	Knux_TouchFloor
		move.w	#$F,$32(a0)
		move.b	#$23,$20(a0)

locret_16B04:
		rts
; ---------------------------------------------------------------------------

loc_16B06:
		move.b	(Ctrl_1_logical).w,d0
		andi.b	#$70,d0
		beq.s	loc_16B2A
		tst.w	$18(a0)
		bpl.s	loc_16B22
		addi.w	#$20,$18(a0)
		bmi.s	loc_16B20
		bra.s	loc_16B2A
; ---------------------------------------------------------------------------

loc_16B20:
		bra.s	loc_16B64
; ---------------------------------------------------------------------------

loc_16B22:
		subi.w	#$20,$18(a0)
		bpl.s	loc_16B64

loc_16B2A:

		move.w	#0,$1C(a0)
		move.w	#0,$18(a0)
		move.w	#0,$1A(a0)
		move.b	$1E(a0),d0
		sub.b	$44(a0),d0
		ext.w	d0
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_16B4E
		neg.w	d0

loc_16B4E:
		add.w	d0,$14(a0)
		bsr.w	Knux_TouchFloor
		move.w	#$F,$32(a0)
		move.b	#$22,$20(a0)

locret_16B94:
		rts
; ---------------------------------------------------------------------------

loc_16B64:

		bsr.w	sub_1793E
		bsr.w	sub_11FD6
		cmpi.w	#$E,d1
		bge.s	loc_16B96
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_16B7A
		neg.w	d1

loc_16B7A:
		add.w	d1,$14(a0)
		move.b	d3,$26(a0)
		move.b	(Level_frame_counter+1).w,d0
		andi.b	#7,d0
		bne.s	locret_16B94
		moveq	#$7E,d0
		jmp	Play_Sound_2.w
; ---------------------------------------------------------------------------

loc_16B96:
		move.b	#2,$2F(a0)
		move.b	#$21,$20(a0)
		move.b	$44(a0),$1E(a0)
		move.b	$45(a0),$1F(a0)
		bset	#1,(__u_F74E).w
		rts
; ---------------------------------------------------------------------------

loc_16BB6:
		tst.b	(Wallgrab_Disable).w
		bmi.w	loc_16ED2
		move.w	$10(a0),d0
		cmp.w	$12(a0),d0
		bne.w	loc_16ED2
		btst	#3,$2A(a0)
		bne.w	loc_16ED2
		move.w	#0,$1C(a0)
		move.w	#0,$18(a0)
		move.w	#0,$1A(a0)
		move.l	(Primary_collision_addr).w,(Collision_addr).w
		cmpi.b	#$D,$47(a0)
		beq.s	loc_16BFA
		move.l	(Secondary_collision_addr).w,(Collision_addr).w

loc_16BFA:
		move.b	$47(a0),d5
		moveq	#0,d1
		btst	#0,(Ctrl_1_logical).w
		beq.w	loc_16D10
		tst.b	(Reverse_gravity_flag).w
		bne.w	loc_16DA8
		move.w	$14(a0),d2
		subi.w	#$B,d2
		bsr.w	sub_16F4E
		cmpi.w	#4,d1
		bge.w	loc_16EBA
		tst.w	d1
		bne.w	loc_16E60
		move.b	$47(a0),d5
		move.w	$14(a0),d2
		subq.w	#8,d2
		move.w	$10(a0),d3
		jsr	sub_FBEE.w
		tst.w	d1
		bpl.s	loc_16C4C
		sub.w	d1,$14(a0)
		moveq	#1,d1
		bra.w	loc_16E10
; ---------------------------------------------------------------------------

loc_16C4C:
		subq.w	#1,$14(a0)
		tst.b	(Super_Sonic_Knux_flag).w
		beq.s	loc_16C5A
		subq.w	#1,$14(a0)

loc_16C5A:
		moveq	#1,d1
		move.w	(Camera_min_Y_pos).w,d0
		cmpi.w	#-$100,d0
		beq.w	loc_16E10
		addi.w	#$10,d0
		cmp.w	$14(a0),d0
		ble.w	loc_16E10
		move.w	d0,$14(a0)
		bra.w	loc_16E10
; ---------------------------------------------------------------------------

loc_16C7C:
		cmpi.b	#$BD,$22(a0)
		bne.s	loc_16C9E
		move.b	#$B7,$22(a0)
		subq.w	#3,$14(a0)
		subq.w	#3,$10(a0)
		btst	#0,$2A(a0)
		beq.s	loc_16C9E
		addq.w	#6,$10(a0)

loc_16C9E:

		move.w	$14(a0),d2
		subi.w	#$B,d2
		bsr.w	sub_16F4E
		tst.w	d1
		bne.w	loc_16ED2
		move.b	$46(a0),d5
		move.w	$14(a0),d2
		subi.w	#9,d2
		move.w	$10(a0),d3
		jsr	sub_FBEE.w
		tst.w	d1
		bpl.s	loc_16CFC
		sub.w	d1,$14(a0)
		move.b	(Primary_Angle).w,d0
		addi.b	#$40,d0
		neg.b	d0
		subi.b	#$40,d0
		move.b	d0,$26(a0)
		move.w	#0,$1C(a0)
		move.w	#0,$18(a0)
		move.w	#0,$1A(a0)
		bsr.w	Knux_TouchFloor
		move.b	#5,$20(a0)
		rts
; ---------------------------------------------------------------------------

loc_16CFC:
		subq.w	#1,$14(a0)
		tst.b	(Super_Sonic_Knux_flag).w
		beq.s	loc_16D0A
		subq.w	#1,$14(a0)

loc_16D0A:
		moveq	#-1,d1
		bra.w	loc_16E10
; ---------------------------------------------------------------------------

loc_16D10:
		btst	#1,(Ctrl_1_logical).w
		beq.w	loc_16E10
		tst.b	(Reverse_gravity_flag).w
		bne.w	loc_16C7C
		cmpi.b	#$BD,$22(a0)
		bne.s	loc_16D44
		move.b	#$B7,$22(a0)
		addq.w	#3,$14(a0)
		subq.w	#3,$10(a0)
		btst	#0,$2A(a0)
		beq.s	loc_16D44
		addq.w	#6,$10(a0)

loc_16D44:

		move.w	$14(a0),d2
		addi.w	#$B,d2
		bsr.w	sub_16F4E
		tst.w	d1
		bne.w	loc_16ED2
		move.b	$46(a0),d5
		move.w	$14(a0),d2
		addi.w	#9,d2
		move.w	$10(a0),d3
		jsr	sub_F828.w
		tst.w	d1
		bpl.s	loc_16D96

loc_16D6E:
		add.w	d1,$14(a0)
		move.b	(Primary_Angle).w,$26(a0)
		move.w	#0,$1C(a0)
		move.w	#0,$18(a0)
		move.w	#0,$1A(a0)
		bsr.w	Knux_TouchFloor
		move.b	#5,$20(a0)
		rts
; ---------------------------------------------------------------------------

loc_16D96:
		addq.w	#1,$14(a0)
		tst.b	(Super_Sonic_Knux_flag).w
		beq.s	loc_16DA4
		addq.w	#1,$14(a0)

loc_16DA4:
		moveq	#-1,d1
		bra.s	loc_16E10
; ---------------------------------------------------------------------------

loc_16DA8:
		move.w	$14(a0),d2
		addi.w	#$B,d2
		bsr.w	sub_16F4E
		cmpi.w	#4,d1
		bge.w	loc_16EBA
		tst.w	d1
		bne.w	loc_16E60
		move.b	$47(a0),d5
		move.w	$14(a0),d2
		addq.w	#8,d2
		move.w	$10(a0),d3
		jsr	sub_F828.w
		tst.w	d1
		bpl.s	loc_16DE2
		add.w	d1,$14(a0)
		moveq	#1,d1
		bra.w	loc_16E10
; ---------------------------------------------------------------------------

loc_16DE2:
		addq.w	#1,$14(a0)
		tst.b	(Super_Sonic_Knux_flag).w
		beq.s	loc_16DF0
		addq.w	#1,$14(a0)

loc_16DF0:
		moveq	#1,d1
		cmpi.w	#-$100,(Camera_min_Y_pos).w
		beq.w	loc_16E10
		move.w	(Camera_max_Y_pos).w,d0
		addi.w	#$D0,d0
		cmp.w	$14(a0),d0
		bge.w	loc_16E10
		move.w	d0,$14(a0)

loc_16E10:

		move.b	(Ctrl_1_logical).w,d0
		andi.b	#3,d0
		bne.s	loc_16E34
		move.b	$46(a0),d5
		move.w	$14(a0),d2
		addi.w	#9,d2
		move.w	$10(a0),d3
		jsr	sub_F828.w
		tst.w	d1
		bmi.w	loc_16D6E

loc_16E34:
		tst.w	d1
		beq.s	loc_16E60
		subq.b	#1,$25(a0)
		bpl.s	loc_16E60
		move.b	#3,$25(a0)
		add.b	$22(a0),d1
		cmpi.b	#$B7,d1
		bhs.s	loc_16E52
		move.b	#$BC,d1

loc_16E52:
		cmpi.b	#$BC,d1
		bls.s	loc_16E5C
		move.b	#$B7,d1

loc_16E5C:
		move.b	d1,$22(a0)

loc_16E60:

		move.b	#$20,$24(a0)
		move.b	#0,$23(a0)
		move.w	(Ctrl_1_logical).w,d0
		andi.w	#$70,d0
		beq.s	locret_16EB8
		move.w	#-$380,$1A(a0)
		move.w	#$400,$18(a0)
		bchg	#0,$2A(a0)
		bne.s	loc_16E8E
		neg.w	$18(a0)

loc_16E8E:
		bset	#1,$2A(a0)
		move.b	#1,$40(a0)
		move.b	#$E,$1E(a0)
		move.b	#7,$1F(a0)
		move.b	#2,$20(a0)
		bset	#2,$2A(a0)
		move.b	#0,$2F(a0)

locret_16EB8:
		rts
; ---------------------------------------------------------------------------

loc_16EBA:

		move.b	#5,$2F(a0)
		cmpi.b	#-$43,$22(a0)
		beq.s	locret_16ED0
		move.b	#0,$25(a0)
		bsr.s	sub_16EFE

locret_16ED0:
		rts
; ---------------------------------------------------------------------------

loc_16ED2:

		move.b	#2,$2F(a0)
		move.w	#$2121,$20(a0)
		move.b	#$CB,$22(a0)
		move.b	#7,$24(a0)
		move.b	#1,$23(a0)
		move.b	$44(a0),$1E(a0)
		move.b	$45(a0),$1F(a0)
		rts
; End of function sub_16890


; =============== S U B R O U T I N E =======================================


sub_16EFE:

		moveq	#0,d0
		move.b	$25(a0),d0
		lea	byte_16F3E(pc,d0.w),a1
		move.b	(a1)+,$22(a0)
		move.b	(a1)+,d0
		ext.w	d0
		btst	#0,$2A(a0)
		beq.s	loc_16F1A
		neg.w	d0

loc_16F1A:
		add.w	d0,$10(a0)
		move.b	(a1)+,d1
		ext.w	d1
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_16F2A
		neg.w	d1

loc_16F2A:
		add.w	d1,$14(a0)
		move.b	(a1)+,$24(a0)
		addq.b	#4,$25(a0)
		move.b	#0,$23(a0)
		rts
; End of function sub_16EFE

; ---------------------------------------------------------------------------
byte_16F3E:	dc.b  $BD,   3,	$FD,   6, $BE,	 8, $F6,   6, $BF, $F8,	$F4,   6, $D2,	 8, $FB,   6

; =============== S U B R O U T I N E =======================================


sub_16F4E:

		move.b	$47(a0),d5
		btst	#0,$2A(a0)
		bne.s	loc_16F62
		move.w	$10(a0),d3
		jmp	loc_FAA4.w
; ---------------------------------------------------------------------------

loc_16F62:
		move.w	$10(a0),d3
		subq.w	#1,d3
		jmp	loc_FDC8.w
; ---------------------------------------------------------------------------

loc_16F6C:
		tst.b	$24(a0)
		bne.s	locret_16FA6
		bsr.w	sub_16EFE
		cmpi.b	#$10,$25(a0)
		bne.s	locret_16FA6
		move.w	#0,$1C(a0)
		move.w	#0,$18(a0)
		move.w	#0,$1A(a0)
		btst	#0,$2A(a0)
		beq.s	loc_16F9C
		subq.w	#1,$10(a0)

loc_16F9C:
		bsr.w	Knux_TouchFloor
		move.b	#5,$20(a0)

locret_16FA6:

		rts

; =============== S U B R O U T I N E =======================================


sub_16FA8:
					; Knux_JumpHeight+DEp
		move.b	#$20,$24(a0)
		move.b	#0,$23(a0)
		move.w	#$2020,$20(a0)
		bclr	#5,$2A(a0)
		bclr	#0,$2A(a0)
		moveq	#0,d0
		move.b	$25(a0),d0
		addi.b	#$10,d0
		lsr.w	#5,d0
		move.b	byte_16FEE(pc,d0.w),d1
		move.b	d1,$22(a0)
		cmpi.b	#$C4,d1
		bne.s	locret_16FEC
		bset	#0,$2A(a0)
		move.b	#$C0,$22(a0)

locret_16FEC:
		rts
; End of function sub_16FA8

; ---------------------------------------------------------------------------
byte_16FEE:	dc.b $C0
		dc.b $C1
		dc.b $C2
		dc.b $C3
		dc.b $C4
		dc.b $C3
		dc.b $C2
		dc.b $C1

; =============== S U B R O U T I N E =======================================


sub_16FF6:
		cmpi.b	#1,$2F(a0)
		bne.w	loc_170B4
		move.w	$1C(a0),d0
		cmpi.w	#$400,d0
		bhs.s	loc_1700E
		addq.w	#8,d0
		bra.s	loc_17028
; ---------------------------------------------------------------------------

loc_1700E:
		cmpi.w	#$1800,d0
		bhs.s	loc_17028
		move.b	$25(a0),d1
		andi.b	#$7F,d1
		bne.s	loc_17028
		addq.w	#4,d0
		tst.b	(Super_Sonic_Knux_flag).w
		beq.s	loc_17028
		addq.w	#8,d0

loc_17028:

		move.w	d0,$1C(a0)
		move.b	$25(a0),d0
		btst	#2,(Ctrl_1_logical).w
		beq.s	loc_17048
		cmpi.b	#$80,d0
		beq.s	loc_17048
		tst.b	d0
		bpl.s	loc_17044
		neg.b	d0

loc_17044:
		addq.b	#2,d0
		bra.s	loc_17066
; ---------------------------------------------------------------------------

loc_17048:

		btst	#3,(Ctrl_1_logical).w
		beq.s	loc_1705C
		tst.b	d0
		beq.s	loc_1705C
		bmi.s	loc_17058
		neg.b	d0

loc_17058:
		addq.b	#2,d0
		bra.s	loc_17066
; ---------------------------------------------------------------------------

loc_1705C:

		move.b	d0,d1
		andi.b	#$7F,d1
		beq.s	loc_17066
		addq.b	#2,d0

loc_17066:

		move.b	d0,$25(a0)
		move.b	$25(a0),d0

loc_1706E:
		jsr	GetSineCosine.w
		muls.w	$1C(a0),d1
		asr.l	#8,d1
		move.w	d1,$18(a0)
		cmpi.w	#$80,$1A(a0)
		blt.s	loc_1708E
		subi.w	#$20,$1A(a0)
		bra.s	loc_17094
; ---------------------------------------------------------------------------

loc_1708E:
		addi.w	#$20,$1A(a0)

loc_17094:
		move.w	(Camera_min_Y_pos).w,d0
		cmpi.w	#-$100,d0
		beq.w	loc_170B4
		addi.w	#$10,d0
		cmp.w	$14(a0),d0
		ble.w	loc_170B4
		asr	$18(a0)
		asr	$1C(a0)

loc_170B4:

		cmpi.w	#$60,(a5)
		beq.s	locret_170C0
		bcc.s	loc_170BE
		addq.w	#4,(a5)

loc_170BE:
		subq.w	#2,(a5)

locret_170C0:
		rts
; End of function sub_16FF6

; ---------------------------------------------------------------------------

Knux_Spin_Path:
		tst.b	$3D(a0)
		bne.s	loc_170CC
		bsr.w	Knux_Jump

loc_170CC:
		bsr.w	Player_RollRepel
		bsr.w	Knux_RollSpeed
		bsr.w	Player_LevelBound
		jsr	MoveSprite_TestGravity2.w
		bsr.w	Call_Player_AnglePos
		bsr.w	Player_SlopeRepel
		tst.b	(BG_Collision).w
		beq.s	locret_17116
		jsr	sub_F846.w
		tst.w	d1
		bmi.w	Kill_Character
		movem.l	a4-a6,-(sp)
		jsr	CheckLeftWallDist.w
		tst.w	d1
		bpl.s	loc_17106
		sub.w	d1,$10(a0)

loc_17106:
		jsr	CheckRightWallDist.w
		tst.w	d1
		bpl.s	loc_17112
		add.w	d1,$10(a0)

loc_17112:
		movem.l	(sp)+,a4-a6

locret_17116:
		rts
; ---------------------------------------------------------------------------

Knux_Spin_Freespace:
		bsr.w	Knux_JumpHeight
		bsr.w	sub_17680
		bsr.w	Player_LevelBound
		jsr	MoveSprite_TestGravity.w
		btst	#6,$2A(a0)
		beq.s	loc_17138
		subi.w	#$28,$1A(a0)

loc_17138:
		bsr.w	Player_JumpAngle
		bsr.w	SonicKnux_DoLevelCollision
		rts

; =============== S U B R O U T I N E =======================================


Knux_InputAcceleration_Path:
		move.w	(a4),d6
		move.w	2(a4),d5
		move.w	4(a4),d4
		tst.b	$2B(a0)
		bmi.w	loc_17364
		tst.w	$32(a0)
		bne.w	loc_1731C
		btst	#2,(Ctrl_1_logical).w
		beq.s	loc_17168
		bsr.w	sub_17428

loc_17168:
		btst	#3,(Ctrl_1_logical).w
		beq.s	loc_17174
		bsr.w	sub_174B4

loc_17174:
		move.b	$26(a0),d0
		addi.b	#$20,d0
		andi.b	#$C0,d0
		bne.w	loc_1731C
		tst.w	$1C(a0)
		bne.w	loc_1731C
		bclr	#5,$2A(a0)
		move.b	#5,$20(a0)
		btst	#3,$2A(a0)
		beq.w	loc_1722C
		movea.w	$42(a0),a1
		tst.b	$2A(a1)
		bmi.w	loc_172A8
		moveq	#0,d1
		move.b	7(a1),d1
		move.w	d1,d2
		add.w	d2,d2
		subq.w	#2,d2
		add.w	$10(a0),d1
		sub.w	$10(a1),d1
		cmpi.w	#2,d1
		blt.s	loc_171FE
		cmp.w	d2,d1
		bge.s	loc_171D0
		bra.w	loc_172A8
; ---------------------------------------------------------------------------

loc_171D0:
		btst	#0,$2A(a0)
		bne.s	loc_171E2
		move.b	#6,$20(a0)
		bra.w	loc_1731C
; ---------------------------------------------------------------------------

loc_171E2:
		bclr	#0,$2A(a0)
		move.b	#0,$24(a0)
		move.b	#4,$23(a0)
		move.w	#$606,$20(a0)
		bra.w	loc_1731C
; ---------------------------------------------------------------------------

loc_171FE:
		btst	#0,$2A(a0)
		beq.s	loc_17210
		move.b	#6,$20(a0)
		bra.w	loc_1731C
; ---------------------------------------------------------------------------

loc_17210:
		bset	#0,$2A(a0)
		move.b	#0,$24(a0)
		move.b	#4,$23(a0)
		move.w	#$606,$20(a0)
		bra.w	loc_1731C
; ---------------------------------------------------------------------------

loc_1722C:
		move.w	$10(a0),d3
		bsr.w	ChooseChkFloorEdge
		cmpi.w	#$C,d1
		blt.w	loc_172A8
		cmpi.b	#3,$3A(a0)
		bne.s	loc_17272
		btst	#0,$2A(a0)
		bne.s	loc_17256
		move.b	#6,$20(a0)
		bra.w	loc_1731C
; ---------------------------------------------------------------------------

loc_17256:
		bclr	#0,$2A(a0)
		move.b	#0,$24(a0)
		move.b	#4,$23(a0)
		move.w	#$606,$20(a0)
		bra.w	loc_1731C
; ---------------------------------------------------------------------------

loc_17272:
		cmpi.b	#3,$3B(a0)
		bne.s	loc_172A8
		btst	#0,$2A(a0)
		beq.s	loc_1728C
		move.b	#6,$20(a0)
		bra.w	loc_1731C
; ---------------------------------------------------------------------------

loc_1728C:
		bset	#0,$2A(a0)
		move.b	#0,$24(a0)
		move.b	#4,$23(a0)
		move.w	#$606,$20(a0)
		bra.w	loc_1731C
; ---------------------------------------------------------------------------

loc_172A8:
					; Knux_InputAcceleration_Path+8Aj ...
		btst	#1,(Ctrl_1_logical).w
		beq.s	loc_172E2
		move.b	#8,$20(a0)
		addq.b	#1,$39(a0)
		cmpi.b	#$78,$39(a0)
		blo.s	loc_17322
		move.b	#$78,$39(a0)
		tst.b	(Reverse_gravity_flag).w
		bne.s	loc_172D8
		cmpi.w	#8,(a5)
		beq.s	loc_1732E
		subq.w	#2,(a5)
		bra.s	loc_1732E
; ---------------------------------------------------------------------------

loc_172D8:
		cmpi.w	#$D8,(a5)
		beq.s	loc_1732E
		addq.w	#2,(a5)
		bra.s	loc_1732E
; ---------------------------------------------------------------------------

loc_172E2:
		btst	#0,(Ctrl_1_logical).w
		beq.s	loc_1731C
		move.b	#7,$20(a0)
		addq.b	#1,$39(a0)
		cmpi.b	#$78,$39(a0)
		blo.s	loc_17322
		move.b	#$78,$39(a0)
		tst.b	(Reverse_gravity_flag).w
		bne.s	loc_17312
		cmpi.w	#$C8,(a5)
		beq.s	loc_1732E
		addq.w	#2,(a5)
		bra.s	loc_1732E
; ---------------------------------------------------------------------------

loc_17312:
		cmpi.w	#$18,(a5)
		beq.s	loc_1732E
		subq.w	#2,(a5)
		bra.s	loc_1732E
; ---------------------------------------------------------------------------

loc_1731C:
					; Knux_InputAcceleration_Path+3Ej ...
		move.b	#0,$39(a0)

loc_17322:
					; Knux_InputAcceleration_Path+1B8j
		cmpi.w	#$60,(a5)
		beq.s	loc_1732E
		bcc.s	loc_1732C
		addq.w	#4,(a5)

loc_1732C:
		subq.w	#2,(a5)

loc_1732E:
					; Knux_InputAcceleration_Path+194j ...
		tst.b	(Super_Sonic_Knux_flag).w
		beq.s	loc_17338
		move.w	#$C,d5

loc_17338:
		move.b	(Ctrl_1_logical).w,d0
		andi.b	#$C,d0
		bne.s	loc_17364
		move.w	$1C(a0),d0
		beq.s	loc_17364
		bmi.s	loc_17358
		sub.w	d5,d0
		bcc.s	loc_17352
		move.w	#0,d0

loc_17352:
		move.w	d0,$1C(a0)
		bra.s	loc_17364
; ---------------------------------------------------------------------------

loc_17358:
		add.w	d5,d0
		bcc.s	loc_17360
		move.w	#0,d0

loc_17360:
		move.w	d0,$1C(a0)

loc_17364:
					; Knux_InputAcceleration_Path+1FEj ...
		move.b	$26(a0),d0
		jsr	GetSineCosine.w
		muls.w	$1C(a0),d1
		asr.l	#8,d1
		move.w	d1,$18(a0)
		muls.w	$1C(a0),d0
		asr.l	#8,d0
		move.w	d0,$1A(a0)

loc_17382:
		btst	#6,$2E(a0)
		bne.w	locret_17426
		move.b	$26(a0),d0
		andi.b	#$3F,d0
		beq.s	loc_173A2
		move.b	$26(a0),d0
		addi.b	#$40,d0
		bmi.w	locret_17426

loc_173A2:
		move.b	#$40,d1
		tst.w	$1C(a0)
		beq.s	locret_17426
		bmi.s	loc_173B0
		neg.w	d1

loc_173B0:
		move.b	$26(a0),d0
		add.b	d1,d0
		move.w	d0,-(sp)
		jsr	sub_F61C.w
		move.w	(sp)+,d0
		tst.w	d1
		bpl.s	locret_17426
		asl.w	#8,d1
		cmpi.b	#8,(Current_zone).w
		bne.s	loc_173D2
		tst.b	d0
		bpl.s	loc_173D2
		subq.b	#1,d0

loc_173D2:
					; Knux_InputAcceleration_Path+28Cj
		addi.b	#$20,d0
		andi.b	#$C0,d0
		beq.s	loc_17422
		cmpi.b	#$40,d0
		beq.s	loc_17408
		cmpi.b	#$80,d0
		beq.s	loc_17402
		add.w	d1,$18(a0)
		move.w	#0,$1C(a0)
		btst	#0,$2A(a0)
		bne.s	locret_17400
		bset	#5,$2A(a0)

locret_17400:
					; Knux_InputAcceleration_Path+2D6j
		rts
; ---------------------------------------------------------------------------

loc_17402:
		sub.w	d1,$1A(a0)
		rts
; ---------------------------------------------------------------------------

loc_17408:
		sub.w	d1,$18(a0)
		move.w	#0,$1C(a0)
		btst	#0,$2A(a0)
		beq.s	locret_17400
		bset	#5,$2A(a0)
		rts
; ---------------------------------------------------------------------------

loc_17422:
		add.w	d1,$1A(a0)

locret_17426:
					; Knux_InputAcceleration_Path+25Cj ...
		rts
; End of function Knux_InputAcceleration_Path


; =============== S U B R O U T I N E =======================================


sub_17428:
		move.w	$1C(a0),d0
		beq.s	loc_17430
		bpl.s	loc_17462

loc_17430:
		bset	#0,$2A(a0)
		bne.s	loc_17444
		bclr	#5,$2A(a0)
		move.b	#1,$21(a0)

loc_17444:
		sub.w	d5,d0
		move.w	d6,d1
		neg.w	d1
		cmp.w	d1,d0
		bgt.s	loc_17456
		add.w	d5,d0
		cmp.w	d1,d0
		ble.s	loc_17456
		move.w	d1,d0

loc_17456:

		move.w	d0,$1C(a0)
		move.b	#0,$20(a0)
		rts
; ---------------------------------------------------------------------------

loc_17462:
		sub.w	d4,d0
		bcc.s	loc_1746A
		move.w	#-$80,d0

loc_1746A:
		move.w	d0,$1C(a0)
		move.b	$26(a0),d0
		addi.b	#$20,d0
		andi.b	#$C0,d0
		bne.s	locret_174B2
		cmpi.w	#$400,d0
		blt.s	locret_174B2
		tst.b	$2D(a0)
		bmi.s	locret_174B2
		move.w	#$36,d0
		jsr	Play_Sound_2.w
		move.b	#$D,$20(a0)
		bclr	#0,$2A(a0)
		cmpi.b	#$C,$2C(a0)
		blo.s	locret_174B2
		move.b	#6,5(a6)
		move.b	#$15,$22(a6)

locret_174B2:

		rts
; End of function sub_17428


; =============== S U B R O U T I N E =======================================


sub_174B4:
		move.w	$1C(a0),d0
		bmi.s	loc_174E8
		bclr	#0,$2A(a0)
		beq.s	loc_174CE
		bclr	#5,$2A(a0)
		move.b	#1,$21(a0)

loc_174CE:
		add.w	d5,d0
		cmp.w	d6,d0
		blt.s	loc_174DC
		sub.w	d5,d0
		cmp.w	d6,d0
		bge.s	loc_174DC
		move.w	d6,d0

loc_174DC:

		move.w	d0,$1C(a0)
		move.b	#0,$20(a0)
		rts
; ---------------------------------------------------------------------------

loc_174E8:
		add.w	d4,d0
		bcc.s	loc_174F0
		move.w	#$80,d0

loc_174F0:
		move.w	d0,$1C(a0)
		move.b	$26(a0),d0
		addi.b	#$20,d0
		andi.b	#$C0,d0
		bne.s	locret_17538
		cmpi.w	#$FC00,d0
		bgt.s	locret_17538
		tst.b	$2D(a0)
		bmi.s	locret_17538
		move.w	#$36,d0
		jsr	Play_Sound_2.w
		move.b	#$D,$20(a0)
		bset	#0,$2A(a0)
		cmpi.b	#$C,$2C(a0)
		blo.s	locret_17538
		move.b	#6,5(a6)
		move.b	#$15,$22(a6)

locret_17538:

		rts
; End of function sub_174B4


; =============== S U B R O U T I N E =======================================

; sub_1753A:
Knux_RollSpeed:
		move.w	(a4),d6
		asl.w	#1,d6
		move.w	2(a4),d5
		asr.w	#1,d5
		tst.b	(Super_Sonic_Knux_flag).w
		beq.s	loc_1754E
		move.w	#6,d5

loc_1754E:
		move.w	#$20,d4
		tst.b	$3D(a0)
		bmi.w	loc_175F8
		tst.b	$2B(a0)
		bmi.w	loc_175F8
		tst.w	$32(a0)
		bne.s	loc_17580
		btst	#2,(Ctrl_1_logical).w
		beq.s	loc_17574
		bsr.w	sub_1763A

loc_17574:
		btst	#3,(Ctrl_1_logical).w
		beq.s	loc_17580
		bsr.w	sub_1765E

loc_17580:

		move.w	$1C(a0),d0
		beq.s	loc_175A2
		bmi.s	loc_17596
		sub.w	d5,d0
		bcc.s	loc_17590
		move.w	#0,d0

loc_17590:
		move.w	d0,$1C(a0)
		bra.s	loc_175A2
; ---------------------------------------------------------------------------

loc_17596:
		add.w	d5,d0
		bcc.s	loc_1759E
		move.w	#0,d0

loc_1759E:
		move.w	d0,$1C(a0)

loc_175A2:

		move.w	$1C(a0),d0
		bpl.s	loc_175AA
		neg.w	d0

loc_175AA:
		cmpi.w	#$80,d0
		bhs.s	loc_175F8
		tst.b	$3D(a0)
		bne.s	loc_175E6
		bclr	#2,$2A(a0)
		move.b	$1E(a0),d0
		move.b	$44(a0),$1E(a0)
		move.b	$45(a0),$1F(a0)
		move.b	#5,$20(a0)
		sub.b	$44(a0),d0
		ext.w	d0
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_175E0
		neg.w	d0

loc_175E0:
		add.w	d0,$14(a0)
		bra.s	loc_175F8
; ---------------------------------------------------------------------------

loc_175E6:
		move.w	#$400,$1C(a0)
		btst	#0,$2A(a0)
		beq.s	loc_175F8
		neg.w	$1C(a0)

loc_175F8:

		cmpi.w	#$60,(a5)
		beq.s	loc_17604
		bcc.s	loc_17602
		addq.w	#4,(a5)

loc_17602:
		subq.w	#2,(a5)

loc_17604:
		move.b	$26(a0),d0
		jsr	GetSineCosine.w
		muls.w	$1C(a0),d0
		asr.l	#8,d0
		move.w	d0,$1A(a0)
		muls.w	$1C(a0),d1
		asr.l	#8,d1
		cmpi.w	#$1000,d1
		ble.s	loc_17628
		move.w	#$1000,d1

loc_17628:
		cmpi.w	#-$1000,d1
		bge.s	loc_17632
		move.w	#-$1000,d1

loc_17632:
		move.w	d1,$18(a0)
		bra.w	loc_17382
; End of function Knux_RollSpeed


; =============== S U B R O U T I N E =======================================


sub_1763A:
		move.w	$1C(a0),d0
		beq.s	loc_17642
		bpl.s	loc_17650

loc_17642:
		bset	#0,$2A(a0)
		move.b	#2,$20(a0)
		rts
; ---------------------------------------------------------------------------

loc_17650:
		sub.w	d4,d0
		bcc.s	loc_17658
		move.w	#-$80,d0

loc_17658:
		move.w	d0,$1C(a0)
		rts
; End of function sub_1763A


; =============== S U B R O U T I N E =======================================


sub_1765E:
		move.w	$1C(a0),d0
		bmi.s	loc_17672
		bclr	#0,$2A(a0)
		move.b	#2,$20(a0)
		rts
; ---------------------------------------------------------------------------

loc_17672:
		add.w	d4,d0
		bcc.s	loc_1767A
		move.w	#$80,d0

loc_1767A:
		move.w	d0,$1C(a0)
		rts
; End of function sub_1765E


; =============== S U B R O U T I N E =======================================


sub_17680:

		move.w	(a4),d6
		move.w	2(a4),d5
		asl.w	#1,d5
		btst	#4,$2A(a0)
		bne.s	loc_176D4
		move.w	$18(a0),d0
		btst	#2,(Ctrl_1_logical).w
		beq.s	loc_176B4
		bset	#0,$2A(a0)
		sub.w	d5,d0
		move.w	d6,d1
		neg.w	d1
		cmp.w	d1,d0
		bgt.s	loc_176B4
		add.w	d5,d0
		cmp.w	d1,d0
		ble.s	loc_176B4
		move.w	d1,d0

loc_176B4:

		btst	#3,(Ctrl_1_logical).w
		beq.s	loc_176D0
		bclr	#0,$2A(a0)
		add.w	d5,d0
		cmp.w	d6,d0
		blt.s	loc_176D0
		sub.w	d5,d0
		cmp.w	d6,d0
		bge.s	loc_176D0
		move.w	d6,d0

loc_176D0:

		move.w	d0,$18(a0)

loc_176D4:
		cmpi.w	#$60,(a5)
		beq.s	loc_176E0
		bcc.s	loc_176DE
		addq.w	#4,(a5)

loc_176DE:
		subq.w	#2,(a5)

loc_176E0:
		cmpi.w	#-$400,$1A(a0)
		blo.s	locret_1770E
		move.w	$18(a0),d0
		move.w	d0,d1
		asr.w	#5,d1
		beq.s	locret_1770E
		bmi.s	loc_17702
		sub.w	d1,d0
		bcc.s	loc_176FC
		move.w	#0,d0

loc_176FC:
		move.w	d0,$18(a0)
		rts
; ---------------------------------------------------------------------------

loc_17702:
		sub.w	d1,d0
		bcs.s	loc_1770A
		move.w	#0,d0

loc_1770A:
		move.w	d0,$18(a0)

locret_1770E:

		rts
; End of function sub_17680


; =============== S U B R O U T I N E =======================================


Knux_Jump:

		move.b	(Ctrl_1_pressed_logical).w,d0
		andi.b	#$70,d0
		beq.w	locret_177E0
		moveq	#0,d0
		move.b	$26(a0),d0
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_17732
		addi.b	#$40,d0
		neg.b	d0
		subi.b	#$40,d0

loc_17732:
		addi.b	#-$80,d0
		movem.l	a4-a6,-(sp)
		jsr	(CalcRoomOverHead).l
		movem.l	(sp)+,a4-a6
		cmpi.w	#6,d1
		blt.w	locret_177E0
		move.w	#$600,d2
		btst	#6,$2A(a0)
		beq.s	loc_1775C
		move.w	#$300,d2

loc_1775C:
		moveq	#0,d0
		move.b	$26(a0),d0
		subi.b	#$40,d0
		jsr	GetSineCosine.w
		muls.w	d2,d1
		asr.l	#8,d1
		add.w	d1,$18(a0)
		muls.w	d2,d0
		asr.l	#8,d0
		add.w	d0,$1A(a0)
		bset	#1,$2A(a0)
		bclr	#5,$2A(a0)
		addq.l	#4,sp
		move.b	#1,$40(a0)
		clr.b	$3C(a0)
		move.w	#$62,d0
		jsr	Play_Sound_2.w
		move.b	$44(a0),$1E(a0)
		move.b	$45(a0),$1F(a0)
		btst	#2,$2A(a0)
		bne.s	loc_177E2
		move.b	#$E,$1E(a0)
		move.b	#7,$1F(a0)
		move.b	#2,$20(a0)
		bset	#2,$2A(a0)
		move.b	$1E(a0),d0
		sub.b	$44(a0),d0
		ext.w	d0
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_177DC
		neg.w	d0

loc_177DC:
		sub.w	d0,$14(a0)

locret_177E0:
					; Knux_Jump+38j
		rts
; ---------------------------------------------------------------------------

loc_177E2:
		bset	#4,$2A(a0)
		rts
; End of function Knux_Jump


; =============== S U B R O U T I N E =======================================


Knux_JumpHeight:

		tst.b	$40(a0)
		beq.s	loc_17818
		move.w	#-$400,d1
		btst	#6,$2A(a0)
		beq.s	loc_17800
		move.w	#-$200,d1

loc_17800:
		cmp.w	$1A(a0),d1
		ble.w	Knux_Test_For_Glide
		move.b	(Ctrl_1_logical).w,d0
		andi.b	#$70,d0
		bne.s	locret_17816
		move.w	d1,$1A(a0)

locret_17816:
		rts
; ---------------------------------------------------------------------------

loc_17818:
		tst.b	$3D(a0)
		bne.s	locret_1782C
		cmpi.w	#-$FC0,$1A(a0)
		bge.s	locret_1782C
		move.w	#-$FC0,$1A(a0)

locret_1782C:
					; Knux_JumpHeight+3Aj
		rts
; ---------------------------------------------------------------------------

Knux_Test_For_Glide:
		tst.b	$2F(a0)
		bne.w	locret_178CC
		move.b	(Ctrl_1_pressed_logical).w,d0
		andi.b	#$70,d0
		beq.s	locret_178CC

loc_1785E:

loc_1786C:
		bclr	#2,$2A(a0)
		move.b	#$A,$1E(a0)
		move.b	#$A,$1F(a0)
		bclr	#4,$2A(a0)
		move.b	#1,$2F(a0)
		addi.w	#$200,$1A(a0)
		bpl.s	loc_17898
		move.w	#0,$1A(a0)

loc_17898:
		moveq	#0,d1
		move.w	#$400,d0
		move.w	d0,$1C(a0)
		btst	#0,$2A(a0)
		beq.s	loc_178AE
		neg.w	d0
		moveq	#-$80,d1

loc_178AE:
		move.w	d0,$18(a0)
		move.b	d1,$25(a0)
		move.w	#0,$26(a0)
		move.b	#0,(__u_F74E).w
		bset	#1,(__u_F74E).w
		bsr.w	sub_16FA8

locret_178CC:
					; Knux_JumpHeight+54j
		rts
; ---------------------------------------------------------------------------
; loc_178CE:
Knux_Transform:
		move.b	#1,(Super_Hyper_palette_status).w	; set Super/Hyper palette status to 'fading'
		move.b	#$F,(Palette_timer).w
		move.w	#60,(Super_Hyper_frame_count).w
		move.b	#$81,object_control(a0)
		move.b	#$1F,anim(a0)				; enter 'transformation' animation
		cmpi.b	#7,(Super_emerald_count).w		; does Knuckles have all 7 Super Emeralds?
		blo.s	.super					; if not, turn Super
;.hyper:
		move.b	#-1,(Super_Sonic_Knux_flag).w		; set flag to Hyper Knuckles
		move.l	#Obj_HyperSonicKnux_Trail,(Super_stars).w	; load After-Images object
		bra.s	.continue
; ---------------------------------------------------------------------------
; loc_17904:
.super:
		move.b	#1,(Super_Sonic_Knux_flag).w		; set flag to Super Knuckles
		move.l	#Obj_SuperSonicKnux_Stars,(Super_stars).w	; load Super Stars object
; loc_17912:
.continue:
		move.w	#$800,Sonic_Knux_top_speed-Sonic_Knux_top_speed(a4)
		move.w	#$18,Sonic_Knux_acceleration-Sonic_Knux_top_speed(a4)
		move.w	#$C0,Sonic_Knux_deceleration-Sonic_Knux_top_speed(a4)
		move.b	#0,invincibility_timer(a0)
		bset	#Status_Invincible,status_secondary(a0)
		moveq	#$9F,d0		; play transformation sound
		jmp	Play_Sound_2.w
	;	moveq	#$2C,d0		; play invincibility theme
	;	jmp	Play_Sound.w
; End of function Knux_JumpHeight


; =============== S U B R O U T I N E =======================================


sub_1793E:

		move.l	(Primary_collision_addr).w,(Collision_addr).w
		cmpi.b	#$C,$46(a0)
		beq.s	loc_17952
		move.l	(Secondary_collision_addr).w,(Collision_addr).w

loc_17952:
		move.b	$47(a0),d5
		move.w	$18(a0),d1
		move.w	$1A(a0),d2
		jsr	GetArcTan.w
		subi.b	#$20,d0
		andi.b	#$C0,d0
		cmpi.b	#$40,d0
		beq.w	loc_179DA
		cmpi.b	#$80,d0
		beq.w	loc_17A62
		cmpi.b	#$C0,d0
		beq.w	loc_17AB0
		jsr	CheckLeftWallDist.w
		tst.w	d1
		bpl.s	loc_1799C
		sub.w	d1,$10(a0)
		move.w	#0,$18(a0)
		bset	#5,(__u_F74E).w

loc_1799C:
		jsr	CheckRightWallDist.w
		tst.w	d1
		bpl.s	loc_179B4
		add.w	d1,$10(a0)
		move.w	#0,$18(a0)
		bset	#5,(__u_F74E).w

loc_179B4:
		bsr.w	sub_11FD6
		tst.w	d1
		bpl.s	locret_179D8
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_179C4
		neg.w	d1

loc_179C4:
		add.w	d1,$14(a0)
		move.b	d3,$26(a0)
		move.w	#0,$1A(a0)
		bclr	#1,(__u_F74E).w

locret_179D8:
		rts
; ---------------------------------------------------------------------------

loc_179DA:
		jsr	CheckLeftWallDist.w
		tst.w	d1
		bpl.s	loc_179F2
		sub.w	d1,$10(a0)
		move.w	#0,$18(a0)
		bset	#5,(__u_F74E).w

loc_179F2:
		bsr.w	sub_11FEE
		tst.w	d1
		bpl.s	loc_17A36
		neg.w	d1
		cmpi.w	#$14,d1
		bhs.s	loc_17A1C
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_17A0A
		neg.w	d1

loc_17A0A:
		add.w	d1,$14(a0)
		tst.w	$1A(a0)
		bpl.s	locret_17A1A
		move.w	#0,$1A(a0)

locret_17A1A:
		rts
; ---------------------------------------------------------------------------

loc_17A1C:
		jsr	CheckRightWallDist.w
		tst.w	d1
		bpl.s	locret_17A34
		add.w	d1,$10(a0)
		move.w	#0,$18(a0)
		bset	#5,(__u_F74E).w

locret_17A34:
		rts
; ---------------------------------------------------------------------------

loc_17A36:
		tst.w	$1A(a0)
		bmi.s	locret_17A60
		bsr.w	sub_11FD6
		tst.w	d1
		bpl.s	locret_17A60
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_17A4C
		neg.w	d1

loc_17A4C:
		add.w	d1,$14(a0)
		move.b	d3,$26(a0)
		move.w	#0,$1A(a0)
		bclr	#1,(__u_F74E).w

locret_17A60:

		rts
; ---------------------------------------------------------------------------

loc_17A62:
		jsr	CheckLeftWallDist.w
		tst.w	d1
		bpl.s	loc_17A7A
		sub.w	d1,$10(a0)
		move.w	#0,$18(a0)
		bset	#5,(__u_F74E).w

loc_17A7A:
		jsr	CheckRightWallDist.w
		tst.w	d1
		bpl.s	loc_17A94
		add.w	d1,$10(a0)
		move.w	#0,$18(a0)
		bset	#5,(__u_F74E).w

loc_17A94:
		bsr.w	sub_11FEE
		tst.w	d1
		bpl.s	locret_17AAE
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_17AA4
		neg.w	d1

loc_17AA4:
		sub.w	d1,$14(a0)
		move.w	#0,$1A(a0)

locret_17AAE:
		rts
; ---------------------------------------------------------------------------

loc_17AB0:
		jsr	CheckRightWallDist.w
		tst.w	d1
		bpl.s	loc_17ACA
		add.w	d1,$10(a0)
		move.w	#0,$18(a0)
		bset	#5,(__u_F74E).w

loc_17ACA:
		bsr.w	sub_11FEE
		tst.w	d1
		bpl.s	loc_17AEC
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_17ADA
		neg.w	d1

loc_17ADA:
		sub.w	d1,$14(a0)
		tst.w	$1A(a0)
		bpl.s	locret_17AEA
		move.w	#0,$1A(a0)

locret_17AEA:
		rts
; ---------------------------------------------------------------------------

loc_17AEC:
		tst.w	$1A(a0)
		bmi.s	locret_17B16
		bsr.w	sub_11FD6
		tst.w	d1
		bpl.s	locret_17B16
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_17B02
		neg.w	d1

loc_17B02:
		add.w	d1,$14(a0)
		move.b	d3,$26(a0)
		move.w	#0,$1A(a0)
		bclr	#1,(__u_F74E).w

locret_17B16:

		rts
; End of function sub_1793E

; ---------------------------------------------------------------------------

; Some unused code
;Knux_TouchFloor_Check_Spindash:
		tst.b	$3D(a0)
		bne.s	loc_17B6A
		move.b	#0,$20(a0)
; End of function Knux_TouchFloor_Check_Spindash


; =============== S U B R O U T I N E =======================================

; sub_17B24:
Knux_TouchFloor:
		move.b	$1E(a0),d0
		move.b	$44(a0),$1E(a0)
		move.b	$45(a0),$1F(a0)
		btst	#2,$2A(a0)
		beq.s	loc_17B6A
		bclr	#2,$2A(a0)
		move.b	#0,$20(a0)
		sub.b	$44(a0),d0
		ext.w	d0
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_17B56
		neg.w	d0

loc_17B56:
		move.w	d0,-(sp)
		move.b	$26(a0),d0
		addi.b	#$40,d0
		bpl.s	loc_17B64
		neg.w	(sp)

loc_17B64:
		move.w	(sp)+,d0
		add.w	d0,$14(a0)

loc_17B6A:

		bclr	#1,$2A(a0)
		bclr	#5,$2A(a0)
		bclr	#4,$2A(a0)
		move.b	#0,$40(a0)
		move.w	#0,(Chain_bonus_counter).w
		move.b	#0,$27(a0)
		move.b	#0,$2D(a0)
		move.b	#0,$30(a0)
		move.b	#0,$39(a0)
		move.b	#0,$2F(a0)
		cmpi.b	#$20,$20(a0)
		blo.s	locret_17BB4
		move.b	#0,$20(a0)

locret_17BB4:
		rts
; End of function Knux_TouchFloor

; ---------------------------------------------------------------------------

loc_17BB6:
		tst.b	(Debug_mode_flag).w
		beq.s	loc_17BD0
		btst	#4,(Ctrl_1_pressed).w
		beq.s	loc_17BD0
		st	(Debug_On).w
		clr.b	(Ctrl_1_locked).w
		rts
; ---------------------------------------------------------------------------

loc_17BD0:

		jsr	MoveSprite_TestGravity2.w
		addi.w	#$30,$1A(a0)
		btst	#6,$2A(a0)
		beq.s	loc_17BEA
		subi.w	#$20,$1A(a0)

loc_17BEA:
		cmpi.w	#-$100,(Camera_min_Y_pos).w
		bne.s	loc_17BFA
		move.w	(Screen_Y_wrap_value).w,d0
		and.w	d0,$14(a0)

loc_17BFA:
		bsr.w	sub_17C10
		bsr.w	Player_LevelBound
		bsr.w	Sonic_RecordPos
		bsr.w	sub_17D1E
		jmp	Draw_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_17C10:
		tst.b	(Border_Bottom_Death).w
		bne.s	loc_17C3C
		tst.b	(Reverse_gravity_flag).w
		bne.s	loc_17C2E
		move.w	(Camera_max_Y_pos).w,d0
		addi.w	#$E0,d0
		cmp.w	$14(a0),d0
		blt.w	loc_17C82
		bra.s	loc_17C3C
; ---------------------------------------------------------------------------

loc_17C2E:
		move.w	(Camera_min_Y_pos).w,d0
		cmp.w	$14(a0),d0
		blt.s	loc_17C3C
		bra.w	loc_17C82
; ---------------------------------------------------------------------------

loc_17C3C:

		movem.l	a4-a6,-(sp)
		bsr.w	SonicKnux_DoLevelCollision
		movem.l	(sp)+,a4-a6
		btst	#1,$2A(a0)
		bne.s	locret_17C80
		moveq	#0,d0
		move.w	d0,$1A(a0)
		move.w	d0,$18(a0)
		move.w	d0,$1C(a0)
		move.b	d0,$2E(a0)
		move.b	#0,$20(a0)
		move.w	#prio(2),8(a0)
		move.b	#2,5(a0)
		move.b	#$78,$34(a0)
		move.b	#0,$3D(a0)

locret_17C80:
		rts
; ---------------------------------------------------------------------------

loc_17C82:

		jmp	(Kill_Character).l
; End of function sub_17C10

; ---------------------------------------------------------------------------

loc_17C88:
		tst.b	(Debug_mode_flag).w
		beq.s	loc_17CA2
		btst	#4,(Ctrl_1_pressed).w
		beq.s	loc_17CA2
		st	(Debug_On).w
		clr.b	(Ctrl_1_locked).w
		rts
; ---------------------------------------------------------------------------

loc_17CA2:

		bsr.w	sub_123C2
		jsr	MoveSprite_TestGravity.w
		bsr.w	Sonic_RecordPos
		bsr.w	sub_17D1E
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_17CBA:
		tst.w	$3E(a0)
		beq.s	locret_17CCC
		subq.w	#1,$3E(a0)
		bne.s	locret_17CCC
		st	(Restart_level_flag).w

locret_17CCC:

		rts
; ---------------------------------------------------------------------------

loc_17CCE:
		tst.w	(Camera_RAM).w
		bne.s	loc_17CE0
		tst.w	(V_scroll_amount).w
		bne.s	loc_17CE0
		move.b	#2,5(a0)

loc_17CE0:

		bsr.w	sub_17D1E
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_17CEA:
		tst.b	(Debug_mode_flag).w
		beq.s	loc_17D04
		btst	#4,(Ctrl_1_pressed).w
		beq.s	loc_17D04
		st	(Debug_On).w
		clr.b	(Ctrl_1_locked).w
		rts
; ---------------------------------------------------------------------------

loc_17D04:

		jsr	MoveSprite_TestGravity2.w
		addi.w	#$10,$1A(a0)
		bsr.w	Sonic_RecordPos
		bsr.w	sub_17D1E
		jmp	Draw_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_17D1E:

		bsr.s	Animate_Knuckles
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_17D2C
		eori.b	#2,4(a0)

loc_17D2C:
		bra.w	Knuckles_Load_PLC
; End of function sub_17D1E


; =============== S U B R O U T I N E =======================================


Animate_Knuckles:
		lea	(AniKnuckles).l,a1
		moveq	#0,d0
		move.b	$20(a0),d0
		cmp.b	$21(a0),d0
		beq.s	loc_17D58
		move.b	d0,$21(a0)
		move.b	#0,$23(a0)
		move.b	#0,$24(a0)
		bclr	#5,$2A(a0)

loc_17D58:
		add.w	d0,d0
		adda.w	(a1,d0.w),a1
		move.b	(a1),d0
		bmi.s	loc_17DC8
		move.b	$2A(a0),d1
		andi.b	#1,d1
		andi.b	#-4,4(a0)
		or.b	d1,4(a0)
		subq.b	#1,$24(a0)
		bpl.s	locret_17D96
		move.b	d0,$24(a0)

loc_17D7E:
					; Animate_Knuckles+1C0j
		moveq	#0,d1
		move.b	$23(a0),d1
		move.b	1(a1,d1.w),d0
		cmpi.b	#-4,d0
		bhs.s	loc_17D98

loc_17D8E:
					; Animate_Knuckles+8Aj
		move.b	d0,$22(a0)
		addq.b	#1,$23(a0)

locret_17D96:
					; Animate_Knuckles+16Aj ...
		rts
; ---------------------------------------------------------------------------

loc_17D98:
		addq.b	#1,d0
		bne.s	loc_17DA8
		move.b	#0,$23(a0)
		move.b	1(a1),d0
		bra.s	loc_17D8E
; ---------------------------------------------------------------------------

loc_17DA8:
		addq.b	#1,d0
		bne.s	loc_17DBC
		move.b	2(a1,d1.w),d0
		sub.b	d0,$23(a0)
		sub.b	d0,d1
		move.b	1(a1,d1.w),d0
		bra.s	loc_17D8E
; ---------------------------------------------------------------------------

loc_17DBC:
		addq.b	#1,d0
		bne.s	locret_17DC6
		move.b	2(a1,d1.w),$20(a0)

locret_17DC6:
		rts
; ---------------------------------------------------------------------------

loc_17DC8:
		addq.b	#1,d0
		bne.w	loc_17E84
		moveq	#0,d0
		tst.b	$2D(a0)
		bmi.w	loc_127C0
		move.b	$27(a0),d0
		bne.w	loc_127C0
		moveq	#0,d1
		move.b	$26(a0),d0
		bmi.s	loc_17DEC
		beq.s	loc_17DEC
		subq.b	#1,d0

loc_17DEC:
					; Animate_Knuckles+B8j
		move.b	$2A(a0),d2
		andi.b	#1,d2
		bne.s	loc_17DF8
		not.b	d0

loc_17DF8:
		addi.b	#$10,d0
		bpl.s	loc_17E00
		moveq	#3,d1

loc_17E00:
		andi.b	#-4,4(a0)
		eor.b	d1,d2
		or.b	d2,4(a0)
		btst	#5,$2A(a0)
		bne.w	loc_17ECC
		lsr.b	#4,d0
		andi.b	#6,d0
		move.w	$1C(a0),d2
		bpl.s	loc_17E24
		neg.w	d2

loc_17E24:
		tst.b	$2B(a0)
		bpl.w	loc_17E2E
		add.w	d2,d2

loc_17E2E:
		lea	(byte_17F48).l,a1
		cmpi.w	#$600,d2
		bhs.s	loc_17E42
		lea	(byte_17F3E).l,a1
		add.b	d0,d0

loc_17E42:
		add.b	d0,d0
		move.b	d0,d3
		moveq	#0,d1
		move.b	$23(a0),d1
		move.b	1(a1,d1.w),d0
		cmpi.b	#-1,d0
		bne.s	loc_17E60
		move.b	#0,$23(a0)
		move.b	1(a1),d0

loc_17E60:
		move.b	d0,$22(a0)
		add.b	d3,$22(a0)
		subq.b	#1,$24(a0)
		bpl.s	locret_17E82
		neg.w	d2
		addi.w	#$800,d2
		bpl.s	loc_17E78
		moveq	#0,d2

loc_17E78:
		lsr.w	#8,d2
		move.b	d2,$24(a0)
		addq.b	#1,$23(a0)

locret_17E82:
		rts
; ---------------------------------------------------------------------------

loc_17E84:
		move.b	$2A(a0),d1
		andi.b	#1,d1
		andi.b	#-4,4(a0)
		or.b	d1,4(a0)
		subq.b	#1,$24(a0)
		bpl.w	locret_17D96
		move.w	$1C(a0),d2
		bpl.s	loc_17EA6
		neg.w	d2

loc_17EA6:
		lea	(byte_17F5C).l,a1
		cmpi.w	#$600,d2
		bhs.s	loc_17EB8
		lea	(byte_17F52).l,a1

loc_17EB8:
		neg.w	d2
		addi.w	#$400,d2
		bpl.s	loc_17EC2
		moveq	#0,d2

loc_17EC2:
		lsr.w	#8,d2
		move.b	d2,$24(a0)
		bra.w	loc_17D7E
; ---------------------------------------------------------------------------

loc_17ECC:
		subq.b	#1,$24(a0)
		bpl.w	locret_17D96
		move.w	$1C(a0),d2
		bmi.s	loc_17EDC
		neg.w	d2

loc_17EDC:
		addi.w	#$800,d2
		bpl.s	loc_17EE4
		moveq	#0,d2

loc_17EE4:
		lsr.w	#8,d2
		move.b	d2,$24(a0)
		lea	(byte_17F66).l,a1
		bra.w	loc_17D7E
; End of function Animate_Knuckles

; ---------------------------------------------------------------------------
AniKnuckles:	include "General/Sprites/Knuckles/Anim - Knuckles.asm"


; =============== S U B R O U T I N E =======================================


Knuckles_Load_PLC:

		moveq	#0,d0
		move.b	$22(a0),d0

Knuckles_Load_PLC2:
		cmp.b	(Sonic_Knux_Mapnum).w,d0
		beq.s	locret_18162
		move.b	d0,(Sonic_Knux_Mapnum).w
		move.w	#$D000,d4

loc_18122:
		lea	(PLC_Knuckles).l,a2
		add.w	d0,d0
		adda.w	(a2,d0.w),a2
		move.w	(a2)+,d5
		subq.w	#1,d5
		bmi.s	locret_18162
		move.l	#ArtUnc_Knux,d6

loc_1813A:
		moveq	#0,d1
		move.w	(a2)+,d1
		move.w	d1,d3
		lsr.w	#8,d3
		andi.w	#$F0,d3
		addi.w	#$10,d3
		andi.w	#$FFF,d1
		lsl.l	#5,d1
		add.l	d6,d1
		move.w	d4,d2
		add.w	d3,d4
		add.w	d3,d4
		jsr	Add_To_DMA_Queue.w
		dbf	d5,loc_1813A

locret_18162:
					; Knuckles_Load_PLC+24j
		rts
; End of function Knuckles_Load_PLC

; ---------------------------------------------------------------------------

Obj_Air_CountDown:

		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_18172(pc,d0.w),d1
		jmp	off_18172(pc,d1.w)
; ---------------------------------------------------------------------------
off_18172:	dc.w loc_18184-off_18172

		dc.w loc_181DC-off_18172
		dc.w loc_181E8-off_18172
		dc.w loc_18254-off_18172
		dc.w loc_1826C-off_18172
		dc.w Player_TestAirTimer-off_18172
		dc.w loc_18272-off_18172
		dc.w loc_182B2-off_18172
		dc.w loc_1826C-off_18172
; ---------------------------------------------------------------------------

loc_18184:
		addq.b	#2,5(a0)
		move.l	#Map_Bubbler,$C(a0)
		tst.b	$43(a0)
		beq.s	loc_1819E
		move.l	#Map_Bubbler2,$C(a0)

loc_1819E:
		move.w	#$45C,$A(a0)
		move.b	#-$7C,4(a0)
		move.b	#$10,7(a0)
		move.w	#prio(1),8(a0)
		move.b	$2C(a0),d0
		bpl.s	loc_181CC
		addq.b	#8,5(a0)
		andi.w	#$7F,d0
		move.b	d0,$37(a0)
		bra.w	Player_TestAirTimer
; ---------------------------------------------------------------------------

loc_181CC:
		move.b	d0,$20(a0)
		move.w	$10(a0),$34(a0)
		move.w	#-$100,$1A(a0)

loc_181DC:
		lea	(Ani_Shields).l,a1
		jsr	Animate_Sprite.w

loc_181E8:
		move.w	(Water_level).w,d0
		cmp.w	$14(a0),d0
		blo.s	loc_1820E
		move.b	#6,5(a0)
		addq.b	#7,$20(a0)
		cmpi.b	#$D,$20(a0)
		beq.s	loc_18254
		bcs.s	loc_18254
		move.b	#$D,$20(a0)
		bra.s	loc_18254
; ---------------------------------------------------------------------------

loc_1820E:
		tst.w	(WindTunnel_flag).w
		beq.s	loc_18218
		addq.w	#4,$34(a0)

loc_18218:
		move.b	$26(a0),d0
		addq.b	#1,$26(a0)
		andi.w	#$7F,d0
		lea	(byte_1831E).l,a1
		move.b	(a1,d0.w),d0
		ext.w	d0
		add.w	$34(a0),d0
		move.w	d0,$10(a0)
		bsr.w	sub_182D2
		jsr	MoveSprite2.w
		tst.b	4(a0)
		bpl.s	loc_1826C
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_18254:

		bsr.s	sub_182D2
		lea	(Ani_Shields).l,a1
		jsr	Animate_Sprite.w
		bsr.w	AirCountdown_Load_Art
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_1826C:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_18272:
		movea.l	$40(a0),a2
		cmpi.b	#$C,$2C(a2)
		bhi.s	loc_1826C
		subq.w	#1,$3C(a0)
		bne.s	loc_18290
		move.b	#$E,5(a0)
		addq.b	#7,$20(a0)
		bra.s	loc_18254
; ---------------------------------------------------------------------------

loc_18290:
		lea	(Ani_Shields).l,a1
		jsr	Animate_Sprite.w
		bsr.w	AirCountdown_Load_Art
		tst.b	4(a0)
		bpl.s	loc_1826C
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_182B2:
		movea.l	$40(a0),a2
		cmpi.b	#$C,$2C(a2)
		bhi.s	loc_1826C
		bsr.s	sub_182D2
		lea	(Ani_Shields).l,a1
		jsr	Animate_Sprite.w
		jmp	Draw_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_182D2:

		tst.w	$3C(a0)
		beq.s	locret_1831C
		subq.w	#1,$3C(a0)
		bne.s	locret_1831C
		cmpi.b	#7,$20(a0)
		bhs.s	locret_1831C
		move.w	#$F,$3C(a0)
		clr.w	$1A(a0)
		move.b	#-$80,4(a0)
		move.w	$10(a0),d0
		sub.w	(Camera_X_pos).w,d0
		addi.w	#$80,d0
		move.w	d0,$10(a0)
		move.w	$14(a0),d0
		sub.w	(Camera_Y_pos).w,d0
		addi.w	#$80,d0
		move.w	d0,$14(a0)
		move.b	#$C,5(a0)

locret_1831C:
		rts
; End of function sub_182D2

; ---------------------------------------------------------------------------
byte_1831E:	dc.b	0,   0,	  0,   0,   0,	 0,   1,   1,	1,   1,	  1,   2,   2,	 2,   2,   2


		dc.b	2,   2,	  3,   3,   3,	 3,   3,   3,	3,   3,	  3,   3,   3,	 3,   3,   3
		dc.b	3,   3,	  3,   3,   3,	 3,   3,   3,	3,   3,	  3,   3,   3,	 3,   3,   2
		dc.b	2,   2,	  2,   2,   2,	 2,   1,   1,	1,   1,	  1,   0,   0,	 0,   0,   0
		dc.b	0, $FF,	$FF, $FF, $FF, $FF, $FE, $FE, $FE, $FE,	$FE, $FD, $FD, $FD, $FD, $FD
		dc.b  $FD, $FD,	$FC, $FC, $FC, $FC, $FC, $FC, $FC, $FC,	$FC, $FC, $FC, $FC, $FC, $FC
		dc.b  $FC, $FC,	$FC, $FC, $FC, $FC, $FC, $FC, $FC, $FC,	$FC, $FC, $FC, $FC, $FC, $FD
		dc.b  $FD, $FD,	$FD, $FD, $FD, $FD, $FE, $FE, $FE, $FE,	$FE, $FF, $FF, $FF, $FF, $FF
		dc.b	0,   0,	  0,   0,   0,	 0,   1,   1,	1,   1,	  1,   2,   2,	 2,   2,   2
		dc.b	2,   2,	  3,   3,   3,	 3,   3,   3,	3,   3,	  3,   3,   3,	 3,   3,   3
		dc.b	3,   3,	  3,   3,   3,	 3,   3,   3,	3,   3,	  3,   3,   3,	 3,   3,   2
		dc.b	2,   2,	  2,   2,   2,	 2,   1,   1,	1,   1,	  1,   0,   0,	 0,   0,   0
		dc.b	0, $FF,	$FF, $FF, $FF, $FF, $FE, $FE, $FE, $FE,	$FE, $FD, $FD, $FD, $FD, $FD
		dc.b  $FD, $FD,	$FC, $FC, $FC, $FC, $FC, $FC, $FC, $FC,	$FC, $FC, $FC, $FC, $FC, $FC
		dc.b  $FC, $FC,	$FC, $FC, $FC, $FC, $FC, $FC, $FC, $FC,	$FC, $FC, $FC, $FC, $FC, $FD
		dc.b  $FD, $FD,	$FD, $FD, $FD, $FD, $FE, $FE, $FE, $FE,	$FE, $FF, $FF, $FF, $FF, $FF

; =============== S U B R O U T I N E =======================================


AirCountdown_Load_Art:

		moveq	#0,d1
		move.b	$22(a0),d1
		cmpi.b	#9,d1
		blo.s	locret_18464
		cmpi.b	#$13,d1
		bhs.s	locret_18464
		cmp.b	$32(a0),d1
		beq.s	locret_18464
		move.b	d1,$32(a0)
		subi.w	#9,d1
		move.w	d1,d0
		add.w	d1,d1
		add.w	d0,d1
		lsl.w	#6,d1
		addi.l	#ArtUnc_AirCountDown,d1
		move.w	#-$400,d2
		tst.b	$43(a0)
		beq.s	loc_1845A
		move.w	#-$200,d2

loc_1845A:
		move.w	#$60,d3
		jsr	Add_To_DMA_Queue.w

locret_18464:
					; AirCountdown_Load_Art+10j ...
		rts
; End of function AirCountdown_Load_Art

; ---------------------------------------------------------------------------

Player_TestAirTimer:

		movea.l	$40(a0),a2
		tst.w	$30(a0)
		bne.w	loc_1857C
		cmpi.b	#6,5(a2)
		bhs.w	locret_18680
		btst	#6,$2B(a2)
		bne.w	locret_18680
		tst.b	(Super_Sonic_Knux_flag).w
		bmi.w	locret_18680
		btst	#6,$2A(a2)
		beq.w	locret_18680
		subq.w	#1,$3C(a0)
		bpl.w	loc_18594
		move.w	#$3B,$3C(a0)
		move.w	#1,$3A(a0)
		jsr	Random_Number.w
		andi.w	#1,d0
		move.b	d0,$38(a0)
		moveq	#0,d0
		move.b	$2C(a2),d0
		cmpi.w	#$19,d0
		beq.s	loc_184FC
		cmpi.w	#$14,d0
		beq.s	loc_184FC
		cmpi.w	#$F,d0
		beq.s	loc_184FC
		cmpi.w	#$C,d0
		bhi.s	loc_1850A
		bne.s	loc_184E8
		jsr	CheckRightMusicTrack.w

loc_184E8:

		subq.b	#1,$36(a0)
		bpl.s	loc_1850A
		move.b	$37(a0),$36(a0)
		bset	#7,$3A(a0)
		bra.s	loc_1850A
; ---------------------------------------------------------------------------

loc_184FC:
		moveq	#-$57,d0
		jsr	Play_Sound_2.w

loc_1850A:

		subq.b	#1,$2C(a2)
		bcc.w	loc_18592
		move.b	#-$7F,$2E(a2)
		move.w	#$3B,d0
		jsr	Play_Sound_2.w
		move.b	#$A,$38(a0)
		move.w	#1,$3A(a0)
		move.w	#$78,$30(a0)
		movea.l	a2,a1
		bsr.w	Player_ResetAirTimer
		move.l	a0,-(sp)
		movea.l	a2,a0
		bsr.w	Player_TouchFloor
		move.b	#$17,$20(a0)
		bset	#1,$2A(a0)
		bset	#7,$A(a0)
		move.w	#0,$1A(a0)
		move.w	#0,$18(a0)
		move.w	#0,$1C(a0)
		move.b	#6,5(a0)

		or.b	#1,Update_HUD_Score.w
		lea	Score.w,a1		; NAT: Add score when drowning
		cmp.w	#Player_1,a0
		bne.s	.foundpl
		addq.w	#1,a1

.foundpl	addq.b	#1,(a1)
		cmp.b	#99,(a1)
		bls.s	.gotscore
		subq.b	#1,(a1)
.gotscore	movea.l	(sp)+,a0

locret_1857A:
		rts
; ---------------------------------------------------------------------------

loc_1857C:
		cmp.b	#6,5(a2)	; NAT: Check if still dead
		blt.s	.notded		; if no ,branch

		move.b	#$17,$20(a2)
		subq.w	#1,$30(a0)
		bne.s	loc_18590
.notded		clr.w	$30(a0)		; NAT: Reset delay
	;	move.b	#6,5(a2)
		rts
; ---------------------------------------------------------------------------

loc_18590:
		bra.s	loc_18594
; ---------------------------------------------------------------------------

loc_18592:
		bra.s	loc_185A4
; ---------------------------------------------------------------------------

loc_18594:

		tst.w	$3A(a0)
		beq.w	locret_18680
		subq.w	#1,$3E(a0)
		bpl.w	locret_18680

loc_185A4:
		jsr	Random_Number.w
		andi.w	#$F,d0
		addq.w	#8,d0
		move.w	d0,$3E(a0)
		jsr	Create_New_Sprite.w
		bne.w	locret_18680
		move.l	(a0),(a1)
		move.w	$10(a2),$10(a1)
		moveq	#6,d0
		btst	#0,$2A(a2)
		beq.s	loc_185D8
		neg.w	d0
		move.b	#$40,$26(a1)

loc_185D8:
		add.w	d0,$10(a1)
		move.w	$14(a2),$14(a1)
		move.l	$40(a0),$40(a1)
		move.b	#6,$2C(a1)
		tst.w	$30(a0)
		beq.w	loc_1862A
		andi.w	#7,$3E(a0)
		addi.w	#0,$3E(a0)
		move.w	$14(a2),d0
		subi.w	#$C,d0
		move.w	d0,$14(a1)
		jsr	Random_Number.w
		move.b	d0,$26(a1)
		move.w	(Level_frame_counter).w,d0
		andi.b	#3,d0
		bne.s	loc_18676
		move.b	#$E,$2C(a1)
		bra.s	loc_18676
; ---------------------------------------------------------------------------

loc_1862A:
		btst	#7,$3A(a0)
		beq.s	loc_18676
		moveq	#0,d2
		move.b	$2C(a2),d2
		cmpi.b	#$C,d2
		bhs.s	loc_18676
		lsr.w	#1,d2
		jsr	Random_Number.w
		andi.w	#3,d0
		bne.s	loc_1865E
		bset	#6,$3A(a0)
		bne.s	loc_18676
		move.b	d2,$2C(a1)
		move.w	#$1C,$3C(a1)

loc_1865E:
		tst.b	$38(a0)
		bne.s	loc_18676
		bset	#6,$3A(a0)
		bne.s	loc_18676
		move.b	d2,$2C(a1)
		move.w	#$1C,$3C(a1)

loc_18676:

		subq.b	#1,$38(a0)
		bpl.s	locret_18680
		clr.w	$3A(a0)

locret_18680:

		rts

; =============== S U B R O U T I N E =======================================


Player_ResetAirTimer:
		move.b	#$1E,$2C(a1)
		jmp	CheckRightMusicTrack.w

; ---------------------------------------------------------------------------
Ani_Shields:	include "General/Sprites/Shields/Anim - Shields.asm"

off_187DE:
		dc.l byte_189ED
		dc.w $B
		dc.l byte_18A02
		dc.w $160D
		dc.l byte_18A1B
		dc.w $2C0D
; ---------------------------------------------------------------------------

Obj_Invincibility:
		jsr	Shield_Get_Settings(pc)		; NAT: Get settings for shields
		move.w	vram_art(a0),d2			; vram_art is the VRAM location (full)
		tst.b	(End_Of_Level_Flag).w			; check if title card is showing
		bne.s	loc_1880E			; if yes, wait

		move.l	#ArtUnc_Invincibility,d1
		move.w	#$300/2,d3
		jsr	Add_To_DMA_Queue.w
		moveq	#0,d2
		lea	off_187DE-6(pc),a2
		lea	(a0),a1
		moveq	#3,d1

loc_1880E:
		move.l	#Obj_188E8,(a1)
		move.l	#Map_Invincibility,$C(a1)
		move.w	$A(a0),$A(a1)
		move.w	#prio(1),8(a1)
		move.b	#4,4(a1)
		bset	#6,4(a1)
		move.b	#$10,7(a1)
		move.w	#2,$16(a1)
		move.w	$42(a0),$42(a1)
		move.b	d2,$36(a1)
		addq.w	#1,d2
		move.l	(a2)+,$30(a1)
		move.w	(a2)+,$34(a1)
		lea	next_object(a1),a1
		dbf	d1,loc_1880E
		move.l	#loc_18868,(a0)
		move.b	#4,$34(a0)

loc_18868:
		movea.w	$42(a0),a1
		btst	#1,$2B(a1)
		beq.s	J_Delete_Current_Sprite
		cmpi.b	#6,routine(a1)		; Is player dead?
		bhi.w	locret_1899E		; If so, do not display and do not update variables

		move.w	$10(a1),d0
		move.w	d0,$10(a0)
		move.w	$14(a1),d1
		move.w	d1,$14(a0)

		and.w	#$7FFF,$A(a0)		; set to low plane
		tst.w	$A(a1)			; NAT: Check if player is hi plane
		bpl.s	.lowpl			; branch if not
		or.w	#$8000,$A(a0)		; set to hi plane

.lowpl		lea	$18(a0),a2
		lea	byte_189E0(pc),a3
		moveq	#0,d5

loc_188A0:
		move.w	$38(a0),d2
		move.b	(a3,d2.w),d5
		bpl.s	loc_188B0
		clr.w	$38(a0)
		bra.s	loc_188A0
; ---------------------------------------------------------------------------

loc_188B0:
		addq.w	#1,$38(a0)
		lea	word_189A0(pc),a6
		move.b	$34(a0),d6
		jsr	sub_1898A(pc)
		move.w	d2,(a2)+
		move.w	d3,(a2)+
		move.w	d5,(a2)+
		addi.w	#$20,d6
		jsr	sub_1898A(pc)
		move.w	d2,(a2)+
		move.w	d3,(a2)+
		move.w	d5,(a2)+
		moveq	#$12,d0
		btst	#0,$2A(a1)
		beq.s	loc_188E0
		neg.w	d0

loc_188E0:
		add.b	d0,$34(a0)
		jmp	Obj_Shield_Display(pc)

J_Delete_Current_Sprite:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

Obj_188E8:
		movea.w	$42(a0),a1
		btst	#1,$2B(a1)
		beq.s	J_Delete_Current_Sprite
		cmpi.b	#6,routine(a1)		; Is player dead?
		bhi.w	locret_1899E		; If so, do not display and do not update variables

		lea	(Pos_table_index).w,a5
		lea	(Pos_table).w,a6

		cmp.w	#Player_1,a1
		beq.s	.sonic
		lea	(Pos_table_index_P2).w,a5
		lea	(Pos_table_P2).w,a6

.sonic		move.b	$36(a0),d1
		lsl.b	#2,d1
		move.w	d1,d2
		add.w	d1,d1
		add.w	d2,d1
		move.w	(a5),d0
		sub.b	d1,d0
		lea	(a6,d0.w),a2
		move.w	(a2)+,d0
		move.w	(a2)+,d1
		move.w	d0,$10(a0)
		move.w	d1,$14(a0)
		lea	$18(a0),a2
		movea.l	$30(a0),a3

loc_18936:
		move.w	$38(a0),d2
		move.b	(a3,d2.w),d5
		bpl.s	loc_18946
		clr.w	$38(a0)
		bra.s	loc_18936
; ---------------------------------------------------------------------------

loc_18946:
		swap	d5
		add.b	$35(a0),d2
		move.b	(a3,d2.w),d5
		addq.w	#1,$38(a0)
		lea	word_189A0(pc),a6
		move.b	$34(a0),d6
		jsr	sub_1898A(pc)
		move.w	d2,(a2)+
		move.w	d3,(a2)+
		move.w	d5,(a2)+
		addi.w	#$20,d6
		swap	d5
		jsr	sub_1898A(pc)
		move.w	d2,(a2)+
		move.w	d3,(a2)+
		move.w	d5,(a2)+
		moveq	#2,d0
		btst	#0,$2A(a1)
		beq.s	loc_18982
		neg.w	d0

loc_18982:
		add.b	d0,$34(a0)
		and.w	#$7FFF,$A(a0)		; set to low plane
		tst.w	$A(a1)			; NAT: Check if player is hi plane
		bpl.s	.lowpl			; branch if not
		or.w	#$8000,$A(a0)		; set to hi plane

.lowpl		jmp	Obj_Shield_Display(pc)

; =============== S U B R O U T I N E =======================================

sub_1898A:
		andi.w	#$3E,d6
		move.b	(a6,d6.w),d2
		move.b	1(a6,d6.w),d3
		ext.w	d2
		ext.w	d3
		add.w	d0,d2
		add.w	d1,d3

locret_1899E:
		rts

; ---------------------------------------------------------------------------
word_189A0:	dc.w   $F00,  $F03,  $E06,  $D08,  $B0B,  $80D,	 $60E,	$30F,	$10, $FC0F, $F90E, $F70D, $F40B, $F208,	$F106, $F003


		dc.w  $F000, $F0FC, $F1F9, $F2F7, $F4F4, $F7F2,	$F9F1, $FCF0, $FFF0,  $3F0,  $6F1,  $8F2,  $BF4,  $DF7,	 $EF9,	$FFC
byte_189E0:	dc.b	8,   5,	  7,   6,   6,	 7,   5,   8,	6,   7,	  7,   6, $FF

byte_189ED:	dc.b    8,   7,   6,   5,   4,   3,   4,   5,   6,   7, $FF,   3,   4,   5,   6,   7,   8,   7,   6,   5
		dc.b    4

byte_18A02:	dc.b    8,   7,   6,   5,   4,   3,   2,   3,   4,   5,   6,   7, $FF,   2,   3,   4,   5,   6,   7,   8
		dc.b    7,   6,   5,   4,   3

byte_18A1B:	dc.b    7,   6,   5,   4,   3,   2,   1,   2,   3,   4,   5,   6, $FF,   1,   2,   3,   4,   5,   6,   7
		dc.b    6,   5,   4,   3,   2

Ani_Shield_S2:	include "General/Sprites/Shields/Anim - Shield S2.asm"

Map_Shield_S2:	include "General/Sprites/Shields/Map - Shield S2.asm"

Map_Invincibility:include "General/Sprites/Shields/Map - Invincibility.asm"

; ---------------------------------------------------------------------------

Obj_DashDust:
					; SpawnLevelMainSprites_SpawnPlayers+98o ...
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_18B4C(pc,d0.w),d1
		jmp	off_18B4C(pc,d1.w)
; ---------------------------------------------------------------------------
off_18B4C:	dc.w loc_18B54-off_18B4C

		dc.w loc_18BAA-off_18B4C; 1
		dc.w loc_18CB2-off_18B4C; 2
		dc.w loc_18CB6-off_18B4C; 3
; ---------------------------------------------------------------------------

loc_18B54:
		addq.b	#2,5(a0)
		move.l	#Map_DashDust,$C(a0)
		ori.b	#4,4(a0)
		move.w	#prio(1),8(a0)
		move.b	#$10,7(a0)
		move.w	#$7E0,$A(a0)
		move.w	#Player_1,$42(a0)
		move.w	#$FC00,$40(a0)
		cmpa.w	#$CC54,a0
		beq.s	loc_18BAA
	;	move.b	#1,$38(a0)		; NAT: Changes to disable dash dust pos change
		cmpi.w	#2,(Player_mode).w
		beq.s	loc_18BAA
		move.w	#$7F0,$A(a0)
		move.w	#Player_2,$42(a0)
		move.w	#$FE00,$40(a0)

loc_18BAA:
		movea.w	$42(a0),a2
		moveq	#0,d0
		move.b	$20(a0),d0
		add.w	d0,d0
		move.w	off_18BBE(pc,d0.w),d1
		jmp	off_18BBE(pc,d1.w)
; ---------------------------------------------------------------------------
off_18BBE:	dc.w loc_18C94-off_18BBE

		dc.w loc_18BC8-off_18BBE
		dc.w loc_18C20-off_18BBE
		dc.w loc_18C84-off_18BBE
		dc.w loc_18BEC-off_18BBE
; ---------------------------------------------------------------------------

loc_18BC8:
		move.w	(Water_level).w,$14(a0)
		tst.b	$21(a0)
		bne.w	loc_18C94
		move.w	$10(a2),$10(a0)
		move.b	#0,$2A(a0)
		andi.w	#$7FFF,$A(a0)
		bra.w	loc_18C94
; ---------------------------------------------------------------------------

loc_18BEC:
		tst.b	$21(a0)
		bne.s	loc_18C04
		move.w	$10(a2),$10(a0)
		move.b	#0,$2A(a0)
		andi.w	#$7FFF,$A(a0)

loc_18C04:
		lea	(Ani_DashSplashDrown).l,a1
		jsr	Animate_Sprite.w
		move.l	#ArtUnc_SplashDrown,d6
		bsr.w	SplashDrown_Load_DPLC
		jmp	Obj_Shield_Display(pc)
; ---------------------------------------------------------------------------

loc_18C20:
		cmpi.b	#$C,$2C(a2)
		blo.w	loc_18CAA
		cmpi.b	#4,5(a2)
		bhs.s	loc_18CAA
		tst.b	$3D(a2)
		beq.s	loc_18CAA
		move.w	$10(a2),$10(a0)
		move.w	$14(a2),$14(a0)
		move.b	$2A(a2),$2A(a0)
		andi.b	#1,$2A(a0)
	;	moveq	#4,d1
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_18C60
		ori.b	#2,$2A(a0)
	;	neg.w	d1

loc_18C60:
	;	tst.b	$38(a0)
	;	beq.s	loc_18C6A
	;	sub.w	d1,$14(a0)

loc_18C6A:
		tst.b	$21(a0)
		bne.s	loc_18C94
		andi.w	#$7FFF,$A(a0)
		tst.w	$A(a2)
		bpl.s	loc_18C94
		ori.w	#$8000,$A(a0)
		bra.s	loc_18C94
; ---------------------------------------------------------------------------

loc_18C84:
		cmpi.b	#$C,$2C(a2)
		blo.s	loc_18CAA
		btst	#6,$2A(a0)
		bne.s	loc_18CAA

loc_18C94:

		lea	(Ani_DashSplashDrown).l,a1
		jsr	Animate_Sprite.w
		bsr.w	DashDust_Load_DPLC
		jmp	Obj_Shield_Display(pc)
; ---------------------------------------------------------------------------

loc_18CAA:

		move.b	#0,$20(a0)
		rts
; ---------------------------------------------------------------------------

loc_18CB2:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_18CB6:
		movea.w	$42(a0),a2
		moveq	#$10,d1
		cmpi.b	#$D,$20(a2)
		beq.s	loc_18CE4
	;	cmpi.b	#2,$38(a2)
	;	bne.s	loc_18CD6
	;	moveq	#6,d1
	;	cmpi.b	#3,$2F(a2)
	;	beq.s	loc_18CE4

loc_18CD6:
		move.b	#2,5(a0)
		move.b	#0,$36(a0)
		rts
; ---------------------------------------------------------------------------

loc_18CE4:

		subq.b	#1,$36(a0)
		bpl.s	loc_18D66
		move.b	#3,$36(a0)
		btst	#6,$2A(a2)
		bne.s	loc_18D66
		jsr	Create_New_Sprite.w
		bne.s	loc_18D66
		move.l	(a0),(a1)
		move.w	$10(a2),$10(a1)
		move.w	$14(a2),$14(a1)
	;	tst.b	$38(a0)
	;	beq.s	loc_18D14
	;	subq.w	#4,d1

loc_18D14:
	;	tst.b	(Reverse_gravity_flag).w
	;	beq.s	loc_18D1C
	;	neg.w	d1

loc_18D1C:
		add.w	d1,$14(a1)
		move.b	#0,$2A(a1)
		move.b	#3,$20(a1)
		addq.b	#2,5(a1)
		move.l	$C(a0),$C(a1)
		move.b	4(a0),4(a1)
		move.w	#prio(1),8(a1)
		move.b	#4,7(a1)
		move.w	$A(a0),$A(a1)
		move.w	$42(a0),$42(a1)
		andi.w	#$7FFF,$A(a1)
		tst.w	$A(a2)
		bpl.s	loc_18D66
		ori.w	#$8000,$A(a1)

loc_18D66:

; =============== S U B R O U T I N E =======================================

DashDust_Load_DPLC:
		move.l	#ArtUnc_DashDust,d6

SplashDrown_Load_DPLC:
		moveq	#0,d0
		move.b	$22(a0),d0
		cmp.b	$34(a0),d0
		beq.s	locret_18DBE
		move.b	d0,$34(a0)
		lea	(DPLC_DashSplashDrown).l,a2
		add.w	d0,d0
		adda.w	(a2,d0.w),a2
		move.w	(a2)+,d5
		subq.w	#1,d5
		bmi.s	locret_18DBE
		move.w	$40(a0),d4

loc_18D96:
		moveq	#0,d1
		move.w	(a2)+,d1
		move.w	d1,d3
		lsr.w	#8,d3
		andi.w	#$F0,d3
		addi.w	#$10,d3
		andi.w	#$FFF,d1
		lsl.l	#5,d1
		add.l	d6,d1
		move.w	d4,d2
		add.w	d3,d4
		add.w	d3,d4
		jsr	Add_To_DMA_Queue.w
		dbf	d5,loc_18D96

locret_18DBE:
		rts
; ---------------------------------------------------------------------------
Ani_DashSplashDrown:include "General/Sprites/Splash Drown/Anim - Dash Splash Drown.asm"

Map_DashDust:	include "General/Sprites/Dash Dust/Map - Dash Dust.asm"

DPLC_DashSplashDrown:include "General/Sprites/Splash Drown/DPLC - Dash Splash Drown.asm"
; ---------------------------------------------------------------------------
Obj_DashDust2P:
Obj_SuperSonicKnux_Stars:
Obj_HyperSonic_Stars:
; ---------------------------------------------------------------------------

Obj_Insta_Shield:
		jsr	Shield_Get_Settings(pc)
		move.l	#Map_InstaShield,mappings(a0)
		move.l	#DPLC_InstaShield,DPLC_Address(a0)			; Used by PLCLoad_Shields
		move.l	#ArtUnc_InstaShield,Art_Address(a0)			; Used by PLCLoad_Shields
		move.b	#4,render_flags(a0)
		move.w	#prio(1),priority(a0)
		move.b	#$18,width_pixels(a0)
		move.b	#$18,height_pixels(a0)
		btst	#7,(Player_1+art_tile).w
		beq.s	.nothighpriority
		bset	#7,art_tile(a0)

.nothighpriority:
		move.w	#1,anim(a0)			; Clear anim and set prev_anim to 1
		move.b	#-1,LastLoadedDPLC(a0)		; Reset LastLoadedDPLC (used by PLCLoad_Shields)
		move.l	#Obj_Insta_Shield_Main,(a0)

Obj_Insta_Shield_Main:
		movea.w	parent(a0),a2
		btst	#Status_Invincible,status_secondary(a2) ; Is the player invincible?
		bne.s	locret_195A4			; If so, return
		cmpi.b	#6,routine(a2)				; Is player dead?
		bhi.s	locret_195A4				; If so, do not display and do not update variables

		move.w	x_pos(a2),x_pos(a0)		; Inherit player's x_pos
		move.w	y_pos(a2),y_pos(a0)		; Inherit player's y_pos
		move.b	status(a2),status(a0)		; Inherit status
		andi.b	#1,status(a0)			; Limit inheritance to 'orientation' bit
		tst.b	(Reverse_gravity_flag).w
		beq.s	.normalgravity
		ori.b	#2,status(a0)			; Reverse the vertical mirror render_flag bit (On if Off beforehand and vice versa)

.normalgravity:
		andi.w	#drawing_mask,art_tile(a0)
		tst.w	art_tile(a2)
		bpl.s	.nothighpriority
		ori.w	#high_priority,art_tile(a0)

.nothighpriority:
		lea	(Ani_InstaShield).l,a1
		jsr	Animate_Sprite.w
		cmpi.b	#7,mapping_frame(a0)		; Has it reached then end of its animation?
		bne.s	.notover			; If not, branch
		tst.b	double_jump_flag(a2)		; Is it in its attacking state?
		beq.s	.notover			; If not, branch
		move.b	#2,double_jump_flag(a2)		; Mark attack as over

.notover:
		tst.b	mapping_frame(a0)		; Is this the first frame?
		beq.s	.loadnewDPLC			; If so, branch and load the DPLC for this and the next few frames
		cmpi.b	#3,mapping_frame(a0)		; Is this the third frame?
		bne.s	.skipDPLC			; If not, branch as we don't need to load another DPLC yet
.loadnewDPLC:
		bsr.w	PLCLoad_Shields

.skipDPLC:
		jmp	Obj_Shield_Display(pc)
; ---------------------------------------------------------------------------

locret_195A4:
		rts
; ---------------------------------------------------------------------------

Obj_Fire_Shield:
		jsr	Shield_Get_Settings(pc)
		move.l	#Map_FireShield,mappings(a0)
		move.l	#DPLC_FireShield,DPLC_Address(a0)			; Used by PLCLoad_Shields
		move.l	#ArtUnc_FireShield,Art_Address(a0)			; Used by PLCLoad_Shields
		move.b	#4,render_flags(a0)
		move.w	#prio(1),priority(a0)
		move.b	#$18,width_pixels(a0)
		move.b	#$18,height_pixels(a0)
		btst	#7,(Player_1+art_tile).w
		beq.s	loc_195F0
		bset	#7,art_tile(a0)
loc_195F0:	; +
		move.w	#1,anim(a0)				; Clear anim and set prev_anim to 1
		move.b	#-1,LastLoadedDPLC(a0)			; Reset LastLoadedDPLC (used by PLCLoad_Shields)
		move.l	#Obj_Fire_Shield_Main,(a0)

Obj_Fire_Shield_Main:
		movea.w	parent(a0),a2
		btst	#Status_Invincible,status_secondary(a2) ; Is player invincible?
		bne.w	locret_19690				; If so, do not display and do not update variables
		cmpi.b	#$1C,anim(a2)				; Is player in their 'blank' animation?
		beq.s	locret_195A4				; If so, do not display and do not update variables
		cmpi.b	#6,routine(a2)				; Is player dead?
		bhi.s	locret_19690				; If so, do not display and do not update variables

		btst	#Status_Shield,status_secondary(a2) 	; Should the player still have a shield?
		beq.w	Obj_Fire_Shield_Destroy			; If not, change to Insta-Shield
		btst	#Status_Underwater,status(a2)		; Is player underwater?
		bne.s	Obj_Fire_Shield_DestroyUnderwater	; If so, branch
		tst.b	(End_Of_Level_Flag).w				; NAT: check if title card is showing
		bne.w	Obj_Fire_Shield_Destroy			; if yes, wait

		move.w	x_pos(a2),x_pos(a0)
		move.w	y_pos(a2),y_pos(a0)
		tst.b	anim(a0)				; Is shield in its 'dashing' state?
		bne.s	Obj_Fire_Shield_Display			; If so, do not update orientation or allow changing of the priority art_tile bit
		move.b	status(a2),status(a0)			; Inherit status
		andi.b	#1,status(a0)				; Limit inheritance to 'orientation' bit
		tst.b	(Reverse_gravity_flag).w
		beq.s	.normalgravity
		ori.b	#2,status(a0)				; If in reverse gravity, reverse the vertical mirror render_flag bit (On if Off beforehand and vice versa)

.normalgravity:
		andi.w	#drawing_mask,art_tile(a0)
		tst.w	art_tile(a2)
		bpl.s	.nothighpriority
		ori.w	#high_priority,art_tile(a0)

.nothighpriority:
Obj_Fire_Shield_Display:
		lea	(Ani_FireShield).l,a1
		jsr	Animate_Sprite.w
		move.w	#prio(1),priority(a0)		; Layer shield over player sprite
		cmpi.b	#$F,mapping_frame(a0)		; Are these the frames that display in front of the player?
		blo.s	.overplayer			; If so, branch
		move.w	#prio(5),priority(a0)		; If not, layer shield behind player sprite

.overplayer:
		bsr.w	PLCLoad_Shields
		jmp	Obj_Shield_Display(pc)
; ---------------------------------------------------------------------------

locret_19690:
		rts
; ---------------------------------------------------------------------------

Obj_Fire_Shield_DestroyUnderwater:
		andi.b	#$8E,status_secondary(a2)	; Sets Status_Shield, Status_FireShield, Status_LtngShield, and Status_BublShield to 0
		jsr	Create_New_Sprite.w		; Set up for a new object
		bne.w	Obj_Fire_Shield_Destroy		; If that can't happen, branch
		move.l	#Obj_FireShield_Dissipate,(a1)	; Create dissipate object
		move.w	x_pos(a0),x_pos(a1)		; Put it at shields' x_pos
		move.w	y_pos(a0),y_pos(a1)		; Put it at shields' y_pos

Obj_Fire_Shield_Destroy:
		andi.b	#$8E,status_secondary(a2)	; Sets Status_Shield, Status_FireShield, Status_LtngShield, and Status_BublShield to 0
		move.l	#Obj_Insta_Shield,(a0)		; Replace the Fire Shield with the Insta-Shield

locret_196BA:
		rts
; ---------------------------------------------------------------------------

Obj_Lightning_Shield:
		jsr	Shield_Get_Settings(pc)
		move.l	#Map_LightningShield,mappings(a0)
		move.l	#DPLC_LightningShield,DPLC_Address(a0)			; Used by PLCLoad_Shields
		move.l	#ArtUnc_LightningShield,Art_Address(a0)			; Used by PLCLoad_Shields

		; Load Spark art
		move.w	vram_art(a0),d2			; load VRAM address this is loaded to
		add.w	#$3E0,d2			; offset with expected position
		move.l	#ArtUnc_Obj_Lightning_Shield_Sparks,d1			; Load art source
		move.w	#(ArtUnc_Obj_Lightning_Shield_Sparks_end-ArtUnc_Obj_Lightning_Shield_Sparks)/2,d3; Size of art (in words)
		jsr	Add_To_DMA_Queue.w

		move.b	#4,render_flags(a0)
		move.w	#prio(1),priority(a0)
		move.b	#$18,width_pixels(a0)
		move.b	#$18,height_pixels(a0)
		btst	#7,(Player_1+art_tile).w
		beq.s	.nothighpriority
		bset	#7,art_tile(a0)

.nothighpriority:
		move.w	#1,anim(a0)				; Clear anim and set prev_anim to 1
		move.b	#-1,LastLoadedDPLC(a0)			; Reset LastLoadedDPLC (used by PLCLoad_Shields)
		move.l	#Obj_Lightning_Shield_Main,(a0)

Obj_Lightning_Shield_Main:
		movea.w	parent(a0),a2
		btst	#Status_Invincible,status_secondary(a2)	; Is player invincible?
		bne.s	locret_196BA				; If so, do not display and do not update variables
		cmpi.b	#$1C,anim(a2)				; Is player in their 'blank' animation?
		beq.s	locret_196BA				; If so, do not display and do not update variables
		cmpi.b	#6,routine(a2)				; Is player dead?
		bhi.w	locret_196BA				; If so, do not display and do not update variables

		btst	#Status_Shield,status_secondary(a2)	; Should the player still have a shield?
		beq.w	Obj_Lightning_Shield_Destroy		; If not, change to Insta-Shield
		btst	#Status_Underwater,status(a2)		; Is player underwater?
		bne.s	Obj_Lightning_Shield_DestroyUnderwater	; If so, branch
		tst.b	(End_Of_Level_Flag).w				; NAT: check if title card is showing
		bne.s	Obj_Lightning_Shield_Destroy		; if yes, wait

		move.w	x_pos(a2),x_pos(a0)
		move.w	y_pos(a2),y_pos(a0)
		move.b	status(a2),status(a0)			; Inherit status
		andi.b	#1,status(a0)				; Limit inheritance to 'orientation' bit
		tst.b	(Reverse_gravity_flag).w
		beq.s	.normalgravity
		ori.b	#2,status(a0)				; If in reverse gravity, reverse the vertical mirror render_flag bit (On if Off beforehand and vice versa)

.normalgravity:
		andi.w	#drawing_mask,art_tile(a0)
		tst.w	art_tile(a2)
		bpl.s	.nothighpriority
		ori.w	#high_priority,art_tile(a0)

.nothighpriority:
		tst.b	anim(a0)				; Is shield in its 'double jump' state?
		beq.s	Obj_Lightning_Shield_Display		; Is not, branch and display
		bsr.s	Obj_Lightning_Shield_Create_Spark	; Create sparks
		clr.b	anim(a0)				; Once done, return to non-'double jump' state

Obj_Lightning_Shield_Display:
		lea	(Ani_LightningShield).l,a1
		jsr	Animate_Sprite.w
		move.w	#prio(1),priority(a0)			; Layer shield over player sprite
		cmpi.b	#$E,mapping_frame(a0)			; Are these the frames that display in front of the player?
		blo.s	.overplayer				; If so, branch
		move.w	#prio(4),priority(a0)			; If not, layer shield behind player sprite

.overplayer:
		bsr.w	PLCLoad_Shields
		jmp	Obj_Shield_Display(pc)
; ---------------------------------------------------------------------------

Obj_Lightning_Shield_DestroyUnderwater:
		tst.w	(Palette_fade_timer).w
		beq.s	Obj_Lightning_Shield_FlashWater

Obj_Lightning_Shield_Destroy:
		andi.b	#$8E,status_secondary(a2)	; Sets Status_Shield, Status_FireShield, Status_LtngShield, and Status_BublShield to 0
		move.l	#Obj_Insta_Shield,(a0)		; Replace the Lightning Shield with the Insta-Shield
		rts
; ---------------------------------------------------------------------------

Obj_Lightning_Shield_FlashWater:
		move.l	#Obj_Lightning_Shield_DestroyUnderwater2,(a0)
		andi.b	#$8E,status_secondary(a2)	; Sets Status_Shield, Status_FireShield, Status_LtngShield, and Status_BublShield to 0

	; Flashes the underwater palette white
		lea	(Water_palette).w,a1
		lea	(Target_water_palette).w,a2
		move.w	#($80/4)-1,d0			; Size of Water_palette/4-1

-		move.l	(a1),(a2)+			; Backup palette entries
		move.l	#$0EEE0EEE,(a1)+		; Overwrite palette entries with white
		dbf	d0,-				; Loop until entire thing is overwritten

		clr.w	-$40(a1)			; Set the first colour in the third palette line to black
		move.b	#3,anim_frame_timer(a0)
		rts

; =============== S U B R O U T I N E =======================================

Obj_Lightning_Shield_Create_Spark:
		moveq	#1,d2

Obj_Lightning_Shield_Create_Spark_Part2:
		lea	SparkVelocities(pc),a2
		moveq	#3,d1

-		jsr	Create_New_Sprite.w		; Find free object slot
		bne.s	locret_19862			; If one can't be found, return
		move.l	#Obj_Lightning_Shield_Spark,(a1); Make new object a Spark
		move.w	x_pos(a0),x_pos(a1)		; (Spark) Inherit x_pos from source object (Lightning Shield, Hyper Sonic Stars)
		move.w	y_pos(a0),y_pos(a1)		; (Spark) Inherit y_pos from source object (Lightning Shield, Hyper Sonic Stars)
		move.l	mappings(a0),mappings(a1)	; (Spark) Inherit mappings from source object (Lightning Shield, Hyper Sonic Stars)
		move.w	art_tile(a0),art_tile(a1)	; (Spark) Inherit art_tile from source object (Lightning Shield, Hyper Sonic Stars)
		move.b	#4,render_flags(a1)
		move.w	#prio(1),priority(a1)
		move.w	#$808,height_pixels(a1)
		move.b	d2,anim(a1)
		move.w	(a2)+,x_vel(a1)			; (Spark) Give x_vel (unique to each of the four Sparks)
		move.w	(a2)+,y_vel(a1)			; (Spark) Give y_vel (unique to each of the four Sparks)
		dbf	d1,-

locret_19862:
		rts
; ---------------------------------------------------------------------------
SparkVelocities:dc.w  -$200, -$200
		dc.w   $200, -$200
		dc.w  -$200,  $200
		dc.w   $200,  $200
; ---------------------------------------------------------------------------

Obj_Lightning_Shield_Spark:
		jsr	MoveSprite2.w
		addi.w	#$18,y_vel(a0)
		lea	(Ani_LightningShield).l,a1
		jsr	Animate_Sprite.w
		tst.b	routine(a0)			; Changed by Animate_Sprite
		bne.s	Obj_Lightning_Shield_Spark_Delete
		jmp	Obj_Shield_Display(pc)
; ---------------------------------------------------------------------------

Obj_Lightning_Shield_Spark_Delete:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

Obj_Lightning_Shield_DestroyUnderwater2:
		subq.b	#1,anim_frame_timer(a0)		; Is it time to end the white flash?
		bpl.s	locret_198BC			; If not, return
		move.l	#Obj_Insta_Shield,(a0)		; Replace Lightning Shield with Insta-Shield
		lea	(Target_water_palette).w,a1
		lea	(Water_palette).w,a2
		move.w	#($80/4)-1,d0			; Size of Water_palette/4-1

-		move.l	(a1)+,(a2)+			; Restore backed-up underwater palette
		dbf	d0,-				; Loop until entire thing is restored

locret_198BC:
		rts
; ---------------------------------------------------------------------------

Obj_Bubble_Shield:
		jsr	Shield_Get_Settings(pc)
		move.l	#Map_BubbleShield,mappings(a0)
		move.l	#DPLC_BubbleShield,DPLC_Address(a0)			; Used by PLCLoad_Shields
		move.l	#ArtUnc_BubbleShield,Art_Address(a0)			; Used by PLCLoad_Shields
		move.b	#4,render_flags(a0)
		move.w	#prio(1),priority(a0)
		move.b	#$18,width_pixels(a0)
		move.b	#$18,height_pixels(a0)
		btst	#7,(Player_1+art_tile).w
		beq.s	.nothighpriority
		bset	#7,art_tile(a0)

.nothighpriority:
		move.w	#1,anim(a0)				; Clear anim and set prev_anim to 1
		move.b	#-1,LastLoadedDPLC(a0)			; Reset LastLoadedDPLC (used by PLCLoad_Shields)
		movea.w	parent(a0),a1
		bsr.w	Player_ResetAirTimer
		move.l	#Obj_Bubble_Shield_Main,(a0)

Obj_Bubble_Shield_Main:
		movea.w	parent(a0),a2
		btst	#Status_Invincible,status_secondary(a2)	; Is player invincible?
		bne.s	locret_198BC				; If so, do not display and do not update variables
		cmpi.b	#$1C,anim(a2)				; Is player in their 'blank' animation?
		beq.s	locret_198BC				; If so, do not display and do not update variables
		cmpi.b	#6,routine(a2)				; Is player dead?
		bhi.s	locret_198BC				; If so, do not display and do not update variables

		btst	#Status_Shield,status_secondary(a2)	; Should the player still have a shield?
		beq.s	Obj_Bubble_Shield_Destroy		; If not, change to Insta-Shield
		tst.b	(End_Of_Level_Flag).w				; NAT: check if title card is showing
		bne.w	Obj_Bubble_Shield_Destroy		; if yes, wait

		move.w	x_pos(a2),x_pos(a0)
		move.w	y_pos(a2),y_pos(a0)
		move.b	status(a2),status(a0)			; Inherit status
		andi.b	#1,status(a0)				; Limit inheritance to 'orientation' bit
		tst.b	(Reverse_gravity_flag).w
		beq.s	.normalgravity
		ori.b	#2,status(a0)				; Reverse the vertical mirror render_flag bit (On if Off beforehand and vice versa)

.normalgravity:
		andi.w	#drawing_mask,art_tile(a0)
		tst.w	art_tile(a2)
		bpl.s	.nothighpriority
		ori.w	#high_priority,art_tile(a0)

.nothighpriority:
		lea	(Ani_BubbleShield).l,a1
		jsr	Animate_Sprite.w
		bsr.s	PLCLoad_Shields
; ---------------------------------------------------------------------------

Obj_Shield_Display:
		tst.b	EnableInterlace.w		; NAT: check if interlace mode is enabled
		beq.s	.nointerlace			; if not, skip

		moveq	#0,d0				; no eor
		tst.b	parent+1(a0)			; check parent
		beq.s	.eorgot				; if Sonic, branch
		moveq	#1,d0				; yes eor

.eorgot		move.b	Level_frame_counter+1.w,d1	; get fram ctr to d1
		and.b	#1,d1				; remove all other bits than bit0
		eor.b	d1,d0				; eor frame counter with special eor value
		bne.s	locret_1998A			; if bit0 set, do not display

.nointerlace	jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

Obj_Bubble_Shield_Destroy:
		andi.b	#$8E,status_secondary(a2)	; Sets Status_Shield, Status_FireShield, Status_LtngShield, and Status_BublShield to 0
		move.l	#Obj_Insta_Shield,(a0)		; Replace the Bubble Shield with the Insta-Shield

locret_1998A:
		rts

; =============== S U B R O U T I N E =======================================

PLCLoad_Shields:
		moveq	#0,d0
		move.b	mapping_frame(a0),d0
		cmp.b	LastLoadedDPLC(a0),d0
		beq.s	locret_199E8
		move.b	d0,LastLoadedDPLC(a0)
		movea.l	DPLC_Address(a0),a2
		add.w	d0,d0
		adda.w	(a2,d0.w),a2
		move.w	(a2)+,d5
		subq.w	#1,d5
		bmi.s	locret_199E8
		move.w	vram_art(a0),d4
; loc_199BE:
PLCLoad_Shields_ReadEntry:
		moveq	#0,d1
		move.w	(a2)+,d1
		move.w	d1,d3
		lsr.w	#8,d3
		andi.w	#$F0,d3
		addi.w	#$10,d3
		andi.w	#$FFF,d1
		lsl.l	#5,d1
		add.l	Art_Address(a0),d1
		move.w	d4,d2
		add.w	d3,d4
		add.w	d3,d4
		jsr	Add_To_DMA_Queue.w
		dbf	d5,PLCLoad_Shields_ReadEntry

locret_199E8:
		rts
; ---------------------------------------------------------------------------

Shield_Get_Settings:
		lea	.art(pc),a1		; NAT: Get uniform art data address to a1
		move.w	(a1)+,art_tile(a0)
		move.w	(a1)+,vram_art(a0)	; Used by PLCLoad_Shields
		cmp.w	#Player_1,parent(a0)	; check if P1 shield
		beq.s	.rts			; if so, branch
		move.w	(a1)+,art_tile(a0)
		move.w	(a1)+,vram_art(a0)	; Used by PLCLoad_Shields
.rts		rts

.art	dc.w make_art_tile(ArtTile_ArtUnc_Shield,0,0), tiles_to_bytes(ArtTile_ArtUnc_Shield)
	dc.w make_art_tile(ArtTile_ArtUnc_Shield2,0,0), tiles_to_bytes(ArtTile_ArtUnc_Shield2)
; ---------------------------------------------------------------------------
Ani_InstaShield:include "General/Sprites/Shields/Anim - Insta-Shield.asm"

Ani_FireShield:	include "General/Sprites/Shields/Anim - Fire Shield.asm"

Ani_LightningShield:include "General/Sprites/Shields/Anim - Lightning Shield.asm"

Ani_BubbleShield:include "General/Sprites/Shields/Anim - Bubble Shield.asm"

Map_FireShield:	include "General/Sprites/Shields/Map - Fire Shield.asm"

DPLC_FireShield:include "General/Sprites/Shields/DPLC - Fire Shield.asm"

Map_LightningShield:include "General/Sprites/Shields/Map - Lightning Shield.asm"

DPLC_LightningShield:include "General/Sprites/Shields/DPLC - Lightning Shield.asm"

Map_BubbleShield:include "General/Sprites/Shields/Map - Bubble Shield.asm"

DPLC_BubbleShield:include "General/Sprites/Shields/DPLC - Bubble Shield.asm"

Map_InstaShield:include "General/Sprites/Shields/Map - Insta-Shield.asm"

DPLC_InstaShield:include "General/Sprites/Shields/DPLC - Insta-Shield.asm"

; ---------------------------------------------------------------------------

Obj_HyperTails_Birds:

		lea	(ArtKosM_SuperTailsBirds).l,a1
		move.w	#$D000,d2
		jsr	Queue_Kos_Module.w
		lea	(a0),a1
		moveq	#0,d0
		moveq	#3,d1

loc_1A186:
		move.l	#loc_1A19C,(a1)
		move.b	d0,$34(a1)
		addi.b	#$40,d0
		lea	next_object(a1),a1
		dbf	d1,loc_1A186

loc_1A19C:
		tst.b	(Kos_modules_left).w
		beq.s	loc_1A1A4
		rts
; ---------------------------------------------------------------------------

loc_1A1A4:
		move.l	#Map_SuperTails_Birds,$C(a0)
		move.b	#4,4(a0)
		move.w	#prio(1),8(a0)
		move.b	#8,7(a0)
		move.b	#8,6(a0)
		move.w	#$8680,$A(a0)
		move.w	(Player_1+x_pos).w,$10(a0)
		move.w	(Player_1+y_pos).w,$14(a0)
		subi.w	#$C0,$10(a0)
		subi.w	#$C0,$14(a0)
		move.w	#0,$18(a0)
		move.w	#0,$1A(a0)
		move.l	#loc_1A1F4,(a0)

loc_1A1F4:
		tst.b	(Super_Tails_flag).w
		bne.s	loc_1A226
		moveq	#0,d0
		move.w	d0,(Player_2+x_pos).w
		move.w	d0,(Player_2+y_pos).w
		move.b	d0,(Player_2+anim).w
		tst.b	$30(a0)
		beq.s	loc_1A216
		movea.w	$42(a0),a1
		move.b	d0,$2D(a1)

loc_1A216:
		move.b	d0,$30(a0)
		move.b	#$78,$32(a0)
		move.l	#loc_1A276,(a0)

loc_1A226:
		bsr.s	sub_1A292

loc_1A228:
		bsr.w	sub_1A37A
		addi.b	#2,$34(a0)
		tst.w	$18(a0)
		beq.s	loc_1A248
		bpl.s	loc_1A242
		bset	#0,4(a0)
		bra.s	loc_1A248
; ---------------------------------------------------------------------------

loc_1A242:
		bclr	#0,4(a0)

loc_1A248:

		andi.b	#-3,4(a0)
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_1A25A
		ori.b	#2,4(a0)

loc_1A25A:
		subq.b	#1,$24(a0)
		bpl.s	loc_1A270
		move.b	#1,$24(a0)
		addq.b	#1,$22(a0)
		andi.b	#1,$22(a0)

loc_1A270:
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_1A276:
		move.w	(Player_1+x_pos).w,d2
		move.w	(Player_1+y_pos).w,d3
		subi.w	#$C0,d2
		subi.w	#$C0,d3
		tst.b	4(a0)
		bmi.s	loc_1A228
		jmp	Delete_Current_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_1A292:
		tst.b	$30(a0)
		bne.s	loc_1A2D6
		tst.b	$32(a0)
		beq.s	loc_1A2A4
		subq.b	#1,$32(a0)
		bra.s	loc_1A2AC
; ---------------------------------------------------------------------------

loc_1A2A4:
		bsr.w	sub_1A3FE
		tst.w	d1
		bne.s	loc_1A2D6

loc_1A2AC:
		move.b	$34(a0),d0
		jsr	GetSineCosine.w
		asr.w	#3,d0
		asr.w	#4,d1
		move.w	(Player_1+x_pos).w,d2
		move.w	(Player_1+y_pos).w,d3
		subi.w	#$20,d3
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_1A2D0
		addi.w	#$40,d3

loc_1A2D0:
		add.w	d0,d2
		add.w	d1,d3
		rts
; ---------------------------------------------------------------------------

loc_1A2D6:

		movea.w	$42(a0),a1
		move.w	$10(a1),d2
		move.w	$14(a1),d3
		tst.b	4(a1)
		bpl.s	loc_1A30A
		move.w	$10(a0),d0
		sub.w	d2,d0
		addi.w	#$C,d0
		cmpi.w	#$18,d0
		bhs.s	locret_1A31C
		move.w	$14(a0),d1
		sub.w	d3,d1
		addi.w	#$C,d1
		cmpi.w	#$18,d1
		bhs.s	locret_1A31C
		bsr.s	sub_1A31E

loc_1A30A:
		move.b	#0,$2D(a1)
		move.b	#0,$30(a0)
		move.b	#$78,$32(a0)

locret_1A31C:

		rts
; End of function sub_1A292


; =============== S U B R O U T I N E =======================================


sub_1A31E:
		move.b	$28(a1),d0
		beq.s	locret_1A330
		andi.b	#$C0,d0
		beq.s	loc_1A332
		cmpi.b	#$C0,d0
		beq.s	loc_1A360

locret_1A330:
		rts
; ---------------------------------------------------------------------------

loc_1A332:
		tst.b	$29(a1)
		beq.s	loc_1A35A
		move.b	$28(a1),$25(a1)
		move.w	#Player_2,d0
		move.b	d0,$1C(a1)
		move.b	#0,$28(a1)
		subq.b	#1,$29(a1)
		bne.s	loc_1A358
		bset	#7,$2A(a1)

loc_1A358:
		bra.s	loc_1A366
; ---------------------------------------------------------------------------

loc_1A35A:
		jmp	(HyperTouch_DestroyEnemy).l
; ---------------------------------------------------------------------------

loc_1A360:
		ori.b	#2,$29(a1)

loc_1A366:
		move.w	$10(a0),(Player_2+x_pos).w
		move.w	$14(a0),(Player_2+y_pos).w
		move.b	#2,(Player_2+anim).w
		rts
; End of function sub_1A31E


; =============== S U B R O U T I N E =======================================


sub_1A37A:
		move.w	#$20,d1
		cmp.w	$10(a0),d2
		bge.s	loc_1A392
		neg.w	d1
		tst.w	$18(a0)
		bmi.s	loc_1A39C
		add.w	d1,d1
		add.w	d1,d1
		bra.s	loc_1A39C
; ---------------------------------------------------------------------------

loc_1A392:
		tst.w	$18(a0)
		bpl.s	loc_1A39C
		add.w	d1,d1
		add.w	d1,d1

loc_1A39C:

		add.w	d1,$18(a0)
		and.w	(Screen_Y_wrap_value).w,d3
		move.w	#$20,d1
		sub.w	$14(a0),d3
		bcc.s	loc_1A3CA
		cmpi.w	#-$500,d3
		ble.s	loc_1A3D0

loc_1A3B4:
		cmpi.w	#-$1000,$1A(a0)
		ble.s	loc_1A3D8

loc_1A3BC:
		neg.w	d1
		tst.w	$1A(a0)
		bmi.s	loc_1A3E2
		add.w	d1,d1
		add.w	d1,d1
		bra.s	loc_1A3E2
; ---------------------------------------------------------------------------

loc_1A3CA:
		cmpi.w	#$500,d3
		bge.s	loc_1A3B4

loc_1A3D0:
		cmpi.w	#$1000,$1A(a0)
		bge.s	loc_1A3BC

loc_1A3D8:
		tst.w	$1A(a0)
		bpl.s	loc_1A3E2
		add.w	d1,d1
		add.w	d1,d1

loc_1A3E2:

		add.w	d1,$1A(a0)
		jsr	MoveSprite2.w
		move.w	(Displace_Obj_X).w,d0
		sub.w	d0,$10(a0)
		move.w	(Screen_Y_wrap_value).w,d0
		and.w	d0,$14(a0)
		rts
; End of function sub_1A37A


; =============== S U B R O U T I N E =======================================


sub_1A3FE:
		moveq	#0,d1
		lea	(Collision_response_list).w,a4
		move.w	(a4)+,d6
		beq.s	locret_1A432
		moveq	#0,d0
		addq.b	#2,(__u_F66C).w
		cmp.b	(__u_F66C).w,d6
		bhi.s	loc_1A41A
		move.b	#0,(__u_F66C).w

loc_1A41A:
		move.b	(__u_F66C).w,d0
		sub.w	d0,d6
		lea	(a4,d0.w),a4

loc_1A424:
		movea.w	(a4)+,a1
		move.b	$28(a1),d0
		beq.s	loc_1A42E
		bsr.s	sub_1A434

loc_1A42E:
		subq.w	#2,d6
		bne.s	loc_1A424

locret_1A432:
		rts
; End of function sub_1A3FE


; =============== S U B R O U T I N E =======================================


sub_1A434:
		tst.b	4(a1)
		bpl.s	locret_1A44C
		tst.b	$2D(a1)
		bne.s	locret_1A44C
		andi.b	#$C0,d0
		beq.s	loc_1A44E
		cmpi.b	#$C0,d0
		beq.s	loc_1A44E

locret_1A44C:
		rts
; ---------------------------------------------------------------------------

loc_1A44E:

		move.b	#-1,$2D(a1)
		move.w	a1,$42(a0)
		move.b	#1,$30(a0)
		moveq	#1,d1
		moveq	#2,d6
		rts
; End of function sub_1A434

; ---------------------------------------------------------------------------
Map_SuperTails_Birds:include "General/Sprites/Tails/Map - Super Tails birds.asm"

; ---------------------------------------------------------------------------

Obj_HyperSonicKnux_Trail:		; Knux_JumpHeight+110o	...
		; init
		move.l	#Map_Knuckles,mappings(a0)	; Load Knuckles' mappings
		cmpi.w	#3,(Player_mode).w		; Are we playing as Knuckles?
		beq.s	.playingasknux			; If so, branch
		move.l	#Map_SuperSonic,mappings(a0)	; If not, you must be Hyper Sonic, load Super/Hyper Sonic mappings
; loc_1A4AC:
.playingasknux:
		move.w	#make_art_tile(ArtTile_ArtUnc_Sonic,0,0),art_tile(a0)
		move.w	#prio(2),priority(a0)
		move.b	#$18,width_pixels(a0)
		move.b	#$18,height_pixels(a0)
		move.b	#4,render_flags(a0)
		move.l	#Obj_HyperSonicKnux_Trail_Main,(a0)
; loc_1A4D0:
Obj_HyperSonicKnux_Trail_Main:
		tst.b	(Super_Sonic_Knux_flag).w	; Are we in non-super/hyper state?
		beq.w	Obj_RingDelete			; If so, branch and delete
		moveq	#$C,d1				; This will be subtracted from Pos_table_index, giving the object an older entry
		btst	#0,(Level_frame_counter+1).w	; Even frame? (Think of it as 'every other number' logic)
		beq.s	.evenframe			; If so, branch
		moveq	#$14,d1				; On every other frame, use a different number to subtract, giving the object an even older entry
; loc_1A4E4:
.evenframe:
		move.w	(Pos_table_index).w,d0
		lea	(Pos_table).w,a1
		sub.b	d1,d0
		lea	(a1,d0.w),a1
		move.w	(a1)+,x_pos(a0)			; Use previous player x_pos
		move.w	(a1)+,y_pos(a0)			; Use previous player y_pos
;		lea	(Stat_table).w,a1
;		move.b	3(a1,d0.w),art_tile(a0)
		move.b	(Player_1+mapping_frame).w,mapping_frame(a0)	; Use player's current mapping_frame
		move.b	(Player_1+render_flags).w,render_flags(a0)	; Use player's current render_flags
		move.w	(Player_1+priority).w,priority(a0)		; Use player's current priority
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

Obj_Ring:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	Ring_Index(pc,d0.w),d1
		jmp	Ring_Index(pc,d1.w)
; ---------------------------------------------------------------------------
; off_1A528:
Ring_Index:
		dc.w Obj_RingInit-Ring_Index	; 0
		dc.w Obj_RingAnimate-Ring_Index	; 2
		dc.w Obj_RingCollect-Ring_Index	; 4
		dc.w Obj_RingSparkle-Ring_Index	; 6
		dc.w Obj_RingDelete-Ring_Index	; 8
; ---------------------------------------------------------------------------
; loc_1A532:
Obj_RingInit:
		addq.b	#2,routine(a0)
		move.l	#Map_Ring,mappings(a0)
		move.w	#make_art_tile(ArtTile_ArtNem_Ring,1,1),art_tile(a0)
		move.b	#4,render_flags(a0)
		move.w	#prio(3),priority(a0)
		move.b	#$47,collision_flags(a0)
		move.b	#8,width_pixels(a0)
		tst.w	(Competition_mode).w
		beq.s	Obj_RingAnimate
		move.w	#$63D2,art_tile(a0)
; loc_1A568:
Obj_RingAnimate:
		move.b	(Rings_frame).w,mapping_frame(a0)
		jmp	loc_1B662.w
; ---------------------------------------------------------------------------
; loc_1A572:
Obj_RingCollect:
		addq.b	#2,routine(a0)
		move.b	#0,collision_flags(a0)
		move.w	#prio(1),priority(a0)

		cmp.w	#Player_1,parent(a0)
		bne.s	.tails
		bsr.s	GiveRing
		bra.s	.k

.tails		bsr.s	loc_1A5F0
.k
; loc_1A584:
Obj_RingSparkle:
		lea	(Ani_RingSparkle).l,a1
		jsr	Animate_Sprite.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
; loc_1A592:
Obj_RingDelete:
		jmp	Delete_Current_Sprite.w

; =============== S U B R O U T I N E =======================================


GiveRing:
GiveRing_1P:
		move.w	#$33,d0				; prepare to play the ring sound
		cmpi.b	#99,(Ring_count).w		; does the player 1 have 999 or more rings?
		bhs.s	JmpTo_Play_Sound_2		; if yes, play the ring sound
		addq.b	#1,(Ring_count).w		; add 1 to the ring count
		ori.b	#1,(Update_HUD_ring_count).w	; set flag to update the ring counter in the HUD

JmpTo_Play_Sound_2
		jmp	Play_Sound_2.w
; ---------------------------------------------------------------------------

loc_1A5F0:
loc_1A5FC:
		cmpi.b	#99,(Ring_count+1).w
		bhs.s	loc_1A608
		addq.b	#1,(Ring_count+1).w

loc_1A608:
		ori.b	#1,(Update_HUD_ring_count).w
		move.w	#$33,d0

loc_1A644:

		jmp	Play_Sound_2.w
; ---------------------------------------------------------------------------

Obj_Bouncing_Ring_Special:
		addq.b	#2,5(a0)		; NAT: Increase ring counter
		move.l	#Obj_Bouncing_Ring,(a0)
		move.b	#8,$1E(a0)
		move.b	#8,$1F(a0)
		move.l	#Map_Ring,$C(a0)
		move.w	#$A6BC,$A(a0)
		move.b	#$84,4(a0)
		move.w	#prio(3),8(a0)
		move.b	#$47,$28(a0)
		move.b	#8,7(a0)
		move.b	#-1,(Ring_spill_anim_counter).w

Obj_Bouncing_Ring:

		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_1A658(pc,d0.w),d1
		jmp	off_1A658(pc,d1.w)
; ---------------------------------------------------------------------------
off_1A658:	dc.w loc_1A67A-off_1A658

		dc.w loc_1A75C-off_1A658
		dc.w loc_1A7C2-off_1A658
		dc.w loc_1A7D6-off_1A658
		dc.w loc_1A7E4-off_1A658
; ---------------------------------------------------------------------------

Obj_Bouncing_Ring_Reverse_Gravity:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_1A670(pc,d0.w),d1
		jmp	off_1A670(pc,d1.w)
; ---------------------------------------------------------------------------
off_1A670:	dc.w loc_1A67A-off_1A670

		dc.w loc_1A7E8-off_1A670
		dc.w loc_1A7C2-off_1A670
		dc.w loc_1A7D6-off_1A670
		dc.w loc_1A7E4-off_1A670
; ---------------------------------------------------------------------------

loc_1A67A:

		move.l	#Obj_Bouncing_Ring,d6
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_1A68C
		move.l	#Obj_Bouncing_Ring_Reverse_Gravity,d6

loc_1A68C:
		movea.l	a0,a1
		lea	Ring_count.w,a2			; NAT: Get Sonic's rings
		cmp.w	#Player_1,$3E(a0)
		beq.s	.sonic
		addq.w	#1,a2				; get Tails

.sonic		moveq	#0,d5
		move.b	(a2),d5				; get ring ct
		clr.b	(a2)				; clear ring counter
		moveq	#5,d0
		cmp.w	d0,d5
		blo.s	loc_1A6A6
		move.w	d0,d5

loc_1A6A6:
		subq.w	#1,d5
		move.w	#$288,d4
		bra.s	loc_1A6B6
; ---------------------------------------------------------------------------

loc_1A6AE:
		jsr	Create_New_Sprite3.w
		bne.w	loc_1A738

loc_1A6B6:
		move.l	d6,(a1)
		addq.b	#2,5(a1)
		move.b	#8,$1E(a1)
		move.b	#8,$1F(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		move.l	#Map_Ring,$C(a1)
		move.w	#$A000|ArtTile_ArtNem_Ring,$A(a1)
		move.b	#$84,4(a1)
		move.w	#prio(3),8(a1)
		move.b	#$47,$28(a1)
		move.b	#8,7(a1)
		move.b	#-1,(Ring_spill_anim_counter).w
		tst.w	d4
		bmi.s	loc_1A728
		move.w	d4,d0
		jsr	GetSineCosine.w
		move.w	d4,d2
		lsr.w	#8,d2
		asl.w	d2,d0
		asl.w	d2,d1
		move.w	d0,d2
		move.w	d1,d3
		addi.b	#$10,d4
		bcc.s	loc_1A728
		subi.w	#$80,d4
		bcc.s	loc_1A728
		move.w	#$288,d4

loc_1A728:

		move.w	d2,$18(a1)
		move.w	d3,$1A(a1)
		neg.w	d2
		neg.w	d4
		dbf	d5,loc_1A6AE

loc_1A738:
		moveq	#$B9,d0
		jsr	Play_Sound_2.w

		move.b	#$80,(Update_HUD_ring_count).w
		tst.b	(Reverse_gravity_flag).w
		bne.w	loc_1A7E8

loc_1A75C:
		move.b	(Ring_spill_anim_frame).w,$22(a0)
		jsr	MoveSprite2.w
		addi.w	#$18,$1A(a0)
		bmi.s	loc_1A7B0

		tst.b	4(a0)
		bpl.s	loc_1A79C
		jsr	RingCheckFloorDist(pc)
		tst.w	d1
		bpl.s	loc_1A79C
		add.w	d1,$14(a0)
		move.w	$1A(a0),d0
		asr.w	#2,d0
		sub.w	d0,$1A(a0)
		neg.w	$1A(a0)

loc_1A79C:
		tst.b	(Ring_spill_anim_counter).w
		beq.s	loc_1A7E4
		move.w	(Camera_max_Y_pos).w,d0
		addi.w	#$E0,d0
		cmp.w	$14(a0),d0
		blo.s	loc_1A7E4

loc_1A7B0:
		jsr	Check_Object_Attraction(pc)
		jsr	Add_SpriteToCollisionResponseList.w
		move.w	(Displace_Obj_X).w,d0
		sub.w	d0,$10(a0)
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_1A7C2:

		addq.b	#2,5(a0)
		move.b	#0,$28(a0)
		move.w	#prio(1),8(a0)

		cmp.w	#Player_1,parent(a0)
		bne.s	.tails
		bsr.w	GiveRing
		bra.s	loc_1A7D6

.tails		bsr.w	loc_1A5F0

loc_1A7D6:

		lea	(Ani_RingSparkle).l,a1
		jsr	Animate_Sprite.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_1A7E4:

		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_1A7E8:

		move.b	(Ring_spill_anim_frame).w,$22(a0)
		jsr	MoveSprite_TestGravity2.w
		addi.w	#$18,$1A(a0)
		bmi.s	loc_1A83C
		move.b	(V_int_run_count+3).w,d0
		add.b	d7,d0
		andi.b	#7,d0
		bne.s	loc_1A83C
		tst.b	4(a0)
		bpl.s	loc_1A828
		jsr	sub_FCA0.w
		tst.w	d1
		bpl.s	loc_1A828
		sub.w	d1,$14(a0)
		move.w	$1A(a0),d0
		asr.w	#2,d0
		sub.w	d0,$1A(a0)
		neg.w	$1A(a0)

loc_1A828:

		tst.b	(Ring_spill_anim_counter).w
		beq.s	loc_1A7E4
		move.w	(Camera_max_Y_pos).w,d0
		addi.w	#$E0,d0
		cmp.w	$14(a0),d0
		blo.s	loc_1A7E4

loc_1A83C:
		jsr	Check_Object_Attraction(pc)
		jsr	Add_SpriteToCollisionResponseList.w
		move.w	(Displace_Obj_X).w,d0
		sub.w	d0,$10(a0)
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

Check_Object_Attraction:
		lea	Player_1.w,a1
		bsr.s	.check
		lea	Player_2.w,a1

.check		btst	#5,$2B(a1)
		bne.s	.gotelec
		rts

.gotelec	move.w	$10(a1),d2
		move.w	$14(a1),d3
		subi.w	#$80,d2
		subi.w	#$80,d3
		moveq	#6,d1
		moveq	#$C,d6
		move.w	#$100,d4
		move.w	#$100,d5

		move.w	$10(a0),d0
		sub.w	d1,d0
		sub.w	d2,d0
		bcc.s	loc2_EAA0
		add.w	d6,d0
		bcs.s	loc2_EAA6
		bra.w	loc2_EADA
; ---------------------------------------------------------------------------

loc2_EAA0:
		cmp.w	d4,d0
		bhi.w	loc2_EADA

loc2_EAA6:
		move.w	$14(a0),d0
		sub.w	d1,d0
		sub.w	d3,d0
		bcc.s	loc2_EAB8
		add.w	d6,d0
		bcs.s	loc2_EABE
		bra.w	loc2_EADA
; ---------------------------------------------------------------------------

loc2_EAB8:
		cmp.w	d5,d0
		bhi.w	loc2_EADA

loc2_EABE:
		move.l	#loc_1A88C,(a0)		; attract ring
		move.w	a1,parent(a0)		; set player as parent
		clr.b	5(a0)			; clear routine

loc2_EADA:
		rts

Obj_Attracted_Ring:
		; init
		move.l	#Map_Ring,mappings(a0)
		move.w	#make_art_tile(ArtTile_ArtNem_Ring,1,1),art_tile(a0)
		move.b	#4,render_flags(a0)
		move.w	#prio(2),priority(a0)
		move.b	#$47,collision_flags(a0)
		move.b	#8,width_pixels(a0)
		move.b	#8,height_pixels(a0)
		move.b	#8,y_radius(a0)
		move.b	#8,x_radius(a0)
		move.l	#loc_1A88C,(a0)

loc_1A88C:
		tst.b	5(a0)
		bne.s	AttractedRing_GiveRing
		move.w	parent(a0),a1

		bsr.w	AttractedRing_Move
		btst	#Status_LtngShield,status_secondary(a1)	; Does player still have a lightning shield?
		bne.s	Obj_Attracted_RingAnimate
		move.l	#Obj_Bouncing_Ring,(a0)		; If not, change object
		move.b	#2,5(a0)
		move.b	#-1,(Ring_spill_anim_counter).w
; loc_1A8B0:
Obj_Attracted_RingAnimate:
		subq.b	#1,anim_frame_timer(a0)
		bpl.s	loc_1A8C6
		move.b	#3,anim_frame_timer(a0)
		addq.b	#1,mapping_frame(a0)
		andi.b	#3,mapping_frame(a0)

loc_1A8C6:
		move.w	x_pos(a0),d0
		andi.w	#$FF80,d0
		sub.w	(Camera_X_pos_coarse_back).w,d0
		cmpi.w	#$280,d0
		bhi.w	loc_1A8E4
		jsr	Add_SpriteToCollisionResponseList.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_1A8E4:
		move.w	respawn_addr(a0),d0
		beq.s	loc_1A8F0
		movea.w	d0,a2
		bclr	#7,(a2)

loc_1A8F0:
	;	move.w	(Vectors+$30).w,d0		; NAT: Wat
	;	beq.s	loc_1A8FC
	;	movea.w	d0,a2
	;	move.w	#0,(a2)

loc_1A8FC:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

AttractedRing_GiveRing:
		clr.b	collision_flags(a0)
		move.w	#prio(1),priority(a0)

		cmp.w	#Player_1,parent(a0)
		bne.s	.tails
		bsr.w	GiveRing
		bra.s	.k

.tails		bsr.w	loc_1A5F0
.k		move.l	#loc_1A920,(a0)
		clr.b	5(a0)

loc_1A920:
		tst.b	5(a0)
		bne.s	loc_1A934
		lea	(Ani_RingSparkle).l,a1
		jsr	Animate_Sprite.w
.draw		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_1A934:
		jmp	Delete_Current_Sprite.w

; =============== S U B R O U T I N E =======================================


AttractedRing_Move:
		; Move on X axis
		move.w	#$30,d1
		move.w	x_pos(a1),d0
		cmp.w	x_pos(a0),d0
		bhs.s	AttractedRing_MoveRight	; If ring is to the left of the player, branch

;AttractedRing_MoveLeft:
		neg.w	d1
		tst.w	x_vel(a0)
		bmi.s	AttractedRing_ApplyMovementX
		add.w	d1,d1
		add.w	d1,d1
		bra.s	AttractedRing_ApplyMovementX
; ---------------------------------------------------------------------------
; loc_1A954:
AttractedRing_MoveRight:
		tst.w	x_vel(a0)
		bpl.s	AttractedRing_ApplyMovementX
		add.w	d1,d1
		add.w	d1,d1
; loc_1A95E:
AttractedRing_ApplyMovementX:			; AttractedRing_Move+1Aj ...
		add.w	d1,x_vel(a0)
		; Move on Y axis
		move.w	#$30,d1
		move.w	y_pos(a1),d0
		cmp.w	y_pos(a0),d0
		bhs.s	AttractedRing_MoveUp	; If ring is below the player, branch

;AttractedRing_MoveDown:
		neg.w	d1
		tst.w	y_vel(a0)
		bmi.s	AttractedRing_ApplyMovementY
		add.w	d1,d1
		add.w	d1,d1
		bra.s	AttractedRing_ApplyMovementY
; ---------------------------------------------------------------------------
; loc_1A97E:
AttractedRing_MoveUp:
		tst.w	y_vel(a0)
		bpl.s	AttractedRing_ApplyMovementY
		add.w	d1,d1
		add.w	d1,d1
; loc_1A988:
AttractedRing_ApplyMovementY:			; AttractedRing_Move+44j ...
		add.w	d1,y_vel(a0)
		jmp	MoveSprite2.w
; End of function AttractedRing_Move

; ---------------------------------------------------------------------------
Ani_RingSparkle:	include "General/Sprites/Ring/Anim - Ring Sparkle.asm"

;Map_Ring:
	include "General/Sprites/Ring/Map - Ring.asm"

; ---------------------------------------------------------------------------

RingCheckFloorDist:
		move.w	$10(a0),d3
		move.w	$14(a0),d2
		move.b	$1E(a0),d0
		ext.w	d0
		add.w	d0,d2
		lea	(Primary_Angle).w,a4
		move.b	#0,(a4)
		movea.w	#$10,a3
		move.w	#0,d6
		moveq	#$C,d5
		jmp	loc_F3A4.w
; ---------------------------------------------------------------------------

loc_1A9EE:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_1A9FC(pc,d0.w),d1
		jmp	off_1A9FC(pc,d1.w)
; ---------------------------------------------------------------------------
off_1A9FC:	dc.w loc_1AA02-off_1A9FC

		dc.w loc_1AA56-off_1A9FC
		dc.w loc_1AA62-off_1A9FC
; ---------------------------------------------------------------------------

loc_1AA02:
		moveq	#0,d1
		move.w	$3C(a0),d1
		swap	d1
		move.l	$34(a0),d0
		sub.l	d1,d0
		asr.l	#4,d0
		sub.l	d0,$34(a0)
		move.w	$34(a0),$10(a0)
		moveq	#0,d1
		move.w	$3E(a0),d1
		swap	d1
		move.l	$38(a0),d0
		sub.l	d1,d0
		asr.l	#4,d0
		sub.l	d0,$38(a0)
		move.w	$38(a0),$14(a0)
		lea	Ani_Ring(pc),a1
		jsr	Animate_Sprite.w
		subq.w	#1,$40(a0)
		bne.w	loc_1A920.draw
		movea.l	$2E(a0),a1
		subq.w	#1,(a1)

		cmp.w	#Player_1,parent(a0)
		bne.s	.tails
		bsr.w	GiveRing
		bra.s	.k

.tails		bsr.w	loc_1A5F0
.k		addi.b	#2,5(a0)

loc_1AA56:
		lea	Ani_RingSparkle(pc),a1
		jsr	Animate_Sprite.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_1AA62:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------
Ani_Ring:	include "General/Sprites/Ring/Anim - Ring.asm"


; =============== S U B R O U T I N E =======================================


Init_SpriteTable:
		clr.w	(ScrEvents_10).w
		clr.l	(Use_normal_sprite_table).w
		tst.w	(Competition_mode).w
		beq.s	loc_1AA9E
		lea	(Sprite_table_buffer).w,a0
		bsr.s	Init_SpriteTable2
		bsr.s	Init_SpriteTable_2Player
		lea	(Sprite_table_buffer_2).l,a0
		bsr.s	Init_SpriteTable2
		bsr.s	Init_SpriteTable_2Player
		lea	(Sprite_table_buffer_P2).l,a0
		bsr.s	Init_SpriteTable2
		lea	(Sprite_table_buffer_P2_2).l,a0
		bra.s	Init_SpriteTable2
; ---------------------------------------------------------------------------

loc_1AA9E:
		lea	(Sprite_table_buffer).w,a0
; End of function Init_SpriteTable


; =============== S U B R O U T I N E =======================================


Init_SpriteTable2:

		moveq	#0,d0
		moveq	#1,d1
		moveq	#$4F,d7

loc_1AAA8:
		move.w	d0,(a0)
		move.b	d1,3(a0)
		addq.w	#1,d1
		addq.w	#8,a0
		dbf	d7,loc_1AAA8
		move.b	d0,-5(a0)
		rts
; End of function Init_SpriteTable2


; =============== S U B R O U T I N E =======================================


Init_SpriteTable_2Player:

		lea	-$280(a0),a0
		move.l	#$EB0301,(a0)+
		move.l	#1,(a0)+
		move.l	#$EB0302,(a0)+
		move.l	#0,(a0)
		rts
; End of function Init_SpriteTable_2Player


; =============== S U B R O U T I N E =======================================


Process_Sprites:
		lea	(Object_RAM).w,a0

loc_1AAFA:
		moveq	#$6D,d7

; =============== S U B R O U T I N E =======================================


sub_1AAFC:
		move.l	(a0),d0
		beq.s	loc_1AB04
		movea.l	d0,a1
		jsr	(a1)

loc_1AB04:
		lea	next_object(a0),a0
		dbf	d7,sub_1AAFC

locret_1AB0C:
		rts
; End of function sub_1AAFC

; ---------------------------------------------------------------------------

loc_1AB0E:
		moveq	#3,d7
		bsr.s	sub_1AAFC
		moveq	#$59,d7
		bsr.s	sub_1AB1A
		moveq	#$F,d7
		bra.s	sub_1AAFC

; =============== S U B R O U T I N E =======================================


sub_1AB1A:

		move.l	(a0),d0
		beq.s	loc_1AB28
		tst.b	4(a0)
		bpl.s	loc_1AB28
		jsr	Draw_Sprite.w

loc_1AB28:
		lea	next_object(a0),a0
		dbf	d7,sub_1AB1A
		rts

; =============== S U B R O U T I N E =======================================


Render_Sprites:
;		tst.w	(Competition_mode).w
;		bne.w	Render_Sprites_CompetitionMode
		moveq	#$4F,d7
		moveq	#0,d6
		lea	(Sprite_table_input).w,a5
		lea	(Camera_X_pos_copy).w,a3
		lea	(Sprite_table_buffer).w,a6
		tst.b	(Level_started_flag).w
		beq.s	loc_1AD4A

	move.l	ModeTable.w,a1		; NAT: Get mode table address
	move.l	$18(a1),a1		; get sprite routine
	jsr	(a1)			; jump
		jsr	(sub_DB44).l
		jsr	(sub_EB86).l

loc_1AD4A:
		tst.w	(a5)
		beq.w	Render_Sprites_NextLevel
		lea	2(a5),a4

loc_1AD54:
		movea.w	(a4)+,a0 ; a0=object
		andi.b	#$7F,render_flags(a0)	; clear on-screen flag
		move.b	render_flags(a0),d6
		move.w	x_pos(a0),d0
		move.w	y_pos(a0),d1
		btst	#6,d6		; is the multi-draw flag set?
		bne.w	loc_1AE58	; if it is, branch
		btst	#2,d6		; is this to be positioned by screen coordinates?
		beq.s	loc_1ADB2	; if it is, branch
		moveq	#0,d2
		move.b	width_pixels(a0),d2
		sub.w	(a3),d0
		move.w	d0,d3
		add.w	d2,d3		; is the object right edge to the left of the screen?
		bmi.s	Render_Sprites_NextObj	; if it is, branch
		move.w	d0,d3
		sub.w	d2,d3
		cmpi.w	#320,d3		; is the object left edge to the right of the screen?
		bge.s	Render_Sprites_NextObj	; if it is, branch
		addi.w	#128,d0
		sub.w	4(a3),d1
		move.b	height_pixels(a0),d2
		add.w	d2,d1
		and.w	(Screen_Y_wrap_value).w,d1
		move.w	d2,d3
		add.w	d2,d2
		addi.w	#224,d2
		cmp.w	d2,d1
		bhs.s	Render_Sprites_NextObj	; if the object is below the screen
		addi.w	#128,d1
		sub.w	d3,d1

loc_1ADB2:
		ori.b	#$80,render_flags(a0)	; set on-screen flag
		tst.w	d7
		bmi.s	Render_Sprites_NextObj
		movea.l	mappings(a0),a1
		moveq	#0,d4
		btst	#5,d6		; is the static mappings flag set?
		bne.s	loc_1ADD8	; if it is, branch
		move.b	mapping_frame(a0),d4
		add.w	d4,d4
		adda.w	(a1,d4.w),a1
		move.w	(a1)+,d4
		subq.w	#1,d4		; get number of pieces
		bmi.s	Render_Sprites_NextObj	; if there are 0 pieces, branch

loc_1ADD8:
		move.w	art_tile(a0),d5
		jsr	sub_1AF6C(pc)

; loc_1ADE0:
Render_Sprites_NextObj:					; Render_Sprites+6Cj ...
		subq.w	#2,(a5)		; decrement object count
		bne.w	loc_1AD54	; if there are objects left, repeat

; loc_1ADE6:
Render_Sprites_NextLevel:
		cmpa.l	#Sprite_table_input,a5
		bne.s	loc_1ADFC
		cmpi.b	#9,(Current_zone).w	; LRZ?
		bne.s	loc_1ADFC
		jsr	(sub_1CB68).l

loc_1ADFC:
					; Render_Sprites+D4j
		lea	$80(a5),a5	; load next priority level
		cmpa.w	#$B000,a5
		blo.w	loc_1AD4A
		move.w	d7,d6
		bmi.s	loc_1AE18
		moveq	#0,d0

loc_1AE10:
		move.w	d0,(a6)
		addq.w	#8,a6
		dbf	d7,loc_1AE10

loc_1AE18:
		subi.w	#$4F,d6
		neg.w	d6
		move.b	d6,(Sprites_drawn).w
		tst.w	(ScrEvents_10).w
		beq.s	locret_1AE56
		clr.w	(ScrEvents_10).w

loc_1AE34:
		lea	(Sprite_table_buffer-4).w,a0
		move.w	#$7C0,d0
		moveq	#$4E,d1

loc_1AE3E:
					; Render_Sprites+134j
		addq.w	#8,a0
		cmp.w	(a0),d0
		dbeq	d1,loc_1AE3E
		bne.s	locret_1AE56
		move.w	#1,2(a0)
		clr.w	$A(a0)
		subq.w	#1,d1
		bpl.s	loc_1AE3E

locret_1AE56:
; WARNING: HOTFIX FOR PLAYERS DYING WHEN CMARA WRAPS,
; AND ONE PLAYER IS IN THE WRAPPING PART AND OTHER IS NOT!!!
; ITS HACKISH, I KNOW
	rts
		move.w	Camera_Y_Pos_Copy.w,d0		; get camera y-pos
		bpl.s	.rts				; if positive, this check if redundant
		lea	Player_1.w,a1			; check Sonic
		bsr.s	.chkpl				; ''
		lea	Player_2.w,a1			; check Tails

.chkpl		tst.b	render_flags(a1)		; check if marked offscreen
		bmi.s	.rts				; if not, branch
		move.w	x_pos(a1),d1			; get y-pos of player
		sub.w	d0,d1				; sub camera y-pos

		moveq	#0,d2
		move.b	height_pixels(a0),d2		; get pl height
		add.w	d2,d1				; add to val
		bmi.s	.rts				; if above screen, branch
		or.b	#$80,render_flags(a1)		; else make it onscreen
.rts		rts
; ---------------------------------------------------------------------------

loc_1AE58:
		btst	#2,d6		; is this to be positioned by screen coordinates?
		bne.s	loc_1AEA2	; if it is, branch
		moveq	#0,d2

		; check if object is within X bounds
		move.b	width_pixels(a0),d2
		subi.w	#128,d0
		move.w	d0,d3
		add.w	d2,d3
		bmi.w	Render_Sprites_NextObj
		move.w	d0,d3
		sub.w	d2,d3
		cmpi.w	#320,d3
		bge.w	Render_Sprites_NextObj
		addi.w	#128,d0

		; check if object is within Y bounds
		move.b	height_pixels(a0),d2
		subi.w	#128,d1
		move.w	d1,d3
		add.w	d2,d3
		bmi.w	Render_Sprites_NextObj
		move.w	d1,d3
		sub.w	d2,d3
		cmpi.w	#224,d3
		bge.w	Render_Sprites_NextObj
		addi.w	#128,d1
		bra.s	loc_1AEE4
; ---------------------------------------------------------------------------

loc_1AEA2:
		moveq	#0,d2
		move.b	7(a0),d2
		sub.w	(a3),d0
		move.w	d0,d3
		add.w	d2,d3
		bmi.w	Render_Sprites_NextObj
		move.w	d0,d3
		sub.w	d2,d3
		cmpi.w	#$140,d3
		bge.w	Render_Sprites_NextObj
		addi.w	#$80,d0
		sub.w	4(a3),d1
		move.b	6(a0),d2
		add.w	d2,d1
		and.w	(Screen_Y_wrap_value).w,d1
		move.w	d2,d3
		add.w	d2,d2
		addi.w	#$E0,d2
		cmp.w	d2,d1
		bhs.w	Render_Sprites_NextObj
		addi.w	#$80,d1
		sub.w	d3,d1

loc_1AEE4:
		ori.b	#$80,4(a0)
		tst.w	d7
		bmi.w	Render_Sprites_NextObj
		move.w	$A(a0),d5
		movea.l	$C(a0),a2
		moveq	#0,d4
		move.b	$22(a0),d4
		beq.s	loc_1AF1C
		add.w	d4,d4
		lea	(a2),a1
		adda.w	(a1,d4.w),a1
		move.w	(a1)+,d4
		subq.w	#1,d4
		bmi.s	loc_1AF1C
		move.w	d6,d3
		jsr	sub_1B070(pc)
		move.w	d3,d6
		tst.w	d7
		bmi.w	Render_Sprites_NextObj

loc_1AF1C:
					; Render_Sprites+1ECj
		move.w	$16(a0),d3
		subq.w	#1,d3
		bcs.w	Render_Sprites_NextObj
		lea	$18(a0),a0

loc_1AF2A:
		move.w	(a0)+,d0
		move.w	(a0)+,d1
		btst	#2,d6
		beq.s	loc_1AF46
		sub.w	(a3),d0
		addi.w	#$80,d0
		sub.w	4(a3),d1
		addi.w	#$80,d1
		and.w	(Screen_Y_wrap_value).w,d1

loc_1AF46:
		addq.w	#1,a0
		moveq	#0,d4
		move.b	(a0)+,d4
		add.w	d4,d4
		lea	(a2),a1
		adda.w	(a1,d4.w),a1
		move.w	(a1)+,d4
		subq.w	#1,d4
		bmi.s	loc_1AF62
		move.w	d6,-(sp)
		jsr	sub_1B070(pc)
		move.w	(sp)+,d6

loc_1AF62:
		tst.w	d7
		dbmi	d3,loc_1AF2A
		bra.w	Render_Sprites_NextObj
; End of function Render_Sprites


; =============== S U B R O U T I N E =======================================


sub_1AF6C:

		lsr.b	#1,d6
		bcs.s	loc_1AF9E
		lsr.b	#1,d6
		bcs.w	loc_1B038

loc_1AF76:
		move.b	(a1)+,d2
		ext.w	d2
		add.w	d1,d2
		move.w	d2,(a6)+
		move.b	(a1)+,(a6)+
		addq.w	#1,a6
		move.w	(a1)+,d2
		add.w	d5,d2
		move.w	d2,(a6)+
		move.w	(a1)+,d2
		add.w	d0,d2
		andi.w	#$1FF,d2
		bne.s	loc_1AF94
		addq.w	#1,d2

loc_1AF94:
		move.w	d2,(a6)+
		subq.w	#1,d7
		dbmi	d4,loc_1AF76
		rts
; ---------------------------------------------------------------------------

loc_1AF9E:
		lsr.b	#1,d6
		bcs.s	loc_1AFE8

loc_1AFA2:
		move.b	(a1)+,d2
		ext.w	d2
		add.w	d1,d2
		move.w	d2,(a6)+
		move.b	(a1)+,d6
		move.b	d6,(a6)+
		addq.w	#1,a6
		move.w	(a1)+,d2
		add.w	d5,d2
		eori.w	#$800,d2
		move.w	d2,(a6)+
		move.w	(a1)+,d2
		neg.w	d2
		move.b	byte_1AFD8(pc,d6.w),d6
		sub.w	d6,d2
		add.w	d0,d2
		andi.w	#$1FF,d2
		bne.s	loc_1AFCE
		addq.w	#1,d2

loc_1AFCE:
		move.w	d2,(a6)+
		subq.w	#1,d7
		dbmi	d4,loc_1AFA2
		rts
; ---------------------------------------------------------------------------
byte_1AFD8:	dc.b 8
		dc.b 8
		dc.b 8
		dc.b 8
		dc.b $10
		dc.b $10
		dc.b $10
		dc.b $10
		dc.b $18
		dc.b $18
		dc.b $18
		dc.b $18
		dc.b $20
		dc.b $20
		dc.b $20
		dc.b $20
; ---------------------------------------------------------------------------

loc_1AFE8:

		move.b	(a1)+,d2
		ext.w	d2
		neg.w	d2
		move.b	(a1),d6
		move.b	byte_1B028(pc,d6.w),d6
		sub.w	d6,d2
		add.w	d1,d2
		move.w	d2,(a6)+
		move.b	(a1)+,d6
		move.b	d6,(a6)+
		addq.w	#1,a6
		move.w	(a1)+,d2
		add.w	d5,d2
		eori.w	#$1800,d2
		move.w	d2,(a6)+
		move.w	(a1)+,d2
		neg.w	d2
		move.b	byte_1AFD8(pc,d6.w),d6
		sub.w	d6,d2
		add.w	d0,d2
		andi.w	#$1FF,d2
		bne.s	loc_1B01E
		addq.w	#1,d2

loc_1B01E:
		move.w	d2,(a6)+
		subq.w	#1,d7
		dbmi	d4,loc_1AFE8
		rts
; ---------------------------------------------------------------------------
byte_1B028:	dc.b 8
		dc.b $10
		dc.b $18
		dc.b $20
		dc.b 8
		dc.b $10
		dc.b $18
		dc.b $20
		dc.b 8
		dc.b $10
		dc.b $18
		dc.b $20
		dc.b 8
		dc.b $10
		dc.b $18
		dc.b $20
; ---------------------------------------------------------------------------

loc_1B038:

		move.b	(a1)+,d2
		ext.w	d2
		neg.w	d2
		move.b	(a1)+,d6
		move.b	d6,2(a6)
		move.b	byte_1B028(pc,d6.w),d6
		sub.w	d6,d2
		add.w	d1,d2
		move.w	d2,(a6)+
		addq.w	#2,a6
		move.w	(a1)+,d2
		add.w	d5,d2
		eori.w	#$1000,d2
		move.w	d2,(a6)+
		move.w	(a1)+,d2
		add.w	d0,d2
		andi.w	#$1FF,d2
		bne.s	loc_1B066
		addq.w	#1,d2

loc_1B066:
		move.w	d2,(a6)+
		subq.w	#1,d7
		dbmi	d4,loc_1B038
		rts
; End of function sub_1AF6C


; =============== S U B R O U T I N E =======================================


sub_1B070:
					; Render_Sprites+23Ct ...
		lsr.b	#1,d6
		bcs.s	loc_1B0C2
		lsr.b	#1,d6
		bcs.w	loc_1B19C

loc_1B07A:

		move.b	(a1)+,d2
		ext.w	d2
		add.w	d1,d2
		cmpi.w	#$60,d2
		bls.s	loc_1B0BA
		cmpi.w	#$160,d2
		bhs.s	loc_1B0BA
		move.w	d2,(a6)+
		move.b	(a1)+,(a6)+
		addq.w	#1,a6
		move.w	(a1)+,d2
		add.w	d5,d2
		move.w	d2,(a6)+
		move.w	(a1)+,d2
		add.w	d0,d2
		cmpi.w	#$60,d2
		bls.s	loc_1B0B2
		cmpi.w	#$1C0,d2
		bhs.s	loc_1B0B2
		move.w	d2,(a6)+
		subq.w	#1,d7
		dbmi	d4,loc_1B07A
		rts
; ---------------------------------------------------------------------------

loc_1B0B2:

		subq.w	#6,a6
		dbf	d4,loc_1B07A
		rts
; ---------------------------------------------------------------------------

loc_1B0BA:

		addq.w	#5,a1
		dbf	d4,loc_1B07A
		rts
; ---------------------------------------------------------------------------

loc_1B0C2:
		lsr.b	#1,d6
		bcs.s	loc_1B12C

loc_1B0C6:

		move.b	(a1)+,d2
		ext.w	d2
		add.w	d1,d2
		cmpi.w	#$60,d2
		bls.s	loc_1B114
		cmpi.w	#$160,d2
		bhs.s	loc_1B114
		move.w	d2,(a6)+
		move.b	(a1)+,d6
		move.b	d6,(a6)+
		addq.w	#1,a6
		move.w	(a1)+,d2
		add.w	d5,d2
		eori.w	#$800,d2
		move.w	d2,(a6)+
		move.w	(a1)+,d2
		neg.w	d2
		move.b	byte_1B11C(pc,d6.w),d6
		sub.w	d6,d2
		add.w	d0,d2
		cmpi.w	#$60,d2
		bls.s	loc_1B10C
		cmpi.w	#$1C0,d2
		bhs.s	loc_1B10C
		move.w	d2,(a6)+
		subq.w	#1,d7
		dbmi	d4,loc_1B0C6
		rts
; ---------------------------------------------------------------------------

loc_1B10C:

		subq.w	#6,a6
		dbf	d4,loc_1B0C6
		rts
; ---------------------------------------------------------------------------

loc_1B114:

		addq.w	#5,a1
		dbf	d4,loc_1B0C6
		rts
; ---------------------------------------------------------------------------
byte_1B11C:	dc.b 8
		dc.b 8
		dc.b 8
		dc.b 8
		dc.b $10
		dc.b $10
		dc.b $10
		dc.b $10
		dc.b $18
		dc.b $18
		dc.b $18
		dc.b $18
		dc.b $20
		dc.b $20
		dc.b $20
		dc.b $20
; ---------------------------------------------------------------------------

loc_1B12C:

		move.b	(a1)+,d2
		ext.w	d2
		neg.w	d2
		move.b	(a1),d6
		move.b	byte_1B18C(pc,d6.w),d6
		sub.w	d6,d2
		add.w	d1,d2
		cmpi.w	#$60,d2
		bls.s	loc_1B184
		cmpi.w	#$160,d2
		bhs.s	loc_1B184
		move.w	d2,(a6)+
		move.b	(a1)+,d6
		move.b	d6,(a6)+
		addq.w	#1,a6
		move.w	(a1)+,d2
		add.w	d5,d2
		eori.w	#$1800,d2
		move.w	d2,(a6)+
		move.w	(a1)+,d2
		neg.w	d2
		move.b	byte_1B11C(pc,d6.w),d6
		sub.w	d6,d2
		add.w	d0,d2
		cmpi.w	#$60,d2
		bls.s	loc_1B17C
		cmpi.w	#$1C0,d2
		bhs.s	loc_1B17C
		move.w	d2,(a6)+
		subq.w	#1,d7
		dbmi	d4,loc_1B12C
		rts
; ---------------------------------------------------------------------------

loc_1B17C:

		subq.w	#6,a6
		dbf	d4,loc_1B12C
		rts
; ---------------------------------------------------------------------------

loc_1B184:

		addq.w	#5,a1
		dbf	d4,loc_1B12C
		rts
; ---------------------------------------------------------------------------
byte_1B18C:	dc.b 8
		dc.b $10
		dc.b $18
		dc.b $20
		dc.b 8
		dc.b $10
		dc.b $18
		dc.b $20
		dc.b 8
		dc.b $10
		dc.b $18
		dc.b $20
		dc.b 8
		dc.b $10
		dc.b $18
		dc.b $20
; ---------------------------------------------------------------------------

loc_1B19C:

		move.b	(a1)+,d2
		ext.w	d2
		neg.w	d2
		move.b	(a1)+,d6
		move.b	d6,2(a6)
		move.b	byte_1B18C(pc,d6.w),d6
		sub.w	d6,d2
		add.w	d1,d2
		cmpi.w	#$60,d2
		bls.s	loc_1B1EC
		cmpi.w	#$160,d2
		bhs.s	loc_1B1EC
		move.w	d2,(a6)+
		addq.w	#2,a6
		move.w	(a1)+,d2
		add.w	d5,d2
		eori.w	#$1000,d2
		move.w	d2,(a6)+
		move.w	(a1)+,d2
		add.w	d0,d2
		cmpi.w	#$60,d2
		bls.s	loc_1B1E4
		cmpi.w	#$1C0,d2
		bhs.s	loc_1B1E4
		move.w	d2,(a6)+
		subq.w	#1,d7
		dbmi	d4,loc_1B19C
		rts
; ---------------------------------------------------------------------------

loc_1B1E4:

		subq.w	#6,a6
		dbf	d4,loc_1B19C
		rts
; ---------------------------------------------------------------------------

loc_1B1EC:

		addq.w	#4,a1
		dbf	d4,loc_1B19C
		rts
; End of function sub_1B070

; ---------------------------------------------------------------------------
; loc_1B1F4:
Render_Sprites_CompetitionMode:
		moveq	#$4D,d7
		moveq	#0,d6
		lea	(Sprite_table_input).w,a5
		lea	(Camera_X_pos_copy).w,a3
		lea	(Sprite_table_buffer+$10).w,a6
		tst.w	(Use_normal_sprite_table).w
		beq.s	loc_1B210
		lea	(Sprite_table_buffer_2+$10).l,a6

loc_1B210:
		tst.b	(Level_started_flag).w
		beq.s	loc_1B21C
		jsr	(sub_DB3C).l

loc_1B21C:

		move.b	1(a5),(a5)
		beq.w	loc_1B2C8
		lea	2(a5),a4

loc_1B228:
		movea.w	(a4)+,a0
		andi.b	#$7F,4(a0)
		move.b	4(a0),d6
		btst	#4,d6
		bne.w	loc_1B2C2
		move.w	$10(a0),d0
		move.w	$14(a0),d1
		btst	#6,d6
		bne.w	loc_1B3EC
		btst	#2,d6
		beq.s	loc_1B294
		moveq	#0,d2
		sub.w	(a3),d0
		move.b	7(a0),d2
		add.w	d2,d0
		and.w	(Screen_X_wrap_value).w,d0
		move.w	d2,d3
		add.w	d2,d2
		addi.w	#$140,d2
		cmp.w	d2,d0
		bhs.s	loc_1B2C2
		addi.w	#$80,d0
		sub.w	d3,d0
		moveq	#0,d2
		sub.w	4(a3),d1
		move.b	6(a0),d2
		add.w	d2,d1
		and.w	(Screen_Y_wrap_value).w,d1
		move.w	d2,d3
		add.w	d2,d2
		addi.w	#$70,d2
		cmp.w	d2,d1
		bhs.s	loc_1B2C2
		addi.w	#$80,d1
		sub.w	d3,d1

loc_1B294:
		ori.b	#$80,4(a0)
		tst.w	d7
		bmi.s	loc_1B2C2
		movea.l	$C(a0),a1
		moveq	#0,d4
		btst	#5,d6
		bne.s	loc_1B2BA
		move.b	$22(a0),d4
		add.w	d4,d4
		adda.w	(a1,d4.w),a1
		move.w	(a1)+,d4
		subq.w	#1,d4
		bmi.s	loc_1B2C2

loc_1B2BA:
		move.w	$A(a0),d5
		jsr	sub_1AF6C(pc)

loc_1B2C2:

		subq.b	#2,(a5)
		bne.w	loc_1B228

loc_1B2C8:
		lea	$80(a5),a5
		cmpa.l	#Player_1,a5
		blo.w	loc_1B21C
		tst.w	d7
		bmi.s	loc_1B2E4
		moveq	#0,d0

loc_1B2DC:
		move.w	d0,(a6)
		addq.w	#8,a6
		dbf	d7,loc_1B2DC

loc_1B2E4:
		move.l	(Sprite_table_input+$102).w,d0
		cmpi.l	#$B000B04A,d0
		bne.s	loc_1B2F6
		swap	d0
		move.l	d0,(Sprite_table_input+$102).w

loc_1B2F6:
		moveq	#$4F,d7
		lea	(Sprite_table_input).w,a5
		lea	(Camera_X_pos_P2_copy).w,a3
		lea	(Sprite_table_buffer_P2).l,a6
		tst.w	(Use_normal_sprite_table).w
		beq.s	loc_1B312
		lea	(Sprite_table_buffer_P2_2).l,a6

loc_1B312:

		tst.b	1(a5)
		beq.w	loc_1B3CA
		lea	2(a5),a4

loc_1B32A:
		movea.w	(a4)+,a0
		move.b	4(a0),d6
		btst	#3,d6
		bne.w	loc_1B3C2
		move.w	$10(a0),d0
		move.w	$14(a0),d1
		btst	#6,d6
		bne.w	loc_1B4B8
		btst	#2,d6
		beq.s	loc_1B390
		moveq	#0,d2
		sub.w	(a3),d0
		move.b	7(a0),d2
		add.w	d2,d0
		and.w	(Screen_X_wrap_value).w,d0
		move.w	d2,d3
		add.w	d2,d2
		addi.w	#$140,d2
		cmp.w	d2,d0
		bhs.s	loc_1B3C2
		addi.w	#$80,d0
		sub.w	d3,d0
		moveq	#0,d2
		sub.w	4(a3),d1
		move.b	6(a0),d2
		add.w	d2,d1
		and.w	(Screen_Y_wrap_value).w,d1
		move.w	d2,d3
		add.w	d2,d2
		addi.w	#$70,d2
		cmp.w	d2,d1
		bhs.s	loc_1B3C2
		addi.w	#$80,d1
		sub.w	d3,d1

loc_1B390:
		addi.w	#$70,d1
		ori.b	#$80,4(a0)
		tst.w	d7
		bmi.s	loc_1B3C2
		movea.l	$C(a0),a1
		moveq	#0,d4
		btst	#5,d6
		bne.s	loc_1B3BA
		move.b	$22(a0),d4
		add.w	d4,d4
		adda.w	(a1,d4.w),a1
		move.w	(a1)+,d4
		subq.w	#1,d4
		bmi.s	loc_1B3C2

loc_1B3BA:
		move.w	$A(a0),d5
		jsr	sub_1AF6C(pc)

loc_1B3C2:

		subq.b	#2,1(a5)
		bne.w	loc_1B32A

loc_1B3CA:
		lea	$80(a5),a5
		cmpa.l	#Player_1,a5
		blo.s	loc_1B3DE
		tst.w	d7
		bmi.s	loc_1B3E6
		moveq	#0,d0

loc_1B3DE:
		move.w	d0,(a6)
		addq.w	#8,a6
		dbf	d7,loc_1B3DE

loc_1B3E6:
		st	(Chg_sprite_table).w
		rts
; ---------------------------------------------------------------------------

loc_1B3EC:
		moveq	#0,d2
		sub.w	(a3),d0
		move.b	7(a0),d2
		add.w	d2,d0
		and.w	(Screen_X_wrap_value).w,d0
		move.w	d2,d3
		add.w	d2,d2
		addi.w	#$140,d2
		cmp.w	d2,d0
		bhs.w	loc_1B2C2
		addi.w	#$80,d0
		sub.w	d3,d0
		moveq	#0,d2
		sub.w	4(a3),d1
		move.b	6(a0),d2
		add.w	d2,d1
		and.w	(Screen_Y_wrap_value).w,d1
		move.w	d2,d3
		add.w	d2,d2
		addi.w	#$70,d2
		cmp.w	d2,d1
		bhs.w	loc_1B2C2
		addi.w	#$80,d1
		sub.w	d3,d1
		ori.b	#$80,4(a0)
		tst.w	d7
		bmi.w	loc_1B2C2
		move.w	$A(a0),d5
		movea.l	$C(a0),a2
		moveq	#0,d4
		move.b	$22(a0),d4
		beq.s	loc_1B46A
		add.w	d4,d4
		lea	(a2),a1
		adda.w	(a1,d4.w),a1
		move.w	(a1)+,d4
		subq.w	#1,d4
		bmi.s	loc_1B46A
		move.w	d6,d3
		jsr	sub_1B070(pc)
		move.w	d3,d6
		tst.w	d7
		bmi.w	loc_1B2C2

loc_1B46A:

		move.w	$16(a0),d3
		subq.w	#1,d3
		bcs.w	loc_1B2C2
		lea	$18(a0),a0

loc_1B478:
		move.w	(a0)+,d0
		sub.w	(a3),d0
		addi.w	#$80,d0
		and.w	(Screen_X_wrap_value).w,d0
		move.w	(a0)+,d1
		sub.w	4(a3),d1
		addi.w	#$80,d1
		and.w	(Screen_Y_wrap_value).w,d1
		addq.w	#1,a0
		moveq	#0,d4
		move.b	(a0)+,d4
		add.w	d4,d4
		lea	(a2),a1
		adda.w	(a1,d4.w),a1
		move.w	(a1)+,d4
		subq.w	#1,d4
		bmi.s	loc_1B4AE
		move.w	d6,-(sp)
		jsr	sub_1B070(pc)
		move.w	(sp)+,d6

loc_1B4AE:
		tst.w	d7
		dbmi	d3,loc_1B478
		bra.w	loc_1B2C2
; ---------------------------------------------------------------------------

loc_1B4B8:
		moveq	#0,d2
		sub.w	(a3),d0
		move.b	7(a0),d2
		add.w	d2,d0
		and.w	(Screen_X_wrap_value).w,d0
		move.w	d2,d3
		add.w	d2,d2
		addi.w	#$140,d2
		cmp.w	d2,d0
		bhs.w	loc_1B3C2
		addi.w	#$80,d0
		sub.w	d3,d0
		moveq	#0,d2
		sub.w	4(a3),d1
		move.b	6(a0),d2
		add.w	d2,d1
		and.w	(Screen_Y_wrap_value).w,d1
		move.w	d2,d3
		add.w	d2,d2
		addi.w	#$70,d2
		cmp.w	d2,d1
		bhs.w	loc_1B3C2
		addi.w	#$F0,d1
		sub.w	d3,d1
		ori.b	#$80,4(a0)
		tst.w	d7
		bmi.w	loc_1B3C2
		move.w	$A(a0),d5
		movea.l	$C(a0),a2
		moveq	#0,d4
		move.b	$22(a0),d4
		beq.s	loc_1B536
		add.w	d4,d4
		lea	(a2),a1
		adda.w	(a1,d4.w),a1
		move.w	(a1)+,d4
		subq.w	#1,d4
		bmi.s	loc_1B536
		move.w	d6,d3
		jsr	sub_1B070(pc)
		move.w	d3,d6
		tst.w	d7
		bmi.w	loc_1B3C2

loc_1B536:

		move.w	$16(a0),d3
		subq.w	#1,d3
		bcs.w	loc_1B3C2
		lea	$18(a0),a0

loc_1B544:
		move.w	(a0)+,d0
		sub.w	(a3),d0
		addi.w	#$80,d0
		and.w	(Screen_X_wrap_value).w,d0
		move.w	(a0)+,d1
		sub.w	4(a3),d1
		addi.w	#$80,d1
		and.w	(Screen_Y_wrap_value).w,d1
		addi.w	#$70,d1
		addq.w	#1,a0
		moveq	#0,d4
		move.b	(a0)+,d4
		add.w	d4,d4
		lea	(a2),a1
		adda.w	(a1,d4.w),a1
		move.w	(a1)+,d4
		subq.w	#1,d4
		bmi.s	loc_1B57E
		move.w	d6,-(sp)
		jsr	sub_1B070(pc)
		move.w	(sp)+,d6

loc_1B57E:
		tst.w	d7
		dbmi	d3,loc_1B544
		bra.w	loc_1B3C2
; ---------------------------------------------------------------------------

Load_Sprites:

		moveq	#0,d0
		move.b	(Object_load_routine).w,d0
		jmp	loc_1B69A(pc,d0.w)
; End of function Load_Sprites

; ---------------------------------------------------------------------------

loc_1B69A:
		bra.w	loc_1B6A8
; ---------------------------------------------------------------------------
		bra.w	loc_1B7F2
; ---------------------------------------------------------------------------
		bra.w	loc_1B7F2
; ---------------------------------------------------------------------------
		rts
; ---------------------------------------------------------------------------

loc_1B6A8:
		move.l	#Sprite_ListingK,d0
		move.b	(Current_zone).w,d1
		cmpi.b	#$16,d1
		bhs.s	loc_1B6CA
		cmpi.b	#$E,d1
		bhs.s	loc_1B6C4
		cmpi.b	#7,d1
		bhs.s	loc_1B6CA

loc_1B6C4:
		move.l	#Sprite_Listing3,d0

loc_1B6CA:

		move.l	d0,(Object_index_addr).w
		addq.b	#4,(Object_load_routine).w
		tst.b	(NoReset_RespawnTbl).w
		bne.s	loc_1B6E8
		lea	(Object_respawn_table).w,a0
		moveq	#0,d0
		move.w	#$BF,d1

loc_1B6E2:
		move.l	d0,(a0)+
		dbf	d1,loc_1B6E2

loc_1B6E8:
		move.w	(Current_zone_and_act).w,d0
		ror.b	#1,d0
		lsr.w	#5,d0

loc_1B6F0:
		lea	(SpriteLocPtrs).l,a0
		movea.l	(a0,d0.w),a0
		cmpi.w	#$1701,(Current_zone_and_act).w
		beq.s	loc_1B720
		cmpi.b	#$16,(Current_zone).w
		bhs.s	loc_1B76A

loc_1B70A:
		cmpi.b	#$14,(Current_zone).w
		beq.s	loc_1B76A
		cmpi.b	#$13,(Current_zone).w
		bhs.s	loc_1B720
		tst.w	(Competition_mode).w
		beq.s	loc_1B76A

loc_1B720:

		addq.b	#8,(Object_load_routine).w
		jsr	Create_New_Sprite.w
		bne.s	loc_1B74C
		lea	(__u_F712).w,a3
		movea.l	(Object_index_addr).w,a4
		move.w	#$800,d6
		cmpi.w	#$1701,(Current_zone_and_act).w
		bne.s	loc_1B742
		move.w	#$1780,d6

loc_1B742:

		cmp.w	(a0),d6
		bls.s	loc_1B74C
		jsr	sub_1BA0C(pc)
		beq.s	loc_1B742

loc_1B74C:

		clr.w	(Camera_X_pos_coarse_back).w
		cmpi.w	#$1701,(Current_zone_and_act).w
		bne.s	locret_1B768
		move.w	(Camera_X_pos).w,d1
		subi.w	#$80,d1
		andi.w	#$FF80,d1
		move.w	d1,(Camera_X_pos_coarse_back).w

locret_1B768:
		rts
; ---------------------------------------------------------------------------

loc_1B76A:

		move.l	a0,(Object_load_addr_front).w
		move.l	a0,(Object_load_addr_back).w
		lea	(Object_respawn_table).w,a3
		cmpi.b	#$14,(Current_zone).w
		bne.s	loc_1B78E
		lea	(Level_layout_main+$3F8).w,a3
		moveq	#$7F,d6

loc_1B784:
		clr.l	(a3)+
		dbf	d6,loc_1B784
		lea	(Level_layout_main+$3F8).w,a3

loc_1B78E:
		move.w	(Camera_X_pos).w,d6
		subi.w	#$80,d6
		bcc.s	loc_1B79A
		moveq	#0,d6

loc_1B79A:
		andi.w	#$FF80,d6
		movea.l	(Object_load_addr_front).w,a0

loc_1B7A2:
		cmp.w	(a0),d6
		bls.s	loc_1B7AC
		addq.w	#6,a0
		addq.w	#1,a3
		bra.s	loc_1B7A2
; ---------------------------------------------------------------------------

loc_1B7AC:
		move.l	a0,(Object_load_addr_front).w
		move.w	a3,(Object_respawn_index_front).w
		lea	(Object_respawn_table).w,a3
		cmpi.b	#$14,(Current_zone).w
		bne.s	loc_1B7C4
		lea	(Level_layout_main+$3F8).w,a3

loc_1B7C4:
		movea.l	(Object_load_addr_back).w,a0
		subi.w	#$80,d6
		bcs.s	loc_1B7D8

loc_1B7CE:
		cmp.w	(a0),d6
		bls.s	loc_1B7D8
		addq.w	#6,a0
		addq.w	#1,a3
		bra.s	loc_1B7CE
; ---------------------------------------------------------------------------

loc_1B7D8:

		move.l	a0,(Object_load_addr_back).w
		move.w	a3,(Object_respawn_index_back).w
		move.w	#-1,(Camera_X_pos_coarse).w
		move.w	(Camera_Y_pos).w,d0
		andi.w	#$FF80,d0
		move.w	d0,(Camera_Y_pos_coarse).w

loc_1B7F2:

		move.w	(Camera_Y_pos).w,d1
		subi.w	#$80,d1
		andi.w	#$FF80,d1
		move.w	d1,(Camera_Y_pos_coarse_back).w
		move.w	(Camera_X_pos).w,d1
		subi.w	#$80,d1
		andi.w	#$FF80,d1
		move.w	d1,(Camera_X_pos_coarse_back).w
		movea.l	(Object_index_addr).w,a4
		tst.w	(Camera_min_Y_pos).w
		bpl.s	loc_1B84A
		lea	loc_1BA40(pc),a6
		move.w	(Camera_Y_pos).w,d3
		andi.w	#$FF80,d3
		move.w	d3,d4
		addi.w	#$200,d4
		subi.w	#$80,d3
		bpl.s	loc_1B83A
		and.w	(Screen_Y_wrap_value).w,d3
		bra.s	loc_1B864
; ---------------------------------------------------------------------------

loc_1B83A:
		move.w	(Screen_Y_wrap_value).w,d0
		addq.w	#1,d0
		cmp.w	d0,d4
		bls.s	loc_1B860
		and.w	(Screen_Y_wrap_value).w,d4
		bra.s	loc_1B864
; ---------------------------------------------------------------------------

loc_1B84A:
		move.w	(Camera_Y_pos).w,d3
		andi.w	#$FF80,d3
		move.w	d3,d4
		addi.w	#$200,d4
		subi.w	#$80,d3
		bpl.s	loc_1B860
		moveq	#0,d3

loc_1B860:


		lea	loc_1BA92(pc),a6

loc_1B864:

		move.w	#$FFF,d5
		move.w	(Camera_X_pos).w,d6
		andi.w	#$FF80,d6
		cmp.w	(Camera_X_pos_coarse).w,d6
		beq.w	loc_1B91A
		bge.s	loc_1B8D2
		move.w	d6,(Camera_X_pos_coarse).w
		movea.l	(Object_load_addr_back).w,a0
		movea.w	(Object_respawn_index_back).w,a3
		subi.w	#$80,d6
		bcs.s	loc_1B8A8
		jsr	Create_New_Sprite.w
		bne.s	loc_1B8A8

loc_1B892:
		cmp.w	-6(a0),d6
		bge.s	loc_1B8A8
		subq.w	#6,a0
		subq.w	#1,a3
		jsr	(a6)
		bne.s	loc_1B8A4
		subq.w	#6,a0
		bra.s	loc_1B892
; ---------------------------------------------------------------------------

loc_1B8A4:
		addq.w	#6,a0
		addq.w	#1,a3

loc_1B8A8:

		move.l	a0,(Object_load_addr_back).w
		move.w	a3,(Object_respawn_index_back).w
		movea.l	(Object_load_addr_front).w,a0
		movea.w	(Object_respawn_index_front).w,a3
		addi.w	#$300,d6

loc_1B8BC:
		cmp.w	-6(a0),d6
		bgt.s	loc_1B8C8
		subq.w	#6,a0
		subq.w	#1,a3
		bra.s	loc_1B8BC
; ---------------------------------------------------------------------------

loc_1B8C8:
		move.l	a0,(Object_load_addr_front).w
		move.w	a3,(Object_respawn_index_front).w
		bra.s	loc_1B91A
; ---------------------------------------------------------------------------

loc_1B8D2:
		move.w	d6,(Camera_X_pos_coarse).w
		movea.l	(Object_load_addr_front).w,a0
		movea.w	(Object_respawn_index_front).w,a3
		addi.w	#$280,d6
		jsr	Create_New_Sprite.w
		bne.s	loc_1B8F2

loc_1B8E8:
		cmp.w	(a0),d6
		bls.s	loc_1B8F2
		jsr	(a6)
		addq.w	#1,a3
		beq.s	loc_1B8E8

loc_1B8F2:

		move.l	a0,(Object_load_addr_front).w
		move.w	a3,(Object_respawn_index_front).w
		movea.l	(Object_load_addr_back).w,a0
		movea.w	(Object_respawn_index_back).w,a3
		subi.w	#$300,d6
		bcs.s	loc_1B912

loc_1B908:
		cmp.w	(a0),d6
		bls.s	loc_1B912
		addq.w	#6,a0
		addq.w	#1,a3
		bra.s	loc_1B908
; ---------------------------------------------------------------------------

loc_1B912:

		move.l	a0,(Object_load_addr_back).w
		move.w	a3,(Object_respawn_index_back).w

loc_1B91A:

		move.w	(Camera_Y_pos).w,d6
		andi.w	#$FF80,d6
		move.w	d6,d3
		cmp.w	(Camera_Y_pos_coarse).w,d6
		beq.w	loc_1B9FA
		bge.s	loc_1B956
		tst.w	(Camera_min_Y_pos).w
		bpl.s	loc_1B94C
		tst.w	d6
		bne.s	loc_1B940
		cmpi.w	#$80,(Camera_Y_pos_coarse).w
		bne.s	loc_1B968

loc_1B940:

		subi.w	#$80,d3
		bpl.s	loc_1B982
		and.w	(Screen_Y_wrap_value).w,d3
		bra.s	loc_1B982
; ---------------------------------------------------------------------------

loc_1B94C:
		subi.w	#$80,d3
		bmi.w	loc_1B9FA
		bra.s	loc_1B982
; ---------------------------------------------------------------------------

loc_1B956:
		tst.w	(Camera_min_Y_pos).w
		bpl.s	loc_1B978
		tst.w	(Camera_Y_pos_coarse).w
		bne.s	loc_1B968
		cmpi.w	#$80,d6
		bne.s	loc_1B940

loc_1B968:

		addi.w	#$180,d3
		cmp.w	(Screen_Y_wrap_value).w,d3
		blo.s	loc_1B982
		and.w	(Screen_Y_wrap_value).w,d3
		bra.s	loc_1B982
; ---------------------------------------------------------------------------

loc_1B978:
		addi.w	#$180,d3
		cmp.w	(Screen_Y_wrap_value).w,d3
		bhi.s	loc_1B9FA

loc_1B982:

		jsr	Create_New_Sprite.w
		bne.s	loc_1B9FA
		move.w	d3,d4
		addi.w	#$80,d4
		move.w	#$FFF,d5
		movea.l	(Object_load_addr_back).w,a0
		movea.w	(Object_respawn_index_back).w,a3
		move.l	(Object_load_addr_front).w,d7
		sub.l	a0,d7
		beq.s	loc_1B9FA
		addq.w	#2,a0

loc_1B9A4:
		tst.b	(a3)
		bmi.s	loc_1B9F2
		move.w	(a0),d1
		and.w	d5,d1
		cmp.w	d3,d1
		blo.s	loc_1B9F2
		cmp.w	d4,d1
		bhi.s	loc_1B9F2
		bset	#7,(a3)
		move.w	-2(a0),$10(a1)
		move.w	(a0),d1
		move.w	d1,d2
		and.w	d5,d1
		move.w	d1,$14(a1)
		rol.w	#3,d2
		andi.w	#3,d2
		move.b	d2,4(a1)
		move.b	d2,$2A(a1)
		move.b	2(a0),d2
		add.w	d2,d2
		add.w	d2,d2
		move.l	(a4,d2.w),(a1)
		move.b	3(a0),$2C(a1)
		move.w	a3,respawn_addr(a1)
		jsr	CreateNewSprite4(pc)
		bne.s	loc_1B9FA

loc_1B9F2:

		addq.w	#6,a0
		addq.w	#1,a3
		subq.w	#6,d7
		bne.s	loc_1B9A4

loc_1B9FA:

		move.w	d6,(Camera_Y_pos_coarse).w
		rts
; ---------------------------------------------------------------------------
		bset	#7,(a3)
		beq.s	sub_1BA0C
		addq.w	#6,a0
		moveq	#0,d1
		rts

; =============== S U B R O U T I N E =======================================


sub_1BA0C:

		move.w	(a0)+,$10(a1)
		move.w	(a0)+,d1
		move.w	d1,d2
		andi.w	#$FFF,d1
		move.w	d1,$14(a1)
		rol.w	#3,d2
		andi.w	#3,d2
		move.b	d2,4(a1)
		move.b	d2,$2A(a1)
		move.b	(a0)+,d2
		add.w	d2,d2
		add.w	d2,d2
		move.l	(a4,d2.w),(a1)
		move.b	(a0)+,$2C(a1)
		move.w	a3,respawn_addr(a1)
		bra.w	CreateNewSprite4
; ---------------------------------------------------------------------------

loc_1BA40:
		tst.b	(a3)
		bpl.s	loc_1BA4A
		addq.w	#6,a0
		moveq	#0,d1
		rts
; ---------------------------------------------------------------------------

loc_1BA4A:
		move.w	(a0)+,d7
		move.w	(a0)+,d1
		move.w	d1,d2
		bmi.s	loc_1BA62
		and.w	d5,d1
		cmp.w	d3,d1
		bhs.s	loc_1BA64
		cmp.w	d4,d1
		bls.s	loc_1BA64
		addq.w	#2,a0
		moveq	#0,d1
		rts
; ---------------------------------------------------------------------------

loc_1BA62:
		and.w	d5,d1

loc_1BA64:

		bset	#7,(a3)
		move.w	d7,$10(a1)
		move.w	d1,$14(a1)
		rol.w	#3,d2
		andi.w	#3,d2
		move.b	d2,4(a1)
		move.b	d2,$2A(a1)
		move.b	(a0)+,d2
		add.w	d2,d2
		add.w	d2,d2
		move.l	(a4,d2.w),(a1)
		move.b	(a0)+,$2C(a1)
		move.w	a3,respawn_addr(a1)
		bra.s	CreateNewSprite4
; ---------------------------------------------------------------------------

loc_1BA92:
		tst.b	(a3)
		bpl.s	loc_1BA9C
		addq.w	#6,a0
		moveq	#0,d1
		rts
; ---------------------------------------------------------------------------

loc_1BA9C:
		move.w	(a0)+,d7
		move.w	(a0)+,d1
		move.w	d1,d2
		bmi.s	loc_1BAB4
		and.w	d5,d1
		cmp.w	d3,d1
		blo.s	loc_1BAAE
		cmp.w	d4,d1
		bls.s	loc_1BAB6

loc_1BAAE:
		addq.w	#2,a0
		moveq	#0,d1
		rts
; ---------------------------------------------------------------------------

loc_1BAB4:
		and.w	d5,d1

loc_1BAB6:
		bset	#7,(a3)
		move.w	d7,$10(a1)
		move.w	d1,$14(a1)
		rol.w	#3,d2
		andi.w	#3,d2
		move.b	d2,4(a1)
		move.b	d2,$2A(a1)
		move.b	(a0)+,d2
		add.w	d2,d2
		add.w	d2,d2
		move.l	(a4,d2.w),(a1)
		move.b	(a0)+,$2C(a1)
		move.w	a3,respawn_addr(a1)

CreateNewSprite4:

		subq.w	#1,d0
		bmi.s	locret_1BAF0

loc_1BAE6:
		lea	next_object(a1),a1
		tst.l	(a1)
		dbeq	d0,loc_1BAE6

locret_1BAF0:
		rts
; ---------------------------------------------------------------------------

Clear_SpriteRingMem:
		lea	(Dynamic_object_RAM).w,a1
		moveq	#$59,d1

loc_1BB84:
		lea	next_object(a1),a1
		tst.l	(a1)
		beq.s	loc_1BB98
		move.w	respawn_addr(a1),d0
		beq.s	loc_1BB98
		movea.w	d0,a2
		bclr	#7,(a2)

loc_1BB98:

		dbf	d1,loc_1BB84
		lea	(Ring_consumption_table).w,a2
		move.w	(a2)+,d1
		subq.w	#1,d1
		bcs.s	locret_1BBBC

loc_1BBA6:

		move.w	(a2)+,d0
		beq.s	loc_1BBA6
		movea.w	d0,a1
		move.w	#-1,(a1)
		clr.w	-2(a2)
		subq.w	#1,(Ring_consumption_table).w
		dbf	d1,loc_1BBA6

locret_1BBBC:
		rts
; ---------------------------------------------------------------------------

loc_1BBBE:
		move.w	(Camera_X_pos).w,d6
		addi.w	#$400,d6
		andi.w	#$FF80,d6
		cmp.w	(Camera_X_pos_coarse).w,d6
		beq.w	locret_1BC5E
		bge.s	loc_1BC1C
		move.w	d6,(Camera_X_pos_coarse).w
		movea.l	(Object_load_addr_back).w,a1
		movea.w	(Object_respawn_index_back).w,a3
		subi.w	#$80,d6
		bcs.s	loc_1BBF2

loc_1BBE6:
		cmp.w	-6(a1),d6
		bge.s	loc_1BBF2
		subq.w	#6,a1
		subq.w	#1,a3
		bra.s	loc_1BBE6
; ---------------------------------------------------------------------------

loc_1BBF2:

		move.l	a1,(Object_load_addr_back).w
		move.w	a3,(Object_respawn_index_back).w
		movea.l	(Object_load_addr_front).w,a1
		movea.w	(Object_respawn_index_front).w,a3
		addi.w	#$300,d6

loc_1BC06:
		cmp.w	-6(a1),d6
		bgt.s	loc_1BC12
		subq.w	#6,a1
		subq.w	#1,a3
		bra.s	loc_1BC06
; ---------------------------------------------------------------------------

loc_1BC12:
		move.l	a1,(Object_load_addr_front).w
		move.w	a3,(Object_respawn_index_front).w
		bra.s	locret_1BC5E
; ---------------------------------------------------------------------------

loc_1BC1C:
		move.w	d6,(Camera_X_pos_coarse).w
		movea.l	(Object_load_addr_front).w,a1
		movea.w	(Object_respawn_index_front).w,a3
		addi.w	#$280,d6

loc_1BC2C:
		cmp.w	(a1),d6
		bls.s	loc_1BC36
		addq.w	#6,a1
		addq.w	#1,a3
		bra.s	loc_1BC2C
; ---------------------------------------------------------------------------

loc_1BC36:
		move.l	a1,(Object_load_addr_front).w
		move.w	a3,(Object_respawn_index_front).w
		movea.l	(Object_load_addr_back).w,a1
		movea.w	(Object_respawn_index_back).w,a3
		subi.w	#$300,d6
		bcs.s	loc_1BC56

loc_1BC4C:
		cmp.w	(a1),d6
		bls.s	loc_1BC56
		addq.w	#6,a1
		addq.w	#1,a3
		bra.s	loc_1BC4C
; ---------------------------------------------------------------------------

loc_1BC56:

		move.l	a1,(Object_load_addr_back).w
		move.w	a3,(Object_respawn_index_back).w

locret_1BC5E:

		rts

; =============== S U B R O U T I N E =======================================


Get_LevelSizeStart:
		clr.b	(Deform_lock).w
		clr.b	(Scroll_lock).w
		clr.b	(Fast_V_scroll_flag).w
		moveq	#0,d0
		move.b	d0,(Dynamic_resize_routine).w
		move.w	(Current_zone_and_act).w,d0
		ror.b	#1,d0
		lsr.w	#5,d0

	move.l	ModeTable.w,a1		; NAT: Get mode table address
	jsr	$04(a1)			; get levelsize routine and jump

		move.l	(a0)+,d0
		move.l	d0,(Camera_min_X_pos).w
		move.l	d0,(Camera_target_min_X_pos).w
		move.l	d0,(Camera_min_X_pos_P2).w
		move.l	(a0)+,d0
		move.l	d0,(Camera_min_Y_pos).w
		move.l	d0,(Camera_target_min_Y_pos).w
		move.l	d0,(Camera_min_Y_pos_P2).w
		move.w	#$00,(Distance_from_screen_top).w
		move.w	#$00,(Distance_from_screen_top_P2).w
		move.w	#-1,(Screen_X_wrap_value).w
		move.w	#-1,(Screen_Y_wrap_value).w

loc_1BE46:
		tst.b	(Last_star_post_hit).w
		beq.s	loc_1BE5E
		jsr	(Load_Starpost_Settings).l
		move.w	(Player_1+x_pos).w,d1
		move.w	(Player_1+y_pos).w,d0
		bra.w	loc_1BF74
; ---------------------------------------------------------------------------

loc_1BE5E:
		moveq	#0,d1
		move.w	(a1)+,d1
		move.w	d1,(Player_1+x_pos).w
		moveq	#0,d0
		move.w	(a1),d0
		move.w	d0,(Player_1+y_pos).w
		tst.b	(Last_star_post_hit).w
		bne.w	loc_1BF74

loc_1BEC6:

		cmpi.w	#$500,(Current_zone_and_act).w
		bne.s	loc_1BF1E
		move.w	#$3A90,d1			; If in Ice Cap Act 1 and playing as Tails,
		move.w	d1,(Camera_min_X_pos).w	; we use a different start position and different level sizes
		move.w	d1,(Camera_target_min_X_pos).w	; to skip the snowboarding sequence
		move.w	d1,(Camera_min_X_pos_P2).w
		move.w	#$3C00,d1
		move.w	d1,Player_1+x_pos.w
		move.w	#$3B60,d1
		move.w	d1,(Camera_X_pos).w
		move.w	d1,(Camera_X_pos_P2).w
		move.w	#$76C,d0
		move.w	d0,Player_1+y_pos.w
		move.w	#$FF00,d0
		move.w	d0,(Camera_min_Y_pos).w
		move.w	d0,(Camera_target_min_Y_pos).w
		move.w	d0,(Camera_min_Y_pos_P2).w
		move.w	#$70C,d0
		move.w	d0,(Camera_Y_pos).w
		move.w	d0,(Camera_Y_pos_P2).w
		rts
; ---------------------------------------------------------------------------

loc_1BF1E:
loc_1BF74:

		subi.w	#$A0,d1
		bcc.s	loc_1BF7C
		moveq	#0,d1

loc_1BF7C:
		tst.w	(Competition_mode).w
		bne.s	loc_1BF8C
		move.w	(Camera_max_X_pos).w,d2
		cmp.w	d2,d1
		blo.s	loc_1BF8C
		move.w	d2,d1

loc_1BF8C:

		move.w	d1,(Camera_X_pos).w
		move.w	d1,(Camera_X_pos_P2).w
		subi.w	#$60,d0
		bcc.s	loc_1BF9C
		moveq	#0,d0

loc_1BF9C:
		cmp.w	(Camera_max_Y_pos).w,d0
		blt.s	loc_1BFA6
		move.w	(Camera_max_Y_pos).w,d0

loc_1BFA6:
		move.w	d0,(Camera_Y_pos).w
		move.w	d0,(Camera_Y_pos_P2).w
		rts

; =============== S U B R O U T I N E =======================================

DeformBgLayer:

		tst.b	(Deform_lock).w
		beq.s	loc_1BFB8
		rts
; ---------------------------------------------------------------------------

loc_1BFB8:
		clr.w	(H_scroll_amount).w
		clr.w	(V_scroll_amount).w
		tst.b	(Scroll_lock).w
		bne.s	loc_1C028

		lea	(CamFollow_X).w,a0		; NAT: Changed lable
		tst.b	(Scroll_force_positions).w
		beq.s	loc_1BFF0
		clr.b	(Scroll_force_positions).w
		clr.w	(H_scroll_frame_offset).w
		lea	(Scroll_forced_X_pos).w,a0	; NAT: Changed lable

loc_1BFF0:
		lea	(Camera_X_pos).w,a1
		lea	(Camera_min_X_pos).w,a2
		lea	(H_scroll_amount).w,a4
		lea	(H_scroll_frame_offset).w,a5
		lea	(Pos_table).w,a6
		bsr.w	MoveCameraX

		lea	(Camera_Y_pos).w,a1
		lea	(Camera_min_X_pos).w,a2
		lea	(V_scroll_amount).w,a4
		move.w	CameraOffY.w,d3
		bsr.w	MoveCameraY

loc_1C028:
		bra.w	Do_ResizeEvents

; =============== S U B R O U T I N E =======================================

MCX_Range	=	$10
MCY_Range	=	$08

MoveCameraX:
		move.w	(a1),d4
; ---------------------------------------------------------------------------

loc_1C0D2:
		move.w	(a0),d0					; MJ: load camera's X follow position

loc_1C0D6:
		sub.w	(a1),d0
		subi.w	#(320/2)-(MCX_Range/2),d0		; MJ3: subtract left position
		blt.s	loc_1C0E8				; MJ3: if it's out of range to the left, branch
		subi.w	#MCX_Range,d0				; MJ3: has the camera move out of range to the right?
		bge.s	loc_1C0FC				; MJ3: if so, branch
		clr.w	(a4)

locret_1C0E6:
		rts
; ---------------------------------------------------------------------------

loc_1C0E8:
		cmpi.w	#-$18,d0
		bgt.s	loc_1C0F2
		move.w	#-$18,d0

loc_1C0F2:
		add.w	(a1),d0
		cmp.w	(a2),d0
		bgt.s	loc_1C112
		move.w	(a2),d0
		bra.s	loc_1C112
; ---------------------------------------------------------------------------

loc_1C0FC:
		cmpi.w	#$18,d0
		blo.s	loc_1C106
		move.w	#$18,d0

loc_1C106:
		add.w	(a1),d0
		cmp.w	2(a2),d0
		blt.s	loc_1C112
		move.w	2(a2),d0

loc_1C112:

		move.w	d0,d1
		sub.w	(a1),d1
		asl.w	#8,d1
		move.w	d0,(a1)
		move.w	d1,(a4)
		rts


; =============== S U B R O U T I N E =======================================

; 	lea	(Camera_Y_pos).w,a1
;	lea	(Camera_min_X_pos).w,a2
;	lea	(V_scroll_amount).w,a4
;	move.w	(Distance_from_screen_top).w,d3
;	cmpi.w	#2,(Player_mode).w
;	bne.s	loc_1C024
;	move.w	(Distance_from_screen_top_P2).w,d3

MoveCameraY:
		move.w	2(a0),d0			; MJ: load camera's Y follow position
		sub.w	d3,d0				; offset by camera offset
		sub.w	(a1),d0				; get camera y-pos
		bmi.s	.chkwrap
		cmpi.w	#-$100,(Camera_min_Y_pos).w	; check if there is y-wrap going on
		bne.s	.nowrap				; if not, branch
		bra.s	.wrap

.chkwrap	cmpi.w	#-$100,(Camera_min_Y_pos).w	; check if there is y-wrap going on
		bne.s	.nowrap				; if not, branch

		move.w	Screen_Y_wrap_value.w,d1	; get the y-wrap value
		lsr.w	#2,d1				; halve it
		neg.w	d1				; and negate it

		cmp.w	d1,d0				; check if we are close to camera
		bge.s	.nowrap				; if so, branch
.wrap		and.w	Screen_Y_wrap_value.w,d0	; keep it in range

.nowrap		subi.w	#(224/2)-(MCY_Range/2),d0	; MJ3: subtract top position
		bcs.s	.chkmove			; MJ3: if it's out of range above, branch
		subi.w	#MCY_Range,d0			; MJ3: has the camera moved out of range below?
		bhs.s	.chkmove			; MJ3: if so, branch
		tst.b	Camera_max_Y_pos_changing.w	; check if y-pos was changing
		bne.s	.clearychg			; if yes, branch

		clr.w	(a4)				; no vscroll
		rts
; ---------------------------------------------------------------------------

.chkmove	move.w	#$1800,d1			; get speed change
		cmpi.w	#$18,d0				; check if we are $18px below
		bgt.s	.addspeed			; if so, branch
		cmpi.w	#-$18,d0			; check if we are $18px above
		blt.s	.subspeed			; if so, branch
		bra.s	.inmiddle
; ---------------------------------------------------------------------------

.clearychg	moveq	#0,d0
		move.b	d0,Camera_max_Y_pos_changing.w	; clear changing

.inmiddle	moveq	#0,d1
		move.w	d0,d1				; copy camera offset
		add.w	(a1),d1				; add camera y-pos
		tst.w	d0				; check if negative or positive
		bpl.s	.chkymax			; if positive (below), branch
		bra.s	.chkymin
; ---------------------------------------------------------------------------

.subspeed	neg.w	d1				; negate speed
		ext.l	d1				; extend to long
		asl.l	#8,d1				; shift 8 left
		add.l	(a1),d1				; add camera y-pos
		swap	d1				; get high word only

.chkymin	cmp.w	4(a2),d1			; check against minimum camera y-pos
		bgt.s	.save				; if below it, branch
		cmpi.w	#-$100,d1			; check if we are at y-wrapping position
		bgt.s	.getymin			; if not, branch
		and.w	Screen_Y_wrap_value.w,d1	; wrap the value
		bra.s	.save
; ---------------------------------------------------------------------------

.getymin	move.w	4(a2),d1			; get y-min value
		bra.s	.save
; ---------------------------------------------------------------------------

.addspeed	ext.l	d1				; extend to long
		asl.l	#8,d1				; shift 8 left
		add.l	(a1),d1				; add camera y-pos
		swap	d1				; get high word only

.chkymax	cmp.w	6(a2),d1			; check against maximum camera y-pos
		blt.s	.save				; if above it, branch
		move.w	Screen_Y_wrap_value.w,d3	; get y-wrap value
		addq.w	#1,d3				; add 1 to it
		sub.w	d3,d1				; sub that value from camera y-pos
		bcs.s	.getymax			; if we don't y-wrap, branch
		sub.w	d3,(a1)				; wrap.
		bra.s	.save
; ---------------------------------------------------------------------------

.getymax	move.w	6(a2),d1			; get y-max value
.save		move.w	(a1),d4				; copy original camera position
		swap	d1				; swap words of the calculated camera y-pos

		move.l	d1,d3				; copy it
		sub.l	(a1),d3				; sub current camera pos from new camera
		ror.l	#8,d3				; rotate 8 bits
		move.w	d3,(a4)				; save v-scroll amount
		move.l	d1,(a1)				; save new camera pos

;		tst.w	Competition_mode.w
;		beq.s	.rts
;		swap	d1				; unswap position
;		and.w	Screen_Y_wrap_value.w,d1	; wrap value
;		move.w	d1,(a1)				; save it.
.rts		rts

; =============== S U B R O U T I N E =======================================

LoadLevelLoadBlock2:
		move.w	(Current_zone_and_act).w,d0
		bne.s	loc_1C2C8
		move.w	#$D00,d0

loc_1C2C8:

		ror.b	#1,d0
		lsr.w	#4,d0
		andi.w	#$1F8,d0
		move.w	d0,d1
		add.w	d0,d0
		add.w	d1,d0
		lea	(LevelLoadBlock).l,a2
		lea	(a2,d0.w),a2
		move.l	a2,-(sp)
		addq.w	#8,a2
		move.l	(a2)+,d0
		andi.l	#Checksum_string+$3,d0
		move.l	d0,d7
		movea.l	d0,a0
		lea	(Block_table).w,a1
		jsr	Kos_Decomp.w
		move.l	(a2)+,d0
		andi.l	#Checksum_string+$3,d0
		cmp.l	d0,d7
		beq.s	loc_1C30E
		movea.l	d0,a0
		jsr	Kos_Decomp.w

loc_1C30E:
		move.l	(a2)+,d0
		andi.l	#Checksum_string+$3,d0
		move.l	d0,d7
		movea.l	d0,a0
		lea	(RAM_start).l,a1
		jsr	Kos_Decomp.w
		move.l	(a2)+,d0
		andi.l	#Checksum_string+$3,d0
		cmp.l	d0,d7
		beq.s	loc_1C33A
		movea.l	d0,a0
		jsr	Kos_Decomp.w

loc_1C33A:
		bsr.w	Load_Level
		movea.l	(sp)+,a2
		move.b	(a2),d1
		addq.w	#4,a2
		moveq	#0,d0
		move.b	(a2),d0
		beq.s	loc_1C354
		cmp.b	d0,d1
		beq.s	loc_1C354
		jsr	Load_PLC.w

loc_1C354:
		addq.w	#4,a2
		moveq	#0,d0
		move.b	(a2),d0
		jsr	LoadPalette.w

		cmp.b	#6,PlayMode.w		; NAT: chk CNZ1 minigame
		bne.s	locret_1C3CE		; noo
		cmp.w	#$300,Current_zone_and_act.w;
		bne.s	locret_1C3CE		; noo
		lea	Pal_CNZMiniboss,a1
		jmp	PalLoad_Line1tgt.w

; =============== S U B R O U T I N E =======================================

Load_Level:

		moveq	#0,d0
		move.w	(Current_zone_and_act).w,d0
		ror.b	#1,d0
		lsr.w	#5,d0
		andi.w	#$FC,d0
		lea	(LevelPtrs).l,a0
		movea.l	(a0,d0.w),a0
		lea	(Level_layout_header).w,a1
		jmp	KosDec.w			; NAT: Kosinski compressed layouts now
; ---------------------------------------------------------------------------

Do_ResizeEvents:
		moveq	#0,d0
		move.w	(Current_zone_and_act).w,d0
		ror.b	#1,d0
		lsr.w	#6,d0
		andi.w	#$3E,d0
		move.w	LevelResizeArray(pc,d0.w),d0
		jsr	LevelResizeArray(pc,d0.w)
		moveq	#2,d1
		move.w	(Camera_target_max_Y_pos).w,d0
		sub.w	(Camera_max_Y_pos).w,d0
		beq.s	locret_1C3CE
		bcc.s	loc_1C3D0
		neg.w	d1
		move.w	(Camera_Y_pos).w,d0
		cmp.w	(Camera_target_max_Y_pos).w,d0
		bls.s	loc_1C3C4
		move.w	d0,(Camera_max_Y_pos).w
		andi.w	#-2,(Camera_max_Y_pos).w

loc_1C3C4:
		add.w	d1,(Camera_max_Y_pos).w
		move.b	#1,(Camera_max_Y_pos_changing).w

locret_1C3CE:
		rts
; ---------------------------------------------------------------------------

loc_1C3D0:
		move.w	(Camera_Y_pos).w,d0
		addi.w	#8,d0
		cmp.w	(Camera_max_Y_pos).w,d0
		blo.s	loc_1C3EA
		btst	#1,(Player_1+$2A).w
		beq.s	loc_1C3EA
		add.w	d1,d1
		add.w	d1,d1

loc_1C3EA:

		add.w	d1,(Camera_max_Y_pos).w
		move.b	#1,(Camera_max_Y_pos_changing).w
		rts
; ---------------------------------------------------------------------------
LevelResizeArray:	dc.w AIZ1_Resize-LevelResizeArray
		dc.w AIZ2_Resize-LevelResizeArray
		dc.w HCZ1_Resize-LevelResizeArray
		dc.w HCZ2_Resize-LevelResizeArray
		dc.w MGZ_Resize-LevelResizeArray
		dc.w MGZ_Resize-LevelResizeArray
		dc.w No_Resize2-LevelResizeArray
		dc.w No_Resize2-LevelResizeArray
		dc.w No_Resize2-LevelResizeArray
		dc.w No_Resize2-LevelResizeArray
		dc.w ICZ1_Resize-LevelResizeArray
		dc.w ICZ2_Resize-LevelResizeArray
		dc.w No_Resize-LevelResizeArray
		dc.w LBZ2_Resize-LevelResizeArray
		dc.w No_Resize3-LevelResizeArray
		dc.w No_Resize3-LevelResizeArray
		dc.w No_Resize3-LevelResizeArray
		dc.w No_Resize3-LevelResizeArray
		dc.w No_Resize3-LevelResizeArray
		dc.w No_Resize3-LevelResizeArray
		dc.w No_Resize3-LevelResizeArray
		dc.w No_Resize3-LevelResizeArray
		dc.w No_Resize3-LevelResizeArray
		dc.w No_Resize3-LevelResizeArray
		dc.w No_Resize3-LevelResizeArray
		dc.w No_Resize3-LevelResizeArray
		dc.w No_Resize3-LevelResizeArray
		dc.w No_Resize3-LevelResizeArray
		dc.w No_Resize3-LevelResizeArray
		dc.w No_Resize3-LevelResizeArray
		dc.w No_Resize3-LevelResizeArray
		dc.w No_Resize3-LevelResizeArray
		dc.w No_Resize3-LevelResizeArray
		dc.w No_Resize3-LevelResizeArray
		dc.w No_Resize3-LevelResizeArray
		dc.w No_Resize3-LevelResizeArray
		dc.w No_Resize3-LevelResizeArray
		dc.w No_Resize3-LevelResizeArray
		dc.w No_Resize3-LevelResizeArray
		dc.w No_Resize3-LevelResizeArray
		dc.w No_Resize3-LevelResizeArray
		dc.w No_Resize3-LevelResizeArray
		dc.w No_Resize3-LevelResizeArray
		dc.w No_Resize3-LevelResizeArray
		dc.w No_Resize3-LevelResizeArray
		dc.w No_Resize3-LevelResizeArray
		dc.w No_Resize3-LevelResizeArray
		dc.w No_Resize3-LevelResizeArray
; ---------------------------------------------------------------------------

AIZ1_Resize:
		moveq	#0,d0
		move.b	(Dynamic_resize_routine).w,d0
		move.w	off_1C464(pc,d0.w),d0
		jmp	off_1C464(pc,d0.w)
; ---------------------------------------------------------------------------
off_1C464:	dc.w loc_1C46E-off_1C464

		dc.w loc_1C4D0-off_1C464
		dc.w loc_1C550-off_1C464
		dc.w loc_1C5C6-off_1C464
		dc.w loc_1C602-off_1C464
; ---------------------------------------------------------------------------

loc_1C46E:
		move.b	#1,(AIZ_Palette_Flag).w
		cmpi.w	#$1000,(Camera_X_pos).w
		blo.s	locret_1C4CE
		move.b	#0,(AIZ_Palette_Flag).w
		move.w	(Camera_X_pos).w,(Camera_min_X_pos).w
		cmpi.w	#$1308,(Camera_X_pos).w
		blo.s	locret_1C4CE

	;	moveq	#$2A,d0		; NAT: No palette load
	;	jsr	LoadPalette_Immediate.w).w
		move.w	#2,(CPU_Routine).w
		addq.b	#2,(Dynamic_resize_routine).w

locret_1C4CE:

		rts
; ---------------------------------------------------------------------------

loc_1C4D0:
		move.w	#$1308,(Camera_min_X_pos).w
		cmpi.w	#$1400,(Camera_X_pos).w
		blo.s	locret_1C54E

		move.b	#1,(Last_star_post_hit).w
	;	move.w	#$13A0,(Saved_X_pos).w
	;	move.w	#$41A,(Saved_Y_pos).w
	;	jsr	(Save_Level_Data).l
	;	clr.l	Saved_timer.w
		moveq	#8,d0
		jsr	Load_PLC.w
		addq.b	#2,(Dynamic_resize_routine).w

locret_1C54E:
		rts
; ---------------------------------------------------------------------------

loc_1C550:
		lea	(byte_1C60A).l,a1
		bsr.w	Resize_MaxYFromX
		clr.w	(Camera_min_Y_pos).w
		move.w	#$20E,(Target_palette_line_3+$1E).w
		tst.b	(Game_mode).w
		bmi.s	loc_1C578
		tst.w	(Palette_fade_timer).w
		bne.s	loc_1C578
		move.w	#$20E,(Normal_palette_line_3+$1E).w

loc_1C578:

		cmpi.w	#$2B00,(Camera_X_pos).w
		blo.s	loc_1C586
		move.w	#4,(Normal_palette_line_3+$1E).w

loc_1C586:
		cmpi.w	#$2C00,(Camera_X_pos).w
		blo.s	loc_1C594
		cmp.w	#$2C0,(Camera_Y_pos).w		; NAT: Fix camera jerk in AIZ1
		blo.s	loc_1C594
		move.w	#$2E0,(Camera_min_Y_pos).w

loc_1C594:
		cmpi.w	#$2D00,(Camera_X_pos).w
		shs	MonContPos.w

		cmpi.w	#$2D80,(Camera_X_pos).w
		blo.s	locret_1C5C4
		move.w	#$C02,d0
		move.w	d0,(Normal_palette_line_3+$1E).w
		move.w	#$2D80,(Camera_min_X_pos).w
		moveq	#$5A,d0
		jsr	Load_PLC.w
		addq.b	#2,(Dynamic_resize_routine).w

locret_1C5C4:
		rts
; ---------------------------------------------------------------------------

loc_1C5C6:
		lea	(byte_1C60A).l,a1
		bsr.w	Resize_MaxYFromX
		move.w	(Camera_X_pos).w,(Camera_min_X_pos).w
		cmpi.w	#$2E00,(Camera_X_pos).w
		blo.s	locret_1C600
		tst.b	(Kos_modules_left).w
		bne.s	locret_1C600
		lea	(AIZ1_8x8_Flames_KosM).l,a1
		move.w	#$A000,d2
		jsr	Queue_Kos_Module.w
		moveq	#$C,d0
		jsr	Load_PLC.w
		addq.b	#2,(Dynamic_resize_routine).w

locret_1C600:

		rts
; ---------------------------------------------------------------------------

loc_1C602:
		move.w	(Camera_X_pos).w,(Camera_min_X_pos).w
		rts
; ---------------------------------------------------------------------------
byte_1C60A:	dc.b  $83, $90, $16, $50, $83, $B0, $1B,   0, $84, $30, $20,   0, $84, $C0, $2B,   0, $83, $B0, $2D, $80
		dc.b  $82, $E0, $FF, $FF
; ---------------------------------------------------------------------------

AIZ2_Resize:
		cmp.b	#6,PlayMode.w		; NAT: Check if minigame
		beq.s	locret_1C600		; if so, skip

		moveq	#0,d0
		move.b	(Dynamic_resize_routine).w,d0
		move.w	off_1C630(pc,d0.w),d0
		jmp	off_1C630(pc,d0.w)
; ---------------------------------------------------------------------------
off_1C630:	dc.w loc_1C64E-off_1C630	;0
		dc.w AIZ2_SonicResize1-off_1C630		;2
		dc.w AIZ2_SonicResize2-off_1C630		;4
		dc.w AIZ2_SonicResize3-off_1C630		;6
		dc.w AIZ2_SonicResize4-off_1C630		;8
		dc.w AIZ2_SonicResize5-off_1C630		;A
		dc.w AIZ2_SonicResize6-off_1C630		;C
		dc.w AIZ2_SonicResize7-off_1C630		;E
		dc.w AIZ2_SonicResizeEnd-off_1C630		;10
		dc.w AIZ2_KnuxResize1-off_1C630		;12
		dc.w AIZ2_KnuxResize2-off_1C630		;14
		dc.w AIZ2_KnuxResize3-off_1C630		;16
		dc.w AIZ2_KnuxResize4-off_1C630		;18
		dc.w AIZ2_KnuxResize5-off_1C630		;1A
		dc.w AIZ2_KnuxResizeEnd-off_1C630		;1C
; ---------------------------------------------------------------------------

loc_1C64E:
		cmpi.w	#3,(Player_mode).w
		bne.s	loc_1C660
		move.b	#$12,(Dynamic_resize_routine).w		; If playing as Knuckles
		bra.w	AIZ2_KnuxResize1
; ---------------------------------------------------------------------------

loc_1C660:
		addq.b	#2,(Dynamic_resize_routine).w

AIZ2_SonicResize1:
		cmpi.w	#$2E0,(Camera_X_pos).w
		blo.s	locret_1C68E
		move.w	#$590,d0
		move.w	d0,(Camera_max_Y_pos).w
		move.w	d0,(Camera_target_max_Y_pos).w
		addq.b	#2,(Dynamic_resize_routine).w		; Set level height to normal when past the open field
		cmpi.w	#1,(Apparent_zone_and_act).w		; If non-internal level is not AIZ2, then the miniboss hasn't been defeated yet
		bne.s	locret_1C68E
		move.w	#$F50,(Camera_min_X_pos).w		; Put $F50 as the start X
		addq.b	#2,(Dynamic_resize_routine).w

locret_1C68E:

		rts
; ---------------------------------------------------------------------------

AIZ2_SonicResize2:
		move.w	#$590,d0
		cmpi.w	#$ED0,(Camera_X_pos).w
		shs	MonContPos.w		; hide HUD if close enough
		blo.s	loc_1C6A0
		move.w	#$2B8,d0		; Set level height to 2B8 when boss is approached.

loc_1C6A0:
		move.w	d0,(Camera_max_Y_pos).w
		move.w	d0,(Camera_target_max_Y_pos).w
		cmpi.w	#$F50,(Camera_X_pos).w
		blo.s	locret_1C6DA
		move.w	#$F50,(Camera_min_X_pos).w		; When boss has been reached, lock the screen
		move.w	#$10E0,Camera_Max_X_Pos.w		; NAT: Fuck it
		jsr	Create_New_Sprite.w
		bne.s	loc_1C6D6
		move.l	#Obj_AIZ_Miniboss,(a1)		; Make the miniboss
		move.w	#$11F0,$10(a1)
		move.w	#$289,$14(a1)			; Set the position for Sonic's area area

loc_1C6D6:

		addq.b	#2,(Dynamic_resize_routine).w

locret_1C6DA:
		rts
; ---------------------------------------------------------------------------

AIZ2_SonicResize3:
		cmpi.w	#$1500,(Camera_X_pos).w
		blo.s	locret_1C6F4
		move.w	#$630,(Camera_max_Y_pos).w		; Set the level height to $630 when playing as Sonic past $1500
		move.w	#$630,(Camera_target_max_Y_pos).w
		addq.b	#2,(Dynamic_resize_routine).w

locret_1C6F4:
		rts
; ---------------------------------------------------------------------------

AIZ2_SonicResize4:
		cmpi.w	#$3C00,(Camera_X_pos).w
		blo.s	locret_1C744
		tst.b	(Kos_modules_left).w			; When $3C00 X is passed
		bne.s	locret_1C744
		moveq	#$30,d0
		jsr	LoadPalette_Immediate.w			; Load palette
		st	(ScrEvents_2).w						; Send signal to background event
		addq.b	#2,(Dynamic_resize_routine).w

locret_1C744:

		rts
; ---------------------------------------------------------------------------

AIZ2_SonicResize5:
		cmpi.w	#$3F00,(Camera_X_pos).w
		blo.s	locret_1C75E
		move.w	#$15A,d0				; When past $3F00 X, set top of level to $15A
		move.w	d0,(Camera_min_Y_pos).w
		move.w	d0,(Camera_target_min_Y_pos).w
		addq.b	#2,(Dynamic_resize_routine).w

locret_1C75E:
		rts
; ---------------------------------------------------------------------------

AIZ2_SonicResize6:
		cmpi.w	#$4000,(Camera_X_pos).w
		blo.s	locret_1C778
		move.w	#$15A,d0
		move.w	d0,(Camera_max_Y_pos).w		; When past $4000 X, set bottom of level to $15A
		move.w	d0,(Camera_target_max_Y_pos).w
		addq.b	#2,(Dynamic_resize_routine).w

locret_1C778:
		rts
; ---------------------------------------------------------------------------

AIZ2_SonicResize7:
		cmpi.w	#$4160,(Camera_X_pos).w
		blo.s	AIZ2_SonicResizeEnd
		st	MonContPos.w				; hide HUD
		move.w	#$4500,(Camera_max_X_pos).w		; NAT: fix camera pos
;		st	(ScrEvents_1).w				; When past $4160, send signal to screen event to start the battleship sequence
		addq.b	#2,(Dynamic_resize_routine).w

AIZ2_SonicResizeEnd:

		rts
; ---------------------------------------------------------------------------

AIZ2_KnuxResize1:

		cmpi.w	#$2E0,(Camera_X_pos).w
		blo.s	locret_1C7B6
		move.w	#$590,d0
		move.w	d0,(Camera_max_Y_pos).w
		move.w	d0,(Camera_target_max_Y_pos).w		; Set level height to normal when past the open field
		addq.b	#2,(Dynamic_resize_routine).w
		cmpi.w	#1,(Apparent_zone_and_act).w
		bne.s	locret_1C7B6
		move.w	#$1040,(Camera_min_X_pos).w	; Knuckles boss is slightly more to the right than Sonic's
		addq.b	#2,(Dynamic_resize_routine).w

locret_1C7B6:

		rts
; ---------------------------------------------------------------------------

AIZ2_KnuxResize2:
		move.w	#$590,d0
		cmpi.w	#$E80,(Camera_X_pos).w
		blo.s	loc_1C7C8
		move.w	#$450,d0

loc_1C7C8:
		move.w	d0,(Camera_max_Y_pos).w
		move.w	d0,(Camera_target_max_Y_pos).w
		cmpi.w	#$1040,(Camera_X_pos).w
		blo.s	locret_1C808
		move.w	#$1040,(Camera_min_X_pos).w
		tst.b	(Debug_On).w
		bne.s	loc_1C7FE
		jsr	Create_New_Sprite.w
		bne.s	loc_1C7FE
		move.l	#Obj_AIZ_Miniboss,(a1)
		move.w	#$11D0,$10(a1)			; Knuckles' version of the boss is further down obviously
		move.w	#$420,$14(a1)

loc_1C7FE:

		move.w	#$F80,(Target_water_level).w
		addq.b	#2,(Dynamic_resize_routine).w

locret_1C808:
		rts
; ---------------------------------------------------------------------------

AIZ2_KnuxResize3:
		cmpi.w	#$11A0,(Camera_X_pos).w
		blo.s	locret_1C81C
		move.w	#$820,(Camera_target_max_Y_pos).w		; Set level height to $820 when playing as Knuckles
		addq.b	#2,(Dynamic_resize_routine).w

locret_1C81C:
		rts
; ---------------------------------------------------------------------------

AIZ2_KnuxResize4:
		cmpi.w	#$3B80,(Camera_X_pos).w
		blo.s	locret_1C868
		tst.b	(Kos_modules_left).w
		bne.s	locret_1C868
		lea	(AIZ2_16x16_BomberShip_Kos).l,a1
		lea	(Block_table+$AB8).w,a2
		jsr	Queue_Kos.w
		lea	(AIZ2_8x8_BomberShip_KosM).l,a1
		move.w	#$3F80,d2
		jsr	Queue_Kos_Module.w			; I'm guessing the art here is for the trees and/or the waterfall in the boss arena
		moveq	#$30,d0
		jsr	LoadPalette_Immediate.w
		move.w	#$3B80,(Camera_min_X_pos).w
		move.w	#$5DA,(Camera_target_max_Y_pos).w
		st	(ScrEvents_2).w					; Set the flag for the background event
		addq.b	#2,(Dynamic_resize_routine).w

locret_1C868:
		rts
; ---------------------------------------------------------------------------

AIZ2_KnuxResize5:
		move.w	#$3F80,d0
		cmp.w	(Camera_X_pos).w,d0
		bhi.s	AIZ2_KnuxResizeEnd
		move.w	d0,(Camera_min_X_pos).w
		addq.b	#2,(Dynamic_resize_routine).w

AIZ2_KnuxResizeEnd:
		rts
; ---------------------------------------------------------------------------

HCZ1_Resize:
		moveq	#0,d0
		move.b	(Dynamic_resize_routine).w,d0
		move.w	off_1C88C(pc,d0.w),d0
		jmp	off_1C88C(pc,d0.w)
; ---------------------------------------------------------------------------
off_1C88C:	dc.w loc_1C892-off_1C88C

		dc.w loc_1C8B8-off_1C88C
		dc.w locret_1C8F4-off_1C88C
; ---------------------------------------------------------------------------

loc_1C892:
		cmpi.w	#$360,(Camera_X_pos).w
		bhs.s	locret_1C8B6
		cmpi.w	#$3E0,(Camera_Y_pos).w
		blo.s	locret_1C8B6
		lea	(Normal_palette_line_4+$10).w,a1
		move.w	#$B80,(a1)+
		move.w	#$240,(a1)+
		move.w	#$220,(a1)+
		addq.b	#2,(Dynamic_resize_routine).w

locret_1C8B6:

		rts
; ---------------------------------------------------------------------------

loc_1C8B8:
		cmpi.w	#$360,(Camera_X_pos).w
		bhs.s	loc_1C8CE
		cmpi.w	#$3E0,(Camera_Y_pos).w
		bhs.s	locret_1C8F2
		subq.b	#2,(Dynamic_resize_routine).w
		bra.s	loc_1C8E2
; ---------------------------------------------------------------------------

loc_1C8CE:
		cmpi.w	#$500,(Camera_Y_pos).w
		blo.s	locret_1C8F2
		cmpi.w	#$900,(Camera_X_pos).w
		blo.s	locret_1C8F2
		addq.b	#2,(Dynamic_resize_routine).w

loc_1C8E2:
		lea	(Normal_palette_line_4+$10).w,a1
		move.w	#$CEE,(a1)+
		move.w	#$ACE,(a1)+
		move.w	#$8A,(a1)+

locret_1C8F2:
locret_1C8F4:
		rts
; ---------------------------------------------------------------------------

HCZ2_Resize:
		moveq	#0,d0
		move.b	(Dynamic_resize_routine).w,d0
		move.w	off_1C904(pc,d0.w),d0
		jmp	off_1C904(pc,d0.w)
; ---------------------------------------------------------------------------
off_1C904:	dc.w loc_1C908-off_1C904
		dc.w HCZ2_Resize_2-off_1C904
		dc.w HCZ2_Resize_4-off_1C904
		dc.w locret_1C91A-off_1C904
; ---------------------------------------------------------------------------

loc_1C908:
		cmpi.w	#$C00,(Camera_X_pos).w
		blo.s	locret_1C918
		st	(ScrEvents_2).w
		addq.b	#2,(Dynamic_resize_routine).w

locret_1C918:
		rts

HCZ2_Resize_2:
		cmpi.w	#$3900,(Camera_X_pos).w		; NAT: Hide for knux
		shs	MonContPos.w			; hide HUD if close enough
		blo.s	locret_1C918

		cmpi.w	#$6A0,(Camera_Y_pos).w		; NAT: check plc load
		blo.s	locret_1C918
		addq.b	#2,(Dynamic_resize_routine).w
		moveq	#8,d0				; load monitors
		jmp	Load_PLC.w

HCZ2_Resize_4:
		tst.l	Kos_module_queue.w		; check if we have shit queued
		bne.s	locret_1C91A			; if yes, branch
		addq.b	#2,(Dynamic_resize_routine).w
		sf	MonContPos.w			; show hud

locret_1C91A:
		rts
; ---------------------------------------------------------------------------

MGZ_Resize:
		moveq	#0,d0
		move.b	(Dynamic_resize_routine).w,d0
		move.w	off_1C92A(pc,d0.w),d0
		jmp	off_1C92A(pc,d0.w)
; ---------------------------------------------------------------------------
off_1C92A:	dc.w loc_1C930-off_1C92A

		dc.w loc_1C96E-off_1C92A
		dc.w locret_1C9C8-off_1C92A
; ---------------------------------------------------------------------------

loc_1C930:
		move.w	(Camera_Y_pos).w,d0
		cmpi.w	#$600,d0
		blo.s	locret_1C96C
		cmpi.w	#$700,d0
		bhs.s	locret_1C96C
		cmpi.w	#$3A00,(Camera_X_pos).w
		blo.s	locret_1C96C

		move.w	#$6A6,d0
		btst	#5,OptionsBits.w		; NAT: Check if bosses are on
		bne.s	.enabled			; if are, branch
		subq.w	#6,d0				; else, put higherwa

.enabled	move.w	d0,(Camera_min_Y_pos).w
		move.w	d0,(Camera_target_min_Y_pos).w
		move.w	d0,(Camera_max_Y_pos).w
		move.w	d0,(Camera_target_max_Y_pos).w
		move.w	#$3C80,d0
		move.w	d0,(Camera_max_X_pos).w
		move.w	d0,(Camera_target_max_X_pos).w
		addq.b	#2,(Dynamic_resize_routine).w

locret_1C96C:

		rts
; ---------------------------------------------------------------------------

loc_1C96E:
		cmpi.w	#$3A00,(Camera_X_pos).w
		blo.s	loc_1C9A8
		move.w	#$3C80,d0
		cmp.w	(Camera_X_pos).w,d0
		bhi.s	locret_1C9C6
		move.w	d0,(Camera_min_X_pos).w
		move.w	d0,(Camera_target_min_X_pos).w
		jsr	Create_New_Sprite.w
		bne.s	loc_1C9A2
		move.l	#Obj_A1_1_MGZ2_Boss,(a1)
		move.w	#$3D20,$10(a1)
		move.w	#$668,$14(a1)

loc_1C9A2:
		addq.b	#2,(Dynamic_resize_routine).w
		rts
; ---------------------------------------------------------------------------

loc_1C9A8:
		move.l	#$1000,d0
		move.l	d0,(Camera_min_Y_pos).w
		move.l	d0,(Camera_target_min_Y_pos).w
		move.w	#$6000,d0
		move.w	d0,(Camera_max_X_pos).w
		move.w	d0,(Camera_target_max_X_pos).w
		subq.b	#2,(Dynamic_resize_routine).w

locret_1C9C6:
locret_1C9C8:
No_Resize2:
		rts
; ---------------------------------------------------------------------------

ICZ1_Resize:
		moveq	#0,d0
		move.b	(Dynamic_resize_routine).w,d0
		move.w	off_1C9DA(pc,d0.w),d0
		jmp	off_1C9DA(pc,d0.w)
; ---------------------------------------------------------------------------
off_1C9DA:	dc.w loc_1C9E0-off_1C9DA
		dc.w loc_1C9FA-off_1C9DA
		dc.w locret_1CA0C-off_1C9DA
; ---------------------------------------------------------------------------

loc_1C9E0:
		cmpi.w	#$3700,(Camera_X_pos).w
		blo.s	locret_1C9F8
		cmpi.w	#$68C,(Camera_Y_pos).w
		blo.s	locret_1C9F8
		st	(ScrEvents_2).w
		addq.b	#2,(Dynamic_resize_routine).w

locret_1C9F8:

		rts
; ---------------------------------------------------------------------------

loc_1C9FA:
		cmpi.w	#$3940,(Camera_X_pos).w
		blo.s	locret_1CA0A
		st	(ScrEvents_2).w
		addq.b	#2,(Dynamic_resize_routine).w

locret_1CA0A:
locret_1CA0C:
		rts
; ---------------------------------------------------------------------------

ICZ2_Resize:
		moveq	#0,d0
		move.b	(Dynamic_resize_routine).w,d0
		move.w	off_1CA1C(pc,d0.w),d0
		jmp	off_1CA1C(pc,d0.w)
; ---------------------------------------------------------------------------
off_1CA1C:	dc.w loc_1CA20-off_1CA1C

		dc.w locret_1CA3C-off_1CA1C
; ---------------------------------------------------------------------------

loc_1CA20:
		cmpi.w	#$740,(Camera_X_pos).w
		blo.s	locret_1CA3A
		cmpi.w	#$400,(Camera_Y_pos).w
		bhs.s	locret_1CA3A
		move.w	#$740,(Camera_min_X_pos).w
		addq.b	#2,(Dynamic_resize_routine).w

locret_1CA3A:

		rts
; ---------------------------------------------------------------------------

locret_1CA3C:
		rts
; ---------------------------------------------------------------------------

No_Resize:
		rts
; ---------------------------------------------------------------------------

LBZ2_Resize:
		moveq	#0,d0
		move.b	(Dynamic_resize_routine).w,d0
		move.w	off_1CA4E(pc,d0.w),d0
		jmp	off_1CA4E(pc,d0.w)
; ---------------------------------------------------------------------------
off_1CA4E:	dc.w loc_1CA52-off_1CA4E

		dc.w locret_1CAAA-off_1CA4E
; ---------------------------------------------------------------------------

loc_1CA52:
		cmpi.w	#$3BC0,(Camera_X_pos).w
		blo.s	locret_1CAA8
		cmpi.w	#$500,(Camera_Y_pos).w
		blo.s	locret_1CAA8
		addq.b	#2,(Dynamic_resize_routine).w
		lea	(LBZ2_16x16_DeathEgg_Kos).l,a1
		lea	(Block_table).w,a2
		jsr	Queue_Kos.w
		lea	(LBZ2_128x128_DeathEgg_Kos).l,a1
		lea	(RAM_start).l,a2
		jsr	Queue_Kos.w
		lea	(LBZ2_8x8_DeathEgg_KosM).l,a1
		move.w	#0,d2
		jsr	Queue_Kos_Module.w
		lea	(ArtKosM_LBZ2DeathEgg2_8x8).l,a1
		move.w	#$B400,d2
		jsr	Queue_Kos_Module.w

locret_1CAA8:

		rts
; ---------------------------------------------------------------------------

locret_1CAAA:
		rts
; ---------------------------------------------------------------------------

No_Resize3:
		rts

; =============== S U B R O U T I N E =======================================


Resize_MaxYFromX:

		move.w	(Camera_X_pos).w,d0

loc_1CAB2:
		move.l	(a1)+,d1
		cmp.w	d1,d0
		bhi.s	loc_1CAB2
		swap	d1
		tst.w	d1
		bpl.s	loc_1CAC6
		andi.w	#$7FFF,d1
		move.w	d1,(Camera_max_Y_pos).w

loc_1CAC6:
		move.w	d1,(Camera_target_max_Y_pos).w
		rts
; End of function Resize_MaxYFromX


; =============== S U B R O U T I N E =======================================


Draw_LRZ_Special_Rock_Sprites:
		moveq	#0,d0
		move.b	(LRZ_Rock_Routine).w,d0
		move.w	off_1CADA(pc,d0.w),d0
		jmp	off_1CADA(pc,d0.w)
; End of function Draw_LRZ_Special_Rock_Sprites

; ---------------------------------------------------------------------------
off_1CADA:	dc.w loc_1CADE-off_1CADA
		dc.w loc_1CB20-off_1CADA
; ---------------------------------------------------------------------------

loc_1CADE:
		addq.b	#2,(LRZ_Rock_Routine).w
		lea	(LRZ1_Rock_Placement).l,a1
		tst.b	(Current_act).w
		beq.s	loc_1CAF4
		lea	(LRZ2_Rock_Placement).l,a1

loc_1CAF4:
		move.w	(Camera_X_pos).w,d4
		subq.w	#8,d4
		bhi.s	loc_1CB02
		moveq	#1,d4
		bra.s	loc_1CB02
; ---------------------------------------------------------------------------

loc_1CB00:
		addq.l	#6,a1

loc_1CB02:

		cmp.w	2(a1),d4
		bhi.s	loc_1CB00
		move.l	a1,LRZ_Spec_Rocks.w
		addi.w	#$150,d4
		bra.s	loc_1CB14
; ---------------------------------------------------------------------------

loc_1CB12:
		addq.l	#6,a1

loc_1CB14:
		cmp.w	2(a1),d4
		bhi.s	loc_1CB12
		move.l	a1,(__u_FE6A).w
		rts
; ---------------------------------------------------------------------------

loc_1CB20:
		movea.l	LRZ_Spec_Rocks.w,a1
		move.w	(Camera_X_pos).w,d4
		subq.w	#8,d4
		bhi.s	loc_1CB32
		moveq	#1,d4
		bra.s	loc_1CB32
; ---------------------------------------------------------------------------

loc_1CB30:
		addq.l	#6,a1

loc_1CB32:

		cmp.w	2(a1),d4
		bhi.s	loc_1CB30
		bra.s	loc_1CB3C
; ---------------------------------------------------------------------------

loc_1CB3A:
		subq.l	#6,a1

loc_1CB3C:
		cmp.w	-4(a1),d4
		bls.s	loc_1CB3A
		move.l	a1,LRZ_Spec_Rocks.w
		movea.l	(__u_FE6A).w,a2
		addi.w	#$150,d4
		bra.s	loc_1CB52
; ---------------------------------------------------------------------------

loc_1CB50:
		addq.l	#6,a2

loc_1CB52:
		cmp.w	2(a2),d4
		bhi.s	loc_1CB50
		bra.s	loc_1CB5C
; ---------------------------------------------------------------------------

loc_1CB5A:
		subq.l	#6,a2

loc_1CB5C:
		cmp.w	-4(a2),d4
		bls.s	loc_1CB5A
		move.l	a2,(__u_FE6A).w
		rts

; =============== S U B R O U T I N E =======================================


sub_1CB68:
		movea.l	LRZ_Spec_Rocks.w,a0
		move.l	(__u_FE6A).w,d2
		sub.l	a0,d2
		beq.s	locret_1CBBC
		lea	word_1CBBE(pc),a1
		move.w	#$78,d3
		move.w	4(a3),d4
		move.w	#$F0,d5

loc_1CB84:
		move.w	4(a0),d1
		sub.w	d4,d1
		addq.w	#8,d1
		cmp.w	d5,d1
		bhs.s	loc_1CBB6
		add.w	d3,d1
		move.w	2(a0),d0
		sub.w	(a3),d0
		addi.w	#$80,d0
		move.w	(a0),d6
		lsl.w	#3,d6
		lea	(a1,d6.w),a2
		add.w	(a2)+,d1
		move.w	d1,(a6)+
		move.w	(a2)+,d6
		move.b	d6,(a6)
		addq.w	#2,a6
		move.w	(a2)+,(a6)+
		add.w	(a2)+,d0
		move.w	d0,(a6)+
		subq.w	#1,d7

loc_1CBB6:
		addq.l	#6,a0
		subq.w	#6,d2
		bne.s	loc_1CB84

locret_1CBBC:
		rts
; End of function sub_1CB68

; ---------------------------------------------------------------------------
word_1CBBE:	dc.w  $FFF8,	 5, $C088, $FFF8
		dc.w  $FFF8,	 5, $C08C, $FFF8
		dc.w  $FFF8,	 5, $C888, $FFF8
		dc.w  $FFF8,	 5, $C88C, $FFF8
		dc.w	  0,	 4, $C090, $FFF8
		dc.w	  0,	 4, $C092, $FFF8
		dc.w	  0,	 4, $C890, $FFF8
		dc.w	  0,	 4, $C892, $FFF8
		dc.w  $FFF8,	 5, $C094, $FFF8
		dc.w  $FFF8,	 5, $C098, $FFF8
		dc.w  $FFF8,	 5, $C09C, $FFF8
		dc.w  $FFF8,	 5, $C0A0, $FFF8
		dc.w  $FFF8,	 5, $C0A4, $FFF8
		dc.w  $FFF8,	 5, $C0A8, $FFF8
		dc.w  $FFF8,	 1, $C0AC,     0
		dc.w  $FFF8,	 5, $C0AE, $FFF8
		dc.w  $FFF8,	 5, $C0B2, $FFF8
		dc.w  $FFF8,	 5, $C0B6, $FFF8
		dc.w	  0,	 0, $C0BA,     0
		dc.w  $FFF8,	 5, $C894, $FFF8
		dc.w  $FFF8,	 5, $C898, $FFF8
		dc.w  $FFF8,	 5, $C89C, $FFF8
		dc.w  $FFF8,	 5, $C8A0, $FFF8
		dc.w	  0,	 0, $C8BA, $FFF8
		dc.w  $FFF8,	 5, $C0BB, $FFF8
		dc.w  $FFF8,	 5, $C0BF, $FFF8
		dc.w  $FFF8,	 5, $C0C3, $FFF8
		dc.w  $FFF8,	 5, $C0C7, $FFF8
		dc.w  $FFF8,	 5, $C0CB, $FFF8
		dc.w  $FFF8,	 5, $C0CF, $FFF8
; ---------------------------------------------------------------------------

Obj_PathSwap:

		move.l	#Map_PathSwap,$C(a0)
		move.w	#$25B0,$A(a0)
		ori.b	#4,4(a0)
		move.b	#$40,7(a0)
		move.b	#$40,6(a0)
		move.w	#prio(5),8(a0)
		move.b	$2C(a0),d0
		btst	#2,d0
		beq.s	loc_1CD3C
		andi.w	#7,d0
		move.b	d0,$22(a0)
		andi.w	#3,d0
		add.w	d0,d0
		move.w	word_1CD34(pc,d0.w),$32(a0)
		move.w	$14(a0),d1
		lea	(Player_1).w,a1
		cmp.w	$14(a1),d1
		bhs.s	loc_1CD06
		move.b	#1,$34(a0)

loc_1CD06:
		lea	(Player_2).w,a1
		cmp.w	$14(a1),d1
		bhs.s	loc_1CD16
		move.b	#1,$35(a0)

loc_1CD16:
		move.l	#loc_1CEF2,(a0)
		tst.w	(Competition_mode).w
		beq.w	loc_1CEF2
		move.l	#loc_1CF1A,(a0)
		move.w	#$63D2,$A(a0)
		bra.w	loc_1CF1A
; ---------------------------------------------------------------------------
word_1CD34:	dc.w $20
		dc.w $40
		dc.w $80
		dc.w $100
; ---------------------------------------------------------------------------

loc_1CD3C:
		andi.w	#3,d0
		move.b	d0,$22(a0)
		add.w	d0,d0
		move.w	word_1CD34(pc,d0.w),$32(a0)
		move.w	$10(a0),d1
		lea	(Player_1).w,a1
		cmp.w	$10(a1),d1
		bhs.s	loc_1CD60
		move.b	#1,$34(a0)

loc_1CD60:
		lea	(Player_2).w,a1
		cmp.w	$10(a1),d1
		bhs.s	loc_1CD70
		move.b	#1,$35(a0)

loc_1CD70:
		move.l	#loc_1CD8A,(a0)
		tst.w	(Competition_mode).w
		beq.s	loc_1CD8A
		move.l	#loc_1CDB2,(a0)
		move.w	#$63D2,$A(a0)
		bra.s	loc_1CDB2
; ---------------------------------------------------------------------------

loc_1CD8A:

		tst.b	(Debug_On).w
		bne.w	loc_1CDAC
		move.w	$10(a0),d1
		lea	$34(a0),a2
		lea	(Player_1).w,a1
		bsr.s	sub_1CDDA
		lea	(Player_2).w,a1
		bsr.s	sub_1CDDA
		jmp	Delete_Sprite_If_Not_In_Range.w
; ---------------------------------------------------------------------------

loc_1CDAC:
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_1CDB2:

		move.w	$10(a0),d1
		lea	$34(a0),a2
		lea	(Player_1).w,a1
		bsr.s	sub_1CDDA
		lea	(Player_2).w,a1
		bsr.s	sub_1CDDA
		lea	(Breathing_bubbles).w,a1
		tst.b	(Debug_mode_flag).w
		beq.w	sub_1CDDA
		bsr.s	sub_1CDDA
		jmp	Draw_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_1CDDA:

		tst.b	(a2)+
		bne.w	loc_1CE6C
		cmp.w	$10(a1),d1
		bhi.w	locret_1CEF0
		move.b	#1,-1(a2)
		move.w	$14(a0),d2
		move.w	d2,d3
		move.w	$32(a0),d4
		sub.w	d4,d2
		add.w	d4,d3
		move.w	$14(a1),d4
		cmp.w	d2,d4
		blt.w	locret_1CEF0
		cmp.w	d3,d4
		bge.w	locret_1CEF0
		move.b	$2C(a0),d0
		bpl.s	loc_1CE1C
		btst	#1,$2A(a1)
		bne.w	locret_1CEF0

loc_1CE1C:
		move.w	$10(a1),d2
		sub.w	d1,d2
		bcc.s	loc_1CE26
		neg.w	d2

loc_1CE26:
		cmpi.w	#$40,d2
		bhs.w	locret_1CEF0
		btst	#0,4(a0)
		bne.s	loc_1CE54
		move.b	#$C,$46(a1)
		move.b	#$D,$47(a1)
		btst	#3,d0
		beq.s	loc_1CE54
		move.b	#$E,$46(a1)
		move.b	#$F,$47(a1)

loc_1CE54:

		andi.w	#$7FFF,$A(a1)
		btst	#5,d0
		beq.w	locret_1CEF0
		ori.w	#$8000,$A(a1)
		bra.w	locret_1CEF0
; ---------------------------------------------------------------------------

loc_1CE6C:
		cmp.w	$10(a1),d1
		bls.w	locret_1CEF0
		move.b	#0,-1(a2)
		move.w	$14(a0),d2
		move.w	d2,d3
		move.w	$32(a0),d4
		sub.w	d4,d2
		add.w	d4,d3
		move.w	$14(a1),d4
		cmp.w	d2,d4
		blt.w	locret_1CEF0
		cmp.w	d3,d4
		bge.w	locret_1CEF0
		move.b	$2C(a0),d0
		bpl.s	loc_1CEA8
		btst	#1,$2A(a1)
		bne.w	locret_1CEF0

loc_1CEA8:
		move.w	$10(a1),d2
		sub.w	d1,d2
		bcc.s	loc_1CEB2
		neg.w	d2

loc_1CEB2:
		cmpi.w	#$40,d2
		bhs.s	locret_1CEF0
		btst	#0,4(a0)
		bne.s	loc_1CEDE
		move.b	#$C,$46(a1)
		move.b	#$D,$47(a1)
		btst	#4,d0
		beq.s	loc_1CEDE
		move.b	#$E,$46(a1)
		move.b	#$F,$47(a1)

loc_1CEDE:

		andi.w	#$7FFF,$A(a1)
		btst	#6,d0
		beq.s	locret_1CEF0
		ori.w	#$8000,$A(a1)

locret_1CEF0:

		rts
; End of function sub_1CDDA

; ---------------------------------------------------------------------------

loc_1CEF2:

		tst.b	(Debug_On).w
		bne.w	loc_1CF14
		move.w	$14(a0),d1
		lea	$34(a0),a2
		lea	(Player_1).w,a1
		bsr.s	sub_1CF42
		lea	(Player_2).w,a1
		bsr.s	sub_1CF42
		jmp	Delete_Sprite_If_Not_In_Range.w
; ---------------------------------------------------------------------------

loc_1CF14:
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_1CF1A:

		move.w	$14(a0),d1
		lea	$34(a0),a2
		lea	(Player_1).w,a1
		bsr.s	sub_1CF42
		lea	(Player_2).w,a1
		bsr.s	sub_1CF42
		lea	(Breathing_bubbles).w,a1
		tst.b	(Debug_mode_flag).w
		beq.w	sub_1CF42
		bsr.s	sub_1CF42
		jmp	Draw_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_1CF42:

		tst.b	(a2)+
		bne.w	loc_1CFD4
		cmp.w	$14(a1),d1
		bhi.w	locret_1D058
		move.b	#1,-1(a2)
		move.w	$10(a0),d2
		move.w	d2,d3
		move.w	$32(a0),d4
		sub.w	d4,d2
		add.w	d4,d3
		move.w	$10(a1),d4
		cmp.w	d2,d4
		blt.w	locret_1D058
		cmp.w	d3,d4
		bge.w	locret_1D058
		move.b	$2C(a0),d0
		bpl.s	loc_1CF84
		btst	#1,$2A(a1)
		bne.w	locret_1D058

loc_1CF84:
		move.w	$14(a1),d2
		sub.w	d1,d2
		bcc.s	loc_1CF8E
		neg.w	d2

loc_1CF8E:
		cmpi.w	#$40,d2
		bhs.w	locret_1D058
		btst	#0,4(a0)
		bne.s	loc_1CFBC
		move.b	#$C,$46(a1)
		move.b	#$D,$47(a1)
		btst	#3,d0
		beq.s	loc_1CFBC
		move.b	#$E,$46(a1)
		move.b	#$F,$47(a1)

loc_1CFBC:

		andi.w	#$7FFF,$A(a1)
		btst	#5,d0
		beq.w	locret_1D058
		ori.w	#$8000,$A(a1)
		bra.w	locret_1D058
; ---------------------------------------------------------------------------

loc_1CFD4:
		cmp.w	$14(a1),d1
		bls.w	locret_1D058
		move.b	#0,-1(a2)
		move.w	$10(a0),d2
		move.w	d2,d3
		move.w	$32(a0),d4
		sub.w	d4,d2
		add.w	d4,d3
		move.w	$10(a1),d4
		cmp.w	d2,d4
		blt.w	locret_1D058
		cmp.w	d3,d4
		bge.w	locret_1D058
		move.b	$2C(a0),d0
		bpl.s	loc_1D010
		btst	#1,$2A(a1)
		bne.w	locret_1D058

loc_1D010:
		move.w	$14(a1),d2
		sub.w	d1,d2
		bcc.s	loc_1D01A
		neg.w	d2

loc_1D01A:
		cmpi.w	#$40,d2
		bhs.s	locret_1D058
		btst	#0,4(a0)
		bne.s	loc_1D046
		move.b	#$C,$46(a1)
		move.b	#$D,$47(a1)
		btst	#4,d0
		beq.s	loc_1D046
		move.b	#$E,$46(a1)
		move.b	#$F,$47(a1)

loc_1D046:

		andi.w	#$7FFF,$A(a1)
		btst	#6,d0
		beq.s	locret_1D058
		ori.w	#$8000,$A(a1)

locret_1D058:

		rts
; End of function sub_1CF42

; ---------------------------------------------------------------------------
;Map_PathSwap:
	include "General/Sprites/Level Misc/Map - Path Swap.asm"

; ---------------------------------------------------------------------------

Obj_3A_2:
		move.l	#Map_PathSwap,$C(a0)
		move.w	#$26BC,$A(a0)
		ori.b	#4,4(a0)
		move.b	#$40,7(a0)
		move.b	#$40,6(a0)
		move.w	#prio(5),8(a0)
		move.b	$2C(a0),d0
		btst	#2,d0
		beq.s	loc_1D180
		andi.w	#7,d0
		move.b	d0,$22(a0)
		andi.w	#3,d0
		add.w	d0,d0
		move.w	word_1D178(pc,d0.w),$32(a0)
		move.w	$14(a0),d1
		lea	(Player_1).w,a1
		cmp.w	$14(a1),d1
		bhs.s	loc_1D15E
		move.b	#1,$34(a0)

loc_1D15E:
		lea	(Player_2).w,a1
		cmp.w	$14(a1),d1
		bhs.s	loc_1D16E
		move.b	#1,$35(a0)

loc_1D16E:
		move.l	#loc_1D390,(a0)
		bra.w	loc_1D390
; ---------------------------------------------------------------------------
word_1D178:	dc.w $20
		dc.w $40
		dc.w $80
		dc.w $100
; ---------------------------------------------------------------------------

loc_1D180:
		andi.w	#3,d0
		move.b	d0,$22(a0)
		add.w	d0,d0
		move.w	word_1D178(pc,d0.w),$32(a0)
		move.w	$10(a0),d1
		lea	(Player_1).w,a1
		cmp.w	$10(a1),d1
		bhs.s	loc_1D1A4
		move.b	#1,$34(a0)

loc_1D1A4:
		lea	(Player_2).w,a1
		cmp.w	$10(a1),d1
		bhs.s	loc_1D1B4
		move.b	#1,$35(a0)

loc_1D1B4:
		move.l	#loc_1D1BA,(a0)

loc_1D1BA:
		tst.b	(Debug_On).w
		bne.w	loc_1D1DC
		move.w	$10(a0),d1
		lea	$34(a0),a2
		lea	(Player_1).w,a1
		lea	(Player_2).w,a3		; NAT: used in the code
		bsr.s	sub_1D1E2
		lea	(Player_2).w,a1
		lea	(Player_1).w,a3		; NAT: used in the code
		bsr.s	sub_1D1E2
		jmp	Delete_Sprite_If_Not_In_Range.w
; ---------------------------------------------------------------------------

loc_1D1DC:
		jmp	Sprite_OnScreen_Test.w

; =============== S U B R O U T I N E =======================================


sub_1D1E2:
		cmp.b	#6,5(a1)		; NAT: check if dead
		blo.s	.noded			; if not, branch
		cmp.b	#6,5(a3)		; NAT: check if other is dead
		bhs.s	.noded			; if is, branch
		st	(a2)+			; set dead flag
		rts

.noded		tst.b	(a2)+
		bpl.s	.nofix			; branch if no fix
		cmp.w	#Player_1,a1		; check if this is p1
		bne.s	.tails			; if not, branch

		move.b	2(a2),1(a2)		;
		move.b	(a2),-1(a2)		; copy state from Tails
		bra.s	.nofix

.tails		move.b	(a2),1(a2)		;
		move.b	-2(a2),-1(a2)		; copy state from Sonic

.nofix		bne.w	loc_1D2BE
		cmp.w	$10(a1),d1
		bhi.w	locret_1D38E
		move.b	#1,-1(a2)
		move.w	$14(a0),d2
		move.w	d2,d3
		move.w	$32(a0),d4
		sub.w	d4,d2
		add.w	d4,d3
		move.w	$14(a1),d4
		cmp.w	d2,d4
		blt.w	locret_1D38E
		cmp.w	d3,d4
		bge.w	locret_1D38E
		move.b	$2C(a0),d0
		bpl.s	loc_1D224
		btst	#1,$2A(a1)
		bne.w	locret_1D38E

loc_1D224:
		move.w	$10(a1),d2
		sub.w	d1,d2
		bcc.s	loc_1D22E
		neg.w	d2

loc_1D22E:
		cmpi.w	#$40,d2
		bhs.w	locret_1D38E
		btst	#0,4(a0)
		bne.s	loc_1D2A6
		btst	#3,d0
		bne.s	loc_1D276
		cmpi.b	#$C,$46(a1)
		bne.s	loc_1D254
		move.b	#0,1(a2)
		bra.s	loc_1D268
; ---------------------------------------------------------------------------

loc_1D254:
		addq.b	#1,1(a2)
		cmpi.b	#2,1(a2)
		bne.s	loc_1D268
		move.b	#0,1(a2)
		bra.s	loc_1D2A6
; ---------------------------------------------------------------------------

loc_1D268:

		move.b	#$C,$46(a1)
		move.b	#$D,$47(a1)
		bra.s	loc_1D2A6
; ---------------------------------------------------------------------------

loc_1D276:
		cmpi.b	#$C,$46(a1)
		bne.s	loc_1D286
		move.b	#0,1(a2)
		bra.s	loc_1D2A6
; ---------------------------------------------------------------------------

loc_1D286:
		addq.b	#1,1(a2)
		cmpi.b	#2,1(a2)
		bne.s	loc_1D29A
		move.b	#0,1(a2)
		bra.s	loc_1D2A6
; ---------------------------------------------------------------------------

loc_1D29A:
		move.b	#$E,$46(a1)
		move.b	#$F,$47(a1)

loc_1D2A6:

		andi.w	#$7FFF,$A(a1)
		btst	#5,d0
		beq.w	locret_1D38E
		ori.w	#$8000,$A(a1)
		bra.w	locret_1D38E
; ---------------------------------------------------------------------------

loc_1D2BE:
		cmp.w	$10(a1),d1
		bls.w	locret_1D38E
		move.b	#0,-1(a2)
		move.w	$14(a0),d2
		move.w	d2,d3
		move.w	$32(a0),d4
		sub.w	d4,d2
		add.w	d4,d3
		move.w	$14(a1),d4
		cmp.w	d2,d4
		blt.w	locret_1D38E
		cmp.w	d3,d4
		bge.w	locret_1D38E
		move.b	$2C(a0),d0
		bpl.s	loc_1D2FA
		btst	#1,$2A(a1)
		bne.w	locret_1D38E

loc_1D2FA:
		move.w	$10(a1),d2
		sub.w	d1,d2
		bcc.s	loc_1D304
		neg.w	d2

loc_1D304:
		cmpi.w	#$40,d2
		bhs.w	locret_1D38E
		btst	#0,4(a0)
		bne.s	loc_1D37C
		btst	#4,d0
		bne.s	loc_1D34C
		cmpi.b	#$C,$46(a1)
		bne.s	loc_1D32A
		move.b	#0,1(a2)
		bra.s	loc_1D33E
; ---------------------------------------------------------------------------

loc_1D32A:
		addq.b	#1,1(a2)
		cmpi.b	#2,1(a2)
		bne.s	loc_1D33E
		move.b	#0,1(a2)
		bra.s	loc_1D37C
; ---------------------------------------------------------------------------

loc_1D33E:

		move.b	#$C,$46(a1)
		move.b	#$D,$47(a1)
		bra.s	loc_1D37C
; ---------------------------------------------------------------------------

loc_1D34C:
		cmpi.b	#$C,$46(a1)
		bne.s	loc_1D35C
		move.b	#0,1(a2)
		bra.s	loc_1D37C
; ---------------------------------------------------------------------------

loc_1D35C:
		addq.b	#1,1(a2)
		cmpi.b	#2,1(a2)
		bne.s	loc_1D370
		move.b	#0,1(a2)
		bra.s	loc_1D37C
; ---------------------------------------------------------------------------

loc_1D370:
		move.b	#$E,$46(a1)
		move.b	#$F,$47(a1)

loc_1D37C:

		andi.w	#$7FFF,$A(a1)
		btst	#6,d0
		beq.s	locret_1D38E
		ori.w	#$8000,$A(a1)

locret_1D38E:

		rts
; End of function sub_1D1E2

; ---------------------------------------------------------------------------

loc_1D390:

		tst.b	(Debug_On).w
		bne.w	loc_1D3B2
		move.w	$14(a0),d1
		lea	$34(a0),a2
		lea	(Player_1).w,a1
		bsr.s	sub_1D3B8
		lea	(Player_2).w,a1
		bsr.s	sub_1D3B8
		jmp	Delete_Sprite_If_Not_In_Range.w
; ---------------------------------------------------------------------------

loc_1D3B2:
		jmp	Sprite_OnScreen_Test.w

; =============== S U B R O U T I N E =======================================


sub_1D3B8:
		tst.b	(a2)+
		bne.w	loc_1D494
		cmp.w	$14(a1),d1
		bhi.w	locret_1D564
		move.b	#1,-1(a2)
		move.w	$10(a0),d2
		move.w	d2,d3
		move.w	$32(a0),d4
		sub.w	d4,d2
		add.w	d4,d3
		move.w	$10(a1),d4
		cmp.w	d2,d4
		blt.w	locret_1D564
		cmp.w	d3,d4
		bge.w	locret_1D564
		move.b	$2C(a0),d0
		bpl.s	loc_1D3FA
		btst	#1,$2A(a1)
		bne.w	locret_1D564

loc_1D3FA:
		move.w	$14(a1),d2
		sub.w	d1,d2
		bcc.s	loc_1D404
		neg.w	d2

loc_1D404:
		cmpi.w	#$40,d2
		bhs.w	locret_1D564
		btst	#0,4(a0)
		bne.s	loc_1D47C
		btst	#3,d0
		bne.s	loc_1D44C
		cmpi.b	#$C,$46(a1)
		bne.s	loc_1D42A
		move.b	#0,1(a2)
		bra.s	loc_1D43E
; ---------------------------------------------------------------------------

loc_1D42A:
		addq.b	#1,1(a2)
		cmpi.b	#2,1(a2)
		bne.s	loc_1D43E
		move.b	#0,1(a2)
		bra.s	loc_1D47C
; ---------------------------------------------------------------------------

loc_1D43E:

		move.b	#$C,$46(a1)
		move.b	#$D,$47(a1)
		bra.s	loc_1D47C
; ---------------------------------------------------------------------------

loc_1D44C:
		cmpi.b	#$C,$46(a1)
		bne.s	loc_1D45C
		move.b	#0,1(a2)
		bra.s	loc_1D47C
; ---------------------------------------------------------------------------

loc_1D45C:
		addq.b	#1,1(a2)
		cmpi.b	#2,1(a2)
		bne.s	loc_1D470
		move.b	#0,1(a2)
		bra.s	loc_1D47C
; ---------------------------------------------------------------------------

loc_1D470:
		move.b	#$E,$46(a1)
		move.b	#$F,$47(a1)

loc_1D47C:

		andi.w	#$7FFF,$A(a1)
		btst	#5,d0
		beq.w	locret_1D564
		ori.w	#$8000,$A(a1)
		bra.w	locret_1D564
; ---------------------------------------------------------------------------

loc_1D494:
		cmp.w	$14(a1),d1
		bls.w	locret_1D564
		move.b	#0,-1(a2)
		move.w	$10(a0),d2
		move.w	d2,d3
		move.w	$32(a0),d4
		sub.w	d4,d2
		add.w	d4,d3
		move.w	$10(a1),d4
		cmp.w	d2,d4
		blt.w	locret_1D564
		cmp.w	d3,d4
		bge.w	locret_1D564
		move.b	$2C(a0),d0
		bpl.s	loc_1D4D0
		btst	#1,$2A(a1)
		bne.w	locret_1D564

loc_1D4D0:
		move.w	$14(a1),d2
		sub.w	d1,d2
		bcc.s	loc_1D4DA
		neg.w	d2

loc_1D4DA:
		cmpi.w	#$40,d2
		bhs.w	locret_1D564
		btst	#0,4(a0)
		bne.s	loc_1D552
		btst	#4,d0
		bne.s	loc_1D522
		cmpi.b	#$C,$46(a1)
		bne.s	loc_1D500
		move.b	#0,1(a2)
		bra.s	loc_1D514
; ---------------------------------------------------------------------------

loc_1D500:
		addq.b	#1,1(a2)
		cmpi.b	#2,1(a2)
		bne.s	loc_1D514
		move.b	#0,1(a2)
		bra.s	loc_1D552
; ---------------------------------------------------------------------------

loc_1D514:

		move.b	#$C,$46(a1)
		move.b	#$D,$47(a1)
		bra.s	loc_1D552
; ---------------------------------------------------------------------------

loc_1D522:
		cmpi.b	#$C,$46(a1)
		bne.s	loc_1D532
		move.b	#0,1(a2)
		bra.s	loc_1D552
; ---------------------------------------------------------------------------

loc_1D532:
		addq.b	#1,1(a2)
		cmpi.b	#2,1(a2)
		bne.s	loc_1D546
		move.b	#0,1(a2)
		bra.s	loc_1D552
; ---------------------------------------------------------------------------

loc_1D546:
		move.b	#$E,$46(a1)
		move.b	#$F,$47(a1)

loc_1D552:

		andi.w	#$7FFF,$A(a1)
		btst	#6,d0
		beq.s	locret_1D564
		ori.w	#$8000,$A(a1)

locret_1D564:

		rts
; End of function sub_1D3B8

; ---------------------------------------------------------------------------

Obj_FloatMonitor:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	Monitor2_Index(pc,d0.w),d1
		jmp	Monitor2_Index(pc,d1.w)
; ---------------------------------------------------------------------------
; off_1D574:
Monitor2_Index:
		dc.w Obj_MonitorInit2-Monitor2_Index
		dc.w Obj_MonitorMain2-Monitor2_Index
		dc.w Obj_MonitorBreak-Monitor2_Index
		dc.w Obj_MonitorAnimate2-Monitor2_Index
		dc.w loc_1D61A-Monitor2_Index
; ---------------------------------------------------------------------------

Obj_Monitor:
		moveq	#0,d0
		move.b	routine(a0),d0
		move.w	Monitor_Index(pc,d0.w),d1
		jmp	Monitor_Index(pc,d1.w)
; ---------------------------------------------------------------------------
; off_1D574:
Monitor_Index:
		dc.w Obj_MonitorInit-Monitor_Index
		dc.w Obj_MonitorMain-Monitor_Index
		dc.w Obj_MonitorBreak-Monitor_Index
		dc.w Obj_MonitorAnimate-Monitor_Index
		dc.w loc_1D61A-Monitor_Index
; ---------------------------------------------------------------------------
Obj_MonitorInit2:
		tst.w	priority(a0)			; check if priority set (spawned via debug)
		bne.s	.spawn				; if is, then ignore
		btst	#2,OptionsBits.w		; check if we have floaty monitors
		beq.w	j_Delete_Current_Sprite		; if no, delete

.spawn		bsr.s	Obj_MonitorInit
		clr.w	art_tile(a0)		; 0-based
		move.l	#Map_FloatMonitor,mappings(a0)
		clr.w	$40(a0)
		move.w	x_pos(a0),$44(a0)
		move.w	y_pos(a0),$38(a0)
		move.w	#$0C0F,y_radius(a0)
		move.w	#$130E,height_pixels(a0)
		move.b	#$79,collision_flags(a0)
		rts

Obj_MonitorInit:
		addq.b	#2,routine(a0)	; => Obj_MonitorMain
		move.w	#$100F,y_radius(a0)
		move.w	#$100E,height_pixels(a0)
		move.l	#Map_Monitor,mappings(a0)
		move.w	#make_art_tile(ArtTile_ArtNem_Powerups,0,0),art_tile(a0)
		ori.b	#4,render_flags(a0)
		move.w	#prio(3),priority(a0)
		move.w	respawn_addr(a0),d0	; Get address in respawn table
		beq.s	.notbroken		; If it's zero, it isn't remembered
		movea.w	d0,a2			; Load address into a2
		btst	#0,(a2)			; Is this monitor broken?
		beq.s	.notbroken		; If not, branch
		move.b	#$B,mapping_frame(a0)	; Use 'broken monitor' frame

		move.l	#Sprite_OnScreen_Test,d0
		cmp.l	#Obj_Monitor,(a0)	; check if normal
		beq.s	.norm
		move.l	#loc_1D61A2,d0		; else use new frame

.norm		move.l	d0,(a0)			; save addr
		rts
; ---------------------------------------------------------------------------
; loc_1D5D0:
.notbroken:
		btst	#0,OptionsBits.w		; check if monitors are random
		beq.s	.norandom			; if not, branch
		move.b	#9,subtype(a0)			; set to random monitor

.norandom	move.b	#$46,collision_flags(a0)
		move.b	subtype(a0),anim(a0)	; Subtype determines what powerup is inside
		rts

Obj_MonitorMain2:
		jsr	Obj_MonitorFloat(pc)
		bra.s	Obj_MonitorSolid2

Obj_MonitorMain:
		bsr.w	Obj_MonitorFall
		move.w	x_pos(a0),d4

Obj_MonitorSolid:
		move.w	#$19,d1			; Monitor's width
		moveq	#0,d2
		move.b	y_radius(a0),d2		; height
		move.w	d2,d3
		addq.w	#1,d3
		lea	(Player_1).w,a1
		moveq	#p1_standing_bit,d6
		movem.l	d1-d4,-(sp)
		bsr.w	SolidObject_Monitor_SonicKnux
		movem.l	(sp)+,d1-d4
		lea	(Player_2).w,a1
		moveq	#p2_standing_bit,d6
		bsr.w	SolidObject_Monitor_SonicKnux

Obj_MonitorSolid2:
		jsr	Monitor_Fire_Shield(pc)
		tst.w	parent(a0)			; NAT: Check for parent
		bne.s	loc_1D61A			; if nonzero, we can NOT check for collision

		jsr	Add_SpriteToCollisionResponseList.w
		lea	(Ani_Monitor).l,a1
		jsr	Animate_Sprite.w

loc_1D61A:
		jmp	Sprite_OnScreen_Test.w

loc_1D61A2:
		jsr	Obj_MonitorFloat(pc)
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

Obj_MonitorAnimate2:
		jsr	Obj_MonitorFloat(pc)
; loc_1D61E:
Obj_MonitorAnimate:
		cmpi.b	#$B,mapping_frame(a0)	; Is monitor broken?
		bne.s	.notbroken		; If not, branch
		move.l	#loc_1D61A,d0
		cmp.l	#Obj_MonitorAnimate,(a0)
		beq.s	.br
		move.l	#loc_1D61A2,d0

.br		move.l	d0,(a0)
; loc_1D62C:
.notbroken:
		lea	(Ani_Monitor).l,a1
		jsr	Animate_Sprite.w
		jmp	Sprite_OnScreen_Test.w

Obj_MonitorFloat:
		move.w	$38(a0),y_pos(a0)		; get ypos
		move.w	y_vel(a0),d0			; NOTE: Used in some game modes
		add.w	#$10,d0
		cmp.w	#$20,d0
		bhs.s	.sine

		addq.b	#1,$41(a0)			; add to sine
.sine		move.w	$40(a0),d0			; get sine offset
		jsr	GetSineCosine.w			; calculate sine
		asr.w	#5,d0				; smaller sway
		add.w	d0,y_pos(a0)			; get result
.rts		rts

; =============== S U B R O U T I N E =======================================

; sub_1D63A:
Obj_MonitorFall:
		move.b	routine_secondary(a0),d0
		beq.s	locret_1D694
		btst	#1,render_flags(a0)	; Is monitor upside down?
		bne.s	Obj_MonitorFallUpsideDown ; If so, branch
		jsr	MoveSprite.w
		tst.w	y_vel(a0)		; Is monitor moving up?
		bmi.s	locret_1D694		; If so, return

		cmp.w	#$1700,Current_zone.w	; NAT: check if DEZ1
		bne.s	.notdez
		move.w	#$F0,d1			; lower pos

		move.w	Camera_x_pos.w,d0	; get cam pos
		add.w	#$80,d0			; get real
		cmp.w	x_pos(a0),d0		; check if we are further
		bgt.s	.fix			; if not, branch

		move.w	#$D0,d1			; higher pos
.fix		cmp.w	y_pos(a0),d1		; check if low enough
		bhs.s	.notdez			; if not, branch
		move.w	d1,y_pos(a0)		; save pos
		bra.s	.inground2

.notdez		jsr	ObjCheckFloorDist.w
		tst.w	d1			; Is monitor in the ground?
		beq.s	.inground		; If so, branch
		bpl.s	locret_1D694		; if not, return
; loc_1D65E:
.inground
		add.w	d1,y_pos(a0)		; Move monitor out of the ground
.inground2	clr.w	y_vel(a0)
		clr.b	routine_secondary(a0)	; Stop monitor from falling
		rts
; ---------------------------------------------------------------------------
; loc_1D66C:
Obj_MonitorFallUpsideDown:
		jsr	MoveSprite2.w
		subi.w	#$38,y_vel(a0)
		tst.w	y_vel(a0)		; Is monitor moving down?
		bpl.s	locret_1D694		; If so, return
		jsr	ObjCheckCeilingDist.w
		tst.w	d1			; Is monitor in the ground (ceiling)?
		beq.s	.inground		; If so, branch
		bpl.s	locret_1D694		; if not, return
; loc_1D688:
.inground:
		sub.w	d1,y_pos(a0)		; Move monitor out of the ground
		clr.w	y_vel(a0)
		clr.b	routine_secondary(a0)	; Stop monitor from falling

locret_1D694:
		rts
; End of function Obj_MonitorFall


; =============== S U B R O U T I N E =======================================

; sub_1D696:
SolidObject_Monitor_SonicKnux:
		btst	d6,status(a0)		; Is Sonic/Knux standing on the monitor?
		bne.s	Monitor_ChkOverEdge	; If so, branch
		cmpi.b	#2,anim(a1)		; Is Sonic/Knux in their rolling animation?
		beq.s	locret_1D6BC		; If so, return
		cmpi.b	#2,character_id(a1)	; Is character Knuckles?
		bne.s	SolidObject_cont		; If not, branch
		cmpi.b	#1,double_jump_flag(a1)	; Is Knuckles gliding?
		beq.s	locret_1D6BC		; If so, return
		cmpi.b	#3,double_jump_flag(a1)	; Is Knuckles sliding after gliding?
		bne.s	SolidObject_cont		; If not, branch

locret_1D6BC:
		rts

; =============== S U B R O U T I N E =======================================

; sub_1D6C2:
SolidObject_Monitor_Tails
		btst	d6,status(a0)		; Is Tails standing on the monitor?
		bne.s	Monitor_ChkOverEdge	; If so, branch
		tst.w	(Competition_mode).w	; Are we in competition mode?
		beq.s	SolidObject_cont	; If not, branch
		cmpi.b	#2,anim(a1)		; Is Tails in his rolling animation?
		beq.s	locret_1D6BC		; If not, branch
		rts

SolidObject_cont:
		jmp	loc_1DF88.w
; ---------------------------------------------------------------------------
; loc_1D6DC:
Monitor_ChkOverEdge:
		move.w	d1,d2
		add.w	d2,d2
		btst	#1,status(a1)		; Is the character in the air?
		bne.s	.notonmonitor		; If so, branch
		; Check if character is standing on
		move.w	x_pos(a1),d0
		sub.w	x_pos(a0),d0
		add.w	d1,d0
		bmi.s	.notonmonitor		; Branch, if character is behind the left edge of the monitor
		cmp.w	d2,d0
		blo.s	Monitor_CharStandOn	; Branch, if character is not beyond the right edge of the monitor
; loc_1D6F8:
.notonmonitor:
		; if the character isn't standing on the monitor
		bclr	#3,status(a1)		; Clear 'on object' bit
		bset	#1,status(a1)		; Set 'in air' bit
		bclr	d6,status(a0)		; Clear 'standing on' bit for the current character
		moveq	#0,d4
		rts
; ---------------------------------------------------------------------------
; loc_1D70C:
Monitor_CharStandOn:
		move.w	d4,d2
		jsr	MvSonicOnPtfm.w
		moveq	#0,d4
		rts
; End of function SolidObject_Monitor_Tails

; ---------------------------------------------------------------------------
; loc_1D716:
Obj_MonitorBreak:
		move.b	status(a0),d0
		andi.b	#standing_mask|pushing_mask,d0	; Is someone touching the monitor?
		beq.s	Obj_MonitorSpawnIcon		; If not, branch
		move.b	d0,d1
		andi.b	#p1_standing|p1_pushing,d1	; Is it the main character?
		beq.s	.notmainchar			; If not, branch
		andi.b	#$D7,(Player_1+status).w
		ori.b	#2,(Player_1+status).w		; Prevent main character from walking in the air
; loc_1D734:
.notmainchar:
		andi.b	#p2_standing|p2_pushing,d0	; Is it the sidekick?
		beq.s	Obj_MonitorSpawnIcon		; If not, branch
		andi.b	#$D7,(Player_2+status).w
		ori.b	#2,(Player_2+status).w		; Prevent sidekick from walking in the air
; loc_1D746:
Obj_MonitorSpawnIcon:
		andi.b	#3,status(a0)
		move.b	#0,collision_flags(a0)
		moveq	#0,d2
		tst.w	parent(a0)			; check parent
		bne.s	.not0				; if nonzero, branch

		jsr	Create_New_Sprite3.w
		bne.s	.skipiconcreation
		move.l	#Obj_MonitorContents,(a1)
		move.w	x_pos(a0),x_pos(a1)		; Set icon's position
		sub.w	#8,x_pos(a1)
		move.w	y_pos(a0),y_pos(a1)
		move.b	anim(a0),anim(a1)
		move.b	render_flags(a0),render_flags(a1)
		move.b	status(a0),status(a1)
		move.w	#Player_1,parent(a1)

		move.w	#Player_2,parent(a0)
		moveq	#8,d2

.not0		jsr	Create_New_Sprite3.w
		bne.s	.skipiconcreation
		move.l	#Obj_MonitorContents,(a1)
		move.w	x_pos(a0),x_pos(a1)		; Set icon's position
		add.w	d2,x_pos(a1)
		move.w	y_pos(a0),y_pos(a1)
		move.b	anim(a0),anim(a1)
		move.b	render_flags(a0),render_flags(a1)
		move.b	status(a0),status(a1)
		move.w	parent(a0),parent(a1)
; loc_1D782:
.skipiconcreation:
		jsr	Create_New_Sprite3.w
		bne.s	.skipexplosioncreation
		move.l	#Obj_Explosion,(a1)
		addq.b	#2,routine(a1)			; => loc_1E61A
		move.w	x_pos(a0),x_pos(a1)		; Set explosion's position
		move.w	y_pos(a0),y_pos(a1)
; loc_1D79E:
.skipexplosioncreation:
		move.w	respawn_addr(a0),d0		; Get address in respawn table
		beq.s	.notremembered			; If it's zero, it isn't remembered
		movea.w	d0,a2				; Load address into a2
		bset	#0,(a2)				; Mark monitor as destroyed
; loc_1D7AA:
.notremembered:
		move.b	#$A,anim(a0)			; Display 'broken' animation
		move.l	#Obj_MonitorAnimate,d0
		cmp.l	#Obj_Monitor,(a0)		; check if normal
		beq.s	.set				; if so, branch
		move.l	#Obj_MonitorAnimate2,d0		; use new object

.set		move.l	d0,(a0)
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
; loc_1D7BA:
Obj_MonitorContents:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_1D7C8(pc,d0.w),d1
		jmp	off_1D7C8(pc,d1.w)
; ---------------------------------------------------------------------------
off_1D7C8:	dc.w loc_1D7CE-off_1D7C8

		dc.w loc_1D81A-off_1D7C8
		dc.w loc_1DB2E-off_1D7C8
; ---------------------------------------------------------------------------

loc_1D7CE:
		addq.b	#2,5(a0)
		move.w	#$84C4,$A(a0)
		ori.b	#$24,4(a0)
		move.w	#prio(3),8(a0)
		move.b	#8,7(a0)
		move.w	#-$300,$1A(a0)
		btst	#1,4(a0)
		beq.s	loc_1D7FC
		neg.w	$1A(a0)

loc_1D7FC:
		cmp.b	#9,$20(a0)			; check if this is the random monitor
		bne.s	.norandom			; branch if not
		btst	#0,OptionsBits.w		; check if monitors are random
		beq.s	.norandom			; if not, branch
		jsr	Monitor_GetRandom(pc)		; get the ID to use

.norandom	moveq	#0,d0
		move.b	$20(a0),d0
		addq.b	#1,d0
		move.b	d0,$22(a0)
		movea.l	#Map_Monitor,a1
		add.b	d0,d0
		adda.w	(a1,d0.w),a1
		addq.w	#2,a1
		move.l	a1,$C(a0)

loc_1D81A:
		bsr.s	sub_1D820
		jmp	Draw_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_1D820:
		btst	#1,4(a0)
		bne.s	loc_1D83C
		tst.w	$1A(a0)
		bpl.w	loc_1D850
		jsr	MoveSprite2.w
		addi.w	#$18,$1A(a0)
		rts
; ---------------------------------------------------------------------------

loc_1D83C:
		tst.w	$1A(a0)
		bmi.w	loc_1D850
		jsr	MoveSprite2.w
		subi.w	#$18,$1A(a0)
		rts
; ---------------------------------------------------------------------------

loc_1D850:

		addq.b	#2,5(a0)
		move.w	#30,$24(a0)
		move.w	$42(a0),a1
		moveq	#0,d0
		move.b	$20(a0),d0

MonitorCont_Common:
		add.w	d0,d0
		move.l	ModeTable.w,a4		; NAT: Get mode table to a4
		move.l	$1C(a4),a4		; load the monitor content table
		move.w	(a4,d0.w),d0
		jmp	(a4,d0.w)
; End of function sub_1D820

; ---------------------------------------------------------------------------
MonitorCon_BattleRace:
	dc.w MonitorBR_Hurt-MonitorCon_BattleRace		; blank
	dc.w MonitorBR_1up-MonitorCon_BattleRace		; +1
	dc.w MonitorBR_Hurt-MonitorCon_BattleRace		; eggman
	dc.w MonitorBR_Rings-MonitorCon_BattleRace		; ring
	dc.w MonitorBR_SpeedShoes-MonitorCon_BattleRace		; shoes
	dc.w MonitorBR_Fire_Shield-MonitorCon_BattleRace	; fire shield
	dc.w MonitorBR_Lightning_Shield-MonitorCon_BattleRace	; lightning shield
	dc.w MonitorBR_Bubble_Shield-MonitorCon_BattleRace	; bubble shield
	dc.w MonitorBR_Invincibility-MonitorCon_BattleRace	; stars
;	dc.w MonitorBR_SuperSonic-MonitorCon_BattleRace		; ?

MonitorCon_MiniCNZ1:
	dc.w MonitorBR_Hurt-MonitorCon_MiniCNZ1			; blank
	dc.w MonitorCNZ1_1up-MonitorCon_MiniCNZ1		; +1
	dc.w MonitorBR_Hurt-MonitorCon_MiniCNZ1			; eggman
	dc.w MonitorBR_Rings-MonitorCon_MiniCNZ1		; ring
	dc.w MonitorBR_SpeedShoes-MonitorCon_MiniCNZ1		; shoes
	dc.w MonitorBR_Fire_Shield-MonitorCon_MiniCNZ1		; fire shield
	dc.w MonitorBR_Lightning_Shield-MonitorCon_MiniCNZ1	; lightning shield
	dc.w MonitorBR_Bubble_Shield-MonitorCon_MiniCNZ1	; bubble shield
	dc.w MonitorCNZ1_Invincibility-MonitorCon_MiniCNZ1	; stars
;	dc.w MonitorBR_SuperSonic-MonitorCon_BattleRace		; ?

MonitorCon_TeamMode:
	dc.w MonitorBR_Hurt-MonitorCon_TeamMode			; blank
	dc.w MonitorTM_1up-MonitorCon_TeamMode			; +1
	dc.w MonitorTM_Hurt-MonitorCon_TeamMode			; eggman
	dc.w MonitorBR_Rings-MonitorCon_TeamMode		; ring
	dc.w MonitorBR_SpeedShoes-MonitorCon_TeamMode		; shoes
	dc.w MonitorBR_Fire_Shield-MonitorCon_TeamMode		; fire shield
	dc.w MonitorBR_Lightning_Shield-MonitorCon_TeamMode	; lightning shield
	dc.w MonitorBR_Bubble_Shield-MonitorCon_TeamMode	; bubble shield
	dc.w MonitorBR_Invincibility-MonitorCon_TeamMode	; stars
;	dc.w MonitorBR_SuperSonic-MonitorCon_BattleRace		; ?
; ---------------------------------------------------------------------------

MonitorTM_Hurt:
		add.w	#10,MiniTimer+1.w	; add 10 sec to the mini timer
		rts

MonitorBR_Hurt:
		jmp	HurtPlayerIgnoreInvul.w
; ---------------------------------------------------------------------------

MonitorTM_1up:
		sub.w	#10,MiniTimer+1.w	; sub 10 sec off of the mini timer
		bpl.s	.nounder		; branch if no underflow occurred
		clr.w	MiniTimer+1.w		; reset timer to 0

.nounder	moveq	#$9C,d0			; play chime kinda sound
		jmp	Play_Sound_2.w

MonitorCNZ1_1up:
		moveq	#$9C,d0			; play chime kinda sound
		jsr	Play_Sound_2.w
		ori.b	#1,Update_HUD_ring_count.w

		lea	(Ring_count).w,a2
		cmp.w	#Player_1,a1
		beq.s	.sonic2
		addq.w	#1,a2			; Player 2 rings

.sonic2		add.b	#20,(a2)		; add 20 rings for pls
		cmpi.b	#99,(a2)
		blo.s	.rts
		move.b	#99,(a2)
.rts		rts

MonitorBR_1up:
		moveq	#$9C,d0			; play chime kinda sound
		jsr	Play_Sound_2.w
		ori.b	#1,Update_HUD_score.w

		tst.b	$43(a0)
		bne.s	.sonic
		addq.b	#1,Score.w
		cmp.b	#99,Score.w
		bls.s	.rts
		subq.b	#1,Score.w
.rts		rts

.sonic		addq.b	#1,Score+1.w
		cmp.b	#99,Score+1.w
		bls.s	.rts
		subq.b	#1,Score+1.w

MonitorBR_SuperSonic:
		rts
; ---------------------------------------------------------------------------

MonitorBR_Rings:
		lea	(Ring_count).w,a2
		cmp.w	#Player_1,a1
		beq.s	.sonic
		lea	(Ring_count+1).w,a2

.sonic
loc_1D8CC:
		addi.b	#10,(a2)
		cmpi.b	#99,(a2)
		blo.s	loc_1D8DA
		move.b	#99,(a2)

loc_1D8DA:
loc_1D8F6:
		ori.b	#1,Update_HUD_ring_count.w
		moveq	#$33,d0
		jmp	Play_Sound_2.w
; ---------------------------------------------------------------------------

MonitorBR_SpeedShoes:
		bset	#2,$2B(a1)
		move.b	#70,$36(a1)
		cmpa.w	#Player_1,a1
		bne.s	loc_1D93A
		cmpi.w	#2,(Player_mode).w
		beq.s	loc_1D93A
		move.w	#$C00,(Sonic_Knux_top_speed).w
		move.w	#$18,(Sonic_Knux_acceleration).w
		move.w	#$80,(Sonic_Knux_deceleration).w
		bra.s	loc_1D94C
; ---------------------------------------------------------------------------

loc_1D93A:
		move.w	#$C00,(Tails_top_speed).w
		move.w	#$18,(Tails_acceleration).w
		move.w	#$80,(Tails_deceleration).w

loc_1D94C:
		cmp.b	#4,PlayMode.w		; NAT: check if play mode is tag
		bne.s	.notag			; branch if not
		move.b	#50,$36(a1)

.notag		moveq	#8,d0
		jmp	Change_Music_Tempo.w
; ---------------------------------------------------------------------------

MonitorBR_Fire_Shield:
		andi.b	#$8E,$2B(a1)
		bset	#0,$2B(a1)
		bset	#4,$2B(a1)
		moveq	#$3E,d0
		jsr	Play_Sound_2.w

		; NAT: Optimize this code
		move.l	#Obj_Fire_Shield,Shield-Player_1(a1)
		move.w	a1,Shield-Player_1+Parent(a1)
		bra.s	Monitor_ResetShieldState
; ---------------------------------------------------------------------------

MonitorBR_Lightning_Shield:
		andi.b	#$8E,$2B(a1)
		bset	#0,$2B(a1)
		bset	#5,$2B(a1)
		moveq	#$41,d0
		jsr	Play_Sound_2.w

		; NAT: Optimize this code
		move.l	#Obj_Lightning_Shield,Shield-Player_1(a1)
		move.w	a1,Shield-Player_1+Parent(a1)
		bra.s	Monitor_ResetShieldState
; ---------------------------------------------------------------------------

MonitorBR_Bubble_Shield:
		moveq	#$3F,d0
		jsr	Play_Sound_2.w

MonitorBR_Bubble_Shield2:
		andi.b	#$8E,$2B(a1)
		bset	#0,$2B(a1)
		bset	#6,$2B(a1)

		; NAT: Optimize this code
		move.l	#Obj_Bubble_Shield,Shield-Player_1(a1)
		move.w	a1,Shield-Player_1+Parent(a1)

Monitor_ResetShieldState:
		clr.b	anim+Shield-Player_1(a1)	; NAT: Clear shield animation
		clr.b	double_jump_flag(a1)		; also clear double jump flag
		rts
; ---------------------------------------------------------------------------

MonitorCNZ1_Invincibility:
		move.b	#45,$35(a1)
		bra.s	MonitorBR_Invincibility.c

MonitorBR_Invincibility:
		move.b	#$96,$35(a1)
.c		bset	#1,$2B(a1)
	;	tst.b	(Boss_flag).w
	;	bne.s	loc_1DA3E
	;	cmpi.b	#$C,$2C(a1)
	;	bls.s	loc_1DA3E
	;	moveq	#$2C,d0
	;	jsr	Play_Sound.w
		jsr	CheckRightMusicTrack.w

loc_1DA3E:
		cmp.w	#Player_1,a1			; NAT: Check if this is Sonic
		bne.s	.tails				; if not, branch
		move.l	#Obj_Invincibility,Hyper_Sonic_stars.w
		move.w	a1,Hyper_Sonic_stars+Parent.w
		bra.s	Monitor_ResetShieldState

.tails		move.l	#Obj_Invincibility,Invincibility_stars.w
		move.w	a1,Invincibility_stars+Parent.w
		bra.s	Monitor_ResetShieldState
; ---------------------------------------------------------------------------

loc_1DB2E:
		pea	Delete_Current_Sprite		; delete last
		moveq	#0,d1
		move.b	$20(a0),d1			; get monitor type
		move.w	$42(a0),a3			; get player to a3

MonitorTableAdd:
		lea	MonContTable.w,a1		; get mon contents table to a1
		cmp.w	#Player_1,a3			; check if p1 destroyed monitor
		beq.s	.wassonic			; if not, branch
		adda.w	#$40,a1				; go to Tails' table

.wassonic	moveq	#8-1,d0				; 8 total entries
		lea	(a1),a2				; copy to a2
.loopentries	tst.b	(a1)				; check if this entry is free
		bpl.s	.notfree			; if not, branch

		moveq	#8-1,d2				; loop count
		moveq	#-1,d3				; prepare min queue
.entryloop	tst.b	(a2)				; check if this monitor exists
		bmi.s	.nextentry			; if not, branch
		cmp.b	#$FE,2(a2)			; check if moving out
		beq.s	.nextentry			; if so, do not check

		cmp.b	#3,d1				; check if Sonic, Eggman or Rings
		ble.s	.nodoublechk			; if so, do not check for doubles
		cmp.b	(a2),d1				; check if the monitor type is same
		bne.s	.nodoublechk			; if not, branch
		move.w	#$FF00,2(a2)			; move it out of way

.nodoublechk	cmp.b	1(a2),d3			; check if the queue pos is higher
		bge.s	.nextentry			; if not, branch
		move.b	1(a2),d3			; copy queue pos

.nextentry	addq.w	#8,a2				; skip over the monitor
		dbf	d2,.entryloop			; goto next monitor

		move.b	d1,(a1)+			; copy monitor type
		addq.b	#1,d3				; add 1 to queue pos
		move.b	d3,(a1)+			; save queue pos
		add.w	d1,d1				; double ID
		move.w	.data-2(pc,d1.w),(a1)+		; save rest of the data
		clr.w	(a1)+				; save y-pos

		cmp.w	#Player_1,a3			; check if is player 1
		beq.s	.p1				; branch if so
		move.w	#$80+320+$10,(a1)+		; save x-pos
.rts		rts

.p1		move.w	#$80-$10,(a1)+			; save x-pos
		rts

.notfree	addq.w	#8,a1				; skip over data bytes
		dbf	d0,.loopentries			; loop for all 8 entries
		rts

.data		dc.w $FF38, $FF38, $FF38		; sonic, eggman, rings
		dc.w $36FF				; speed shoes
		dc.w $2B04, $2B05, $2B06		; fire, electric and bubble shield
		dc.w $35FF				; invinciblity
; ---------------------------------------------------------------------------

Mon_ScoreMax =		8

Monitor_GetRandom:
		lea	Mon_RandomizedShield.w,a3	; P1 data
		move.b	Score.w,d6			; get p1 score
		sub.b	Score+1.w,d6			; sub p2 score
		ext.w	d6				; extend to word

		cmp.b	#4,PlayMode.w			; check if tag battle
		bne.s	.cont				; if so, branch
		asr.w	#1,d6				; divide diff by 2

.cont		tst.b	$43(a0)				; check if tails
		bne.s	.issonic			; if is, branch
		neg.w	d6				; negate score
		addq.w	#1,a3				; P2 data

.issonic	cmp.w	#Mon_ScoreMax-1,d6		; check max diff
		ble.s	.nomax				; if not more than it, branch
		moveq	#Mon_ScoreMax-1,d6		; set max diff

.nomax		cmp.w	#-Mon_ScoreMax,d6		; check min diff
		bge.s	.nomin				; if not less than it, branch
		moveq	#-Mon_ScoreMax,d6		; set min diff

.nomin		addq.w	#Mon_ScoreMax,d6		; make it all positive
		add.w	d6,d6				; double dif
		add.w	d6,d6				; ''
		and.w	#$38,d6				; keep in range (2 score diff per level of luck)

.redo		jsr	Random_Number.w			; generate a random number
		add.w	V_int_run_count+2.w,d0		; add v-int run ctr to random
		lea	.monitorids(pc,d6.w),a2		; get appropriate array pos
.nosel		move.b	(a2)+,$20(a0)			; save the animation ID
		cmp.b	(a2)+,d0			; check if chance is higher than random
		bhi.s	.nosel				; if not, do not select it

	; becuase of some annoying VRAM clash in HCZ1 breaking tile grpahics
	; we must not have shield or invincibility at the beginning
		cmp.w	#$100,Current_zone_and_act.w	; is this HCZ1?
		bne.s	.shield				; if not, branch
		cmp.w	#$500,Camera_X_Pos.w		; check if camera is far enough
		bhs.s	.shield				; if not, branch
		move.b	$20(a0),d0			; load the powerup type
		and.b	#7,d0				; get only last 3 bits
		beq.s	.redo				; if shield or invincibility, branch

.shield		tst.b	$20(a0)				; check if target is a shield
		beq.s	.randshield			; if so, branch
.rts		rts

; ---------------------------------------------------------------------------
.monitorids	dc.b 2, $C0, 3, $F0, 0, $FF, 0, $FF	; worst luck
		dc.b 2, $40, 3, $C0, 0, $F0, 3, $FF	; bad luck
		dc.b 2, $10, 3, $70, 0, $E0, 3, $FF	; poor luck
		dc.b 3, $40, 0, $C0, 8, $FF, 0, $FF	; ok luck
		dc.b 3, $30, 0, $B0, 8, $FF, 0, $FF	; ok luck
		dc.b 4, $30, 3, $50, 0, $78, 8, $FF	; good luck
		dc.b 1, $40, 0, $C0, 8, $FF, 8, $FF	; great luck
		dc.b 1, $C0, 8, $F0, 4, $F7, 0, $FF 	; best luck
; ---------------------------------------------------------------------------

.randshield	swap	d0				; get high word of random to low word
		sub.w	V_int_run_count+2.w,d0		; sub v-int run ctr from random
		move.w	$42(a0),a1			; get player addr

		move.w	Water_level.w,d1		; get water leve
		sub.w	#$100,d1			; -$100
		cmp.w	y_pos(a0),d1			; is monitor above that level?
		bge.s	.nouw				; if yes, branch

		move.b	(a3),d1				; get num of times we've got bubble shield lately
		and.b	#3,d1				; get only bubble shield bits
		cmp.b	#3,d1				; check if max
		bne.s	.dobubble			; if not, branch
		subq.b	#1,(a3)				; else, make sure no overflow occurs
		bra.s	.dobubble
; ---------------------------------------------------------------------------

.checkbubble	move.b	(a3),d1				; get num of times we've got bubble shield lately
		and.b	#3,d1				; get only bubble shield bits
		cmp.b	#3,d1				; check if max
		beq.s	.repeat				; if so, branch
		btst	#6,$2B(a1)			; check if player already has this shield
		bne.s	.repeat				; if so, branch

.dobubble	move.b	#7,$20(a0)			; convert the shield to a bubble shield
		addq.b	#1,(a3)				; add 1 to used counter
		btst	#31,d0				; check if very high bit of the random number was set
		beq.w	.subfire			; if set, do fire instead

.subelec	move.b	(a3),d1				; get num of times we've got elec shield lately
		and.b	#$30,d1				; get only electric shield bits
		beq.s	.rtselec			; if already 0, branch
		sub.b	#$10,(a3)			; add to the counter
.rtselec	rts

.repeat		jsr	Random_Number.w			; generate another random number
.nouw		and.w	#$1E,d0				; keep in range
		move.w	.chktbl(pc,d0.w),d0		; get addr to jump
		jmp	.chktbl(pc,d0.w)		; jump to appropriate routine

; ---------------------------------------------------------------------------
.chktbl	dc.w [3] .checkbubble-.chktbl
	dc.w [6] .checkfire-.chktbl
	dc.w [7] .checkelec-.chktbl
; ---------------------------------------------------------------------------

.checkfire	move.b	(a3),d1				; get num of times we've got fire shield lately
		and.b	#$C,d1				; get only fire shield bits
		cmp.b	#$C,d1				; check if max
		beq.s	.repeat				; if so, branch
		btst	#4,$2B(a1)			; check if player already has this shield
		bne.s	.repeat				; if so, branch

		move.b	#5,$20(a0)			; convert the shield to a fire shield
		addq.b	#4,(a3)				; add 1 to used counter
		btst	#30,d0				; check if a bit of the random number was set
		beq.s	.subelec			; if set, do fire instead

.subbubble	move.b	(a3),d1				; get num of times we've got elec shield lately
		and.b	#3,d1				; get only bubble shield bits
		beq.s	.rtsbubble			; if already 0, branch
		subq.b	#1,(a3)				; add to the counter
.rtsbubble	rts
; ---------------------------------------------------------------------------

.checkelec	move.b	(a3),d1				; get num of times we've got elec shield lately
		and.b	#$30,d1				; get only elec shield bits
		cmp.b	#$30,d1				; check if max
		beq.s	.repeat				; if so, branch
		btst	#5,$2B(a1)			; check if player already has this shield
		bne.s	.repeat				; if so, branch

		move.b	#6,$20(a0)			; convert the shield to a elec shield
		add.b	#$10,(a3)			; add 1 to used counter
		btst	#30,d0				; check if a bit of the random number was set
		beq.s	.subbubble			; if set, do elec instead

.subfire	move.b	(a3),d1				; get num of times we've got elec shield lately
		and.b	#$C,d1				; get only fire shield bits
		beq.s	.rtsfire			; if already 0, branch
		subq.b	#4,(a3)				; add to the counter
.rtsfire	rts
; ---------------------------------------------------------------------------

Monitor_Fire_Shield:
		lea	Player_1.w,a1
		bsr.s	.check
		lea	Player_2.w,a1

.check		btst	#4,$2B(a1)
		bne.s	.gotfire
		rts

.gotfire	move.w	$10(a1),d2
		move.w	$14(a1),d3
		subi.w	#$18,d2
		subi.w	#$20,d3
		moveq	#6,d1
		moveq	#$14,d6				; NAT: increase monitor range
		move.w	#$30,d4
		move.w	#$4C,d5

		move.w	$10(a0),d0
		sub.w	d1,d0
		sub.w	d2,d0
		bcc.s	loc3_EAA0
		add.w	d6,d0
		bcs.s	loc3_EAA6
		bra.w	loc3_EADA
; ---------------------------------------------------------------------------

loc3_EAA0:
		cmp.w	d4,d0
		bhi.w	loc3_EADA

loc3_EAA6:
		move.w	$14(a0),d0
		sub.w	d1,d0
		sub.w	d3,d0
		bcc.s	loc3_EAB8
		add.w	d6,d0
		bcs.s	loc3_EABE
		bra.w	loc3_EADA
; ---------------------------------------------------------------------------

loc3_EAB8:
		cmp.w	d5,d0
		bhi.w	loc3_EADA

loc3_EABE:
		addq.b	#2,5(a0)		; set monitor as taken
		move.w	a1,parent(a0)		; set player as parent

loc3_EADA:
		rts

;Ani_Monitor:
	include "General/Sprites/Monitors/Anim - Monitor.asm"

;Map_Monitor:
	include "General/Sprites/Monitors/Map - Monitor.asm"
	include "General/Sprites/Monitors/Map - Float Monitor.asm"
; ---------------------------------------------------------------------------

Obj_Explosion:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_1E5EE(pc,d0.w),d1
		jmp	off_1E5EE(pc,d1.w)
; ---------------------------------------------------------------------------
off_1E5EE:	dc.w loc_1E5F6-off_1E5EE
		dc.w loc_1E61A-off_1E5EE
		dc.w loc_1E66E-off_1E5EE
		dc.w loc_1E626-off_1E5EE
; ---------------------------------------------------------------------------

loc_1E5F6:
		addq.b	#2,5(a0)

loc_1E61A:
		moveq	#$3D,d0
		jsr	Play_Sound_2.w
		addq.b	#2,5(a0)

loc_1E626:
		move.l	#Map_Explosion,$C(a0)
		move.w	$A(a0),d0
		andi.w	#$8000,d0
		ori.w	#AT_Explosion,d0
		move.w	d0,$A(a0)
		move.b	#4,4(a0)
		move.w	#prio(1),8(a0)
		clr.b	$28(a0)
		move.b	#$C,7(a0)
		move.b	#$C,6(a0)
		move.b	#3,$24(a0)

loc_1E662:
		clr.b	$22(a0)
		move.l	#loc_1E66E,(a0)

loc_1E66E:
		subq.b	#1,$24(a0)
		bpl.s	loc_1E688
		move.b	#7,$24(a0)
		addq.b	#1,$22(a0)
		cmpi.b	#4,$22(a0)
		beq.w	j_Delete_Current_Sprite

loc_1E688:
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

Obj_FireShield_Dissipate:
		move.l	#Map_Explosion,$C(a0)
		move.w	#AT_Explosion,$A(a0)
		move.b	#4,4(a0)
		move.w	#prio(5),8(a0)
		move.b	#$C,7(a0)
		move.b	#$C,6(a0)
		move.b	#3,$24(a0)
		move.b	#1,$22(a0)
		move.l	#loc_1E6C6,(a0)

loc_1E6C6:
		jsr	MoveSprite2.w
		subq.b	#1,$24(a0)
		bpl.s	loc_1E6E6
		move.b	#3,$24(a0)
		addq.b	#1,$22(a0)
		cmpi.b	#5,$22(a0)
		beq.w	j_Delete_Current_Sprite

loc_1E6E6:
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_1E6EC:
		move.l	#Map_Explosion,$C(a0)
		move.w	#$8000|AT_Explosion,$A(a0)
		move.b	#4,4(a0)
		move.w	#prio(2),8(a0)
		move.b	#$C,7(a0)
		move.b	#$C,6(a0)
		move.b	#0,$22(a0)
		move.l	#loc_1E71E,(a0)

loc_1E71E:
		subq.b	#1,$24(a0)
		bmi.s	loc_1E726
		rts
; ---------------------------------------------------------------------------

loc_1E726:
		move.b	#3,$24(a0)
		move.l	#loc_1E732,(a0)

loc_1E732:
		jsr	MoveSprite2.w
		subq.b	#1,$24(a0)
		bpl.s	loc_1E752
		move.b	#7,$24(a0)
		addq.b	#1,$22(a0)
		cmpi.b	#5,$22(a0)
		beq.w	j_Delete_Current_Sprite

loc_1E752:
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
Map_Explosion:	include "General/Sprites/Enemy Misc/Map - Explosion.asm"

; ---------------------------------------------------------------------------

Obj_09_1:
		move.l	#Map_AIZ1Tree,$C(a0)
		move.w	#prio(3),8(a0)
		move.b	#8,7(a0)
		move.b	#4,4(a0)
		move.w	#$4001,$A(a0)
		move.l	#loc_1E7B0,(a0)

loc_1E7B0:
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

Obj_0A_1:
		move.l	#Map_AIZ1ZiplinePeg,$C(a0)
		move.w	#prio(7),8(a0)
		move.b	#$20,7(a0)
		move.b	#4,4(a0)
		move.w	#$4324,$A(a0)
		move.l	#loc_1E7DC,(a0)

loc_1E7DC:
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

Obj_26:

		move.l	#Map_PathSwap,$C(a0)
		move.w	#$6BC,$A(a0)
		ori.b	#4,4(a0)
		move.b	#$80,7(a0)
		move.b	#$80,6(a0)
		move.w	#prio(5),8(a0)
		move.b	$2C(a0),d0
		btst	#2,d0
		beq.s	loc_1E85C
		andi.w	#7,d0
		move.b	d0,$22(a0)
		andi.w	#3,d0
		add.w	d0,d0
		move.w	word_1E854(pc,d0.w),$32(a0)
		move.w	$14(a0),d1
		lea	(Player_1).w,a1
		cmp.w	$14(a1),d1
		bhs.s	loc_1E83A
		move.b	#1,$34(a0)

loc_1E83A:
		lea	(Player_2).w,a1
		cmp.w	$14(a1),d1
		bhs.s	loc_1E84A
		move.b	#1,$35(a0)

loc_1E84A:
		move.l	#loc_1E9E6,(a0)
		bra.w	loc_1E9E6
; ---------------------------------------------------------------------------
word_1E854:	dc.w $20
		dc.w $40
		dc.w $80
		dc.w $100
; ---------------------------------------------------------------------------

loc_1E85C:
		andi.w	#3,d0
		move.b	d0,$22(a0)
		add.w	d0,d0
		move.w	word_1E854(pc,d0.w),$32(a0)
		move.w	$10(a0),d1
		lea	(Player_1).w,a1
		cmp.w	$10(a1),d1
		bhs.s	loc_1E880
		move.b	#1,$34(a0)

loc_1E880:
		lea	(Player_2).w,a1
		cmp.w	$10(a1),d1
		bhs.s	loc_1E890
		move.b	#1,$35(a0)

loc_1E890:
		move.l	#loc_1E896,(a0)

loc_1E896:
		tst.b	(Debug_On).w
		bne.s	loc_1E8C0
		move.w	$10(a0),d1
		lea	$34(a0),a2
		lea	(Player_1).w,a1
		bsr.s	sub_1E8C6
		lea	(Player_2).w,a1
		cmpi.w	#4,(CPU_Routine).w
		beq.w	loc_1E8BA
		bsr.s	sub_1E8C6

loc_1E8BA:
		jmp	Delete_Sprite_If_Not_In_Range.w
; ---------------------------------------------------------------------------

loc_1E8C0:
		jmp	Sprite_OnScreen_Test.w

; =============== S U B R O U T I N E =======================================


sub_1E8C6:

		tst.b	(a2)+
		bne.s	loc_1E944
		cmp.w	$10(a1),d1
		bhi.w	locret_1E9B4
		move.b	#1,-1(a2)
		move.w	$14(a0),d2
		move.w	d2,d3
		move.w	$32(a0),d4
		sub.w	d4,d2
		add.w	d4,d3
		move.w	$14(a1),d4
		cmp.w	d2,d4
		blo.w	locret_1E9B4
		cmp.w	d3,d4
		bhs.w	locret_1E9B4
		btst	#5,$2C(a0)
		beq.s	loc_1E908
		btst	#1,$2A(a1)
		bne.w	locret_1E9B4

loc_1E908:
		btst	#0,4(a0)
		bne.s	loc_1E934
		btst	#4,$2C(a0)
		bne.s	loc_1E930
		move.w	#$580,$1C(a1)
		move.b	#1,$3D(a1)
		tst.b	$2C(a0)
		bpl.s	loc_1E930
		move.b	#$81,$3D(a1)

loc_1E930:

		bra.w	loc_1E9B6
; ---------------------------------------------------------------------------

loc_1E934:
		btst	#4,$2C(a0)
		bne.s	locret_1E9B4
		move.b	#0,$3D(a1)
		rts
; ---------------------------------------------------------------------------

loc_1E944:
		cmp.w	$10(a1),d1
		bls.s	locret_1E9B4
		move.b	#0,-1(a2)
		move.w	$14(a0),d2
		move.w	d2,d3
		move.w	$32(a0),d4
		sub.w	d4,d2
		add.w	d4,d3
		move.w	$14(a1),d4
		cmp.w	d2,d4
		blo.s	locret_1E9B4
		cmp.w	d3,d4
		bhs.s	locret_1E9B4
		btst	#5,$2C(a0)
		beq.s	loc_1E97C
		btst	#1,$2A(a1)
		bne.w	locret_1E9B4

loc_1E97C:
		btst	#0,4(a0)
		beq.s	loc_1E9A6
		btst	#4,$2C(a0)
		bne.s	loc_1E9A4
		move.w	#-$580,$1C(a1)
		move.b	#1,$3D(a1)
		tst.b	$2C(a0)
		bpl.s	loc_1E9A4
		move.b	#$81,$3D(a1)

loc_1E9A4:

		bra.s	loc_1E9B6
; ---------------------------------------------------------------------------

loc_1E9A6:
		btst	#4,$2C(a0)
		bne.s	locret_1E9B4
		move.b	#0,$3D(a1)

locret_1E9B4:

		rts
; ---------------------------------------------------------------------------

loc_1E9B6:
		btst	#2,$2A(a1)
		beq.s	loc_1E9C0
		rts
; ---------------------------------------------------------------------------

loc_1E9C0:
		bset	#2,$2A(a1)
		move.b	#$E,$1E(a1)
		move.b	#7,$1F(a1)
		move.b	#2,$20(a1)
		addq.w	#5,$14(a1)
		moveq	#$3C,d0
		jsr	Play_Sound_2.w
		rts
; End of function sub_1E8C6

; ---------------------------------------------------------------------------

loc_1E9E6:

		tst.b	(Debug_On).w
		bne.s	loc_1EA0E
		move.w	$14(a0),d1
		lea	$34(a0),a2
		lea	(Player_1).w,a1
		bsr.s	sub_1EA14
		lea	(Player_2).w,a1
		cmpi.w	#4,(CPU_Routine).w
		beq.s	loc_1EA08
		bsr.s	sub_1EA14

loc_1EA08:
		jmp	Delete_Sprite_If_Not_In_Range.w
; ---------------------------------------------------------------------------

loc_1EA0E:
		jmp	Sprite_OnScreen_Test.w

; =============== S U B R O U T I N E =======================================


sub_1EA14:

		tst.b	(a2)+
		bne.w	loc_1EAB0
		cmp.w	$14(a1),d1
		bhi.w	locret_1EB30
		move.b	#1,-1(a2)
		move.w	$10(a0),d2
		move.w	d2,d3
		move.w	$32(a0),d4
		sub.w	d4,d2
		add.w	d4,d3
		move.w	$10(a1),d4
		cmp.w	d2,d4
		blo.w	locret_1EB30
		cmp.w	d3,d4
		bhs.w	locret_1EB30
		btst	#5,$2C(a0)
		beq.s	loc_1EA58
		btst	#1,$2A(a1)
		bne.w	locret_1EB30

loc_1EA58:
		btst	#0,4(a0)
		bne.s	loc_1EA9E
		btst	#4,$2C(a0)
		bne.s	loc_1EA9A
		move.b	#1,$3D(a1)
		tst.b	$2C(a0)
		bpl.s	loc_1EA7A
		move.b	#$81,$3D(a1)

loc_1EA7A:
		btst	#6,$2C(a0)
		beq.s	loc_1EA9A
		bclr	#1,$2A(a1)
		move.b	#$40,$26(a1)
		move.w	$1A(a1),$1C(a1)
		move.w	#0,$18(a1)

loc_1EA9A:

		bra.w	loc_1E9B6
; ---------------------------------------------------------------------------

loc_1EA9E:
		btst	#4,$2C(a0)
		bne.w	locret_1EB30
		move.b	#0,$3D(a1)
		rts
; ---------------------------------------------------------------------------

loc_1EAB0:
		cmp.w	$14(a1),d1
		bls.s	locret_1EB30
		move.b	#0,-1(a2)
		move.w	$10(a0),d2
		move.w	d2,d3
		move.w	$32(a0),d4
		sub.w	d4,d2
		add.w	d4,d3
		move.w	$10(a1),d4
		cmp.w	d2,d4
		blo.s	locret_1EB30
		cmp.w	d3,d4
		bhs.s	locret_1EB30
		btst	#5,$2C(a0)
		beq.s	loc_1EAE8
		btst	#1,$2A(a1)
		bne.w	locret_1EB30

loc_1EAE8:
		btst	#0,4(a0)
		beq.s	loc_1EB22
		btst	#4,$2C(a0)
		bne.s	loc_1EB1E
		move.b	#1,$3D(a1)
		tst.b	$2C(a0)
		bpl.s	loc_1EB0A
		move.b	#$81,$3D(a1)

loc_1EB0A:
		btst	#6,$2C(a0)
		beq.s	loc_1EB1E
		bclr	#1,$2A(a1)
		move.b	#$40,$26(a1)

loc_1EB1E:

		bra.w	loc_1E9B6
; ---------------------------------------------------------------------------

loc_1EB22:
		btst	#4,$2C(a0)
		bne.s	locret_1EB30
		move.b	#0,$3D(a1)

locret_1EB30:

		rts
; End of function sub_1EA14

; ---------------------------------------------------------------------------
byte_1EB32:	dc.b $96
		dc.b $94
		dc.b $95
		dc.b 0
; ---------------------------------------------------------------------------

Obj_27:

		moveq	#0,d0
		move.b	$2C(a0),d0
		move.b	byte_1EB32(pc,d0.w),$28(a0)
		move.l	#Map_Obj27,$C(a0)
		tst.b	(Debug_On).w
		beq.s	loc_1EB58
		move.l	#Map_Obj27_2,$C(a0)

loc_1EB58:
		move.w	#$86BC,$A(a0)
		move.b	#$84,4(a0)
		move.b	#$80,7(a0)
		move.b	#$80,6(a0)
		move.w	#prio(4),8(a0)
		move.b	$2C(a0),$22(a0)
		move.l	#loc_1EB82,(a0)

loc_1EB82:
		tst.w	(Competition_mode).w
		bne.s	loc_1EB9C
		move.w	$10(a0),d0
		andi.w	#$FF80,d0
		sub.w	(Camera_X_pos_coarse_back).w,d0
		cmpi.w	#$280,d0
		bhi.w	loc_1EBAA

loc_1EB9C:
		tst.b	(Debug_On).w
		beq.s	locret_1EBA8
		jsr	Draw_Sprite.w

locret_1EBA8:
		rts
; ---------------------------------------------------------------------------

loc_1EBAA:

		move.w	respawn_addr(a0),d0
		beq.s	loc_1EBB6
		movea.w	d0,a2
		bclr	#7,(a2)

loc_1EBB6:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------
Map_Obj27:	include "General/Sprites/Unused/Map - Obj27 Unused.asm"

Map_Obj27_2:	include "General/Sprites/Unused/Map - Obj27 Unused 2.asm"

; ---------------------------------------------------------------------------

Obj_28_Invisible_Barrier:

		move.l	#Map_InvisibleBlock,$C(a0)
		move.w	#$85C4-$1C,$A(a0)
		ori.b	#4,4(a0)
		move.w	#prio(4),8(a0)
		bset	#7,$2A(a0)
		move.b	$2C(a0),d0
		move.b	d0,d1
		andi.w	#$F0,d0
		addi.w	#$10,d0
		lsr.w	#1,d0
		move.b	d0,7(a0)
		andi.w	#$F,d1
		addq.w	#1,d1
		lsl.w	#3,d1
		move.b	d1,6(a0)
		tst.w	(Competition_mode).w
		beq.s	loc_1EC66
		move.l	#loc_1ECAA,(a0)
		bra.s	loc_1ECAA
; ---------------------------------------------------------------------------

loc_1EC66:
		move.l	#loc_1EC6C,(a0)

loc_1EC6C:
		moveq	#0,d1
		move.b	7(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull2.w
		move.w	$10(a0),d0
		andi.w	#$FF80,d0
		sub.w	(Camera_X_pos_coarse_back).w,d0
		cmpi.w	#$280,d0
		bhi.w	loc_1EBAA
		tst.b	(Debug_On).w
		beq.s	locret_1ECA8
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

locret_1ECA8:
		rts
; ---------------------------------------------------------------------------

loc_1ECAA:

		moveq	#0,d1
		move.b	7(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	$10(a0),d4
		jmp	SolidObjectFull2.w
; ---------------------------------------------------------------------------
Map_InvisibleBlock:include "General/Sprites/Level Misc/Map - Invisible Block.asm"

byte_1ED1A:	dc.b $14
		dc.b $28
		dc.b $20
		dc.b 0
		dc.b $24
		dc.b $48
		dc.b $30
		dc.b 1
		dc.b $34
		dc.b $68
		dc.b $40
		dc.b 2
; ---------------------------------------------------------------------------

Obj_BreakableBar:

		move.l	#Map_BreakableBar,$C(a0)
		move.w	#$43CA,$A(a0)
		move.b	#4,4(a0)
		move.w	#prio(4),8(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	d0,d1
		andi.b	#$F,d0
		mulu.w	#$3C,d0
		move.w	d0,$30(a0)
		andi.w	#$30,d1
		lsr.w	#2,d1
		lea	byte_1ED1A(pc,d1.w),a1
		tst.b	$2C(a0)
		bpl.s	loc_1ED8E
		moveq	#0,d0
		move.b	(a1)+,d0
		move.w	d0,$36(a0)
		move.b	(a1)+,d0
		move.w	d0,$38(a0)
		move.b	(a1)+,7(a0)
		move.b	#4,6(a0)
		move.b	(a1)+,d0
		addq.b	#4,d0
		move.b	d0,$22(a0)
		move.l	#loc_1EF64,(a0)
		bra.w	loc_1EF64
; ---------------------------------------------------------------------------

loc_1ED8E:
		moveq	#0,d0
		move.b	(a1)+,d0
		move.w	d0,$36(a0)
		move.b	(a1)+,d0
		move.w	d0,$38(a0)
		move.b	#4,7(a0)
		move.b	(a1)+,6(a0)
		move.b	(a1)+,$22(a0)
		move.l	#loc_1EDB0,(a0)

loc_1EDB0:
		lea	$32(a0),a2
		tst.w	$30(a0)
		beq.s	loc_1EDC6
		tst.w	(a2)
		beq.s	loc_1EDC6
		subq.w	#1,$30(a0)
		beq.w	loc_1EEEC

loc_1EDC6:

		lea	(Player_1).w,a1
		move.w	(Ctrl_1).w,d1
		moveq	#0,d2
		bsr.s	sub_1EDEC
		addq.w	#1,a2
		lea	(Player_2).w,a1
		move.w	(Ctrl_2).w,d1
		moveq	#1,d2
		bsr.s	sub_1EDEC
		tst.b	$3A(a0)
		bne.w	loc_1EEEC
		jmp	Sprite_OnScreen_Test.w

; =============== S U B R O U T I N E =======================================


sub_1EDEC:

		tst.b	(a2)
		beq.s	loc_1EE4E
		move.w	$14(a0),d0
		sub.w	$36(a0),d0
		btst	#8,d1
		beq.s	loc_1EE0C
		subq.w	#1,$14(a1)
		cmp.w	$14(a1),d0
		blo.s	loc_1EE0C
		move.w	d0,$14(a1)

loc_1EE0C:

		add.w	$38(a0),d0
		btst	#9,d1
		beq.s	loc_1EE24
		addq.w	#1,$14(a1)
		cmp.w	$14(a1),d0
		bhs.s	loc_1EE24
		move.w	d0,$14(a1)

loc_1EE24:

		andi.w	#$70,d1
		beq.w	locret_1EEEA
		clr.b	(a2)
		move.b	#$3C,2(a2)
		bclr	d2,(__u_F7C7).w
		andi.b	#-2,$2E(a1)
		btst	#6,$2C(a0)
		bne.s	locret_1EE4C
		move.b	#1,$3A(a0)

locret_1EE4C:
		rts
; ---------------------------------------------------------------------------

loc_1EE4E:
		tst.b	2(a2)
		beq.s	loc_1EE5A
		subq.b	#1,2(a2)
		rts
; ---------------------------------------------------------------------------

loc_1EE5A:
		moveq	#0,d1
		move.b	6(a0),d1
		move.w	$14(a0),d0
		sub.w	d1,d0
		move.w	$14(a1),d2
		cmp.w	d0,d2
		blo.s	locret_1EEEA
		add.w	d1,d0
		add.w	d1,d0
		cmp.w	d0,d2
		bhs.s	locret_1EEEA
		move.w	$10(a0),d0
		addi.w	#$14,d0
		cmp.w	$10(a1),d0
		bhs.s	locret_1EEEA
		addi.w	#$10,d0
		cmp.w	$10(a1),d0
		blo.s	locret_1EEEA
		cmpi.b	#4,5(a1)
		bhs.s	locret_1EEEA
		tst.b	$2E(a1)
		bne.s	locret_1EEEA
		move.w	$14(a0),d0
		sub.w	$36(a0),d0
		cmp.w	$14(a1),d0
		blo.s	loc_1EEAE
		move.w	d0,$14(a1)

loc_1EEAE:
		add.w	$38(a0),d0
		cmp.w	$14(a1),d0
		bhs.s	loc_1EEBC
		move.w	d0,$14(a1)

loc_1EEBC:
		clr.w	$18(a1)
		clr.w	$1A(a1)
		move.w	$10(a0),d0
		addi.w	#$14,d0
		move.w	d0,$10(a1)
		bclr	#0,$2A(a1)
		move.b	#$11,$20(a1)
		move.b	#1,$2E(a1)
		bset	d2,(__u_F7C7).w
		move.b	#1,(a2)

locret_1EEEA:

		rts
; End of function sub_1EDEC

; ---------------------------------------------------------------------------

loc_1EEEC:

		tst.b	$32(a0)
		beq.s	loc_1EEF8
		andi.b	#-2,(Player_1+$2E).w

loc_1EEF8:
		tst.b	$33(a0)
		beq.s	loc_1EF04
		andi.b	#-2,(Player_2+$2E).w

loc_1EF04:
		clr.b	(__u_F7C7).w
		clr.w	$32(a0)
		move.l	#loc_1EF3E,(a0)
		move.b	#3,$22(a0)
		move.w	#$400,$18(a0)
		move.w	#0,$1A(a0)
		lea	(word_1F108).l,a4
		lea	(byte_1F0F0).l,a2
		moveq	#0,d1
		move.b	6(a0),d1
		lsr.w	#2,d1
		subq.w	#1,d1
		bsr.w	sub_1F188

loc_1EF3E:

		tst.b	$3F(a0)
		beq.s	loc_1EF4A
		subq.b	#1,$3F(a0)
		bra.s	loc_1EF56
; ---------------------------------------------------------------------------

loc_1EF4A:
		jsr	MoveSprite2.w
		addi.w	#8,$1A(a0)

loc_1EF56:
		tst.b	4(a0)
		bpl.w	loc_1EBAA
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_1EF64:

		lea	$32(a0),a2
		tst.w	$30(a0)
		beq.s	loc_1EF7A
		tst.w	(a2)
		beq.s	loc_1EF7A
		subq.w	#1,$30(a0)
		beq.w	loc_1F09A

loc_1EF7A:

		lea	(Player_1).w,a1
		move.w	(Ctrl_1).w,d1
		moveq	#0,d2
		bsr.s	sub_1EFA0
		addq.w	#1,a2
		lea	(Player_2).w,a1
		move.w	(Ctrl_2).w,d1
		moveq	#1,d2
		bsr.s	sub_1EFA0
		tst.b	$3A(a0)
		bne.w	loc_1F09A
		jmp	Sprite_OnScreen_Test.w

; =============== S U B R O U T I N E =======================================


sub_1EFA0:

		tst.b	(a2)
		beq.s	loc_1F002
		move.w	$10(a0),d0
		sub.w	$36(a0),d0
		btst	#$A,d1
		beq.s	loc_1EFC0
		subq.w	#1,$10(a1)
		cmp.w	$10(a1),d0
		blo.s	loc_1EFC0
		move.w	d0,$10(a1)

loc_1EFC0:

		add.w	$38(a0),d0
		btst	#$B,d1
		beq.s	loc_1EFD8
		addq.w	#1,$10(a1)
		cmp.w	$10(a1),d0
		bhs.s	loc_1EFD8
		move.w	d0,$10(a1)

loc_1EFD8:

		andi.w	#$70,d1
		beq.w	locret_1F098
		clr.b	(a2)
		move.b	#$3C,2(a2)
		bclr	d2,(__u_F7C7).w
		andi.b	#-2,$2E(a1)
		btst	#6,$2C(a0)
		bne.s	locret_1F000
		move.b	#1,$3A(a0)

locret_1F000:
		rts
; ---------------------------------------------------------------------------

loc_1F002:
		tst.b	2(a2)
		beq.s	loc_1F00E
		subq.b	#1,2(a2)
		rts
; ---------------------------------------------------------------------------

loc_1F00E:
		moveq	#0,d1
		move.b	7(a0),d1
		move.w	$10(a0),d0
		sub.w	d1,d0
		move.w	$10(a1),d2
		cmp.w	d0,d2
		blo.s	locret_1F098
		add.w	d1,d0
		add.w	d1,d0
		cmp.w	d0,d2
		bhs.s	locret_1F098
		move.w	$14(a0),d0
		subi.w	#$14,d0
		cmp.w	$14(a1),d0
		bhs.s	locret_1F098
		addi.w	#$10,d0
		cmp.w	$14(a1),d0
		blo.s	locret_1F098
		cmpi.b	#4,5(a1)
		bhs.s	locret_1F098
		tst.b	$2E(a1)
		bne.s	locret_1F098
		move.w	$10(a0),d0
		sub.w	$36(a0),d0
		cmp.w	$10(a1),d0
		blo.s	loc_1F062
		move.w	d0,$10(a1)

loc_1F062:
		add.w	$38(a0),d0
		cmp.w	$10(a1),d0
		bhs.s	loc_1F070
		move.w	d0,$10(a1)

loc_1F070:
		clr.w	$18(a1)
		clr.w	$1A(a1)
		move.w	$14(a0),d0
		subi.w	#$14,d0
		move.w	d0,$14(a1)
		move.b	#$14,$20(a1)
		move.b	#1,$2E(a1)
		bset	d2,(__u_F7C7).w
		move.b	#1,(a2)

locret_1F098:

		rts
; End of function sub_1EFA0

; ---------------------------------------------------------------------------

loc_1F09A:

		tst.b	$32(a0)
		beq.s	loc_1F0A6
		andi.b	#-2,(Player_1+$2E).w

loc_1F0A6:
		tst.b	$33(a0)
		beq.s	loc_1F0B2
		andi.b	#-2,(Player_2+$2E).w

loc_1F0B2:
		clr.b	(__u_F7C7).w
		clr.w	$32(a0)
		move.l	#loc_1EF3E,(a0)
		move.b	#7,$22(a0)
		move.w	#0,$18(a0)
		move.w	#-$400,$1A(a0)
		lea	(word_1F148).l,a4
		lea	(byte_1F0F0).l,a2
		moveq	#0,d1
		move.b	7(a0),d1
		lsr.w	#2,d1
		subq.w	#1,d1
		bsr.w	sub_1F188
		bra.w	loc_1EF3E
; ---------------------------------------------------------------------------
byte_1F0F0:	dc.b    7,   5,   2,   0,   1,   3,   4,   6,   7,   5,   2,   0,   1,   3,   4,   6,   8,   9,  $A,  $B
		dc.b   $C,  $D,  $E,  $F

word_1F108:	dc.w	  0, $FFE4
		dc.w	  0, $FFEC
		dc.w	  0, $FFF4
		dc.w	  0, $FFFC
		dc.w	  0,	 4
		dc.w	  0,	$C
		dc.w	  0,   $14
		dc.w	  0,   $1C
		dc.w	  0,   $24
		dc.w	  0, $FFDC
		dc.w	  0,   $2C
		dc.w	  0, $FFD4
		dc.w	  0,   $34
		dc.w	  0, $FFCC
		dc.w	  0,   $3C
		dc.w	  0, $FFC4
word_1F148:	dc.w  $FFE4,	 0
		dc.w  $FFEC,	 0
		dc.w  $FFF4,	 0
		dc.w  $FFFC,	 0
		dc.w	  4,	 0
		dc.w	 $C,	 0
		dc.w	$14,	 0
		dc.w	$1C,	 0
		dc.w	$24,	 0
		dc.w  $FFDC,	 0
		dc.w	$2C,	 0
		dc.w  $FFD4,	 0
		dc.w	$34,	 0
		dc.w  $FFCC,	 0
		dc.w	$3C,	 0
		dc.w  $FFC4,	 0

; =============== S U B R O U T I N E =======================================


sub_1F188:

		move.w	$10(a0),d2
		move.w	$14(a0),d3
		move.w	8(a0),d4
		movea.l	a0,a1
		bra.s	loc_1F1A0
; ---------------------------------------------------------------------------

loc_1F198:
		jsr	Create_New_Sprite3.w
		bne.s	loc_1F1FA

loc_1F1A0:
		move.l	(a0),(a1)
		move.l	$C(a0),$C(a1)
		move.w	$A(a0),$A(a1)
		move.b	#$84,4(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		move.w	(a4)+,d0
		add.w	d2,d0
		move.w	d0,$10(a1)
		move.w	(a4)+,d0
		add.w	d3,d0
		move.w	d0,$14(a1)
		move.w	d4,8(a1)
		move.b	#4,7(a1)
		move.b	#4,6(a1)
		move.b	$22(a0),$22(a1)
		move.w	$18(a0),$18(a1)
		move.w	$1A(a0),$1A(a1)
		move.b	(a2)+,$3F(a1)
		dbf	d1,loc_1F198

loc_1F1FA:
		moveq	#$59,d0
		jmp	Play_Sound_2.w
; End of function sub_1F188

; ---------------------------------------------------------------------------

Obj_HCZWaveSplash:
		move.l	#Map_HCZWaveSplash,$C(a0)
		move.w	#prio(0),8(a0)		; NAT: Duhh
		move.w	#$842E,$A(a0)
		move.b	#4,4(a0)
		move.b	#$80,7(a0)
		move.b	#8,6(a0)
		bset	#6,4(a0)
		move.w	#1,$16(a0)
		lea	$18(a0),a2
		move.w	$10(a0),(a2)
		addi.w	#$C0,(a2)+
		move.w	$14(a0),(a2)+
		move.l	#loc_1F244,(a0)

loc_1F244:
		move.w	(Camera_X_pos).w,d1
		andi.w	#$FFE0,d1
		addi.w	#$60,d1
		btst	#0,(Level_frame_counter+1).w
		beq.s	loc_1F25C
		addi.w	#$20,d1

loc_1F25C:
		move.w	d1,$10(a0)
		move.w	(Water_level).w,d1
		move.w	d1,$14(a0)
		lea	$18(a0),a2
		move.w	$10(a0),(a2)
		addi.w	#$C0,(a2)+
		move.w	$14(a0),(a2)+
		tst.b	$32(a0)
		bne.s	loc_1F296
		tst.b	(Ctrl_1_pressed_logical).w
		bmi.s	loc_1F28A
		tst.b	(Ctrl_2_pressed_logical).w
		bpl.s	loc_1F2A6

loc_1F28A:
		addq.b	#3,$22(a0)
		move.b	#1,$32(a0)
		bra.s	loc_1F2C4
; ---------------------------------------------------------------------------

loc_1F296:
		tst.w	(Game_paused).w
		bne.s	loc_1F2C4
		move.b	#0,$32(a0)
		subq.b	#3,$22(a0)

loc_1F2A6:
		subq.b	#1,$24(a0)
		bpl.s	loc_1F2C4
		move.b	#9,$24(a0)
		addq.b	#1,$22(a0)
		cmpi.b	#4,$22(a0)
		blo.s	loc_1F2C4
		move.b	#1,$22(a0)

loc_1F2C4:

		move.b	$22(a0),1(a2)
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
Map_HCZWaveSplash:include "Levels/HCZ/Misc Object Data/Map - Wave Splash.asm"

byte_1F38A:	dc.b $10
		dc.b $10
		dc.b $20
		dc.b $10
		dc.b $30
		dc.b $10
		dc.b $40
		dc.b $10
; ---------------------------------------------------------------------------

Obj_HCZBlock:

		moveq	#0,d0
		move.b	$2C(a0),d0
		move.b	d0,$22(a0)
		add.w	d0,d0
		lea	byte_1F38A(pc,d0.w),a1
		move.b	(a1)+,7(a0)
		move.b	(a1)+,6(a0)
		move.l	#Map_HCZBlock,$C(a0)
		move.w	#$43D4,$A(a0)
		ori.b	#4,4(a0)
		move.w	#prio(5),8(a0)
		move.l	#loc_1F3CA,(a0)

loc_1F3CA:
		moveq	#0,d1
		move.b	7(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull2.w
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

Obj_6D_2:
		bset	#5,$2B(a0)
		bra.s	Obj_InvisibleHurtBlockHorizontal
; ---------------------------------------------------------------------------

Obj_6E_2:
		bset	#4,$2B(a0)

Obj_InvisibleHurtBlockHorizontal:
		move.l	#Map_InvisibleBlock,$C(a0)
		move.w	#$85C8-$1C,$A(a0)
		ori.b	#4,4(a0)
		move.w	#prio(4),8(a0)
		bset	#7,$2A(a0)
		move.b	$2C(a0),d0
		move.b	d0,d1
		andi.w	#$F0,d0
		addi.w	#$10,d0
		lsr.w	#1,d0
		move.b	d0,7(a0)
		andi.w	#$F,d1
		addq.w	#1,d1
		lsl.w	#3,d1
		move.b	d1,6(a0)
		btst	#0,$2A(a0)
		beq.s	loc_1F448
		move.l	#loc_1F4C4,(a0)
		rts
; ---------------------------------------------------------------------------

loc_1F448:
		btst	#1,$2A(a0)
		beq.s	loc_1F458
		move.l	#loc_1F528,(a0)
		rts
; ---------------------------------------------------------------------------

loc_1F458:
		move.l	#loc_1F45E,(a0)

loc_1F45E:
		moveq	#0,d1
		move.b	7(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull2.w
		move.b	$2A(a0),d6
		andi.b	#$18,d6
		beq.s	loc_1F4A2
		move.b	d6,d0
		andi.b	#8,d0
		beq.s	loc_1F494
		lea	(Player_1).w,a1
		bsr.w	sub_1F58C

loc_1F494:
		andi.b	#$10,d6
		beq.s	loc_1F4A2
		lea	(Player_2).w,a1
		bsr.w	sub_1F58C

loc_1F4A2:

		move.w	$10(a0),d0
		andi.w	#-$80,d0
		sub.w	(Camera_X_pos_coarse_back).w,d0
		cmpi.w	#$280,d0
		bhi.w	loc_1EBAA
		tst.b	(Debug_On).w
		beq.s	locret_1F4C2
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

locret_1F4C2:
		rts
; ---------------------------------------------------------------------------

loc_1F4C4:
		moveq	#0,d1
		move.b	7(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull2.w
		swap	d6
		andi.w	#3,d6
		beq.s	loc_1F506
		move.b	d6,d0
		andi.b	#1,d0
		beq.s	loc_1F4F8
		lea	(Player_1).w,a1
		bsr.w	sub_1F58C

loc_1F4F8:
		andi.b	#2,d6
		beq.s	loc_1F506
		lea	(Player_2).w,a1
		bsr.w	sub_1F58C

loc_1F506:

		move.w	$10(a0),d0
		andi.w	#$FF80,d0
		sub.w	(Camera_X_pos_coarse_back).w,d0
		cmpi.w	#$280,d0
		bhi.w	loc_1EBAA
		tst.b	(Debug_On).w
		beq.s	locret_1F526
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

locret_1F526:
		rts
; ---------------------------------------------------------------------------

loc_1F528:
		moveq	#0,d1
		move.b	7(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull2.w
		swap	d6
		andi.w	#$C,d6
		beq.s	loc_1F56A
		move.b	d6,d0
		andi.b	#4,d0
		beq.s	loc_1F55C
		lea	(Player_1).w,a1
		bsr.w	sub_1F58C

loc_1F55C:
		andi.b	#8,d6
		beq.s	loc_1F56A
		lea	(Player_2).w,a1
		bsr.w	sub_1F58C

loc_1F56A:

		move.w	$10(a0),d0
		andi.w	#$FF80,d0
		sub.w	(Camera_X_pos_coarse_back).w,d0
		cmpi.w	#$280,d0
		bhi.w	loc_1EBAA
		tst.b	(Debug_On).w
		beq.s	locret_1F58A
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

locret_1F58A:
locret_1F59E:
		rts

; =============== S U B R O U T I N E =======================================

sub_1F58C:

		move.b	$2B(a0),d0
		andi.b	#$73,d0
		and.b	$2B(a1),d0
		bne.s	locret_1F59E
		jmp	sub_24280.w
; ---------------------------------------------------------------------------

Obj_InvisibleHurtBlockVertical:
		move.l	#Map_InvisibleBlock,$C(a0)
		move.w	#$85CC-$1C,$A(a0)
		ori.b	#4,4(a0)
		move.w	#prio(4),8(a0)
		bset	#7,$2A(a0)
		move.b	$2C(a0),d0
		move.b	d0,d1
		andi.w	#$F0,d0
		addi.w	#$10,d0
		lsr.w	#1,d0
		move.b	d0,7(a0)
		andi.w	#$F,d1
		addq.w	#1,d1
		lsl.w	#3,d1
		move.b	d1,6(a0)
		btst	#0,$2A(a0)
		beq.s	loc_1F5F0
		move.l	#loc_1F66C,(a0)
		rts
; ---------------------------------------------------------------------------

loc_1F5F0:
		btst	#1,$2A(a0)
		beq.s	loc_1F600
		move.l	#loc_1F6D0,(a0)
		rts
; ---------------------------------------------------------------------------

loc_1F600:
		move.l	#loc_1F606,(a0)

loc_1F606:
		moveq	#0,d1
		move.b	7(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull2.w
		move.b	$2A(a0),d6
		andi.b	#$18,d6
		beq.s	loc_1F64A
		move.b	d6,d0
		andi.b	#8,d0
		beq.s	loc_1F63C
		lea	(Player_1).w,a1
		bsr.w	sub_1F734

loc_1F63C:
		andi.b	#$10,d6
		beq.s	loc_1F64A
		lea	(Player_2).w,a1
		bsr.w	sub_1F734

loc_1F64A:

		move.w	$10(a0),d0
		andi.w	#$FF80,d0
		sub.w	(Camera_X_pos_coarse_back).w,d0
		cmpi.w	#$280,d0
		bhi.w	loc_1EBAA
		tst.b	(Debug_On).w
		beq.s	locret_1F66A
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

locret_1F66A:
		rts
; ---------------------------------------------------------------------------

loc_1F66C:
		moveq	#0,d1
		move.b	7(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull2.w
		swap	d6
		andi.w	#3,d6
		beq.s	loc_1F6AE
		move.b	d6,d0
		andi.b	#1,d0
		beq.s	loc_1F6A0
		lea	(Player_1).w,a1
		bsr.w	sub_1F734

loc_1F6A0:
		andi.b	#2,d6
		beq.s	loc_1F6AE
		lea	(Player_2).w,a1
		bsr.w	sub_1F734

loc_1F6AE:

		move.w	$10(a0),d0
		andi.w	#$FF80,d0
		sub.w	(Camera_X_pos_coarse_back).w,d0
		cmpi.w	#$280,d0
		bhi.w	loc_1EBAA
		tst.b	(Debug_On).w
		beq.s	locret_1F6CE
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

locret_1F6CE:
		rts
; ---------------------------------------------------------------------------

loc_1F6D0:
		moveq	#0,d1
		move.b	7(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull2.w
		swap	d6
		andi.w	#$C,d6
		beq.s	loc_1F712
		move.b	d6,d0
		andi.b	#4,d0
		beq.s	loc_1F704
		lea	(Player_1).w,a1
		bsr.w	sub_1F734

loc_1F704:
		andi.b	#8,d6
		beq.s	loc_1F712
		lea	(Player_2).w,a1
		bsr.w	sub_1F734

loc_1F712:

		move.w	$10(a0),d0
		andi.w	#$FF80,d0
		sub.w	(Camera_X_pos_coarse_back).w,d0
		cmpi.w	#$280,d0
		bhi.w	loc_1EBAA
		tst.b	(Debug_On).w
		beq.s	locret_1F732
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

locret_1F732:
		rts

; =============== S U B R O U T I N E =======================================


sub_1F734:

		move.w	d6,-(sp)
		move.l	a0,-(sp)
		movea.l	a1,a0
		jsr	(Kill_Character).l
		movea.l	(sp)+,a0
		move.w	(sp)+,d6
		rts
; End of function sub_1F734

; ---------------------------------------------------------------------------
; Obj_03_1:
Obj_AIZHollowTree:
		move.b	#$D0,width_pixels(a0)
		move.l	#loc_1F752,(a0)

loc_1F752:
		bsr.w	sub_1F7B8
		move.b	status(a0),d0
		andi.b	#$18,d0
		bne.s	loc_1F7B2
		tst.w	$38(a0)
		beq.s	loc_1F7B2
		subq.w	#1,$38(a0)
		bne.s	loc_1F77A
		move.w	#$1300,(Camera_min_X_pos).w
		move.w	#$4000,(Camera_max_X_pos).w
		bra.s	loc_1F7B2
; ---------------------------------------------------------------------------

loc_1F77A:
		cmpi.w	#$1300,(Camera_min_X_pos).w
		beq.s	loc_1F796

		lea	Player_1+x_pos.w,a1		; NAT: Fix for 2 player
		cmp.b	#2,BoxWinner.w			; check if Tails is winrar
		bne.s	.chk				; if no, branch
		lea	Player_2+x_pos.w,a1		; get p2 to a1

.chk		cmpi.w	#$2D00,(a1)
		blo.s	loc_1F792
		move.w	#$1300,(Camera_min_X_pos).w
		bra.s	loc_1F796
; ---------------------------------------------------------------------------

loc_1F792:
		subq.w	#4,(Camera_min_X_pos).w

loc_1F796:
		cmpi.w	#$4000,(Camera_max_X_pos).w
		beq.s	loc_1F7B2

		lea	Player_1+x_pos.w,a1		; NAT: Fix for 2 player
		cmp.b	#2,BoxWinner.w			; check if Tails is winrar
		bne.s	.chk				; if no, branch
		lea	Player_2+x_pos.w,a1		; get p2 to a1

.chk		cmpi.w	#$2D00,(a1)
		bhs.s	loc_1F7AE
.cam		move.w	#$4000,(Camera_max_X_pos).w
		bra.s	loc_1F7B2
; ---------------------------------------------------------------------------

loc_1F7AE:
		addq.w	#4,(Camera_max_X_pos).w

loc_1F7B2:

		jmp	Delete_Sprite_If_Not_In_Range.w

; =============== S U B R O U T I N E =======================================


sub_1F7B8:
		lea	(Player_1).w,a1
		lea	$30(a0),a2
		moveq	#3,d6
		bsr.s	sub_1F7CE
		lea	(Player_2).w,a1
		lea	$34(a0),a2
		moveq	#4,d6		; NAT: ffff really
; End of function sub_1F7B8


; =============== S U B R O U T I N E =======================================


sub_1F7CE:
		btst	d6,status(a0)
		bne.w	loc_1F85C
		btst	#Status_InAir,status(a1)
		bne.w	locret_1F85A
		move.w	x_pos(a1),d0
		addi.w	#$10,d0
		sub.w	x_pos(a0),d0
		bcs.s	locret_1F85A
		cmpi.w	#$40,d0
		bge.s	locret_1F85A
		move.w	y_pos(a1),d0
		sub.w	y_pos(a0),d0
		cmpi.w	#-$5A,d0
		blt.s	locret_1F85A
		cmpi.w	#$A0,d0
		bgt.s	locret_1F85A
		cmpi.w	#$600,x_vel(a1)
		blt.s	locret_1F85A
		tst.b	object_control(a1)
		bne.s	locret_1F85A
		jsr	RideObject_SetRide.w
		move.l	#0,(a2)
		bset	#6,object_control(a1)
		bset	#1,object_control(a1)
		move.b	#0,anim(a1)

		jsr	Create_New_Sprite3.w
		bne.w	loc_1F848
		move.l	#Obj_AIZ1TreeRevealControl,(a1)

loc_1F848:
		move.w	#$2C60,(Camera_min_X_pos).w
		move.w	#$2C60,(Camera_max_X_pos).w
		move.w	#$3C,$38(a0)

locret_1F85A:

		rts
; ---------------------------------------------------------------------------

loc_1F85C:
		move.w	ground_vel(a1),d0
		bpl.s	loc_1F864
		neg.w	d0

loc_1F864:
		cmpi.w	#$600,d0
		blo.w	loc_1F8FE
		btst	#Status_InAir,status(a1)
		bne.s	loc_1F88C
		move.w	y_pos(a1),d0
		sub.w	y_pos(a0),d0
		addi.w	#$90,d0
		bmi.s	AIZTree_FallOff
		cmpi.w	#$130,d0
		bls.w	AIZTree_SetPlayerPos
		bra.s	AIZTree_FallOff
; ---------------------------------------------------------------------------

loc_1F88C:

		cmpi.w	#$2C99,x_pos(a1)
		bhs.s	loc_1F8A0
		move.w	#$2C99,x_pos(a1)
		move.w	#$400,x_vel(a1)

loc_1F8A0:
		cmpi.w	#$2D66,x_pos(a1)
		blo.s	AIZTree_FallOff
		move.w	#$2D66,x_pos(a1)
		move.w	#-$400,x_vel(a1)

AIZTree_FallOff:
		bset	#Status_InAir,status(a1)
		bclr	#Status_Roll,status(a1)
		move.b	#$13,y_radius(a1)
		move.b	#9,x_radius(a1)
		move.w	#1,anim(a1)
		bclr	#Status_OnObj,status(a1)
		bclr	d6,status(a0)
		move.b	#0,flips_remaining(a1)
		move.b	#4,flip_speed(a1)
		bclr	#6,object_control(a1)
		bclr	#1,object_control(a1)
		asr	x_vel(a1)
		asr	y_vel(a1)
		rts
; ---------------------------------------------------------------------------

loc_1F8FE:
		cmpi.w	#$400,(a2)
		bhs.s	AIZTree_FallOff
		move.l	d6,-(sp)
		move.l	a1,-(sp)
		bsr.s	AIZTree_SetPlayerPos
		movea.l	(sp)+,a1
		move.l	(sp)+,d6
		bra.s	AIZTree_FallOff

; =============== S U B R O U T I N E =======================================


AIZTree_SetPlayerPos:

		btst	#Status_OnObj,status(a1)
		beq.w	locret_1F85A
		move.w	ground_vel(a1),d0
		ext.l	d0
		lsl.l	#8,d0
		add.l	d0,(a2)
		bmi.s	AIZTree_FallOff
		cmpi.w	#$400,(a2)
		blo.s	loc_1F93C
		move.w	#$1300,(Camera_min_X_pos).w
		move.w	#$4000,(Camera_max_X_pos).w

loc_1F93C:
		move.w	x_pos(a1),d2
		move.w	(a2),d0
		lsr.w	#1,d0
		jsr	GetSineCosine.w
		muls.w	#$7000,d0
		swap	d0
		add.w	x_pos(a0),d0
		move.w	d0,x_pos(a1)
		sub.w	d2,d0
		asl.w	#8,d0
		move.w	d0,x_vel(a1)
		move.w	y_pos(a1),d2
		move.w	(a2),d0
		lsr.w	#2,d0
		neg.w	d0
		addi.w	#$90,d0
		add.w	y_pos(a0),d0
		move.w	d0,y_pos(a1)
		sub.w	d2,d0
		asl.w	#8,d0
		move.w	d0,y_vel(a1)
		moveq	#0,d0
		move.w	(a2),d0
		lsr.w	#1,d0
		divu.w	#$B,d0
		move.b	AIZTree_PlayerFrames(pc,d0.w),mapping_frame(a1)
		moveq	#0,d0
		move.b	mapping_frame(a1),d0
		jmp	(Tails_Carry_LoadPLC).l
; End of function AIZTree_SetPlayerPos

; ---------------------------------------------------------------------------
; byte_1F99A:
AIZTree_PlayerFrames:
		dc.b  $69, $6A, $6B, $77, $6C, $6C, $6D, $6D, $6E, $6E, $6F, $6F, $70, $70, $71, $71, $72, $72, $73, $73
		dc.b  $74, $74, $75, $75, $76, $76, $77, $77, $6C, $6C, $6D, $6D, $6E, $6E, $6F, $6F, $70, $70, $71, $71
		dc.b  $72, $72, $73, $73, $74, $74, $75, $75, $6B, $6B, $6A, $6A, $69, $69
byte_1F9D0:	dc.b  $18, $27, $18, $17, $18,  $F,  $E,  $F, $10, $28, $28, $10, $28, $10, $10, $20
; ---------------------------------------------------------------------------

Obj_AIZLRZEMZRock:

		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	d0,d2
		lsr.w	#4,d0
		andi.b	#7,d0
		move.b	d0,$22(a0)
		add.w	d0,d0
		move.b	byte_1F9D0(pc,d0.w),7(a0)
		move.b	byte_1F9D0+1(pc,d0.w),d1
		move.b	d1,6(a0)
		move.b	d1,$1E(a0)
		move.l	#Map_AIZRock,$C(a0)
		move.w	#$2333,$A(a0)
		ori.b	#4,4(a0)
		move.w	#prio(4),8(a0)
		move.w	$10(a0),$2E(a0)
		move.w	#$40,$42(a0)
		cmpi.w	#1,(Current_zone_and_act).w
		bne.s	loc_1FA42
		move.l	#Map_AIZRock2,$C(a0)
		move.w	#$42E9,$A(a0)

loc_1FA42:
		cmpi.w	#$1200,(Current_zone_and_act).w
		bne.s	loc_1FA5E
		move.l	#Map_EMZRock,$C(a0)
		move.w	#$E300,$A(a0)
		move.b	#0,$22(a0)

loc_1FA5E:
		cmpi.b	#9,(Current_zone).w
		bne.s	loc_1FA8C
		move.l	#Map_LRZBreakableRock,$C(a0)
		move.w	#$40D3,$A(a0)
		addq.b	#4,$22(a0)
		tst.b	(Current_act).w
		beq.s	loc_1FA8C
		move.l	#Map_LRZBreakableRock2,$C(a0)
		move.w	#$640D,$A(a0)

loc_1FA8C:

		andi.w	#$F,d2
		cmpi.w	#$F,d2
		bne.s	loc_1FAA0
		move.l	#loc_20002,(a0)
		bra.w	loc_20002
; ---------------------------------------------------------------------------

loc_1FAA0:
		move.l	#loc_1FAF2,(a0)
		btst	#2,$2C(a0)
		beq.s	loc_1FAB8
		move.l	#loc_1FD08,(a0)
		bra.w	loc_1FD08
; ---------------------------------------------------------------------------

loc_1FAB8:
		btst	#3,$2C(a0)
		beq.s	loc_1FACA
		move.l	#loc_1FF48,(a0)
		bra.w	loc_1FF48
; ---------------------------------------------------------------------------

loc_1FACA:
		move.w	respawn_addr(a0),d0
		beq.s	loc_1FAF2
		movea.w	d0,a2
		move.b	(a2),d0
		andi.w	#$7F,d0
		beq.s	loc_1FAF2
		sub.w	d0,$10(a0)
		neg.w	d0
		addi.w	#$40,d0
		move.w	d0,$42(a0)
		jsr	ObjCheckFloorDist.w
		add.w	d1,$14(a0)

loc_1FAF2:
		move.w	(Chain_bonus_counter).w,$38(a0)
		move.b	(Player_1+anim).w,$32(a0)
		move.b	(Player_2+anim).w,$33(a0)
		move.b	(Player_1+$2A).w,$3A(a0)
		move.b	(Player_2+$2A).w,$3B(a0)
		move.w	$10(a0),d4		; NAT: Some test code here
;		bset	#4,$10+1(a0)		; NAT: Player spawning had a bug, where they would spawn on
;		cmp.b	#6,Player_2+routine.w	; NAT: a platform, which would move from under them, leaving
;		bhs.s	.nofix			; NAT: Them suspended in the air, in the state where they are
;		bclr	#4,$10+1(a0)		; NAT: supposedly on a platform and don't fall down.
						; NAT: Had to use that code in order to cause the bug to
.nofix		moveq	#0,d1			; NAT: happen reliably and make it easy to test.8
		move.b	7(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		jsr	SolidObjectFull.w
		btst	#1,$2C(a0)
		beq.s	loc_1FB3A
		bsr.w	sub_200A2

loc_1FB3A:
		btst	#0,$2C(a0)
		beq.s	loc_1FB4C
		move.b	$2A(a0),d0
		andi.b	#$18,d0
		bne.s	loc_1FB62

loc_1FB4C:

		tst.w	(Competition_mode).w
		bne.s	loc_1FB5C
		move.w	$2E(a0),d0
		jmp	Sprite_OnScreen_Test2.w
; ---------------------------------------------------------------------------

loc_1FB5C:
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_1FB62:
		cmpi.b	#$18,d0
		bne.s	loc_1FB90
		cmpi.b	#2,$32(a0)
		beq.s	loc_1FB78
		cmpi.b	#2,$33(a0)
		bne.s	loc_1FB4C

loc_1FB78:
		lea	(Player_1).w,a1
		move.b	$32(a0),d0
		bsr.s	sub_1FBA8
		lea	(Player_2).w,a1
		move.b	$33(a0),d0
		bsr.s	sub_1FBA8
		bra.w	loc_1FBF8
; ---------------------------------------------------------------------------

loc_1FB90:
		move.b	d0,d1
		andi.b	#8,d1
		beq.s	loc_1FBE0
		cmpi.b	#2,$32(a0)
		bne.s	loc_1FB4C
		lea	(Player_1).w,a1
		bsr.s	sub_1FBAE
		bra.s	loc_1FBF8

; =============== S U B R O U T I N E =======================================


sub_1FBA8:

		cmpi.b	#2,d0
		bne.s	loc_1FBCC
; End of function sub_1FBA8


; =============== S U B R O U T I N E =======================================


sub_1FBAE:
		bset	#2,$2A(a1)
		move.b	#$E,$1E(a1)
		move.b	#7,$1F(a1)
		move.b	#2,$20(a1)
		move.w	#-$300,$1A(a1)

loc_1FBCC:
		bset	#1,$2A(a1)
		bclr	#3,$2A(a1)
		move.b	#2,5(a1)
		rts
; End of function sub_1FBAE

; ---------------------------------------------------------------------------

loc_1FBE0:
		andi.b	#$10,d0
		beq.w	loc_1FB4C
		cmpi.b	#2,$33(a0)
		bne.w	loc_1FB4C
		lea	(Player_2).w,a1
		bsr.s	sub_1FBAE

loc_1FBF8:

		move.w	$38(a0),(Chain_bonus_counter).w
		andi.b	#$E7,$2A(a0)
		tst.w	(Competition_mode).w
		bne.w	loc_1FC9C
		move.l	#loc_1FC16,(a0)
		bsr.w	sub_2011E

loc_1FC16:

		cmpi.b	#9,(Current_zone).w
		beq.s	loc_1FC60
		move.l	#loc_1FC24,(a0)

loc_1FC24:
		subq.b	#1,$24(a0)
		bpl.s	loc_1FC42
		move.b	#2,$24(a0)
		move.b	$22(a0),d0
		addq.b	#1,d0
		cmpi.b	#7,d0
		blo.s	loc_1FC3E
		moveq	#3,d0

loc_1FC3E:
		move.b	d0,$22(a0)

loc_1FC42:
		jsr	MoveSprite2.w
		addi.w	#$18,$1A(a0)
		tst.b	4(a0)
		bpl.s	loc_1FC5A
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_1FC5A:

		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_1FC60:
		move.l	#loc_1FC66,(a0)

loc_1FC66:

		subq.b	#1,$24(a0)
		bpl.s	loc_1FC84
		move.b	#7,$24(a0)
		move.b	$22(a0),d0
		addq.b	#1,d0
		andi.b	#3,d0
		add.b	$3C(a0),d0
		move.b	d0,$22(a0)

loc_1FC84:
		jsr	MoveSprite2.w
		addi.w	#$18,$1A(a0)
		tst.b	4(a0)
		bpl.s	loc_1FC5A
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_1FC9C:
		bsr.s	sub_1FCC8
		move.b	#3,$22(a0)
		move.l	#loc_1FCAE,(a0)
		bsr.w	sub_2011E

loc_1FCAE:

		jsr	MoveSprite2.w
		addi.w	#$18,$1A(a0)
		tst.b	4(a0)
		bpl.w	loc_1FC5A
		jmp	Draw_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_1FCC8:

		jsr	Create_New_Sprite3.w
		bne.w	locret_1FCF0
		moveq	#$48,d0

loc_1FCD4:
		move.w	(a0,d0.w),(a1,d0.w)
		subq.w	#2,d0
		bcc.s	loc_1FCD4
		move.l	(a0),$44(a1)
		move.l	#loc_1FCF2,(a1)
		move.b	#7,$22(a1)
		moveq	#0,d0

locret_1FCF0:
		rts
; End of function sub_1FCC8

; ---------------------------------------------------------------------------

loc_1FCF2:
		tst.b	4(a0)
		bmi.s	loc_1FD02
		move.l	$44(a0),(a0)
		move.b	#0,$22(a0)

loc_1FD02:
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_1FD08:

		move.w	(Player_1+x_vel).w,$30(a0)
		move.w	(Player_2+$18).w,$36(a0)
		moveq	#0,d1
		move.b	7(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		swap	d6
		andi.w	#3,d6
		bne.s	loc_1FD4E

loc_1FD38:

		tst.w	(Competition_mode).w
		bne.s	loc_1FD48
		move.w	$2E(a0),d0
		jmp	Sprite_OnScreen_Test2.w
; ---------------------------------------------------------------------------

loc_1FD48:
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_1FD4E:
		lea	(Player_1).w,a1
		move.w	$30(a0),d1
		move.w	d6,d0
		andi.w	#1,d0
		beq.w	loc_1FDEA
		tst.b	$2C(a0)
		bpl.s	loc_1FD72
		cmpi.b	#2,$38(a1)
		beq.s	loc_1FDA4
		bra.w	loc_1FDEA
; ---------------------------------------------------------------------------

loc_1FD72:
		tst.b	(Super_Sonic_Knux_flag).w
		bne.s	loc_1FDA4
		cmpi.b	#2,$38(a1)
		beq.s	loc_1FDA4
		btst	#4,$2B(a1)
		bne.s	loc_1FD90
		btst	#5,$2A(a0)
		beq.s	loc_1FDEA

loc_1FD90:
		cmpi.b	#2,$20(a1)
		bne.s	loc_1FDEA
		move.w	d1,d0
		bpl.s	loc_1FD9E
		neg.w	d0

loc_1FD9E:
		cmpi.w	#$480,d0
		blo.s	loc_1FDEA

loc_1FDA4:

		bclr	#5,$2A(a0)
		bsr.w	sub_1FE34
		btst	#6,$2A(a0)
		beq.w	loc_1FD38
		lea	(Player_2).w,a1
		cmpi.b	#2,$38(a1)
		beq.s	loc_1FDCE
		cmpi.b	#2,$20(a1)
		bne.w	loc_1FD38

loc_1FDCE:
		move.w	$36(a0),$18(a1)
		move.w	$18(a1),$1C(a1)
		bclr	#6,$2A(a0)
		bclr	#5,$2A(a1)
		bra.w	loc_1FD38
; ---------------------------------------------------------------------------

loc_1FDEA:

		lea	(Player_2).w,a1
		move.w	$36(a0),d1
		btst	#6,$2A(a0)
		beq.w	loc_1FD38
		tst.b	$2C(a0)
		bpl.s	loc_1FE0E
		cmpi.b	#2,$38(a1)
		beq.s	loc_1FE2E
		bra.w	loc_1FD38
; ---------------------------------------------------------------------------

loc_1FE0E:
		cmpi.b	#2,$38(a1)
		beq.s	loc_1FE2E
		cmpi.b	#2,$20(a1)
		bne.w	loc_1FD38
		move.w	d1,d0
		bpl.s	loc_1FE26
		neg.w	d0

loc_1FE26:
		cmpi.w	#$480,d0
		blo.w	loc_1FD38

loc_1FE2E:

		bclr	#6,$2A(a0)

; =============== S U B R O U T I N E =======================================


sub_1FE34:
		bsr.w	sub_1FF1E
		tst.w	(Competition_mode).w
		bne.w	loc_1FECE
		move.w	d1,$18(a1)
		addq.w	#4,$10(a1)
		lea	(word_202F4).l,a4
		move.w	$10(a0),d0
		cmp.w	$10(a1),d0
		blo.s	loc_1FE64
		subi.w	#8,$10(a1)
		lea	(word_20314).l,a4

loc_1FE64:
		move.w	$18(a1),$1C(a1)
		bclr	#5,$2A(a1)
		cmpi.b	#2,$38(a1)
		bne.s	loc_1FE9E
		cmpi.b	#1,$2F(a1)
		bne.s	loc_1FE9E
		move.b	#2,$2F(a1)
		move.b	#$21,$20(a1)
		bclr	#0,$2A(a1)
		tst.w	$18(a1)
		bpl.s	loc_1FE9E
		bset	#0,$2A(a1)

loc_1FE9E:

		moveq	#0,d0
		move.b	$22(a0),d0
		cmpi.b	#9,(Current_zone).w
		bne.s	loc_1FEBE
		subq.b	#4,d0
		move.l	#loc_1FC66,(a0)
		add.w	d0,d0
		bsr.w	sub_201DE
		bra.w	loc_1FC66
; ---------------------------------------------------------------------------

loc_1FEBE:
		move.l	#loc_1FC16,(a0)
		add.w	d0,d0
		bsr.w	sub_2013A
		bra.w	loc_1FC16
; ---------------------------------------------------------------------------

loc_1FECE:
		move.w	d1,$18(a1)
		addq.w	#4,$10(a1)
		lea	(word_20370).l,a4
		move.w	$10(a0),d0
		cmp.w	$10(a1),d0
		blo.s	loc_1FEF2
		subi.w	#8,$10(a1)
		lea	(word_20388).l,a4

loc_1FEF2:
		move.w	$18(a1),$1C(a1)
		bclr	#5,$2A(a1)
		bsr.w	sub_1FCC8
		move.l	#loc_1FCAE,(a0)
		move.b	#3,$22(a0)
		moveq	#0,d0
		move.b	$22(a0),d0
		add.w	d0,d0
		bsr.w	sub_2013A
		bra.w	loc_1FCAE
; End of function sub_1FE34


; =============== S U B R O U T I N E =======================================


sub_1FF1E:
		bclr	#3,$2A(a0)
		beq.s	loc_1FF32
		bset	#1,(Player_1+$2A).w
		bclr	#3,(Player_1+$2A).w

loc_1FF32:
		bclr	#4,$2A(a0)
		beq.s	locret_1FF46
		bset	#1,(Player_2+$2A).w
		bclr	#3,(Player_2+$2A).w

locret_1FF46:
		rts
; End of function sub_1FF1E

; ---------------------------------------------------------------------------

loc_1FF48:

		move.w	(Player_1+y_vel).w,$30(a0)
		move.w	(Player_2+$1A).w,$36(a0)
		moveq	#0,d1
		move.b	7(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		swap	d6
		andi.w	#$C,d6
		bne.s	loc_1FF84
		move.w	$2E(a0),d0
		jmp	Sprite_OnScreen_Test2.w
; ---------------------------------------------------------------------------

loc_1FF84:
		move.b	d6,d0
		andi.b	#4,d0
		beq.s	loc_1FFA8
		lea	(Player_1).w,a1
		move.w	$30(a0),$1A(a1)
		andi.b	#8,d6
		beq.s	loc_1FFC4
		lea	(Player_2).w,a1
		move.w	$36(a0),$1A(a1)
		bra.s	loc_1FFC4
; ---------------------------------------------------------------------------

loc_1FFA8:
		andi.b	#8,d6
		beq.s	loc_1FFBA
		lea	(Player_2).w,a1
		move.w	$36(a0),$1A(a1)
		bra.s	loc_1FFC4
; ---------------------------------------------------------------------------

loc_1FFBA:
		move.w	$2E(a0),d0
		jmp	Sprite_OnScreen_Test2.w
; ---------------------------------------------------------------------------

loc_1FFC4:

		btst	#3,$2A(a0)
		beq.s	loc_1FFDC
		lea	(Player_1).w,a1
		bset	#1,$2A(a1)

loc_1FFD6:
		bclr	#3,$2A(a1)

loc_1FFDC:
		btst	#4,$2A(a0)
		beq.s	loc_1FFF4
		lea	(Player_2).w,a1
		bset	#1,$2A(a1)
		bclr	#3,$2A(a1)

loc_1FFF4:
		move.l	#loc_1FC16,(a0)
		bsr.w	sub_2011E
		bra.w	loc_1FC16
; ---------------------------------------------------------------------------

loc_20002:

		move.w	(Chain_bonus_counter).w,$38(a0)
		moveq	#0,d1
		move.b	7(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		move.b	$2A(a0),d0
		andi.b	#8,d0
		bne.s	loc_20036

loc_20030:
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_20036:
		lea	(Player_1).w,a1
		cmpi.b	#2,$38(a1)
		bne.s	loc_20030
		bsr.s	sub_20056
		btst	#4,$2A(a0)
		beq.s	loc_20088
		lea	(Player_2).w,a1
		bsr.s	sub_20056
		bra.w	loc_20088

; =============== S U B R O U T I N E =======================================


sub_20056:
		bset	#2,$2A(a1)
		move.b	#$E,$1E(a1)
		move.b	#7,$1F(a1)
		move.b	#2,$20(a1)
		move.w	#-$300,$1A(a1)
		bset	#1,$2A(a1)
		bclr	#3,$2A(a1)

loc_20080:
		move.b	#2,5(a1)
		rts
; End of function sub_20056

; ---------------------------------------------------------------------------

loc_20088:

		move.w	$38(a0),(Chain_bonus_counter).w
		andi.b	#$E7,$2A(a0)
		move.l	#loc_1FC16,(a0)
		bsr.w	sub_2011E
		bra.w	loc_1FC16

; =============== S U B R O U T I N E =======================================


sub_200A2:
		move.b	$2A(a0),d3
		andi.b	#$60,d3
		beq.w	locret_200CA
		move.w	$10(a0),d2
		lea	(Player_1).w,a1
		move.b	$3A(a0),d0
		moveq	#5,d6
		bsr.s	sub_200CC
		lea	(Player_2).w,a1
		move.b	$3B(a0),d0
		moveq	#6,d6
		bsr.s	sub_200CC

locret_200CA:
		rts
; End of function sub_200A2


; =============== S U B R O U T I N E =======================================


sub_200CC:

		btst	d6,d3
		beq.s	locret_2011C
		cmp.w	$10(a1),d2
		bhs.s	locret_2011C
		btst	#5,d0
		beq.s	locret_2011C
		subq.w	#1,$40(a0)
		bpl.s	locret_2011C
		move.w	#$10,$40(a0)
		tst.w	$42(a0)
		beq.s	locret_2011C
		subq.w	#1,$42(a0)
		subq.w	#1,$10(a0)
		subq.w	#1,$10(a1)
		jsr	ObjCheckFloorDist.w
		add.w	d1,$14(a0)
		move.w	respawn_addr(a0),d0
		beq.s	locret_2011C
		movea.w	d0,a2
		move.b	$43(a0),d0
		subi.b	#$40,d0
		neg.b	d0
		move.b	d0,(a2)
		bset	#7,(a2)

locret_2011C:
		rts
; End of function sub_200CC


; =============== S U B R O U T I N E =======================================


sub_2011E:

		cmpi.b	#9,(Current_zone).w
		beq.w	loc_201C4
		moveq	#0,d0
		move.b	$22(a0),d0
		add.w	d0,d0
		lea	(off_202E4).l,a4
		adda.w	(a4,d0.w),a4
; End of function sub_2011E


; =============== S U B R O U T I N E =======================================


sub_2013A:

		lea	(off_2026E).l,a3
		adda.w	(a3,d0.w),a3
		move.w	(a3)+,d1
		move.l	(a0),d4
		move.b	4(a0),d5
		move.w	$10(a0),d2
		move.w	$14(a0),d3
		move.w	#3,d6
		movea.l	a0,a1
		bra.s	loc_20162
; ---------------------------------------------------------------------------

loc_2015C:
		jsr	Create_New_Sprite3.w
		bne.s	loc_201BC

loc_20162:
		move.l	d4,(a1)

loc_20164:
		move.l	$C(a0),$C(a1)
		move.b	d5,4(a1)
		move.b	(a3)+,d0
		ext.w	d0
		add.w	d2,d0
		move.w	d0,$10(a1)
		move.b	(a3)+,d0
		ext.w	d0
		add.w	d3,d0
		move.w	d0,$14(a1)
		move.w	$A(a0),$A(a1)
		ori.w	#$8000,$A(a1)
		move.w	#prio(1),8(a1)
		move.b	#$18,7(a1)
		move.b	#$18,7(a1)
		move.w	(a4)+,$18(a1)
		move.w	(a4)+,$1A(a1)
		move.b	d6,$22(a1)
		addq.b	#1,d6
		cmpi.b	#7,d6
		blo.s	loc_201B8
		move.w	#3,d6

loc_201B8:
		dbf	d1,loc_2015C

loc_201BC:
		moveq	#$59,d0
		jmp	Play_Sound_2.w
; End of function sub_2013A

; ---------------------------------------------------------------------------

loc_201C4:
		move.l	#loc_1FC66,(a0)
		moveq	#0,d0
		move.b	$22(a0),d0
		subq.b	#4,d0
		add.w	d0,d0
		lea	(off_202E4).l,a4
		adda.w	(a4,d0.w),a4

; =============== S U B R O U T I N E =======================================


sub_201DE:
		lea	(off_2026E).l,a3
		adda.w	(a3,d0.w),a3
		move.w	(a3)+,d1
		move.l	(a0),d4
		move.b	4(a0),d5
		move.w	$10(a0),d2
		move.w	$14(a0),d3
		move.w	#3,d6
		movea.l	a0,a1
		bra.s	loc_20206
; ---------------------------------------------------------------------------

loc_20200:
		jsr	Create_New_Sprite3.w
		bne.s	loc_20266

loc_20206:
		move.l	d4,(a1)
		move.l	$C(a0),$C(a1)
		move.b	d5,4(a1)
		move.b	(a3)+,d0
		ext.w	d0
		add.w	d2,d0
		move.w	d0,$10(a1)
		move.b	(a3)+,d0
		ext.w	d0
		add.w	d3,d0
		move.w	d0,$14(a1)
		move.w	$A(a0),$A(a1)
		ori.w	#$8000,$A(a1)
		move.w	#prio(1),8(a1)
		move.b	#$20,7(a1)
		move.b	#$20,7(a1)
		move.w	(a4)+,$18(a1)
		move.w	(a4)+,$1A(a1)
		move.b	(a3)+,$22(a1)
		move.b	$22(a1),d0
		andi.b	#-4,d0
		move.b	d0,$3C(a1)
		move.b	#7,$24(a1)
		dbf	d1,loc_20200

loc_20266:
		moveq	#$59,d0
		jmp	Play_Sound_2.w
; End of function sub_201DE

; ---------------------------------------------------------------------------
off_2026E:	dc.w word_2027E-off_2026E
		dc.w word_20290-off_2026E
		dc.w word_2029C-off_2026E
		dc.w word_202A6-off_2026E
		dc.w word_202B4-off_2026E
		dc.w word_202C8-off_2026E
		dc.w word_202C8-off_2026E
		dc.w word_202DC-off_2026E
word_2027E:	dc.w 7
		dc.w $F8E8
		dc.w $BE4
		dc.w $FCF4
		dc.w $CFC
		dc.w $F404
		dc.w $40C
		dc.w $F41C
		dc.w $C1C
word_20290:	dc.w 4
		dc.w $FCF4
		dc.w $BF4
		dc.w $FCFC
		dc.w $F40C
		dc.w $C0C
word_2029C:	dc.w 3
		dc.w $FCFC
		dc.w $CFC
		dc.w $F404
		dc.w $C04
word_202A6:	dc.w 5
		dc.w $F8F8
		dc.w $8F8
		dc.w $F800
		dc.w $800
		dc.w $F808
		dc.w $808
word_202B4:	dc.w 5
		dc.w $10
		dc.w $600
		dc.w 7
		dc.w $F8F0
		dc.w $108
		dc.w $2000
		dc.w $E8
		dc.w $600
		dc.w $1B07
word_202C8:	dc.w 5
		dc.w $803
		dc.w $7F8
		dc.w $FB01
		dc.w $F008
		dc.w $1E8
		dc.w 7
		dc.w 0
		dc.w $618
		dc.w 6
word_202DC:	dc.w 1
		dc.w $10
		dc.w $100
		dc.w $F000
off_202E4:	dc.w word_202F4-off_202E4

		dc.w word_20334-off_202E4
		dc.w word_20348-off_202E4
		dc.w word_20358-off_202E4
		dc.w word_203A0-off_202E4
		dc.w word_203C0-off_202E4
		dc.w word_203C0-off_202E4
		dc.w word_203A0-off_202E4
word_202F4:	dc.w $FD00

		dc.w $FD00
		dc.w $FD40
		dc.w $FD80
		dc.w $FD40
		dc.w $FD80
		dc.w $FD80
		dc.w $FE00
		dc.w $FD80
		dc.w $FE80
		dc.w $FDC0
		dc.w $FE80
		dc.w $FDC0
		dc.w $FF00
		dc.w $FE00
		dc.w $FF00
word_20314:	dc.w $2C0
		dc.w $FD80
		dc.w $300
		dc.w $FD00
		dc.w $280
		dc.w $FE00
		dc.w $2C0
		dc.w $FD80
		dc.w $240
		dc.w $FE80
		dc.w $280
		dc.w $FE80
		dc.w $200
		dc.w $FF00
		dc.w $240
		dc.w $FF00
word_20334:	dc.w $FE00
		dc.w $FE00
		dc.w $200
		dc.w $FE00
		dc.w $FF00
		dc.w $FE20
		dc.w $FE50
		dc.w $FE40
		dc.w $1C0
		dc.w $FE40
word_20348:	dc.w $FF00
		dc.w $FE00
		dc.w $100
		dc.w $FE20
		dc.w $FE50
		dc.w $FE40
		dc.w $1C0
		dc.w $FE40
word_20358:	dc.w $FF50
		dc.w $FE20
		dc.w $B0
		dc.w $FE30
		dc.w $FF80
		dc.w $FE00
		dc.w $80
		dc.w $FE20
		dc.w $FF28
		dc.w $FE40
		dc.w $E0
		dc.w $FE40
word_20370:	dc.w $FD40
		dc.w $FD80
		dc.w $FD80
		dc.w $FE00
		dc.w $FD80
		dc.w $FE80
		dc.w $FDC0
		dc.w $FE80
		dc.w $FDC0
		dc.w $FF00
		dc.w $FE00
		dc.w $FF00
word_20388:	dc.w $2C0
		dc.w $FD80
		dc.w $280
		dc.w $FE00
		dc.w $280
		dc.w $FE80
		dc.w $240
		dc.w $FE80
		dc.w $240
		dc.w $FF00
		dc.w $200
		dc.w $FF00
word_203A0:	dc.w $FD00
		dc.w $FD00
		dc.w $FD40
		dc.w $FD80
		dc.w $FD40
		dc.w $FD80
		dc.w $FD80
		dc.w $FE00
		dc.w $FD80
		dc.w $FE80
		dc.w $FDC0
		dc.w $FE80
		dc.w $FDC0
		dc.w $FF00
		dc.w $FE00
		dc.w $FF00
word_203C0:	dc.w $C0
		dc.w $FE20
		dc.w $FF80
		dc.w $FE60
		dc.w $FF60
		dc.w $FEA0
		dc.w $FF00
		dc.w $FE20
		dc.w $40
		dc.w $FE40
		dc.w $100
		dc.w $FE20
Map_LRZBreakableRock:include "Levels/LRZ/Misc Object Data/Map - Breakable Rock.asm"

Map_LRZBreakableRock2:include "Levels/LRZ/Misc Object Data/Map - Breakable Rock 2.asm"

; ---------------------------------------------------------------------------

Obj_CollapsingPlatform:

		move.l	#Map_AIZCollapsingPlatform,$C(a0)
		move.w	#$4001,$A(a0)
		cmpi.w	#1,(Current_zone_and_act).w
		bne.s	loc_20522
		move.l	#Map_AIZCollapsingPlatform2,$C(a0)
		move.w	#$4001,$A(a0)

loc_20522:
		move.l	#byte_20CB6,$30(a0)
		move.l	#byte_20E9E,$3C(a0)
		move.b	#$3C,7(a0)
		move.b	#$20,6(a0)
		cmpi.b	#5,(Current_zone).w
		bne.s	loc_20570
		move.l	#Map_ICZCollapsingBridge,$C(a0)
		move.w	#$4001,$A(a0)
		move.l	#byte_20CD4,$30(a0)
		move.l	#byte_20EDE,$3C(a0)
		move.b	#$30,7(a0)
		move.b	#$30,6(a0)

loc_20570:
		ori.b	#4,4(a0)
		move.w	#prio(5),8(a0)
		move.b	#7,$38(a0)
		move.b	$2C(a0),$22(a0)
		ori.b	#$80,$2A(a0)
		move.l	#loc_20594,(a0)

loc_20594:
		tst.b	$3A(a0)
		beq.s	loc_205A6
		tst.b	$38(a0)
		beq.w	loc_20C24
		subq.b	#1,$38(a0)

loc_205A6:
		move.b	$2A(a0),d0
		andi.b	#$18,d0
		beq.s	sub_205B6
		move.b	#1,$3A(a0)

; =============== S U B R O U T I N E =======================================


sub_205B6:

		moveq	#0,d1
		move.b	7(a0),d1
		movea.l	$3C(a0),a2
		move.w	$10(a0),d4
		jsr	SolidObjectTopSloped2.w
		jmp	Sprite_OnScreen_Test.w
; End of function sub_205B6

; ---------------------------------------------------------------------------

loc_205CE:
		subq.b	#1,$38(a0)
		bne.s	loc_205DA
		move.l	#loc_20620,(a0)

loc_205DA:
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_205DE:
		bsr.w	sub_205B6
		subq.b	#1,$38(a0)
		bne.s	locret_2061E
		move.l	#loc_20620,(a0)
		lea	(Player_1).w,a1
		moveq	#3,d6
		bsr.s	sub_205FC
		lea	(Player_2).w,a1
		moveq	#4,d6

; =============== S U B R O U T I N E =======================================


sub_205FC:
		btst	d6,$2A(a0)
		beq.s	locret_2061E
		bclr	d6,$2A(a0)
		bclr	#3,$2A(a1)
		bclr	#5,$2A(a1)
		bset	#1,$2A(a1)
		move.b	#1,$21(a1)

locret_2061E:

		rts
; End of function sub_205FC

; ---------------------------------------------------------------------------

loc_20620:

		tst.b	4(a0)
		bpl.w	j_Delete_Current_Sprite
		jsr	MoveSprite.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

Obj_CollapsingBridge:
		move.l	#loc_2095E,(a0)
		ori.b	#4,4(a0)
		move.w	#prio(5),8(a0)
		cmpi.b	#6,(Current_zone).w
		bne.s	loc_206B8
		move.b	$2C(a0),d0
		andi.w	#$3F,d0
		add.w	d0,d0
		add.w	d0,d0
		addq.w	#8,d0
		bcc.s	loc_2065E
		move.b	#-1,d0

loc_2065E:
		move.b	d0,$38(a0)
		btst	#6,$2C(a0)
		bne.s	loc_20696
		move.l	#Map_LBZCollapsingBridge,$C(a0)
		move.w	#$4001,$A(a0)
		move.b	#$40,7(a0)
		move.b	#$10,6(a0)
		move.l	#LBZBridgeCollapse_TimerArray,$30(a0)
		move.l	#LBZBridgeCollapse_TimerFlipArray,$34(a0)
		bra.s	loc_206B8
; ---------------------------------------------------------------------------

loc_20696:
		move.l	#Map_LBZCollapsingLedge,$C(a0)
		move.w	#$4001,$A(a0)
		move.b	#$20,7(a0)
		move.b	#$30,6(a0)
		move.l	#LBZLedgeCollapse_TimerArray,$30(a0)

loc_206B8:

		cmpi.b	#1,(Current_zone).w
		bne.w	loc_20752
		move.l	#Map_HCZCollapsingBridge,$C(a0)
		move.w	#$C001,$A(a0)
		move.b	$2C(a0),d0
		bpl.s	loc_206EA
		move.b	d0,d1
		andi.b	#$F,d1
		move.b	d1,$40(a0)
		move.l	#loc_20AF6,(a0)
		andi.b	#$70,d0

loc_206EA:
		move.b	d0,d1
		andi.w	#$F,d0
		lsl.w	#4,d0
		addq.w	#8,d0
		move.b	d0,$38(a0)
		andi.w	#$F0,d1
		lsr.w	#2,d1
		lea	byte_20722(pc,d1.w),a1
		move.b	(a1)+,7(a0)
		move.b	(a1)+,6(a0)
		move.b	(a1)+,$22(a0)
		move.b	(a1)+,$2C(a0)
		add.w	d1,d1
		lea	off_20732(pc,d1.w),a1
		move.l	(a1)+,$30(a0)
		move.l	(a1)+,$34(a0)
		bra.s	loc_20752
; ---------------------------------------------------------------------------
byte_20722:	dc.b $40
		dc.b $10
		dc.b 0
		dc.b $80
		dc.b $50
		dc.b $10
		dc.b 3
		dc.b $80
		dc.b $40
		dc.b $10
		dc.b 6
		dc.b 0
		dc.b $50
		dc.b $20
		dc.b 9
		dc.b $80
off_20732:	dc.l byte_20D22
		dc.l byte_20D32
		dc.l byte_20D42
		dc.l byte_20D56
		dc.l byte_20D6A
		dc.l byte_20D6A
		dc.l byte_20D79
		dc.l byte_20D91
; ---------------------------------------------------------------------------

loc_20752:

		cmpi.b	#2,(Current_zone).w
		bne.s	loc_207D4
		move.l	#Map_MGZCollapsingBridge,$C(a0)
		move.w	#$4001,$A(a0)
		move.b	$2C(a0),d0
		move.b	d0,d1
		andi.w	#$F,d0
		lsl.w	#4,d0
		addq.w	#8,d0
		move.b	d0,$38(a0)
		andi.w	#$F0,d1
		lsr.w	#2,d1
		lea	byte_207B0(pc,d1.w),a1
		move.b	(a1)+,7(a0)
		move.b	(a1)+,6(a0)
		move.b	(a1)+,$22(a0)
		move.b	(a1)+,$2C(a0)
		add.w	d1,d1
		lea	off_207BC(pc,d1.w),a1
		move.l	(a1)+,$30(a0)
		move.l	(a1)+,$34(a0)
		cmpi.w	#$10,d1
		bne.s	loc_207D4
		move.l	#loc_209D0,(a0)
		rts
; ---------------------------------------------------------------------------
byte_207B0:	dc.b $40
		dc.b $20
		dc.b 0
		dc.b $80
		dc.b $30
		dc.b $20
		dc.b 3
		dc.b $80
		dc.b $40
		dc.b $20
		dc.b 6
		dc.b $80
off_207BC:	dc.l byte_20DA9
		dc.l byte_20DC9
		dc.l byte_20DE9
		dc.l byte_20E01
		dc.l byte_20DA9
		dc.l byte_20DC9
; ---------------------------------------------------------------------------

loc_207D4:

		cmpi.b	#5,(Current_zone).w
		bne.s	loc_20834
		move.b	$2C(a0),d0
		bpl.s	loc_207F6
		move.b	d0,d1
		andi.b	#$F,d1
		move.b	d1,$40(a0)
		move.l	#loc_20AF6,(a0)
		andi.b	#$70,d0

loc_207F6:
		move.b	d0,d1
		andi.w	#$F,d0
		lsl.w	#4,d0
		addq.w	#8,d0
		move.b	d0,$38(a0)
		move.l	#Map_ICZCollapsingBridge,$C(a0)
		move.w	#$4001,$A(a0)
		move.b	#$50,7(a0)
		move.b	#$38,6(a0)
		move.l	#byte_20E19,$30(a0)
		move.l	#byte_20E45,$34(a0)
		move.b	#3,$22(a0)

loc_20834:
		cmpi.b	#$16,(Current_zone).w
		bne.s	loc_2084C
		move.l	#Map_HPZCollapsingBridge,$C(a0)
		move.w	#$4001,$A(a0)
		bra.s	loc_20862
; ---------------------------------------------------------------------------

loc_2084C:
		cmpi.b	#9,(Current_zone).w
		bne.s	loc_208A6
		move.l	#Map_LRZCollapsingPlatform,$C(a0)
		move.w	#$4090,$A(a0)

loc_20862:
		move.b	$2C(a0),d0
		move.b	d0,d1
		andi.w	#$F,d0
		lsl.w	#4,d0
		addq.w	#8,d0
		move.b	d0,$38(a0)
		andi.w	#$70,d1
		lsr.w	#2,d1
		lea	byte_2089A(pc,d1.w),a1
		move.b	(a1)+,7(a0)
		move.b	(a1)+,6(a0)
		move.b	(a1)+,$22(a0)
		add.w	d1,d1
		lea	off_2089E(pc,d1.w),a1
		move.l	(a1)+,$30(a0)
		move.l	(a1)+,$34(a0)
		bra.s	loc_208A6
; ---------------------------------------------------------------------------
byte_2089A:	dc.b $20
		dc.b $18
		dc.b 0
		dc.b $80
off_2089E:	dc.l byte_20E85
		dc.l byte_20E91
; ---------------------------------------------------------------------------

loc_208A6:

		cmpi.b	#4,(Current_zone).w
		bne.s	loc_20904
		move.l	#Map_FBZCollapsingBridge,$C(a0)

loc_208B6:
		move.w	#$4001,$A(a0)
		move.b	$2C(a0),d0
		move.b	d0,d1
		andi.w	#$F,d0
		lsl.w	#4,d0
		addq.w	#8,d0
		move.b	d0,$38(a0)
		andi.w	#$F0,d1
		lsr.w	#2,d1
		lea	byte_208F8(pc,d1.w),a1
		move.b	(a1)+,7(a0)
		move.b	(a1)+,6(a0)
		move.b	(a1)+,$22(a0)
		move.b	(a1)+,$2C(a0)
		add.w	d1,d1
		lea	off_208FC(pc,d1.w),a1
		move.l	(a1)+,$30(a0)
		move.l	(a1)+,$34(a0)
		bra.s	loc_20904
; ---------------------------------------------------------------------------
byte_208F8:	dc.b $40
		dc.b $20
		dc.b 0
		dc.b $80
off_208FC:	dc.l byte_20DA9
		dc.l byte_20DC9
; ---------------------------------------------------------------------------

loc_20904:

		cmpi.b	#8,(Current_zone).w
		bne.s	loc_2095E
		move.l	#Map_SOZCollapsingBridge,$C(a0)
		move.w	#$4001,$A(a0)
		move.b	$2C(a0),d0
		move.b	d0,d1
		andi.w	#$F,d0
		lsl.w	#4,d0
		addq.w	#8,d0
		move.b	d0,$38(a0)
		andi.w	#$70,d1
		lsr.w	#2,d1
		lea	byte_20952(pc,d1.w),a1
		move.b	(a1)+,7(a0)
		move.b	(a1)+,6(a0)
		move.b	(a1)+,$22(a0)
		add.w	d1,d1
		lea	off_20956(pc,d1.w),a1
		move.l	(a1)+,$30(a0)
		move.l	(a1)+,$34(a0)
		bra.s	loc_2095E
; ---------------------------------------------------------------------------
byte_20952:	dc.b $20
		dc.b $30
		dc.b 0
		dc.b $80
off_20956:	dc.l byte_20E71
		dc.l byte_20E7B
; ---------------------------------------------------------------------------

loc_2095E:


		tst.b	$3A(a0)
		beq.s	loc_209A8
		tst.b	$38(a0)
		bne.s	loc_209A4
		movea.l	$30(a0),a4
		tst.b	$2C(a0)
		bpl.s	loc_209A0
		move.b	$2A(a0),d0		; If BIT 7 of subtype set, collapse platform in direction dependent on player position
		andi.b	#$18,d0
		beq.s	loc_209A0
		move.w	(Player_1+x_pos).w,d1
		andi.b	#8,d0
		bne.s	loc_2098C
		move.w	(Player_2+x_pos).w,d1

loc_2098C:
		cmp.w	$10(a0),d1
		bhs.s	loc_209A0
		movea.l	$34(a0),a4
		bchg	#0,$2A(a0)
		addq.b	#1,$22(a0)

loc_209A0:

		bra.w	loc_20C12
; ---------------------------------------------------------------------------

loc_209A4:
		subq.b	#1,$38(a0)

loc_209A8:
		move.b	$2A(a0),d0		; Check if player is standing on platform
		andi.b	#$18,d0
		beq.s	loc_209B8
		move.b	#1,$3A(a0)		; Turn on collapsing timer

loc_209B8:

		moveq	#0,d1
		move.b	7(a0),d1
		move.w	#$10,d3
		move.w	$10(a0),d4
		jsr	SolidObjectTop.w
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_209D0:
		moveq	#0,d1
		move.b	7(a0),d1
		move.w	#$10,d3
		move.w	$10(a0),d4
		jsr	SolidObjectTop.w
		move.b	$2A(a0),d0
		andi.b	#$18,d0
		beq.s	loc_20A52
		move.b	(Player_1+$37).w,d1
		andi.b	#8,d0
		bne.s	loc_209FC
		move.b	(Player_2+$37).w,d1

loc_209FC:
		tst.b	d1
		bpl.s	loc_20A52
		bclr	#3,$2A(a0)
		beq.s	loc_20A12
		lea	(Player_1).w,a1
		bclr	#3,$2A(a1)

loc_20A12:
		bclr	#4,$2A(a0)
		beq.s	loc_20A24
		lea	(Player_2).w,a1
		bclr	#3,$2A(a1)

loc_20A24:
		lea	(word_20A76).l,a4
		addq.b	#1,$22(a0)
		move.w	#prio(1),8(a0)
		move.l	#loc_20A56,(a0)
		jsr	(sub_216B0).l
		move.w	respawn_addr(a0),d0
		beq.s	loc_20A50
		movea.w	d0,a1
		bclr	#7,(a1)
		clr.w	respawn_addr(a0)

loc_20A50:
		bra.s	loc_20A56
; ---------------------------------------------------------------------------

loc_20A52:

		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_20A56:

		jsr	MoveSprite2.w
		addi.w	#$18,$1A(a0)
		tst.b	4(a0)
		bpl.w	loc_20A70
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_20A70:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------
word_20A76:	dc.w $FC00
		dc.w $F600
		dc.w $FD00
		dc.w $F600
		dc.w $FE00
		dc.w $F600
		dc.w $FF00
		dc.w $F600
		dc.w $100
		dc.w $F600
		dc.w $200
		dc.w $F600
		dc.w $300
		dc.w $F600
		dc.w $400
		dc.w $F600
		dc.w $FC40
		dc.w $F700
		dc.w $FD40
		dc.w $F700
		dc.w $FE40
		dc.w $F700
		dc.w $FF40
		dc.w $F700
		dc.w $C0
		dc.w $F700
		dc.w $1C0
		dc.w $F700
		dc.w $2C0
		dc.w $F700
		dc.w $3C0
		dc.w $F700
		dc.w $FC80
		dc.w $F800
		dc.w $FD80
		dc.w $F800
		dc.w $FE80
		dc.w $F800
		dc.w $FF80
		dc.w $F800
		dc.w $80
		dc.w $F800
		dc.w $180
		dc.w $F800
		dc.w $280
		dc.w $F800
		dc.w $380
		dc.w $F800
		dc.w $FCC0
		dc.w $F900
		dc.w $FDC0
		dc.w $F900
		dc.w $FEC0
		dc.w $F900
		dc.w $FFC0
		dc.w $F900
		dc.w $40
		dc.w $F900
		dc.w $140
		dc.w $F900
		dc.w $240
		dc.w $F900
		dc.w $340
		dc.w $F900
; ---------------------------------------------------------------------------

loc_20AF6:

		tst.b	$3A(a0)
		beq.s	loc_20B40
		tst.b	$38(a0)
		bne.s	loc_20B3C
		movea.l	$30(a0),a4
		tst.b	$2C(a0)
		bpl.s	loc_20B38
		move.b	$2A(a0),d0
		andi.b	#$18,d0
		beq.s	loc_20B38
		move.w	(Player_1+x_pos).w,d1
		andi.b	#8,d0
		bne.s	loc_20B24
		move.w	(Player_2+x_pos).w,d1

loc_20B24:
		cmp.w	$10(a0),d1
		bhs.s	loc_20B38
		movea.l	$34(a0),a4
		bchg	#0,$2A(a0)
		addq.b	#1,$22(a0)

loc_20B38:

		bra.w	loc_20C12
; ---------------------------------------------------------------------------

loc_20B3C:
		subq.b	#1,$38(a0)

loc_20B40:
		move.b	$40(a0),d0
		andi.w	#$F,d0
		lea	(Level_trigger_array).w,a3
		lea	(a3,d0.w),a3
		tst.b	(a3)
		beq.s	loc_20B5E
		move.b	#1,$3A(a0)
		clr.w	respawn_addr(a0)

loc_20B5E:
		bra.w	loc_209B8
; ---------------------------------------------------------------------------

Obj_PlatformCollapseWait:
		subq.b	#1,$38(a0)
		bne.s	loc_20B6E
		move.l	#Obj_PlatformCollapseFall,(a0)

loc_20B6E:
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

Obj_PlatformCollapseFall:

		tst.b	4(a0)
		bpl.s	loc_20B86
		jsr	MoveSprite.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_20B86:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

Obj_PlatformCollapseWaitHandlePlayer:
		subq.b	#1,$38(a0)
		bne.s	loc_20B98
		move.l	#Obj_PlatformCollapseFall,(a0)

loc_20B98:
		move.b	$38(a0),d3
		movea.l	$30(a0),a2
		moveq	#0,d1
		move.b	7(a0),d1
		lea	(Player_1).w,a1
		moveq	#3,d6
		bsr.s	Check_CollapsePlayerRelease
		lea	(Player_2).w,a1
		moveq	#4,d6
		bsr.s	Check_CollapsePlayerRelease
		jmp	Sprite_OnScreen_Test.w

; =============== S U B R O U T I N E =======================================


Check_CollapsePlayerRelease:

		btst	d6,$2A(a0)
		beq.s	locret_20C10
		move.w	d1,d2
		add.w	d2,d2
		btst	#1,$2A(a1)
		bne.s	loc_20BF4
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		add.w	d1,d0
		bmi.s	loc_20BF4
		cmp.w	d2,d0
		bhs.s	loc_20BF4
		btst	#0,$2A(a0)
		beq.s	loc_20BE8
		neg.w	d0
		add.w	d2,d0

loc_20BE8:
		lsr.w	#4,d0
		move.b	(a2),d2
		sub.b	(a2,d0.w),d2
		cmp.b	d2,d3
		bhi.s	locret_20C10

loc_20BF4:

		bclr	d6,$2A(a0)
		bclr	#3,$2A(a1)
		bclr	#5,$2A(a1)
		bset	#1,$2A(a1)
		move.b	#1,$21(a1)

locret_20C10:

		rts
; End of function Check_CollapsePlayerRelease

; ---------------------------------------------------------------------------

loc_20C12:

		move.l	#Obj_PlatformCollapseWaitHandlePlayer,(a0)
		move.l	#Obj_PlatformCollapseWait,d4
		addq.b	#1,$22(a0)
		bra.s	loc_20C38
; ---------------------------------------------------------------------------

loc_20C24:
		move.l	#loc_205DE,(a0)
		move.l	#loc_205CE,d4
		addq.b	#2,$22(a0)
		movea.l	$30(a0),a4

loc_20C38:
		moveq	#0,d0
		move.b	$22(a0),d0
		add.w	d0,d0
		movea.l	$C(a0),a3
		adda.w	(a3,d0.w),a3
		move.w	(a3)+,d1
		subq.w	#1,d1
		bset	#5,4(a0)
		move.b	4(a0),d5
		movea.l	a0,a1
		bra.s	loc_20C64
; ---------------------------------------------------------------------------

loc_20C5A:
		jsr	Create_New_Sprite3.w
		bne.s	loc_20C98
		addq.w	#6,a3
		move.l	d4,(a1)

loc_20C64:
		move.l	a3,$C(a1)
		move.b	d5,4(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		move.w	$A(a0),$A(a1)
		move.w	8(a0),8(a1)
		move.b	7(a0),7(a1)
		move.b	6(a0),6(a1)
		move.b	(a4)+,$38(a1)
		dbf	d1,loc_20C5A

loc_20C98:
		jsr	Draw_Sprite.w
		move.w	respawn_addr(a0),d0
		beq.s	loc_20CAE
		movea.w	d0,a1
		bclr	#7,(a1)
		clr.w	respawn_addr(a0)

loc_20CAE:
		moveq	#$59,d0
		jmp	Play_Sound_2.w
; ---------------------------------------------------------------------------
byte_20CB6:	dc.b  $30, $2C, $28, $24, $20, $1C, $2E, $2A, $26, $22, $1E, $1A, $2C, $28, $24, $20, $1C, $18, $2A, $26
		dc.b  $22, $1E, $1A, $16, $28, $24, $20, $1C, $18, $14
byte_20CD4:	dc.b  $30, $2C, $28, $24, $20, $1C, $2E, $2A, $26, $22, $1E, $1A, $2C, $28, $24, $20, $1C, $18, $2A, $26
		dc.b  $22, $1E, $1A, $16, $28, $24, $20, $1C, $18, $14, $12, $10
LBZBridgeCollapse_TimerArray:	dc.b  $20, $1C,	$18, $14, $10,	$C,   8,   4, $1E, $1A,	$16, $12,  $E,	$A,   6,   2
LBZBridgeCollapse_TimerFlipArray:	dc.b  $20,   4,	  8,  $C, $10, $14, $18, $1C,	2,   6,	 $A,  $E, $12, $16, $1A, $1E
LBZLedgeCollapse_TimerArray:	dc.b  $20, $18,	$10,   8, $1E, $16,  $E,   6, $1C, $14,	 $C,   4, $1A, $12
byte_20D22:	dc.b  $20, $1C,	$18, $14, $10,	$C,   8,   4, $1E, $1A,	$16, $12,  $E,	$A,   6,   2
byte_20D32:	dc.b  $20,   4,	  8,  $C, $10, $14, $18, $1C,	2,   6,	 $A,  $E, $12, $16, $1A, $1E
byte_20D42:	dc.b  $28, $24,	$20, $1C, $18, $14, $10,  $C,	8,   4,	$26, $22, $1E, $1A, $16, $12,  $E,  $A,	  6,   2
byte_20D56:	dc.b  $28,   4,	  8,  $C, $10, $14, $18, $1C, $20, $24,	  2,   6,  $A,	$E, $12, $16, $1A, $1E,	$22, $26
byte_20D6A:	dc.b  $1C,   4,	  8,  $C, $10, $14, $18,   2,	6,  $A,	 $E, $12, $16, $1A, $1E
byte_20D79:	dc.b  $30, $2A, $24, $1E, $18, $12,  $C,   6, $2E, $28, $22, $1C, $16, $10,  $A,   4, $2C, $26, $20, $1A
		dc.b  $14,  $E,   8,   2
byte_20D91:	dc.b  $30,   6,  $C, $12, $18, $1E, $24, $2A,   4,  $A, $10, $16, $1C, $22, $28, $2E,   2,   8,  $E, $14
		dc.b  $1A, $20, $26, $2C
byte_20DA9:	dc.b  $40, $38, $30, $28, $20, $18, $10,   8, $3E, $36, $2E, $26, $1E, $16,  $E,   6, $3C, $34, $2C, $24
		dc.b  $1C, $14,  $C,   4, $3A, $32, $2A, $22, $1A, $12,  $A,   2
byte_20DC9:	dc.b  $40,   8, $10, $18, $20, $28, $30, $38,   6,  $E, $16, $1E, $26, $2E, $36, $3E,   4,  $C, $14, $1C
		dc.b  $24, $2C, $34, $3C,   2,  $A, $12, $1A, $22, $2A, $32, $3A
byte_20DE9:	dc.b  $30, $28, $20, $18, $10,   8, $2E, $26, $1E, $16,  $E,   6, $2C, $24, $1C, $14,  $C,   4, $2A, $22
		dc.b  $1A, $12,  $A,   2
byte_20E01:	dc.b  $30,   8, $10, $18, $20, $28,   6,  $E, $16, $1E, $26, $2E,   4,  $C, $14, $1C, $24, $2C,   2,  $A
		dc.b  $12, $1A, $22, $2A
byte_20E19:	dc.b  $28, $24, $20, $1C, $18, $14, $10,  $C,   8,   4, $27, $23, $1F, $1B, $17, $13,  $F,  $B,   7,   3
		dc.b  $26, $22, $1E, $1A, $16, $12,  $E,  $A,   6,   2, $25, $21, $1D, $19, $15, $11,  $D,   9,   5,   1
		dc.b    4,   3,   2,   1
byte_20E45:	dc.b  $28,   4,   8,  $C, $10, $14, $18, $1C, $20, $24,   3,   7,  $B,  $F, $13, $17, $1B, $1F, $23, $27
		dc.b    2,   6,  $A,  $E, $12, $16, $1A, $1E, $22, $26,   1,   5,   9,  $D, $11, $15, $19, $1D, $21, $25
		dc.b    1,   2,   3,   4
byte_20E71:	dc.b  $20, $18,	$10,   8, $1E, $16, $1C, $14, $1A, $12
byte_20E7B:	dc.b  $20,   8,	$10, $18,   6,	$E,   4,  $C,	2,  $A
byte_20E85:	dc.b  $18, $12,	 $C,   6, $16, $10,  $A,   4, $14,  $E,	  8,   2
byte_20E91:	dc.b  $18,   6,	 $C, $12,   4,	$A, $10, $16,	2,   8,	 $E, $14,   0
byte_20E9E:	dc.b  $1F, $1F, $1F, $1F, $1F, $1F, $1F, $1F, $1F, $1F, $1F, $1F, $1F, $1F, $1F, $1F, $1F, $1F, $1F, $1F
		dc.b  $1F, $1F, $1E, $1E, $1D, $1D, $1C, $1C, $1B, $1B, $1A, $1A, $19, $19, $18, $18, $17, $17, $16, $16
		dc.b  $15, $15, $14, $14, $13, $13, $12, $12, $11, $11, $10, $10,  $F,  $F,  $E,  $E,  $E,  $E,  $E,  $E
		dc.b   $E,  $E,  $E,  $E
byte_20EDE:	dc.b  $30, $30, $30, $30, $30, $30, $30, $30, $30, $30, $30, $30, $2F, $2F, $2F, $2F, $2F, $2F, $2F, $2F
		dc.b  $2F, $2F, $2F, $2F, $2E, $2E, $2E, $2E, $2E, $2E, $2E, $2E, $2D, $2D, $2D, $2D, $2D, $2D, $2D, $2D
		dc.b  $2D, $2D, $2D, $2D, $2D, $2C, $2B, $2A

Map_LRZCollapsingPlatform:include "Levels/LRZ/Misc Object Data/Map - Collapsing Platform.asm"


Map_HPZCollapsingBridge:include "Levels/HPZ/Misc Object Data/Map - Collapsing Bridge.asm"

Map_FBZCollapsingBridge:include "Levels/FBZ/Misc Object Data/Map - Collapsing Bridge.asm"

Map_SOZCollapsingBridge:include "Levels/SOZ/Misc Object Data/Map - Collapsing Bridge.asm"

; ---------------------------------------------------------------------------

Obj_BreakableWall:

		move.b	#4,4(a0)
		move.w	#prio(5),8(a0)
		move.l	#loc_21568,(a0)
		move.b	$2C(a0),d0
		bpl.s	loc_21340
		tst.b	(Level_trigger_array).w
		beq.s	loc_21340
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_21340:

		andi.b	#$F,d0
		move.b	d0,$22(a0)
		move.l	#Map_AIZBreakableWall,$C(a0)
		move.w	#$4001,$A(a0)
		move.b	#$10,7(a0)
		move.b	#$28,6(a0)
		move.l	#word_2193A,$34(a0)
		move.l	#word_2196A,$38(a0)
		cmpi.b	#1,(Current_zone).w
		bne.s	loc_213D6
		move.l	#Map_HCZBreakableWall,$C(a0)
		move.w	#$6001,$A(a0)
		move.b	#$10,7(a0)
		move.b	#$20,6(a0)
		move.l	#word_2199A,$34(a0)
		move.l	#word_219BA,$38(a0)
		cmpi.b	#2,$22(a0)
		bne.s	loc_213D6
		move.w	#$4350,$A(a0)
		move.b	#$18,7(a0)
		move.b	#$20,6(a0)
		move.l	#word_2199A,$34(a0)
		move.l	#word_219BA,$38(a0)
		move.l	#loc_21818,(a0)
		rts
; ---------------------------------------------------------------------------

loc_213D6:

		cmpi.b	#2,(Current_zone).w
		bne.s	loc_21428
		move.l	#Map_MGZBreakableWall,$C(a0)
		move.w	#$4001,$A(a0)
		move.b	#$20,7(a0)
		move.b	#$28,6(a0)
		move.l	#word_21A2A,$34(a0)
		move.l	#word_219DA,$38(a0)
		btst	#4,$2C(a0)
		beq.s	loc_21418
		move.l	#loc_21818,(a0)
		rts
; ---------------------------------------------------------------------------

loc_21418:
		cmpi.b	#2,$22(a0)
		bne.s	loc_21428
		move.l	#loc_2172E,(a0)
		rts
; ---------------------------------------------------------------------------

loc_21428:

		cmpi.b	#3,(Current_zone).w
		bne.s	loc_2146A
		move.l	#Map_CNZSOZBreakableWall,$C(a0)
		move.w	#$4420,$A(a0)
		move.b	#$10,7(a0)
		move.b	#$20,6(a0)
		move.l	#word_21A7A,$34(a0)
		move.l	#word_21A9A,$38(a0)
		cmpi.b	#2,$22(a0)
		bne.s	loc_2146A
		move.l	#loc_21818,(a0)
		rts
; ---------------------------------------------------------------------------

loc_2146A:

		cmpi.b	#6,(Current_zone).w
		bne.s	loc_214A4
		move.l	#Map_LBZBreakableWall,$C(a0)
		move.w	#$22EA,$A(a0)
		move.b	#$10,7(a0)
		move.b	#$20,6(a0)
		move.l	#word_2199A,$34(a0)
		move.l	#word_219BA,$38(a0)
		move.l	#loc_21818,(a0)
		rts
; ---------------------------------------------------------------------------

loc_214A4:
		cmpi.b	#7,(Current_zone).w
		bne.s	loc_214DE
		move.l	#Map_MHZBreakableWall,$C(a0)
		move.w	#$434B,$A(a0)
		move.b	#$10,7(a0)
		move.b	#$20,6(a0)
		move.l	#word_21A7A,$34(a0)
		move.l	#word_21A9A,$38(a0)
		move.l	#loc_21818,(a0)
		rts
; ---------------------------------------------------------------------------

loc_214DE:
		cmpi.b	#8,(Current_zone).w
		bne.s	loc_21536
		move.l	#Map_CNZSOZBreakableWall,$C(a0)
		move.w	#$448C,$A(a0)
		move.b	#$10,7(a0)
		move.b	#$20,6(a0)
		move.l	#word_21A7A,$34(a0)
		move.l	#word_21A9A,$38(a0)
		move.l	#loc_21818,(a0)
		cmpi.b	#4,$22(a0)
		bne.s	locret_21534
		move.b	#$30,6(a0)
		move.l	#word_2193A,$34(a0)
		move.l	#word_2196A,$38(a0)

locret_21534:
		rts
; ---------------------------------------------------------------------------

loc_21536:
		cmpi.b	#9,(Current_zone).w
		bne.s	loc_21568
		move.l	#Map_LRZBreakableWall,$C(a0)
		move.w	#$640D,$A(a0)
		move.b	#$10,7(a0)
		move.b	#$20,6(a0)
		move.l	#word_21A7A,$34(a0)
		move.l	#word_21A9A,$38(a0)

loc_21568:

		move.w	(Player_1+x_vel).w,$30(a0)
		move.w	(Player_2+$18).w,$32(a0)
		moveq	#0,d1
		move.b	7(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		tst.b	$2C(a0)
		bpl.s	loc_215A4
		tst.b	(Level_trigger_array).w
		beq.s	loc_215AC
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_215A4:
		swap	d6
		andi.w	#3,d6
		bne.s	loc_215B2

loc_215AC:

		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_215B2:
		lea	(Player_1).w,a1
		move.w	$30(a0),d1
		move.w	d6,d0
		andi.w	#1,d0
		beq.s	loc_2162A
		tst.b	(Super_Sonic_Knux_flag).w
		bne.s	loc_215F4
		cmpi.b	#2,$38(a1)
		beq.s	loc_215F4
		btst	#4,$2B(a1)
		bne.s	loc_215E0
		btst	#5,$2A(a0)
		beq.s	loc_2162A

loc_215E0:
		cmpi.b	#2,$20(a1)
		bne.s	loc_2162A
		move.w	d1,d0
		bpl.s	loc_215EE
		neg.w	d0

loc_215EE:
		cmpi.w	#$480,d0
		blo.s	loc_2162A

loc_215F4:

		bclr	#5,$2A(a0)
		bsr.s	sub_2165A
		btst	#6,$2A(a0)
		beq.s	loc_215AC
		lea	(Player_2).w,a1
		cmpi.b	#2,$20(a1)
		bne.s	loc_215AC
		move.w	$32(a0),$18(a1)
		move.w	$18(a1),$1C(a1)
		bclr	#6,$2A(a0)
		bclr	#5,$2A(a1)
		bra.s	loc_215AC
; ---------------------------------------------------------------------------

loc_2162A:

		lea	(Player_2).w,a1
		move.w	$32(a0),d1
		btst	#6,$2A(a0)
		beq.w	loc_215AC
		cmpi.b	#2,$20(a1)
		bne.w	loc_215AC
		move.w	d1,d0
		bpl.s	loc_2164C
		neg.w	d0

loc_2164C:
		cmpi.w	#$480,d0
		blo.w	loc_215AC
		bclr	#6,$2A(a0)

; =============== S U B R O U T I N E =======================================


sub_2165A:
		move.w	d1,$18(a1)
		addq.w	#4,$10(a1)
		movea.l	$34(a0),a4
		move.w	$10(a0),d0
		cmp.w	$10(a1),d0
		blo.s	loc_2167A
		subi.w	#8,$10(a1)
		movea.l	$38(a0),a4

loc_2167A:
		move.w	$18(a1),$1C(a1)
		bclr	#5,$2A(a1)
		move.l	#loc_21692,(a0)
		addq.b	#1,$22(a0)
		bsr.s	sub_216B0

loc_21692:


		jsr	MoveSprite2.w
		addi.w	#$70,$1A(a0)
		tst.b	4(a0)
		bpl.s	loc_216AA
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_216AA:
		jmp	Delete_Current_Sprite.w
; End of function sub_2165A


; =============== S U B R O U T I N E =======================================


sub_216B0:

		moveq	#$59,d0
		jsr	Play_Sound_2.w
		move.w	#prio(1),8(a0)

loc_216BE:
		moveq	#0,d0
		move.b	$22(a0),d0
		add.w	d0,d0
		movea.l	$C(a0),a3
		adda.w	(a3,d0.w),a3
		move.w	(a3)+,d1
		subq.w	#1,d1
		bset	#5,4(a0)
		move.l	(a0),d4
		move.b	4(a0),d5
		movea.l	a0,a1
		bra.s	loc_216EC
; ---------------------------------------------------------------------------

loc_216E2:
		jsr	Create_New_Sprite3.w
		bne.s	locret_2172C
		addq.w	#6,a3

loc_216EC:
		move.l	d4,(a1)
		move.l	a3,$C(a1)
		move.b	d5,4(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		move.w	$A(a0),$A(a1)
		ori.w	#$8000,$A(a1)
		move.b	8(a0),8(a1)
		move.b	7(a0),7(a1)
		move.b	6(a0),6(a1)
		move.w	(a4)+,$18(a1)
		move.w	(a4)+,$1A(a1)
		dbf	d1,loc_216E2

locret_2172C:
		rts
; End of function sub_216B0

; ---------------------------------------------------------------------------

loc_2172E:
		move.w	(Player_1+x_vel).w,$30(a0)
		move.w	(Player_2+$18).w,$32(a0)
		moveq	#0,d1
		move.b	7(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		swap	d6
		andi.b	#3,d6
		beq.w	loc_217E8
		move.b	d6,d0
		andi.b	#1,d0
		beq.s	loc_217BC
		lea	(Player_1).w,a1
		bclr	#6,$37(a1)
		beq.s	loc_217BC
		move.w	$30(a0),$18(a1)
		move.w	$18(a1),$1C(a1)
		bclr	#5,$2A(a1)
		bclr	#5,$2A(a0)
		bsr.s	sub_217EE
		andi.b	#2,d6
		beq.s	loc_217E8
		lea	(Player_2).w,a1
		bclr	#6,$37(a1)
		beq.s	loc_217E8
		move.w	$32(a0),$18(a1)
		move.w	$18(a1),$1C(a1)
		bclr	#5,$2A(a1)
		bclr	#6,$2A(a0)
		bra.s	loc_217E8
; ---------------------------------------------------------------------------

loc_217BC:

		andi.b	#2,d6
		beq.s	loc_217E8
		lea	(Player_2).w,a1
		bclr	#6,$37(a1)
		beq.s	loc_217E8
		move.w	$32(a0),$18(a1)
		move.w	$18(a1),$1C(a1)
		bclr	#5,$2A(a1)
		bclr	#6,$2A(a0)
		bsr.s	sub_217EE

loc_217E8:

		jmp	Sprite_OnScreen_Test.w

; =============== S U B R O U T I N E =======================================


sub_217EE:

		movea.l	$34(a0),a4
		move.w	$10(a0),d0
		cmp.w	$10(a1),d0
		blo.s	loc_21806
		subi.w	#8,$10(a1)
		movea.l	$38(a0),a4

loc_21806:
		move.l	#loc_21692,(a0)
		addq.b	#1,$22(a0)
		bsr.w	sub_216B0
		bra.w	loc_21692
; End of function sub_217EE

; ---------------------------------------------------------------------------

loc_21818:

		move.w	(Player_1+x_vel).w,$30(a0)
		move.w	(Player_2+$18).w,$32(a0)
		moveq	#0,d1
		move.b	7(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		tst.b	$2C(a0)
		bpl.s	loc_21854
		tst.b	(Level_trigger_array).w
		beq.s	loc_2185C
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_21854:
		swap	d6
		andi.w	#3,d6
		bne.s	loc_21862

loc_2185C:

		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_21862:
		lea	(Player_1).w,a1
		move.w	$30(a0),d1
		move.w	d6,d0
		andi.w	#1,d0
		beq.s	loc_218B0
		cmpi.b	#2,$38(a1)
		bne.s	loc_218B0
		bclr	#5,$2A(a0)
		bsr.s	sub_218CE
		btst	#6,$2A(a0)
		beq.s	loc_2185C
		lea	(Player_2).w,a1
		cmpi.b	#2,$38(a1)
		bne.s	loc_2185C
		move.w	$32(a0),$18(a1)
		move.w	$18(a1),$1C(a1)
		bclr	#6,$2A(a0)
		bclr	#5,$2A(a1)
		bra.s	loc_2185C
; ---------------------------------------------------------------------------

loc_218B0:

		lea	(Player_2).w,a1
		move.w	$32(a0),d1
		btst	#6,$2A(a0)
		beq.s	loc_2185C
		cmpi.b	#2,$38(a1)
		bne.s	loc_2185C
		bclr	#6,$2A(a0)

; =============== S U B R O U T I N E =======================================


sub_218CE:
		move.w	d1,$18(a1)
		addq.w	#4,$10(a1)
		movea.l	$34(a0),a4
		move.w	$10(a0),d0
		cmp.w	$10(a1),d0
		blo.s	loc_218EE
		subi.w	#8,$10(a1)
		movea.l	$38(a0),a4

loc_218EE:
		move.w	$18(a1),$1C(a1)
		bclr	#5,$2A(a1)
		cmpi.b	#2,$38(a1)
		bne.s	loc_21928
		cmpi.b	#1,$2F(a1)
		bne.s	loc_21928
		move.b	#2,$2F(a1)
		move.b	#$21,$20(a1)
		bclr	#0,$2A(a1)
		tst.w	$18(a1)
		bpl.s	loc_21928
		bset	#0,$2A(a1)

loc_21928:

		move.l	#loc_21692,(a0)
		addq.b	#1,$22(a0)
		bsr.w	sub_216B0
		bra.w	loc_21692
; End of function sub_218CE

; ---------------------------------------------------------------------------
word_2193A:	dc.w $400

		dc.w $FB00
		dc.w $600
		dc.w $FA00
		dc.w $600
		dc.w $FF00
		dc.w $800
		dc.w $FE00
		dc.w $680
		dc.w 0
		dc.w $880
		dc.w 0
		dc.w $600
		dc.w $100
		dc.w $800
		dc.w $200
		dc.w $400
		dc.w $500
		dc.w $600
		dc.w $600
		dc.w $300
		dc.w $600
		dc.w $500
		dc.w $700
word_2196A:	dc.w $FA00

		dc.w $FA00
		dc.w $FC00
		dc.w $FB00
		dc.w $F800
		dc.w $FE00
		dc.w $FA00
		dc.w $FF00
		dc.w $F780
		dc.w 0
		dc.w $F980
		dc.w 0
		dc.w $F800
		dc.w $200
		dc.w $FA00
		dc.w $100
		dc.w $FA00
		dc.w $600
		dc.w $FC00
		dc.w $500
		dc.w $FB00
		dc.w $700
		dc.w $FD00
		dc.w $600
word_2199A:	dc.w $400

		dc.w $FB00
		dc.w $600
		dc.w $FA00
		dc.w $600
		dc.w $FF00
		dc.w $800
		dc.w $FE00
		dc.w $600
		dc.w $100
		dc.w $800
		dc.w $200
		dc.w $400
		dc.w $500
		dc.w $600
		dc.w $600
word_219BA:	dc.w $FA00

		dc.w $FA00
		dc.w $FC00
		dc.w $FB00
		dc.w $F800
		dc.w $FE00
		dc.w $FA00
		dc.w $FF00
		dc.w $F800
		dc.w $200
		dc.w $FA00
		dc.w $100
		dc.w $FA00
		dc.w $600
		dc.w $FC00
		dc.w $500
word_219DA:	dc.w $400
		dc.w $FB00
		dc.w $500
		dc.w $FA80
		dc.w $600
		dc.w $FA00
		dc.w $700
		dc.w $F980
		dc.w $600
		dc.w $FF00
		dc.w $700
		dc.w $FE80
		dc.w $800
		dc.w $FE00
		dc.w $900
		dc.w $FD80
		dc.w $680
		dc.w 0
		dc.w $780
		dc.w 0
		dc.w $880
		dc.w 0
		dc.w $980
		dc.w 0
		dc.w $600
		dc.w $100
		dc.w $700
		dc.w $180
		dc.w $800
		dc.w $200
		dc.w $900
		dc.w $280
		dc.w $400
		dc.w $500
		dc.w $500
		dc.w $580
		dc.w $600
		dc.w $600
		dc.w $700
		dc.w $680
word_21A2A:	dc.w $F900
		dc.w $F980
		dc.w $FA00
		dc.w $FA00
		dc.w $FB00
		dc.w $FA80
		dc.w $FC00
		dc.w $FB00
		dc.w $F700
		dc.w $FD80
		dc.w $F800
		dc.w $FE00
		dc.w $F900
		dc.w $FE80
		dc.w $FA00
		dc.w $FF00
		dc.w $F680
		dc.w 0
		dc.w $F780
		dc.w 0
		dc.w $F880
		dc.w 0
		dc.w $F980
		dc.w 0
		dc.w $F700
		dc.w $280
		dc.w $F800
		dc.w $200
		dc.w $F900
		dc.w $180
		dc.w $FA00
		dc.w $100
		dc.w $F900
		dc.w $680
		dc.w $FA00
		dc.w $600
		dc.w $FB00
		dc.w $580
		dc.w $FC00
		dc.w $500
word_21A7A:	dc.w $400

		dc.w $FB00
		dc.w $600
		dc.w $FA00
		dc.w $600
		dc.w $FF00
		dc.w $800
		dc.w $FE00
		dc.w $600
		dc.w $100
		dc.w $800
		dc.w $200
		dc.w $400
		dc.w $500
		dc.w $600
		dc.w $600
word_21A9A:	dc.w $FA00

		dc.w $FA00
		dc.w $FC00
		dc.w $FB00
		dc.w $F800
		dc.w $FE00
		dc.w $FA00
		dc.w $FF00
		dc.w $F800
		dc.w $200
		dc.w $FA00
		dc.w $100
		dc.w $FA00
		dc.w $600
		dc.w $FC00
		dc.w $500
Map_CNZSOZBreakableWall:include "Levels/CNZ/Misc Object Data/Map - (&SOZ) Breakable Wall.asm"

Map_MHZBreakableWall:include "Levels/MHZ/Misc Object Data/Map - Breakable Wall.asm"

Map_LRZBreakableWall:include "Levels/LRZ/Misc Object Data/Map - Breakable Wall.asm"

; ---------------------------------------------------------------------------

Obj_AIZRideVine:

		movea.l	a0,a1
		move.l	#loc_21D28,(a1)
		bsr.w	sub_21D00
		move.b	#$21,$22(a1)
		move.w	$10(a0),d2
		move.w	$14(a0),d3
		moveq	#0,d1
		move.b	$2C(a0),d1
		andi.w	#$7F,d1
		lsl.w	#4,d1
		add.w	d2,d1
		move.w	d1,$46(a0)
		moveq	#3,d1
		addq.w	#1,d1
		jsr	Create_New_Sprite3.w
		bne.w	loc_21CFE
		move.w	a1,$3E(a0)
		move.l	#loc_21F80,(a1)
		move.w	a0,$3C(a1)
		bra.s	loc_21CD0
; ---------------------------------------------------------------------------

loc_21CB8:
		jsr	Create_New_Sprite3.w
		bne.w	loc_21CFE
		move.l	#loc_22014,(a1)
		move.w	a2,$3C(a1)
		move.w	a1,$3E(a2)

loc_21CD0:
		movea.l	a1,a2
		bsr.s	sub_21D00
		move.w	d2,$10(a1)
		move.w	d3,$14(a1)
		addi.w	#$10,d3
		addq.w	#1,$36(a0)
		move.w	$36(a0),$36(a1)
		dbf	d1,loc_21CB8
		move.l	#Obj_AIZRideVineHandle,(a1)
		move.b	#$20,$22(a1)
		move.w	a1,$40(a0)

loc_21CFE:

		bra.s	loc_21D28

; =============== S U B R O U T I N E =======================================


sub_21D00:

		move.b	#4,4(a1)
		move.b	#8,7(a1)
		move.b	#8,6(a1)
		move.w	#prio(4),8(a1)
		move.l	#Map_AIZMHZRideVine,$C(a1)
		move.w	#$41B,$A(a1)
		rts
; End of function sub_21D00

; ---------------------------------------------------------------------------

loc_21D28:

		movea.w	$40(a0),a1
		tst.w	$32(a1)
		beq.s	loc_21D48
		move.l	#loc_21D4C,(a0)
		movea.w	$3E(a0),a1
		move.w	#1,$2E(a1)
		move.w	#0,$38(a1)

loc_21D48:
		bra.w	loc_21F38
; ---------------------------------------------------------------------------

loc_21D4C:
		addi.l	#$80000,$10(a0)
		addi.l	#$20000,$14(a0)
		move.w	$10(a0),d0
		cmp.w	$46(a0),d0
		blo.w	loc_21DEE
		tst.b	$2C(a0)
		bpl.s	loc_21DC2
		move.l	#loc_21DF2,(a0)
		move.w	#$800,$18(a0)
		move.w	#$200,$1A(a0)
		move.l	#Map_AnimatedStillSprites,$C(a0)
		move.w	#$62E9,$A(a0)
		move.b	#8,7(a0)
		move.b	#$C,6(a0)
		move.b	#0,$22(a0)
		move.w	#1,$20(a0)
		movea.w	$40(a0),a1
		lea	$32(a1),a2
		tst.b	(a2)
		beq.s	loc_21DB6
		move.b	#$81,(a2)

loc_21DB6:
		addq.w	#1,a2
		tst.b	(a2)
		beq.s	loc_21DC0
		move.b	#$81,(a2)

loc_21DC0:
		bra.s	loc_21DEE
; ---------------------------------------------------------------------------

loc_21DC2:
		move.l	#loc_21E14,(a0)
		movea.w	$3E(a0),a1
		move.l	#loc_21FE8,(a1)
		move.w	#0,$3A(a1)
		movea.w	$40(a0),a1
		move.w	#1,$30(a1)
		move.w	#0,$26(a0)
		move.w	#$400,$3A(a0)

loc_21DEE:

		bra.w	loc_21F38
; ---------------------------------------------------------------------------

loc_21DF2:
		jsr	MoveSprite.w
		tst.b	4(a0)
		bmi.s	loc_21E04
		move.w	#$7FF0,$10(a0)

loc_21E04:
		lea	(Ani_AnimatedStillSprites).l,a1
		jsr	Animate_Sprite.w
		bra.w	loc_21F38
; ---------------------------------------------------------------------------

loc_21E14:
		movea.w	$40(a0),a1
		move.w	$3A(a0),d0
		move.b	$26(a0),d1
		ext.w	d1
		bpl.s	loc_21E26
		neg.w	d1

loc_21E26:
		add.w	d1,d1
		sub.w	d1,d0
		sub.w	d0,$26(a0)
		tst.w	$32(a1)
		bne.s	loc_21E68
		move.b	$26(a0),d0
		addq.b	#8,d0
		cmpi.b	#$10,d0
		bhs.s	loc_21E68
		move.l	#loc_21E6C,(a0)
		move.w	#0,$42(a0)
		move.w	#$FD00,$44(a0)
		move.w	#$1000,$38(a0)
		move.w	#0,$2E(a0)
		movea.w	$40(a0),a1
		move.w	#2,$30(a1)

loc_21E68:

		bra.w	loc_21F38
; ---------------------------------------------------------------------------

loc_21E6C:
		moveq	#0,d2
		move.b	$38(a0),d2
		move.w	$44(a0),d0
		move.w	#0,d1
		tst.w	$2E(a0)
		bne.s	loc_21EC4
		add.w	d2,d0
		move.w	d0,$44(a0)
		add.w	d0,$42(a0)
		cmp.b	$42(a0),d1
		bgt.s	loc_21EEE
		asr.w	#4,d0
		sub.w	d0,$44(a0)
		move.w	#1,$2E(a0)
		cmpi.w	#$C00,$38(a0)
		beq.s	loc_21EAC
		subi.w	#$40,$38(a0)
		bra.s	loc_21EEE
; ---------------------------------------------------------------------------

loc_21EAC:

		move.l	#loc_21F0A,(a0)
		move.w	#0,$38(a0)
		movea.w	$40(a0),a1
		move.w	#0,$30(a1)
		bra.s	loc_21EEE
; ---------------------------------------------------------------------------

loc_21EC4:
		sub.w	d2,d0
		move.w	d0,$44(a0)
		add.w	d0,$42(a0)
		cmp.b	$42(a0),d1
		ble.s	loc_21EEE
		asr.w	#4,d0
		sub.w	d0,$44(a0)
		move.w	#0,$2E(a0)
		cmpi.w	#$C00,$38(a0)
		beq.s	loc_21EAC
		subi.w	#$40,$38(a0)

loc_21EEE:

		move.w	$42(a0),d0
		move.w	d0,$26(a0)
		asr.w	#3,d0
		move.w	d0,$3A(a0)
		movea.w	$3E(a0),a1
		move.w	$3A(a0),$3A(a1)
		bra.w	loc_21F38
; ---------------------------------------------------------------------------

loc_21F0A:
		move.b	$38(a0),d0
		addi.w	#$200,$38(a0)
		jsr	GetSineCosine.w
		asl.w	#2,d0
		cmpi.w	#$400,d0
		bne.s	loc_21F26
		move.w	#$3FF,d0

loc_21F26:
		move.w	d0,$26(a0)
		move.w	d0,$3A(a0)
		movea.w	$3E(a0),a1
		move.w	$3A(a0),$3A(a1)

loc_21F38:

		move.w	$10(a0),d0
		andi.w	#$FF80,d0
		sub.w	(Camera_X_pos_coarse_back).w,d0
		cmpi.w	#$280,d0
		bhi.w	loc_21F52
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_21F52:
		move.w	$36(a0),d2
		subq.w	#1,d2
		bcs.s	loc_21F6E
		movea.w	$3E(a0),a2

loc_21F5E:
		movea.l	a2,a1
		movea.w	$3E(a1),a2
		jsr	Delete_Referenced_Sprite.w
		dbf	d2,loc_21F5E

loc_21F6E:
		move.w	respawn_addr(a0),d0
		beq.s	loc_21F7A
		movea.w	d0,a2
		bclr	#7,(a2)

loc_21F7A:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_21F80:
		tst.w	$2E(a0)
		bne.s	loc_21FA8
		move.b	$38(a0),d0
		addi.w	#$200,$38(a0)
		jsr	GetSineCosine.w
		asl.w	#2,d0
		cmpi.w	#$400,d0
		bne.s	loc_21FA2
		move.w	#$3FF,d0

loc_21FA2:
		move.w	d0,$3A(a0)
		bra.s	loc_21FBE
; ---------------------------------------------------------------------------

loc_21FA8:
		move.b	$38(a0),d0
		addi.w	#$100,$38(a0)
		jsr	GetSineCosine.w
		asl.w	#3,d0
		move.w	d0,$3A(a0)

loc_21FBE:
		move.w	$3A(a0),d0
		move.w	d0,$26(a0)
		move.b	$26(a0),d0
		addq.b	#4,d0
		lsr.b	#3,d0
		move.b	d0,$22(a0)
		movea.w	$3C(a0),a1
		move.w	$10(a1),$10(a0)
		move.w	$14(a1),$14(a0)
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_21FE8:
		movea.w	$3C(a0),a1
		move.w	$26(a1),$26(a0)
		move.b	$26(a0),d0
		addq.b	#4,d0
		lsr.b	#3,d0
		move.b	d0,$22(a0)
		movea.w	$3C(a0),a1
		move.w	$10(a1),$10(a0)
		move.w	$14(a1),$14(a0)
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_22014:
		movea.w	$3C(a0),a1
		move.w	$3A(a1),$3A(a0)
		move.w	$26(a1),d0
		add.w	$3A(a0),d0
		move.w	d0,$26(a0)
		move.b	$26(a0),d0
		addq.b	#4,d0
		lsr.b	#3,d0
		move.b	d0,$22(a0)
		bsr.w	sub_22040
		jmp	Draw_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_22040:

		movea.w	$3C(a0),a1
		move.b	$26(a1),d0
		addq.b	#4,d0
		andi.b	#-8,d0
		jsr	GetSineCosine.w
		neg.w	d0
		addi.w	#8,d0
		addi.w	#8,d1
		asr.w	#4,d0
		asr.w	#4,d1

		add.w	$10(a1),d0
		move.w	d0,$10(a0)
		add.w	$14(a1),d1
		move.w	d1,$14(a0)
		rts
; End of function sub_22040

; ---------------------------------------------------------------------------

Obj_AIZRideVineHandle:
		move.w	$10(a0),d4
		move.w	$14(a0),d5
		bsr.w	sub_22040
		cmp.w	$10(a0),d4
		beq.s	loc_2208A
		move.w	d4,$42(a0)

loc_2208A:
		cmp.w	$14(a0),d5
		beq.s	loc_22094
		move.w	d5,$44(a0)

loc_22094:
		lea	$32(a0),a2
		lea	(Player_1).w,a1
		move.w	(Ctrl_1_logical).w,d0
		bsr.s	sub_220C2
		lea	(Player_2).w,a1
		addq.w	#1,a2
		move.w	(Ctrl_2_logical).w,d0
		bsr.s	sub_220C2
		tst.w	$32(a0)
		beq.s	loc_220BA
		tst.w	$30(a0)
		bne.s	locret_220C0

loc_220BA:
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

locret_220C0:
		rts

; =============== S U B R O U T I N E =======================================


sub_220C2:
		tst.b	(a2)
		beq.w	loc_222F4
		bmi.w	loc_2217E
		tst.b	4(a1)
		bpl.w	loc_22190
		cmpi.b	#4,5(a1)
		bhs.w	loc_22190
		move.b	d0,d1
		andi.b	#$70,d1
		beq.w	loc_221EC
		clr.b	$2E(a1)
		clr.b	(a2)
		cmpi.w	#1,$30(a0)
		beq.s	loc_2215C
		move.w	$10(a0),d1
		sub.w	$42(a0),d1
		asl.w	#7,d1
		move.w	d1,$18(a1)
		move.w	$14(a0),d1
		sub.w	$44(a0),d1
		asl.w	#7,d1
		move.w	d1,$1A(a1)
		move.b	#$3C,2(a2)
		btst	#$A,d0
		beq.s	loc_22124
		move.w	#-$200,$18(a1)

loc_22124:
		btst	#$B,d0
		beq.s	loc_22130
		move.w	#$200,$18(a1)

loc_22130:
		addi.w	#-$380,$1A(a1)

loc_22136:
		bset	#1,$2A(a1)
		move.b	#1,$40(a1)
		move.b	#$E,$1E(a1)
		move.b	#7,$1F(a1)
		move.b	#2,$20(a1)
		bset	#2,$2A(a1)
		rts
; ---------------------------------------------------------------------------

loc_2215C:
		move.b	#$3C,2(a2)
		movea.w	$3C(a0),a3
		move.b	$26(a3),d0
		jsr	GetSineCosine.w
		asl.w	#3,d1
		move.w	d1,$18(a1)
		asl.w	#3,d0
		move.w	d0,$1A(a1)
		bra.s	loc_22136
; ---------------------------------------------------------------------------

loc_2217E:
		move.w	#$300,$18(a1)
		move.w	#$200,$1A(a1)
		bset	#1,$2A(a1)

loc_22190:

		clr.b	$2E(a1)
		clr.b	(a2)
		move.b	#$3C,2(a2)

sub_2219E:
locret_221E0:
		rts
; ---------------------------------------------------------------------------

loc_221EC:
		tst.w	$30(a0)
		bne.s	loc_22258
		bsr.s	sub_2219E
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		addi.w	#$14,$14(a1)
		movea.w	$3C(a0),a3
		moveq	#0,d0
		move.b	$26(a3),d0
		btst	#0,$2A(a1)
		beq.s	loc_2221A
		neg.b	d0

loc_2221A:
		addq.b	#8,d0
		lsr.w	#4,d0
		move.b	byte_22248(pc,d0.w),$22(a1)

loc_22224:
		move.b	$2A(a1),d1
		andi.b	#1,d1
		andi.b	#-4,4(a1)
		or.b	d1,4(a1)
		moveq	#0,d0
		move.b	$22(a1),d0
		move.l	a2,-(sp)
		jsr	(Tails_Carry_LoadPLC).l
		movea.l	(sp)+,a2
		rts
; ---------------------------------------------------------------------------
byte_22248:	dc.b $91
		dc.b $91
		dc.b $90
		dc.b $90
		dc.b $90
		dc.b $90
		dc.b $90
		dc.b $90
		dc.b $92
		dc.b $92
		dc.b $92
		dc.b $92
		dc.b $92
		dc.b $92
		dc.b $91
		dc.b $91
; ---------------------------------------------------------------------------

loc_22258:
		movea.w	$3C(a0),a3
		moveq	#0,d0
		move.b	$26(a3),d0
		btst	#0,$2A(a1)
		beq.s	loc_2226C
		neg.b	d0

loc_2226C:
		addi.b	#$10,d0
		lsr.w	#5,d0
		add.w	d0,d0
		move.b	byte_222D4(pc,d0.w),$22(a1)
		move.b	#0,$20(a1)
		andi.w	#-2,d0
		move.b	byte_222E4(pc,d0.w),d2
		move.b	byte_222E5(pc,d0.w),d3
		ext.w	d2
		ext.w	d3
		btst	#0,$2A(a1)
		beq.s	loc_2229A
		neg.w	d2

loc_2229A:
		movea.w	$3C(a0),a3
		move.b	$26(a3),d0
		addq.b	#4,d0
		andi.b	#-8,d0
		jsr	GetSineCosine.w
		neg.w	d0
		addi.w	#8,d0
		addi.w	#8,d1
		asr.w	#4,d0
		asr.w	#4,d1
		add.w	$10(a3),d0
		add.w	d2,d0
		move.w	d0,$10(a1)
		add.w	$14(a3),d1
		add.w	d3,d1
		move.w	d1,$14(a1)
		bra.w	loc_22224
; ---------------------------------------------------------------------------
byte_222D4:	dc.b $78
		dc.b $78
		dc.b $7F
		dc.b $7F
		dc.b $7E
		dc.b $7E
		dc.b $7D
		dc.b $7D
		dc.b $7C
		dc.b $7C
		dc.b $7B
		dc.b $7B
		dc.b $7A
		dc.b $7A
		dc.b $79
		dc.b $79
byte_222E4:	dc.b 0
byte_222E5:	dc.b $18
		dc.b $EE
		dc.b $13
		dc.b $E8
		dc.b 0
		dc.b $EE
		dc.b $ED
		dc.b 0
		dc.b $E8
		dc.b $12
		dc.b $ED
		dc.b $18
		dc.b 0
		dc.b $12
		dc.b $13
; ---------------------------------------------------------------------------

loc_222F4:
		tst.b	2(a2)
		beq.s	loc_22302
		subq.b	#1,2(a2)
		bne.w	locret_2237C

loc_22302:
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		addi.w	#$10,d0
		cmpi.w	#$20,d0
		bhs.w	locret_2237C
		move.w	$14(a1),d1
		sub.w	$14(a0),d1
		cmpi.w	#$18,d1
		bhs.w	locret_2237C
		tst.b	$2E(a1)
		bne.s	locret_2237C
		cmpi.b	#4,5(a1)
		bhs.s	locret_2237C
		tst.b	(Debug_On).w
		bne.s	locret_2237C
		clr.w	$18(a1)
		clr.w	$1A(a1)
		clr.w	$1C(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		addi.w	#$14,$14(a1)
		move.b	#$14,$20(a1)
		move.b	#0,$3D(a1)
		move.b	#3,$2E(a1)
		andi.b	#-3,4(a1)
		move.b	#1,(a2)
		moveq	#$4A,d0
		jmp	Play_Sound_2.w

locret_2237C:

		rts
; ---------------------------------------------------------------------------

Obj_AIZGiantRideVine:
		movea.l	a0,a1
		move.l	#loc_22442,(a1)
		bsr.w	sub_2241A
		move.b	#$21,$22(a1)
		move.w	$10(a0),d2
		move.w	$14(a0),d3
		move.b	$2C(a0),d1
		andi.w	#$F,d1
		jsr	Create_New_Sprite3.w
		bne.w	loc_22418
		move.w	#-$1B0,$44(a1)
		move.w	#$800,$38(a1)
		move.w	a1,$3E(a0)
		move.l	#loc_2248A,(a1)
		move.w	a0,$3C(a1)
		move.b	$2C(a0),d0
		andi.b	#-$10,d0
		move.b	d0,$42(a1)
		bra.s	loc_223EA
; ---------------------------------------------------------------------------

loc_223D2:
		jsr	Create_New_Sprite3.w
		bne.w	loc_22418
		move.l	#loc_2251E,(a1)
		move.w	a2,$3C(a1)
		move.w	a1,$3E(a2)

loc_223EA:
		movea.l	a1,a2
		bsr.s	sub_2241A
		move.w	d2,$10(a1)
		move.w	d3,$14(a1)
		addi.w	#$10,d3
		addq.w	#1,$36(a0)
		move.w	$36(a0),$36(a1)
		dbf	d1,loc_223D2
		move.l	#loc_2257E,(a1)
		move.b	#$20,$22(a1)
		move.w	a1,$40(a0)

loc_22418:

		bra.s	loc_22442

; =============== S U B R O U T I N E =======================================


sub_2241A:

		move.b	#4,4(a1)
		move.b	#8,7(a1)
		move.b	#8,6(a1)
		move.w	#prio(4),8(a1)
		move.l	#Map_AIZMHZRideVine,$C(a1)
		move.w	#$41B,$A(a1)
		rts
; End of function sub_2241A

; ---------------------------------------------------------------------------

loc_22442:

		move.w	$10(a0),d0
		andi.w	#$FF80,d0
		sub.w	(Camera_X_pos_coarse_back).w,d0
		cmpi.w	#$280,d0
		bhi.w	loc_2245C
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_2245C:
		move.w	$36(a0),d2
		subq.w	#1,d2
		bcs.s	loc_22478
		movea.w	$3E(a0),a2

loc_22468:
		movea.l	a2,a1
		movea.w	$3E(a1),a2
		jsr	Delete_Referenced_Sprite.w
		dbf	d2,loc_22468

loc_22478:
		move.w	respawn_addr(a0),d0
		beq.s	loc_22484
		movea.w	d0,a2
		bclr	#7,(a2)

loc_22484:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_2248A:
		tst.b	(a0)
		bne.s	loc_224BC
		move.b	(__u_FEBA).w,d0
		add.b	$42(a0),d0
		jsr	GetSineCosine.w
		muls.w	#$2C,d0
		move.w	d0,$26(a0)
		asr.w	#3,d0
		move.w	d0,$3A(a0)
		move.b	$26(a0),d0
		addq.b	#4,d0
		lsr.b	#3,d0
		move.b	d0,$22(a0)
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_224BC:
		moveq	#0,d2
		move.b	$38(a0),d2
		move.w	$44(a0),d0
		move.w	#0,d1
		tst.w	$2E(a0)
		bne.s	loc_224E8
		add.w	d2,d0
		move.w	d0,$44(a0)
		add.w	d0,$42(a0)
		cmp.b	$42(a0),d1
		bgt.s	loc_224FE
		move.w	#1,$2E(a0)
		bra.s	loc_224FE
; ---------------------------------------------------------------------------

loc_224E8:
		sub.w	d2,d0
		move.w	d0,$44(a0)
		add.w	d0,$42(a0)
		cmp.b	$42(a0),d1
		ble.s	loc_224FE
		move.w	#0,$2E(a0)

loc_224FE:

		move.w	$42(a0),d0
		move.w	d0,$26(a0)
		asr.w	#3,d0
		move.w	d0,$3A(a0)
		move.b	$26(a0),d0
		addq.b	#4,d0
		lsr.b	#3,d0
		move.b	d0,$22(a0)
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_2251E:
		movea.w	$3C(a0),a1
		move.w	$3A(a1),$3A(a0)
		move.w	$26(a1),d0
		add.w	$3A(a0),d0
		move.w	d0,$26(a0)
		move.b	$26(a0),d0
		addq.b	#4,d0
		lsr.b	#3,d0
		move.b	d0,$22(a0)
		bsr.w	sub_2254A
		jmp	Draw_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_2254A:

		movea.w	$3C(a0),a1
		move.b	$26(a1),d0
		addq.b	#4,d0
		andi.b	#-8,d0
		jsr	GetSineCosine.w
		neg.w	d0
		addi.w	#8,d0
		addi.w	#8,d1
		asr.w	#4,d0
		asr.w	#4,d1
		add.w	$10(a1),d0
		move.w	d0,$10(a0)
		add.w	$14(a1),d1
		move.w	d1,$14(a0)
		rts
; End of function sub_2254A

; ---------------------------------------------------------------------------

loc_2257E:
		move.w	$10(a0),d4
		move.w	$14(a0),d5
		bsr.w	sub_2254A
		cmp.w	$10(a0),d4
		beq.s	loc_22594
		move.w	d4,$42(a0)

loc_22594:
		cmp.w	$14(a0),d5
		beq.s	loc_2259E
		move.w	d5,$44(a0)

loc_2259E:
		lea	$32(a0),a2
		lea	(Player_1).w,a1
		move.w	(Ctrl_1_logical).w,d0
		bsr.w	sub_220C2
		lea	(Player_2).w,a1
		addq.w	#1,a2
		move.w	(Ctrl_2_logical).w,d0
		bsr.w	sub_220C2
		tst.w	$32(a0)
		beq.s	loc_225C8
		tst.w	$30(a0)
		bne.s	locret_225CE

loc_225C8:
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

locret_225CE:
		rts
; ---------------------------------------------------------------------------

Obj_MHZSwingVine:

		movea.l	a0,a1
		move.l	#loc_2267E,(a1)
		bsr.w	sub_22656
		move.b	#$23,$22(a1)
		move.w	$10(a0),d2
		move.w	$14(a0),d3
		moveq	#0,d1
		addq.w	#1,d1
		jsr	Create_New_Sprite3.w
		bne.w	loc_22654
		move.w	a1,$3E(a0)
		move.l	#loc_2286C,(a1)
		move.w	a0,$3C(a1)
		bra.s	loc_2261A
; ---------------------------------------------------------------------------

loc_22608:
		jsr	Create_New_Sprite3.w

loc_2260E:
		bne.w	loc_22654
		move.w	a2,$3C(a1)
		move.w	a1,$3E(a2)

loc_2261A:
		movea.l	a1,a2
		bsr.s	sub_22656
		move.w	d2,$10(a1)
		move.w	d3,$14(a1)
		addi.w	#$10,d3
		addq.w	#1,$36(a0)
		move.w	$36(a0),$36(a1)
		dbf	d1,loc_22608
		move.l	#loc_228CC,(a1)
		move.b	#$22,$22(a1)
		move.w	$10(a1),$42(a1)
		move.w	$14(a1),$44(a1)
		move.w	a1,$40(a0)

loc_22654:

		bra.s	loc_2267E

; =============== S U B R O U T I N E =======================================


sub_22656:

		move.b	#4,4(a1)
		move.b	#8,7(a1)
		move.b	#8,6(a1)
		move.w	#prio(4),8(a1)
		move.l	#Map_AIZMHZRideVine,$C(a1)
		move.w	#$455,$A(a1)
		rts
; End of function sub_22656

; ---------------------------------------------------------------------------

loc_2267E:

		movea.w	$40(a0),a1
		tst.w	$32(a1)
		beq.s	loc_226AC
		bmi.s	loc_22690
		tst.b	$33(a1)
		bpl.s	loc_226AC

loc_22690:
		move.l	#loc_226B0,(a0)
		movea.w	$40(a0),a1
		move.w	#1,$30(a1)
		move.w	#0,$26(a0)
		move.w	#$800,$3A(a0)

loc_226AC:

		bra.w	loc_22824
; ---------------------------------------------------------------------------

loc_226B0:

		movea.w	$40(a0),a1
		move.w	$3A(a0),d0
		move.b	$26(a0),d1
		ext.w	d1
		bpl.s	loc_226C2
		neg.w	d1

loc_226C2:
		add.w	d1,d1
		sub.w	d1,d0
		sub.w	d0,$26(a0)
		move.b	$26(a0),d0
		andi.b	#-8,d0
		cmpi.b	#$40,d0
		bne.s	loc_226E0
		moveq	#$7E,d0
		jsr	Play_Sound_2.w

loc_226E0:
		move.w	#prio(4),8(a0)
		tst.w	$26(a0)
		bpl.s	loc_226F2
		move.w	#prio(5),8(a0)

loc_226F2:
		lea	$32(a1),a2			; NAT: get Sonic to a2
		cmp.b	#2,BoxWinner.w			; check if tails is winrar
		bne.s	.sonic				; if not, branch
		addq.w	#1,a2				; go to tails byte

.sonic		tst.b	(a2)				; check if this player is on the thing
		beq.s	loc_2270A			; if not, just skip
		moveq	#$20,d4				; set camera x-offsetr
		move.b	$32(a1),d5			; get player 1 check byte
		move.b	$33(a1),d6			; get player 2 check byte
		jsr	Camera_FixToObj			; control camera now

loc_2270A:
		tst.w	$32(a1)
		bne.s	loc_22744
		move.b	$26(a0),d0
		addq.b	#8,d0
		cmpi.b	#$10,d0
		bhs.s	loc_22744

loc_2271C:
		move.l	#loc_22748,(a0)
		move.w	#0,$42(a0)
		move.w	#-$300,$44(a0)
		move.w	#$1000,$38(a0)
		move.w	#0,$2E(a0)
		movea.w	$40(a0),a1
		move.w	#2,$30(a1)

loc_22744:

		bra.w	loc_22824
; ---------------------------------------------------------------------------

loc_22748:
		moveq	#0,d2
		move.b	$38(a0),d2
		move.w	$44(a0),d0
		move.w	#0,d1
		tst.w	$2E(a0)
		bne.s	loc_227AC
		add.w	d2,d0
		move.w	d0,$44(a0)
		add.w	d0,$42(a0)
		cmp.b	$42(a0),d1
		bgt.s	loc_227D6
		asr.w	#4,d0
		sub.w	d0,$44(a0)
		move.w	#1,$2E(a0)
		cmpi.w	#$C00,$38(a0)
		beq.s	loc_22788
		subi.w	#$40,$38(a0)
		bra.s	loc_227D6
; ---------------------------------------------------------------------------

loc_22788:

		move.l	#loc_2267E,(a0)
		move.w	#0,$38(a0)
		movea.w	$40(a0),a1
		move.w	#0,$30(a1)
		move.w	$10(a1),$42(a1)
		move.w	$14(a1),$44(a1)
		bra.s	loc_227D6
; ---------------------------------------------------------------------------

loc_227AC:
		sub.w	d2,d0
		move.w	d0,$44(a0)
		add.w	d0,$42(a0)
		cmp.b	$42(a0),d1
		ble.s	loc_227D6
		asr.w	#4,d0
		sub.w	d0,$44(a0)
		move.w	#0,$2E(a0)
		cmpi.w	#$C00,$38(a0)
		beq.s	loc_22788
		subi.w	#$40,$38(a0)

loc_227D6:

		move.w	$42(a0),d0
		move.w	d0,$26(a0)
		move.w	#prio(4),8(a0)
		tst.w	$26(a0)
		bpl.s	loc_227F0
		move.w	#prio(5),8(a0)

loc_227F0:
		asr.w	#3,d0
		move.w	d0,$3A(a0)
		movea.w	$3E(a0),a1
		move.w	$3A(a0),$3A(a1)
		movea.w	$40(a0),a1
		tst.w	$32(a1)
		beq.s	loc_22824
		bmi.s	loc_22812
		tst.b	$33(a1)
		bpl.s	loc_22824

loc_22812:
		move.l	#loc_226B0,(a0)
		move.w	#1,$30(a1)
		move.w	#$800,$3A(a0)

loc_22824:

		move.w	$10(a0),d0
		andi.w	#-$80,d0
		sub.w	(Camera_X_pos_coarse_back).w,d0
		cmpi.w	#$280,d0
		bhi.w	loc_2283E
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_2283E:
		move.w	$36(a0),d2
		subq.w	#1,d2
		bcs.s	loc_2285A
		movea.w	$3E(a0),a2

loc_2284A:
		movea.l	a2,a1
		movea.w	$3E(a1),a2
		jsr	Delete_Referenced_Sprite.w
		dbf	d2,loc_2284A

loc_2285A:
		move.w	respawn_addr(a0),d0
		beq.s	loc_22866
		movea.w	d0,a2
		bclr	#7,(a2)

loc_22866:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_2286C:
		movea.w	$3C(a0),a1
		move.w	$26(a1),$26(a0)
		move.b	$26(a0),d0
		addq.b	#4,d0
		lsr.b	#3,d0
		move.b	d0,$22(a0)
		movea.w	$3C(a0),a1
		move.w	$10(a1),$10(a0)
		move.w	$14(a1),$14(a0)
		jmp	Draw_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_22898:
		movea.w	$3C(a0),a1
		move.b	$26(a1),d0
		addq.b	#4,d0
		andi.b	#-8,d0
		jsr	GetSineCosine.w
		neg.w	d0
		addi.w	#8,d0
		addi.w	#8,d1
		asr.w	#4,d0
		asr.w	#4,d1

loc_228BA:
		add.w	$10(a1),d0
		move.w	d0,$10(a0)
		add.w	$14(a1),d1
		move.w	d1,$14(a0)
		rts
; End of function sub_22898

; ---------------------------------------------------------------------------

loc_228CC:
		move.w	$10(a0),d4
		move.w	$14(a0),d5

loc_228D4:
		bsr.w	sub_22898
		cmp.w	$10(a0),d4
		beq.s	loc_228E2
		move.w	d4,$42(a0)

loc_228E2:
		cmp.w	$14(a0),d5
		beq.s	loc_228EC
		move.w	d5,$44(a0)

loc_228EC:
		lea	$32(a0),a2
		lea	(Player_1).w,a1
		move.w	(Ctrl_1_logical).w,d0
		bsr.s	loc_2291A
		lea	(Player_2).w,a1
		addq.w	#1,a2
		move.w	(Ctrl_2_logical).w,d0
		bsr.s	loc_2291A
		tst.w	$32(a0)
		beq.s	loc_22912
		tst.w	$30(a0)
		bne.s	locret_22918

loc_22912:
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

locret_22918:
		rts
; ---------------------------------------------------------------------------

loc_2291A:

		tst.b	(a2)
		beq.w	loc_22AF8
	;	tst.b	4(a1)		; NAT: Disable chck
	;	bpl.w	loc_229E4
		cmpi.b	#4,5(a1)
		bhs.w	loc_229E4
		tst.b	(Debug_On).w
		bne.w	loc_229E4
		andi.b	#$70,d0
		beq.w	loc_229F2
		clr.b	$2E(a1)
		clr.b	(a2)
		cmpi.w	#1,$30(a0)
		beq.s	loc_229B6
		move.w	$10(a0),d1
		sub.w	$42(a0),d1
		asl.w	#7,d1
		move.w	d1,$18(a1)
		move.w	$14(a0),d1
		sub.w	$44(a0),d1
		asl.w	#7,d1
		move.w	d1,$1A(a1)
		move.b	#$3C,2(a2)
		btst	#$A,d0
		beq.s	loc_2297E
		move.w	#-$200,$18(a1)

loc_2297E:
		btst	#$B,d0
		beq.s	loc_2298A
		move.w	#$200,$18(a1)

loc_2298A:
		addi.w	#-$380,$1A(a1)

loc_22990:
		bset	#1,$2A(a1)
		move.b	#1,$40(a1)
		move.b	#$E,$1E(a1)
		move.b	#7,$1F(a1)
		move.b	#2,$20(a1)
		bset	#2,$2A(a1)
		rts
; ---------------------------------------------------------------------------

loc_229B6:
		move.b	#$3C,2(a2)
		movea.w	$3C(a0),a3
		move.b	$26(a3),d0
		jsr	GetSineCosine.w
		asl.w	#2,d1
		move.w	d1,d2
		asl.w	#1,d1
		add.w	d2,d1
		move.w	d1,$18(a1)
		asl.w	#2,d0
		move.w	d0,d2
		asl.w	#1,d0
		add.w	d2,d0
		move.w	d0,$1A(a1)
		bra.s	loc_22990
; ---------------------------------------------------------------------------

loc_229E4:

		clr.b	$2E(a1)
		clr.b	(a2)
		move.b	#$3C,2(a2)
		rts
; ---------------------------------------------------------------------------

loc_229F2:
		tst.w	$30(a0)
		bne.s	loc_22A5C
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		addi.w	#$14,$14(a1)
		movea.w	$3C(a0),a3
		moveq	#0,d0
		move.b	$26(a3),d0
		btst	#0,$2A(a1)
		beq.s	loc_22A1E
		neg.b	d0

loc_22A1E:
		addq.b	#8,d0
		lsr.w	#4,d0
		move.b	byte_22A4C(pc,d0.w),$22(a1)

loc_22A28:
		move.b	$2A(a1),d1
		andi.b	#1,d1
		andi.b	#-4,4(a1)
		or.b	d1,4(a1)
		moveq	#0,d0
		move.b	$22(a1),d0
		move.l	a2,-(sp)
		jsr	(Tails_Carry_LoadPLC).l
		movea.l	(sp)+,a2
		rts
; ---------------------------------------------------------------------------
byte_22A4C:	dc.b $91
		dc.b $91
		dc.b $90
		dc.b $90
		dc.b $90
		dc.b $90
		dc.b $90
		dc.b $90
		dc.b $92
		dc.b $92
		dc.b $92
		dc.b $92
		dc.b $92
		dc.b $92
		dc.b $91
		dc.b $91
; ---------------------------------------------------------------------------

loc_22A5C:
		movea.w	$3C(a0),a3
		moveq	#0,d0
		move.b	$26(a3),d0
		btst	#0,$2A(a1)
		beq.s	loc_22A70
		neg.b	d0

loc_22A70:
		addi.b	#$10,d0
		lsr.w	#5,d0
		add.w	d0,d0
		move.b	byte_22AD8(pc,d0.w),$22(a1)
		move.b	#0,$20(a1)
		andi.w	#-2,d0
		move.b	byte_22AD8+$10(pc,d0.w),d2
		move.b	byte_22AE9(pc,d0.w),d3
		ext.w	d2
		ext.w	d3
		btst	#0,$2A(a1)
		beq.s	loc_22A9E
		neg.w	d2

loc_22A9E:
		movea.w	$3C(a0),a3
		move.b	$26(a3),d0
		addq.b	#4,d0
		andi.b	#-8,d0
		jsr	GetSineCosine.w
		neg.w	d0
		addi.w	#8,d0
		addi.w	#8,d1
		asr.w	#4,d0
		asr.w	#4,d1
		add.w	$10(a3),d0
		add.w	d2,d0
		move.w	d0,$10(a1)
		add.w	$14(a3),d1
		add.w	d3,d1
		move.w	d1,$14(a1)
		bra.w	loc_22A28
; ---------------------------------------------------------------------------
byte_22AD8:	dc.b $78
		dc.b $78
		dc.b $7F
		dc.b $7F
		dc.b $7E
		dc.b $7E
		dc.b $7D
		dc.b $7D
		dc.b $7C
		dc.b $7C
		dc.b $7B
		dc.b $7B
		dc.b $7A
		dc.b $7A
		dc.b $79
		dc.b $79
		dc.b 0
byte_22AE9:	dc.b $18
		dc.b $EE
		dc.b $13
		dc.b $E8
		dc.b 0
		dc.b $EE
		dc.b $ED
		dc.b 0
		dc.b $E8
		dc.b $12
		dc.b $ED
		dc.b $18
		dc.b 0
		dc.b $12
		dc.b $13
; ---------------------------------------------------------------------------

loc_22AF8:
		tst.b	2(a2)
		beq.s	loc_22B06
		subq.b	#1,2(a2)
		bne.w	locret_22B9C

loc_22B06:
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		addi.w	#$10,d0
		cmpi.w	#$20,d0
		bhs.w	locret_22B9C
		move.w	$14(a1),d1
		sub.w	$14(a0),d1
		cmpi.w	#$28,d1
		bhs.w	locret_22B9C
		move.w	$18(a1),d0
		cmpi.w	#$400,d0
		bge.s	loc_22B3C
		cmpi.w	#$18,d1
		bhs.w	locret_22B9C

loc_22B3C:

		tst.b	$2E(a1)
		bne.s	locret_22B9C
		cmpi.b	#4,5(a1)
		bhs.s	locret_22B9C
		tst.b	(Debug_On).w
		bne.s	locret_22B9C
		clr.w	$18(a1)
		clr.w	$1A(a1)
		clr.w	$1C(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)

loc_22B68:
		addi.w	#$14,$14(a1)
		move.b	#$14,$20(a1)
		move.b	#0,$3D(a1)
		move.b	#3,$2E(a1)
		andi.b	#-3,4(a1)
		move.b	#1,(a2)
		cmpi.w	#$400,d0
		blt.s	loc_22B3C
		move.b	#-$7F,(a2)
		moveq	#$4A,d0
		jsr	Play_Sound_2.w

locret_22B9C:

		rts
; ---------------------------------------------------------------------------
Map_AIZMHZRideVine:include "Levels/AIZ/Misc Object Data/Map - (&MHZ) Ride Vine.asm"


; =============== S U B R O U T I N E =======================================


Obj_Spring:

		move.l	#Map_Spring,$C(a0)
		move.w	#$4A4,$A(a0)
		ori.b	#4,4(a0)
		move.b	#$10,7(a0)
		move.b	#$10,6(a0)
		move.w	#prio(4),8(a0)
		move.w	$10(a0),$32(a0)
		move.w	$14(a0),$34(a0)
		move.b	$2C(a0),d0
		lsr.w	#3,d0
		andi.w	#$E,d0
		move.w	off_22D4A(pc,d0.w),d0
		jmp	off_22D4A(pc,d0.w)
; End of function Obj_Spring

; ---------------------------------------------------------------------------
off_22D4A:	dc.w loc_22E8E-off_22D4A

		dc.w loc_22DB0-off_22D4A
		dc.w loc_22DEE-off_22D4A
		dc.w loc_22E28-off_22D4A
		dc.w loc_22E58-off_22D4A

; =============== S U B R O U T I N E =======================================


sub_22D54:
		move.l	#Map_Spring,$C(a0)
		move.w	#$4A4,$A(a0)
		ori.b	#4,4(a0)
		move.b	#$10,7(a0)
		move.b	#$10,6(a0)
		move.w	#prio(4),8(a0)
		move.w	$10(a0),$32(a0)
		move.w	$14(a0),$34(a0)
		move.b	$2C(a0),d0
		lsr.w	#3,d0
		andi.w	#$E,d0
		move.w	off_22DA0(pc,d0.w),d0
		jsr	off_22DA0(pc,d0.w)
		move.w	#-$800,$30(a0)
		rts
; End of function sub_22D54

; ---------------------------------------------------------------------------
off_22DA0:	dc.w loc_22E8E-off_22DA0

		dc.w loc_22DB0-off_22DA0
		dc.w loc_22DEE-off_22DA0
		dc.w loc_22DB0-off_22DA0
		dc.w loc_22E8E-off_22DA0
		dc.w loc_22DEE-off_22DA0
		dc.w loc_22E8E-off_22DA0
		dc.w loc_22DEE-off_22DA0
; ---------------------------------------------------------------------------

loc_22DB0:

		move.b	#2,$20(a0)
		move.b	#3,$22(a0)
		move.w	#$4B4,$A(a0)
		move.b	#8,7(a0)
		move.l	#loc_23050,(a0)
		tst.w	(Competition_mode).w
		beq.w	loc_22EC4
		move.l	#Map_2PSpring,$C(a0)
		move.w	#$3AD,$A(a0)
		move.l	#loc_230DE,(a0)
		bra.w	loc_22EC4
; ---------------------------------------------------------------------------

loc_22DEE:

		tst.b	(Reverse_gravity_flag).w
		bne.w	loc_22E96
		bset	#1,$2A(a0)

loc_22DFC:
		move.b	#6,$22(a0)
		move.l	#loc_23326,(a0)
		tst.w	(Competition_mode).w
		beq.w	loc_22EC4
		move.l	#loc_23374,(a0)
		move.l	#Map_2PSpring,$C(a0)
		move.w	#$391,$A(a0)
		bra.w	loc_22EC4
; ---------------------------------------------------------------------------

loc_22E28:
		move.b	#4,$20(a0)
		move.b	#7,$22(a0)
		move.w	#$43A,$A(a0)
		cmpi.b	#2,(Current_zone).w
		beq.s	loc_22E4A
		cmpi.b	#7,(Current_zone).w
		bne.s	loc_22E50

loc_22E4A:
		move.w	#$478,$A(a0)

loc_22E50:
		move.l	#loc_23490,(a0)
		bra.s	loc_22EC4
; ---------------------------------------------------------------------------

loc_22E58:
		move.b	#4,$20(a0)
		move.b	#$A,$22(a0)
		move.w	#$43A,$A(a0)
		cmpi.b	#2,(Current_zone).w
		beq.s	loc_22E7A
		cmpi.b	#7,(Current_zone).w
		bne.s	loc_22E80

loc_22E7A:
		move.w	#$478,$A(a0)

loc_22E80:
		bset	#1,$2A(a0)
		move.l	#loc_235D2,(a0)
		bra.s	loc_22EC4
; ---------------------------------------------------------------------------

loc_22E8E:

		tst.b	(Reverse_gravity_flag).w
		bne.w	loc_22DFC

loc_22E96:
		move.l	#loc_22EF4,(a0)
		tst.w	(Competition_mode).w
		beq.s	loc_22EC4
		move.l	#loc_22F46,(a0)
		move.l	#Map_2PSpring,$C(a0)
		move.w	#$391,$A(a0)
		cmpi.b	#$12,(Current_zone).w
		bne.s	loc_22EC4
		ori.w	#-$8000,$A(a0)

loc_22EC4:

		move.b	$2C(a0),d0
		andi.w	#2,d0
		move.w	word_22EF0(pc,d0.w),$30(a0)
		btst	#1,d0
		beq.s	locret_22EEE
		move.l	#Map_Spring2,$C(a0)
		tst.w	(Competition_mode).w
		beq.s	locret_22EEE
		move.l	#Map_Spring3,$C(a0)

locret_22EEE:

		rts
; ---------------------------------------------------------------------------
word_22EF0:	dc.w $F000
		dc.w $F600
; ---------------------------------------------------------------------------

loc_22EF4:

		move.w	#$1B,d1
		move.w	#8,d2
		move.w	#$10,d3
		move.w	$10(a0),d4
		lea	(Player_1).w,a1
		moveq	#3,d6
		movem.l	d1-d4,-(sp)
		jsr	SolidObjectFull2_1P.w
		btst	#3,$2A(a0)
		beq.s	loc_22F1C
		bsr.s	sub_22F98

loc_22F1C:
		movem.l	(sp)+,d1-d4
		lea	(Player_2).w,a1
		moveq	#4,d6
		jsr	SolidObjectFull2_1P.w
		btst	#4,$2A(a0)
		beq.s	loc_22F34
		bsr.s	sub_22F98

loc_22F34:
		lea	(Ani_Spring).l,a1
		jsr	Animate_Sprite.w
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_22F46:


		move.w	#$13,d1
		move.w	#8,d2
		move.w	#$10,d3
		move.w	$10(a0),d4
		lea	(Player_1).w,a1
		moveq	#3,d6
		movem.l	d1-d4,-(sp)
		jsr	SolidObjectFull2_1P.w
		btst	#3,$2A(a0)
		beq.s	loc_22F6E
		bsr.s	sub_22F98

loc_22F6E:
		movem.l	(sp)+,d1-d4
		lea	(Player_2).w,a1
		moveq	#4,d6
		jsr	SolidObjectFull2_1P.w
		btst	#4,$2A(a0)
		beq.s	loc_22F86
		bsr.s	sub_22F98

loc_22F86:
		lea	(Ani_Spring).l,a1
		jsr	Animate_Sprite.w
		jmp	Draw_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_22F98:

		move.w	#$100,$20(a0)
		addq.w	#8,$14(a1)
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_22FAE
		subi.w	#$10,$14(a1)

loc_22FAE:
		move.w	$30(a0),$1A(a1)
		bset	#1,$2A(a1)
		bclr	#3,$2A(a1)
		clr.b	$40(a1)
		clr.b	$3D(a1)
		move.b	#$10,$20(a1)
		move.b	#2,5(a1)
		move.b	$2C(a0),d0
		bpl.s	loc_22FE0
		move.w	#0,$18(a1)

loc_22FE0:
		btst	#0,d0
		beq.s	loc_23020
		move.w	#1,$1C(a1)
		move.b	#1,$27(a1)
		move.b	#0,$20(a1)
		move.b	#0,$30(a1)
		move.b	#4,$31(a1)
		btst	#1,d0
		bne.s	loc_23010
		move.b	#1,$30(a1)

loc_23010:
		btst	#0,$2A(a1)
		beq.s	loc_23020
		neg.b	$27(a1)
		neg.w	$1C(a1)

loc_23020:

		andi.b	#$C,d0
		cmpi.b	#4,d0
		bne.s	loc_23036
		move.b	#$C,$46(a1)
		move.b	#$D,$47(a1)

loc_23036:
		cmpi.b	#8,d0
		bne.s	loc_23048
		move.b	#$E,$46(a1)
		move.b	#$F,$47(a1)

loc_23048:
		moveq	#-$4F,d0
		jmp	Play_Sound_2.w
; End of function sub_22F98

; ---------------------------------------------------------------------------

loc_23050:

		move.w	#$13,d1
		move.w	#$E,d2
		move.w	#$F,d3
		move.w	$10(a0),d4
		lea	(Player_1).w,a1
		moveq	#3,d6
		movem.l	d1-d4,-(sp)
		jsr	SolidObjectFull2_1P.w
		swap	d6
		andi.w	#1,d6
		beq.s	loc_23092
		move.b	$2A(a0),d1
		move.w	$10(a0),d0
		sub.w	$10(a1),d0
		bcs.s	loc_23088
		eori.b	#1,d1

loc_23088:
		andi.b	#1,d1
		bne.s	loc_23092
		bsr.w	sub_23190

loc_23092:

		movem.l	(sp)+,d1-d4
		lea	(Player_2).w,a1
		moveq	#4,d6
		jsr	SolidObjectFull2_1P.w
		swap	d6
		andi.w	#2,d6
		beq.s	loc_230C4
		move.b	$2A(a0),d1
		move.w	$10(a0),d0
		sub.w	$10(a1),d0
		bcs.s	loc_230BA
		eori.b	#1,d1

loc_230BA:
		andi.b	#1,d1
		bne.s	loc_230C4
		bsr.w	sub_23190

loc_230C4:

		bsr.w	sub_2326C
		lea	(Ani_Spring).l,a1
		jsr	Animate_Sprite.w
		move.w	$32(a0),d0
		jmp	Sprite_OnScreen_Test2.w
; ---------------------------------------------------------------------------

loc_230DE:


		move.w	#$F,d1
		move.w	#$C,d2
		move.w	#$D,d3
		move.w	$10(a0),d4
		lea	(Player_1).w,a1
		moveq	#3,d6
		movem.l	d1-d4,-(sp)
		jsr	SolidObjectFull2_1P.w
		swap	d6
		andi.w	#1,d6
		beq.s	loc_2311E
		move.b	$2A(a0),d1
		move.w	$10(a0),d0
		sub.w	$10(a1),d0
		bcs.s	loc_23116
		eori.b	#1,d1

loc_23116:
		andi.b	#1,d1
		bne.s	loc_2311E
		bsr.s	sub_23160

loc_2311E:

		movem.l	(sp)+,d1-d4
		lea	(Player_2).w,a1
		moveq	#4,d6
		jsr	SolidObjectFull2_1P.w
		swap	d6
		andi.w	#2,d6
		beq.s	loc_2314E
		move.b	$2A(a0),d1
		move.w	$10(a0),d0
		sub.w	$10(a1),d0
		bcs.s	loc_23146
		eori.b	#1,d1

loc_23146:
		andi.b	#1,d1
		bne.s	loc_2314E
		bsr.s	sub_23160

loc_2314E:

		lea	(Ani_Spring).l,a1
		jsr	Animate_Sprite.w
		jmp	Draw_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_23160:

		move.w	#$300,$20(a0)
		move.w	$30(a0),$18(a1)
		addq.w	#4,$10(a1)
		bset	#0,$2A(a1)
		btst	#0,$2A(a0)
		bne.s	loc_2318E
		bclr	#0,$2A(a1)
		subi.w	#8,$10(a1)
		neg.w	$18(a1)

loc_2318E:
		bra.s	loc_231BE
; End of function sub_23160


; =============== S U B R O U T I N E =======================================


sub_23190:

		move.w	#$300,$20(a0)
		move.w	$30(a0),$18(a1)
		addq.w	#8,$10(a1)
		bset	#0,$2A(a1)
		btst	#0,$2A(a0)
		bne.s	loc_231BE
		bclr	#0,$2A(a1)
		subi.w	#$10,$10(a1)
		neg.w	$18(a1)

loc_231BE:

		move.w	#$F,$32(a1)
		move.w	$18(a1),$1C(a1)
		btst	#2,$2A(a1)
		bne.s	loc_231D8
		move.b	#0,$20(a1)

loc_231D8:
		move.b	$2C(a0),d0
		bpl.s	loc_231E4
		move.w	#0,$1A(a1)

loc_231E4:
		btst	#0,d0
		beq.s	loc_23224
		move.w	#1,$1C(a1)
		move.b	#1,$27(a1)
		move.b	#0,$20(a1)
		move.b	#1,$30(a1)

		move.b	#8,$31(a1)
		btst	#1,d0
		bne.s	loc_23214
		move.b	#3,$30(a1)

loc_23214:
		btst	#0,$2A(a1)
		beq.s	loc_23224
		neg.b	$27(a1)
		neg.w	$1C(a1)

loc_23224:

		andi.b	#$C,d0
		cmpi.b	#4,d0
		bne.s	loc_2323A
		move.b	#$C,$46(a1)
		move.b	#$D,$47(a1)

loc_2323A:
		cmpi.b	#8,d0
		bne.s	loc_2324C
		move.b	#$E,$46(a1)
		move.b	#$F,$47(a1)

loc_2324C:
		bclr	#5,$2A(a0)
		bclr	#6,$2A(a0)
		bclr	#5,$2A(a1)
		move.b	#0,$2F(a1)
		moveq	#-$4F,d0
		jmp	Play_Sound_2.w
; End of function sub_23190


; =============== S U B R O U T I N E =======================================


sub_2326C:
		cmpi.b	#3,$20(a0)
		beq.w	locret_23324
		move.w	$10(a0),d0
		move.w	d0,d1
		addi.w	#$28,d1
		btst	#0,$2A(a0)
		beq.s	loc_2328E
		move.w	d0,d1
		subi.w	#$28,d0

loc_2328E:
		move.w	$14(a0),d2
		move.w	d2,d3
		subi.w	#$18,d2
		addi.w	#$18,d3
		lea	(Player_1).w,a1
		btst	#1,$2A(a1)
		bne.s	loc_232E2
		move.w	$1C(a1),d4
		btst	#0,$2A(a0)
		beq.s	loc_232B6
		neg.w	d4

loc_232B6:
		tst.w	d4
		bmi.s	loc_232E2
		move.w	$10(a1),d4
		cmp.w	d0,d4
		blo.w	loc_232E2
		cmp.w	d1,d4
		bhs.w	loc_232E2
		move.w	$14(a1),d4
		cmp.w	d2,d4
		blo.w	loc_232E2
		cmp.w	d3,d4
		bhs.w	loc_232E2
		move.w	d0,-(sp)
		bsr.w	sub_23190
		move.w	(sp)+,d0

loc_232E2:

		lea	(Player_2).w,a1
		btst	#1,$2A(a1)
		bne.s	locret_23324
		move.w	$1C(a1),d4
		btst	#0,$2A(a0)
		beq.s	loc_232FC
		neg.w	d4

loc_232FC:
		tst.w	d4
		bmi.s	locret_23324
		move.w	$10(a1),d4
		cmp.w	d0,d4
		blo.w	locret_23324
		cmp.w	d1,d4
		bhs.w	locret_23324
		move.w	$14(a1),d4
		cmp.w	d2,d4
		blo.w	locret_23324
		cmp.w	d3,d4
		bhs.w	locret_23324
		bsr.w	sub_23190

locret_23324:

		rts
; End of function sub_2326C

; ---------------------------------------------------------------------------

loc_23326:

		move.w	#$1B,d1
		move.w	#8,d2
		move.w	#9,d3
		move.w	$10(a0),d4
		lea	(Player_1).w,a1
		moveq	#3,d6
		movem.l	d1-d4,-(sp)
		jsr	SolidObjectFull2_1P.w
		cmpi.w	#-2,d4
		bne.s	loc_2334C
		bsr.s	sub_233CA

loc_2334C:
		movem.l	(sp)+,d1-d4
		lea	(Player_2).w,a1
		moveq	#4,d6
		jsr	SolidObjectFull2_1P.w
		cmpi.w	#-2,d4
		bne.s	loc_23362
		bsr.s	sub_233CA

loc_23362:
		lea	(Ani_Spring).l,a1
		jsr	Animate_Sprite.w
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_23374:


		move.w	#$13,d1
		move.w	#8,d2
		move.w	#9,d3
		move.w	$10(a0),d4
		lea	(Player_1).w,a1
		moveq	#3,d6
		movem.l	d1-d4,-(sp)
		jsr	SolidObjectFull2_1P.w
		cmpi.w	#-2,d4
		bne.s	loc_2339E
		subq.w	#4,$14(a1)
		bsr.s	loc_233DA

loc_2339E:
		movem.l	(sp)+,d1-d4
		lea	(Player_2).w,a1
		moveq	#4,d6
		jsr	SolidObjectFull2_1P.w
		cmpi.w	#-2,d4
		bne.s	loc_233B8
		subq.w	#4,$14(a1)
		bsr.s	loc_233DA

loc_233B8:
		lea	(Ani_Spring).l,a1
		jsr	Animate_Sprite.w
		jmp	Draw_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_233CA:

		subq.w	#8,$14(a1)
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_233DA
		addi.w	#$10,$14(a1)

loc_233DA:

		move.w	#$100,$20(a0)
		move.w	$30(a0),$1A(a1)
		neg.w	$1A(a1)
		cmpi.w	#$1000,$1A(a1)
		bne.s	loc_233F8
		move.w	#$D00,$1A(a1)

loc_233F8:
		move.b	$2C(a0),d0
		bpl.s	loc_23404
		move.w	#0,$18(a1)

loc_23404:
		btst	#0,d0
		beq.s	loc_23444
		move.w	#1,$1C(a1)
		move.b	#1,$27(a1)
		move.b	#0,$20(a1)
		move.b	#0,$30(a1)
		move.b	#4,$31(a1)
		btst	#1,d0
		bne.s	loc_23434
		move.b	#1,$30(a1)

loc_23434:
		btst	#0,$2A(a1)
		beq.s	loc_23444
		neg.b	$27(a1)
		neg.w	$1C(a1)

loc_23444:

		andi.b	#$C,d0
		cmpi.b	#4,d0
		bne.s	loc_2345A
		move.b	#$C,$46(a1)
		move.b	#$D,$47(a1)

loc_2345A:
		cmpi.b	#8,d0
		bne.s	loc_2346C
		move.b	#$E,$46(a1)
		move.b	#$F,$47(a1)

loc_2346C:
		bset	#1,$2A(a1)
		bclr	#3,$2A(a1)
		clr.b	$40(a1)
		move.b	#2,5(a1)
		move.b	#0,$2F(a1)
		moveq	#-$4F,d0
		jmp	Play_Sound_2.w
; End of function sub_233CA

; ---------------------------------------------------------------------------

loc_23490:

		move.w	#$1B,d1
		move.w	#$10,d2
		move.w	$10(a0),d4
		lea	byte_236EA(pc),a2
		lea	(Player_1).w,a1
		moveq	#3,d6
		movem.l	d1-d4,-(sp)
		jsr	sub_1DD24.w
		btst	#3,$2A(a0)
		beq.s	loc_234B8
		bsr.s	sub_234E6

loc_234B8:
		movem.l	(sp)+,d1-d4
		lea	(Player_2).w,a1
		moveq	#4,d6
		jsr	sub_1DD24.w
		btst	#4,$2A(a0)
		beq.s	loc_234D0
		bsr.s	sub_234E6

loc_234D0:
		lea	(Ani_Spring).l,a1
		jsr	Animate_Sprite.w
		move.w	$32(a0),d0
		jmp	Sprite_OnScreen_Test2.w

; =============== S U B R O U T I N E =======================================


sub_234E6:

		btst	#0,$2A(a0)
		bne.s	loc_234FC
		move.w	$10(a0),d0
		subq.w	#4,d0
		cmp.w	$10(a1),d0
		blo.s	loc_2350A
		rts
; ---------------------------------------------------------------------------

loc_234FC:
		move.w	$10(a0),d0
		addq.w	#4,d0
		cmp.w	$10(a1),d0
		bhs.s	loc_2350A
		rts
; ---------------------------------------------------------------------------

loc_2350A:

		move.w	#$500,$20(a0)
		move.w	$30(a0),$1A(a1)
		move.w	$30(a0),$18(a1)
		addq.w	#6,$14(a1)
		addq.w	#6,$10(a1)
		bset	#0,$2A(a1)
		btst	#0,$2A(a0)
		bne.s	loc_23542
		bclr	#0,$2A(a1)
		subi.w	#$C,$10(a1)
		neg.w	$18(a1)

loc_23542:
		bset	#1,$2A(a1)
		bclr	#3,$2A(a1)
		clr.b	$40(a1)
		move.b	#$10,$20(a1)
		move.b	#2,5(a1)
		move.b	$2C(a0),d0
		btst	#0,d0
		beq.s	loc_235A2
		move.w	#1,$1C(a1)
		move.b	#1,$27(a1)
		move.b	#0,$20(a1)
		move.b	#1,$30(a1)
		move.b	#8,$31(a1)
		btst	#1,d0
		bne.s	loc_23592
		move.b	#3,$30(a1)

loc_23592:
		btst	#0,$2A(a1)
		beq.s	loc_235A2
		neg.b	$27(a1)
		neg.w	$1C(a1)

loc_235A2:

		andi.b	#$C,d0
		cmpi.b	#4,d0
		bne.s	loc_235B8
		move.b	#$C,$46(a1)
		move.b	#$D,$47(a1)

loc_235B8:
		cmpi.b	#8,d0
		bne.s	loc_235CA
		move.b	#$E,$46(a1)
		move.b	#$F,$47(a1)

loc_235CA:
		moveq	#-$4F,d0
		jmp	Play_Sound_2.w
; End of function sub_234E6

; ---------------------------------------------------------------------------

loc_235D2:

		move.w	#$1B,d1
		move.w	#$10,d2
		move.w	$10(a0),d4
		lea	byte_23706(pc),a2
		lea	(Player_1).w,a1
		moveq	#3,d6
		movem.l	d1-d4,-(sp)
		jsr	sub_1DD24.w
		cmpi.w	#-2,d4
		bne.s	loc_235F8
		bsr.s	sub_23624

loc_235F8:
		movem.l	(sp)+,d1-d4
		lea	(Player_2).w,a1
		moveq	#4,d6
		jsr	sub_1DD24.w
		cmpi.w	#-2,d4
		bne.s	loc_2360E
		bsr.s	sub_23624

loc_2360E:
		lea	(Ani_Spring).l,a1
		jsr	Animate_Sprite.w
		move.w	$32(a0),d0
		jmp	Sprite_OnScreen_Test2.w

; =============== S U B R O U T I N E =======================================


sub_23624:

		move.w	#$500,$20(a0)
		move.w	$30(a0),$1A(a1)
		neg.w	$1A(a1)
		move.w	$30(a0),$18(a1)
		subq.w	#6,$14(a1)
		addq.w	#6,$10(a1)
		bset	#0,$2A(a1)
		btst	#0,$2A(a0)
		bne.s	loc_23660
		bclr	#0,$2A(a1)
		subi.w	#$C,$10(a1)
		neg.w	$18(a1)

loc_23660:
		bset	#1,$2A(a1)
		bclr	#3,$2A(a1)
		clr.b	$40(a1)
		move.b	#2,5(a1)
		move.b	$2C(a0),d0
		btst	#0,d0
		beq.s	loc_236BA
		move.w	#1,$1C(a1)
		move.b	#1,$27(a1)
		move.b	#0,$20(a1)
		move.b	#1,$30(a1)
		move.b	#8,$31(a1)
		btst	#1,d0
		bne.s	loc_236AA
		move.b	#3,$30(a1)

loc_236AA:
		btst	#0,$2A(a1)
		beq.s	loc_236BA
		neg.b	$27(a1)
		neg.w	$1C(a1)

loc_236BA:

		andi.b	#$C,d0
		cmpi.b	#4,d0
		bne.s	loc_236D0
		move.b	#$C,$46(a1)
		move.b	#$D,$47(a1)

loc_236D0:
		cmpi.b	#8,d0
		bne.s	loc_236E2
		move.b	#$E,$46(a1)
		move.b	#$F,$47(a1)

loc_236E2:
		moveq	#-$4F,d0
		jmp	Play_Sound_2.w
; End of function sub_23624

; ---------------------------------------------------------------------------
byte_236EA:	dc.b $10
		dc.b $10
		dc.b $10
		dc.b $10
		dc.b $10
		dc.b $10
		dc.b $10
		dc.b $10
		dc.b $10
		dc.b $10
		dc.b $10
		dc.b $10
		dc.b $E
		dc.b $C
		dc.b $A
		dc.b 8
		dc.b 6
		dc.b 4
		dc.b 2
		dc.b 0
		dc.b $FE
		dc.b $FC
		dc.b $FC
		dc.b $FC
		dc.b $FC
		dc.b $FC
		dc.b $FC
		dc.b $FC
byte_23706:	dc.b $F4
		dc.b $F0
		dc.b $F0
		dc.b $F0
		dc.b $F0
		dc.b $F0
		dc.b $F0
		dc.b $F0
		dc.b $F0
		dc.b $F0
		dc.b $F0
		dc.b $F0
		dc.b $F2
		dc.b $F4
		dc.b $F6
		dc.b $F8
		dc.b $FA
		dc.b $FC
		dc.b $FE
		dc.b 0
		dc.b 2
		dc.b 4
		dc.b 4
		dc.b 4
		dc.b 4
		dc.b 4
		dc.b 4
		dc.b 4
Ani_Spring:	include "General/Sprites/Level Misc/Anim - Spring.asm"

Map_Spring:	include "General/Sprites/Level Misc/Map - Spring.asm"

Map_2PSpring: include "General/Sprites/Level Misc/Map - 2P Spring.asm"
; ---------------------------------------------------------------------------

Obj_RetractingSpring:

		bsr.w	Obj_Spring
		move.b	$2C(a0),d0
		lsr.w	#3,d0
		andi.w	#$E,d0
		move.w	off_239FA(pc,d0.w),d1
		jmp	off_239FA(pc,d1.w)
; ---------------------------------------------------------------------------
off_239FA:	dc.w loc_23A04-off_239FA

		dc.w loc_23A20-off_239FA
		dc.w loc_23A3C-off_239FA
		dc.w loc_23A58-off_239FA
		dc.w loc_23A88-off_239FA
; ---------------------------------------------------------------------------

loc_23A04:
		move.l	#loc_23A0A,(a0)

loc_23A0A:
		bsr.w	sub_23AB8
		moveq	#0,d0
		move.b	$36(a0),d0
		add.w	$34(a0),d0
		move.w	d0,$14(a0)
		bra.w	loc_22EF4
; ---------------------------------------------------------------------------

loc_23A20:
		move.l	#loc_23A26,(a0)

loc_23A26:
		bsr.w	sub_23AB8
		moveq	#0,d0
		move.b	$36(a0),d0
		add.w	$32(a0),d0
		move.w	d0,$10(a0)
		bra.w	loc_23050
; ---------------------------------------------------------------------------

loc_23A3C:
		move.l	#loc_23A42,(a0)

loc_23A42:
		bsr.w	sub_23AB8
		moveq	#0,d0
		move.b	$36(a0),d0
		add.w	$34(a0),d0
		move.w	d0,$14(a0)
		bra.w	loc_23326
; ---------------------------------------------------------------------------

loc_23A58:
		move.l	#loc_23A5E,(a0)

loc_23A5E:
		bsr.w	sub_23AB8
		moveq	#0,d0
		move.b	$36(a0),d0
		move.w	d0,d1
		btst	#0,$2A(a0)
		bne.s	loc_23A74
		neg.w	d0

loc_23A74:
		add.w	$32(a0),d0
		move.w	d0,$10(a0)
		add.w	$34(a0),d1
		move.w	d1,$14(a0)
		bra.w	loc_23490
; ---------------------------------------------------------------------------

loc_23A88:
		move.l	#loc_23A8E,(a0)

loc_23A8E:
		bsr.w	sub_23AB8
		moveq	#0,d0
		move.b	$36(a0),d0
		move.w	d0,d1
		btst	#0,$2A(a0)
		beq.s	loc_23AA4
		neg.w	d0

loc_23AA4:
		add.w	$32(a0),d0
		move.w	d0,$10(a0)
		add.w	$34(a0),d1
		move.w	d1,$14(a0)
		bra.w	loc_235D2

; =============== S U B R O U T I N E =======================================


sub_23AB8:

		tst.w	$3A(a0)
		beq.s	loc_23AD4
		subq.w	#1,$3A(a0)
		bne.s	locret_23B16
		tst.b	4(a0)
		bpl.s	locret_23B16
		moveq	#$52,d0
		jsr	Play_Sound_2.w
		bra.s	locret_23B16
; ---------------------------------------------------------------------------

loc_23AD4:
		tst.w	$38(a0)
		beq.s	loc_23AF6
		subi.w	#$800,$36(a0)
		bcc.s	locret_23B16
		move.w	#0,$36(a0)
		move.w	#0,$38(a0)
		move.w	#$3C,$3A(a0)
		bra.s	locret_23B16
; ---------------------------------------------------------------------------

loc_23AF6:
		addi.w	#$800,$36(a0)
		cmpi.w	#$2000,$36(a0)
		blo.s	locret_23B16
		move.w	#$2000,$36(a0)
		move.w	#1,$38(a0)
		move.w	#$3C,$3A(a0)

locret_23B16:

		rts
; End of function sub_23AB8

; ---------------------------------------------------------------------------
byte_23B18:	dc.b   $C,   8,	  0,   1
		dc.b   $C,   8,	  0,   0
		dc.b   $C,   8,	  0,   1
		dc.b	8,  $C,	  1,   0
		dc.b   $C,   8,	  2,   1
		dc.b   $C,   8,	  3,   1
		dc.b   $C,   8,	  2,   1
		dc.b   $C,   8,	  3,   1
byte_23F74:	dc.b $10
		dc.b $10
		dc.b $20
		dc.b $10
		dc.b $30
		dc.b $10
		dc.b $40
		dc.b $10
		dc.b $10
		dc.b $10
		dc.b $10
		dc.b $20
		dc.b $10
		dc.b $30
		dc.b $10
		dc.b $40
; ---------------------------------------------------------------------------

Obj_Spikes:

		ori.b	#4,4(a0)
		move.w	#prio(4),8(a0)
		move.b	$2C(a0),d0
		andi.w	#$F0,d0
		lsr.w	#3,d0
		tst.w	(Competition_mode).w
		bne.w	loc_24034
		lea	byte_23F74(pc,d0.w),a1
		move.b	(a1)+,7(a0)
		move.b	(a1)+,6(a0)
		move.l	#loc_24090,(a0)
		move.l	#Map_Spikes,$C(a0)
		move.w	#$49C,$A(a0)
		cmpi.b	#4,(Current_zone).w
		bne.s	loc_23FD0
		move.w	#$200,$A(a0)

loc_23FD0:
		lsr.w	#1,d0
		move.b	d0,$22(a0)
		cmpi.b	#4,d0
		blo.s	loc_23FE8
		move.l	#loc_240E2,(a0)
		move.w	#$494,$A(a0)

loc_23FE8:
		move.b	$2A(a0),d0
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_23FF6
		eori.b	#2,d0

loc_23FF6:
		andi.b	#2,d0
		beq.s	loc_24002
		move.l	#loc_2413E,(a0)

loc_24002:
		move.w	#$20,$3C(a0)
		move.w	$10(a0),$30(a0)
		move.w	$14(a0),$32(a0)
		move.b	$2C(a0),d0
		andi.b	#$F,d0
		add.b	d0,d0
		move.b	d0,$2C(a0)
		rts
; ---------------------------------------------------------------------------
byte_24024:	dc.b   $C,  $C,	$18,  $C, $24,	$C, $30,  $C,  $C,  $C,	 $C, $18,  $C, $24,  $C, $30
; ---------------------------------------------------------------------------

loc_24034:
		lea	byte_24024(pc,d0.w),a1
		move.b	(a1)+,7(a0)
		move.b	(a1)+,6(a0)
		move.l	#loc_2418E,(a0)
		move.l	#Map_2PSpikes,$C(a0)
		move.w	#$391,$A(a0)
		lsr.w	#1,d0
		move.b	d0,$22(a0)
		cmpi.b	#4,d0
		blo.s	loc_24066
		move.l	#loc_241DC,(a0)

loc_24066:
		btst	#1,$2A(a0)
		beq.s	loc_24074
		move.l	#loc_24234,(a0)

loc_24074:
		move.w	$10(a0),$30(a0)
		move.w	$14(a0),$32(a0)
		move.b	$2C(a0),d0
		andi.b	#$F,d0
		add.b	d0,d0
		move.b	d0,$2C(a0)
		rts
; ---------------------------------------------------------------------------

loc_24090:
		bsr.w	sub_242B6
		moveq	#0,d1
		move.b	7(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		move.b	$2A(a0),d6
		andi.b	#$18,d6
		beq.s	loc_240D8
		move.b	d6,d0
		andi.b	#8,d0
		beq.s	loc_240CA
		lea	(Player_1).w,a1
		jsr	sub_24280.w

loc_240CA:
		andi.b	#$10,d6
		beq.s	loc_240D8
		lea	(Player_2).w,a1
		jsr	sub_24280.w

loc_240D8:

		move.w	$30(a0),d0
		jmp	Sprite_OnScreen_Test2.w
; ---------------------------------------------------------------------------

loc_240E2:
		bsr.w	sub_242B6
		moveq	#0,d1
		move.b	7(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		swap	d6
		andi.w	#3,d6
		beq.s	loc_24134
		move.b	d6,d0
		andi.b	#1,d0
		beq.s	loc_24120
		lea	(Player_1).w,a1
		jsr	sub_24280.w
		bclr	#5,$2A(a0)

loc_24120:
		andi.b	#2,d6
		beq.s	loc_24134
		lea	(Player_2).w,a1
		jsr	sub_24280.w
		bclr	#6,$2A(a0)

loc_24134:

		move.w	$30(a0),d0
		jmp	Sprite_OnScreen_Test2.w
; ---------------------------------------------------------------------------

loc_2413E:
		bsr.w	sub_242B6
		moveq	#0,d1
		move.b	7(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		swap	d6
		andi.w	#$C,d6
		beq.s	loc_24184
		move.b	d6,d0
		andi.b	#4,d0
		beq.s	loc_24176
		lea	(Player_1).w,a1
		jsr	sub_24280.w

loc_24176:
		andi.b	#8,d6
		beq.s	loc_24184
		lea	(Player_2).w,a1
		jsr	sub_24280.w

loc_24184:

		move.w	$30(a0),d0
		jmp	Sprite_OnScreen_Test2.w
; ---------------------------------------------------------------------------

loc_2418E:
		bsr.w	sub_243BA
		moveq	#0,d1
		move.b	7(a0),d1
		addi.w	#7,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		move.b	$2A(a0),d6
		andi.b	#$18,d6
		beq.s	loc_241D6
		move.b	d6,d0
		andi.b	#8,d0
		beq.s	loc_241C8
		lea	(Player_1).w,a1
		jsr	sub_24280.w

loc_241C8:
		andi.b	#$10,d6
		beq.s	loc_241D6
		lea	(Player_2).w,a1
		jsr	sub_24280.w

loc_241D6:

		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_241DC:
		bsr.w	sub_243BA
		moveq	#0,d1
		move.b	7(a0),d1
		addi.w	#7,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		swap	d6
		andi.w	#3,d6
		beq.s	loc_2422E
		move.b	d6,d0
		andi.b	#1,d0
		beq.s	loc_2421A
		lea	(Player_1).w,a1
		jsr	sub_24280.w
		bclr	#5,$2A(a0)

loc_2421A:
		andi.b	#2,d6
		beq.s	loc_2422E
		lea	(Player_2).w,a1
		jsr	sub_24280.w
		bclr	#6,$2A(a0)

loc_2422E:

		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_24234:
		bsr.w	sub_243BA
		moveq	#0,d1
		move.b	7(a0),d1
		addi.w	#7,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		swap	d6
		andi.w	#$C,d6
		beq.s	loc_2427A
		move.b	d6,d0
		andi.b	#4,d0
		beq.s	loc_2426C
		lea	(Player_1).w,a1
		jsr	sub_24280.w

loc_2426C:
		andi.b	#8,d6
		beq.s	loc_2427A
		lea	(Player_2).w,a1
		jsr	sub_24280.w

loc_2427A:

		jmp	Draw_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_242B6:

		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	off_242C4(pc,d0.w),d1
		jmp	off_242C4(pc,d1.w)
; End of function sub_242B6

; ---------------------------------------------------------------------------
off_242C4:	dc.w locret_242CC-off_242C4

		dc.w loc_242CE-off_242C4
		dc.w loc_242E2-off_242C4
		dc.w loc_24356-off_242C4
; ---------------------------------------------------------------------------

locret_242CC:

		rts
; ---------------------------------------------------------------------------

loc_242CE:
		bsr.w	sub_242F6
		moveq	#0,d0
		move.b	$34(a0),d0
		add.w	$32(a0),d0
		move.w	d0,$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_242E2:
		bsr.w	sub_242F6
		moveq	#0,d0
		move.b	$34(a0),d0
		add.w	$30(a0),d0
		move.w	d0,$10(a0)
		rts

; =============== S U B R O U T I N E =======================================


sub_242F6:

		tst.w	$38(a0)
		beq.s	loc_24312
		subq.w	#1,$38(a0)
		bne.s	locret_24354
		tst.b	4(a0)
		bpl.s	locret_24354
		moveq	#$52,d0
		jsr	Play_Sound_2.w
		bra.s	locret_24354
; ---------------------------------------------------------------------------

loc_24312:
		tst.w	$36(a0)
		beq.s	loc_24334
		subi.w	#$800,$34(a0)
		bcc.s	locret_24354
		move.w	#0,$34(a0)
		move.w	#0,$36(a0)
		move.w	#$3C,$38(a0)
		bra.s	locret_24354
; ---------------------------------------------------------------------------

loc_24334:
		addi.w	#$800,$34(a0)
		cmpi.w	#$2000,$34(a0)
		blo.s	locret_24354
		move.w	#$2000,$34(a0)
		move.w	#1,$36(a0)
		move.w	#$3C,$38(a0)

locret_24354:

		rts
; End of function sub_242F6

; ---------------------------------------------------------------------------

loc_24356:
		move.b	$2A(a0),d3
		andi.b	#$60,d3
		beq.s	loc_2437C
		move.w	$10(a0),d2
		lea	(Player_1).w,a1
		move.b	$3E(a0),d0
		moveq	#5,d6
		bsr.s	sub_2438A
		lea	(Player_2).w,a1
		move.b	$3F(a0),d0
		moveq	#6,d6
		bsr.s	sub_2438A

loc_2437C:
		move.b	(Player_1+$2A).w,$3E(a0)
		move.b	(Player_2+$2A).w,$3F(a0)
		rts

; =============== S U B R O U T I N E =======================================


sub_2438A:

		btst	d6,d3
		beq.s	locret_243B8
		cmp.w	$10(a1),d2
		blo.s	locret_243B8
		btst	#5,d0
		beq.s	locret_243B8
		subq.w	#1,$3A(a0)
		bpl.s	locret_243B8
		move.w	#6,$3A(a0)		; NAT: Make FBZ1 spike move super fast!
		tst.w	$3C(a0)
		beq.s	locret_243B8
		subq.w	#1,$3C(a0)
		addq.w	#1,$10(a0)
		addq.w	#1,$10(a1)

locret_243B8:
		rts
; End of function sub_2438A


; =============== S U B R O U T I N E =======================================


sub_243BA:

		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	word_243C8(pc,d0.w),d1
		jmp	word_243C8(pc,d1.w)
; End of function sub_243BA

; ---------------------------------------------------------------------------
word_243C8:	dc.w locret_242CC-word_243C8

		dc.w loc_243CE-word_243C8
		dc.w loc_243E2-word_243C8
; ---------------------------------------------------------------------------

loc_243CE:
		bsr.w	sub_243F6
		moveq	#0,d0
		move.b	$34(a0),d0
		add.w	$32(a0),d0
		move.w	d0,$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_243E2:
		bsr.w	sub_243F6
		moveq	#0,d0
		move.b	$34(a0),d0
		add.w	$30(a0),d0
		move.w	d0,$10(a0)
		rts

; =============== S U B R O U T I N E =======================================


sub_243F6:

		tst.w	$38(a0)
		beq.s	loc_24412
		subq.w	#1,$38(a0)
		bne.s	locret_24454
		tst.b	4(a0)
		bpl.s	locret_24454
		moveq	#$52,d0
		jsr	Play_Sound_2.w
		bra.s	locret_24454
; ---------------------------------------------------------------------------

loc_24412:
		tst.w	$36(a0)
		beq.s	loc_24434
		subi.w	#$800,$34(a0)
		bcc.s	locret_24454
		move.w	#0,$34(a0)
		move.w	#0,$36(a0)
		move.w	#$3C,$38(a0)
		bra.s	locret_24454
; ---------------------------------------------------------------------------

loc_24434:
		addi.w	#$800,$34(a0)
		cmpi.w	#$1800,$34(a0)
		blo.s	locret_24454
		move.w	#$1800,$34(a0)
		move.w	#1,$36(a0)
		move.w	#$3C,$38(a0)

locret_24454:

		rts
; End of function sub_243F6

; ---------------------------------------------------------------------------
Map_Spikes:	include "General/Sprites/Level Misc/Map - Spikes.asm"

Map_2PSpikes:	include "General/2P Zone/Map - Spikes.asm"


; =============== S U B R O U T I N E =======================================


Init_ArtScaling:
		moveq	#0,d1
		move.w	d1,(Software_Scaler_Unk).w
		movea.w	d1,a0
		movea.w	d1,a1
		movea.w	d1,a2
		movea.w	d1,a3
		movea.w	d1,a4
		movea.w	d1,a5
		lea	(H_scroll_buffer).w,a6
		move.w	#$F,d1

loc_24618:
		movem.l	a0-a5,-(a6)
		movem.l	a0-a5,-(a6)
		movem.l	a0-a5,-(a6)
		movem.l	a0-a5,-(a6)
		movem.l	a0-a5,-(a6)
		movem.l	a0-a5,-(a6)
		movem.l	a0-a5,-(a6)
		movem.l	a0-a5,-(a6)
		movem.l	a0-a5,-(a6)
		movem.l	a0-a5,-(a6)
		movem.l	a0-a3,-(a6)
		dbf	d1,loc_24618
		rts
; End of function Init_ArtScaling

; ---------------------------------------------------------------------------
word_2464A:	dc.w $100
		dc.w $FC
		dc.w $90
		dc.w $90
		dc.w $40
		dc.w $40
		dc.w $40
		dc.w $3C
		dc.w $3C
		dc.w $3C
		dc.w $3C
		dc.w $3C
		dc.w $10
		dc.w $10
		dc.w $10
		dc.w $10
		dc.w $10
		dc.w $10
		dc.w $10
		dc.w $10
		dc.w $10
		dc.w $10
		dc.w $10
		dc.w $10
		dc.w $10
		dc.w $10
		dc.w $10
		dc.w $10
		dc.w $C
		dc.w $C
		dc.w $C
		dc.w $C

; =============== S U B R O U T I N E =======================================


sub_2468A:
		moveq	#0,d1
		move.b	$40(a0),d1
		cmpi.b	#$1C,d1
		blo.s	loc_2469A
		move.b	#$1C,d1		; Maximum 28 different "scales"

loc_2469A:
		move.b	d1,$22(a0)	; Scale level correlates with mapping frame
		add.w	d1,d1
		move.w	word_2464A(pc,d1.w),d1
		move.w	(Software_Scaler_Unk).w,d2
		add.w	d1,d2
		cmpi.w	#$80,d2
		bhi.s	loc_246D2
		sub.w	d1,d2
		movem.l	d1/d5-a0/a2/a4,-(sp)
		lea	(Kos_decomp_buffer).w,a2
		add.w	d2,d0
		move.w	d0,$A(a0)
		lsl.w	#5,d2
		adda.w	d2,a2
		bsr.s	sub_246DA
		movem.l	(sp)+,d1/d5-a0/a2/a4
		add.w	d1,(Software_Scaler_Unk).w
		rts
; ---------------------------------------------------------------------------
		rts
; ---------------------------------------------------------------------------

loc_246D2:
		bclr	#7,4(a0)
		rts
; End of function sub_2468A


; =============== S U B R O U T I N E =======================================


sub_246DA:
		moveq	#0,d0
		move.b	$40(a0),d0		; Scale factor
		moveq	#0,d1
		move.b	$20(a0),d1
		movea.l	$42(a0),a1		; Scaled art address
		ror.w	#4,d1
		adda.l	d1,a1
		movea.l	a1,a0
		adda.w	#$1000,a0
		addi.w	#4,d0
		move.w	d0,d4
		lsr.w	#3,d4
		move.w	d0,d5
		ror.w	#3,d5
		andi.w	#$E000,d5
		move.w	#$F0,d6
		swap	d6
		move.w	#$F,d7
		swap	d7
		tst.w	d4
		beq.w	loc_249BA		; If modified scale factor smaller than 8, branch
		cmpi.w	#1,d4
		bne.s	loc_2472A		; If modified scale factor is not between 8-$10, branch
		tst.w	d5
		beq.w	loc_2493E		; If modified scale factor is 8, branch
		cmpi.w	#$2000,d5
		beq.w	loc_248B8		; If modified scale factor is 9, branch

loc_2472A:
		move.w	d4,d2			; All other instances. Scale factor/8 to d2
		swap	d2
		move.w	d5,d2
		lsr.l	#8,d2			; Combine with other scale factor to create final result: Scale factor << 5
		move.l	#$400000,d0
		divu.w	d2,d0
		lsr.w	#8,d0
		lsr.w	#3,d0
		subq.w	#1,d0			; Divide 400000 by modified scale factor << 5, subtract 1
		movea.w	d0,a5			; Note the result in a5
		moveq	#0,d2
		moveq	#0,d3
		lea	loc_2479C(pc),a6

loc_2474A:
		move.w	#$1F,d7

loc_2474E:
		swap	d7
		swap	d3
		move.w	#0,d2
		move.w	#0,d3
		movea.l	a2,a4
		move.w	a5,d6
		bmi.s	loc_24770

loc_24760:
		swap	d6
		jsr	(a6)
		swap	d6
		dbf	d6,loc_24760
		cmpi.w	#$40,d2
		bhs.s	loc_24778

loc_24770:
		swap	d6
		jsr	sub_24802(pc)
		swap	d6

loc_24778:
		swap	d3
		add.w	d5,d3
		bcc.s	loc_24782
		adda.w	#$40,a1

loc_24782:
		move.w	d4,d0
		lsl.w	#6,d0
		adda.w	d0,a1
		cmpa.l	a0,a1
		bhs.s	locret_2479A
		addq.w	#4,a2
		swap	d7
		dbf	d7,loc_2474E
		lea	$380(a2),a2
		bra.s	loc_2474A
; ---------------------------------------------------------------------------

locret_2479A:
		rts
; ---------------------------------------------------------------------------

loc_2479C:
		move.b	(a1,d2.w),d0
		add.w	d5,d3
		addx.w	d4,d2
		move.b	(a1,d2.w),d1
		add.w	d5,d3
		addx.w	d4,d2
		and.b	d6,d0
		and.b	d7,d1
		or.b	d1,d0
		move.b	d0,(a4)+
		move.b	(a1,d2.w),d0
		add.w	d5,d3
		addx.w	d4,d2
		move.b	(a1,d2.w),d1
		add.w	d5,d3
		addx.w	d4,d2
		and.b	d6,d0
		and.b	d7,d1
		or.b	d1,d0
		move.b	d0,(a4)+
		move.b	(a1,d2.w),d0
		add.w	d5,d3
		addx.w	d4,d2
		move.b	(a1,d2.w),d1
		add.w	d5,d3
		addx.w	d4,d2
		and.b	d6,d0
		and.b	d7,d1
		or.b	d1,d0
		move.b	d0,(a4)+
		move.b	(a1,d2.w),d0
		add.w	d5,d3
		addx.w	d4,d2
		move.b	(a1,d2.w),d1
		add.w	d5,d3
		addx.w	d4,d2
		and.b	d6,d0
		and.b	d7,d1
		or.b	d1,d0
		move.b	d0,(a4)+
		lea	$7C(a4),a4
		rts
; End of function sub_246DA


; =============== S U B R O U T I N E =======================================


sub_24802:
		move.b	(a1,d2.w),d0
		add.w	d5,d3
		addx.w	d4,d2
		cmpi.w	#$40,d2
		blo.s	loc_24814
		move.b	#0,d0

loc_24814:
		move.b	(a1,d2.w),d1
		add.w	d5,d3
		addx.w	d4,d2
		cmpi.w	#$40,d2
		blo.s	loc_24826
		move.b	#0,d1

loc_24826:
		and.b	d6,d0
		and.b	d7,d1
		or.b	d1,d0
		move.b	d0,(a4)+
		move.b	(a1,d2.w),d0
		add.w	d5,d3
		addx.w	d4,d2
		cmpi.w	#$40,d2
		blo.s	loc_24840
		move.b	#0,d0

loc_24840:
		move.b	(a1,d2.w),d1
		add.w	d5,d3
		addx.w	d4,d2
		cmpi.w	#$40,d2
		blo.s	loc_24852
		move.b	#0,d1

loc_24852:
		and.b	d6,d0
		and.b	d7,d1
		or.b	d1,d0
		move.b	d0,(a4)+
		move.b	(a1,d2.w),d0
		add.w	d5,d3
		addx.w	d4,d2
		cmpi.w	#$40,d2
		blo.s	loc_2486C
		move.b	#0,d0

loc_2486C:
		move.b	(a1,d2.w),d1
		add.w	d5,d3
		addx.w	d4,d2
		cmpi.w	#$40,d2
		blo.s	loc_2487E
		move.b	#0,d1

loc_2487E:
		and.b	d6,d0
		and.b	d7,d1
		or.b	d1,d0
		move.b	d0,(a4)+
		move.b	(a1,d2.w),d0
		add.w	d5,d3
		addx.w	d4,d2
		cmpi.w	#$40,d2
		blo.s	loc_24898
		move.b	#0,d0

loc_24898:
		move.b	(a1,d2.w),d1
		add.w	d5,d3
		addx.w	d4,d2
		cmpi.w	#$40,d2
		blo.s	loc_248AA
		move.b	#0,d1

loc_248AA:
		and.b	d6,d0
		and.b	d7,d1
		or.b	d1,d0
		move.b	d0,(a4)+
		lea	$7C(a4),a4
		rts
; End of function sub_24802

; ---------------------------------------------------------------------------

loc_248B8:
		moveq	#0,d3
		lsl.w	#6,d4
		lea	loc_24906(pc),a6
		move.w	#1,d7

loc_248C4:
		swap	d7
		move.w	#$1F,d6

loc_248CA:
		swap	d6
		movea.l	a1,a3
		movea.l	a2,a4
		jsr	(a6)
		jsr	(a6)
		jsr	(a6)
		jsr	(a6)
		jsr	(a6)
		jsr	(a6)
		jsr	(a6)
		move.b	(a3)+,d0
		and.b	d6,d0
		move.b	d0,(a4)+
		add.w	d5,d3
		bcc.s	loc_248EC
		lea	$40(a1),a1

loc_248EC:
		adda.w	d4,a1
		cmpa.l	a0,a1
		bhs.s	locret_24904
		addq.w	#4,a2
		swap	d6
		dbf	d6,loc_248CA
		lea	$380(a2),a2
		swap	d7
		dbf	d7,loc_248C4

locret_24904:
		rts
; ---------------------------------------------------------------------------

loc_24906:
		move.b	(a3)+,d0
		move.b	(a3)+,d1
		and.b	d6,d0
		and.b	d7,d1
		or.b	d1,d0
		move.b	d0,(a4)+
		move.b	(a3)+,d0
		move.b	(a3)+,d1
		and.b	d6,d0
		and.b	d7,d1
		or.b	d1,d0
		move.b	d0,(a4)+
		move.b	(a3)+,d0
		move.b	(a3)+,d1
		and.b	d6,d0
		and.b	d7,d1
		or.b	d1,d0
		move.b	d0,(a4)+
		move.b	(a3)+,d0
		move.b	(a3)+,d1
		addq.w	#1,a3
		and.b	d6,d0
		and.b	d7,d1
		or.b	d1,d0
		move.b	d0,(a4)+
		lea	$7C(a4),a4
		rts
; ---------------------------------------------------------------------------

loc_2493E:
		moveq	#0,d3
		lsl.w	#6,d4
		lea	loc_24984(pc),a6
		move.w	#1,d7

loc_2494A:
		swap	d7
		move.w	#$1F,d6

loc_24950:
		swap	d6
		movea.l	a1,a3
		movea.l	a2,a4
		jsr	(a6)
		jsr	(a6)
		jsr	(a6)
		jsr	(a6)
		jsr	(a6)
		jsr	(a6)
		jsr	(a6)
		jsr	(a6)
		add.w	d5,d3
		bcc.s	loc_2496E
		lea	$40(a1),a1

loc_2496E:
		adda.w	d4,a1
		addq.w	#4,a2
		swap	d6
		dbf	d6,loc_24950
		lea	$380(a2),a2
		swap	d7
		dbf	d7,loc_2494A
		rts
; ---------------------------------------------------------------------------

loc_24984:
		move.b	(a3)+,d0
		move.b	(a3)+,d1
		and.b	d6,d0
		and.b	d7,d1
		or.b	d1,d0
		move.b	d0,(a4)+
		move.b	(a3)+,d0
		move.b	(a3)+,d1
		and.b	d6,d0
		and.b	d7,d1
		or.b	d1,d0
		move.b	d0,(a4)+
		move.b	(a3)+,d0
		move.b	(a3)+,d1
		and.b	d6,d0
		and.b	d7,d1
		or.b	d1,d0
		move.b	d0,(a4)+
		move.b	(a3)+,d0
		move.b	(a3)+,d1
		and.b	d6,d0
		and.b	d7,d1
		or.b	d1,d0
		move.b	d0,(a4)+
		lea	$7C(a4),a4
		rts
; ---------------------------------------------------------------------------

loc_249BA:
		cmpi.w	#$E000,d5
		bne.w	loc_24A3C
		lea	loc_24A10(pc),a6
		moveq	#0,d3
		lsl.w	#6,d4
		move.w	#2,d7

loc_249CE:
		swap	d7
		move.w	#$1F,d6

loc_249D4:
		swap	d6
		movea.l	a1,a3
		movea.l	a2,a4
		jsr	(a6)
		jsr	(a6)
		jsr	(a6)
		jsr	(a6)
		jsr	(a6)
		jsr	(a6)
		jsr	(a6)
		jsr	(a6)
		jsr	(a6)
		move.b	(a3),(a4)
		add.w	d5,d3
		bcc.s	loc_249F6
		lea	$40(a1),a1

loc_249F6:
		adda.w	d4,a1
		cmpa.l	a0,a1
		bhs.s	locret_24A0E
		addq.w	#4,a2
		swap	d6
		dbf	d6,loc_249D4
		lea	$580(a2),a2
		swap	d7
		dbf	d7,loc_249CE

locret_24A0E:
		rts
; ---------------------------------------------------------------------------

loc_24A10:
		move.b	(a3)+,(a4)+
		move.b	(a3)+,d0
		move.b	(a3)+,d1
		and.b	d6,d0
		and.b	d7,d1
		or.b	d1,d0
		move.b	d0,(a4)+
		move.b	(a3)+,d0
		move.b	(a3)+,d1
		and.b	d6,d0
		and.b	d7,d1
		or.b	d1,d0
		move.b	d0,(a4)+
		move.b	(a3)+,d0
		move.b	(a3)+,d1
		and.b	d6,d0
		and.b	d7,d1
		or.b	d1,d0
		move.b	d0,(a4)+
		lea	$7C(a4),a4
		rts
; ---------------------------------------------------------------------------

loc_24A3C:
		cmpi.w	#$C000,d5
		bne.w	loc_24AC6
		moveq	#0,d3
		lsl.w	#6,d4
		lea	loc_24AA4(pc),a6
		move.w	#3,d7

loc_24A50:
		swap	d7
		move.w	#$1F,d6

loc_24A56:
		swap	d6
		movea.l	a1,a3
		movea.l	a2,a4
		jsr	(a6)
		jsr	(a6)
		jsr	(a6)
		jsr	(a6)
		jsr	(a6)
		jsr	(a6)
		jsr	(a6)
		jsr	(a6)
		jsr	(a6)
		jsr	(a6)
		move.b	(a3)+,(a4)+
		move.b	(a3)+,d0
		move.b	(a3)+,d1
		and.b	d6,d0
		and.b	d7,d1
		or.b	d1,d0
		move.b	d0,(a4)+
		move.b	(a3),d0
		move.b	d0,(a4)
		add.w	d5,d3
		bcc.s	loc_24A8A
		lea	$40(a1),a1

loc_24A8A:
		adda.w	d4,a1
		cmpa.l	a0,a1
		bhs.s	locret_24AA2
		addq.w	#4,a2
		swap	d6
		dbf	d6,loc_24A56
		lea	$580(a2),a2
		swap	d7
		dbf	d7,loc_24A50

locret_24AA2:
		rts
; ---------------------------------------------------------------------------

loc_24AA4:
		move.b	(a3)+,(a4)+
		move.b	(a3)+,d0
		move.b	(a3)+,d1
		and.b	d6,d0
		and.b	d7,d1
		or.b	d1,d0
		move.b	d0,(a4)+
		move.b	(a3)+,(a4)+
		move.b	(a3)+,d0
		move.b	(a3)+,d1
		and.b	d6,d0
		and.b	d7,d1
		or.b	d1,d0
		move.b	d0,(a4)+
		lea	$7C(a4),a4
		rts
; ---------------------------------------------------------------------------

loc_24AC6:
		cmpi.w	#$A000,d5
		bne.w	loc_24B60
		moveq	#0,d3
		lsl.w	#6,d4
		lea	loc_24B4A(pc),a5
		lea	loc_24B32(pc),a6
		move.w	#3,d7

loc_24ADE:
		swap	d7
		move.w	#$1F,d6

loc_24AE4:
		swap	d6
		movea.l	a1,a3
		movea.l	a2,a4
		jsr	(a5)
		jsr	(a6)
		jsr	(a5)
		jsr	(a6)
		jsr	(a5)
		jsr	(a6)
		jsr	(a5)
		jsr	(a6)
		jsr	(a5)
		jsr	(a6)
		jsr	(a5)
		jsr	(a6)
		move.w	(a3)+,(a4)+
		move.b	(a3)+,d0
		move.b	(a3)+,d1
		and.b	d6,d0
		and.b	d7,d1
		or.b	d1,d0
		move.b	d0,(a4)+
		add.w	d5,d3
		bcc.s	loc_24B18
		lea	$40(a1),a1

loc_24B18:
		adda.w	d4,a1
		cmpa.l	a0,a1
		bhs.s	locret_24B30
		addq.w	#4,a2
		swap	d6
		dbf	d6,loc_24AE4
		lea	$780(a2),a2
		swap	d7
		dbf	d7,loc_24ADE

locret_24B30:
		rts
; ---------------------------------------------------------------------------

loc_24B32:
		move.b	(a3)+,(a4)+
		move.b	(a3)+,(a4)+
		move.b	(a3)+,d0
		move.b	(a3)+,d1
		and.b	d6,d0
		and.b	d7,d1
		or.b	d1,d0
		move.b	d0,(a4)+
		move.b	(a3)+,(a4)+
		lea	$7C(a4),a4
		rts
; ---------------------------------------------------------------------------

loc_24B4A:
		move.w	(a3)+,(a4)+
		move.b	(a3)+,d0
		move.b	(a3)+,d1
		and.b	d6,d0
		and.b	d7,d1
		or.b	d1,d0
		move.b	d0,(a4)+
		move.b	(a3)+,(a4)+
		lea	$7C(a4),a4
		rts
; ---------------------------------------------------------------------------

loc_24B60:
		moveq	#0,d3
		lsl.w	#6,d4
		moveq	#3,d7

loc_24B66:
		move.w	#$1F,d6

loc_24B6A:
		movea.l	a1,a3
		movea.l	a2,a4
		move.l	(a3)+,(a4)
		lea	$80(a4),a4
		move.l	(a3)+,(a4)
		lea	$80(a4),a4
		move.l	(a3)+,(a4)
		lea	$80(a4),a4
		move.l	(a3)+,(a4)
		lea	$80(a4),a4
		move.l	(a3)+,(a4)
		lea	$80(a4),a4
		move.l	(a3)+,(a4)
		lea	$80(a4),a4
		move.l	(a3)+,(a4)
		lea	$80(a4),a4
		move.l	(a3)+,(a4)
		lea	$80(a4),a4
		move.l	(a3)+,(a4)
		lea	$80(a4),a4
		move.l	(a3)+,(a4)
		lea	$80(a4),a4
		move.l	(a3)+,(a4)
		lea	$80(a4),a4
		move.l	(a3)+,(a4)
		lea	$80(a4),a4
		move.l	(a3)+,(a4)
		lea	$80(a4),a4
		move.l	(a3)+,(a4)
		lea	$80(a4),a4
		move.l	(a3)+,(a4)
		lea	$80(a4),a4
		move.l	(a3)+,(a4)
		lea	$80(a4),a4
		add.w	d5,d3
		bcc.s	loc_24BD6
		lea	$40(a1),a1

loc_24BD6:
		adda.w	d4,a1
		addq.w	#4,a2
		dbf	d6,loc_24B6A
		lea	$780(a2),a2
		dbf	d7,loc_24B66
		rts
; ---------------------------------------------------------------------------
Map_ScaledArt:	include "General/Sprites/Level Misc/Map - Scaled Art.asm"

; ---------------------------------------------------------------------------

Obj_0E:

		lea	(Player_1).w,a1
		bsr.s	sub_24D9A
		lea	(Player_2).w,a1
		bsr.s	sub_24D9A
		move.w	$10(a0),d0
		andi.w	#$FF80,d0
		sub.w	(Camera_X_pos_coarse_back).w,d0
		cmpi.w	#$280,d0
		bhi.s	loc_24D88
		rts
; ---------------------------------------------------------------------------

loc_24D88:
		move.w	respawn_addr(a0),d0
		beq.s	loc_24D94
		movea.w	d0,a2
		bclr	#7,(a2)

loc_24D94:
		jmp	Delete_Current_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_24D9A:

		btst	#1,$2A(a1)
		bne.w	locret_24E32
		move.w	$10(a1),d0
		addi.w	#$10,d0
		sub.w	$10(a0),d0
		bcs.w	locret_24E32
		cmpi.w	#$20,d0
		bge.w	locret_24E32
		move.w	$14(a1),d0
		sub.w	$14(a0),d0
		cmpi.w	#-$14,d0
		blt.s	locret_24E32
		cmpi.w	#$20,d0
		bgt.s	locret_24E32
		tst.b	$2E(a1)
		bne.s	locret_24E32
		btst	#0,$2A(a0)
		bne.s	loc_24DEE
		cmpi.w	#$400,$18(a1)
		blt.s	locret_24E32
		addi.w	#$400,$18(a1)
		bra.s	loc_24DFC
; ---------------------------------------------------------------------------

loc_24DEE:
		cmpi.w	#-$400,$18(a1)
		bgt.s	locret_24E32
		subi.w	#$400,$18(a1)

loc_24DFC:
		move.w	#-$700,$1A(a1)
		bset	#1,$2A(a1)
		move.b	#2,5(a1)
		move.w	#1,$1C(a1)
		move.b	#1,$27(a1)
		move.b	#0,$20(a1)
		move.b	#0,$30(a1)
		move.b	#4,$31(a1)
		move.b	#5,$2D(a1)

locret_24E32:

		rts
; End of function sub_24D9A

; ---------------------------------------------------------------------------
byte_24E34:	dc.b $20
		dc.b 8
		dc.b 0
		dc.b 0
		dc.b $20
		dc.b 8
		dc.b 1
		dc.b 0
; ---------------------------------------------------------------------------

Obj_LBZMovingPlatform:

		move.l	#Map_LBZMovingPlatform,$C(a0)
		move.w	#$43C3,$A(a0)
		move.b	#4,4(a0)
		move.w	#prio(3),8(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		bpl.s	loc_24E6E
		andi.w	#$7F,d0
		lsl.w	#4,d0
		move.w	d0,$38(a0)
		moveq	#$17,d0
		move.b	d0,$2C(a0)

loc_24E6E:
		lsr.w	#2,d0
		andi.w	#$1C,d0
		lea	byte_24E34(pc,d0.w),a2
		move.b	(a2)+,7(a0)
		move.b	(a2)+,6(a0)
		move.b	(a2)+,$22(a0)
		move.w	$10(a0),$30(a0)
		move.w	$10(a0),$32(a0)
		move.w	$14(a0),$34(a0)
		move.b	$2A(a0),$2E(a0)
		move.w	#$280,$42(a0)
		move.w	$10(a0),$44(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		andi.w	#$F,d0
		subq.w	#8,d0
		bcs.s	loc_24EDE
		cmpi.w	#4,d0
		bhs.s	loc_24ED2
		lsl.w	#2,d0
		lea	(OscNumbers+$2C).w,a2
		lea	(a2,d0.w),a2
		tst.w	(a2)
		bpl.s	loc_24EDE
		bchg	#0,$2E(a0)
		bra.s	loc_24EDE
; ---------------------------------------------------------------------------

loc_24ED2:
		move.w	#$380,$42(a0)
		addi.w	#$100,$44(a0)

loc_24EDE:

		move.b	$2C(a0),d0
		andi.b	#$F,d0
		add.b	d0,d0
		move.b	d0,$2C(a0)
		move.l	#loc_24EF2,(a0)

loc_24EF2:
		move.w	$10(a0),-(sp)
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	off_24F58(pc,d0.w),d1
		jsr	off_24F58(pc,d1.w)

		move.w	(sp)+,d4
		moveq	#0,d1
		move.b	7(a0),d1
		move.w	#9,d3
		jsr	SolidObjectTop.w

loc_24F1C:

		move.w	$44(a0),d0
		andi.w	#$FF80,d0
		sub.w	(Camera_X_pos_coarse_back).w,d0
		cmp.w	$42(a0),d0
		bhi.w	loc_24F36
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_24F36:
		tst.b	$3D(a0)
		beq.s	loc_24F46
		movea.w	$3E(a0),a1
		jsr	Delete_Referenced_Sprite.w

loc_24F46:
		move.w	respawn_addr(a0),d0
		beq.s	loc_24F52
		movea.w	d0,a2
		bclr	#7,(a2)

loc_24F52:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------
off_24F58:	dc.w loc_24F90-off_24F58
		dc.w loc_24FC8-off_24F58
		dc.w loc_24FD4-off_24F58
		dc.w loc_24FF6-off_24F58
		dc.w loc_25002-off_24F58
		dc.w loc_25024-off_24F58
		dc.w loc_2503E-off_24F58
		dc.w loc_2505C-off_24F58
		dc.w loc_25278-off_24F58
		dc.w loc_2528A-off_24F58
		dc.w loc_2529A-off_24F58
		dc.w loc_252AA-off_24F58
		dc.w loc_250AC-off_24F58
		dc.w loc_25108-off_24F58
		dc.w loc_25132-off_24F58
off_24F76:	dc.w loc_24F90-off_24F76
		dc.w loc_24FC8-off_24F76
		dc.w loc_24FD4-off_24F76
		dc.w loc_24FF6-off_24F76
		dc.w loc_25002-off_24F76
		dc.w loc_25024-off_24F76
		dc.w loc_2503E-off_24F76
		dc.w loc_251E4-off_24F76
		dc.w loc_25278-off_24F76
		dc.w loc_2528A-off_24F76
		dc.w loc_2529A-off_24F76
		dc.w loc_252AA-off_24F76
		dc.w loc_250AC-off_24F76
; ---------------------------------------------------------------------------

loc_24F90:

		move.b	$2A(a0),d0
		andi.b	#$18,d0
		bne.s	loc_24FA6
		tst.b	$3A(a0)
		beq.s	loc_24FB2
		subq.b	#4,$3A(a0)
		bra.s	loc_24FB2
; ---------------------------------------------------------------------------

loc_24FA6:
		cmpi.b	#$40,$3A(a0)
		beq.s	loc_24FB2
		addq.b	#4,$3A(a0)

loc_24FB2:

		move.b	$3A(a0),d0
		jsr	GetSineCosine.w
		asr.w	#6,d0
		add.w	$34(a0),d0
		move.w	d0,$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_24FC8:

		move.w	#$40,d1
		moveq	#0,d0
		move.b	(OscNumbers+$A).w,d0
		bra.s	sub_24FDE
; ---------------------------------------------------------------------------

loc_24FD4:

		move.w	#$80,d1
		moveq	#0,d0
		move.b	(OscNumbers+$1E).w,d0

; =============== S U B R O U T I N E =======================================


sub_24FDE:

		btst	#0,$2A(a0)
		beq.s	loc_24FEA
		neg.w	d0
		add.w	d1,d0

loc_24FEA:
		move.w	$30(a0),d1
		add.w	d0,d1
		move.w	d1,$10(a0)
		rts
; End of function sub_24FDE

; ---------------------------------------------------------------------------

loc_24FF6:

		move.w	#$40,d1
		moveq	#0,d0
		move.b	(OscNumbers+$A).w,d0
		bra.s	loc_2500C
; ---------------------------------------------------------------------------

loc_25002:

		move.w	#$80,d1
		moveq	#0,d0
		move.b	(OscNumbers+$1E).w,d0

loc_2500C:

		btst	#0,$2A(a0)
		beq.s	loc_25018
		neg.w	d0
		add.w	d1,d0

loc_25018:
		move.w	$34(a0),d1
		sub.w	d0,d1
		move.w	d1,$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_25024:

		move.w	#$80,d1
		moveq	#0,d0
		move.b	(OscNumbers+$1E).w,d0
		bsr.s	sub_24FDE
		move.w	#$40,d1
		moveq	#0,d0
		move.b	(OscNumbers+$1E).w,d0
		lsr.b	#1,d0
		bra.s	loc_2500C
; ---------------------------------------------------------------------------

loc_2503E:

		move.w	#$80,d1
		moveq	#0,d0
		move.b	(OscNumbers+$1E).w,d0
		neg.w	d0
		add.w	d1,d0
		bsr.s	sub_24FDE
		move.w	#$40,d1
		moveq	#0,d0
		move.b	(OscNumbers+$1E).w,d0
		lsr.b	#1,d0
		bra.s	loc_2500C
; ---------------------------------------------------------------------------

loc_2505C:
		move.b	$2A(a0),d0
		andi.b	#$18,d0
		bne.s	loc_2507C
		move.w	$38(a0),d2
		move.w	$36(a0),d1
		beq.s	locret_250AA
		subq.w	#4,d1
		bcc.s	loc_25076
		moveq	#0,d1

loc_25076:
		move.w	d1,$36(a0)
		bra.s	loc_25090
; ---------------------------------------------------------------------------

loc_2507C:
		move.w	$38(a0),d2
		move.w	$36(a0),d1
		addq.w	#2,d1
		cmp.w	d2,d1
		blo.s	loc_2508C
		move.w	d2,d1

loc_2508C:
		move.w	d1,$36(a0)

loc_25090:
		move.w	$32(a0),d0
		sub.w	d1,d0
		move.w	d0,$10(a0)
		move.w	d0,$30(a0)
		lsr.w	#1,d1
		move.w	$34(a0),d0
		sub.w	d1,d0
		move.w	d0,$14(a0)

locret_250AA:
		rts
; ---------------------------------------------------------------------------

loc_250AC:

		move.w	#$7F,d2
		tst.b	$3C(a0)
		bne.s	loc_250D2
		move.w	$40(a0),d1
		addq.w	#4,d1
		move.w	d1,$40(a0)
		add.w	d1,$36(a0)
		cmp.b	$36(a0),d2
		bhi.s	loc_250EC
		move.b	#1,$3C(a0)
		bra.s	loc_250EC
; ---------------------------------------------------------------------------

loc_250D2:
		move.w	$40(a0),d1
		subq.w	#4,d1
		move.w	d1,$40(a0)
		add.w	d1,$36(a0)
		cmp.b	$36(a0),d2
		bls.s	loc_250EC
		move.b	#0,$3C(a0)

loc_250EC:

		moveq	#0,d0
		move.b	$36(a0),d0
		btst	#0,$2A(a0)
		beq.s	loc_250FE
		neg.w	d0
		add.w	d2,d0

loc_250FE:
		add.w	$30(a0),d0
		move.w	d0,$10(a0)
		rts
; ---------------------------------------------------------------------------

loc_25108:
		tst.w	$3A(a0)
		bne.s	loc_25120
		move.b	$2A(a0),d0
		andi.b	#$18,d0
		beq.s	locret_2511E
		move.w	#$1E,$3A(a0)

locret_2511E:

		rts
; ---------------------------------------------------------------------------

loc_25120:
		subq.w	#1,$3A(a0)
		bne.s	locret_2511E
		move.w	#$20,$3A(a0)
		addq.b	#2,$2C(a0)
		rts
; ---------------------------------------------------------------------------

loc_25132:
		tst.w	$3A(a0)
		beq.s	loc_25160
		subq.w	#1,$3A(a0)
		bne.s	loc_25160
		bclr	#3,$2A(a0)
		beq.s	loc_2514C
		lea	(Player_1).w,a1
		bsr.s	sub_25194

loc_2514C:
		bclr	#4,$2A(a0)
		beq.s	loc_2515A
		lea	(Player_2).w,a1
		bsr.s	sub_25194

loc_2515A:
		move.l	#loc_251AE,(a0)

loc_25160:

		move.l	$14(a0),d3
		move.w	$1A(a0),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d3
		move.l	d3,$14(a0)
		addi.w	#$38,$1A(a0)
		move.w	(Camera_max_Y_pos).w,d0
		addi.w	#$120,d0
		cmp.w	$14(a0),d0
		bhs.s	locret_25192
		move.w	#$7F00,$10(a0)
		move.w	#$7F00,$44(a0)

locret_25192:
		rts

; =============== S U B R O U T I N E =======================================


sub_25194:

		bset	#1,$2A(a1)
		bclr	#3,$2A(a1)
		move.b	#2,5(a1)
		move.w	$1A(a0),$1A(a1)
		rts
; End of function sub_25194

; ---------------------------------------------------------------------------

loc_251AE:
		move.l	$14(a0),d3
		move.w	$1A(a0),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d3
		move.l	d3,$14(a0)
		addi.w	#$38,$1A(a0)
		move.w	(Camera_max_Y_pos).w,d0
		addi.w	#$120,d0
		cmp.w	$14(a0),d0
		bhs.s	loc_251E0
		move.w	#$7F00,$10(a0)
		move.w	#$7F00,$44(a0)

loc_251E0:
		bra.w	loc_24F1C
; ---------------------------------------------------------------------------

loc_251E4:
		tst.b	$3C(a0)
		bne.s	loc_25202
		move.b	$2A(a0),d0
		andi.b	#$18,d0
		beq.s	locret_25200
		move.b	#1,$3C(a0)
		move.b	#$C,$1E(a0)

locret_25200:
		rts
; ---------------------------------------------------------------------------

loc_25202:
		jsr	MoveSprite2.w
		moveq	#8,d1
		move.w	$34(a0),d0
		subi.w	#$80,d0
		cmp.w	$14(a0),d0
		bhs.s	loc_2521E
		neg.w	d1
		add.w	d1,$1A(a0)

loc_2521E:
		jsr	ObjCheckCeilingDist.w
		tst.w	d1
		bpl.s	loc_25236
		sub.w	d1,$14(a0)
		clr.b	$3C(a0)
		clr.w	$1A(a0)
		rts
; ---------------------------------------------------------------------------

loc_25236:
		btst	#3,$2A(a0)
		beq.s	loc_25256
		move.l	a0,-(sp)
		lea	(Player_1).w,a0
		jsr	sub_F846.w
		tst.w	d1
		bpl.s	loc_25254
		jsr	(Kill_Character).l

loc_25254:
		movea.l	(sp)+,a0

loc_25256:
		btst	#4,$2A(a0)
		beq.s	locret_25276
		move.l	a0,-(sp)
		lea	(Player_2).w,a0
		jsr	sub_F846.w
		tst.w	d1
		bpl.s	loc_25274
		jsr	(Kill_Character).l

loc_25274:
		movea.l	(sp)+,a0

locret_25276:
		rts
; ---------------------------------------------------------------------------

loc_25278:

		move.w	#$10,d1
		moveq	#0,d0
		move.b	(OscNumbers+$2A).w,d0
		lsr.w	#1,d0
		move.w	(OscNumbers+$2C).w,d3
		bra.s	loc_252B8
; ---------------------------------------------------------------------------

loc_2528A:

		move.w	#$30,d1
		moveq	#0,d0
		move.b	(OscNumbers+$2E).w,d0
		move.w	(OscNumbers+$30).w,d3
		bra.s	loc_252B8
; ---------------------------------------------------------------------------

loc_2529A:

		move.w	#$50,d1
		moveq	#0,d0
		move.b	(OscNumbers+$32).w,d0
		move.w	(OscNumbers+$34).w,d3
		bra.s	loc_252B8
; ---------------------------------------------------------------------------

loc_252AA:

		move.w	#$70,d1
		moveq	#0,d0
		move.b	(OscNumbers+$36).w,d0
		move.w	(OscNumbers+$38).w,d3

loc_252B8:

		tst.w	d3
		bne.s	loc_252C6
		addq.b	#1,$2E(a0)
		andi.b	#3,$2E(a0)

loc_252C6:
		move.b	$2E(a0),d2
		andi.b	#3,d2
		bne.s	loc_252E6
		sub.w	d1,d0
		add.w	$30(a0),d0
		move.w	d0,$10(a0)
		neg.w	d1
		add.w	$34(a0),d1
		move.w	d1,$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_252E6:
		subq.b	#1,d2
		bne.s	loc_25304
		subq.w	#1,d1
		sub.w	d1,d0
		neg.w	d0
		add.w	$34(a0),d0
		move.w	d0,$14(a0)
		addq.w	#1,d1
		add.w	$30(a0),d1
		move.w	d1,$10(a0)
		rts
; ---------------------------------------------------------------------------

loc_25304:
		subq.b	#1,d2
		bne.s	loc_25322
		subq.w	#1,d1
		sub.w	d1,d0
		neg.w	d0
		add.w	$30(a0),d0
		move.w	d0,$10(a0)
		addq.w	#1,d1
		add.w	$34(a0),d1
		move.w	d1,$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_25322:
		sub.w	d1,d0
		add.w	$34(a0),d0
		move.w	d0,$14(a0)
		neg.w	d1
		add.w	$30(a0),d1
		move.w	d1,$10(a0)
		rts
; ---------------------------------------------------------------------------
Map_LBZMovingPlatform:include "Levels/LBZ/Misc Object Data/Map - Moving Platform.asm"

; ---------------------------------------------------------------------------

Obj_1D_1:
		jsr	Create_New_Sprite3.w
		bne.w	loc_253BE
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		move.b	$2A(a0),$2A(a1)
		move.l	#Map_LBZPlatformUndersideUnused,$C(a1)
		move.w	#$42EA,$A(a1)
		move.b	#4,4(a1)
		move.w	#prio(3),8(a1)
		move.b	#$20,7(a1)
		move.b	#$10,6(a1)
		move.w	a0,$3E(a1)
		move.l	#loc_253C2,(a1)
		move.w	a1,$3E(a0)
		move.b	#1,$3D(a0)

loc_253BE:
		bra.w	Obj_LBZMovingPlatform
; ---------------------------------------------------------------------------

loc_253C2:
		move.w	$10(a0),d4
		movea.w	$3E(a0),a1
		move.w	$10(a1),$10(a0)
		move.w	$14(a1),$14(a0)
		sub.w	$10(a1),d4
		bsr.s	sub_253E2
		jmp	Draw_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_253E2:
		lea	$33(a0),a2
		lea	(Player_2).w,a1
		move.w	(Ctrl_2).w,d0
		bsr.s	i
		lea	(Player_1).w,a1
		subq.w	#1,a2
		move.w	(Ctrl_1).w,d0
; End of function sub_253E2


; =============== S U B R O U T I N E =======================================


i:
		tst.b	(a2)
		beq.w	loc_25476
		tst.b	4(a1)
		bpl.s	loc_25456
		cmpi.b	#4,5(a1)
		bhs.s	loc_25456
		andi.b	#$70,d0
		beq.w	loc_25464
		clr.b	$2E(a1)
		clr.b	(a2)
		move.b	#$12,2(a2)
		andi.w	#$F00,d0
		beq.w	loc_25430
		move.b	#$3C,2(a2)

loc_25430:
		btst	#$A,d0
		beq.s	loc_2543C
		move.w	#-$200,$18(a1)

loc_2543C:
		btst	#$B,d0
		beq.s	loc_25448
		move.w	#$200,$18(a1)

loc_25448:
		move.w	#-$380,$1A(a1)
		bset	#1,$2A(a1)
		rts
; ---------------------------------------------------------------------------

loc_25456:
		clr.b	$2E(a1)
		clr.b	(a2)
		move.b	#$3C,2(a2)
		rts
; ---------------------------------------------------------------------------

loc_25464:
		sub.w	d4,$10(a1)
		move.w	$14(a0),$14(a1)
		addi.w	#$24,$14(a1)
		rts
; ---------------------------------------------------------------------------

loc_25476:
		tst.b	2(a2)
		beq.s	loc_25484
		subq.b	#1,2(a2)
		bne.w	locret_254E8

loc_25484:
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		addi.w	#$1C,d0
		cmpi.w	#$38,d0
		bhs.w	locret_254E8
		move.w	$14(a1),d1
		sub.w	$14(a0),d1
		subi.w	#$18,d1
		cmpi.w	#$18,d1
		bhs.w	locret_254E8
		tst.b	$2E(a1)
		bne.s	locret_254E8
		cmpi.b	#4,5(a1)
		bhs.s	locret_254E8
		tst.b	(Debug_On).w
		bne.s	locret_254E8
		clr.w	$18(a1)
		clr.w	$1A(a1)
		clr.w	$1C(a1)
		move.w	$14(a0),$14(a1)
		addi.w	#$24,$14(a1)
		move.b	#$14,$20(a1)
		move.b	#1,$2E(a1)
		move.b	#1,(a2)

locret_254E8:
		rts
; End of function i

; ---------------------------------------------------------------------------
Map_LBZPlatformUndersideUnused:	include "Levels/LBZ/Misc Object Data/Map - Floating Platform Underside (Unused).asm"
; ---------------------------------------------------------------------------

Obj_FloatingPlatform:
		cmpi.w	#0,(Current_zone_and_act).w
		bne.s	loc_2551C
		move.l	#Map_AIZFloatingPlatform,$C(a0)
		move.w	#$43F7,$A(a0)

loc_2551C:
		cmpi.w	#1,(Current_zone_and_act).w
		bne.s	loc_25532
		move.l	#Map_AIZFloatingPlatform,$C(a0)
		move.w	#$4440,$A(a0)

loc_25532:
		cmpi.b	#1,(Current_zone).w
		bne.s	loc_25548
		move.l	#Map_HCZFloatingPlatform,$C(a0)
		move.w	#$441D,$A(a0)

loc_25548:
		cmpi.b	#2,(Current_zone).w
		bne.s	loc_2555E
		move.l	#Map_MGZFloatingPlatform,$C(a0)
		move.w	#$4001,$A(a0)

		cmp.b	#$FF,$2C(a0)		; NAT: Check if special plat
		bne.s	loc_2555E		; if not, forgetit
		btst	#5,OptionsBits.w	; Check if bosses are on
		beq.w	loc_2564E		; if not, branch
		clr.b	$2C(a0)			; set subtype to 0

loc_2555E:
		move.b	#4,4(a0)
		move.w	#prio(3),8(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		lsr.w	#2,d0
		andi.w	#$1C,d0
		lea	byte_254FA(pc,d0.w),a2
		move.b	(a2)+,7(a0)
		move.b	(a2)+,6(a0)
		move.b	(a2)+,$22(a0)
		move.w	$10(a0),$30(a0)
		move.w	$10(a0),$32(a0)
		move.w	$14(a0),$34(a0)
		move.b	$2A(a0),$2E(a0)
		move.w	#$280,$42(a0)
		move.w	$10(a0),$44(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		andi.w	#$F,d0
		subq.w	#8,d0
		bcs.s	loc_255E0
		cmpi.w	#4,d0
		bhs.s	loc_255D4
		lsl.w	#2,d0
		lea	(OscNumbers+$2C).w,a2
		lea	(a2,d0.w),a2
		tst.w	(a2)
		bpl.s	loc_255E0
		bchg	#0,$2E(a0)
		bra.s	loc_255E0
; ---------------------------------------------------------------------------

byte_254FA:	dc.b $20
		dc.b $20
		dc.b 0
		dc.b 0
		dc.b $18
		dc.b $C
		dc.b 0
		dc.b 0
		dc.b $20
		dc.b $14
		dc.b 0
		dc.b 0
; ---------------------------------------------------------------------------

loc_255D4:
		move.w	#$380,$42(a0)
		addi.w	#$100,$44(a0)

loc_255E0:

		move.b	$2C(a0),d0
		andi.b	#$F,d0
		add.b	d0,d0
		move.b	d0,$2C(a0)
		move.l	#loc_255F4,(a0)

loc_255F4:
		move.w	$10(a0),-(sp)
		moveq	#0,d0
		move.b	$2C(a0),d0
		lea	(off_24F76).l,a1
		move.w	(a1,d0.w),d1
		jsr	(a1,d1.w)
		move.w	(sp)+,d4

		moveq	#0,d1
		move.b	7(a0),d1
		moveq	#0,d3
		move.b	6(a0),d3
		addq.w	#1,d3
		jsr	SolidObjectTop.w

loc_25628:
		move.w	$44(a0),d0
		andi.w	#-$80,d0
		sub.w	(Camera_X_pos_coarse_back).w,d0
		cmp.w	$42(a0),d0
		bhi.w	loc_25642
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_25642:
		move.w	respawn_addr(a0),d0
		beq.s	loc_2564E
		movea.w	d0,a2
		bclr	#7,(a2)

loc_2564E:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------
Map_MGZFloatingPlatform:include "Levels/MGZ/Misc Object Data/Map - Floating Platform.asm"

Map_HCZFloatingPlatform:include "Levels/HCZ/Misc Object Data/Map - Floating Platform.asm"

Map_AIZFloatingPlatform:include "Levels/AIZ/Misc Object Data/Map - Floating Platform.asm"

; ---------------------------------------------------------------------------

Obj_HCZSnakeBlocks:

		move.l	#Map_HCZFloatingPlatform,$C(a0)
		move.w	#$28,$A(a0)
		move.b	#4,4(a0)
		move.w	#prio(3),8(a0)
		move.b	#$10,7(a0)
		move.b	#$10,6(a0)
		move.b	#1,$22(a0)
		move.w	$10(a0),$30(a0)
		move.w	$14(a0),$34(a0)
		move.b	$2A(a0),$2E(a0)
		moveq	#1,d0
		move.b	$2C(a0),d1
		bpl.s	loc_25706
		neg.w	d0

loc_25706:
		move.b	d0,$40(a0)
		andi.b	#$7F,d1
		move.b	d1,$26(a0)
		move.w	#$280,$42(a0)
		move.w	$10(a0),$44(a0)
		move.l	#loc_25724,(a0)

loc_25724:
		bsr.s	sub_25770
		moveq	#0,d1
		move.b	7(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		move.w	$44(a0),d0
		andi.w	#$FF80,d0
		sub.w	(Camera_X_pos_coarse_back).w,d0
		cmp.w	$42(a0),d0
		bhi.w	loc_2575E
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_2575E:
		move.w	respawn_addr(a0),d0
		beq.s	loc_2576A
		movea.w	d0,a2
		bclr	#7,(a2)

loc_2576A:
		jmp	Delete_Current_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_25770:
		move.b	$40(a0),d0
		bpl.s	loc_2579A
		add.b	d0,$26(a0)
		bcs.s	loc_25786
		subq.b	#1,$2E(a0)
		andi.b	#3,$2E(a0)

loc_25786:
		move.w	#$40,d2
		move.b	$26(a0),d0
		cmpi.b	#$80,d0
		bhs.s	loc_257BC
		move.b	#$80,d0
		bra.s	loc_257BC
; ---------------------------------------------------------------------------

loc_2579A:
		add.b	d0,$26(a0)
		bne.s	loc_257AA
		addq.b	#1,$2E(a0)
		andi.b	#3,$2E(a0)

loc_257AA:
		move.w	#$40,d2
		move.b	$26(a0),d0
		cmpi.b	#$80,d0
		bhs.s	loc_257BC
		move.b	#$80,d0

loc_257BC:

		jsr	GetSineCosine.w
		asr.w	#2,d1
		move.b	$2E(a0),d3
		andi.b	#3,d3
		bne.s	loc_257E2
		add.w	$30(a0),d1
		move.w	d1,$10(a0)
		neg.w	d2
		add.w	$34(a0),d2
		move.w	d2,$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_257E2:
		subq.b	#1,d3
		bne.s	loc_257F8
		add.w	$34(a0),d1
		move.w	d1,$14(a0)
		add.w	$30(a0),d2
		move.w	d2,$10(a0)
		rts
; ---------------------------------------------------------------------------

loc_257F8:
		subq.b	#1,d3
		bne.s	loc_25810
		neg.w	d1
		add.w	$30(a0),d1
		move.w	d1,$10(a0)
		add.w	$34(a0),d2
		move.w	d2,$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_25810:
		neg.w	d1
		add.w	$34(a0),d1
		move.w	d1,$14(a0)
		neg.w	d2
		add.w	$30(a0),d2
		move.w	d2,$10(a0)
		rts
; End of function sub_25770

; ---------------------------------------------------------------------------
byte_25826:	dc.b $20
		dc.b $20
		dc.b 0
		dc.b 0
		dc.b $20
		dc.b $20
		dc.b 1
		dc.b 0
; ---------------------------------------------------------------------------

Obj_LRZSolidMovingPlatforms:

		move.l	#Map_LRZSolidMovingPlatforms,$C(a0)
		move.w	#$4090,$A(a0)
		move.b	#4,4(a0)
		move.w	#prio(3),8(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		lsr.w	#2,d0
		andi.w	#$1C,d0
		lea	byte_25826(pc,d0.w),a2
		move.b	(a2)+,7(a0)
		move.b	(a2)+,6(a0)
		move.b	(a2)+,$22(a0)
		move.w	$10(a0),$30(a0)
		move.w	$14(a0),$34(a0)
		move.b	$2C(a0),d0
		andi.w	#$F,d0
		add.w	d0,d0
		move.w	off_258BC(pc,d0.w),d0
		lea	off_258BC(pc,d0.w),a1
		move.l	a1,$42(a0)
		move.l	#loc_2588C,(a0)

loc_2588C:
		move.w	$10(a0),-(sp)
		movea.l	$42(a0),a1
		jsr	(a1)
		move.w	(sp)+,d4
		moveq	#0,d1
		move.b	7(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		jsr	SolidObjectFull.w
		move.w	$30(a0),d0
		jmp	Sprite_OnScreen_Test2.w
; ---------------------------------------------------------------------------
off_258BC:	dc.w locret_258CE-off_258BC

		dc.w loc_258D0-off_258BC
		dc.w loc_258DC-off_258BC
		dc.w loc_25924-off_258BC
		dc.w loc_258FA-off_258BC
		dc.w loc_25906-off_258BC
		dc.w loc_25938-off_258BC
		dc.w loc_2594C-off_258BC
		dc.w loc_25960-off_258BC
; ---------------------------------------------------------------------------

locret_258CE:

		rts
; ---------------------------------------------------------------------------

loc_258D0:

		moveq	#0,d0
		move.b	(OscNumbers+$A).w,d0
		subi.w	#$20,d0
		bra.s	loc_258E6
; ---------------------------------------------------------------------------

loc_258DC:

		moveq	#0,d0
		move.b	(OscNumbers+$1E).w,d0
		subi.w	#$40,d0

loc_258E6:
		btst	#0,$2A(a0)
		beq.s	loc_258F0
		neg.w	d0

loc_258F0:
		add.w	$30(a0),d0
		move.w	d0,$10(a0)
		rts
; ---------------------------------------------------------------------------

loc_258FA:

		moveq	#0,d0
		move.b	(OscNumbers+$A).w,d0
		subi.w	#$20,d0
		bra.s	loc_25910
; ---------------------------------------------------------------------------

loc_25906:

		moveq	#0,d0
		move.b	(OscNumbers+$1E).w,d0
		subi.w	#$40,d0

loc_25910:
		btst	#0,$2A(a0)
		beq.s	loc_2591A
		neg.w	d0

loc_2591A:
		add.w	$34(a0),d0
		move.w	d0,$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_25924:

		move.w	#$5F,d2
		bsr.s	sub_25974
		subi.w	#$60,d0
		add.w	$30(a0),d0
		move.w	d0,$10(a0)
		rts
; ---------------------------------------------------------------------------

loc_25938:

		move.w	#$5F,d2
		bsr.s	sub_25974
		subi.w	#$60,d0
		add.w	$34(a0),d0
		move.w	d0,$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_2594C:

		move.w	#$7F,d2
		bsr.s	sub_25974
		subi.w	#$80,d0
		add.w	$30(a0),d0
		move.w	d0,$10(a0)
		rts
; ---------------------------------------------------------------------------

loc_25960:

		move.w	#$7F,d2
		bsr.s	sub_25974
		subi.w	#$80,d0
		add.w	$34(a0),d0
		move.w	d0,$14(a0)
		rts

; =============== S U B R O U T I N E =======================================


sub_25974:

		tst.b	$3C(a0)
		bne.s	loc_25996
		move.w	$40(a0),d1
		addq.w	#4,d1
		move.w	d1,$40(a0)
		add.w	d1,$36(a0)
		cmp.b	$36(a0),d2
		bhi.s	loc_259B0
		move.b	#1,$3C(a0)
		bra.s	loc_259B0
; ---------------------------------------------------------------------------

loc_25996:
		move.w	$40(a0),d1
		subq.w	#4,d1
		move.w	d1,$40(a0)
		add.w	d1,$36(a0)
		cmp.b	$36(a0),d2
		bls.s	loc_259B0
		move.b	#0,$3C(a0)

loc_259B0:

		moveq	#0,d0
		move.b	$36(a0),d0
		btst	#0,$2A(a0)
		beq.s	locret_259C2
		neg.w	d0
		add.w	d2,d0

locret_259C2:
		rts
; End of function sub_25974

; ---------------------------------------------------------------------------
Map_LRZSolidMovingPlatforms:include "Levels/LRZ/Misc Object Data/Map - Solid Moving Platforms.asm"


; ---------------------------------------------------------------------------

Obj_DEZFloatingPlatform:

		move.l	#Map_DEZFloatingPlatform,$C(a0)
		move.w	#$233A,$A(a0)
		move.b	#4,4(a0)
		move.w	#prio(4),8(a0)
		move.b	#$20,7(a0)
		move.b	#$10,6(a0)
		move.w	$10(a0),$30(a0)
		move.w	$14(a0),$34(a0)
		move.b	$2C(a0),d0
		andi.w	#$F,d0
		add.w	d0,d0
		move.w	word_25AB8(pc,d0.w),d0
		lea	word_25AB8(pc,d0.w),a1
		move.l	a1,$42(a0)
		move.l	#loc_25A7E,(a0)

loc_25A7E:
		move.w	$10(a0),-(sp)
		movea.l	$42(a0),a1
		jsr	(a1)
		move.w	(sp)+,d4
		moveq	#0,d1
		move.b	7(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		jsr	SolidObjectFull.w
		addq.b	#1,$22(a0)
		andi.b	#1,$22(a0)
		move.w	$30(a0),d0
		jmp	Sprite_OnScreen_Test2.w
; ---------------------------------------------------------------------------
word_25AB8:	dc.w locret_258CE-word_25AB8

		dc.w loc_258D0-word_25AB8
		dc.w loc_258DC-word_25AB8
		dc.w loc_25924-word_25AB8
		dc.w loc_258FA-word_25AB8
		dc.w loc_25906-word_25AB8
		dc.w loc_25938-word_25AB8
		dc.w loc_2594C-word_25AB8
		dc.w loc_25960-word_25AB8
Map_DEZFloatingPlatform:include "Levels/DEZ/Misc Object Data/Map - Floating Platform.asm"

byte_25AF0:	dc.b $10
		dc.b $18
		dc.b $20
		dc.b $38
		dc.b $40
		dc.b $68
; ---------------------------------------------------------------------------

Obj_12_1:
		move.l	#Map_LBZUnusedElevator,$C(a0)
		move.w	#$43C3,$A(a0)
		move.b	#4,4(a0)
		move.w	#prio(4),8(a0)
		move.b	#$30,7(a0)
		move.b	#8,6(a0)
		move.w	$14(a0),$32(a0)
		move.w	#$8000,$16(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		lsr.w	#4,d0
		andi.w	#$F,d0
		move.b	byte_25AF0(pc,d0.w),d0
		lsl.w	#3,d0
		move.w	d0,$38(a0)
		sub.w	d0,$14(a0)
		btst	#0,$2A(a0)
		beq.s	loc_25B56
		add.w	d0,d0
		add.w	d0,$14(a0)
		move.b	#1,$34(a0)

loc_25B56:
		move.l	#loc_25B5C,(a0)

loc_25B5C:
		move.w	$36(a0),d0
		move.w	off_25B92(pc,d0.w),d1
		jsr	off_25B92(pc,d1.w)
		tst.b	4(a0)
		bpl.s	loc_25B8C
		moveq	#0,d1
		move.b	7(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w

loc_25B8C:
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------
off_25B92:	dc.w loc_25B9A-off_25B92

		dc.w loc_25BB8-off_25B92
		dc.w loc_25BE4-off_25B92
		dc.w loc_25C02-off_25B92
; ---------------------------------------------------------------------------

loc_25B9A:
		move.b	$2C(a0),d0
		andi.w	#$F,d0
		lea	(Level_trigger_array).w,a3
		tst.b	(a3,d0.w)
		beq.s	locret_25BB6
		move.w	#$8000,$16(a0)
		addq.w	#2,$36(a0)

locret_25BB6:
		rts
; ---------------------------------------------------------------------------

loc_25BB8:
		bsr.w	sub_25C2E
		tst.w	$1A(a0)
		bne.s	locret_25BE2
		addq.w	#2,$36(a0)
		move.w	d0,$14(a0)
		move.w	$38(a0),d0
		sub.w	d0,$14(a0)
		btst	#0,$2A(a0)
		bne.s	locret_25BE2
		add.w	d0,d0
		add.w	d0,$14(a0)
		rts
; ---------------------------------------------------------------------------

locret_25BE2:

		rts
; ---------------------------------------------------------------------------

loc_25BE4:
		move.b	$2C(a0),d0
		andi.w	#$F,d0
		lea	(Level_trigger_array).w,a3
		tst.b	(a3,d0.w)
		bne.s	locret_25C00
		move.w	#$8000,$16(a0)
		addq.w	#2,$36(a0)

locret_25C00:
		rts
; ---------------------------------------------------------------------------

loc_25C02:
		bsr.w	sub_25C2E
		tst.w	$1A(a0)
		bne.s	locret_25C2C
		clr.w	$36(a0)
		move.w	d0,$14(a0)
		move.w	$38(a0),d0
		sub.w	d0,$14(a0)
		btst	#0,$2A(a0)
		beq.s	locret_25C2C
		add.w	d0,d0
		add.w	d0,$14(a0)
		rts
; ---------------------------------------------------------------------------

locret_25C2C:

		rts

; =============== S U B R O U T I N E =======================================


sub_25C2E:

		move.w	$14(a0),d2
		moveq	#8,d1
		tst.b	$34(a0)
		bne.s	loc_25C7C
		add.w	d1,$1A(a0)
		move.w	$1A(a0),d0
		ext.l	d0
		lsl.l	#8,d0
		add.l	d0,$14(a0)
		move.w	$32(a0),d0
		cmp.w	$14(a0),d0
		bhi.s	locret_25CBC
		beq.s	loc_25C6C
		sub.w	d0,d2
		neg.w	d2
		add.w	d0,d2
		move.w	d2,$14(a0)
		neg.w	$16(a0)
		move.b	#1,$34(a0)
		bra.s	locret_25CBC
; ---------------------------------------------------------------------------

loc_25C6C:
		neg.w	$16(a0)
		add.w	d1,$1A(a0)
		move.b	#1,$34(a0)
		bra.s	locret_25CBC
; ---------------------------------------------------------------------------

loc_25C7C:
		sub.w	d1,$1A(a0)
		move.w	$1A(a0),d0
		ext.l	d0
		lsl.l	#8,d0
		add.l	d0,$14(a0)
		move.w	$32(a0),d0
		cmp.w	$14(a0),d0
		blo.s	locret_25CBC
		beq.s	loc_25CAE
		sub.w	d0,d2
		neg.w	d2
		add.w	d0,d2
		move.w	d2,$14(a0)
		neg.w	$16(a0)
		move.b	#0,$34(a0)
		bra.s	locret_25CBC
; ---------------------------------------------------------------------------

loc_25CAE:
		neg.w	$16(a0)
		sub.w	d1,$1A(a0)
		move.b	#0,$34(a0)

locret_25CBC:

		rts
; End of function sub_25C2E

; ---------------------------------------------------------------------------

Obj_LBZExplodingTrigger:

		move.l	#Map_LBZExplodingTrigger,$C(a0)
		move.w	#$4433,$A(a0)
		ori.b	#4,4(a0)
		move.b	#$10,7(a0)
		move.b	#$10,6(a0)
		move.w	#prio(5),8(a0)
		move.b	#-$3A,$28(a0)
		move.l	#loc_25CF0,(a0)

loc_25CF0:
		move.b	$29(a0),d0
		beq.w	loc_25D26
		move.b	$2C(a0),d0
		andi.w	#$F,d0
		lea	(Level_trigger_array).w,a3
		lea	(a3,d0.w),a3
		moveq	#0,d3
		lea	(Player_1).w,a1
		bclr	#0,$29(a0)
		beq.s	loc_25D18
		bsr.s	sub_25D2C

loc_25D18:
		lea	(Player_2).w,a1
		bclr	#1,$29(a0)
		beq.s	loc_25D26
		bsr.s	sub_25D2C

loc_25D26:

		jmp	loc_1B662.w

; =============== S U B R O U T I N E =======================================


sub_25D2C:

		cmpi.b	#2,$20(a1)
		bne.s	locret_25D52
		neg.w	$18(a1)
		neg.w	$1A(a1)
		bchg	d3,(a3)
		move.l	#Obj_Explosion,(a0)
		move.b	#2,5(a0)
		clr.b	$28(a0)
		clr.b	$29(a0)

locret_25D52:
		rts
; End of function sub_25D2C

; ---------------------------------------------------------------------------

Obj_MGZDashTrigger:

		move.l	#Map_MGZDashTrigger,$C(a0)
		move.w	#$235F,$A(a0)
		ori.b	#4,4(a0)
		move.b	#$10,7(a0)
		move.b	#$10,6(a0)
		move.w	#prio(5),8(a0)
		bset	#6,4(a0)
		move.w	#1,$16(a0)
		lea	$18(a0),a2
		move.w	$10(a0),(a2)+
		move.w	$14(a0),(a2)+
		move.w	#0,(a2)+
		move.l	#loc_25D9C,(a0)

loc_25D9C:
		move.w	#$1B,d1
		move.w	#$10,d2
		move.w	$10(a0),d4
		lea	(byte_25F0E).l,a2
		jsr	sub_1DD0E.w
		swap	d6
		andi.w	#$33,d6
		beq.s	loc_25E22
		move.b	d6,d0
		andi.b	#$11,d0
		beq.s	loc_25DF0
		lea	(Player_1).w,a1
		cmpi.b	#9,$20(a1)
		bne.s	loc_25DF0
		move.w	#$3C,$30(a0)
		move.b	#1,$32(a0)
		move.b	$2A(a1),d0
		add.b	$2A(a0),d0
		andi.b	#1,d0
		bne.s	loc_25DF0
		move.b	#-1,$32(a0)

loc_25DF0:

		andi.b	#$22,d6
		beq.s	loc_25E22
		lea	(Player_2).w,a1
		cmpi.b	#9,$20(a1)
		bne.s	loc_25E22
		move.w	#$3C,$30(a0)
		move.b	#1,$32(a0)
		move.b	$2A(a1),d0
		add.b	$2A(a0),d0
		andi.b	#1,d0
		bne.s	loc_25E22
		move.b	#-1,$32(a0)

loc_25E22:

		tst.w	$30(a0)
		beq.s	loc_25EA0
		move.b	$2C(a0),d0
		andi.w	#$F,d0
		lea	(Level_trigger_array).w,a3
		lea	(a3,d0.w),a3
		subq.w	#1,$30(a0)
		bne.s	loc_25E4A
		move.b	#0,(a3)
		move.b	#0,$22(a0)
		bra.s	loc_25EA0
; ---------------------------------------------------------------------------

loc_25E4A:
		move.b	#1,(a3)
		move.b	$2A(a0),d6
		andi.w	#$18,d6
		beq.s	loc_25E72
		move.w	d6,d0
		andi.w	#8,d0
		beq.s	loc_25E66
		lea	(Player_1).w,a1
		bsr.s	sub_25EA6

loc_25E66:
		andi.w	#$10,d6
		beq.s	loc_25E72
		lea	(Player_2).w,a1
		bsr.s	sub_25EA6

loc_25E72:

		subq.b	#1,$24(a0)
		bpl.s	loc_25E8C
		move.b	#1,$24(a0)
		move.b	$32(a0),d0
		add.b	d0,$1D(a0)
		andi.b	#3,$1D(a0)

loc_25E8C:
		tst.b	$22(a0)
		beq.s	loc_25E9A
		move.b	#0,$22(a0)
		bra.s	loc_25EA0
; ---------------------------------------------------------------------------

loc_25E9A:
		move.b	#4,$22(a0)

loc_25EA0:

		jmp	Sprite_OnScreen_Test.w

; =============== S U B R O U T I N E =======================================


sub_25EA6:

		move.w	$10(a0),d1
		subi.w	#$10,d1
		btst	#0,$2A(a0)
		beq.s	loc_25EBA
		addi.w	#$20,d1

loc_25EBA:
		move.w	$14(a0),d2
		addi.w	#$10,d2
		sub.w	$10(a1),d1
		sub.w	$14(a1),d2
		jsr	GetArcTan.w
		jsr	GetSineCosine.w
		muls.w	#-$700,d1
		asr.l	#8,d1
		move.w	d1,$18(a1)
		muls.w	#-$700,d0
		asr.l	#8,d0
		move.w	d0,$1A(a1)
		bset	#1,$2A(a1)
		bclr	#4,$2A(a1)
		bclr	#5,$2A(a1)
		clr.b	$40(a1)
		clr.b	$3D(a1)
		moveq	#$7B,d0
		jmp	Play_Sound_2.w
; End of function sub_25EA6

; ---------------------------------------------------------------------------
byte_25F0E:	dc.b $10
		dc.b $10
		dc.b $10
		dc.b $10
		dc.b $10
		dc.b $10
		dc.b $10
		dc.b $10
		dc.b $10
		dc.b $F
		dc.b $F
		dc.b $E
		dc.b $E
		dc.b $D
		dc.b $C
		dc.b $A
		dc.b 8
		dc.b 6
		dc.b 4
		dc.b 0
		dc.b $FC
		dc.b $F8
		dc.b $F6
		dc.b $F6
		dc.b $F6
		dc.b $F6
		dc.b $F6
		dc.b $F6
byte_25F2A:	dc.b  $48,   0,	  8, $40,  0,   0,	 $A,   8	; X offset, Y offset, X width, Y width, init routine counter, init mapping frame, second routine counter, second mapping frame
		dc.b	0, $48,	$40,   8,  0,   8,	 $A, $10
		dc.b  $B8,   0,	  8, $40,  0,   0,	 $A,   8
		dc.b	0, $48,	$40,   8,  0, $10,	 $A, $18
		dc.b	0, $48,	$40,   8,  6,   8,	  4, $10
		dc.b  $48,   0,	  8, $40,  6,   0,	  4,   8
		dc.b	0, $48,	$40,   8,  6, $10,	  4, $18
		dc.b  $B8,   0,	  8, $40,  6,   0,	  4,   8
; ---------------------------------------------------------------------------

Obj_LBZTriggerBridge:

		move.b	$2C(a0),d0
		move.b	d0,d1
		andi.w	#$F,d1
		tst.b	$34(a0)
		bne.s	loc_25F86
		lea	(Level_trigger_array).w,a3
		tst.b	(a3,d0.w)
		beq.s	loc_25F86
		addq.w	#4,d0

loc_25F86:

		lsr.b	#1,d0
		andi.w	#$38,d0
		lea	byte_25F2A(pc,d0.w),a1
		move.l	#Map_LBZTriggerBridge,$C(a0)
		move.w	#$43C3,$A(a0)
		move.b	#4,4(a0)
		move.w	#prio(4),8(a0)
		move.w	$10(a0),$30(a0)
		move.w	$14(a0),$32(a0)
		move.b	(a1)+,d0
		ext.w	d0
		add.w	$30(a0),d0
		move.w	d0,$10(a0)
		move.b	(a1)+,d0
		ext.w	d0
		add.w	$32(a0),d0
		move.w	d0,$14(a0)
		move.b	(a1)+,7(a0)
		move.b	(a1)+,6(a0)
		moveq	#0,d0
		move.b	(a1)+,d0
		move.w	d0,$36(a0)
		move.b	(a1)+,$22(a0)
		tst.b	$34(a0)
		beq.s	loc_25FF8
		move.b	(a1)+,d0
		move.w	d0,$36(a0)
		move.b	(a1)+,$22(a0)
		move.b	#0,$34(a0)

loc_25FF8:
		move.l	#loc_25FFE,(a0)

loc_25FFE:
		move.w	$36(a0),d0
		move.w	off_26038(pc,d0.w),d1
		jsr	off_26038(pc,d1.w)
		tst.b	4(a0)
		bpl.s	loc_2602E
		moveq	#0,d1
		move.b	7(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull2.w

loc_2602E:
		move.w	$30(a0),d0
		jmp	Sprite_OnScreen_Test2.w
; ---------------------------------------------------------------------------
off_26038:	dc.w loc_26044-off_26038
		dc.w loc_2609E-off_26038
		dc.w loc_260B0-off_26038
		dc.w loc_260D2-off_26038
		dc.w loc_2609E-off_26038
		dc.w loc_260C0-off_26038
; ---------------------------------------------------------------------------

loc_26044:
		move.b	$2C(a0),d0
		andi.w	#$F,d0
		lea	(Level_trigger_array).w,a3
		tst.b	(a3,d0.w)
		beq.s	locret_2609C
		addq.b	#1,$22(a0)
		move.w	#7,$38(a0)
		addq.w	#2,$36(a0)
		jsr	Create_New_Sprite3.w
		bne.w	locret_2609C
		move.l	#Obj_LBZTriggerBridge,(a1)
		move.w	$30(a0),$10(a1)
		move.w	$32(a0),$14(a1)
		move.b	$2C(a0),d0
		addi.b	#$40,d0
		andi.b	#$7F,d0
		move.b	d0,$2C(a1)
		move.w	#8,$38(a1)
		move.b	#1,$34(a1)

locret_2609C:

		rts
; ---------------------------------------------------------------------------

loc_2609E:
		addq.b	#1,$22(a0)
		subq.w	#1,$38(a0)
		bne.s	locret_260AE
		move.w	#$7FFF,$10(a0)

locret_260AE:
		rts
; ---------------------------------------------------------------------------

loc_260B0:
		subq.b	#1,$22(a0)
		subq.w	#1,$38(a0)
		bne.s	locret_260BE
		addq.w	#2,$36(a0)

locret_260BE:
		rts
; ---------------------------------------------------------------------------

loc_260C0:
		subq.b	#1,$22(a0)
		subq.w	#1,$38(a0)
		bne.s	locret_260D0
		move.w	#0,$36(a0)

locret_260D0:
		rts
; ---------------------------------------------------------------------------

loc_260D2:
		move.b	$2C(a0),d0
		andi.w	#$F,d0
		lea	(Level_trigger_array).w,a3
		tst.b	(a3,d0.w)
		bne.s	locret_2612A
		addq.b	#1,$22(a0)
		move.w	#7,$38(a0)
		addq.w	#2,$36(a0)
		jsr	Create_New_Sprite3.w
		bne.w	locret_2612A
		move.l	#Obj_LBZTriggerBridge,(a1)
		move.w	$30(a0),$10(a1)
		move.w	$32(a0),$14(a1)
		move.b	$2C(a0),d0
		addi.b	#$40,d0
		andi.b	#$7F,d0
		move.b	d0,$2C(a1)
		move.w	#8,$38(a1)
		move.b	#1,$34(a1)

locret_2612A:

		rts
; ---------------------------------------------------------------------------
byte_2612C:	dc.b $10
		dc.b 0
		dc.b $A
		dc.b 0
; ---------------------------------------------------------------------------

Obj_LBZPlayerLauncher:

		move.l	#Map_LBZPlayerLauncher,$C(a0)
		move.w	#$43C3,$A(a0)
		ori.b	#4,4(a0)
		move.b	#$20,7(a0)
		move.w	#prio(1),8(a0)
		move.b	$2C(a0),d0
		andi.w	#2,d0
		move.w	byte_2612C(pc,d0.w),$34(a0)
		move.l	#loc_26164,(a0)

loc_26164:
		move.w	$10(a0),d0
		move.w	d0,d1
		subi.w	#$10,d0
		addi.w	#$10,d1
		move.w	$14(a0),d2
		move.w	d2,d3
		subi.w	#$10,d2
		addi.w	#$10,d3
		lea	(Player_1).w,a1
		btst	#1,$2A(a1)
		bne.s	loc_261B8
		move.w	$10(a1),d4
		cmp.w	d0,d4
		blo.w	loc_261B8
		cmp.w	d1,d4
		bhs.w	loc_261B8
		move.w	$14(a1),d4
		cmp.w	d2,d4
		blo.w	loc_261B8
		cmp.w	d3,d4
		bhs.w	loc_261B8
		move.w	d0,-(sp)
		lea	$38(a0),a2
		bsr.w	sub_261F2
		move.w	(sp)+,d0

loc_261B8:

		lea	(Player_2).w,a1
		btst	#1,$2A(a1)
		bne.s	loc_261EC
		move.w	$10(a1),d4
		cmp.w	d0,d4
		blo.w	loc_261EC
		cmp.w	d1,d4
		bhs.w	loc_261EC
		move.w	$14(a1),d4
		cmp.w	d2,d4
		blo.w	loc_261EC
		cmp.w	d3,d4
		bhs.w	loc_261EC
		lea	$3A(a0),a2
		bsr.w	sub_261F2

loc_261EC:

		jmp	Sprite_OnScreen_Test.w

; =============== S U B R O U T I N E =======================================


sub_261F2:

		tst.w	(a2)
		bne.s	loc_26220
		move.l	a1,-(sp)
		jsr	Create_New_Sprite3.w
		bne.w	loc_2621E
		move.l	#Obj_2629C,(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		move.b	4(a0),4(a1)
		move.w	a2,$3C(a1)

loc_2621E:
		movea.l	(sp)+,a1

loc_26220:
		addq.w	#1,(a2)
		cmpi.w	#4,(a2)
		beq.s	loc_26244
		move.w	$18(a1),d0
		btst	#0,4(a0)
		beq.s	loc_26236
		neg.w	d0

loc_26236:
		tst.w	d0
		bpl.s	locret_26242
		asr	$1C(a1)
		asr	$18(a1)

locret_26242:
		rts
; ---------------------------------------------------------------------------

loc_26244:
		move.w	$18(a1),d0
		btst	#0,$2A(a0)
		beq.s	loc_26252
		neg.w	d0

loc_26252:
		cmpi.w	#$1000,d0
		bge.s	loc_26294
		move.w	$34(a0),$18(a1)
		bclr	#0,$2A(a1)
		btst	#0,$2A(a0)
		beq.s	loc_26276
		bset	#0,$2A(a1)
		neg.w	$18(a1)

loc_26276:
		move.w	#$F,$32(a1)
		move.w	$18(a1),$1C(a1)
		bclr	#5,$2A(a0)
		bclr	#6,$2A(a0)
		bclr	#5,$2A(a1)

loc_26294:
		moveq	#-$4F,d0
		jmp	Play_Sound_2.w
; End of function sub_261F2

; ---------------------------------------------------------------------------

Obj_2629C:
		move.l	#Map_LBZPlayerLauncher,$C(a0)
		move.w	#$43C3,$A(a0)
		ori.b	#4,4(a0)
		move.b	#8,7(a0)
		move.w	#prio(1),8(a0)
		move.w	$10(a0),$30(a0)
		addi.w	#$10,$14(a0)
		move.w	$14(a0),$32(a0)
		move.b	#1,$22(a0)
		move.b	#$80,$40(a0)
		bset	#6,4(a0)
		move.w	#4,$16(a0)
		move.l	#loc_262EC,(a0)

loc_262EC:
		move.w	$36(a0),d0
		move.w	off_26302(pc,d0.w),d1
		jsr	off_26302(pc,d1.w)
		bsr.w	sub_26338
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------
off_26302:	dc.w loc_26306-off_26302
		dc.w loc_26322-off_26302
; ---------------------------------------------------------------------------

loc_26306:
		addi.b	#$10,$40(a0)
		cmpi.b	#$D0,$40(a0)
		bne.s	locret_26320
		movea.w	$3C(a0),a2
		move.w	#0,(a2)
		addq.w	#2,$36(a0)

locret_26320:
		rts
; ---------------------------------------------------------------------------

loc_26322:
		subi.b	#4,$40(a0)
		cmpi.b	#$80,$40(a0)
		bne.s	locret_26336
		move.w	#$7F00,$30(a0)

locret_26336:
		rts

; =============== S U B R O U T I N E =======================================


sub_26338:
		move.b	$40(a0),d0
		btst	#0,4(a0)
		beq.s	loc_2634A
		neg.b	d0
		addi.b	#$80,d0

loc_2634A:
		jsr	GetSineCosine.w
		move.w	$32(a0),d2
		move.w	$30(a0),d3
		moveq	#0,d6
		move.w	$16(a0),d6
		subq.w	#1,d6
		bcs.s	locret_263A8
		swap	d0
		swap	d1
		asr.l	#4,d0
		asr.l	#4,d1
		moveq	#0,d4
		moveq	#0,d5
		add.l	d0,d4
		add.l	d1,d5
		lea	$18(a0),a2

loc_26376:
		movem.l	d4-d5,-(sp)
		swap	d4
		swap	d5
		add.w	d2,d4
		add.w	d3,d5
		move.w	d5,(a2)+
		move.w	d4,(a2)+
		movem.l	(sp)+,d4-d5
		add.l	d0,d4
		add.l	d1,d5
		addq.w	#1,a2
		move.b	#1,(a2)+
		dbf	d6,loc_26376
		swap	d4
		swap	d5
		add.w	d2,d4
		add.w	d3,d5
		move.w	d5,$10(a0)
		move.w	d4,$14(a0)

locret_263A8:
		rts
; End of function sub_26338


; =============== S U B R O U T I N E =======================================


sub_263AA:
		move.l	#Map_LBZFlameThrower,$C(a1)
		move.w	#$43AC,$A(a1)
		move.b	#$10,7(a1)
		move.b	#$10,6(a1)
		ori.b	#4,4(a1)
		move.w	#prio(4),8(a1)
		rts
; End of function sub_263AA

; ---------------------------------------------------------------------------

Obj_LBZFlameThrower:

		movea.l	a0,a1
		bsr.s	sub_263AA
		move.l	#loc_263DC,(a0)

loc_263DC:
		move.b	(V_int_run_count+3).w,d0
		add.b	$2C(a0),d0
		andi.b	#$7F,d0
		bne.s	loc_2643C
		jsr	Create_New_Sprite3.w
		bne.w	loc_2643C
		move.l	#Obj_26460,(a1)
		bsr.s	sub_263AA
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		move.b	$2A(a0),$2A(a1)
		move.b	#-$63,$28(a1)
		bset	#4,$2B(a1)
		addi.w	#$40,$10(a1)
		btst	#0,$2A(a0)
		beq.s	loc_2642E
		subi.w	#$80,$10(a1)

loc_2642E:
		tst.b	4(a0)
		bpl.s	loc_2643C
		moveq	#$43,d0
		jsr	Play_Sound_2.w

loc_2643C:

		moveq	#0,d1
		move.b	7(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

Obj_26460:
		lea	(Ani_LBZFlameThrower).l,a1
		jsr	Animate_Sprite.w
		tst.b	5(a0)
		beq.s	loc_26478
		move.w	#$7FFF,$10(a0)

loc_26478:
		jmp	loc_1B662.w
; ---------------------------------------------------------------------------
Ani_LBZFlameThrower:	include "Levels/LBZ/Misc Object Data/Anim - Flame Thrower.asm"

LBZRideGrapple_Range:	dc.w   $A08,  $C78	;0
		dc.w  $1208,  $14F8		;1
		dc.w  $1A08,  $1BB8		;2
		dc.w  $1C48,  $2078		;3
		dc.w  $2688,  $2878		;4
		dc.w  $2988,  $2DF8		;5
		dc.w  $2F88,  $3178		;6
		dc.w   $E68,  $1098		;7
		dc.w   $CE8,  $1498		;8
		dc.w   $E68,  $1398		;9
		dc.w  $20E8,  $2418		;A
		dc.w  $2B08,  $2E98		;B
		dc.w  $39E8,  $3C98		;C
; ---------------------------------------------------------------------------

Obj_LBZRideGrapple:

		move.b	#4,4(a0)
		move.b	#$10,7(a0)
		move.w	#prio(1),8(a0)
		move.b	#$20,6(a0)
		move.w	$10(a0),$38(a0)
		move.b	$2C(a0),d0
		andi.w	#$7F,d0
		lsl.w	#2,d0
		move.l	LBZRideGrapple_Range(pc,d0.w),$34(a0)
		move.l	#Map_LBZRideGrapple,$C(a0)
		move.w	#$2433,$A(a0)
		jsr	Create_New_Sprite3.w
		bne.s	loc_26566
		move.l	#loc_2668E,(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		move.l	$C(a0),$C(a1)
		move.w	$A(a0),$A(a1)
		move.b	4(a0),4(a1)
		move.w	8(a0),8(a1)
		bset	#6,4(a1)
		move.b	#$10,7(a1)
		move.b	#$20,6(a1)
		moveq	#6,d1
		move.w	d1,$16(a1)
		subq.b	#1,d1
		lea	$18(a1),a2

loc_2654C:
		move.w	$10(a1),(a2)+
		move.w	$14(a1),(a2)+
		move.w	#1,(a2)+
		dbf	d1,loc_2654C
		move.b	#2,$22(a1)
		move.w	a1,$3C(a0)

loc_26566:
		move.l	#loc_2656C,(a0)

loc_2656C:

		bsr.w	sub_2682E
		bsr.w	sub_26694
		tst.w	$30(a0)
		beq.s	loc_26588
		cmpi.w	#$28,$3A(a0)
		bne.s	loc_26588
		move.l	#loc_265DC,(a0)

loc_26588:

		move.w	$10(a0),d0
		andi.w	#-$80,d0
		sub.w	(Camera_X_pos_coarse_back).w,d0
		cmpi.w	#$280,d0
		bhi.w	loc_265A2
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_265A2:
		move.w	$38(a0),d0
		andi.w	#$FF80,d0
		sub.w	(Camera_X_pos_coarse_back).w,d0
		cmpi.w	#$280,d0
		bhi.w	loc_265BC
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_265BC:
		move.w	respawn_addr(a0),d0
		beq.s	loc_265C8
		movea.w	d0,a2
		bclr	#7,(a2)

loc_265C8:
		move.w	$3C(a0),d0
		beq.s	loc_265D6
		movea.w	d0,a1
		jsr	Delete_Referenced_Sprite.w

loc_265D6:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_265DC:
		jsr	MoveSprite2.w
		btst	#0,$2A(a0)
		beq.s	loc_265FE
		subi.w	#$20,$18(a0)
		tst.w	$18(a0)
		bmi.s	loc_26610
		subi.w	#$60,$18(a0)
		bra.s	loc_26610
; ---------------------------------------------------------------------------

loc_265FE:
		addi.w	#$20,$18(a0)
		tst.w	$18(a0)
		bpl.s	loc_26610
		addi.w	#$60,$18(a0)

loc_26610:

		move.w	$10(a0),d0
		move.w	$34(a0),d1
		cmp.w	d1,d0
		bhi.s	loc_2662E
		move.w	d1,$10(a0)
		bsr.s	sub_26654
		tst.w	$18(a0)
		bpl.s	loc_2662E
		move.w	#0,$18(a0)

loc_2662E:

		move.w	$36(a0),d1
		cmp.w	d1,d0
		blo.s	loc_26648
		move.w	d1,$10(a0)
		bsr.s	sub_26654
		tst.w	$18(a0)
		bmi.s	loc_26648
		move.w	#0,$18(a0)

loc_26648:

		bsr.w	sub_2682E
		bsr.w	sub_26694
		bra.w	loc_26588

; =============== S U B R O U T I N E =======================================


sub_26654:

		tst.b	$2C(a0)
		bmi.s	locret_2668C
		lea	$30(a0),a2
		lea	(Player_1).w,a1
		bsr.s	sub_2666A
		lea	(Player_2).w,a1
		addq.w	#1,a2
; End of function sub_26654


; =============== S U B R O U T I N E =======================================


sub_2666A:
		tst.b	(a2)
		beq.s	locret_2668C
		move.w	$18(a0),$18(a1)
		move.w	#0,$1A(a1)
		bset	#1,$2A(a1)
		clr.b	$2E(a1)
		clr.b	(a2)
		move.b	#$3C,2(a2)

locret_2668C:
		rts
; End of function sub_2666A

; ---------------------------------------------------------------------------

loc_2668E:
		jmp	Draw_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_26694:

		movea.w	$3C(a0),a3
		lea	$31(a0),a2
		lea	(Player_2).w,a1
		move.w	(Ctrl_2_logical).w,d0
		bsr.s	sub_266B0
		lea	(Player_1).w,a1
		subq.w	#1,a2
		move.w	(Ctrl_1_logical).w,d0
; End of function sub_26694


; =============== S U B R O U T I N E =======================================


sub_266B0:
		tst.b	(a2)
		beq.w	loc_267A4
		tst.b	4(a1)
		bpl.s	loc_26718
		cmpi.b	#4,5(a1)
		bhs.s	loc_26718
		andi.b	#$70,d0
		beq.w	loc_26726
		clr.b	$2E(a1)
		clr.b	(a2)
		move.b	#$12,2(a2)
		andi.w	#$F00,d0
		beq.w	loc_266E6
		move.b	#$3C,2(a2)

loc_266E6:
		move.w	$18(a0),$18(a1)
		move.w	#-$380,$1A(a1)
		bset	#1,$2A(a1)
		move.b	#1,$40(a1)
		move.b	#$E,$1E(a1)
		move.b	#7,$1F(a1)
		move.b	#2,$20(a1)
		bset	#2,$2A(a1)
		rts
; ---------------------------------------------------------------------------

loc_26718:

		clr.b	$2E(a1)
		clr.b	(a2)
		move.b	#$3C,2(a2)
		rts
; ---------------------------------------------------------------------------

loc_26726:
		btst	#$A,d0
		beq.s	loc_26732
		bset	#0,$2A(a1)

loc_26732:
		btst	#$B,d0
		beq.s	loc_2673E
		bclr	#0,$2A(a1)

loc_2673E:
		move.b	$2A(a1),$2A(a0)
		move.b	$2A(a1),d0
		andi.b	#1,d0
		andi.b	#-2,4(a1)
		or.b	d0,4(a1)
		move.w	$10(a3),$10(a1)
		move.w	$14(a3),$14(a1)
		addi.w	#$24,$14(a1)

loc_26768:
		moveq	#0,d0
		move.b	$26(a0),d0
		btst	#0,$2A(a1)
		beq.s	loc_26778
		neg.b	d0

loc_26778:
		addq.b	#8,d0
		lsr.w	#4,d0
		move.b	byte_26794(pc,d0.w),$22(a1)
		moveq	#0,d0
		move.b	$22(a1),d0
		move.l	a2,-(sp)
		jsr	(Tails_Carry_LoadPLC).l
		movea.l	(sp)+,a2
		rts
; ---------------------------------------------------------------------------
byte_26794:	dc.b $91
		dc.b $91
		dc.b $90
		dc.b $90
		dc.b $90
		dc.b $90
		dc.b $90
		dc.b $90
		dc.b $92
		dc.b $92
		dc.b $92
		dc.b $92
		dc.b $92
		dc.b $92
		dc.b $91
		dc.b $91
; ---------------------------------------------------------------------------

loc_267A4:
		tst.b	2(a2)
		beq.s	loc_267B2
		subq.b	#1,2(a2)
		bne.w	locret_2682C

loc_267B2:
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		addi.w	#$10,d0
		cmpi.w	#$20,d0
		bhs.w	locret_2682C
		move.w	$14(a1),d1
		sub.w	$14(a0),d1
		subi.w	#$18,d1
		cmpi.w	#$18,d1
		bhs.w	locret_2682C
		tst.b	$2E(a1)
		bne.s	locret_2682C
		cmpi.b	#4,5(a1)
		bhs.s	locret_2682C
		tst.b	(Debug_On).w
		bne.s	locret_2682C
		move.b	$2A(a1),$2A(a0)
		clr.w	$18(a1)
		clr.w	$1A(a1)
		clr.w	$1C(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		addi.w	#$24,$14(a1)
		move.b	#$14,$20(a1)
		move.b	#0,$3D(a1)
		move.b	#3,$2E(a1)
		move.b	#1,(a2)
		bra.w	loc_26768
; ---------------------------------------------------------------------------

locret_2682C:

		rts
; End of function sub_266B0


; =============== S U B R O U T I N E =======================================


sub_2682E:

		tst.w	$30(a0)
		beq.s	loc_26842
		move.w	$3A(a0),d2
		cmpi.w	#$28,d2
		beq.s	loc_26868
		addq.w	#1,d2
		bra.s	loc_26864
; ---------------------------------------------------------------------------

loc_26842:
		move.w	$3A(a0),d2
		beq.s	loc_2684C
		subq.w	#1,d2
		bne.s	loc_26864

loc_2684C:
		clr.w	$26(a0)
		clr.b	$40(a0)
		clr.w	$3E(a0)
		move.w	#0,$18(a0)
		move.l	#loc_2656C,(a0)

loc_26864:

		move.w	d2,$3A(a0)

loc_26868:
		mulu.w	#$33,d2
		move.w	$18(a0),d0
		bne.s	loc_268AC
		tst.b	$40(a0)
		bne.s	loc_26892
		move.w	$3E(a0),d1
		addi.w	#$40,d1
		move.w	d1,$3E(a0)
		add.w	d1,$26(a0)
		bmi.s	loc_268AA
		move.b	#1,$40(a0)
		bra.s	loc_268AA
; ---------------------------------------------------------------------------

loc_26892:
		move.w	$3E(a0),d1
		subi.w	#$40,d1
		move.w	d1,$3E(a0)
		add.w	d1,$26(a0)
		bpl.s	loc_268AA
		move.b	#0,$40(a0)

loc_268AA:

		bra.s	loc_268EC
; ---------------------------------------------------------------------------

loc_268AC:
		neg.w	d0
		asl.w	#2,d0
		sub.w	$26(a0),d0
		bge.s	loc_268C6
		cmpi.w	#-$3000,$26(a0)
		ble.s	loc_268C6
		subi.w	#$180,$26(a0)
		bra.s	loc_268D4
; ---------------------------------------------------------------------------

loc_268C6:

		cmpi.w	#$3000,$26(a0)
		bge.s	loc_268D4
		addi.w	#$180,$26(a0)

loc_268D4:

		move.b	#0,$40(a0)
		tst.w	$18(a0)
		bpl.s	loc_268E6
		move.b	#1,$40(a0)

loc_268E6:
		move.w	#0,$3E(a0)

loc_268EC:
		move.b	$26(a0),d0
		jsr	GetSineCosine.w
		muls.w	d2,d0
		muls.w	d2,d1
		move.l	$10(a0),d2
		move.l	$14(a0),d3
		movea.w	$3C(a0),a1
		moveq	#5,d4
		lea	$18(a1),a2

loc_2690C:
		swap	d2
		swap	d3
		move.w	d2,(a2)+
		move.w	d3,(a2)+
		addq.w	#2,a2
		swap	d2
		swap	d3
		add.l	d0,d2
		add.l	d1,d3
		dbf	d4,loc_2690C
		move.w	$36(a1),$10(a1)
		move.w	$38(a1),$14(a1)
		rts
; End of function sub_2682E

; ---------------------------------------------------------------------------
Map_LBZRideGrapple:include "Levels/LBZ/Misc Object Data/Map - Ride Grapple.asm"

; ---------------------------------------------------------------------------

Obj_LBZCupElevator:
;		btst	#6,$2C(a0)		; NAT: Check if this is special type
;		beq.s	.nots			; if not, branch
;		tst.b	SpecialFlag.w		; check if spawn flag is set
;		beq.w	locret_26B44		; if not, branch

.nots		move.l	#Map_LBZCupElevator,$C(a0)
		move.w	#$440D,$A(a0)
		move.b	#4,4(a0)
		move.w	#prio(1),8(a0)
		move.b	#$20,7(a0)
		move.b	#$10,6(a0)

;		btst	#6,$2C(a0)			; BIT 6
;		beq.s	loc_2698A
;		cmpi.w	#3,(Player_mode).w
;		bne.s	loc_2698A
;		move.w	#$7F00,$10(a0)		; Set this object to be deleted if bit 6 is set and Knuckles is playing

loc_2698A:
		move.w	$10(a0),$30(a0)
		move.w	$14(a0),$32(a0)
		jsr	Create_New_Sprite3.w
		bne.w	loc_26A50
		move.l	#Obj_LBZCupElevatorAttach,(a1)
		move.l	#Map_LBZCupElevator,$C(a1)
		move.w	#$440D,$A(a1)
		move.b	#4,4(a1)
		move.w	#prio(1),8(a1)
		move.b	#$20,7(a1)
		move.b	#$10,6(a1)
		move.w	$10(a0),$10(a1)
		move.w	$10(a0),$30(a1)
		move.w	$14(a0),$14(a1)
		move.b	#1,$22(a1)
		addi.w	#$18,$10(a1)
		btst	#0,$2A(a0)
		bne.s	loc_269F8
		subi.w	#$30,$10(a1)		; Set position based on orientation of original object

loc_269F8:
		move.w	a0,$40(a1)
		move.w	a1,$42(a0)
		jsr	Create_New_Sprite3.w
		bne.w	loc_26A50
		move.l	#Obj_LBZCupElevatorBase,(a1)
		move.l	#Map_LBZCupElevator,$C(a1)
		move.w	#$440D,$A(a1)
		move.b	#4,4(a1)
		move.w	#prio(2),8(a1)
		move.b	#$20,7(a1)
		move.b	#$10,6(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		move.b	#2,$22(a1)
		move.w	a0,$40(a1)
		move.w	a1,$40(a0)

loc_26A50:

		moveq	#0,d0
		move.b	$2C(a0),d0		; BITS 3-0
		andi.w	#$F,d0
		lsl.w	#5,d0			; Multiples of $60
		move.w	d0,d1
		add.w	d0,d0
		add.w	d1,d0
		move.w	d0,$38(a0)
		move.w	#0,$26(a0)
		addi.w	#$40,$10(a0)
		btst	#0,$2A(a0)
		bne.s	loc_26A86
		subi.w	#$80,$10(a0)
		move.w	#$8080,$26(a0)

loc_26A86:
		move.b	$2C(a0),d1		; BITS 5-4
		andi.w	#$30,d1
		beq.s	loc_26AAC
		move.w	d0,$3A(a0)		; If any bit set, elevator is moving downward.
		add.w	d0,$32(a0)
		move.w	#6,$36(a0)
		btst	#0,$2C(a0)
		beq.s	loc_26AAC
		addi.b	#$80,$27(a0)

loc_26AAC:

		move.l	#Obj_LBZCupElevatorMain,(a0)

Obj_LBZCupElevatorMain:
		bsr.w	LBZCupElevator_Action
		move.w	$10(a0),d4
		move.b	$26(a0),d0
		jsr	GetSineCosine.w
		asr.w	#2,d1
		add.w	$30(a0),d1
		move.w	d1,$10(a0)
		moveq	#0,d1
		move.b	7(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		lea	$3C(a0),a2
		lea	(Player_1).w,a1
		moveq	#3,d6
		move.w	(Ctrl_1_logical).w,d0
		movem.l	d1-d4,-(sp)
		bsr.w	LBZCupElevator_PlayerControl
		movem.l	(sp)+,d1-d4
		lea	$3D(a0),a2
		lea	(Player_2).w,a1
		moveq	#4,d6
		move.w	(Ctrl_2_logical).w,d0
		bsr.w	LBZCupElevator_PlayerControl
		bra.w	loc_26E78

; =============== S U B R O U T I N E =======================================


LBZCupElevator_Action:
		move.w	$36(a0),d0
		move.w	off_26B1E(pc,d0.w),d1
		jmp	off_26B1E(pc,d1.w)
; End of function LBZCupElevator_Action

; ---------------------------------------------------------------------------
off_26B1E:	dc.w LBZCupElev_WaitEnter-off_26B1E	;0
		dc.w LBZCupElev_MoveUp-off_26B1E		;2
		dc.w LBZCupElev_WaitExit1-off_26B1E		;4
		dc.w LBZCupElev_WaitEnter-off_26B1E		;6
		dc.w LBZCupElev_MoveDown-off_26B1E		;8
		dc.w LBZCupElev_WaitExit2-off_26B1E		;A
		dc.w LBZCupElev_Spin1-off_26B1E			;C
		dc.w LBZCupElev_Fling1-off_26B1E		;E
		dc.w LBZCupElev_Fling2-off_26B1E		;10
		dc.w LBZCupElev_Spin2-off_26B1E			;12
		dc.w LBZCupElev_Fling3-off_26B1E		;14
; ---------------------------------------------------------------------------

LBZCupElev_WaitEnter:
		tst.w	$3C(a0)
		beq.s	locret_26B44
		move.w	#1,$34(a0)
		addq.w	#2,$36(a0)

locret_26B44:
		rts
; ---------------------------------------------------------------------------

LBZCupElev_MoveUp:
		move.w	$3A(a0),d0
		cmp.w	$38(a0),d0
		bne.s	loc_26B78
		tst.b	$2D(a0)
		bmi.s	.tails
		tst.b	$2C(a0)
		bpl.s	loc_26B66
.tails		move.w	#$C,$36(a0)
		move.w	#$600,$2E(a0)
		bra.w	LBZCupElev_Spin1
; ---------------------------------------------------------------------------

loc_26B66:
		move.w	#prio(1),8(a0)
		move.w	#0,$34(a0)
		addq.w	#2,$36(a0)
		rts
; ---------------------------------------------------------------------------

loc_26B78:
		addq.w	#4,$3A(a0)
		move.w	$3A(a0),d0
		move.w	d0,d1
		mulu.w	#$155,d0
		lsr.w	#8,d0
		add.b	$27(a0),d0
		move.b	d0,$26(a0)
		move.w	$32(a0),d0
		sub.w	d1,d0
		move.w	d0,$14(a0)
		cmpi.w	#prio(4),8(a0)
		bne.s	loc_26BB8
		tst.b	$26(a0)
		bpl.s	locret_26BB6
		move.w	#prio(1),8(a0)
		moveq	#$72,d0
		jmp	Play_Sound_2.w
; ---------------------------------------------------------------------------

loc_26BB8:
		tst.b	$26(a0)
		bmi.s	locret_26BCC
		move.w	#prio(4),8(a0)
		moveq	#$72,d0
		jmp	Play_Sound_2.w
; ---------------------------------------------------------------------------

LBZCupElev_WaitExit1:
		tst.w	$3C(a0)
		bne.s	locret_26BD8
		addq.w	#2,$36(a0)


locret_26BB6:
locret_26BCC:
locret_26BD8:
		rts
; ---------------------------------------------------------------------------

LBZCupElev_MoveDown:
		tst.w	$3A(a0)
		bne.s	loc_26C08
		tst.b	$2D(a0)
		bmi.s	.tails
		tst.b	$2C(a0)
		bpl.s	loc_26BF6
.tails		move.w	#$12,$36(a0)
		move.w	#$600,$2E(a0)
		bra.w	LBZCupElev_Spin1
; ---------------------------------------------------------------------------

loc_26BF6:
		move.w	#prio(1),8(a0)
		move.w	#0,$34(a0)
		addq.w	#2,$36(a0)
		rts
; ---------------------------------------------------------------------------

loc_26C08:
		subq.w	#4,$3A(a0)
		move.w	$3A(a0),d0
		move.w	d0,d1
		mulu.w	#$155,d0
		lsr.w	#8,d0
		add.b	$27(a0),d0
		move.b	d0,$26(a0)
		move.w	$32(a0),d0
		sub.w	d1,d0
		move.w	d0,$14(a0)
		cmpi.w	#prio(4),8(a0)
		bne.s	loc_26C48
		tst.b	$26(a0)
		bpl.s	locret_26C46
		move.w	#prio(1),8(a0)
		moveq	#$72,d0
		jmp	Play_Sound_2.w
; ---------------------------------------------------------------------------

loc_26C48:
		tst.b	$26(a0)
		bmi.s	locret_26C5C
		move.w	#prio(4),8(a0)
		moveq	#$72,d0
		jmp	Play_Sound_2.w
; ---------------------------------------------------------------------------

LBZCupElev_WaitExit2:
		tst.w	$3C(a0)
		bne.s	locret_26C6A
		move.w	#0,$36(a0)

locret_26C5C:
locret_26C46:
locret_26C6A:
		rts
; ---------------------------------------------------------------------------

LBZCupElev_Spin1:
		cmpi.w	#$1000,$2E(a0)
		bne.s	loc_26CC4
		btst	#0,$2A(a0)
		bne.s	loc_26CA0
		move.b	$26(a0),d0
		addi.b	#$40,d0
		cmpi.b	#$F0,d0
		blo.s	loc_26CCA
		move.b	#$C0,$26(a0)
		movea.w	$42(a0),a1
		move.w	#$7FFF,$30(a1)
		addq.w	#2,$36(a0)
		rts
; ---------------------------------------------------------------------------

loc_26CA0:
		move.b	$26(a0),d0
		addi.b	#$C0,d0
		cmpi.b	#$F0,d0
		blo.s	loc_26CCA
		move.b	#$40,$26(a0)
		movea.w	$42(a0),a1
		move.w	#$7FFF,$30(a1)
		addq.w	#4,$36(a0)

locret_26CEE:
		rts
; ---------------------------------------------------------------------------

loc_26CC4:
		addi.w	#$10,$2E(a0)

loc_26CCA:

		move.b	$2E(a0),d0
		add.b	d0,$26(a0)
		cmpi.w	#prio(4),8(a0)
		bne.s	loc_26CF0
		tst.b	$26(a0)
		bpl.s	locret_26CEE
		move.w	#prio(1),8(a0)
		moveq	#$72,d0
		jmp	Play_Sound_2.w
; ---------------------------------------------------------------------------

loc_26CF0:
		tst.b	$26(a0)
		bmi.s	locret_26D04
		move.w	#prio(4),8(a0)
		moveq	#$72,d0
		jmp	Play_Sound_2.w
; ---------------------------------------------------------------------------

LBZCupElev_Spin2:
		cmpi.w	#$1000,$2E(a0)
		bne.s	loc_26D32
		move.b	$26(a0),d0
		addi.b	#$B0,d0
		cmpi.b	#$F0,d0
		blo.s	loc_26D38
		move.b	#$40,$26(a0)
		movea.w	$42(a0),a1
		move.w	#$7FFF,$30(a1)
		addq.w	#2,$36(a0)

locret_26D04:
locret_26D5C:
		rts
; ---------------------------------------------------------------------------

loc_26D32:
		addi.w	#$10,$2E(a0)

loc_26D38:
		move.b	$2E(a0),d0
		sub.b	d0,$26(a0)
		cmpi.w	#prio(4),8(a0)
		bne.s	loc_26D5E
		tst.b	$26(a0)
		bpl.s	locret_26D5C
		move.w	#prio(1),8(a0)
		moveq	#$72,d0
		jmp	Play_Sound_2.w
; ---------------------------------------------------------------------------

loc_26D5E:
		tst.b	$26(a0)
		bmi.s	locret_26D72
		move.w	#prio(4),8(a0)
		moveq	#$72,d0
		jmp	Play_Sound_2.w
; ---------------------------------------------------------------------------

LBZCupElev_Fling1:
		cmpi.w	#$16C0,$30(a0)
		blo.s	loc_26D90
		move.w	#$16C0,$30(a0)
		move.w	#-$200,$18(a0)
		move.w	#0,$1A(a0)
		bra.s	loc_26DE0
; ---------------------------------------------------------------------------

loc_26D90:
		addi.w	#$10,$30(a0)

locret_26D72:
		rts
; ---------------------------------------------------------------------------

LBZCupElev_Fling2:
		cmpi.w	#$2AE0,$30(a0)
		bhi.s	loc_26DB4
		move.w	#$2AE0,$30(a0)
		move.w	#$200,$18(a0)
		move.w	#0,$1A(a0)
		bra.s	loc_26DE0
; ---------------------------------------------------------------------------

loc_26DB4:
		subi.w	#$10,$30(a0)
		rts
; ---------------------------------------------------------------------------

LBZCupElev_Fling3:
		cmpi.w	#$2B20,$30(a0)
		blo.s	loc_26DD8
		move.w	#$2B20,$30(a0)
		move.w	#-$200,$18(a0)
		move.w	#0,$1A(a0)
		bra.s	loc_26DE0
; ---------------------------------------------------------------------------

loc_26DD8:
		addi.w	#$10,$30(a0)
		rts
; ---------------------------------------------------------------------------

loc_26DE0:

		move.l	#Obj_LBZElevatorCupFlicker,(a0)
		moveq	#$35,d0
		jsr	Play_Sound_2.w
		lea	$3C(a0),a2
		lea	(Player_1).w,a1
		move.w	#-$300,d0
		bsr.s	sub_26E08
		lea	$3D(a0),a2
		lea	(Player_2).w,a1
		move.w	#-$400,d0

; =============== S U B R O U T I N E =======================================


sub_26E08:
		move.b	#$12,2(a2)
		tst.b	(a2)
		beq.s	locret_26E52
		move.b	#4,5(a1)		; Hit animation
		bclr	#3,$2A(a1)
		bclr	#5,$2A(a1)		; Player is not standing on/pushing an object
		bset	#1,$2A(a1)
		move.w	d0,$1A(a1)
		move.w	#-$200,$18(a1)	; Set speed of player
		btst	#0,$2A(a0)
		beq.s	loc_26E46
		neg.w	$18(a1)			; Reverse direction depending on flip
		bset	#0,$2A(a1)

loc_26E46:
		move.w	#0,$1C(a1)		; Zero out inertia
		move.b	#$1A,$20(a1)	; Set falling animation

locret_26E52:
		rts
; End of function sub_26E08

; ---------------------------------------------------------------------------

Obj_LBZElevatorCupFlicker:
		jsr	MoveSprite.w
		tst.b	4(a0)
		bmi.s	loc_26E66
		move.w	#$7FFF,$10(a0)

loc_26E66:
		move.b	(Level_frame_counter+1).w,d0
		andi.b	#1,d0
		beq.s	locret_26E76
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

locret_26E76:
		rts
; ---------------------------------------------------------------------------

loc_26E78:
		move.w	$30(a0),d0
		andi.w	#$FF80,d0
		sub.w	(Camera_X_pos_coarse_back).w,d0
		cmpi.w	#$280,d0
		bhi.w	loc_26E92
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_26E92:
		move.w	respawn_addr(a0),d0
		beq.s	loc_26E9E
		movea.w	d0,a2
		bclr	#7,(a2)

loc_26E9E:
		lea	(Player_1).w,a1
		moveq	#3,d6
		bsr.s	LBZCupElevator_ReleasePlayer
		lea	(Player_2).w,a1
		moveq	#4,d6
		bsr.s	LBZCupElevator_ReleasePlayer
		jmp	Delete_Current_Sprite.w

; =============== S U B R O U T I N E =======================================


LBZCupElevator_ReleasePlayer:

		bclr	d6,$2A(a0)
		beq.w	locret_26ED8
		move.w	#prio(2),8(a1)
		clr.b	$2E(a1)
		bclr	#3,$2A(a1)
		bclr	#5,$2A(a1)
		bset	#1,$2A(a1)

locret_26ED8:
		rts
; End of function LBZCupElevator_ReleasePlayer


; =============== S U B R O U T I N E =======================================


LBZCupElevator_PlayerControl:

		tst.b	(a2)
		bne.s	loc_26F46	; If player is inside cup, branch
		tst.b	2(a2)
		beq.s	loc_26EEA	; If timer has run out, branch
		subq.b	#1,2(a2)
		rts
; ---------------------------------------------------------------------------

loc_26EEA:
		move.b	$26(a0),d0
		subi.b	#$20,d0
		cmpi.b	#$40,d0
		blo.w	locret_2702C	; Only be solid when in proper angle position
		jsr	SolidObjectFull2_1P.w
		btst	d6,$2A(a0)
		beq.w	locret_2702C	; If player is not standing on elevator, don't bother
		tst.w	$34(a0)
		bne.s	loc_26F26		; If $34 is set, then initiate elevator regardless of proximity to center
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		addi.w	#8,d0
		bmi.w	locret_2702C
		cmpi.w	#$10,d0
		bhs.w	locret_2702C	; Otherwise only initiate elevator when close to center

loc_26F26:
		move.b	#1,(a2)			; Elevator on
		move.b	#3,$2E(a1)		; Sonic is under control of object and is not animated by normal function
		clr.w	$18(a1)
		clr.w	$1A(a1)
		clr.w	$1C(a1)			; Clear momentum of character
		move.b	#0,$20(a1)		; Null animation number
		bra.w	loc_26FF4
; ---------------------------------------------------------------------------

loc_26F46:
		tst.b	4(a1)
		bpl.w	loc_26FD4		; If player is offscreen somehow, branch
		cmpi.b	#4,5(a1)
		bhs.w	loc_26FD4		; If player is in hit routine, branch

		cmp.w	#Boxes_LBZK-Ranges_LBZK,SpawnBoxPos.w; check if knux cutscene (a hack)
		bne.s	.chk			; if no, normal code
		move.w	$10(a0),d1		; NAT: Some magic code here, dont worry =I
		sub.w	$10(a1),d1
		bpl.s	.abs
		neg.w	d1

.abs		cmp.w	#$30,d1
		bge.s	.jump

.chk		andi.b	#$70,d0
		beq.w	loc_26FF4		; If jump hasn't been pressed, branch
		tst.b	(__u_FAA9).w
		bne.w	loc_26FF4		; If controller is disabled, branch

		move.w	#-$480,$1A(a1)		; Set jump speed regardless
		btst	#$A,d0
		beq.s	._1
		move.w	#-$200,$18(a1)		; Set left speed if holding left on controller

._1		btst	#$B,d0
		beq.s	.jump
		move.w	#$200,$18(a1)		; Set right speed if holding right on controller

.jump		move.w	#prio(2),8(a1)		; Reset character priority
		clr.b	$2E(a1)			; Sonic is under player control once more
		bclr	d6,$2A(a0)		; Release Solid object
		bclr	#3,$2A(a1)
		bclr	#5,$2A(a1)		; Release player from object
		bset	#1,$2A(a1)
		move.b	#0,$40(a1)		; Not jumping (?)
		move.b	#$E,$1E(a1)
		move.b	#7,$1F(a1)		; Reset height/width
		move.b	#2,$20(a1)		; Set jumping animation
		bset	#2,$2A(a1)		; Set character in air
		bclr	#4,$2A(a1)		; Full air control to player
		clr.b	(a2)			; Turn off elevator
		move.b	#$12,2(a2)		; Set cooldown timer so that elevator won't restart instantly
		rts
; ---------------------------------------------------------------------------

loc_26FD4:

		bclr	d6,$2A(a0)		; Release player if offscreen somehow
		bclr	#3,$2A(a1)
		move.w	#prio(2),8(a1)
		clr.b	$2E(a1)
		move.b	#0,(a2)
		move.b	#$3C,2(a2)
		rts
; ---------------------------------------------------------------------------

loc_26FF4:

		move.w	$10(a0),$10(a1)	; Match character position to cup position
		move.w	$14(a0),d0
		subi.w	#$10,d0
		move.w	d0,$14(a1)
		move.w	#prio(5),8(a1)		; Set character priority
		move.b	$26(a0),d0
		addi.b	#$20,d0
		cmpi.b	#$C0,d0
		blo.s	loc_27020
		move.w	#prio(2),8(a1)		; If correct angle range, set priority higher

loc_27020:
		moveq	#0,d0
		move.b	$26(a0),d0
		jmp	(loc_32610).l
; ---------------------------------------------------------------------------

locret_2702C:

		rts
; End of function LBZCupElevator_PlayerControl

; ---------------------------------------------------------------------------

Obj_LBZCupElevatorBase:
		movea.w	$40(a0),a1
		move.w	$14(a1),$14(a0)
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

Obj_LBZCupElevatorAttach:
		movea.w	$40(a0),a1
		move.w	$14(a1),$14(a0)
		move.b	$26(a1),$26(a0)		; Match angle and Y position to parent object
		move.w	#prio(3),8(a0)
		move.b	$26(a0),d0			; If angle is positive object has lower priority
		bpl.s	loc_27060
		move.w	#prio(2),8(a0)

loc_27060:
		andi.b	#-2,4(a0)
		subi.b	#$40,d0
		bpl.s	loc_27072
		ori.b	#1,4(a0)	; Flip object if angle-$40 is negative

loc_27072:
		move.b	$26(a0),d0
		jsr	GetSineCosine.w
		move.w	d1,d2
		add.w	d1,d1
		add.w	d2,d1
		asr.w	#5,d1
		add.w	$30(a0),d1
		move.w	d1,$10(a0)
		move.w	$30(a0),d0
		jmp	Sprite_OnScreen_Test2.w
; ---------------------------------------------------------------------------

Obj_LBZCupElevatorPole:

		move.l	#Map_LBZCupElevator,$C(a0)
		move.w	#$440D,$A(a0)
		move.b	#4,4(a0)
		move.w	#prio(3),8(a0)
		move.b	#8,7(a0)
		move.b	#$30,6(a0)
		move.w	$10(a0),$30(a0)
		move.w	$14(a0),$32(a0)
		move.b	#3,$22(a0)
		btst	#6,$2C(a0)
		beq.s	loc_270E4
		cmpi.w	#3,(Player_mode).w
		bne.s	loc_270E4
		move.w	#$7F00,$10(a0)

loc_270E4:

		move.b	$2C(a0),d0
		andi.b	#$3F,d0
		beq.s	loc_270FA
		move.b	#$60,6(a0)
		move.b	#4,$22(a0)

loc_270FA:
		move.l	#loc_27100,(a0)

loc_27100:
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

Obj_1A_1:
		move.l	#Map_LBZUnusedUnknown,$C(a0)
		move.w	#$43C3,$A(a0)
		ori.b	#4,4(a0)
		move.b	#$40,7(a0)
		move.b	#$40,6(a0)
		move.w	#prio(4),8(a0)
		move.b	#$80,$42(a0)
		move.b	#1,$22(a0)
		jsr	Create_New_Sprite3.w
		bne.w	loc_27190
		move.l	#loc_271E0,(a1)
		move.l	#Map_LBZUnusedUnknown,$C(a1)
		move.w	#$43C3,$A(a1)
		ori.b	#4,4(a1)
		move.b	#$40,7(a1)
		move.b	#$40,6(a1)
		move.w	#prio(4),8(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		move.b	#$80,$42(a1)
		bset	#6,4(a1)
		move.w	#6,$16(a1)
		move.w	a0,$3C(a1)

loc_27190:
		move.b	#$10,$42(a0)
		move.l	#loc_2719C,(a0)

loc_2719C:
		btst	#4,(Ctrl_2).w
		beq.s	loc_271AA
		move.b	#0,$42(a0)

loc_271AA:
		btst	#5,(Ctrl_2).w
		beq.s	loc_271B8
		addi.b	#1,$42(a0)

loc_271B8:
		btst	#6,(Ctrl_2).w
		beq.s	loc_271C6
		subi.b	#1,$42(a0)

loc_271C6:
		moveq	#0,d1
		move.b	7(a0),d1
		moveq	#8,d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	$10(a0),d4
		bsr.w	sub_27270
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_271E0:
		movea.w	$3C(a0),a1
		move.b	$42(a1),$42(a0)
		bsr.w	sub_271F4
		jmp	Sprite_OnScreen_Test.w

; =============== S U B R O U T I N E =======================================


sub_271F4:
		move.b	$42(a0),d0
		jsr	GetSineCosine.w
		move.w	$14(a0),d2
		move.w	$10(a0),d3
		swap	d0
		swap	d1
		asr.l	#5,d0
		asr.l	#5,d1
		move.l	d0,d4
		move.l	d1,d5
		add.l	d0,d0
		add.l	d1,d1
		movem.l	d0-d5,-(sp)
		add.l	d0,d4
		add.l	d1,d5
		lea	$18(a0),a2
		moveq	#2,d6

loc_27224:
		movem.l	d4-d5,-(sp)
		swap	d4
		swap	d5
		add.w	d2,d4
		add.w	d3,d5
		move.w	d5,(a2)+
		move.w	d4,(a2)+
		movem.l	(sp)+,d4-d5
		add.l	d0,d4
		add.l	d1,d5
		addq.w	#2,a2
		dbf	d6,loc_27224
		movem.l	(sp)+,d0-d5
		neg.l	d4
		neg.l	d5
		sub.l	d0,d4
		sub.l	d1,d5
		moveq	#2,d6

loc_27250:
		movem.l	d4-d5,-(sp)
		swap	d4
		swap	d5
		add.w	d2,d4
		add.w	d3,d5
		move.w	d5,(a2)+
		move.w	d4,(a2)+
		movem.l	(sp)+,d4-d5
		sub.l	d0,d4
		sub.l	d1,d5
		addq.w	#2,a2
		dbf	d6,loc_27250
		rts
; End of function sub_271F4


; =============== S U B R O U T I N E =======================================


sub_27270:
		lea	Vectors.w,a2		; NAT: Wat
		lea	(Player_1).w,a1
		moveq	#3,d6
		movem.l	d1-d3,-(sp)
		bsr.s	sub_2728E
		movem.l	(sp)+,d1-d3
	;	lea	(Vectors+$34).w,a2
		lea	(Player_2).w,a1
		moveq	#4,d6		; NAT: Fuck me
; End of function sub_27270


; =============== S U B R O U T I N E =======================================


sub_2728E:
		btst	d6,$2A(a0)
		beq.w	loc_2734C
		move.w	$1C(a1),d0
		move.b	$42(a0),d4
		addi.b	#$40,d4
		bpl.s	loc_272A6
		neg.w	d0

loc_272A6:
		add.w	d0,(a2)
		btst	#1,$2A(a1)
		bne.s	loc_272D4
		move.b	$42(a0),d0
		jsr	GetSineCosine.w
		tst.w	d1
		bmi.s	loc_272C0
		neg.w	d1

loc_272C0:
		asr.w	#2,d1
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		cmp.w	d1,d0
		blt.s	loc_272D4
		neg.w	d1
		cmp.w	d1,d0
		blt.s	loc_272E8

loc_272D4:

		bclr	#3,$2A(a1)
		bset	#1,$2A(a1)
		bclr	d6,$2A(a0)
		moveq	#0,d4
		rts
; ---------------------------------------------------------------------------

loc_272E8:
		bsr.w	sub_272F0
		moveq	#0,d4
		rts
; End of function sub_2728E


; =============== S U B R O U T I N E =======================================


sub_272F0:

		move.w	d3,d5
		move.b	$42(a0),d0
		jsr	GetSineCosine.w
		move.w	$14(a0),d2
		move.w	$10(a0),d3
		move.w	(a2),d4
		muls.w	d4,d0
		muls.w	d4,d1
		swap	d0
		swap	d1
		add.w	d0,d2
		add.w	d1,d3
		move.b	$42(a0),d0
		move.b	d0,d1
		addi.b	#$40,d1
		bpl.s	loc_27322
		addi.b	#$80,d0

loc_27322:
		move.b	d0,$26(a1)
		moveq	#0,d1
		move.b	$1E(a1),d1
		add.w	d1,d5
		lsl.w	#8,d5
		jsr	GetSineCosine.w
		muls.w	d5,d0
		muls.w	d5,d1
		swap	d0
		swap	d1
		add.w	d0,d3
		sub.w	d1,d2
		move.w	d2,$14(a1)
		move.w	d3,$10(a1)
		rts
; End of function sub_272F0

; ---------------------------------------------------------------------------

loc_2734C:
		tst.w	$1A(a1)
		bmi.w	locret_273E2
		move.b	$42(a0),d0
		jsr	GetSineCosine.w
		move.w	d0,d4
		move.w	d1,d2
		tst.w	d1
		bmi.s	loc_27368
		neg.w	d1

loc_27368:
		asr.w	#2,d1
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		cmp.w	d1,d0
		blt.s	locret_273E2
		neg.w	d1
		cmp.w	d1,d0
		bge.s	locret_273E2
		swap	d0
		divs.w	d2,d0
		move.w	d0,(a2)
		neg.w	d4
		muls.w	d4,d0
		swap	d0
		move.w	d3,d5
		add.w	d0,d3
		move.w	$14(a0),d0
		sub.w	d3,d0
		move.w	$14(a1),d2
		move.b	$1E(a1),d1
		ext.w	d1
		add.w	d2,d1
		addq.w	#4,d1
		sub.w	d1,d0
		bhi.s	locret_273E2
		cmpi.w	#-$10,d0
		blo.s	locret_273E2
		tst.b	$2E(a1)
		bmi.s	locret_273E2
		cmpi.b	#6,5(a1)
		bhs.s	locret_273E2
		move.b	$42(a0),d0
		move.b	d0,d1
		addi.b	#$40,d1
		bpl.s	loc_273C8
		addi.b	#$80,d0

loc_273C8:
		jsr	GetSineCosine.w
		muls.w	#$1B00,d0
		swap	d0
		sub.w	d0,(a2)
		move.w	d5,d3
		bsr.w	sub_272F0
		jmp	RideObject_SetRide.w
; ---------------------------------------------------------------------------

locret_273E2:

		rts
; ---------------------------------------------------------------------------

Obj_LBZPipePlug:

		move.b	#$10,$1E(a0)
		move.l	#Map_LBZPipePlug,$C(a0)
		move.w	#$42E6,$A(a0)
		move.b	#$10,7(a0)
		move.b	#$20,6(a0)
		move.l	#word_276D8,$3C(a0)
		move.b	#4,4(a0)
		move.w	#prio(4),8(a0)
		move.b	#7,$22(a0)
		move.l	#loc_27424,(a0)

loc_27424:
		move.w	(Player_1+x_vel).w,$30(a0)
		move.w	(Player_2+$18).w,$32(a0)
		move.w	#$1B,d1
		move.w	#$20,d2
		move.w	#$21,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		move.b	$2A(a0),d0
		andi.b	#$60,d0
		bne.s	loc_27456

loc_27450:

		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_27456:
		lea	(Player_1).w,a1
		move.w	$30(a0),d1
		btst	#5,$2A(a0)
		beq.s	loc_274A2
		cmpi.b	#2,$20(a1)
		bne.s	loc_274A2
		move.w	d1,d0
		bpl.s	loc_27474
		neg.w	d0

loc_27474:
		cmpi.w	#$480,d0
		blo.s	loc_274A2
		bclr	#6,$2A(a0)
		beq.s	loc_274D6
		lea	(Player_2).w,a2
		bclr	#5,$2A(a2)
		cmpi.b	#2,$20(a2)
		bne.s	loc_274D6
		move.w	$32(a0),$18(a2)
		move.w	$18(a2),$1C(a2)
		bra.s	loc_274D6
; ---------------------------------------------------------------------------

loc_274A2:

		lea	(Player_2).w,a1
		move.w	$32(a0),d1
		btst	#6,$2A(a0)
		beq.s	loc_27450
		cmpi.b	#2,$20(a1)
		bne.s	loc_27450
		move.w	d1,d0
		bpl.s	loc_274C0
		neg.w	d0

loc_274C0:
		cmpi.w	#$480,d0
		blo.w	loc_27450
		bclr	#6,$2A(a0)
		beq.s	loc_274D6
		bclr	#5,(Player_2+$2A).w

loc_274D6:

		bclr	#5,$2A(a0)
		beq.s	loc_274E4
		bclr	#5,(Player_1+$2A).w

loc_274E4:
		move.w	d1,$18(a1)
		addq.w	#4,$10(a1)
		lea	(word_276D8).l,a4
		move.w	$10(a0),d0
		cmp.w	$10(a1),d0
		blo.s	loc_27508
		subq.w	#8,$10(a1)
		lea	(word_27718).l,a4

loc_27508:
		move.w	$18(a1),$1C(a1)
		move.b	$2C(a0),d1
		beq.s	loc_2758A
		cmpi.b	#$1F,d1
		bne.s	loc_27534
		move.b	#1,(__u_F7C2).w
		move.w	#$660,(Target_water_level).w
		tst.b	(Super_Sonic_Knux_flag).w
		beq.s	loc_2755E
		move.b	#2,(Water_speed).w
		bra.s	loc_2755E
; ---------------------------------------------------------------------------

loc_27534:
		jsr	Create_New_Sprite3.w
		bne.w	loc_2758A
		move.l	#Obj_AutomaticTunnelDelayed,(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		addq.w	#2,$14(a1)
	;	move.b	#7,$24(a1)		; NAT: Make the tunnel instant!
		move.b	d1,$2C(a1)

loc_2755E:

		jsr	Create_New_Sprite3.w
		bne.w	loc_2758A
		move.l	#Obj_TunnelExhaustControl,(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		subi.w	#$20,$14(a1)
		move.w	#1,$1A(a1)
		move.b	d1,$2C(a1)

loc_2758A:

		move.l	#loc_27592,(a0)
		bsr.s	sub_275F2

loc_27592:
		jsr	MoveSprite2.w
		addi.w	#$18,$1A(a0)
		tst.b	4(a0)
		bpl.w	loc_275AC
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_275AC:

		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_275B2:
		moveq	#0,d0
		move.b	$23(a0),$22(a0)
		addq.b	#1,$23(a0)
		cmpi.b	#6,$23(a0)
		blo.s	loc_275CC
		move.b	#0,$23(a0)

loc_275CC:
		jsr	MoveSprite2.w
		addi.w	#$18,$1A(a0)
		tst.b	4(a0)
		bpl.w	loc_275AC
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
byte_275E6:	dc.b 0
		dc.b 1
		dc.b 2
		dc.b 3
		dc.b 5
		dc.b 0
		dc.b 0
		dc.b 1
		dc.b 2
		dc.b 3
		dc.b 5
		dc.b 0

; =============== S U B R O U T I N E =======================================


sub_275F2:
		lea	(byte_275E6).l,a5
		moveq	#0,d0
		move.b	$22(a0),d0
		add.w	d0,d0
		movea.l	$C(a0),a3
		lea	$1A(a3),a2
		adda.w	(a3,d0.w),a2
		move.l	#loc_275B2,d4
		move.b	4(a0),d5
		moveq	#$B,d1

loc_27618:
		jsr	Create_New_Sprite3.w
		bne.w	loc_276D0
		move.l	d4,(a1)
		move.l	a3,$C(a1)
		move.b	d5,4(a1)
		move.w	$A(a0),$A(a1)
		move.b	8(a0),8(a1)
		move.b	7(a0),7(a1)
		move.w	(a4)+,$18(a1)
		move.w	(a4)+,$1A(a1)
		move.b	(a5)+,$22(a1)
		move.b	$22(a1),$23(a1)
		move.b	(a2),d0
		addq.w	#4,a2
		ext.w	d0
		add.w	$14(a0),d0
		move.w	d0,$14(a1)
		move.w	(a2)+,d0
		add.w	$10(a0),d0
		move.w	d0,$10(a1)
		dbf	d1,loc_27618
		moveq	#0,d0
		move.b	$22(a0),d0
		add.w	d0,d0
		movea.l	$C(a0),a3
		adda.w	(a3,d0.w),a3
		move.w	(a3)+,d1
		subq.w	#1,d1
		moveq	#3,d1
		bset	#5,4(a0)
		move.l	(a0),d4
		move.b	4(a0),d5
		movea.l	a0,a1
		bra.s	loc_2769C
; ---------------------------------------------------------------------------

loc_27692:
		jsr	Create_New_Sprite3.w
		bne.s	loc_276D0
		addq.w	#6,a3

loc_2769C:
		move.l	d4,(a1)
		move.l	a3,$C(a1)
		move.b	d5,4(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		move.w	$A(a0),$A(a1)
		move.b	8(a0),8(a1)
		move.b	7(a0),7(a1)
		move.w	(a4)+,$18(a1)
		move.w	(a4)+,$1A(a1)
		dbf	d1,loc_27692

loc_276D0:

		moveq	#$59,d0
		jmp	Play_Sound_2.w
; End of function sub_275F2

; ---------------------------------------------------------------------------
word_276D8:	dc.w  $FC80, $FDC0

		dc.w  $FD00, $FDB0
		dc.w  $FD80, $FDA0
		dc.w  $FE00, $FDA0
		dc.w  $FE80, $FDB0
		dc.w  $FF00, $FDC0
		dc.w  $FC80, $FF40
		dc.w  $FD00, $FF30
		dc.w  $FD80, $FF20
		dc.w  $FE00, $FF20
		dc.w  $FE80, $FF30
		dc.w  $FF00, $FF40
		dc.w  $FC00, $FD40
		dc.w  $FF00, $FD40
		dc.w  $FC00, $FF80
		dc.w  $FF00, $FF80
word_27718:	dc.w   $100, $FDC0
		dc.w   $180, $FDB0
		dc.w   $200, $FDA0
		dc.w   $280, $FDA0
		dc.w   $300, $FDB0
		dc.w   $380, $FDC0
		dc.w   $100, $FF40
		dc.w   $180, $FF30
		dc.w   $200, $FF20
		dc.w   $280, $FF20
		dc.w   $300, $FF30
		dc.w   $380, $FF40
		dc.w   $100, $FD40
		dc.w   $400, $FD40
		dc.w   $100, $FF80
		dc.w   $400, $FF80

; =============== S U B R O U T I N E =======================================



Animate_Tiles:

		moveq	#0,d0
		move.w	(Current_zone_and_act).w,d0
		ror.b	#1,d0
		lsr.w	#5,d0
		andi.w	#$FC,d0
		move.w	Offs_AniPLC(pc,d0.w),d1
		lea	Offs_AniFunc(pc,d1.w),a2
		move.w	Offs_AniFunc(pc,d0.w),d0
		jmp	Offs_AniFunc(pc,d0.w)
; ---------------------------------------------------------------------------
Offs_AniFunc:	dc.w AnimateTiles_AIZ1-Offs_AniFunc

Offs_AniPLC:	dc.w AniPLC_AIZ1-Offs_AniFunc
		dc.w AnimateTiles_AIZ2-Offs_AniFunc
		dc.w AniPLC_AIZ2-Offs_AniFunc
		dc.w AnimateTiles_HCZ1-Offs_AniFunc
		dc.w AniPLC_HCZ1-Offs_AniFunc
		dc.w AnimateTiles_HCZ2-Offs_AniFunc
		dc.w AniPLC_HCZ2-Offs_AniFunc
		dc.w AnimateTiles_MGZ-Offs_AniFunc
		dc.w AniPLC_MGZ-Offs_AniFunc
		dc.w AnimateTiles_MGZ-Offs_AniFunc
		dc.w AniPLC_MGZ-Offs_AniFunc
		dc.w AnimateTiles_CNZ-Offs_AniFunc
		dc.w AniPLC_CNZ-Offs_AniFunc
		dc.w AnimateTiles_CNZ-Offs_AniFunc
		dc.w AniPLC_CNZ-Offs_AniFunc
		dc.w AnimateTiles_DoAniPLC-Offs_AniFunc
		dc.w AniPLC_FBZ1-Offs_AniFunc
		dc.w AnimateTiles_DoAniPLC-Offs_AniFunc
		dc.w AniPLC_FBZ2-Offs_AniFunc
		dc.w AnimateTiles_ICZ-Offs_AniFunc
		dc.w AniPLC_ICZ-Offs_AniFunc
		dc.w AnimateTiles_ICZ-Offs_AniFunc
		dc.w AniPLC_ICZ-Offs_AniFunc
		dc.w AnimateTiles_LBZ1-Offs_AniFunc
		dc.w AniPLC_LBZ1-Offs_AniFunc
		dc.w AnimateTiles_LBZ2-Offs_AniFunc
		dc.w AniPLC_LBZ2-Offs_AniFunc
		dc.w AnimateTiles_MHZ-Offs_AniFunc
		dc.w AniPLC_MHZ-Offs_AniFunc
		dc.w AnimateTiles_MHZ-Offs_AniFunc
		dc.w AniPLC_MHZ-Offs_AniFunc
		dc.w AnimateTiles_SOZ1-Offs_AniFunc
		dc.w AniPLC_LRZ1-Offs_AniFunc
		dc.w AnimateTiles_SOZ2-Offs_AniFunc
		dc.w AniPLC_LRZ1-Offs_AniFunc
		dc.w AnimateTiles_LRZ1-Offs_AniFunc
		dc.w AniPLC_LRZ1-Offs_AniFunc
		dc.w AnimateTiles_LRZ2-Offs_AniFunc
		dc.w AniPLC_LRZ2-Offs_AniFunc
		dc.w AnimateTiles_DoAniPLC-Offs_AniFunc
		dc.w AniPLC_SSZ-Offs_AniFunc
		dc.w AnimateTiles_SSZ2_ALZ-Offs_AniFunc
		dc.w AniPLC_SSZ-Offs_AniFunc
		dc.w AnimateTiles_DoAniPLC-Offs_AniFunc
		dc.w AniPLC_DEZ-Offs_AniFunc
		dc.w AnimateTiles_DoAniPLC-Offs_AniFunc
		dc.w AniPLC_DEZ-Offs_AniFunc
		dc.w AnimateTiles_SSZ2_ALZ-Offs_AniFunc
		dc.w AniPLC_ALZ-Offs_AniFunc
		dc.w AnimateTiles_SSZ2_ALZ-Offs_AniFunc
		dc.w AniPLC_ALZ-Offs_AniFunc
		dc.w AnimateTiles_SSZ2_ALZ-Offs_AniFunc
		dc.w AniPLC_ALZ-Offs_AniFunc
		dc.w AnimateTiles_SSZ2_ALZ-Offs_AniFunc
		dc.w AniPLC_ALZ-Offs_AniFunc
		dc.w AnimateTiles_DoAniPLC-Offs_AniFunc
		dc.w AniPLC_NULL-Offs_AniFunc
		dc.w AnimateTiles_DoAniPLC-Offs_AniFunc
		dc.w AniPLC_ALZ-Offs_AniFunc
		dc.w AnimateTiles_DoAniPLC-Offs_AniFunc
		dc.w AniPLC_BPZ-Offs_AniFunc
		dc.w AnimateTiles_DoAniPLC-Offs_AniFunc
		dc.w AniPLC_BPZ-Offs_AniFunc
		dc.w AnimateTiles_DPZ-Offs_AniFunc
		dc.w AniPLC_DPZ-Offs_AniFunc
		dc.w AnimateTiles_DPZ-Offs_AniFunc
		dc.w AniPLC_DPZ-Offs_AniFunc
		dc.w AnimateTiles_SSZ2_ALZ-Offs_AniFunc
		dc.w AniPLC_NULL-Offs_AniFunc
		dc.w AnimateTiles_SSZ2_ALZ-Offs_AniFunc
		dc.w AniPLC_NULL-Offs_AniFunc
		dc.w AnimateTiles_SSZ2_ALZ-Offs_AniFunc
		dc.w AniPLC_NULL-Offs_AniFunc
		dc.w AnimateTiles_SSZ2_ALZ-Offs_AniFunc
		dc.w AniPLC_NULL-Offs_AniFunc
		dc.w AnimateTiles_Gumball-Offs_AniFunc
		dc.w AniPLC_NULL-Offs_AniFunc
		dc.w AnimateTiles_Gumball-Offs_AniFunc
		dc.w AniPLC_NULL-Offs_AniFunc
		dc.w AnimateTiles_Pachinko-Offs_AniFunc
		dc.w AniPLC_Pachinko-Offs_AniFunc
		dc.w AnimateTiles_Pachinko-Offs_AniFunc
		dc.w AniPLC_Pachinko-Offs_AniFunc
		dc.w AnimateTiles_SSZ2_ALZ-Offs_AniFunc
		dc.w AniPLC_NULL-Offs_AniFunc
		dc.w AnimateTiles_SSZ2_ALZ-Offs_AniFunc
		dc.w AniPLC_NULL-Offs_AniFunc
		dc.w AnimateTiles_LRZ3-Offs_AniFunc
		dc.w AniPLC_NULL-Offs_AniFunc
		dc.w AnimateTiles_DoAniPLC-Offs_AniFunc
		dc.w AniPLC_HPZ-Offs_AniFunc
		dc.w AnimateTiles_SSZ2_ALZ-Offs_AniFunc
		dc.w AnimateTiles_NULL3-Offs_AniFunc
		dc.w AnimateTiles_DoAniPLC-Offs_AniFunc
		dc.w AniPLC_HPZ-Offs_AniFunc
; ---------------------------------------------------------------------------

AnimateTiles_SSZ2_ALZ:
		rts
; ---------------------------------------------------------------------------

AnimateTiles_AIZ1:
		tst.b	(Boss_flag).w
		bne.s	locret_27848
		tst.b	(Dynamic_resize_routine).w
		bne.w	AnimateTiles_DoAniPLC

locret_27848:
		rts
; ---------------------------------------------------------------------------

AnimateTiles_AIZ2:
		tst.b	(Boss_flag).w
		bne.s	locret_2787E
		cmpi.w	#$1C0,(Camera_X_pos).w
		bhs.w	AnimateTiles_DoAniPLC
		lea	(Anim_Counters).w,a3
		addq.w	#2,a2
		moveq	#0,d6
		bsr.w	AnimateTiles_DoAniPLC_Part2
		clr.l	(a3)
		clr.l	(a3)
		move.l	#ArtUnc_AniAIZ2_FirstTree,d1
		move.w	#$1940,d2
		move.w	#$230,d3
		jmp	Add_To_DMA_Queue.w
; ---------------------------------------------------------------------------

locret_2787E:
		rts
; ---------------------------------------------------------------------------

AnimateTiles_HCZ1:
		tst.b	(ScrEvents_D).w
		beq.s	loc_27888
		rts
; ---------------------------------------------------------------------------
; This section determines which	tiles to load at what position to simulate a
; waterline extending into the background
; ---------------------------------------------------------------------------

loc_27888:
		lea	(Anim_Counters+4).w,a3

loc_2788C:

		moveq	#0,d1
		move.w	(ScrEvents_A).w,d1
		cmp.w	(a3),d1
		beq.w	loc_2797A
		move.w	d1,(a3)
		tst.w	d1
		beq.w	loc_2797E
		bpl.w	loc_27912
		addi.w	#$60,d1
		bcc.w	loc_2797A
		move.w	d1,d0
		add.w	d1,d1
		add.w	d0,d1
		lsl.w	#5,d1
		lea	(Sprite_table_buffer_P2+$100).l,a4
		lea	(HCZ_WaterlineScroll_Data).l,a5
		adda.w	d1,a5
		move.w	#$5F,d1

loc_278C6:
		moveq	#0,d0
		move.b	(a5)+,d0
		add.w	d0,d0
		add.w	d0,d0
		lea	(ArtUnc_AniHCZ1_WaterlineBelow).l,a0
		adda.w	d0,a0
		move.l	(a0),(a4)
		lea	$600(a0),a0
		lea	$180(a4),a4
		move.l	(a0),(a4)
		lea	-$17C(a4),a4
		dbf	d1,loc_278C6
		move.l	#Sprite_table_buffer_P2+$100,d1
		move.w	#$5B80,d2
		move.w	#$180,d3
		jsr	Add_To_DMA_Queue.w
		tst.w	2(a3)
		bmi.s	loc_2790E
		move.w	#-1,2(a3)
		bsr.w	AniHCZ_FixLowerBG

loc_2790E:
		bra.w	loc_2797A
; ---------------------------------------------------------------------------

loc_27912:
		neg.w	d1
		addi.w	#$60,d1
		bcc.s	loc_2797A
		move.w	d1,d0
		add.w	d1,d1
		add.w	d0,d1
		lsl.w	#5,d1
		lea	(Sprite_table_buffer_P2+$100).l,a4
		lea	(HCZ_WaterlineScroll_Data).l,a5
		adda.w	d1,a5
		move.w	#$5F,d1

loc_27934:
		moveq	#0,d0
		move.b	(a5)+,d0
		add.w	d0,d0
		add.w	d0,d0
		lea	(ArtUnc_AniHCZ1_WaterlineAbove).l,a0
		adda.w	d0,a0
		move.l	(a0),(a4)
		lea	$600(a0),a0
		lea	$180(a4),a4
		move.l	(a0),(a4)
		lea	-$17C(a4),a4
		dbf	d1,loc_27934
		move.l	#Sprite_table_buffer_P2+$100,d1
		move.w	#$5E80,d2
		move.w	#$180,d3
		jsr	Add_To_DMA_Queue.w
		tst.w	2(a3)
		beq.s	loc_2797A
		move.w	#0,2(a3)
		bsr.s	AniHCZ_FixUpperBG

loc_2797A:

		bra.w	AnimateTiles_DoAniPLC
; ---------------------------------------------------------------------------

loc_2797E:

		move.w	#1,(a3)
		bsr.s	AniHCZ_FixLowerBG

; ---------------------------------------------------------------------------
; When the special waterline goes below	water, this routine loads tiles	to
; fix the background area that was affected when the waterline was above
; ---------------------------------------------------------------------------

; =============== S U B R O U T I N E =======================================


AniHCZ_FixUpperBG:

		move.l	#ArtUnc_FixHCZ1_UpperBG1,d1
		move.w	#$5B80,d2
		move.w	#$C0,d3
		jsr	Add_To_DMA_Queue.w
		move.l	#ArtUnc_FixHCZ1_UpperBG2,d1
		move.w	#$5D00,d2
		move.w	#$C0,d3
		jmp	Add_To_DMA_Queue.w
; End of function AniHCZ_FixUpperBG

; ---------------------------------------------------------------------------
; When the special waterline goes above	water, this routine loads tiles	to
; fix the background area that was affected when the waterline was below
; ---------------------------------------------------------------------------

; =============== S U B R O U T I N E =======================================


AniHCZ_FixLowerBG:

		move.l	#ArtUnc_FixHCZ1_LowerBG1,d1
		move.w	#$5E80,d2
		move.w	#$C0,d3
		jsr	Add_To_DMA_Queue.w
		move.l	#ArtUnc_FixHCZ1_LowerBG2,d1
		move.w	#$6000,d2
		move.w	#$C0,d3
		jmp	Add_To_DMA_Queue.w
; End of function AniHCZ_FixLowerBG


; =============== S U B R O U T I N E =======================================


sub_279D4:
		lea	(AniPLC_HCZ1).l,a2
		lea	(Anim_Counters+4).w,a3
		move.w	(ScrEvents_A).w,d1
		beq.s	loc_2797E
		bpl.s	loc_27A1C
		addi.w	#$60,d1
		bcc.s	loc_279F2
		bsr.s	AniHCZ_FixLowerBG
		bra.w	loc_2788C
; ---------------------------------------------------------------------------

loc_279F2:
		bsr.s	AniHCZ_FixLowerBG
		move.l	#ArtUnc_AniHCZ1_WaterlineBelow,d1
		move.w	#$5B80,d2
		move.w	#$C0,d3
		jsr	Add_To_DMA_Queue.w
		move.l	#ArtUnc_AniHCZ1_WaterlineBelow2,d1
		move.w	#$5D00,d2
		move.w	#$C0,d3
		jmp	Add_To_DMA_Queue.w
; ---------------------------------------------------------------------------

loc_27A1C:
		neg.w	d1
		addi.w	#$60,d1
		bcc.s	loc_27A2C
		bsr.w	AniHCZ_FixUpperBG
		bra.w	loc_2788C
; ---------------------------------------------------------------------------

loc_27A2C:
		bsr.w	AniHCZ_FixUpperBG
		move.l	#ArtUnc_AniHCZ1_WaterlineAbove,d1
		move.w	#$5E80,d2
		move.w	#$C0,d3
		jsr	Add_To_DMA_Queue.w
		move.l	#ArtUnc_AniHCZ1_WaterlineAbove2,d1
		move.w	#$6000,d2
		move.w	#$C0,d3
		jmp	Add_To_DMA_Queue.w
; End of function sub_279D4

; ---------------------------------------------------------------------------

AnimateTiles_HCZ2:
		lea	(Anim_Counters).w,a3
		moveq	#0,d1
		move.w	(ScrEvents_B).w,d1
		andi.w	#$1F,d1
		cmp.b	1(a3),d1
		beq.s	loc_27AB4
		move.b	d1,1(a3)
		move.w	d1,d2
		andi.w	#7,d1
		lsl.w	#7,d1
		move.l	d1,d5
		andi.w	#$18,d2
		move.w	d2,d0
		lsl.w	#2,d2
		add.w	d2,d1
		lsr.w	#1,d0
		lea	word_27AB8(pc,d0.w),a4
		lea	(ArtUnc_AniHCZ2_SmallBGLine).l,a0
		move.w	#$5A40,d4
		add.l	a0,d1
		move.w	d4,d2
		move.w	(a4)+,d3
		add.w	d3,d4
		add.w	d3,d4
		jsr	Add_To_DMA_Queue.w
		move.l	d5,d1
		add.l	a0,d1
		move.w	d4,d2
		move.w	(a4)+,d3
		beq.s	loc_27AB4
		jsr	Add_To_DMA_Queue.w

loc_27AB4:

		addq.w	#2,a3
		bra.s	loc_27AC8
; ---------------------------------------------------------------------------
word_27AB8:	dc.w $40
		dc.w 0
		dc.w $30
		dc.w $10
		dc.w $20
		dc.w $20
		dc.w $10
		dc.w $30
; ---------------------------------------------------------------------------

loc_27AC8:
		moveq	#0,d1
		move.w	(ScrEvents_B).w,d1
		andi.w	#$1F,d1
		cmp.b	1(a3),d1
		beq.s	loc_27B20
		move.b	d1,1(a3)
		move.w	d1,d2
		andi.w	#7,d1
		lsl.w	#8,d1
		move.l	d1,d5
		andi.w	#$18,d2
		move.w	d2,d0
		lsl.w	#3,d2
		add.w	d2,d1
		lsr.w	#1,d0
		lea	word_27B24(pc,d0.w),a4
		lea	(ArtUnc_AniHCZ2_2).l,a0
		move.w	#$5AC0,d4
		add.l	a0,d1
		move.w	d4,d2
		move.w	(a4)+,d3
		add.w	d3,d4
		add.w	d3,d4
		jsr	Add_To_DMA_Queue.w
		move.l	d5,d1
		add.l	a0,d1
		move.w	d4,d2
		move.w	(a4)+,d3
		beq.s	loc_27B20
		jsr	Add_To_DMA_Queue.w

loc_27B20:

		addq.w	#2,a3
		bra.s	loc_27B34
; ---------------------------------------------------------------------------
word_27B24:	dc.w $80
		dc.w 0
		dc.w $60
		dc.w $20
		dc.w $40
		dc.w $40
		dc.w $20
		dc.w $60
; ---------------------------------------------------------------------------

loc_27B34:
		moveq	#0,d1
		move.w	(ScrEvents_C).w,d1
		andi.w	#$1F,d1
		cmp.b	1(a3),d1
		beq.s	loc_27B8C
		move.b	d1,1(a3)
		move.w	d1,d2
		andi.w	#7,d1
		ror.w	#7,d1
		move.l	d1,d5
		andi.w	#$18,d2
		move.w	d2,d0
		lsl.w	#4,d2
		add.w	d2,d1
		lsr.w	#1,d0
		lea	word_27B90(pc,d0.w),a4
		lea	(ArtUnc_AniHCZ2_3).l,a0
		move.w	#$5BC0,d4
		add.l	a0,d1
		move.w	d4,d2
		move.w	(a4)+,d3
		add.w	d3,d4
		add.w	d3,d4
		jsr	Add_To_DMA_Queue.w
		move.l	d5,d1
		add.l	a0,d1
		move.w	d4,d2
		move.w	(a4)+,d3
		beq.s	loc_27B8C
		jsr	Add_To_DMA_Queue.w

loc_27B8C:

		addq.w	#2,a3
		bra.s	loc_27BA0
; ---------------------------------------------------------------------------
word_27B90:	dc.w $100
		dc.w 0
		dc.w $C0
		dc.w $40
		dc.w $80
		dc.w $80
		dc.w $40
		dc.w $C0
; ---------------------------------------------------------------------------

loc_27BA0:
		moveq	#0,d1
		move.w	(ScrEvents_C).w,d1
		andi.w	#$3F,d1
		cmp.b	1(a3),d1
		beq.s	loc_27C06
		move.b	d1,1(a3)
		neg.w	d1
		move.w	d1,d2
		andi.w	#7,d1
		ror.w	#7,d1
		move.w	d1,d0
		add.w	d0,d0
		add.w	d0,d1
		move.l	d1,d5
		not.w	d2
		andi.w	#$38,d2
		move.w	d2,d0
		lsl.w	#3,d2
		add.w	d2,d1
		add.w	d2,d2
		add.w	d2,d1
		lsr.w	#1,d0
		lea	word_27C0C(pc,d0.w),a4
		lea	(ArtUnc_AniHCZ2_4).l,a0
		move.w	#$5DC0,d4
		add.l	a0,d1
		move.w	d4,d2
		move.w	(a4)+,d3
		add.w	d3,d4
		add.w	d3,d4
		jsr	Add_To_DMA_Queue.w
		move.l	d5,d1
		add.l	a0,d1
		move.w	d4,d2
		move.w	(a4)+,d3
		beq.s	loc_27C06
		jsr	Add_To_DMA_Queue.w

loc_27C06:

		addq.w	#2,a3
		bra.w	loc_286E8
; ---------------------------------------------------------------------------
word_27C0C:	dc.w $300
		dc.w 0
		dc.w $2A0
		dc.w $60
		dc.w $240
		dc.w $C0
		dc.w $1E0
		dc.w $120
		dc.w $180
		dc.w $180
		dc.w $120
		dc.w $1E0
		dc.w $C0
		dc.w $240
		dc.w $60
		dc.w $2A0
; ---------------------------------------------------------------------------

AnimateTiles_MGZ:
		tst.b	(Boss_flag).w
		beq.w	AnimateTiles_DoAniPLC
		rts
; ---------------------------------------------------------------------------

AnimateTiles_CNZ:
		lea	(Anim_Counters).w,a3
		moveq	#0,d1
		move.w	(ScrEvents_A).w,d1
		sub.w	(Camera_X_pos_BG_copy).w,d1
		andi.w	#$3F,d1
		cmp.b	1(a3),d1
		beq.s	loc_27C96
		move.b	d1,1(a3)
		move.w	d1,d2
		andi.w	#7,d1
		ror.w	#6,d1
		move.l	d1,d5
		andi.w	#$38,d2
		move.w	d2,d0
		lsl.w	#4,d2
		add.w	d2,d1
		lsr.w	#1,d0
		lea	word_27C9C(pc,d0.w),a4
		lea	(ArtUnc_AniCNZ__6).l,a0
		move.w	#$6100,d4
		add.l	a0,d1
		move.w	d4,d2
		move.w	(a4)+,d3
		add.w	d3,d4
		add.w	d3,d4
		jsr	Add_To_DMA_Queue.w
		move.l	d5,d1
		add.l	a0,d1
		move.w	d4,d2
		move.w	(a4)+,d3
		beq.s	loc_27C96
		jsr	Add_To_DMA_Queue.w

loc_27C96:

		addq.w	#2,a3
		bra.w	loc_286E8
; ---------------------------------------------------------------------------
word_27C9C:	dc.w $200
		dc.w 0
		dc.w $1C0
		dc.w $40
		dc.w $180
		dc.w $80
		dc.w $140
		dc.w $C0
		dc.w $100
		dc.w $100
		dc.w $C0
		dc.w $140
		dc.w $80
		dc.w $180
		dc.w $40
		dc.w $1C0
word_27CBC:	dc.w $100
		dc.w 0
		dc.w $C0
		dc.w $40
		dc.w $80
		dc.w $80
		dc.w $40
		dc.w $C0
; ---------------------------------------------------------------------------

AnimateTiles_ICZ:
		lea	(Anim_Counters).w,a3
		moveq	#0,d0
		move.w	(ScrEvents_A).w,d0
		sub.w	(Camera_X_pos_BG_copy).w,d0
		andi.w	#$1F,d0
		cmp.b	1(a3),d0
		beq.s	loc_27D32
		move.b	d0,1(a3)
		move.l	d0,d1
		move.w	d0,d2
		andi.w	#7,d1
		ror.w	#7,d1
		move.l	d1,d5
		andi.w	#$18,d2
		move.w	d2,d0
		lsl.w	#4,d2
		add.w	d2,d1
		lsr.w	#1,d0
		lea	word_27CBC(pc,d0.w),a4
		lea	(ArtUnc_AniICZ__1).l,a0
		move.w	#$21C0,d4
		add.l	a0,d1
		move.w	d4,d2
		move.w	(a4)+,d3
		add.w	d3,d4
		add.w	d3,d4
		jsr	Add_To_DMA_Queue.w
		move.l	d5,d1
		add.l	a0,d1
		move.w	d4,d2
		move.w	(a4)+,d3
		beq.s	loc_27D32
		add.w	d3,d4
		add.w	d3,d4
		jsr	Add_To_DMA_Queue.w

loc_27D32:

		addq.w	#2,a3
		tst.b	(Current_act).w
		bne.w	loc_27DF8
		moveq	#0,d1
		move.w	(Camera_Y_pos_BG_copy).w,d1
		sub.w	(ScrEvents_B).w,d1
		neg.w	d1
		andi.w	#$3F,d1
		cmp.b	1(a3),d1
		beq.w	loc_27DF8
		move.b	d1,1(a3)
		add.w	d1,d1
		add.w	d1,d1
		addi.l	#ArtUnc_AniICZ__2,d1
		move.w	#$2440,d2
		move.w	#$80,d3
		jsr	Add_To_DMA_Queue.w
		moveq	#0,d1
		move.w	(Camera_Y_pos_BG_copy).w,d1
		move.w	(ScrEvents_B).w,d0
		asr.w	#1,d0
		sub.w	d0,d1
		asr.w	#1,d0
		sub.w	d0,d1
		neg.w	d1
		andi.w	#$1F,d1
		add.w	d1,d1
		add.w	d1,d1
		addi.l	#ArtUnc_AniICZ__3,d1
		move.w	#$2540,d2
		move.w	#$40,d3
		jsr	Add_To_DMA_Queue.w
		moveq	#0,d1
		move.w	(Camera_Y_pos_BG_copy).w,d1
		move.w	(ScrEvents_B).w,d0
		asr.w	#1,d0
		sub.w	d0,d1
		neg.w	d1
		andi.w	#$F,d1
		add.w	d1,d1
		add.w	d1,d1
		addi.l	#ArtUnc_AniICZ__4,d1
		move.w	#$25C0,d2
		move.w	#$20,d3
		jsr	Add_To_DMA_Queue.w
		moveq	#0,d1
		move.w	(Camera_Y_pos_BG_copy).w,d1
		move.w	(ScrEvents_B).w,d0
		asr.w	#2,d0
		sub.w	d0,d1
		neg.w	d1
		andi.w	#7,d1
		add.w	d1,d1
		add.w	d1,d1
		addi.l	#ArtUnc_AniICZ__5,d1
		move.w	#$2600,d2
		move.w	#$10,d3
		jsr	Add_To_DMA_Queue.w

loc_27DF8:

		addq.w	#2,a3
		bra.w	loc_286E8
; ---------------------------------------------------------------------------
		rts
; ---------------------------------------------------------------------------

AnimateTiles_LBZ1:
		lea	(Anim_Counters).w,a3
		subq.b	#1,(a3)
		bcc.s	loc_27E34
		move.b	#3,(a3)
		moveq	#0,d0
		move.b	1(a3),d0
		addq.b	#1,1(a3)
		andi.b	#$F,1(a3)
		ror.w	#7,d0
		move.l	#ArtUnc_AniLBZ__0,d1
		add.l	d0,d1
		move.w	#$2C00,d2
		move.w	#$100,d3
		jsr	Add_To_DMA_Queue.w

loc_27E34:
		addq.w	#2,a3
		moveq	#0,d0
		move.w	(ScrEvents_A).w,d0
		sub.w	(Camera_X_pos_BG_copy).w,d0
		andi.w	#$1F,d0
		cmp.b	1(a3),d0
		beq.s	loc_27EBC
		move.b	d0,1(a3)
		moveq	#0,d1
		move.w	d0,d2
		andi.w	#7,d0
		move.l	d0,d6
		lsl.w	#7,d0
		move.w	d0,d1
		lsl.w	#2,d0
		add.w	d0,d1
		move.l	d1,d5
		andi.w	#$18,d2
		move.w	d2,d0
		lsl.w	#2,d2
		add.w	d2,d1
		lsl.w	#2,d2
		add.w	d2,d1
		lsr.w	#1,d0
		lea	word_27EE0(pc,d0.w),a4
		lea	(ArtUnc_AniLBZ1_1).l,a0
		move.w	#$6A00,d4
		add.l	a0,d1
		move.w	d4,d2
		move.w	(a4)+,d3
		add.w	d3,d4
		add.w	d3,d4
		jsr	Add_To_DMA_Queue.w
		move.l	d5,d1
		add.l	a0,d1
		move.w	d4,d2
		move.w	(a4)+,d3
		beq.s	loc_27EA4
		add.w	d3,d4
		add.w	d3,d4
		jsr	Add_To_DMA_Queue.w

loc_27EA4:
		move.l	d6,d1
		lsl.w	#5,d1
		lea	(ArtUnc_AniLBZ1_2).l,a0
		add.l	a0,d1
		move.w	d4,d2
		move.w	#$10,d3
		jsr	Add_To_DMA_Queue.w

loc_27EBC:
		addq.w	#2,a3
		tst.w	(a3)+
		bne.s	loc_27ECE
		cmpi.b	#1,1(a3)
		beq.s	loc_27ED2
		move.w	#0,(a3)

loc_27ECE:
		bsr.w	loc_286E8

loc_27ED2:
		lea	(Anim_Counters+$C).w,a3
		lea	(AniPLC_LBZSpec).l,a2
		bra.w	loc_286E8
; ---------------------------------------------------------------------------
word_27EE0:	dc.w $140
		dc.w 0
		dc.w $F0
		dc.w $50
		dc.w $A0
		dc.w $A0
		dc.w $50
		dc.w $F0
; ---------------------------------------------------------------------------

AnimateTiles_LBZ2:
		lea	(Anim_Counters).w,a3
		tst.b	$F(a3)
		bne.s	loc_27F64
		subq.b	#1,(a3)
		bcc.s	loc_27F2A
		move.b	#3,(a3)
		moveq	#0,d0
		move.b	1(a3),d0
		addq.b	#1,1(a3)
		andi.b	#$F,1(a3)
		ror.w	#7,d0
		move.l	#ArtUnc_AniLBZ__0,d1
		add.l	d0,d1
		move.w	#$2C00,d2
		move.w	#$100,d3
		jsr	Add_To_DMA_Queue.w

loc_27F2A:
		addq.w	#2,a3
		moveq	#0,d1
		move.w	(ScrEvents_B).w,d1
		sub.w	(Camera_X_pos_BG_copy).w,d1
		andi.w	#$F,d1
		cmp.b	1(a3),d1
		beq.s	loc_27F5A
		move.b	d1,1(a3)
		lsl.w	#6,d1
		addi.l	#ArtUnc_AniLBZ2_2,d1
		move.w	#$5C60,d2
		move.w	#$20,d3
		jsr	Add_To_DMA_Queue.w

loc_27F5A:
		addq.w	#2,a3
		bsr.s	sub_27F66
		addq.w	#4,a3
		bra.w	loc_286E8
; ---------------------------------------------------------------------------

loc_27F64:
		addq.w	#4,a3

; =============== S U B R O U T I N E =======================================


sub_27F66:

		moveq	#0,d1
		move.w	(ScrEvents_A).w,d1
		cmp.w	(a3),d1
		beq.w	locret_28048
		move.w	d1,(a3)
		tst.w	d1
		beq.w	loc_2804A
		bpl.w	loc_27FE4
		addi.w	#$40,d1
		bcc.w	locret_28048
		lsl.w	#6,d1
		lea	(Sprite_table_buffer_P2_2+$80).l,a4
		lea	(LBZ_WaterlineScroll_Data).l,a5
		adda.w	d1,a5
		move.w	#$3F,d1

loc_27F9A:
		moveq	#0,d0
		move.b	(a5)+,d0
		add.w	d0,d0
		add.w	d0,d0
		lea	(ArtUnc_AniLBZ2_WaterlineBelow).l,a0
		adda.w	d0,a0
		move.l	(a0),(a4)
		lea	$100(a0),a0
		lea	$100(a4),a4
		move.l	(a0),(a4)
		lea	-$FC(a4),a4
		dbf	d1,loc_27F9A
		move.l	#Sprite_table_buffer_P2_2+$80,d1
		move.w	#$5860,d2
		move.w	#$100,d3
		jsr	Add_To_DMA_Queue.w
		tst.w	2(a3)
		beq.s	locret_27FE2
		move.w	#0,2(a3)
		bsr.w	sub_28066

locret_27FE2:
		rts
; ---------------------------------------------------------------------------

loc_27FE4:
		neg.w	d1
		addi.w	#$40,d1
		bcc.s	locret_28048
		lsl.w	#6,d1
		lea	(Sprite_table_buffer_P2_2+$80).l,a4
		lea	(LBZ_WaterlineScroll_Data).l,a5
		adda.w	d1,a5
		move.w	#$3F,d1

loc_28000:
		moveq	#0,d0
		move.b	(a5)+,d0
		add.w	d0,d0
		add.w	d0,d0
		lea	(ArtUnc_AniLBZ2_WaterlineAbove).l,a0
		adda.w	d0,a0
		move.l	(a0),(a4)
		lea	$100(a0),a0
		lea	$100(a4),a4
		move.l	(a0),(a4)
		lea	-$FC(a4),a4
		dbf	d1,loc_28000
		move.l	#Sprite_table_buffer_P2_2+$80,d1
		move.w	#$5A60,d2
		move.w	#$100,d3
		jsr	Add_To_DMA_Queue.w
		tst.w	2(a3)
		bmi.s	locret_28046
		move.w	#-1,2(a3)
		bsr.s	sub_28052

locret_28046:
		rts
; ---------------------------------------------------------------------------

locret_28048:

		rts
; ---------------------------------------------------------------------------

loc_2804A:

		move.w	#1,2(a3)
		bsr.s	sub_28066
; End of function sub_27F66


; =============== S U B R O U T I N E =======================================


sub_28052:

		move.l	#ArtUnc_AniLBZ2_LowerBG,d1
		move.w	#$5860,d2
		move.w	#$100,d3
		jmp	Add_To_DMA_Queue.w
; End of function sub_28052


; =============== S U B R O U T I N E =======================================


sub_28066:

		move.l	#ArtUnc_AniLBZ2_UpperBG,d1
		move.w	#$5A60,d2
		move.w	#$100,d3
		jmp	Add_To_DMA_Queue.w
; End of function sub_28066


; =============== S U B R O U T I N E =======================================


sub_2807A:

		lea	(Anim_Counters+4).w,a3
		move.w	#1,2(a3)
		move.w	(ScrEvents_A).w,d1
		beq.s	loc_2804A
		bpl.s	loc_280A6
		bsr.s	sub_28066
		move.l	#ArtUnc_AniLBZ2_WaterlineBelow,d1
		move.w	#$5860,d2
		move.w	#$100,d3
		jsr	Add_To_DMA_Queue.w
		bra.w	sub_27F66
; ---------------------------------------------------------------------------

loc_280A6:
		bsr.s	sub_28052
		bra.w	sub_27F66
; End of function sub_2807A

; ---------------------------------------------------------------------------

AnimateTiles_MHZ:
		lea	(Anim_Counters).w,a3
		moveq	#0,d0
		move.w	(ScrEvents_B).w,d0
		sub.w	(Camera_X_pos_BG_copy).w,d0
		andi.w	#$1F,d0
		cmp.b	1(a3),d0
		beq.s	loc_28110
		move.b	d0,1(a3)
		moveq	#0,d1
		move.w	d0,d2
		andi.w	#7,d0
		lsl.w	#8,d0
		move.w	d0,d1
		move.l	d1,d5
		andi.w	#$18,d2
		move.w	d2,d0
		lsl.w	#3,d2
		add.w	d2,d1
		lsr.w	#1,d0
		lea	word_28114(pc,d0.w),a4
		lea	(ArtUnc_AniMHZ__BG).l,a0
		move.w	#$3700,d4
		add.l	a0,d1
		move.w	d4,d2
		move.w	(a4)+,d3
		add.w	d3,d4
		add.w	d3,d4
		jsr	Add_To_DMA_Queue.w
		move.l	d5,d1
		add.l	a0,d1
		move.w	d4,d2
		move.w	(a4)+,d3
		beq.s	loc_28110
		jsr	Add_To_DMA_Queue.w

loc_28110:

		addq.w	#2,a3
		bra.s	loc_28124
; ---------------------------------------------------------------------------
word_28114:	dc.w $80
		dc.w 0
		dc.w $60
		dc.w $20
		dc.w $40
		dc.w $40
		dc.w $20
		dc.w $60
; ---------------------------------------------------------------------------

loc_28124:
		moveq	#0,d1
		move.w	(ScrEvents_A).w,d1
		sub.w	(Camera_X_pos_BG_copy).w,d1
		andi.w	#$3F,d1
		cmp.b	1(a3),d1
		beq.s	loc_28180
		move.b	d1,1(a3)
		move.w	d1,d2
		andi.w	#7,d1
		ror.w	#6,d1
		move.l	d1,d5
		andi.w	#$38,d2
		move.w	d2,d0
		lsl.w	#4,d2
		add.w	d2,d1
		lsr.w	#1,d0
		lea	word_28198(pc,d0.w),a4
		lea	(ArtUnc_AniMHZ__BG2).l,a0
		move.w	#$3AA0,d4
		add.l	a0,d1
		move.w	d4,d2
		move.w	(a4)+,d3
		add.w	d3,d4
		add.w	d3,d4
		jsr	Add_To_DMA_Queue.w
		move.l	d5,d1
		add.l	a0,d1
		move.w	d4,d2
		move.w	(a4)+,d3
		beq.s	loc_28180
		jsr	Add_To_DMA_Queue.w

loc_28180:

		addq.w	#2,a3
		move.b	(Anim_Counters+$F).w,d0
		addq.b	#2,d0
		cmpi.b	#$58,d0
		blo.s	loc_28190
		moveq	#0,d0

loc_28190:
		move.b	d0,(Anim_Counters+$F).w
		bra.w	loc_286E8
; ---------------------------------------------------------------------------
word_28198:	dc.w $200
		dc.w 0
		dc.w $1C0
		dc.w $40
		dc.w $180
		dc.w $80
		dc.w $140
		dc.w $C0
		dc.w $100
		dc.w $100
		dc.w $C0
		dc.w $140
		dc.w $80
		dc.w $180
		dc.w $40
		dc.w $1C0
word_281B8:	dc.w $C0
		dc.w 0
		dc.w $90
		dc.w $30
		dc.w $60
		dc.w $60
		dc.w $30
		dc.w $90
; ---------------------------------------------------------------------------

AnimateTiles_SOZ1:
		lea	(Anim_Counters).w,a3
		moveq	#0,d0
		move.w	(ScrEvents_A).w,d0
		sub.w	(Camera_X_pos_BG_copy).w,d0
		andi.w	#$1F,d0
		cmp.b	1(a3),d0
		beq.s	locret_2825A
		move.b	d0,1(a3)
		moveq	#0,d1
		move.w	d0,d2
		andi.w	#7,d0
		lsl.w	#7,d0
		move.w	d0,d1
		add.w	d0,d0
		add.w	d1,d0
		move.w	d0,d1
		move.l	d1,d5
		andi.w	#$18,d2
		move.w	d2,d0
		lsl.w	#2,d2
		add.w	d2,d1
		add.w	d2,d2
		add.w	d2,d1
		lsr.w	#1,d0
		lea	word_281B8(pc,d0.w),a4
		lea	(ArtUnc_AniSOZ1_BG).l,a0
		move.w	#$6600,d4
		add.l	a0,d1
		move.w	d4,d2
		move.w	(a4)+,d3
		add.w	d3,d4
		add.w	d3,d4
		jsr	Add_To_DMA_Queue.w
		move.l	d5,d1
		add.l	a0,d1
		move.w	d4,d2
		move.w	(a4)+,d3
		beq.s	loc_28236
		jsr	Add_To_DMA_Queue.w

loc_28236:
		moveq	#0,d1
		move.b	1(a3),d1
		lsl.w	#6,d1
		move.w	d1,d0
		add.w	d1,d1
		add.w	d0,d1
		lea	(ArtUnc_AniSOZ1_BG2).l,a0
		add.l	a0,d1
		move.w	#$6780,d2
		move.w	#$60,d3
		jsr	Add_To_DMA_Queue.w

locret_2825A:
		rts
; ---------------------------------------------------------------------------

AnimateTiles_SOZ2:
		lea	(Anim_Counters).w,a3
		subq.b	#1,(a3)
		bpl.s	locret_282B2
		move.b	#7,(a3)
		moveq	#0,d0

loc_2826A:
		move.b	1(a3),d0
		addq.b	#1,1(a3)
		cmpi.b	#2,d0
		blo.s	loc_2827E
		move.b	#0,1(a3)

loc_2827E:
		move.w	(PalCyc_Counters2+$6).w,d1
		andi.w	#6,d1
		move.w	d1,d2
		lsr.w	#1,d2
		add.w	d2,d1
		cmpi.w	#6,d1
		beq.s	loc_28294
		add.w	d0,d1

loc_28294:
		lsl.w	#6,d1
		move.w	d1,d0
		add.w	d1,d1
		add.w	d0,d1
		lea	(ArtUnc_AniSOZ2_BG).l,a0
		add.l	a0,d1
		move.w	#$6600,d2
		move.w	#$60,d3
		jsr	Add_To_DMA_Queue.w

locret_282B2:
		rts
; ---------------------------------------------------------------------------

AnimateTiles_LRZ3:
		move.w	#$2E00,d4
		move.w	#$3280,d6
		bra.s	loc_282D0
; ---------------------------------------------------------------------------

AnimateTiles_LRZ1:
	;	move.w	#$6400,d4
	;	move.w	#$6880,d6
	;	bra.s	loc_282D0
; ---------------------------------------------------------------------------

AnimateTiles_LRZ2:
		move.w	#$6400,d4
		move.w	#$6880,d6

loc_282D0:

		lea	(Anim_Counters).w,a3
		moveq	#0,d0
		move.w	(ScrEvents_B).w,d0
		sub.w	(Camera_X_pos_BG_copy).w,d0
		subq.w	#1,d0
		divu.w	#$30,d0
		swap	d0
		cmp.b	1(a3),d0
		beq.s	loc_2833C
		move.b	d0,1(a3)
		moveq	#0,d1
		move.w	d0,d2
		andi.w	#7,d0
		lsl.w	#7,d0
		move.w	d0,d1
		lsl.w	#3,d0
		add.w	d0,d1
		move.l	d1,d5
		andi.w	#$38,d2
		move.w	d2,d0
		lsl.w	#3,d2
		add.w	d2,d1
		add.w	d2,d2
		add.w	d2,d1
		lsr.w	#1,d0
		lea	word_2834C(pc,d0.w),a4
		lea	(ArtUnc_AniLRZ__BG).l,a0
		add.l	a0,d1
		move.w	d4,d2
		move.w	(a4)+,d3
		add.w	d3,d4
		add.w	d3,d4
		jsr	Add_To_DMA_Queue.w
		move.l	d5,d1
		add.l	a0,d1
		move.w	d4,d2
		move.w	(a4)+,d3
		beq.s	loc_2833C
		jsr	Add_To_DMA_Queue.w

loc_2833C:

		cmpi.b	#$16,(Current_zone).w
		beq.s	locret_2834A
		addq.w	#2,a3
		bra.w	loc_28364
; ---------------------------------------------------------------------------

locret_2834A:
		rts
; ---------------------------------------------------------------------------
word_2834C:	dc.w $240
		dc.w 0
		dc.w $1E0
		dc.w $60
		dc.w $180
		dc.w $C0
		dc.w $120
		dc.w $120
		dc.w $C0
		dc.w $180
		dc.w $60
		dc.w $1E0
; ---------------------------------------------------------------------------

loc_28364:
		moveq	#0,d0
		move.w	(ScrEvents_A).w,d0
		sub.w	(Camera_X_pos_BG_copy).w,d0
		andi.w	#$1F,d0
		cmp.b	1(a3),d0
		beq.s	loc_283CC
		move.b	d0,1(a3)
		moveq	#0,d1
		move.w	d0,d2
		andi.w	#7,d0
		lsl.w	#7,d0
		move.w	d0,d1
		add.w	d0,d0
		add.w	d1,d0
		move.w	d0,d1
		move.l	d1,d5
		andi.w	#$18,d2
		move.w	d2,d0
		lsl.w	#2,d2
		add.w	d2,d1
		add.w	d2,d2
		add.w	d2,d1
		lsr.w	#1,d0
		lea	word_283D2(pc,d0.w),a4
		lea	(ArtUnc_AniLRZ__BG2).l,a0
		move.w	d6,d4
		add.l	a0,d1
		move.w	d4,d2
		move.w	(a4)+,d3
		add.w	d3,d4
		add.w	d3,d4
		jsr	Add_To_DMA_Queue.w
		move.l	d5,d1
		add.l	a0,d1
		move.w	d4,d2
		move.w	(a4)+,d3
		beq.s	loc_283CC
		jsr	Add_To_DMA_Queue.w

loc_283CC:

		addq.w	#2,a3
		bra.w	loc_286E8
; ---------------------------------------------------------------------------
word_283D2:	dc.w $C0
		dc.w 0
		dc.w $90
		dc.w $30
		dc.w $60
		dc.w $60
		dc.w $30
		dc.w $90
; ---------------------------------------------------------------------------

AnimateTiles_DPZ:
		lea	(Anim_Counters).w,a3
		moveq	#0,d1
		move.w	(ScrEvents_A).w,d1
		sub.w	(Camera_X_pos_BG_copy).w,d1
		andi.w	#$3F,d1
		cmp.b	1(a3),d1
		beq.s	loc_28442
		move.b	d1,1(a3)
		move.w	d1,d2
		andi.w	#7,d1
		ror.w	#6,d1
		move.l	d1,d5
		andi.w	#$38,d2
		move.w	d2,d0
		lsl.w	#4,d2
		add.w	d2,d1
		lsr.w	#1,d0
		lea	word_28446(pc,d0.w),a4
		lea	(ArtUnc_AniDPZ__BG).l,a0
		move.w	#$2A60,d4
		add.l	a0,d1
		move.w	d4,d2
		move.w	(a4)+,d3
		add.w	d3,d4
		add.w	d3,d4
		jsr	Add_To_DMA_Queue.w
		move.l	d5,d1
		add.l	a0,d1
		move.w	d4,d2
		move.w	(a4)+,d3
		beq.s	loc_28442
		jsr	Add_To_DMA_Queue.w

loc_28442:

		addq.w	#2,a3
		bra.s	loc_28466
; ---------------------------------------------------------------------------
word_28446:	dc.w $200
		dc.w 0
		dc.w $1C0
		dc.w $40
		dc.w $180
		dc.w $80
		dc.w $140
		dc.w $C0
		dc.w $100
		dc.w $100
		dc.w $C0
		dc.w $140
		dc.w $80
		dc.w $180
		dc.w $40
		dc.w $1C0
; ---------------------------------------------------------------------------

loc_28466:
		moveq	#0,d1
		move.w	(ScrEvents_B).w,d1
	;	sub.w	(__u_EE70).w,d1
		andi.w	#$3F,d1
		cmp.b	1(a3),d1
		beq.s	loc_284C2
		move.b	d1,1(a3)
		move.w	d1,d2
		andi.w	#7,d1
		ror.w	#6,d1
		move.l	d1,d5
		andi.w	#$38,d2
		move.w	d2,d0
		lsl.w	#4,d2
		add.w	d2,d1
		lsr.w	#1,d0
		lea	word_28446(pc,d0.w),a4
		lea	(ArtUnc_AniDPZ__BG).l,a0
		move.w	#$2E60,d4
		add.l	a0,d1
		move.w	d4,d2
		move.w	(a4)+,d3
		add.w	d3,d4
		add.w	d3,d4
		jsr	Add_To_DMA_Queue.w
		move.l	d5,d1
		add.l	a0,d1
		move.w	d4,d2
		move.w	(a4)+,d3
		beq.s	loc_284C2
		jsr	Add_To_DMA_Queue.w

loc_284C2:

		addq.w	#2,a3
		bra.w	loc_286E8
; ---------------------------------------------------------------------------

AnimateTiles_Gumball:
		lea	(Anim_Counters).w,a3
		moveq	#0,d1
		move.w	(ScrEvents_A).w,d1
		sub.w	(Camera_Y_pos_BG_copy).w,d1
		andi.w	#$1F,d1
		cmp.b	1(a3),d1
		beq.s	locret_284FC
		move.b	d1,1(a3)
		add.w	d1,d1
		add.w	d1,d1
		addi.l	#ArtUnc_AniGumball,d1
		move.w	#$A80,d2
		move.w	#$40,d3
		jsr	Add_To_DMA_Queue.w

locret_284FC:
		rts
; ---------------------------------------------------------------------------

AnimateTiles_Pachinko:
		lea	(Anim_Counters).w,a4
		tst.b	2(a4)
		bne.w	loc_285EE
		move.w	4(a4),d0
		subq.w	#4,4(a4)
		andi.w	#$7F,4(a4)
		lea	(Chunk_table+$6000).l,a2
		lea	(a2,d0.w),a2
		lea	(Chunk_table+$7000).l,a3
		move.w	#$80,d2
		moveq	#2,d1

loc_2852E:
		moveq	#3,d0

loc_28530:
		move.l	(a2)+,(a3)+
		move.l	(a2)+,(a3)+
		move.l	(a2)+,(a3)+
		move.l	(a2)+,(a3)+
		move.l	(a2)+,(a3)+
		move.l	(a2)+,(a3)+
		move.l	(a2)+,(a3)+
		move.l	(a2)+,(a3)+
		move.l	(a2)+,(a3)+
		move.l	(a2)+,(a3)+
		move.l	(a2)+,(a3)+
		move.l	(a2)+,(a3)+
		move.l	(a2)+,(a3)+
		move.l	(a2)+,(a3)+
		move.l	(a2)+,(a3)+
		move.l	(a2)+,(a3)+
		move.l	(a2)+,(a3)+
		move.l	(a2)+,(a3)+
		move.l	(a2)+,(a3)+
		move.l	(a2)+,(a3)+
		move.l	(a2)+,(a3)+
		move.l	(a2)+,(a3)+
		move.l	(a2)+,(a3)+
		move.l	(a2)+,(a3)+
		move.l	(a2)+,(a3)+
		move.l	(a2)+,(a3)+
		move.l	(a2)+,(a3)+
		move.l	(a2)+,(a3)+
		move.l	(a2)+,(a3)+
		move.l	(a2)+,(a3)+
		move.l	(a2)+,(a3)+
		move.l	(a2)+,(a3)+
		lea	(a2,d2.w),a2
		dbf	d0,loc_28530
		lea	$80(a3),a3
		dbf	d1,loc_2852E
		lea	(Chunk_table+$7200).l,a3
		moveq	#0,d7
		moveq	#2,d6

loc_2858A:
		moveq	#3,d5

loc_2858C:
		lea	(Chunk_table+$7000).l,a1
		movea.l	a1,a2
		adda.w	word_285CE(pc,d7.w),a1
		adda.w	word_285D6(pc,d7.w),a2
		moveq	#-1,d2
		moveq	#0,d3
		moveq	#7,d4

loc_285A2:
		move.l	(a1)+,d0
		and.l	d2,d0
		move.l	(a2)+,d1
		and.l	d3,d1
		or.l	d1,d0
		move.l	d0,(a3)+
		asl.l	#4,d2
		asl.l	#4,d3
		ori.w	#$F,d3
		dbf	d4,loc_285A2
		addq.w	#2,d7
		dbf	d5,loc_2858C
		lea	$200(a3),a3
		dbf	d6,loc_2858A
		addq.b	#1,2(a4)
		bra.s	loc_28624
; ---------------------------------------------------------------------------
word_285CE:	dc.w $180
		dc.w $120
		dc.w $C0
		dc.w $60
word_285D6:	dc.w $400
		dc.w $3A0
		dc.w $340
		dc.w $2E0
		dc.w $680
		dc.w $620
		dc.w $5C0
		dc.w $560
		dc.w $180
		dc.w $120
		dc.w $C0
		dc.w $60
; ---------------------------------------------------------------------------

loc_285EE:
		bsr.s	sub_2863E
		addq.b	#1,2(a4)
		cmpi.b	#4,2(a4)
		blo.s	loc_28624
		move.b	#0,2(a4)
		addi.w	#$280,(a4)
		cmpi.w	#$5000,(a4)
		blo.s	loc_28610
		move.w	#0,(a4)

loc_28610:
		move.l	#Chunk_table+$7000,d1
		move.w	#$1D20,d2
		move.w	#$3C0,d3
		jsr	Add_To_DMA_Queue.w

loc_28624:

		lea	(AniPLC_Pachinko).l,a2
		lea	(Anim_Counters+6).w,a3
		bra.w	loc_286E8
; ---------------------------------------------------------------------------
byte_28632:	dc.b $50
		dc.b 5
		dc.b $A0
		dc.b $A
		dc.b 0
		dc.b 0
		dc.b 0
		dc.b 0
		dc.b $A0
		dc.b $A
		dc.b $50
		dc.b 5

; =============== S U B R O U T I N E =======================================


sub_2863E:
		lea	(Chunk_table+$7000).l,a3
		moveq	#0,d0
		move.b	2(a4),d0
		subq.b	#1,d0
		move.w	d0,d3
		lsl.w	#7,d0
		move.w	d0,d1
		lsl.w	#2,d0
		add.w	d1,d0
		adda.w	d0,a3
		lsl.w	#2,d3
		lea	byte_28632(pc,d3.w),a1
		move.b	(a1)+,d3
		move.b	(a1)+,d4
		move.b	(a1)+,d5
		move.b	(a1)+,d6
		lea	(Chunk_table+$1000).l,a1
		adda.w	(a4),a1
		move.w	#$1FF,d2

loc_28672:
		move.b	(a1)+,d0
		beq.s	loc_28694
		move.b	d0,d1
		andi.b	#-$10,d0
		beq.s	loc_28686
		andi.b	#$F,(a3)
		add.b	d3,d0
		or.b	d0,(a3)

loc_28686:
		andi.b	#$F,d1
		beq.s	loc_28694
		andi.b	#-$10,(a3)
		add.b	d4,d1
		or.b	d1,(a3)

loc_28694:

		addq.w	#1,a3
		dbf	d2,loc_28672
		move.w	#$7F,d2

loc_2869E:
		move.b	(a1)+,d0
		beq.s	loc_286DC
		move.b	d0,d1
		andi.b	#-$10,d0
		beq.s	loc_286BE
		bmi.s	loc_286B6
		andi.b	#$F,(a3)
		add.b	d3,d0
		or.b	d0,(a3)
		bra.s	loc_286BE
; ---------------------------------------------------------------------------

loc_286B6:
		andi.b	#$F,(a3)
		sub.b	d5,d0
		or.b	d0,(a3)

loc_286BE:

		andi.b	#$F,d1
		beq.s	loc_286DC
		btst	#3,d1
		bne.s	loc_286D4
		andi.b	#-$10,(a3)
		add.b	d4,d1
		or.b	d1,(a3)
		bra.s	loc_286DC
; ---------------------------------------------------------------------------

loc_286D4:
		andi.b	#-$10,(a3)
		sub.b	d6,d1
		or.b	d1,(a3)

loc_286DC:

		addq.w	#1,a3
		dbf	d2,loc_2869E
		rts
; End of function sub_2863E


; =============== S U B R O U T I N E =======================================


AnimateTiles_DoAniPLC:

		lea	(Anim_Counters).w,a3

loc_286E8:
		move.w	(a2)+,d6	; Get number of scripts in list
		bpl.s	.listnotempty	; If there are any, continue
		rts
; loc_286EE:
.listnotempty:
AnimateTiles_DoAniPLC_Part2:
.loop:
		subq.b	#1,(a3)		; Tick down frame duration
		bcc.s	.nextscript	; If frame isn't over, move on to next script

;.nextframe:
		moveq	#0,d0
		move.b	1(a3),d0	; Get current frame
		cmp.b	6(a2),d0	; Have we processed the last frame in the script?
		blo.s	.notlastframe
		moveq	#0,d0		; If so, reset to first frame
		move.b	d0,1(a3)	; ''
; loc_28704:
.notlastframe:
		addq.b	#1,1(a3)	; Consider this frame processed; set counter to next frame
		move.b	(a2),(a3)	; Set frame duration to global duration value
		bpl.s	.globalduration
		; If script uses per-frame durations, use those instead
		add.w	d0,d0
		move.b	9(a2,d0.w),(a3)	; Set frame duration to current frame's duration value
; loc_28712:
.globalduration:
; Prepare for DMA transfer
		; Get relative address of frame's art
		move.b	8(a2,d0.w),d0	; Get tile ID
		lsl.w	#5,d0		; Turn it into an offset
		; Get VRAM destination address
		move.w	4(a2),d2
		; Get ROM source address
		move.l	(a2),d1		; Get start address of animated tile art
		andi.l	#Checksum_string+$3,d1
		add.l	d0,d1		; Offset into art, to get the address of new frame
		; Get size of art to be transferred
		moveq	#0,d3
		move.b	7(a2),d3
		lsl.w	#4,d3		; Turn it into actual size (in words)
		; Use d1, d2 and d3 to queue art for transfer
		jsr	Add_To_DMA_Queue.w
; loc_28734:
.nextscript:
		move.b	6(a2),d0	; Get total size of frame data
		tst.b	(a2)		; Is per-frame duration data present?
		bpl.s	.globalduration2; If not, keep the current size; it's correct
		add.b	d0,d0		; Double size to account for the additional frame duration data
; loc_2873E:
.globalduration2:
		addq.b	#1,d0
		andi.w	#$FE,d0		; Round to next even address, if it isn't already
		lea	8(a2,d0.w),a2	; Advance to next script in list
		addq.w	#2,a3		; Advance to next script's slot in a3 (usually Anim_Counters)
		dbf	d6,.loop
		rts
; End of function AnimateTiles_DoAniPLC

; ===========================================================================
; ZONE ANIMATION SCRIPTS
;
; The AnimateTiles_DoAniPLC subroutine uses these scripts to reload certain tiles,
; thus animating them. All the relevant art must be uncompressed, because
; otherwise the subroutine would spend so much time waiting for the art to be
; decompressed that the VBLANK window would close before all the animating was done.

;    zoneanimdecl -1, ArtUnc_Flowers1, ArtTile_ArtUnc_Flowers1, 6, 2
;	-1			Global frame duration. If -1, then each frame will use its own duration, instead
;	ArtUnc_Flowers1		Source address
;	ArtTile_ArtUnc_Flowers1	Destination VRAM address
;	6			Number of frames
;	2			Number of tiles to load into VRAM for each frame

;    dc.b   0,$7F		; Start of the script proper
;	0			Tile ID of first tile in ArtUnc_Flowers1 to transfer
;	$7F			Frame duration. Only here if global duration is -1

AniPLC_AIZ1:	zoneanimstart

	zoneanimdecl  -1, ArtUnc_AniAIZ1_0, $2E6,  9, $C
	dc.b $3C,$4F
	dc.b $30,  5
	dc.b $18,  5
	dc.b  $C,  5
	dc.b   0,$4F
	dc.b  $C,  3
	dc.b $18,  3
	dc.b $24,  1
	dc.b $30,  1
	even

	zoneanimdecl  -1, ArtUnc_AniAIZ1_0, $2F2,  8, $C
	dc.b $18,  5
	dc.b $24,  5
	dc.b $30,  5
	dc.b $3C,$27
	dc.b   0,  5
	dc.b  $C,  5
	dc.b $18,  5
	dc.b $24,  5
	even

	zoneanimdecl  -1, ArtUnc_AniAIZ1_1, $2FE,  8,  6
	dc.b   0,  7
	dc.b   6,  3
	dc.b  $C,  3
	dc.b $12,  3
	dc.b $18,  7
	dc.b $12,  3
	dc.b  $C,  3
	dc.b   6,  3
	even

	zoneanimend

AniPLC_AIZ2:	zoneanimstart

	zoneanimdecl   3, ArtUnc_AniAIZ2_0,  $B3,  4,$17
	dc.b   0
	dc.b $17
	dc.b $2E
	dc.b $45
	even

	zoneanimdecl  -1, ArtUnc_AniAIZ2_1,  $CA,  9, $C
	dc.b $3C,$4F
	dc.b $30,  5
	dc.b $18,  5
	dc.b  $C,  5
	dc.b   0,$4F
	dc.b  $C,  3
	dc.b $18,  3
	dc.b $24,  1
	dc.b $30,  1
	even

	zoneanimdecl  -1, ArtUnc_AniAIZ2_1,  $D6,  8, $C
	dc.b $18,  5
	dc.b $24,  5
	dc.b $30,  5
	dc.b $3C,$27
	dc.b   0,  5
	dc.b  $C,  5
	dc.b $18,  5
	dc.b $24,  5
	even

	zoneanimdecl   3, ArtUnc_AniAIZ2_2,  $E2,  4,  4
	dc.b   0
	dc.b   4
	dc.b   8
	dc.b  $C
	even

	zoneanimdecl   3, ArtUnc_AniAIZ2_3,  $E6,  4,$18
	dc.b   0
	dc.b $18
	dc.b $30
	dc.b $48
	even

	zoneanimend

AniPLC_HCZ1:	zoneanimstart

	zoneanimdecl  -1, ArtUnc_AniHCZ1_0, $30C,  3,$24
	dc.b   0,  2
	dc.b $24,  1
	dc.b $48,  2
	even

	zoneanimdecl  -1, ArtUnc_AniHCZ__1, $115,$10,  6
	dc.b   0,  4
	dc.b   6,  3
	dc.b  $C,  2
	dc.b $12,  1
	dc.b $18,  0
	dc.b $1E,  1
	dc.b $24,  2
	dc.b $2A,  3
	dc.b $30,  4
	dc.b $2A,  3
	dc.b $24,  2
	dc.b $1E,  1
	dc.b $18,  0
	dc.b $12,  1
	dc.b  $C,  2
	dc.b   6,  3
	even

	zoneanimend

AniPLC_HCZ2:	zoneanimstart

	zoneanimdecl   3, ArtUnc_AniHCZ2_0, $25E,  4,$15
	dc.b   0
	dc.b $15
	dc.b $2A
	dc.b $3F
	even

	zoneanimdecl  -1, ArtUnc_AniHCZ__1, $115,$10,  6
	dc.b   0,  4
	dc.b   6,  3
	dc.b  $C,  2
	dc.b $12,  1
	dc.b $18,  0
	dc.b $1E,  1
	dc.b $24,  2
	dc.b $2A,  3
	dc.b $30,  4
	dc.b $2A,  3
	dc.b $24,  2
	dc.b $1E,  1
	dc.b $18,  0
	dc.b $12,  1
	dc.b  $C,  2
	dc.b   6,  3
	even

	zoneanimend

AniPLC_MGZ:	zoneanimstart

	zoneanimdecl   9, ArtUnc_AniMGZ__0, $222,  6,$30
	dc.b   0
	dc.b $30
	dc.b $60
	dc.b $90
	dc.b $C0
	dc.b $F0
	even

	zoneanimdecl  -1, ArtUnc_AniMGZ__1, $252,  4,  1
	dc.b   0,  7
	dc.b   1, $E
	dc.b   2,  7
	dc.b   1, $E
	even

	zoneanimend

AniPLC_CNZ:	zoneanimstart

	zoneanimdecl   3, ArtUnc_AniCNZ__0, $2B2,$10,  9
	dc.b   0
	dc.b $12
	dc.b $24
	dc.b $36
	dc.b $48
	dc.b $5A
	dc.b $6C
	dc.b $7E
	dc.b   9
	dc.b $1B
	dc.b $2D
	dc.b $3F
	dc.b $51
	dc.b $63
	dc.b $75
	dc.b $87
	even

	zoneanimdecl   3, ArtUnc_AniCNZ__0, $2BB,$10,  9
	dc.b   9
	dc.b $1B
	dc.b $2D
	dc.b $3F
	dc.b $51
	dc.b $63
	dc.b $75
	dc.b $87
	dc.b   0
	dc.b $12
	dc.b $24
	dc.b $36
	dc.b $48
	dc.b $5A
	dc.b $6C
	dc.b $7E
	even

	zoneanimdecl   3, ArtUnc_AniCNZ__1, $2C4,$10,$10
	dc.b   0
	dc.b $10
	dc.b $20
	dc.b $30
	dc.b $40
	dc.b $50
	dc.b $60
	dc.b $70
	dc.b $80
	dc.b $90
	dc.b $A0
	dc.b $B0
	dc.b $C0
	dc.b $D0
	dc.b $E0
	dc.b $F0
	even

	zoneanimdecl   3, ArtUnc_AniCNZ__2, $2D4,  8,$20
	dc.b   0
	dc.b $20
	dc.b $40
	dc.b $60
	dc.b $80
	dc.b $A0
	dc.b $C0
	dc.b $E0
	even

	zoneanimdecl   3, ArtUnc_AniCNZ__3, $2F4,  8,$10
	dc.b   0
	dc.b $10
	dc.b $20
	dc.b $30
	dc.b $40
	dc.b $50
	dc.b $60
	dc.b $70
	even

	zoneanimdecl   3, ArtUnc_AniCNZ__4, $304,  6,  4
	dc.b   0
	dc.b   4
	dc.b   8
	dc.b   0
	dc.b   4
	dc.b   8
	even

	zoneanimdecl   1, ArtUnc_AniCNZ__5, $328,  4,$14
	dc.b   0
	dc.b $14
	dc.b $28
	dc.b $3C
	even

	zoneanimend

AniPLC_FBZ1:	zoneanimstart

	zoneanimdecl $3F, ArtUnc_AniFBZ__0, $210,  2,$20
	dc.b   0
	dc.b   0
	even

	zoneanimdecl   7, ArtUnc_AniFBZ__1, $230,  6,  8
	dc.b   0
	dc.b   8
	dc.b $10
	dc.b   0
	dc.b   8
	dc.b $10
	even

	zoneanimdecl   1, ArtUnc_AniFBZ__2, $238,  8,$10
	dc.b   0
	dc.b $10
	dc.b $20
	dc.b $30
	dc.b $40
	dc.b $50
	dc.b $60
	dc.b $70
	even

	zoneanimdecl   7, ArtUnc_AniFBZ__3, $200,  2,  8
	dc.b   0
	dc.b   8
	even

	zoneanimdecl   7, ArtUnc_AniFBZ__4, $208,  6,  8
	dc.b   0
	dc.b   8
	dc.b $10
	dc.b   0
	dc.b   8
	dc.b $10
	even

	zoneanimend

AniPLC_FBZ2:	zoneanimstart

	zoneanimdecl   1, ArtUnc_AniFBZ__0, $210,  8,$20
	dc.b   0
	dc.b $20
	dc.b $40
	dc.b $60
	dc.b $80
	dc.b $A0
	dc.b $C0
	dc.b $E0
	even

	zoneanimdecl   7, ArtUnc_AniFBZ__1, $230,  6,  8
	dc.b   0
	dc.b   8
	dc.b $10
	dc.b   0
	dc.b   8
	dc.b $10
	even

	zoneanimdecl   1, ArtUnc_AniFBZ__2, $238,  8,$10
	dc.b   0
	dc.b $10
	dc.b $20
	dc.b $30
	dc.b $40
	dc.b $50
	dc.b $60
	dc.b $70
	even

	zoneanimdecl   7, ArtUnc_AniFBZ__3, $200,  2,  8
	dc.b   0
	dc.b   8
	even

	zoneanimdecl   7, ArtUnc_AniFBZ__4, $208,  6,  8
	dc.b   0
	dc.b   8
	dc.b $10
	dc.b   0
	dc.b   8
	dc.b $10
	even

	zoneanimend

AniPLC_ICZ:	zoneanimstart

	zoneanimdecl   3, ArtUnc_AniICZ__0, $11E,  8,  4
	dc.b   0
	dc.b   4
	dc.b   8
	dc.b  $C
	dc.b $10
	dc.b $14
	dc.b $18
	dc.b $1C
	even

	zoneanimend

AniPLC_LBZ1:	zoneanimstart

	zoneanimdecl   2, ArtUnc_AniLBZ1_0, $365,  4,  8
	dc.b   0
	dc.b   8
	dc.b $10
	dc.b $18
	even

	zoneanimend

AniPLC_LBZSpec:	zoneanimstart

	zoneanimdecl   7, ArtUnc_AniLBZ2_0, $170,  4,  5
	dc.b   0
	dc.b   5
	dc.b  $A
	dc.b  $F
	even

	zoneanimdecl   7, ArtUnc_AniLBZ2_1, $175,  6,  4
	dc.b   0
	dc.b   4
	dc.b   8
	dc.b  $C
	dc.b $10
	dc.b $14
	even

	zoneanimend

AniPLC_LBZ2:	zoneanimstart

	zoneanimdecl   7, ArtUnc_AniLBZ2_0, $170,  4,  5
	dc.b   0
	dc.b   5
	dc.b  $A
	dc.b  $F
	even

	zoneanimdecl   7, ArtUnc_AniLBZ2_1, $175,  6,  4
	dc.b   0
	dc.b   4
	dc.b   8
	dc.b  $C
	dc.b $10
	dc.b $14
	even

	zoneanimend

AniPLC_MHZ:	zoneanimstart

	zoneanimdecl  -1, ArtUnc_AniMHZ__0,  $25,$14,  4
	dc.b   0,$18
	dc.b   4,  0
	dc.b   0,  0
	dc.b   4,  0
	dc.b   8,  0
	dc.b   4,  0
	dc.b   8,  0
	dc.b  $C,  0
	dc.b   8,  0
	dc.b  $C,  0
	dc.b   8,  0
	dc.b  $C,  0
	dc.b $10,  0
	dc.b  $C,  0
	dc.b $10,  0
	dc.b $14,  0
	dc.b $10,  0
	dc.b $14,$31
	dc.b   0,  0
	dc.b $14,  0
	even

	zoneanimdecl  -1, ArtUnc_AniMHZ__1,  $19, $C,  4
	dc.b   0,$1D
	dc.b   4,  0
	dc.b   0,  0
	dc.b   4,  0
	dc.b   0,  0
	dc.b   4,  0
	dc.b   0,  0
	dc.b   4,  1
	dc.b   8,$1D
	dc.b  $C,  4
	dc.b $10,  4
	dc.b $14,  4
	even

	zoneanimdecl  -1, ArtUnc_AniMHZ__2,  $5D,  8,  8
	dc.b   0,  4
	dc.b   8,  4
	dc.b $10,  6
	dc.b   8,  4
	dc.b   0,  4
	dc.b $18,  4
	dc.b $20,  6
	dc.b $18,  4
	even

	zoneanimdecl  -1, ArtUnc_AniMHZ__3,  $1D,  8,  8
	dc.b $10,  6
	dc.b   8,  4
	dc.b   0,  4
	dc.b $18,  4
	dc.b $20,  6
	dc.b $18,  4
	dc.b   0,  4
	dc.b   8,  4
	even

	zoneanimend

AniPLC_LRZ1:	zoneanimstart

	zoneanimdecl   5, ArtUnc_AniLRZ1_0, $354,  4,  4
	dc.b   0
	dc.b   4
	dc.b   8
	dc.b  $C
	even

	zoneanimdecl   5, ArtUnc_AniLRZ1_1, $350,  4,  4
	dc.b   0
	dc.b   4
	dc.b   8
	dc.b  $C
	even

	zoneanimend

AniPLC_LRZ2:	zoneanimstart

	zoneanimdecl  -1, ArtUnc_AniLRZ2_0, $358,  3,  6
	dc.b   0,  2
	dc.b   6,  2
	dc.b  $C,  1
	even

	zoneanimdecl   1, ArtUnc_AniLRZ2_1, $350,  8,  8
	dc.b   0
	dc.b $38
	dc.b $30
	dc.b $28
	dc.b $20
	dc.b $18
	dc.b $10
	dc.b   8
	even

	zoneanimend

AniPLC_SSZ:	zoneanimstart

	zoneanimdecl   7, ArtUnc_AniSSZ__0, $1F3,  4,$24
	dc.b   0
	dc.b $24
	dc.b $48
	dc.b $6C
	even

	zoneanimdecl   7, ArtUnc_AniSSZ__1, $217,  4,  8
	dc.b   0
	dc.b   8
	dc.b $10
	dc.b $18
	even

	zoneanimdecl   7, ArtUnc_AniSSZ__2, $21F,  3,  8
	dc.b   0
	dc.b   8
	dc.b $10
	dc.b $18	; Unused; frame count is 3. There is no frame 4 in ArtUnc_AniSSZ__2, anyway
	even

	zoneanimdecl   2, ArtUnc_AniSSZ__3, $1D9,  4,  9
	dc.b   0
	dc.b   9
	dc.b $12
	dc.b $1B
	even

	zoneanimdecl   2, ArtUnc_AniSSZ__4, $1E2,  4,  4
	dc.b   0
	dc.b   4
	dc.b   8
	dc.b  $C
	even

	zoneanimdecl   2, ArtUnc_AniSSZ__5, $1E6,  4, $D
	dc.b   0
	dc.b  $D
	dc.b $1A
	dc.b $27
	even

	zoneanimend

AniPLC_DEZ:	zoneanimstart

	zoneanimdecl   0, ArtUnc_AniDEZ__0,  $E4,  2,  2
	dc.b   0
	dc.b   2
	even

	zoneanimdecl   1, ArtUnc_AniDEZ__1, $1F4,  6,$1E
	dc.b   0
	dc.b $1E
	dc.b $3C
	dc.b   0
	dc.b $1E
	dc.b $3C
	even

	zoneanimdecl   3, ArtUnc_AniDEZ__2,  $EC,  8,  4
	dc.b   0
	dc.b   4
	dc.b   8
	dc.b  $C
	dc.b $10
	dc.b $14
	dc.b $18
	dc.b $1C
	even

	zoneanimdecl  -1, ArtUnc_AniDEZ__3,  $5F,  4,  6
	dc.b   0,  9
	dc.b   6,  4
	dc.b  $C,  9
	dc.b   6,  4
	even

	zoneanimdecl   4, ArtUnc_AniDEZ__4,  $4B,  4,  2
	dc.b   0
	dc.b   2
	dc.b   4
	dc.b   2
	even

	zoneanimdecl   4, ArtUnc_AniDEZ__5,  $6B,  6,  3
	dc.b   0
	dc.b   3
	dc.b   6
	dc.b   0
	dc.b   3
	dc.b   6
	even

	zoneanimdecl   1, ArtUnc_AniDEZ__6,  $28,  2,  8
	dc.b   0
	dc.b   8
	even

	zoneanimdecl   0, ArtUnc_AniDEZ__7, $26D,$84,  5
	dc.b   0
	dc.b $2D
	dc.b   0
	dc.b $2D
	dc.b   0
	dc.b $2D
	dc.b   0
	dc.b $2D
	dc.b   0
	dc.b $2D
	dc.b   0
	dc.b $2D
	dc.b   5
	dc.b $2D
	dc.b   5
	dc.b $2D
	dc.b   5
	dc.b $2D
	dc.b   5
	dc.b $2D
	dc.b   5
	dc.b $2D
	dc.b   5
	dc.b $2D
	dc.b  $A
	dc.b $2D
	dc.b  $A
	dc.b $2D
	dc.b  $A
	dc.b $2D
	dc.b  $A
	dc.b $2D
	dc.b  $A
	dc.b $2D
	dc.b  $A
	dc.b $2D
	dc.b  $F
	dc.b $2D
	dc.b  $F
	dc.b $2D
	dc.b  $F
	dc.b $2D
	dc.b  $F
	dc.b $2D
	dc.b  $F
	dc.b $2D
	dc.b  $F
	dc.b $2D
	dc.b $14
	dc.b $2D
	dc.b $14
	dc.b $2D
	dc.b $14
	dc.b $2D
	dc.b $14
	dc.b $2D
	dc.b $14
	dc.b $2D
	dc.b $14
	dc.b $2D
	dc.b $19
	dc.b $2D
	dc.b $19
	dc.b $2D
	dc.b $19
	dc.b $2D
	dc.b $19
	dc.b $2D
	dc.b $19
	dc.b $2D
	dc.b $19
	dc.b $2D
	dc.b $1E
	dc.b $2D
	dc.b $1E
	dc.b $2D
	dc.b $1E
	dc.b $2D
	dc.b $1E
	dc.b $2D
	dc.b $1E
	dc.b $2D
	dc.b $1E
	dc.b $2D
	dc.b $23
	dc.b $2D
	dc.b $23
	dc.b $2D
	dc.b $23
	dc.b $2D
	dc.b $23
	dc.b $2D
	dc.b $23
	dc.b $2D
	dc.b $23
	dc.b $2D
	dc.b $28
	dc.b $2D
	dc.b $28
	dc.b $2D
	dc.b $28
	dc.b $2D
	dc.b $28
	dc.b $2D
	dc.b $28
	dc.b $2D
	dc.b $28
	dc.b $2D
	dc.b $28
	dc.b $2D
	dc.b $28
	dc.b $2D
	dc.b $28
	dc.b $2D
	dc.b $28
	dc.b $2D
	dc.b $28
	dc.b $2D
	dc.b $28
	dc.b $2D
	dc.b $28
	dc.b $2D
	dc.b $28
	dc.b $2D
	dc.b $28
	dc.b $2D
	dc.b $28
	dc.b $2D
	dc.b $28
	dc.b $2D
	dc.b $28
	dc.b $2D
	even

	zoneanimend

AniPLC_ALZ:
AniPLC_BPZ:
AniPLC_DPZ:
AniPLC_Pachinko:
AniPLC_NULL:	zoneanimstart

	zoneanimend

AniPLC_HPZ:	zoneanimstart

	zoneanimdecl   2, ArtUnc_AniHPZ__0, $2D0,  8,  3
	dc.b   0
	dc.b   3
	dc.b   6
	dc.b   9
	dc.b  $C
	dc.b  $F
	dc.b $12
	dc.b $15
	even

	zoneanimdecl   3, ArtUnc_AniHPZ__1, $2D3,  6,  2
	dc.b   0
	dc.b   2
	dc.b   4
	dc.b   6
	dc.b   8
	dc.b  $A
	even

	zoneanimdecl   2, ArtUnc_AniHPZ__2, $2D5,  8,  4
	dc.b   0
	dc.b   4
	dc.b   8
	dc.b  $C
	dc.b $10
	dc.b $14
	dc.b $18
	dc.b $1C
	even

	zoneanimdecl   3, ArtUnc_AniHPZ__3, $2D9,  6,  3
	dc.b   0
	dc.b   3
	dc.b   6
	dc.b   9
	dc.b  $C
	dc.b  $F
	even

	zoneanimend

; ---------------------------------------------------------------------------

AnimateTiles_NULL3:
		rts

; =============== S U B R O U T I N E =======================================


Animate_Init:
		cmpi.w	#$100,(Current_zone_and_act).w
		bne.s	loc_28C8C
		bsr.w	sub_279D4

loc_28C8C:
		cmpi.w	#$101,(Current_zone_and_act).w
		bne.s	loc_28CA0
		move.b	#$20,(Anim_Counters+1).w
		move.b	#$40,(Anim_Counters+3).w

loc_28CA0:
		cmpi.b	#3,(Current_zone).w
		bne.s	loc_28CD8
		move.b	#$40,(Anim_Counters+1).w
		move.b	#0,(Anim_Counters+2).w
		move.b	#0,(Anim_Counters+4).w
		move.b	#0,(Anim_Counters+6).w
		move.b	#2,(Anim_Counters+8).w
		move.b	#2,(Anim_Counters+$A).w
		move.b	#2,(Anim_Counters+$C).w
		move.b	#1,(Anim_Counters+$E).w

loc_28CD8:
		cmpi.w	#$600,(Current_zone_and_act).w
		bne.s	loc_28CE6
		move.b	#$20,(Anim_Counters+3).w

loc_28CE6:
		cmpi.w	#$601,(Current_zone_and_act).w
		bne.s	loc_28CF8
		bsr.w	sub_2807A
		move.b	#$10,(Anim_Counters+1).w

loc_28CF8:
		cmpi.b	#7,(Current_zone).w
		bne.s	loc_28D0C
		move.b	#$20,(Anim_Counters+1).w
		move.b	#$40,(Anim_Counters+3).w

loc_28D0C:
		cmpi.b	#8,(Current_zone).w
		bne.s	loc_28D1A
		move.b	#-1,(Anim_Counters+1).w

loc_28D1A:
		cmpi.w	#$900,(Current_zone_and_act).w
		bne.s	loc_28D2E
		move.b	#-1,(Anim_Counters+1).w
		move.b	#-1,(Anim_Counters+3).w

loc_28D2E:
		cmpi.w	#$1000,(Current_zone_and_act).w
		bne.s	loc_28D42
		move.b	#$40,(Anim_Counters+1).w
		move.b	#$40,(Anim_Counters+3).w

loc_28D42:
		cmpi.b	#$14,(Current_zone).w
		bne.s	loc_28DA2
		lea	(ArtKos_PachinkoBG1).l,a0
		lea	(Chunk_table+$1000).l,a1
		jsr	Kos_Decomp.w
		lea	(ArtKos_PachinkoBG2).l,a0
		lea	(Chunk_table+$7000).l,a1
		jsr	Kos_Decomp.w
		lea	(Chunk_table+$6000).l,a1
		lea	(Chunk_table+$7000).l,a2
		moveq	#$B,d0

loc_28D7C:
		moveq	#$1F,d1

loc_28D7E:
		move.l	(a2),$80(a1)
		move.l	(a2)+,(a1)+
		dbf	d1,loc_28D7E
		lea	$80(a1),a1
		dbf	d0,loc_28D7C
		lea	(PalKos_Pachinko).l,a0
		lea	(Chunk_table+$7800).l,a1
		jsr	Kos_Decomp.w

loc_28DA2:
		cmpi.w	#$1600,(Current_zone_and_act).w
		bne.s	locret_28DB6
		move.b	#-1,(Anim_Counters+1).w
		move.b	#-1,(Anim_Counters+3).w

locret_28DB6:
		rts
; End of function Animate_Init

; ---------------------------------------------------------------------------

Obj_LBZSpinLauncher:

		move.l	#Map_LBZSpinLauncher,$C(a0)
		move.w	#$42EA,$A(a0)
		move.b	#$20,7(a0)
		move.b	#$20,6(a0)
		ori.b	#4,4(a0)
		move.w	#prio(1),8(a0)
		move.l	#loc_28DE4,(a0)

loc_28DE4:
		move.w	#$2B,d1
		move.w	#$10,d2
		move.w	$10(a0),d4
		lea	(byte_28FF4).l,a2
		lea	$2E(a0),a4
		tst.b	(a4)
		beq.s	loc_28E02
		subq.b	#1,(a4)
		bra.s	loc_28E1E
; ---------------------------------------------------------------------------

loc_28E02:
		lea	(Player_1).w,a1
		moveq	#3,d6
		movem.l	d1-d4,-(sp)
		jsr	sub_1DD24.w
		cmpi.w	#-2,d4
		bne.s	loc_28E1A
		bsr.s	sub_28E76

loc_28E1A:
		movem.l	(sp)+,d1-d4

loc_28E1E:
		addq.w	#1,a4
		tst.b	(a4)
		beq.s	loc_28E28
		subq.b	#1,(a4)
		bra.s	loc_28E3C
; ---------------------------------------------------------------------------

loc_28E28:
		lea	(Player_2).w,a1
		moveq	#4,d6
		jsr	sub_1DD24.w
		cmpi.w	#-2,d4
		bne.s	loc_28E3C
		bsr.s	sub_28E76

loc_28E3C:

		move.b	$2A(a0),d6
		andi.b	#$18,d6
		beq.s	loc_28E70
		move.b	d6,d0
		andi.b	#8,d0
		beq.s	loc_28E5C
		lea	$2E(a0),a4
		lea	(Player_1).w,a1
		moveq	#3,d6
		bsr.w	sub_28F40

loc_28E5C:
		andi.b	#$10,d6
		beq.s	loc_28E70
		lea	$2F(a0),a4
		lea	(Player_2).w,a1
		moveq	#4,d6
		bsr.w	sub_28F40

loc_28E70:

		jmp	Sprite_OnScreen_Test.w

; =============== S U B R O U T I N E =======================================


sub_28E76:

		btst	#0,$2A(a0)
		bne.s	loc_28EDE
		move.w	$10(a1),d0
		sub.w	$10(a0),d0

loc_28E86:
		addi.w	#$18,d0
		cmpi.w	#$30,d0
		bhs.s	locret_28EDC
		move.w	$10(a0),d0
		addi.w	#$10,d0
		move.w	d0,$10(a1)
		move.w	$14(a0),$14(a1)
		clr.w	$18(a1)
		move.w	#-$A00,$1A(a1)
		move.w	#$800,$1C(a1)
		bset	#1,$2A(a1)
		clr.b	$40(a1)
		bset	#2,$2A(a1)
		move.b	#$E,$1E(a1)
		move.b	#7,$1F(a1)
		move.b	#2,$20(a1)
		move.b	#$10,(a4)

locret_28EDC:

		rts
; ---------------------------------------------------------------------------

loc_28EDE:
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		neg.w	d0
		addi.w	#$18,d0
		cmpi.w	#$30,d0
		bhs.s	locret_28EDC
		move.w	$10(a0),d0
		subi.w	#$10,d0
		move.w	d0,$10(a1)
		move.w	$14(a0),$14(a1)
		clr.w	$18(a1)
		move.w	#-$A00,$1A(a1)
		move.w	#$800,$1C(a1)
		bset	#1,$2A(a1)
		clr.b	$40(a1)
		bset	#2,$2A(a1)
		move.b	#$E,$1E(a1)
		move.b	#7,$1F(a1)
		move.b	#2,$20(a1)
		move.b	#$10,(a4)
		rts
; End of function sub_28E76


; =============== S U B R O U T I N E =======================================


sub_28F40:

		btst	#0,$2A(a0)
		bne.s	loc_28F9C
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		cmpi.w	#$20,d0
		bhs.s	locret_28EDC
		move.w	$10(a0),d0
		addi.w	#$10,d0
		move.w	d0,$10(a1)
		clr.l	$18(a1)
		clr.w	$1C(a1)
		bset	#1,$2A(a1)
		clr.b	$40(a1)
		bclr	#3,$2A(a1)
		bclr	#2,$2A(a1)
		clr.b	$20(a1)
		bclr	d6,$2A(a0)
		move.b	#$20,(a4)
		rts
; ---------------------------------------------------------------------------

loc_28F9C:
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		neg.w	d0
		cmpi.w	#$20,d0
		bhs.w	locret_28EDC
		move.w	$10(a0),d0
		subi.w	#$10,d0
		move.w	d0,$10(a1)
		clr.l	$18(a1)
		clr.w	$1C(a1)
		bset	#1,$2A(a1)
		clr.b	$40(a1)
		bclr	#3,$2A(a1)
		bclr	#2,$2A(a1)
		clr.b	$20(a1)
		bclr	d6,$2A(a0)
		move.b	#$20,(a4)
		rts
; End of function sub_28F40

; ---------------------------------------------------------------------------
byte_28FF4:	dc.b $11
		dc.b $11
		dc.b $11
		dc.b $11
		dc.b $11
		dc.b $11
		dc.b $11
		dc.b $12
		dc.b $13
		dc.b $14
		dc.b $15
		dc.b $16
		dc.b $17
		dc.b $18
		dc.b $19
		dc.b $1A
		dc.b $1B
		dc.b $1C
		dc.b $1D
		dc.b $1E
		dc.b $1F
		dc.b $20
		dc.b $21
		dc.b $21
		dc.b $21
		dc.b $21
		dc.b $21
		dc.b $21
		dc.b $21
		dc.b $21
		dc.b $21
		dc.b $21
		dc.b $21
		dc.b $21
		dc.b $21
		dc.b $21
		dc.b $21
		dc.b $21
		dc.b $21
		dc.b $21
		dc.b $21
		dc.b $21
		dc.b $21
		dc.b $21
; ---------------------------------------------------------------------------

Obj_LBZLoweringGrapple:

		move.b	#4,4(a0)
		move.b	#$10,7(a0)
		move.w	#prio(1),8(a0)
		move.b	#-$80,6(a0)
		move.w	$14(a0),$3C(a0)
		move.l	#Map_LBZLoweringGrapple,$C(a0)
		move.w	#$42EA,$A(a0)
		move.b	$2C(a0),d0
		andi.w	#$7F,d0
		lsl.w	#3,d0
		move.w	d0,$2E(a0)
		move.w	#2,$3A(a0)
		move.b	$2C(a0),d0
		bpl.s	loc_29080
		move.w	$2E(a0),d0
		move.w	d0,$38(a0)
		move.b	#1,$36(a0)
		add.w	d0,$14(a0)
		lsr.w	#4,d0
		addq.w	#1,d0
		move.b	d0,$22(a0)

loc_29080:
		move.l	#loc_29086,(a0)

loc_29086:
		tst.b	$36(a0)
		beq.s	loc_29094
		tst.w	$30(a0)
		bne.s	loc_290AA
		bra.s	loc_2909A
; ---------------------------------------------------------------------------

loc_29094:
		tst.w	$30(a0)
		beq.s	loc_290AA

loc_2909A:
		move.w	$38(a0),d2
		cmp.w	$2E(a0),d2
		beq.s	loc_290CE
		add.w	$3A(a0),d2
		bra.s	loc_290B4
; ---------------------------------------------------------------------------

loc_290AA:

		move.w	$38(a0),d2
		beq.s	loc_290CE
		sub.w	$3A(a0),d2

loc_290B4:
		move.w	d2,$38(a0)
		move.w	$3C(a0),d0
		add.w	d2,d0
		move.w	d0,$14(a0)
		move.w	d2,d0
		beq.s	loc_290CA
		lsr.w	#4,d0
		addq.w	#1,d0

loc_290CA:
		move.b	d0,$22(a0)

loc_290CE:

		lea	$30(a0),a2
		lea	(Player_1).w,a1
		move.w	(Ctrl_1_logical).w,d0
		bsr.w	sub_290F2
		lea	(Player_2).w,a1
		addq.w	#1,a2
		move.w	(Ctrl_2_logical).w,d0
		bsr.w	sub_290F2
		jmp	Sprite_OnScreen_Test.w

; =============== S U B R O U T I N E =======================================


sub_290F2:

		tst.b	(a2)
		beq.w	loc_29194
		tst.b	4(a1)
		bpl.s	loc_29178
		cmpi.b	#4,5(a1)
		bhs.s	loc_29178
		andi.b	#$70,d0
		beq.w	loc_29186
		clr.b	$2E(a1)
		clr.b	(a2)
		move.b	#$12,2(a2)
		andi.w	#$F00,d0
		beq.w	loc_29128
		move.b	#$3C,2(a2)

loc_29128:
		btst	#$A,d0
		beq.s	loc_29134
		move.w	#-$200,$18(a1)

loc_29134:
		btst	#$B,d0
		beq.s	loc_29140
		move.w	#$200,$18(a1)

loc_29140:
		move.w	#-$380,$1A(a1)
		bset	#1,$2A(a1)
		move.b	#1,$40(a1)
		move.b	#$E,$1E(a1)
		move.b	#7,$1F(a1)
		move.b	#2,$20(a1)
		bset	#2,$2A(a1)
		bclr	#4,$2A(a1)
		move.b	#0,$27(a1)
		rts
; ---------------------------------------------------------------------------

loc_29178:

		clr.b	$2E(a1)
		clr.b	(a2)
		move.b	#$3C,2(a2)
		rts
; ---------------------------------------------------------------------------

loc_29186:
		move.w	$14(a0),$14(a1)
		addi.w	#$94,$14(a1)

locret_29214:
		rts
; ---------------------------------------------------------------------------

loc_29194:
		tst.b	2(a2)
		beq.s	loc_291A2
		subq.b	#1,2(a2)
		bne.s	locret_29214

loc_291A2:
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		addi.w	#$10,d0
		cmpi.w	#$20,d0
		bhs.S	locret_29214
		move.w	$14(a1),d1
		sub.w	$14(a0),d1
		subi.w	#$88,d1
		cmpi.w	#$18,d1
		bhs.w	locret_29214
		tst.b	$2E(a1)
		bmi.s	locret_29214
		cmpi.b	#4,5(a1)
		bhs.s	locret_29214
		tst.b	(Debug_On).w
		bne.s	locret_29214
		clr.w	$18(a1)
		clr.w	$1A(a1)
		clr.w	$1C(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		addi.w	#$94,$14(a1)
		move.b	#$14,$20(a1)
		move.b	#1,$2E(a1)
		move.b	#1,(a2)
		moveq	#$5B,d0
		jmp	Play_Sound_2.w
; ---------------------------------------------------------------------------

Obj_MGZLBZSmashingPillar:

		move.l	#Map_LBZSmashingSpikes,$C(a0)
		move.w	#$4455,$A(a0)
		move.b	#$10,7(a0)
		move.b	#$10,6(a0)
		move.w	#prio(1),8(a0)
		cmpi.b	#2,(Current_zone).w
		bne.s	loc_2925E
		move.l	#Map_MGZSmashingPillar,$C(a0)
		move.w	#$4001,$A(a0)
		move.b	#$20,7(a0)
		move.b	#$28,6(a0)
		move.w	#prio(5),8(a0)

loc_2925E:
		move.b	#4,4(a0)
		move.w	$14(a0),$30(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		lsl.w	#3,d0
		move.w	d0,$38(a0)
		move.l	#loc_2927C,(a0)

loc_2927C:
		tst.b	$32(a0)
		bne.s	loc_292C8
		move.w	$1A(a0),d0
		addi.w	#$80,$1A(a0)
		ext.l	d0
		lsl.l	#8,d0
		add.l	d0,$34(a0)
		move.w	$34(a0),d2
		cmp.w	$38(a0),d2
		blo.s	loc_292DC
		clr.w	$1A(a0)
		move.w	$38(a0),$34(a0)
		move.b	#1,$32(a0)
		tst.b	4(a0)
		bpl.s	loc_292DC
		moveq	#$5F,d0
		cmpi.b	#2,(Current_zone).w
		beq.s	loc_292C0
		moveq	#-$6A,d0

loc_292C0:
		jsr	Play_Sound_2.w
		bra.s	loc_292DC
; ---------------------------------------------------------------------------

loc_292C8:
		move.w	$34(a0),d2
		beq.s	loc_292D6
		subq.w	#1,d2
		move.w	d2,$34(a0)
		bra.s	loc_292DC
; ---------------------------------------------------------------------------

loc_292D6:
		move.b	#0,$32(a0)

loc_292DC:

		move.w	$30(a0),d0
		add.w	$34(a0),d0
		move.w	d0,$14(a0)
		moveq	#0,d1
		move.b	7(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		swap	d6
		andi.w	#$C,d6
		bne.s	loc_29314
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_29314:
		move.b	d6,d0
		andi.b	#4,d0
		beq.s	loc_29324
		lea	(Player_1).w,a1
		jsr	sub_24280.w

loc_29324:
		andi.b	#8,d6
		beq.s	loc_29332
		lea	(Player_2).w,a1
		jsr	sub_24280.w

loc_29332:
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

Obj_LBZGateLaser:

		move.l	#Map_LBZGateLaser,$C(a0)
		move.w	#$42EA,$A(a0)
		move.b	#$1C,7(a0)
		move.b	#4,6(a0)
		ori.b	#4,4(a0)
		move.w	#prio(3),8(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	d0,d1
		andi.w	#$F,d0
		lsl.w	#3,d0
		add.w	$14(a0),d0
		move.w	d0,$2E(a0)
		lsr.b	#1,d1
		andi.w	#$78,d1
		addq.w	#8,d1
		move.w	d1,$32(a0)
		move.l	#loc_29386,(a0)

loc_29386:
		subq.w	#1,$30(a0)
		bpl.s	loc_293CA
		move.w	$32(a0),$30(a0)
		jsr	Create_New_Sprite3.w
		bne.w	loc_293CA
		bsr.s	sub_293D0
		jsr	Create_New_Sprite3.w
		bne.w	loc_293CA
		bsr.s	sub_293D0
		move.w	#prio(1),8(a1)
		move.b	#2,$22(a1)
		move.b	#-$68,$28(a1)
		move.l	#loc_29416,(a1)
		moveq	#-$58,d0
		jsr	Play_Sound_2.w

loc_293CA:

		jmp	Delete_Sprite_If_Not_In_Range.w

; =============== S U B R O U T I N E =======================================


sub_293D0:

		move.l	#loc_2941C,(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		move.w	$2E(a0),$2E(a1)
		move.l	#Map_LBZGateLaser,$C(a1)
		move.w	#$42EA,$A(a1)
		move.b	#$1C,7(a1)
		move.b	#4,6(a1)
		move.b	4(a0),4(a1)
		move.b	#1,$22(a1)
		move.w	#prio(3),8(a1)
		rts
; End of function sub_293D0

; ---------------------------------------------------------------------------

loc_29416:
		jsr	Add_SpriteToCollisionResponseList.w

loc_2941C:
		move.b	(Level_frame_counter+1).w,d0
		andi.b	#1,d0
		bne.s	loc_2942C
		bchg	#1,4(a0)

loc_2942C:
		move.w	$14(a0),d0
		addq.w	#4,$14(a0)
		cmp.w	$2E(a0),d0
		blo.s	loc_29440
		move.w	#$7FF0,$10(a0)

loc_29440:
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

Obj_FlybotSpecial:
		jsr	Random_Number.w		; get random number
		move.w	#Player_1,a2		; target sonic
		tst.b	d0			; check if random number is positive
		bpl.s	.pos			; if so, branch
		move.w	#Player_2,a2		; target tails

.pos		move.w	a0,a1			; copy ptr to a1 for code
		bra.w	sub_2949C.special	; run special code
; ---------------------------------------------------------------------------

Obj_22_1:
		move.b	#4,4(a0)
		move.b	#$10,7(a0)
		move.b	#$10,6(a0)
		move.w	#prio(5),8(a0)
		move.b	#-$29,$28(a0)
		move.l	#loc_2946A,(a0)

loc_2946A:
		tst.w	$30(a0)
		beq.s	loc_2947E
		subq.w	#1,$30(a0)
		bne.s	loc_294D6
		move.w	#0,(Anim_Counters+4).w
		bra.w	loc_294FC
; ---------------------------------------------------------------------------

loc_2947E:
		tst.b	$29(a0)
		beq.w	loc_294FC
		lea	(Player_1).w,a2		; NAT: Figure out which player to targer
		subq.b	#1,$29(a0)		; check if Sonic
		beq.s	.sonic
		clr.b	$29(a0)			; is Tails
		lea	(Player_2).w,a2

.sonic		move.w	a2,parent3(a0)
		move.w	#$81,$30(a0)
		move.w	#1,(Anim_Counters+4).w
		btst	#0,$2C(a0)
		bne.s	locret_294D4

; =============== S U B R O U T I N E =======================================


sub_2949C:
		jsr	Create_New_Sprite3.w
		bne.s	locret_294D4
	;	lea	(Player_1).w,a2
		move.w	$10(a2),$10(a1)
		move.w	$14(a2),$14(a1)
		move.b	$2C(a0),d0
		add.w	d0,d0
		add.w	d0,d0
		andi.w	#$C,d0
		move.l	word_29508(pc,d0.w),d0
		add.w	d0,$14(a1)
		swap	d0
		add.w	d0,$10(a1)

.special	move.l	#Obj_Flybot767,(a1)
		move.w	a2,parent3(a1)		; NAT: targeted player

locret_294D4:
locret_294FA:
		rts
; End of function sub_2949C

; ---------------------------------------------------------------------------

loc_294D6:
		btst	#0,$2C(a0)
		beq.s	loc_294E8
		cmpi.w	#$41,$30(a0)
		bne.s	loc_294E8
		move.w	parent3(a0),a2		; NAT: targeted player
		bsr.s	sub_2949C

loc_294E8:

		move.w	$30(a0),d0
		andi.b	#$1F,d0
		bne.s	locret_294FA
		moveq	#-$7A,d0
		jmp	Play_Sound_2.w
; ---------------------------------------------------------------------------

loc_294FC:

		jsr	Add_SpriteToCollisionResponseList.w
		jmp	Delete_Sprite_If_Not_In_Range.w
; ---------------------------------------------------------------------------
word_29508:	dc.w $C0, $FFA0
		dc.w $C0, $FFA0
		dc.w $FF40, $FFA0
		dc.w $FF40, $FFA0
; ---------------------------------------------------------------------------

Obj_23_1:
		move.b	#4,4(a0)
		move.b	#$10,7(a0)
		move.b	#-$80,6(a0)
		move.b	#0,8(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		lsl.w	#3,d0
		move.w	d0,$2E(a0)
		move.l	#loc_29542,(a0)

loc_29542:
		move.w	$10(a0),d1
		move.w	d1,d2
		subi.w	#$10,d1
		addi.w	#$10,d2
		move.w	$14(a0),d3
		move.w	d3,d4
		sub.w	$2E(a0),d3
		add.w	$2E(a0),d4
		lea	(Player_1).w,a1
		bsr.s	sub_29570
		lea	(Player_2).w,a1
		bsr.s	sub_29570
		jmp	Delete_Sprite_If_Not_In_Range.w

; =============== S U B R O U T I N E =======================================


sub_29570:

		move.w	$10(a1),d0
		cmp.w	d1,d0
		blo.s	locret_295C0
		cmp.w	d2,d0
		bhs.s	locret_295C0
		move.w	$14(a1),d0
		cmp.w	d3,d0
		blo.s	locret_295C0
		cmp.w	d4,d0
		bhs.s	locret_295C0
		cmpi.b	#$1A,$20(a1)
		beq.s	locret_295C0
		move.w	#0,$18(a1)
		move.w	#$400,$1A(a1)
		move.w	#0,$1C(a1)
		bset	#1,$2A(a1)
		move.b	#0,$40(a1)
		bclr	#3,$2A(a1)
		bclr	#2,$2A(a1)
		move.b	#$1A,$20(a1)

locret_295C0:
		rts
; End of function sub_29570

; ---------------------------------------------------------------------------

Obj_AutomaticTunnelDelayed:
		subq.b	#1,$24(a0)
		bmi.s	loc_295CA
.rts		rts
; ---------------------------------------------------------------------------

loc_295CA:
		move.b	#0,$24(a0)

Obj_AutomaticTunnel:

		ori.b	#4,4(a0)
		move.b	#$10,7(a0)
		move.w	#prio(5),8(a0)
		move.l	#loc_295E8,(a0)

loc_295E8:
		lea	(Player_1).w,a1
		lea	$30(a0),a4
		bsr.s	sub_2960E
		lea	(Player_2).w,a1
		lea	$3A(a0),a4
		bsr.s	sub_2960E
		move.b	$30(a0),d0
		add.b	$3A(a0),d0
		bne.s	Obj_AutomaticTunnelDelayed.rts; As long as this object is attached to a character, do not destroy it
		jmp	Delete_Sprite_If_Not_In_Range.w

; =============== S U B R O U T I N E =======================================


sub_2960E:

		moveq	#0,d0
		move.b	(a4),d0
		move.w	AutoTunnel_Index(pc,d0.w),d0
		jmp	AutoTunnel_Index(pc,d0.w)
; End of function sub_2960E

; ---------------------------------------------------------------------------
AutoTunnel_Index:	dc.w Obj_AutoTunnelInit-AutoTunnel_Index
		dc.w Obj_AutoTunnelRun-AutoTunnel_Index
		dc.w Obj_AutoTunnelLastMove-AutoTunnel_Index
; ---------------------------------------------------------------------------

Obj_AutoTunnelInit:
		tst.b	(Debug_On).w
		bne.w	locret_296D2		; If debug mode is on, don't bother
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		addi.w	#$10,d0
		cmpi.w	#$20,d0
		bhs.w	locret_296D2
		move.w	$14(a1),d1
		sub.w	$14(a0),d1
		addi.w	#$18,d1
		cmpi.w	#$28,d1
		bhs.w	locret_296D2		; Only activate if player is in range
		tst.b	$2E(a1)
		bne.s	locret_296D2		; If under control of another object, don't activate
		addq.b	#2,(a4)
		move.b	#$81,$2E(a1)		; Lock this object to Sonic/Tails
		move.b	#2,$20(a1)			; Set player to rolling animation
		clr.b	$40(a1)				; Ensure they're no longer jumping
		move.w	#$800,$1C(a1)
		clr.l	$18(a1)			; Null actual velocity but make player very fast
		bclr	#5,$2A(a0)
		bclr	#5,$2A(a1)
		bset	#1,$2A(a1)			;Player is not pushing anything and not in the air
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)		;Lock player's position to object's position
		clr.b	1(a4)
		bsr.w	AutoTunnel_GetPath		; Get the first path of the tunnel
		moveq	#$3C,d0
		jsr	Play_Sound_2.w
		btst	#5,$2C(a0)
		beq.s	locret_296D2
		tst.b	(Current_act).w		; If bit 5 of object subtype is set and we're in an act 2
		beq.s	locret_296D2
		bclr	#4,$2B(a1)
		beq.s	loc_296C4
		bclr	#0,$2B(a1)

loc_296C4:
		bclr	#5,$2B(a1)
		beq.s	locret_296D2
		bclr	#0,$2B(a1)			; Disable fire/lightning shields. This is probably for the water tunnels in LBZ2

locret_296D2:

		rts
; ---------------------------------------------------------------------------

Obj_AutoTunnelRun:
		subq.b	#1,2(a4)
		bhi.w	loc_29768
		movea.l	6(a4),a2		; If timer has exhausted, get address of path data
		move.w	(a2)+,d4
		move.w	d4,$10(a1)
		move.w	(a2)+,d5
		move.w	d5,$14(a1)		; Get the new starting position
		tst.b	$2C(a0)
		bpl.s	loc_296F4
		subq.w	#8,a2			; See if we're going backwards

loc_296F4:
		move.l	a2,6(a4)		; Replace address of path
		subq.w	#4,4(a4)
		beq.s	loc_2970A		; If path has exhausted, branch
		move.w	(a2)+,d4
		move.w	(a2)+,d5
		move.w	#$1000,d2
		bra.w	AutoTunnel_CalcSpeed		; Get new velocity
; ---------------------------------------------------------------------------

loc_2970A:
		addq.b	#2,(a4)			; Go to next routine
		move.b	#2,2(a4)
		andi.w	#$FFF,$14(a1)	; Make sure the player's Y position remains valid
		btst	#6,$2C(a0)		; If bit 6 is not set
		bne.s	loc_2972C
		move.w	#0,$18(a1)		; Then stop player movement. Otherwise he'll continue moving
		move.w	#0,$1A(a1)

loc_2972C:
		moveq	#-$7F,d0
		jsr	Play_Sound_2.w	; Play that nifty little cannon shooting sound
		btst	#5,$2C(a0)
		beq.s	loc_29768
		movea.l	a1,a2			; If bit 5 set (for LBZ2, again), make the waterfall
		jsr	Create_New_Sprite3.w
		bne.w	loc_29766
		move.l	#Obj_TunnelExhaustControl,(a1)
		move.w	$10(a2),$10(a1)
		move.w	$14(a2),$14(a1)
		move.w	$18(a2),$18(a1)
		move.w	$1A(a2),$1A(a1)

loc_29766:
		movea.l	a2,a1

loc_29768:

		move.l	$10(a1),d2		; Perform movement
		move.l	$14(a1),d3
		move.w	$18(a1),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d2
		move.w	$1A(a1),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d3			; Add velocity to player
		move.l	d2,$10(a1)
		move.l	d3,$14(a1)
		rts
; ---------------------------------------------------------------------------

Obj_AutoTunnelLastMove:
		subq.b	#1,2(a4)
		bne.s	loc_2979A		; This is the last movement
		clr.b	$2E(a1)
		clr.b	(a4)

loc_2979A:
		addi.w	#$38,$1A(a1)	; Reapply gravity
		bra.s	loc_29768

; =============== S U B R O U T I N E =======================================


AutoTunnel_GetPath:

		move.b	$2C(a0),d0
		bpl.s	loc_297D6
		andi.w	#$1F,d0			; If negative, then the path is reversed
		add.w	d0,d0
		add.w	d0,d0
		lea	(AutoTunnel_Data).l,a2
		movea.l	(a2,d0.w),a2	; Get address of movement data
		move.w	(a2)+,d0
		subq.w	#4,d0
		move.w	d0,4(a4)
		lea	(a2,d0.w),a2
		move.w	(a2)+,d4
		move.w	d4,$10(a1)
		move.w	(a2)+,d5
		move.w	d5,$14(a1)		; Set absolute position of player
		subq.w	#8,a2
		bra.s	loc_2980C
; ---------------------------------------------------------------------------

loc_297D6:
		cmpi.b	#$10,d0
		bne.s	loc_297E6
		cmpi.w	#2,(Player_mode).w
		bne.s	loc_297E6
		moveq	#0,d0			; If playing as tails, use path 0 when doing path $10

loc_297E6:

		andi.w	#$1F,d0
		add.w	d0,d0
		add.w	d0,d0
		lea	(AutoTunnel_Data).l,a2
		movea.l	(a2,d0.w),a2
		move.w	(a2)+,4(a4)
		subq.w	#4,4(a4)
		move.w	(a2)+,d4
		move.w	d4,$10(a1)
		move.w	(a2)+,d5
		move.w	d5,$14(a1)		; Set absolute position of player

loc_2980C:
		move.l	a2,6(a4)
		move.w	(a2)+,d4
		move.w	(a2)+,d5		; Get next position
		move.w	#$1000,d2

AutoTunnel_CalcSpeed:

		moveq	#0,d0
		move.w	d2,d3
		move.w	d4,d0
		sub.w	$10(a1),d0
		bge.s	loc_29828
		neg.w	d0
		neg.w	d2				; Change X velocity depending on direction of destination

loc_29828:
		moveq	#0,d1
		move.w	d5,d1
		sub.w	$14(a1),d1
		bge.s	loc_29836
		neg.w	d1
		neg.w	d3				; Change Y velocity depending on direction of destination

loc_29836:
		cmp.w	d0,d1
		blo.s	loc_29868
		moveq	#0,d1			; If X distance is less than Y distance
		move.w	d5,d1
		sub.w	$14(a1),d1
		swap	d1
		divs.w	d3,d1
		moveq	#0,d0
		move.w	d4,d0
		sub.w	$10(a1),d0
		beq.s	loc_29854
		swap	d0
		divs.w	d1,d0

loc_29854:
		move.w	d0,$18(a1)		; Calculate and set X velocity assuming a Y velocity of $10 pixels
		move.w	d3,$1A(a1)
		tst.w	d1
		bpl.s	loc_29862
		neg.w	d1

loc_29862:
		move.w	d1,2(a4)		; The quotient of the distance/speed produces a proper timer used for movement
		rts
; ---------------------------------------------------------------------------

loc_29868:
		moveq	#0,d0			; If Y distance is less than X distance
		move.w	d4,d0
		sub.w	$10(a1),d0
		swap	d0
		divs.w	d2,d0
		moveq	#0,d1
		move.w	d5,d1
		sub.w	$14(a1),d1
		beq.s	loc_29882
		swap	d1
		divs.w	d0,d1

loc_29882:
		move.w	d1,$1A(a1)	; Calculate and set Y velocity assuming a X velocity of $10 pixels
		move.w	d2,$18(a1)
		tst.w	d0
		bpl.s	loc_29890
		neg.w	d0

loc_29890:
		move.w	d0,2(a4)	; See above
		rts
; End of function AutoTunnel_GetPath

; ---------------------------------------------------------------------------

Obj_TunnelExhaustControl:

		move.l	#Map_TunnelExhaust,$C(a0)
		move.w	#$42EA,$A(a0)
		move.b	#$10,7(a0)
		move.b	#$10,6(a0)
		ori.b	#4,4(a0)
		move.w	#prio(3),8(a0)
		tst.b	$2C(a0)
		beq.s	loc_298CC
		move.l	#Obj_TunnelExContinuous,(a0)
		bra.w	Obj_TunnelExContinuous
; ---------------------------------------------------------------------------

loc_298CC:
		move.w	#$3C,$30(a0)
		tst.w	$1A(a0)
		beq.s	loc_298E2
		bmi.s	loc_298F4
		move.w	#6,$26(a0)		; $26 is 6 if moving downward, 0 if moving upward
		bra.s	loc_298F4
; ---------------------------------------------------------------------------

loc_298E2:
		move.w	#$C,$26(a0)		; If vertical movement is null
		tst.w	$18(a0)
		bmi.s	loc_298F4
		move.w	#$12,$26(a0)	; $26 is $C if X velocity is to the left, $12 if to the right

loc_298F4:

		tst.b	(Current_act).w
		bne.s	loc_29904
		move.l	#Obj_TunnelExSmoke,(a0)		; If in act 1, just make smoke
		bra.w	Obj_TunnelExSmoke
; ---------------------------------------------------------------------------

loc_29904:
		move.l	#Obj_TunnelExhaustControlMain,(a0)	; If in act 2

Obj_TunnelExhaustControlMain:
		subq.w	#1,$2E(a0)
		bpl.s	loc_29980
		move.w	#3,$2E(a0)		; Make a new exhaust sprite every 4 frames
		jsr	Create_New_Sprite3.w
		bne.w	loc_29980
		move.l	#Obj_TunnelExhaustUp,(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		move.l	#Map_TunnelExhaust,$C(a1)
		move.w	#$42EA,$A(a1)
		move.b	#$10,7(a1)
		move.b	#$10,6(a1)
		move.w	#prio(7),8(a1)
		move.w	$26(a0),d0
		cmpi.w	#6,d0
		bne.s	loc_29962
		move.l	#Obj_TunnelExhaustDown,(a1)	; If moving downward, change the object to use

loc_29962:
		lea	word_29992(pc,d0.w),a2
		move.w	(a2)+,$18(a1)
		move.w	(a2)+,$1A(a1)
		move.b	(a2)+,4(a1)
		move.b	(a2)+,$22(a1)
		bne.s	loc_29980
		move.l	#Obj_TunnelExhaustHorz,(a1)
		bsr.s	sub_299AA

loc_29980:

		subq.w	#1,$30(a0)		; Continue doing this until timer runs out
		bpl.s	loc_2998C
		move.w	#$7FF0,$10(a0)

loc_2998C:
		jmp	Delete_Sprite_If_Not_In_Range.w
; ---------------------------------------------------------------------------
word_29992:	dc.w 0	; X velocity
		dc.w $FA00	; Y velocity
		dc.b $86	; Flip value
		dc.b 1		; Mapping frame
		dc.w 0
		dc.w $400
		dc.b $84
		dc.b 1
		dc.w $FA00
		dc.w 0
		dc.b $85
		dc.b 0
		dc.w $600
		dc.w 0
		dc.b $84
		dc.b 0

; =============== S U B R O U T I N E =======================================


sub_299AA:
		moveq	#0,d0			; Slow down exhaust trickle over time
		move.w	$30(a0),d0
		subi.w	#$3C,d0
		neg.w	d0
		lsl.w	#4,d0
		tst.w	$18(a1)
		bmi.s	loc_299C0
		neg.w	d0

loc_299C0:
		add.w	d0,$18(a1)
		rts
; End of function sub_299AA

; ---------------------------------------------------------------------------

Obj_TunnelExhaustUp:
		move.b	(Level_frame_counter+1).w,d0
		andi.b	#1,d0
		bne.s	loc_299D6
		bchg	#0,4(a0)	; Change X flip every 2 frames

loc_299D6:
		jsr	MoveSprite.w
		tst.b	4(a0)
		bmi.s	loc_299EE	; If on-screen, branch
		tst.w	$1A(a0)
		bmi.s	loc_299EE	; If vertical velocity is going upwards, branch
		move.w	#$7FF0,$10(a0)	; Ensure that the object is definitely offscreen

loc_299EE:

		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

Obj_TunnelExhaustDown:
		move.b	(Level_frame_counter+1).w,d0
		andi.b	#1,d0
		bne.s	loc_29A04
		bchg	#0,4(a0)	; Change X flip every 2 frames

loc_29A04:
		jsr	MoveSprite.w
		tst.b	4(a0)
		bmi.s	loc_29A1E	; If on-screen, branch
		cmpi.w	#$C00,$1A(a0)
		blt.s	loc_29A1E	; If vertical velocity is less than $C00, branch
		move.w	#$7FF0,$10(a0)

loc_29A1E:

		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

Obj_TunnelExhaustHorz:
		move.b	(Level_frame_counter+1).w,d0
		andi.b	#1,d0
		bne.s	loc_29A34
		bchg	#1,4(a0)

loc_29A34:
		jsr	MoveSprite.w
		tst.b	4(a0)
		bmi.s	loc_29A4E
		cmpi.w	#$600,$1A(a0)
		blt.s	loc_29A4E
		move.w	#$7FF0,$10(a0)

loc_29A4E:

		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

Obj_TunnelExContinuous:

		move.b	(Level_frame_counter+1).w,d0	; This control object creates new sprites continuously
		andi.b	#3,d0
		bne.s	loc_29AB8
		jsr	Create_New_Sprite3.w		; Create a new sprite every four frames
		bne.w	loc_29AB8
		move.l	#Obj_TunnelExhaustTimed,(a1)	; This is a timed exhaust (the short waterfalls in LBZ2 for example)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		move.l	#Map_TunnelExhaust,$C(a1)
		move.w	#$42EA,$A(a1)
		move.b	#$10,7(a1)
		move.b	#$10,6(a1)
		move.w	#prio(7),8(a1)
		move.w	#0,$18(a1)
		move.w	#$400,$1A(a1)
		move.b	#$84,4(a1)
		move.b	#1,$22(a1)
		move.w	#$B,$2E(a1)

loc_29AB8:

		jmp	Delete_Sprite_If_Not_In_Range.w
; ---------------------------------------------------------------------------

Obj_TunnelExhaustTimed:
		subq.w	#1,$2E(a0)
		bpl.s	loc_29AD0
		move.w	#$B,$2E(a0)
		move.w	#$7FF0,$10(a0)

loc_29AD0:
		move.b	(Level_frame_counter+1).w,d0
		andi.b	#1,d0
		bne.s	loc_29AE0
		bchg	#0,4(a0)

loc_29AE0:
		jsr	MoveSprite.w
		tst.b	4(a0)
		bmi.s	loc_29AF2
		move.w	#$7FF0,$10(a0)

loc_29AF2:
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

Obj_TunnelExSmoke:

		move.b	(Level_frame_counter+1).w,d0
		andi.b	#3,d0
		bne.s	loc_29B2A
		jsr	Create_New_Sprite3.w
		bne.w	loc_29B2A
		move.l	#Obj_FireShield_Dissipate,(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		move.w	$18(a0),$18(a1)
		move.w	$1A(a0),$1A(a1)

loc_29B2A:

		subq.w	#1,$30(a0)
		bpl.s	loc_29B36
		move.w	#$7FF0,$10(a0)

loc_29B36:
		jmp	Delete_Sprite_If_Not_In_Range.w
; ---------------------------------------------------------------------------
		move.l	#Map_TunnelExhaust,$C(a0)
		move.w	#$42EA,$A(a0)
		move.b	#$10,7(a0)
		move.b	#$10,6(a0)
		ori.b	#4,4(a0)
		move.w	#prio(3),8(a0)
		move.w	#$78,$30(a0)
		move.l	#loc_29B6E,(a0)

loc_29B6E:
		tst.b	$32(a0)
		bne.s	loc_29BE8
		subq.w	#1,$2E(a0)
		bpl.s	loc_29BE8
		move.w	#3,$2E(a0)
		jsr	Create_New_Sprite3.w
		bne.w	loc_29BE8
		move.l	#loc_29C00,(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		move.l	#Map_TunnelExhaust,$C(a1)
		move.w	#$42EA,$A(a1)
		move.b	#$10,7(a1)
		move.b	#$10,6(a1)
		move.w	#prio(7),8(a1)
		ori.b	#4,4(a1)
		bset	#0,4(a1)
		move.w	#-$800,$18(a1)
		moveq	#0,d0
		move.b	$2C(a0),d0
		addq.w	#1,d0
		add.w	d0,d0
		move.w	d0,$2E(a1)
		addi.w	#$10,$10(a1)
		move.b	#-$3A,$28(a1)

loc_29BE8:

		subq.w	#1,$30(a0)
		bpl.s	loc_29BFA
		move.w	#$78,$30(a0)
		eori.b	#-1,$32(a0)

loc_29BFA:
		jmp	Delete_Sprite_If_Not_In_Range.w
; ---------------------------------------------------------------------------

loc_29C00:
		move.b	(Level_frame_counter+1).w,d0
		andi.b	#1,d0
		bne.s	loc_29C10
		bchg	#1,4(a0)

loc_29C10:
		jsr	MoveSprite2.w
		subq.w	#1,$2E(a0)
		bpl.s	loc_29C22
		move.w	#$7FF0,$10(a0)

loc_29C22:
		move.b	$29(a0),d0
		beq.w	loc_29C46
		lea	(Player_1).w,a1
		bclr	#0,$29(a0)
		beq.s	loc_29C38
		bsr.s	sub_29C4C

loc_29C38:
		lea	(Player_2).w,a1
		bclr	#1,$29(a0)
		beq.s	loc_29C46
		bsr.s	sub_29C4C

loc_29C46:

		jmp	loc_1B662.w

; =============== S U B R O U T I N E =======================================


sub_29C4C:

		tst.b	$2E(a1)
		bne.s	locret_29C88
		move.w	$14(a0),$14(a1)
		cmpi.w	#-$1000,$18(a1)
		beq.s	locret_29C88
		move.b	#$1A,$20(a1)
		clr.b	$40(a1)
		move.w	#0,$1C(a1)
		move.w	#-$1000,$18(a1)
		move.w	#0,$1A(a1)
		bclr	#5,$2A(a1)
		bset	#1,$2A(a1)

locret_29C88:

		rts
; End of function sub_29C4C

; ---------------------------------------------------------------------------
Map_TunnelExhaust:	include "Levels/LBZ/Misc Object Data/Map - (&LRZ) Tunnel Exhaust.asm"

; ---------------------------------------------------------------------------

Obj_LBZTubeElevator:

		move.l	#Map_LBZTubeElevator,$C(a0)
		move.w	#$2455,$A(a0)
		move.b	#$18,7(a0)
		move.b	#$30,6(a0)
		ori.b	#4,4(a0)
		move.w	#prio(1),8(a0)
		move.w	$10(a0),$44(a0)
		move.w	$14(a0),$46(a0)
		btst	#6,$2C(a0)
		beq.s	loc_29CEC
		move.b	#0,$22(a0)			; If BIT 6 of subtype set, the elevator remains closed
		move.b	#0,$26(a0)
		move.l	#Obj_LBZTubeElevatorClosed,(a0)
		bra.s	Obj_LBZTubeElevatorClosed
; ---------------------------------------------------------------------------

loc_29CEC:
		jsr	Create_New_Sprite3.w
		bne.w	loc_29D38
		move.l	#loc_29DEC,(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		move.l	#Map_LBZTubeElevator,$C(a1)
		move.w	#$2455,$A(a1)
		move.b	#$18,7(a1)
		move.b	#$18,6(a1)
		ori.b	#4,4(a1)
		move.w	#prio(5),8(a1)
		move.b	#6,$22(a1)
		move.w	a0,$42(a1)

loc_29D38:
		move.b	#2,$22(a0)
		move.b	#2,$26(a0)
		move.l	#Obj_LBZTubeElevatorActive,(a0)

Obj_LBZTubeElevatorActive:
		bsr.w	LBZTubeElevator_Action
		lea	(Player_1).w,a1
		lea	$38(a0),a2
		bsr.w	LBZTubeElevator_CheckPlayer
		lea	(Player_2).w,a1
		addq.w	#1,a2
		bsr.w	LBZTubeElevator_CheckPlayer
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

Obj_LBZTubeElevatorClosed:
		lea	(Player_1).w,a1
		bsr.s	.test
		lea	(Player_2).w,a1
		bsr.s	.test
		bra.s	loc_29D8E

.test		tst.b	$2E(a1)
		beq.s	.rts
		movea.w	$42(a1),a2
		cmpi.l	#Obj_LBZTubeElevatorActive,(a2)
		bne.s	.rts
		tst.w	$38(a2)			; NAT: Instead check if is occupied
		beq.s	.rts			; if not, branch
		move.w	#$7FF0,$10(a0)
.rts		rts

loc_29D8E:
		lea	$2E(a0),a4
		addq.b	#2,1(a4)
		move.b	1(a4),d0
		cmpi.b	#-$50,d0
		blo.s	loc_29DAA
		cmpi.b	#-$30,d0
		bhs.s	loc_29DAA
		addi.b	#$20,d0

loc_29DAA:

		move.b	d0,1(a4)
		jsr	GetSineCosine.w
		cmpi.w	#$100,d0
		bne.s	loc_29DBC
		subq.w	#1,d0

loc_29DBC:
		asr.w	#6,d0
		move.w	$46(a0),d2
		sub.w	d0,d2
		move.w	d2,$14(a0)
		moveq	#0,d1
		move.b	7(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_29DEC:
		movea.w	$42(a0),a1
		move.w	$10(a1),$10(a0)
		move.w	$14(a1),$14(a0)
		tst.b	4(a1)
		bpl.s	loc_29E16
		moveq	#0,d0
		move.b	$22(a1),d0
		move.b	byte_29E1C(pc,d0.w),d0
		ext.w	d0
		add.w	$10(a1),d0
		move.w	d0,$10(a0)

loc_29E16:
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------
byte_29E1C:	dc.b 0
		dc.b $F8
		dc.b $F8
		dc.b 0
		dc.b 8
		dc.b 8

; =============== S U B R O U T I N E =======================================


LBZTubeElevator_Action:
		lea	$2E(a0),a4
		movea.l	a0,a1
		moveq	#0,d0
		move.b	(a4),d0
		move.w	LBZTubeElevator_Index(pc,d0.w),d0
		jmp	LBZTubeElevator_Index(pc,d0.w)
; End of function LBZTubeElevator_Action

; ---------------------------------------------------------------------------
LBZTubeElevator_Index:	dc.w LBZTubeElevator_WaitPlayer-LBZTubeElevator_Index
		dc.w LBZTubeElevator_StartSpin-LBZTubeElevator_Index
		dc.w LBZTubeElevator_MovePath-LBZTubeElevator_Index
		dc.w LBZTubeElevator_SlowSpin-LBZTubeElevator_Index
		dc.w LBZTubeElevator_WaitExit-LBZTubeElevator_Index
		dc.w LBZTubeElevator_EndSpin-LBZTubeElevator_Index
		dc.w LBZTubeElevator_Closed-LBZTubeElevator_Index
; ---------------------------------------------------------------------------

LBZTubeElevator_WaitPlayer:
		cmpi.w	#$200,$38(a0)
		beq.s	loc_29E52
		cmpi.w	#2,$38(a0)
		beq.s	loc_29E52
		cmpi.w	#$202,$38(a0)
		bne.s	loc_29E5E

loc_29E52:
		addq.b	#2,(a4)
		moveq	#$3C,d0
		jsr	Play_Sound_2.w
		bra.s	LBZTubeElevator_StartSpin
; ---------------------------------------------------------------------------

loc_29E5E:
		addq.b	#2,1(a4)
		move.b	1(a4),d0
		cmpi.b	#-$50,d0
		blo.s	loc_29E76
		cmpi.b	#-$30,d0
		bhs.s	loc_29E76
		addi.b	#$20,d0

loc_29E76:

		move.b	d0,1(a4)
		jsr	GetSineCosine.w
		cmpi.w	#$100,d0
		bne.s	loc_29E88
		subq.w	#1,d0

loc_29E88:
		asr.w	#6,d0
		move.w	$46(a0),d2
		sub.w	d0,d2
		move.w	d2,$14(a0)

loc_29E8C:
		moveq	#0,d1
		move.b	7(a0),d1
		addi.w	#$B,d1
		move.w	#8,d2
		move.w	#$20,d3
		move.w	$10(a0),d4
		jmp	SolidObjectFull_Offset.w
; ---------------------------------------------------------------------------

LBZTubeElevator_StartSpin:

		move.w	$22(a0),d0		; Get current mapping frame +
		sub.w	$3C(a0),d0
		bcc.s	loc_29EC0
		addi.w	#$600,d0

loc_29EC0:
		move.w	d0,$22(a0)
		move.w	$26(a0),d0
		sub.w	$3C(a0),d0
		bcc.s	loc_29ED2
		addi.w	#$C00,d0

loc_29ED2:
		move.w	d0,$26(a0)
		cmpi.w	#$180,$3C(a0)	; Accelerate speed of spinning
		bhs.s	loc_29F1C		; When maxed out, branch
		addq.w	#2,$3C(a0)

loc_29EE2:
		move.b	1(a4),d0		; Increment bobbing angle
		addq.b	#2,1(a4)
		jsr	GetSineCosine.w
		asr.w	#6,d0
		move.w	$46(a0),d2
		sub.w	d0,d2
		move.w	d2,$14(a0)

		cmpi.w	#45*2,$3C(a0)		; NAT: Check spinning speed
		blo.s	loc_29E8C		; if not large enough, branch
		bne.s	.nokick			; branch if not same

		tst.b	$38(a0)			; check if player is in the capsule
		bne.s	.nop1			; if yes, branch
		bclr	#3,Player_1+$2A.w	; clear the standing bit
		bclr	#3,$2A(a0)		; same as here

.nop1		tst.b	$39(a0)			; check if player is in the capsule
		bne.s	.nokick			; if yes, branch
		bclr	#3,Player_2+$2A.w	; clear the standing bit
		bclr	#4,$2A(a0)		; same as here

.nokick		moveq	#0,d1
		move.b	7(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	$10(a0),d4
		jmp	SolidObjectFull.w
; ---------------------------------------------------------------------------

loc_29F1C:
		addq.b	#2,(a4)			; Next routine
		move.w	#$180,$3C(a0)
		clr.b	1(a4)
		bsr.w	AutoTunnel_GetPath	; Get auto tunnel path
		move.b	#1,(Fast_V_scroll_flag).w	; Y camera follows Sonic differently
		bra.s	loc_29EE2
; ---------------------------------------------------------------------------

LBZTubeElevator_MovePath:
		move.w	$22(a0),d0		; Continuing spinning mapping frame
		sub.w	$3C(a0),d0
		bcc.s	loc_29F42
		addi.w	#$600,d0

loc_29F42:
		move.w	d0,$22(a0)
		move.w	$26(a0),d0
		sub.w	$3C(a0),d0
		bcc.s	loc_29F54
		addi.w	#$C00,d0

loc_29F54:
		move.w	d0,$26(a0)
		subq.b	#1,2(a4)
		bhi.w	loc_29FA6
		movea.l	6(a4),a2		; Check for new path
		move.w	(a2)+,d4
		move.w	d4,$10(a1)
		move.w	(a2)+,d5
		move.w	d5,$14(a1)
		move.l	a2,6(a4)
		subq.w	#4,4(a4)
		beq.s	loc_29F86
		move.w	(a2)+,d4
		move.w	(a2)+,d5
		move.w	#$1000,d2
		bra.w	AutoTunnel_CalcSpeed	; Recalc speed
; ---------------------------------------------------------------------------

loc_29F86:
		addq.b	#2,(a4)				; If end of path reached, next routine
		move.w	#0,$18(a1)
		move.w	#0,$1A(a1)			; Null momentum of player
		move.w	$14(a0),$46(a0)		; Backup Y position
		clr.b	1(a4)				; Zero out angle
		clr.b	(Fast_V_scroll_flag).w	; Restore normal Camera Y follow
		rts
; ---------------------------------------------------------------------------

loc_29FA6:
		move.l	$10(a1),d2			; Move tube elevator based on autotunnel speed
		move.l	$14(a1),d3
		move.w	$18(a1),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d2
		move.w	$1A(a1),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d3
		move.l	d2,$10(a1)
		move.l	d3,$14(a1)
		rts
; ---------------------------------------------------------------------------

LBZTubeElevator_SlowSpin:
		move.w	$22(a0),d0
		sub.w	$3C(a0),d0
		bcc.s	loc_29FDA
		addi.w	#$600,d0

loc_29FDA:
		move.w	d0,$22(a0)
		move.w	$26(a0),d0
		sub.w	$3C(a0),d0		; Spin spin spinning
		bcc.s	loc_29FEC
		addi.w	#$C00,d0

loc_29FEC:
		move.w	d0,$26(a0)
		cmpi.w	#8,$3C(a0)
		bne.s	loc_2A014
		cmpi.b	#2,$22(a0)		; When minimum speed reached and correct rotation on tube
		bne.s	LBZTubeElevator_WaitExit
		addq.b	#2,(a4)			; Next routine
		move.w	respawn_addr(a0),d0
		beq.s	loc_2A012
		movea.w	d0,a2
		bclr	#7,(a2)			; Restore jump control on player
		clr.w	respawn_addr(a0)

loc_2A012:
		bra.s	LBZTubeElevator_WaitExit
; ---------------------------------------------------------------------------

loc_2A014:
		subq.w	#4,$3C(a0)	; Subtract spin speed

LBZTubeElevator_WaitExit:


		addq.b	#2,1(a4)	; Change bobbing angle
		move.b	1(a4),d0
		cmpi.b	#-$50,d0
		blo.s	loc_2A030
		cmpi.b	#-$30,d0
		bhs.s	loc_2A030
		addi.b	#$20,d0

loc_2A030:

		move.b	d0,1(a4)
		jsr	GetSineCosine.w
		cmpi.w	#$100,d0
		bne.s	loc_2A042
		subq.w	#1,d0

loc_2A042:
		asr.w	#6,d0
		move.w	$46(a0),d2
		sub.w	d0,d2
		move.w	d2,$14(a0)	; Apply bobbing motion
		moveq	#0,d1
		move.b	7(a0),d1
		addi.w	#$B,d1
		move.w	#8,d2
		move.w	#$20,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull_Offset.w
		move.b	$2A(a0),d0
		andi.b	#$18,d0
		bne.s	locret_2A07C
		addq.b	#2,(a4)		; When player is no longer standing on object, next routine
		move.b	#0,$24(a0)

locret_2A07C:
		rts
; ---------------------------------------------------------------------------

LBZTubeElevator_EndSpin:
		subq.b	#1,$24(a0)
		bpl.s	LBZTubeElevator_Closed
		move.b	#$F,$24(a0)
		addq.b	#1,$22(a0)	; Spin object until closed frame is on
		cmpi.b	#6,$22(a0)
		blo.s	loc_2A09E
		move.b	#0,$22(a0)
		addq.b	#2,(a4)

loc_2A09E:
		addq.b	#1,$26(a0)
		cmpi.b	#6,$26(a0)
		blo.s	LBZTubeElevator_Closed
		move.b	#0,$26(a0)

LBZTubeElevator_Closed:


		addq.b	#2,1(a4)	; Add to bobbing angle
		move.b	1(a4),d0
		cmpi.b	#-$50,d0
		blo.s	loc_2A0C8
		cmpi.b	#-$30,d0
		bhs.s	loc_2A0C8
		addi.b	#$20,d0

loc_2A0C8:

		move.b	d0,1(a4)
		jsr	GetSineCosine.w
		cmpi.w	#$100,d0
		bne.s	loc_2A0DA
		subq.w	#1,d0

loc_2A0DA:
		asr.w	#6,d0
		move.w	$46(a0),d2
		sub.w	d0,d2
		move.w	d2,$14(a0)		; Apply bobbing offset
		moveq	#0,d1
		move.b	7(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	$10(a0),d4
		jmp	SolidObjectFull.w	; Fully closed

; =============== S U B R O U T I N E =======================================


LBZTubeElevator_CheckPlayer:
		cmpi.b	#6,5(a1)
		blo.s	.notdead
		clr.b	(a2)
.rts		rts

.notdead	move.b	(a2),d0
		bne.w	loc_2A1B6
		tst.b	(Debug_On).w
		bne.s	.rts		; Do nothing if currently in debug state

		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		addq.w	#3,d0
		btst	#0,$2A(a0)
		beq.s	loc_2A13E
		addi.w	#$A,d0

loc_2A13E:
		cmpi.w	#$10,d0
		bhs.s	locret_2A1B4
		move.w	$14(a1),d1
		sub.w	$14(a0),d1
		addi.w	#$20,d1
		cmpi.w	#$40,d1			; Check if in range
		bhs.s	locret_2A1B4
		tst.b	$2E(a1)
		bne.s	locret_2A1B4	; If player is already under control, skip all this.
		btst	#1,$2A(a1)
		bne.s	locret_2A1B4	; If player is upside down, skip all this

loc_2A164:
		addq.b	#2,(a2)
		move.b	#$83,$2E(a1)	; Object control of player, control of animation too
		clr.b	$20(a1)		; Clear player animation
		clr.b	$40(a1)
		clr.w	$1C(a1)
		clr.l	$18(a1)		; Null momentum
		bclr	#5,$2A(a0)
		bclr	#5,$2A(a1)		; Not pushing
		bclr	#1,$2A(a1)		; Ensure player is right-side up
		bset	#3,$2A(a1)		; NAT: apparently this can be clear somehow
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),d0		; Match player position to object position
		addi.w	#$18,d0
		moveq	#0,d1
		move.b	$1E(a1),d1
		sub.w	d1,d0
		move.w	d0,$14(a1)
		move.w	a0,$42(a1)		; NAT: Make sure to set the object address as well! Important

locret_2A1B4:
		rts
; ---------------------------------------------------------------------------

loc_2A1B6:
		subq.b	#2,d0			; If player already inside
		bne.s	locret_2A1B4
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),d0
		addi.w	#$18,d0
		moveq	#0,d1
		move.b	$1E(a1),d1
		sub.w	d1,d0
		move.w	d0,$14(a1)		; Match player position
		cmpi.b	#8,$2E(a0)
		bne.s	loc_2A1EC
		bset	#0,$2A(a1)
		move.b	#0,$2E(a1)
		addq.b	#2,(a2)

loc_2A1EC:
		moveq	#0,d0
		move.b	$26(a0),d0
		move.b	LBZTubeElevator_PlayerFrame(pc,d0.w),$22(a1)
		andi.b	#-4,4(a1)
		move.b	LBZTubeElevator_PlayerFlip(pc,d0.w),d0
		or.b	d0,4(a1)
		moveq	#0,d0
		move.b	$22(a1),d0
		move.l	a2,-(sp)
		jsr	(Tails_Carry_LoadPLC).l
		movea.l	(sp)+,a2
		rts
; ---------------------------------------------------------------------------
LBZTubeElevator_PlayerFrame:	dc.b $55
		dc.b $59
		dc.b $5A
		dc.b $5B
		dc.b $5A
		dc.b $59
		dc.b $55
		dc.b $56
		dc.b $57
		dc.b $58
		dc.b $57
		dc.b $56
LBZTubeElevator_PlayerFlip:	dc.b 0
		dc.b 1
		dc.b 1
		dc.b 0
		dc.b 0
		dc.b 0
		dc.b 1
		dc.b 1
		dc.b 1
		dc.b 0
		dc.b 0
		dc.b 0
; ---------------------------------------------------------------------------

locret_2A230:
		rts
; End of function LBZTubeElevator_CheckPlayer

; ---------------------------------------------------------------------------
word_2A232:	dc.w 1
		dc.w 3
		dc.w 7
		dc.w $F
		dc.w $1F
		dc.w $3F
		dc.w $7F
		dc.w $FF
		dc.w $1FF
		dc.w $3FF
		dc.w $7FF
		dc.w $FFF
		dc.w $1FFF
		dc.w $3FFF
		dc.w $7FFF
		dc.w $FFFF
; ---------------------------------------------------------------------------

Obj_AIZDisappearingFloor:

		move.b	$2C(a0),d0
		move.b	d0,d1
		andi.w	#$F,d0
		move.w	d0,d2
		add.w	d0,d0
		move.w	word_2A232(pc,d0.w),$32(a0)
		subq.w	#3,d2
		bcc.s	loc_2A26C
		moveq	#0,d2

loc_2A26C:
		lsr.w	#4,d1
		andi.w	#$F,d1
		lsl.w	d2,d1
		move.w	d1,$34(a0)
		move.l	#Map_AIZDisappearingFloor,$C(a0)
		move.w	#$42E9,$A(a0)
		move.w	#$4001,$A(a0)
		move.b	#$20,7(a0)
		move.b	#$18,6(a0)
		move.b	#4,4(a0)
		move.w	#prio(5),8(a0)
		move.w	(Level_frame_counter).w,d0
		add.w	$34(a0),d0
		and.w	$32(a0),d0
		beq.s	loc_2A2D0
		subi.w	#$C8,d0
		bcc.s	loc_2A2D0
		neg.w	d0
		move.b	d0,$24(a0)
		move.b	#0,$23(a0)
		move.w	#$202,$20(a0)
		move.b	#5,$22(a0)

loc_2A2D0:

		move.l	#loc_2A2D6,(a0)

loc_2A2D6:
		move.w	(Level_frame_counter).w,d0
		add.w	$34(a0),d0
		and.w	$32(a0),d0
		bne.w	loc_2A300
		move.w	#$100,$20(a0)
		move.b	#0,$36(a0)
		tst.b	4(a0)
		bpl.s	loc_2A300
		moveq	#$4B,d0
		jsr	Play_Sound_2.w

loc_2A300:

		lea	(Ani_AIZDisappearingFloor).l,a1
		jsr	Animate_SpriteIrregularDelay.w
		cmpi.b	#5,$22(a0)
		bne.s	loc_2A366
		tst.b	$36(a0)
		bne.s	loc_2A366
		move.b	#1,$36(a0)
		jsr	Create_New_Sprite3.w
		bne.w	loc_2A366
		move.l	#loc_2A36C,(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		move.l	#Map_AIZDisappearingFloor2,$C(a1)
		move.w	#$62E9,$A(a1)
		move.b	#$28,7(a1)
		move.b	#$20,6(a1)
		move.b	#4,4(a1)
		move.w	#prio(4),8(a1)
		move.w	a0,$3C(a1)

loc_2A366:

		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_2A36C:
		movea.w	$3C(a0),a1
		cmpi.b	#3,$22(a1)
		bne.s	loc_2A37E
		move.w	#$7FF0,$10(a0)

loc_2A37E:
		subq.b	#1,$24(a0)
		bpl.s	loc_2A394
		move.b	#3,$24(a0)
		addq.b	#1,$22(a0)
		andi.b	#3,$22(a0)

loc_2A394:
		move.w	#$2B,d1
		move.w	#$18,d2
		move.w	#$19,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------
Ani_AIZDisappearingFloor:	include "Levels/AIZ/Misc Object Data/Anim - Disappearing Floor.asm"

; ---------------------------------------------------------------------------

Obj_CorkFloor:

		move.b	#4,4(a0)
		move.w	#prio(5),8(a0)
		move.l	#Map_AIZCorkFloor,$C(a0)
		move.w	#$4001,$A(a0)
		move.b	#$10,7(a0)

loc_2A3F0:
		move.b	#$28,6(a0)
		move.l	#word_2A8B0,$3C(a0)
		cmpi.w	#1,(Current_zone_and_act).w
		bne.s	loc_2A41A
		move.l	#Map_AIZCorkFloor2,$C(a0)
		move.w	#$4001,$A(a0)
		move.b	#$2C,6(a0)

loc_2A41A:
		cmpi.b	#3,(Current_zone).w
		bne.s	loc_2A444
		move.l	#Map_CNZCorkFloor,$C(a0)
		move.w	#$4430,$A(a0)
		move.b	#$20,7(a0)
		move.b	#$20,6(a0)
		move.l	#word_2A8E0,$3C(a0)

loc_2A444:
		cmpi.b	#4,(Current_zone).w
		bne.s	loc_2A46E
		move.l	#Map_FBZCorkFloor,$C(a0)
		move.w	#$243A,$A(a0)
		move.b	#$10,7(a0)
		move.b	#$10,6(a0)
		move.l	#word_2A884,$3C(a0)

loc_2A46E:
		cmpi.b	#5,(Current_zone).w
		bne.s	loc_2A4C2
		move.l	#Map_ICZCorkFloor,$C(a0)
		move.w	#$4001,$A(a0)
		move.b	#$10,7(a0)
		move.b	#$24,6(a0)
		move.b	$2C(a0),d0
		move.b	d0,d1
		andi.b	#$F,d0
		move.b	d0,$22(a0)
		andi.b	#$10,d1
		bne.s	loc_2A4AE
		move.l	#loc_2A6D4,(a0)
		bra.w	loc_2A6D4
; ---------------------------------------------------------------------------

loc_2A4AE:
		move.l	#word_2A884,$3C(a0)
		move.w	#$43B6,$A(a0)
		move.b	#$10,6(a0)

loc_2A4C2:
		cmpi.b	#6,(Current_zone).w
		bne.s	loc_2A4EC
		move.l	#Map_LBZCorkFloor,$C(a0)
		move.w	#$4001,$A(a0)
		move.b	#$20,7(a0)
		move.b	#$20,6(a0)
		move.l	#word_2A8E0,$3C(a0)

loc_2A4EC:
		tst.b	$2C(a0)
		bne.s	loc_2A4FC
		move.l	#loc_2A618,(a0)
		bra.w	loc_2A618
; ---------------------------------------------------------------------------

loc_2A4FC:
		move.l	#loc_2A502,(a0)

loc_2A502:
		move.w	(Chain_bonus_counter).w,$38(a0)
		move.b	(Player_1+anim).w,$34(a0)
		move.b	(Player_2+anim).w,$36(a0)
		moveq	#0,d1
		move.b	7(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		move.b	$2A(a0),d0
		andi.w	#$18,d0
		bne.s	loc_2A542

loc_2A53C:

		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_2A542:
		cmpi.b	#$18,d0
		bne.s	loc_2A570
		cmpi.b	#2,$34(a0)
		beq.s	loc_2A558
		cmpi.b	#2,$36(a0)
		bne.s	loc_2A53C

loc_2A558:
		lea	(Player_1).w,a1
		move.b	$34(a0),d0
		bsr.s	sub_2A588
		lea	(Player_2).w,a1
		move.b	$36(a0),d0
		bsr.s	sub_2A588
		bra.w	loc_2A5D8
; ---------------------------------------------------------------------------

loc_2A570:
		move.b	d0,d1
		andi.b	#8,d1
		beq.s	loc_2A5C0
		cmpi.b	#2,$34(a0)
		bne.s	loc_2A53C
		lea	(Player_1).w,a1
		bsr.s	sub_2A58E
		bra.s	loc_2A5D8

; =============== S U B R O U T I N E =======================================


sub_2A588:

		cmpi.b	#2,d0
		bne.s	loc_2A5AC
; End of function sub_2A588


; =============== S U B R O U T I N E =======================================


sub_2A58E:

		bset	#2,$2A(a1)
		move.b	#$E,$1E(a1)
		move.b	#7,$1F(a1)
		move.b	#2,$20(a1)
		move.w	#-$100,$1A(a1)		; NAT: Make smaller speed. Was -$300

loc_2A5AC:
		bset	#1,$2A(a1)
		bclr	#3,$2A(a1)
		move.b	#2,5(a1)
		rts
; End of function sub_2A58E

; ---------------------------------------------------------------------------

loc_2A5C0:
		andi.b	#$10,d0
		beq.w	loc_2A53C
		cmpi.b	#2,$36(a0)
		bne.w	loc_2A53C
		lea	(Player_2).w,a1
		bsr.s	sub_2A58E

loc_2A5D8:

		move.w	$38(a0),(Chain_bonus_counter).w
		andi.b	#-$19,$2A(a0)
		movea.l	$3C(a0),a4
		addq.b	#1,$22(a0)
		move.l	#loc_2A5F8,(a0)
		jsr	(sub_216B0).l

loc_2A5F8:


		jsr	MoveSprite2.w
		addi.w	#$18,$1A(a0)
		tst.b	4(a0)
		bpl.w	loc_2A612
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_2A612:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_2A618:

		move.w	(Player_1+y_vel).w,$30(a0)
		move.w	(Player_2+$1A).w,$32(a0)
		moveq	#0,d1
		move.b	7(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		swap	d6
		andi.w	#$C,d6
		bne.s	loc_2A650
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_2A650:
		move.b	d6,d0
		andi.b	#4,d0
		beq.s	loc_2A674
		lea	(Player_1).w,a1
		move.w	$30(a0),$1A(a1)
		andi.b	#8,d6
		beq.s	loc_2A68C
		lea	(Player_2).w,a1
		move.w	$32(a0),$1A(a1)
		bra.s	loc_2A68C
; ---------------------------------------------------------------------------

loc_2A674:
		andi.b	#8,d6
		beq.s	loc_2A686
		lea	(Player_2).w,a1
		move.w	$32(a0),$1A(a1)
		bra.s	loc_2A68C
; ---------------------------------------------------------------------------

loc_2A686:
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_2A68C:

		btst	#3,$2A(a0)
		beq.s	loc_2A6A4
		lea	(Player_1).w,a1
		bset	#1,$2A(a1)
		bclr	#3,$2A(a1)

loc_2A6A4:
		btst	#4,$2A(a0)
		beq.s	loc_2A6BC
		lea	(Player_2).w,a1
		bset	#1,$2A(a1)
		bclr	#3,$2A(a1)

loc_2A6BC:
		movea.l	$3C(a0),a4
		addq.b	#1,$22(a0)
		move.l	#loc_2A5F8,(a0)
		jsr	(sub_216B0).l
		bra.w	loc_2A5F8
; ---------------------------------------------------------------------------

loc_2A6D4:

		move.w	(Chain_bonus_counter).w,$38(a0)
		move.b	(Player_1+anim).w,$34(a0)
		move.b	(Player_2+anim).w,$36(a0)
		lea	(byte_2A894).l,a2
		moveq	#0,d1
		move.b	7(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	$10(a0),d4
		jsr	sub_1DDC6.w
		move.b	$2A(a0),d0
		andi.b	#$18,d0
		bne.s	loc_2A716

loc_2A710:

		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_2A716:
		cmpi.b	#$18,d0
		bne.s	loc_2A77A
		cmpi.b	#2,$34(a0)
		bne.s	loc_2A732
		tst.b	$2C(a0)
		bmi.s	loc_2A762
		cmpi.b	#$E,(Player_1+$46).w
		beq.s	loc_2A762

loc_2A732:
		move.b	#$C,(Player_1+$46).w
		move.b	#$D,(Player_1+$47).w
		cmpi.b	#2,$36(a0)
		bne.s	loc_2A754
		tst.b	$2C(a0)
		bmi.s	loc_2A762
		cmpi.b	#$E,(Player_2+$46).w
		beq.s	loc_2A762

loc_2A754:
		move.b	#$C,(Player_2+$46).w
		move.b	#$D,(Player_2+$47).w
		bra.s	loc_2A710
; ---------------------------------------------------------------------------

loc_2A762:

		lea	(Player_1).w,a1
		move.b	$34(a0),d0
		bsr.s	sub_2A7B0
		lea	(Player_2).w,a1
		move.b	$36(a0),d0
		bsr.s	sub_2A7B0
		bra.w	loc_2A816
; ---------------------------------------------------------------------------

loc_2A77A:
		move.b	d0,d1
		andi.b	#8,d1
		beq.s	loc_2A7E2
		cmpi.b	#2,$34(a0)
		bne.s	loc_2A798
		tst.b	$2C(a0)
		bmi.s	loc_2A7A8
		cmpi.b	#$E,(Player_1+$46).w
		beq.s	loc_2A7A8

loc_2A798:
		move.b	#$C,(Player_1+$46).w
		move.b	#$D,(Player_1+$47).w
		bra.w	loc_2A710
; ---------------------------------------------------------------------------

loc_2A7A8:

		lea	(Player_1).w,a1
		bsr.s	sub_2A7B6
		bra.s	loc_2A816

; =============== S U B R O U T I N E =======================================


sub_2A7B0:

		cmpi.b	#2,d0
		bne.s	loc_2A7CE
; End of function sub_2A7B0


; =============== S U B R O U T I N E =======================================


sub_2A7B6:

		bset	#2,$2A(a1)
		move.b	#$E,$1E(a1)
		move.b	#7,$1F(a1)
		move.b	#2,$20(a1)

loc_2A7CE:
		bset	#1,$2A(a1)
		bclr	#3,$2A(a1)
		move.b	#2,5(a1)
		rts
; End of function sub_2A7B6

; ---------------------------------------------------------------------------

loc_2A7E2:
		andi.b	#$10,d0
		beq.w	loc_2A710
		cmpi.b	#2,$36(a0)
		bne.s	loc_2A800
		tst.b	$2C(a0)
		bmi.s	loc_2A810
		cmpi.b	#$E,(Player_2+$46).w
		beq.s	loc_2A810

loc_2A800:
		move.b	#$C,(Player_2+$46).w
		move.b	#$D,(Player_2+$47).w
		bra.w	loc_2A710
; ---------------------------------------------------------------------------

loc_2A810:

		lea	(Player_2).w,a1
		bsr.s	sub_2A7B6

loc_2A816:

		move.w	$38(a0),(Chain_bonus_counter).w
		andi.b	#-$19,$2A(a0)
		lea	(word_2A84C).l,a4
		moveq	#0,d0
		move.b	$22(a0),d0
		addq.b	#1,$22(a0)
		move.l	d0,d1
		add.w	d0,d0
		add.w	d0,d0
		lea	(a4,d0.w),a4
		move.l	#loc_2A5F8,(a0)
		jsr	(sub_216B0).l
		bra.w	loc_2A5F8
; ---------------------------------------------------------------------------
word_2A84C:	dc.w $FEC0,$F600
		dc.w  $140,$F600
		dc.w $FEE0,$F700
		dc.w  $120,$F700
		dc.w $FF00,$F800
		dc.w  $100,$F800
		dc.w $FF20,$F900
		dc.w   $E0,$F900
		dc.w $FF40,$FA00
		dc.w   $C0,$FA00
		dc.w $FF60,$FA80
		dc.w   $A0,$FA80
		dc.w $FF80,$FB00
		dc.w   $80,$FB00
word_2A884:	dc.w $FE00,$FE00

		dc.w  $200,$FE00
		dc.w $FF00,$FF00
		dc.w  $100,$FF00
byte_2A894:	dc.b $23, $23
		dc.b $22, $22
		dc.b $21, $21
		dc.b $20, $1F
		dc.b $1F, $1E
		dc.b $1E, $1D
		dc.b $1D, $1C
		dc.b $1B, $1B
		dc.b $1A, $1A
		dc.b $19, $19
		dc.b $17, $16
		dc.b $15, $15
		dc.b $14, $14
		dc.b $13, $13
word_2A8B0:	dc.w $FF00,$FE00

		dc.w  $100,$FE00
		dc.w $FF20,$FE40
		dc.w   $E0,$FE40
		dc.w $FF40,$FE80
		dc.w   $C0,$FE80
		dc.w $FF60,$FEC0
		dc.w   $A0,$FEC0
		dc.w $FF80,$FF00
		dc.w   $80,$FF00
		dc.w $FFA0,$FF40
		dc.w   $60,$FF40
word_2A8E0:	dc.w $FC00,$FC00

		dc.w $FE00,$FC00
		dc.w  $200,$FC00
		dc.w  $400,$FC00
		dc.w $FC40,$FC40
		dc.w $FE40,$FC40
		dc.w  $1C0,$FC40
		dc.w  $3C0,$FC40
		dc.w $FC80,$FC80
		dc.w $FE80,$FC80
		dc.w  $180,$FC80
		dc.w  $380,$FC80
		dc.w $FCC0,$FCC0
		dc.w $FEC0,$FCC0
		dc.w  $140,$FCC0
		dc.w  $340,$FCC0
Map_FBZCorkFloor:include "Levels/FBZ/Misc Object Data/Map - Cork Floor.asm"

; ---------------------------------------------------------------------------

Obj_AIZFlippingBridge:

		move.l	#Map_AIZFlippingBridge,$C(a0)
		move.w	#$42E9,$A(a0)
		move.b	#-$80,7(a0)
		move.b	#4,6(a0)
		move.b	#4,4(a0)
		move.w	#prio(4),8(a0)
		move.w	$14(a0),$30(a0)
		move.l	#word_2AAF2,$32(a0)
		move.b	$2C(a0),d0
		bpl.s	loc_2A98E
		move.l	#word_2AB72,$32(a0)

loc_2A98E:
		move.b	d0,d1
		andi.w	#$F,d0
		addi.w	#$10,d0
		move.b	d0,$37(a0)
		lsr.b	#4,d1
		andi.w	#7,d1
		move.b	d1,$25(a0)
		moveq	#1,d1
		btst	#0,$2A(a0)
		beq.s	loc_2A9B6
		moveq	#-1,d1
		subq.b	#1,$37(a0)

loc_2A9B6:
		move.b	d1,$36(a0)
		jsr	Create_New_Sprite3.w
		bne.w	loc_2AA50
		move.l	#loc_2AA78,(a1)
		move.l	#Map_AIZFlippingBridge,$C(a1)
		move.w	#$42E9,$A(a1)
		move.b	#4,4(a1)
		move.b	#-$80,7(a1)
		move.b	#$40,6(a1)
		move.w	#prio(4),8(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		bset	#6,4(a1)
		move.w	#8,$16(a1)
		move.w	$14(a0),d2
		move.w	$10(a0),d3
		subi.w	#$70,d3
		addi.w	#$20,d2
		move.w	#8,d4
		tst.b	$2C(a0)
		bpl.s	loc_2AA2A
		subi.w	#$10,d2
		move.w	#4,d4

loc_2AA2A:
		moveq	#0,d1
		lea	$18(a1),a2
		move.w	$16(a1),d6
		subq.w	#1,d6

loc_2AA36:
		move.w	d3,(a2)+
		move.w	d2,(a2)+
		move.w	d1,(a2)+
		addq.w	#2,d1
		andi.w	#$F,d1
		addi.w	#$20,d3
		sub.w	d4,d2
		dbf	d6,loc_2AA36
		move.w	a1,$3C(a0)

loc_2AA50:
		move.l	#loc_2AA56,(a0)

loc_2AA56:
		movea.w	$3C(a0),a3
		bsr.w	sub_2AA7E
		moveq	#0,d1
		move.b	7(a0),d1
		movea.l	$32(a0),a2
		move.w	$10(a0),d4
		jsr	(sub_2ABF2).l
		jmp	Delete_Sprite_If_Not_In_Range.w
; ---------------------------------------------------------------------------

loc_2AA78:
		jmp	Sprite_OnScreen_Test.w

; =============== S U B R O U T I N E =======================================


sub_2AA7E:
		subq.b	#1,$24(a0)
		bpl.s	locret_2AAC8
		move.b	$25(a0),$24(a0)
		lea	$1D(a3),a2
		move.w	$16(a3),d6
		subq.w	#1,d6
		move.b	$37(a0),d2
		move.b	$36(a0),d1
		bmi.s	loc_2AACA

loc_2AA9E:
		add.b	d1,(a2)
		cmp.b	(a2),d2
		bhi.s	loc_2AAA8
		move.b	#0,(a2)

loc_2AAA8:
		addq.w	#6,a2
		dbf	d6,loc_2AA9E
		tst.b	4(a3)
		bpl.s	locret_2AAC8
		move.b	(Level_frame_counter+1).w,d0
		addq.b	#3,d0
		andi.b	#7,d0
		bne.s	locret_2AAC8
		moveq	#$4C,d0
		jmp	Play_Sound_2.w

locret_2AAC8:
locret_2AAF0:
		rts
; ---------------------------------------------------------------------------

loc_2AACA:

		add.b	d1,(a2)
		bcs.s	loc_2AAD0
		move.b	d2,(a2)

loc_2AAD0:
		addq.w	#6,a2
		dbf	d6,loc_2AACA
		tst.b	4(a3)
		bpl.s	locret_2AAF0
		move.b	(Level_frame_counter+1).w,d0
		addq.b	#3,d0
		andi.b	#7,d0
		bne.s	locret_2AAF0
		moveq	#$4C,d0
		jmp	Play_Sound_2.w

; ---------------------------------------------------------------------------
word_2AAF2:	dc.w  $E4E4, $E4E4
		dc.w  $E4E4, $E4E4
		dc.w  $E4E4, $E4E4
		dc.w  $E4E4, $E4E4
		dc.w  $ECEC, $ECEC
		dc.w  $ECEC, $ECEC
		dc.w  $ECEC, $ECEC
		dc.w  $ECEC, $ECEC
		dc.w  $F4F4, $F4F4
		dc.w  $F4F4, $F4F4
		dc.w  $F4F4, $F4F4
		dc.w  $F4F4, $F4F4
		dc.w  $FCFC, $FCFC
		dc.w  $FCFC, $FCFC
		dc.w  $FCFC, $FCFC
		dc.w  $FCFC, $FCFC
		dc.w   $404,  $404
		dc.w   $404,  $404
		dc.w   $404,  $404
		dc.w   $404,  $404
		dc.w   $C0C,  $C0C
		dc.w   $C0C,  $C0C
		dc.w   $C0C,  $C0C
		dc.w   $C0C,  $C0C
		dc.w  $1414, $1414
		dc.w  $1414, $1414
		dc.w  $1414, $1414
		dc.w  $1414, $1414
		dc.w  $1C1C, $1C1C
		dc.w  $1C1C, $1C1C
		dc.w  $1C1C, $1C1C
		dc.w  $1C1C, $1C1C
word_2AB72:	dc.w  $F4F4, $F4F4
		dc.w  $F4F4, $F4F4
		dc.w  $F4F4, $F4F4
		dc.w  $F4F4, $F4F4
		dc.w  $F8F8, $F8F8
		dc.w  $F8F8, $F8F8
		dc.w  $F8F8, $F8F8
		dc.w  $F8F8, $F8F8
		dc.w  $FCFC, $FCFC
		dc.w  $FCFC, $FCFC
		dc.w  $FCFC, $FCFC
		dc.w  $FCFC, $FCFC
		dc.w	  0,	 0
		dc.w	  0,	 0
		dc.w	  0,	 0
		dc.w	  0,	 0
		dc.w   $404,  $404
		dc.w   $404,  $404
		dc.w   $404,  $404
		dc.w   $404,  $404
		dc.w   $808,  $808
		dc.w   $808,  $808
		dc.w   $808,  $808
		dc.w   $808,  $808
		dc.w   $C0C,  $C0C
		dc.w   $C0C,  $C0C
		dc.w   $C0C,  $C0C
		dc.w   $C0C,  $C0C
		dc.w  $1010, $1010
		dc.w  $1010, $1010
		dc.w  $1010, $1010
		dc.w  $1010, $1010

; =============== S U B R O U T I N E =======================================


sub_2ABF2:
		lea	(Player_1).w,a1
		moveq	#3,d6
		movem.l	d1-d4,-(sp)
		bsr.s	sub_2AC08
		movem.l	(sp)+,d1-d4
		lea	(Player_2).w,a1
		addq.b	#1,d6
; End of function sub_2ABF2


; =============== S U B R O U T I N E =======================================


sub_2AC08:
		btst	d6,$2A(a0)
		beq.s	loc_2AC5E
		move.w	d1,d2
		add.w	d2,d2
		btst	#1,$2A(a1)
		bne.s	loc_2AC2A
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		add.w	d1,d0
		bmi.s	loc_2AC2A
		cmp.w	d2,d0
		blo.s	loc_2AC3E

loc_2AC2A:

		bclr	#3,$2A(a1)
		bset	#1,$2A(a1)
		bclr	d6,$2A(a0)
		moveq	#0,d4
		rts
; ---------------------------------------------------------------------------

loc_2AC3E:
		lsr.w	#5,d0
		add.w	d0,d0
		move.w	d0,d3
		add.w	d0,d0
		add.w	d3,d0
		move.b	$1D(a3,d0.w),d0
		cmpi.b	#5,d0
		blo.s	loc_2AC2A
		move.w	d4,d2
		jsr	SolidObjSloped2.w
		moveq	#0,d4
		rts
; ---------------------------------------------------------------------------

loc_2AC5E:
		tst.w	$1A(a1)
		bmi.s	locret_2ACDA
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		add.w	d1,d0
		bmi.s	locret_2ACDA
		add.w	d1,d1
		cmp.w	d1,d0
		bhs.s	locret_2ACDA
		btst	#0,4(a0)
		beq.s	loc_2AC82
		not.w	d0
		add.w	d1,d0

loc_2AC82:
		move.w	d0,d4
		lsr.w	#1,d0
		move.b	(a2,d0.w),d3
		ext.w	d3
		move.w	$14(a0),d0
		sub.w	d3,d0
		move.w	$14(a1),d2
		move.b	$1E(a1),d1
		ext.w	d1
		add.w	d2,d1
		addq.w	#4,d1
		sub.w	d1,d0
		bhi.s	locret_2ACDA
		cmpi.w	#-$10,d0
		blo.s	locret_2ACDA
		tst.b	$2E(a1)
		bne.s	locret_2ACDA
		cmpi.b	#6,5(a1)
		bhs.s	locret_2ACDA
		lsr.w	#5,d4
		add.w	d4,d4
		move.w	d4,d1
		add.w	d4,d4
		add.w	d1,d4
		move.b	$1D(a3,d4.w),d4
		cmpi.b	#5,d4
		blo.s	locret_2ACDA
		add.w	d0,d2
		addq.w	#3,d2
		move.w	d2,$14(a1)
		jmp	RideObject_SetRide.w
; ---------------------------------------------------------------------------

locret_2ACDA:

		rts
; End of function sub_2AC08

; ---------------------------------------------------------------------------

Obj_AIZCollapsingLogBridge:

		move.b	$2C(a0),d0
		bmi.w	loc_2ADA8
		move.b	d0,$36(a0)
		addi.b	#$30,d0
		move.b	d0,$35(a0)
		move.b	#8,$37(a0)
		move.l	#Map_AIZCollapsingLogBridge,$C(a0)
		move.w	#$42E9,$A(a0)
		move.b	#$5A,7(a0)
		move.b	#8,6(a0)
		move.b	#4,4(a0)
		move.w	#prio(4),8(a0)
		jsr	Create_New_Sprite3.w
		bne.w	loc_2AD9E
		move.l	#loc_2AEB4,(a1)
		move.l	#Map_AIZCollapsingLogBridge,$C(a1)
		move.w	#$42E9,$A(a1)
		ori.b	#4,4(a1)
		move.b	#$5A,7(a1)
		move.b	#8,6(a1)
		move.w	#prio(4),8(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		bset	#6,4(a1)
		move.w	#6,$16(a1)
		move.w	$14(a0),d2
		move.w	$10(a0),d3
		subi.w	#$4B,d3
		lea	$18(a1),a2
		move.w	$16(a1),d6
		subq.w	#1,d6
		move.w	#1,4(a2)

loc_2AD86:
		move.w	d3,(a2)+
		move.w	d2,(a2)+
		addq.w	#2,a2
		addi.w	#$1E,d3
		dbf	d6,loc_2AD86
		move.w	#2,-2(a2)
		move.w	a1,$3C(a0)

loc_2AD9E:
		move.l	#loc_2AE70,(a0)
		bra.w	loc_2AE70
; ---------------------------------------------------------------------------

loc_2ADA8:
		andi.b	#$7F,d0
		move.b	d0,$36(a0)
		addi.b	#$30,d0
		move.b	d0,$35(a0)
		move.b	#8,$37(a0)
		move.l	#Map_AIZDrawBridgeFire,$C(a0)
		move.w	#-$3D17,$A(a0)
		move.b	#$60,7(a0)
		move.b	#8,6(a0)
		move.b	#4,4(a0)
		move.w	#prio(4),8(a0)
		jsr	Create_New_Sprite3.w
		bne.w	loc_2AE66
		move.l	#loc_2AEB4,(a1)
		move.l	#Map_AIZDrawBridgeFire,$C(a1)
		move.w	#-$3D17,$A(a1)
		ori.b	#4,4(a1)
		move.b	#$60,7(a1)
		move.b	#8,6(a1)
		move.w	#prio(4),8(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		bset	#6,4(a1)
		move.w	#6,$16(a1)
		move.w	$14(a0),d2
		move.w	$10(a0),d3
		subi.w	#$50,d3
		lea	$18(a1),a2
		move.w	$16(a1),d6
		subq.w	#1,d6
		move.w	#1,4(a2)

loc_2AE4E:
		move.w	d3,(a2)+
		move.w	d2,(a2)+
		addq.w	#2,a2
		addi.w	#$20,d3
		dbf	d6,loc_2AE4E
		move.w	#2,-2(a2)
		move.w	a1,$3C(a0)

loc_2AE66:
		move.l	#loc_2AEE2,(a0)
		bra.w	loc_2AEE2
; ---------------------------------------------------------------------------

loc_2AE70:

		move.b	$2A(a0),d0
		andi.b	#$18,d0
		beq.s	loc_2AE98
		move.b	$35(a0),$34(a0)
		move.b	$36(a0),d2
		move.b	$37(a0),d3
		move.l	#loc_2AF70,(a0)
		move.l	#loc_2AEBA,d4
		bsr.w	sub_2AFFE

loc_2AE98:
		moveq	#0,d1
		move.b	7(a0),d1
		moveq	#0,d3
		move.b	6(a0),d3
		move.w	$10(a0),d4
		jsr	SolidObjectTop.w
		jmp	Delete_Sprite_If_Not_In_Range.w
; ---------------------------------------------------------------------------

loc_2AEB4:
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_2AEBA:
		tst.b	$34(a0)
		beq.s	loc_2AECA
		subq.b	#1,$34(a0)
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_2AECA:
		jsr	MoveSprite.w
		tst.b	4(a0)
		bpl.s	loc_2AEDC
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_2AEDC:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_2AEE2:

		tst.b	(__u_FAA2).w
		beq.s	loc_2AF06
		move.b	$35(a0),$34(a0)
		move.b	$36(a0),d2
		move.b	$37(a0),d3
		move.l	#loc_2AF70,(a0)
		move.l	#loc_2AF22,d4
		bsr.w	sub_2AFFE

loc_2AF06:
		moveq	#0,d1
		move.b	7(a0),d1
		moveq	#0,d3
		move.b	6(a0),d3
		move.w	$10(a0),d4
		jsr	SolidObjectTop.w
		jmp	Delete_Sprite_If_Not_In_Range.w
; ---------------------------------------------------------------------------

loc_2AF22:
		tst.b	$34(a0)
		beq.s	loc_2AF3A
		subq.b	#1,$34(a0)
		bne.s	loc_2AF34
		move.b	#3,$22(a0)

loc_2AF34:
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_2AF3A:
		subq.b	#1,$24(a0)
		bpl.s	loc_2AF58
		move.b	#3,$24(a0)
		addq.b	#1,$22(a0)
		cmpi.b	#8,$22(a0)
		blo.s	loc_2AF58
		move.b	#3,$22(a0)

loc_2AF58:

		jsr	MoveSprite.w
		tst.b	4(a0)
		bpl.s	loc_2AF6A
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_2AF6A:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_2AF70:

		subq.b	#1,$34(a0)
		bne.s	loc_2AF7C
		move.l	#loc_2B452,(a0)

loc_2AF7C:
		move.b	$34(a0),d3
		moveq	#0,d1
		move.b	7(a0),d1
		lea	(Player_1).w,a1
		moveq	#3,d6
		bsr.s	sub_2AF9C

		move.b	$34(a0),d3
		moveq	#0,d1
		move.b	7(a0),d1
		lea	(Player_2).w,a1
		moveq	#4,d6
		bsr.s	sub_2AF9C
		jmp	Delete_Sprite_If_Not_In_Range.w

; =============== S U B R O U T I N E =======================================


sub_2AF9C:
		btst	d6,$2A(a0)
		bne.s	.isontop
		move.w	$10(a0),-(sp)		; NAT: push temporarily
		add.w	d1,$10(a0)		; NAT: align

		moveq	#0,d1
		move.b	d3,d1
		lsr.w	#3,d1			; NAT: Divide timer by 8
		mulu.w	#$1E/2,d1		; NAT: multiply by $1E/2
		sub.w	d1,$10(a0)		; NAT: sub width

		moveq	#0,d3
		move.b	6(a0),d3
		jsr	loc_1E42E.w		; NAT: Allow landing on platform
		move.w	(sp)+,$10(a0)		; NAT: hiddenpop x-pos
		rts

.isontop	move.w	d1,d2
		add.w	d2,d2
		btst	#1,$2A(a1)
		bne.s	loc_2AFE0
		move.w	$10(a1),d0
		sub.w	$10(a0),d0

		moveq	#0,d4
		move.b	7(a1),d4
		add.w	d4,d0

		add.w	d1,d0
		bmi.s	loc_2AFE0
		cmp.w	d2,d0
		bhs.s	loc_2AFE0
		btst	#0,$2A(a0)
		beq.s	loc_2AFCA
		neg.w	d0
		add.w	d2,d0

loc_2AFCA:
		lsr.w	#5,d0
		add.w	d0,d0
		add.w	d0,d0
		add.w	d0,d0
		add.b	$36(a0),d0
		move.b	$35(a0),d2
		sub.b	d0,d2
		cmp.b	d2,d3
		bhi.s	locret_2AFFC

loc_2AFE0:
		bclr	d6,$2A(a0)
		bclr	#3,$2A(a1)
		bclr	#5,$2A(a1)
		bset	#1,$2A(a1)
		move.b	#1,$21(a1)

locret_2AFFC:
		rts
; =============== S U B R O U T I N E =======================================

sub_2AFFE:

		movea.w	$3C(a0),a3
		lea	$18(a3),a2
		move.w	$16(a3),d6
		subq.w	#1,d6
		bclr	#6,4(a3)
		movea.l	a3,a1
		bra.s	loc_2B01E
; ---------------------------------------------------------------------------

loc_2B016:
		jsr	Create_New_Sprite3.w
		bne.s	loc_2B05C

loc_2B01E:
		move.l	d4,(a1)

loc_2B020:
		move.l	$C(a3),$C(a1)
		move.b	4(a3),4(a1)
		move.w	$A(a3),$A(a1)

loc_2B032:
		move.w	8(a3),8(a1)
		move.b	7(a3),7(a1)
		move.b	6(a3),6(a1)
		move.w	(a2)+,$10(a1)
		move.w	(a2)+,$14(a1)
		move.w	(a2)+,d0
		move.b	d0,$22(a1)
		move.b	d2,$34(a1)
		add.b	d3,d2
		dbf	d6,loc_2B016

loc_2B05C:
		move.w	#0,$18(a3)
		move.w	#0,$1A(a3)
		moveq	#$59,d0
		jmp	Play_Sound_2.w
; End of function sub_2AFFE

; ---------------------------------------------------------------------------
Map_AIZCollapsingLogBridge:include "Levels/AIZ/Misc Object Data/Map - Collapsing Log Bridge.asm"


Map_AIZDrawBridgeFire:	include "Levels/AIZ/Misc Object Data/Map - Draw Bridge Fire.asm"

; ---------------------------------------------------------------------------

Obj_AIZDrawBridge:

		move.l	#Map_AIZDrawBridge,$C(a0)
		move.w	#-$3D17,$A(a0)
		move.b	#4,4(a0)
		move.w	#prio(5),8(a0)

loc_2B144:
		move.b	#8,7(a0)
		move.b	#$60,6(a0)
		ori.b	#-$80,$2A(a0)
		move.w	$10(a0),$30(a0)
		move.w	$14(a0),$32(a0)

loc_2B162:
		subi.w	#$68,$14(a0)
		move.b	#-$40,$38(a0)
		moveq	#-$10,d4
		btst	#1,$2A(a0)
		beq.s	loc_2B186
		addi.w	#$D0,$14(a0)
		move.b	#$40,$38(a0)
		neg.w	d4

loc_2B186:
		move.w	#$200,d1
		btst	#0,$2A(a0)
		beq.s	loc_2B194
		neg.w	d1

loc_2B194:
		move.w	d1,$34(a0)
		jsr	Create_New_Sprite3.w
		bne.w	loc_2B266
		move.l	#loc_2B380,(a1)

loc_2B1A8:
		move.l	$C(a0),$C(a1)
		move.w	$A(a0),$A(a1)
		move.w	8(a0),8(a1)
		move.b	#4,4(a1)

loc_2B1C0:
		bset	#6,4(a1)
		move.b	#$40,7(a1)
		move.b	#$40,6(a1)

loc_2B1D2:
		move.w	$30(a0),d2
		move.w	$32(a0),d3
		moveq	#8,d1
		move.w	d1,$16(a1)
		subq.w	#1,d1
		lea	$18(a1),a2

loc_2B1E6:
		add.w	d4,d3
		move.w	d2,(a2)+
		move.w	d3,(a2)+
		move.w	#1,(a2)+
		dbf	d1,loc_2B1E6
		move.w	$30(a1),$10(a1)
		move.w	$32(a1),$14(a1)
		move.w	a1,$3C(a0)
		jsr	Create_New_Sprite3.w
		bne.s	loc_2B266
		move.l	#loc_2B380,(a1)

loc_2B212:
		move.l	$C(a0),$C(a1)
		move.w	$A(a0),$A(a1)
		move.w	8(a0),8(a1)
		move.b	#4,4(a1)

loc_2B22A:
		bset	#6,4(a1)
		move.b	#$40,7(a1)
		move.b	#$40,6(a1)
		moveq	#4,d1
		move.w	d1,$16(a1)
		subq.w	#1,d1
		lea	$18(a1),a2

loc_2B248:
		add.w	d4,d3
		move.w	d2,(a2)+
		move.w	d3,(a2)+
		move.w	#1,(a2)+
		dbf	d1,loc_2B248
		move.w	$18(a1),$10(a1)
		move.w	$1A(a1),$14(a1)
		move.w	a1,$3E(a0)

loc_2B266:

		move.l	#loc_2B26C,(a0)

loc_2B26C:
		tst.b	(__u_FAA3).w
		beq.s	loc_2B2B0
		tst.b	$36(a0)
		bne.s	loc_2B2B0
		move.b	#1,$36(a0)
		moveq	#$56,d0
		jsr	Play_Sound_2.w
		move.w	#$68,d1
		btst	#0,$2A(a0)
		beq.s	loc_2B294
		neg.w	d1

loc_2B294:
		move.w	$30(a0),$10(a0)
		move.w	$32(a0),$14(a0)
		add.w	d1,$10(a0)
		move.b	#$60,7(a0)
		move.b	#8,6(a0)

loc_2B2B0:

		tst.b	$36(a0)
		beq.s	loc_2B2E2
		tst.b	$38(a0)
		beq.s	loc_2B2C4
		cmpi.b	#-$80,$38(a0)
		bne.s	loc_2B2DA

loc_2B2C4:
		move.b	#0,$36(a0)
		moveq	#$56,d0
		jsr	Play_Sound_2.w
		move.l	#loc_2B2E8,(a0)
		bra.s	loc_2B2E2
; ---------------------------------------------------------------------------

loc_2B2DA:
		move.w	$34(a0),d0
		add.w	d0,$38(a0)

loc_2B2E2:

		bsr.w	sub_2B386
		bra.s	loc_2B304
; ---------------------------------------------------------------------------

loc_2B2E8:
		tst.b	(__u_FAA9).w
		beq.s	loc_2B304
		move.l	#loc_2B452,(a0)
		move.b	#$E,$34(a0)
		move.l	#loc_2B42A,d4
		bra.w	loc_2B498
; ---------------------------------------------------------------------------

loc_2B304:

		move.w	#$13,d1
		move.w	#$60,d2
		move.w	#$61,d3
		move.b	$38(a0),d0
		beq.s	loc_2B322
		cmpi.b	#$40,d0
		beq.s	loc_2B32E
		cmpi.b	#-$40,d0
		beq.s	loc_2B32E

loc_2B322:
		move.w	#$6B,d1
		move.w	#8,d2
		move.w	#8,d3

loc_2B32E:

		move.w	$10(a0),d4
		jsr	SolidObjectFull2.w
		move.w	$30(a0),d0
		andi.w	#-$80,d0
		sub.w	(Camera_X_pos_coarse_back).w,d0
		cmpi.w	#$280,d0
		bhi.w	loc_2B352
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_2B352:
		move.w	$3C(a0),d0
		beq.s	loc_2B360
		movea.w	d0,a1
		jsr	Delete_Referenced_Sprite.w

loc_2B360:
		move.w	$3E(a0),d0
		beq.s	loc_2B36E
		movea.w	d0,a1
		jsr	Delete_Referenced_Sprite.w

loc_2B36E:
		move.w	respawn_addr(a0),d0
		beq.s	loc_2B37A
		movea.w	d0,a2
		bclr	#7,(a2)

loc_2B37A:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_2B380:

		jmp	Draw_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_2B386:
		tst.b	$36(a0)
		beq.w	locret_2B428
		moveq	#0,d0
		moveq	#0,d1
		move.b	$38(a0),d0
		jsr	GetSineCosine.w
		move.w	$32(a0),d2
		move.w	$30(a0),d3
		moveq	#0,d6
		movea.w	$3C(a0),a1
		move.w	$16(a1),d6
		subq.w	#1,d6
		bcs.s	locret_2B428
		swap	d0
		swap	d1
		asr.l	#4,d0
		asr.l	#4,d1
		move.l	d0,d4
		move.l	d1,d5
		lea	$18(a1),a2

loc_2B3C2:
		movem.l	d4-d5,-(sp)
		swap	d4
		swap	d5
		add.w	d2,d4
		add.w	d3,d5
		move.w	d5,(a2)+
		move.w	d4,(a2)+
		movem.l	(sp)+,d4-d5
		add.l	d0,d4
		add.l	d1,d5
		addq.w	#2,a2
		dbf	d6,loc_2B3C2
		move.w	$30(a1),$10(a1)
		move.w	$32(a1),$14(a1)
		moveq	#0,d6
		movea.w	$3E(a0),a1
		move.w	$16(a1),d6
		subq.w	#1,d6

loc_2B3F8:
		bcs.s	locret_2B428
		lea	$18(a1),a2

loc_2B3FE:
		movem.l	d4-d5,-(sp)
		swap	d4
		swap	d5
		add.w	d2,d4
		add.w	d3,d5
		move.w	d5,(a2)+
		move.w	d4,(a2)+
		movem.l	(sp)+,d4-d5
		add.l	d0,d4
		add.l	d1,d5
		addq.w	#2,a2
		dbf	d6,loc_2B3FE
		move.w	$18(a1),$10(a1)
		move.w	$1A(a1),$14(a1)

locret_2B428:

		rts
; End of function sub_2B386

; ---------------------------------------------------------------------------

loc_2B42A:
		tst.b	$34(a0)
		beq.s	loc_2B43A
		subq.b	#1,$34(a0)
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_2B43A:
		jsr	MoveSprite.w
		tst.b	4(a0)
		bpl.s	loc_2B44C
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_2B44C:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_2B452:

		tst.b	$34(a0)
		beq.s	loc_2B45E
		subq.b	#1,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_2B45E:
		bclr	#3,$2A(a0)
		beq.s	loc_2B478
		bclr	#3,(Player_1+$2A).w
		bset	#1,(Player_1+$2A).w
		move.b	#$1B,(Player_1+anim).w

loc_2B478:
		bclr	#4,$2A(a0)
		beq.s	loc_2B492
		bclr	#3,(Player_2+$2A).w
		bset	#1,(Player_2+$2A).w
		move.b	#$1B,(Player_2+anim).w

loc_2B492:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_2B498:
		move.w	$3C(a0),d0
		beq.s	loc_2B4A2
		movea.w	d0,a3
		bsr.s	loc_2B4AE

loc_2B4A2:
		move.w	$3E(a0),d0
		beq.s	locret_2B4AC
		movea.w	d0,a3
		bsr.s	loc_2B4AE

locret_2B4AC:
		rts
; ---------------------------------------------------------------------------

loc_2B4AE:

		lea	(byte_2B548).l,a4
		lea	$18(a3),a2
		move.w	$16(a3),d6
		subq.w	#1,d6
		bclr	#6,4(a3)
		movea.l	a3,a1
		bra.s	loc_2B4D0
; ---------------------------------------------------------------------------

loc_2B4C8:
		jsr	Create_New_Sprite3.w
		bne.s	loc_2B534

loc_2B4D0:
		move.l	d4,(a1)
		move.l	$C(a3),$C(a1)
		move.b	4(a3),4(a1)
		move.w	$A(a3),$A(a1)
		move.w	8(a3),8(a1)
		move.b	7(a3),7(a1)
		move.b	6(a3),6(a1)
		move.w	8(a3),8(a1)
		move.w	(a2)+,$10(a1)
		move.w	(a2)+,$14(a1)
		move.w	(a2)+,d0
		move.b	d0,$22(a1)
		move.b	(a4)+,$34(a1)
		movea.l	a1,a5
		jsr	Create_New_Sprite3.w
		bne.s	loc_2B534
		move.l	#loc_1E6EC,(a1)
		move.w	$10(a5),$10(a1)
		move.w	$14(a5),$14(a1)
		move.b	-1(a4),$24(a1)
		dbf	d6,loc_2B4C8

loc_2B534:

		move.w	#0,$18(a3)
		move.w	#0,$1A(a3)
		moveq	#-$7D,d0
		jmp	Play_Sound_2.w
; ---------------------------------------------------------------------------
byte_2B548:	dc.b 8
		dc.b $10
		dc.b $C
		dc.b $E
		dc.b 6
		dc.b $A
		dc.b 4
		dc.b 2
		dc.b 8
		dc.b $10
		dc.b $C
		dc.b $E
		dc.b 6
		dc.b $A
		dc.b 4
		dc.b 2
Map_AIZDrawBridge:include "Levels/AIZ/Misc Object Data/Map - Drawbridge.asm"

word_2B566:	dc.w 1
		dc.w 3
		dc.w 7
		dc.w $F
		dc.w $1F
		dc.w $3F
		dc.w $7F
		dc.w $FF
		dc.w $1FF
		dc.w $3FF
		dc.w $7FF
		dc.w $FFF
		dc.w $1FFF
		dc.w $3FFF
		dc.w $7FFF
		dc.w $FFFF
; ---------------------------------------------------------------------------

Obj_AIZFallingLog:

		cmpi.w	#$26B0,$10(a0)
		beq.s	loc_2B596
		cmpi.w	#$2700,$10(a0)
		bne.s	loc_2B5A2

loc_2B596:
		tst.b	(Level_trigger_array).w
		beq.s	loc_2B5A2
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_2B5A2:

		move.b	$2C(a0),d0
		move.b	d0,d1
		andi.w	#$F,d0
		move.w	d0,d2
		add.w	d0,d0
		move.w	word_2B566(pc,d0.w),$32(a0)
		subq.w	#3,d2
		bcc.s	loc_2B5BC
		moveq	#0,d2

loc_2B5BC:
		lsr.w	#4,d1
		andi.w	#$F,d1
		lsl.w	d2,d1
		move.w	d1,$34(a0)

;loc_2B5C8:
		move.b	#4,4(a0)
		move.l	#loc_2B5D4,(a0)

loc_2B5D4:
		move.w	(Level_frame_counter).w,d0

;loc_2B5D8:
		add.w	$34(a0),d0
		and.w	$32(a0),d0

;loc_2B5E0:
		bne.w	loc_2B69A
		jsr	Create_New_Sprite3.w
		bne.w	loc_2B69A
		move.l	#loc_2B6A0,(a1)
		move.w	$10(a0),$10(a1)

;loc_2B5FA:
		move.w	$14(a0),$14(a1)
		move.l	#Map_AIZFallingLog2,$C(a1)
		move.w	#$42E9,$A(a1)
		tst.b	(Current_act).w
		bne.s	loc_2B622
		move.l	#Map_AIZFallingLog,$C(a1)

;loc_2B61C:
		move.w	#$43CF,$A(a1)

loc_2B622:
		move.b	#$18,7(a1)
		move.b	#8,6(a1)
		move.b	#4,4(a1)
		move.w	#prio(5),8(a1)
		movea.l	a1,a2
		jsr	Create_New_Sprite3.w
		bne.w	loc_2B69A
		move.l	#loc_2B72C,(a1)

;loc_2B64C:
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)

;loc_2B658:
		move.l	#Map_AIZFallingLogSplash2,$C(a1)
		move.w	#$62E9,$A(a1)
		tst.b	(Current_act).w
		bne.s	loc_2B67A

;loc_2B66C:
		move.l	#Map_AIZFallingLogSplash,$C(a1)
		move.w	#$43CF,$A(a1)

loc_2B67A:
		move.b	#$20,7(a1)

;loc_2B680:
		move.b	#$10,6(a1)
		move.b	#4,4(a1)

;loc_2B68C:
		move.w	#prio(4),8(a1)
		move.w	a2,$3C(a1)
		move.w	a1,$3C(a2)

loc_2B69A:

		jmp	Delete_Sprite_If_Not_In_Range.w
; ---------------------------------------------------------------------------

loc_2B6A0:
		addq.w	#1,$14(a0)
		move.w	$14(a0),d0
		cmp.w	(Water_level).w,d0
		blo.s	loc_2B6BA
		move.l	#loc_2B6BC,(a0)
		move.b	#$3B,$24(a0)

loc_2B6BA:
		bra.s	loc_2B6D8
; ---------------------------------------------------------------------------

loc_2B6BC:
		subq.b	#1,$24(a0)
		bpl.s	loc_2B6C8
		move.w	#$7FF0,$10(a0)

loc_2B6C8:
		move.b	$24(a0),d0
		andi.b	#3,d0
		bne.s	loc_2B6D8
		bchg	#0,$36(a0)

loc_2B6D8:

		moveq	#0,d1
		move.b	7(a0),d1
		moveq	#8,d3
		move.w	$10(a0),d4
		jsr	SolidObjectTop.w
		move.w	$10(a0),d0
		andi.w	#-$80,d0
		sub.w	(Camera_X_pos_coarse_back).w,d0
		cmpi.w	#$280,d0
		bhi.w	loc_2B70C
		tst.b	$36(a0)
		bne.s	locret_2B70A
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

locret_2B70A:
		rts
; ---------------------------------------------------------------------------

loc_2B70C:
		move.w	$3C(a0),d0
		beq.s	loc_2B71A
		movea.w	d0,a1
		jsr	Delete_Referenced_Sprite.w

loc_2B71A:
		move.w	respawn_addr(a0),d0
		beq.s	loc_2B726
		movea.w	d0,a2
		bclr	#7,(a2)

loc_2B726:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_2B72C:
		movea.w	$3C(a0),a1
		move.w	$10(a1),$10(a0)
		move.w	$14(a1),$14(a0)
		subq.b	#1,$24(a0)
		bpl.s	loc_2B752
		move.b	#3,$24(a0)
		addq.b	#1,$22(a0)
		andi.b	#3,$22(a0)

loc_2B752:
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

Obj_AIZSpikedLog:

		move.l	#Map_AIZSpikedLog,$C(a0)
		move.w	#$42E9,$A(a0)
		move.b	#$18,7(a0)
		move.b	#8,6(a0)
		move.b	#4,4(a0)
		move.w	#prio(4),8(a0)
		move.w	$14(a0),$30(a0)
		move.b	(Water_entered_counter).w,$36(a0)
		jsr	Create_New_Sprite3.w
		bne.w	loc_2B7AE
		move.l	#loc_2B8EE,(a1)
		move.b	#4,4(a1)
		move.b	#-$64,$28(a1)
		move.w	a0,$3C(a1)
		move.w	a1,$3C(a0)

loc_2B7AE:
		move.l	#loc_2B7B4,(a0)

loc_2B7B4:
		tst.b	$34(a0)
		bmi.s	loc_2B7E8
		move.b	$36(a0),d0
		cmp.b	(Water_entered_counter).w,d0
		beq.s	loc_2B7D2
		move.b	(Water_entered_counter).w,$36(a0)
		move.b	#-$7F,$34(a0)
		bra.s	loc_2B7E8
; ---------------------------------------------------------------------------

loc_2B7D2:
		move.b	$2A(a0),d0
		andi.b	#$18,d0
		bne.s	loc_2B7E8
		tst.b	$32(a0)
		beq.s	loc_2B81A
		subq.b	#4,$32(a0)
		bra.s	loc_2B81A
; ---------------------------------------------------------------------------

loc_2B7E8:

		tst.b	$34(a0)
		bne.s	loc_2B806

loc_2B7EE:
		move.b	$23(a0),$35(a0)
		move.b	#0,$23(a0)
		move.b	#0,$24(a0)
		move.b	#1,$34(a0)

loc_2B806:
		cmpi.b	#$40,$32(a0)
		beq.s	loc_2B814
		addq.b	#4,$32(a0)
		bra.s	loc_2B81A
; ---------------------------------------------------------------------------

loc_2B814:
		andi.b	#$7F,$34(a0)

loc_2B81A:

		move.b	$32(a0),d0

loc_2B81E:
		jsr	GetSineCosine.w
		asr.w	#5,d0
		add.w	$30(a0),d0
		move.w	d0,$14(a0)
		tst.b	$34(a0)
		beq.s	loc_2B864
		subq.b	#1,$24(a0)
		bpl.s	loc_2B896
		move.b	#3,$24(a0)
		subq.b	#1,$22(a0)
		andi.b	#$F,$22(a0)
		addq.b	#1,$23(a0)
		cmpi.b	#$10,$23(a0)
		blo.s	loc_2B896
		move.b	$35(a0),$23(a0)
		move.b	#0,$34(a0)

loc_2B862:
		bra.s	loc_2B896
; ---------------------------------------------------------------------------

loc_2B864:
		subq.b	#1,$24(a0)
		bpl.s	loc_2B896
		move.b	#$17,$24(a0)
		moveq	#0,d0
		move.b	$23(a0),d0
		addq.b	#1,$23(a0)
		move.b	byte_2B88E(pc,d0.w),$22(a0)
		move.b	byte_2B88F(pc,d0.w),d0
		bpl.s	loc_2B88C
		move.b	#0,$23(a0)

loc_2B88C:
		bra.s	loc_2B896
; ---------------------------------------------------------------------------
byte_2B88E:	dc.b 7
byte_2B88F:	dc.b 8
		dc.b 9
		dc.b $A
		dc.b 9
		dc.b 8
		dc.b $FF
		dc.b 0
; ---------------------------------------------------------------------------

loc_2B896:

		moveq	#0,d1
		move.b	7(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		move.w	$10(a0),d0
		andi.w	#-$80,d0
		sub.w	(Camera_X_pos_coarse_back).w,d0
		cmpi.w	#$280,d0
		bhi.w	loc_2B8CE
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_2B8CE:
		move.w	$3C(a0),d0
		beq.s	loc_2B8DC
		movea.w	d0,a1
		jsr	Delete_Referenced_Sprite.w

loc_2B8DC:
		move.w	respawn_addr(a0),d0
		beq.s	loc_2B8E8
		movea.w	d0,a2
		bclr	#7,(a2)

loc_2B8E8:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_2B8EE:
		movea.w	$3C(a0),a1
		move.w	$10(a1),$10(a0)
		move.w	$14(a1),$14(a0)
		moveq	#0,d0
		move.b	$22(a1),d0
		move.b	byte_2B918(pc,d0.w),d0
		beq.s	locret_2B916
		ext.w	d0
		add.w	d0,$14(a0)
		jmp	Add_SpriteToCollisionResponseList.w
; ---------------------------------------------------------------------------

locret_2B916:
		rts
; ---------------------------------------------------------------------------
byte_2B918:	dc.b $F4
		dc.b $F4
		dc.b 0
		dc.b 0
		dc.b 0
		dc.b 0
		dc.b 0
		dc.b $C
		dc.b $C
		dc.b $C
		dc.b 0
		dc.b 0
		dc.b 0
		dc.b 0
		dc.b 0
		dc.b $F4
; ---------------------------------------------------------------------------

Obj_StillSprite:

		move.l	#Map_StillSprites,$C(a0)
		ori.b	#4,4(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.b	d0,$22(a0)
		add.w	d0,d0
		move.w	d0,d1
		add.w	d0,d0
		add.w	d1,d0
		lea	word_2B968(pc,d0.w),a1
		move.w	(a1)+,$A(a0)
		move.w	(a1)+,8(a0)
		move.b	(a1)+,7(a0)
		move.b	(a1)+,6(a0)
		move.l	#loc_2B962,(a0)

loc_2B962:

		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------
word_2B968:	dc.w $42E9		; 0 AIZ2 Bridge Post
		dc.w prio(6)
		dc.b $C
		dc.b $C
		dc.w $42E9			; 1 AIZ2 Large Rope Twist Tie
		dc.w prio(6)
		dc.b $10
		dc.b 8
		dc.w $42E9			; 2 AIZ2 Rope Twist tie
		dc.w prio(6)
		dc.b 8
		dc.b 4
		dc.w $4001			; 3 AIZ2 Tie Top Sprite
		dc.w prio(6)
		dc.b 8
		dc.b 8
		dc.w $6001			; 4 AIZ2 Waterfall sprite
		dc.w prio(6)
		dc.b 8
		dc.b $20
		dc.w $C2E9			; 5 AIZ2 Bridge Post (Different Palette)
		dc.w prio(6)
		dc.b $C
		dc.b $C
		dc.w $C001			; 6 128x128 HCZ Waterfall
		dc.w prio(0)
		dc.b $40
		dc.b $40
		dc.w $C001			; 7 128x64 HCZ Waterfall
		dc.w prio(0)
		dc.b $40
		dc.b $20
		dc.w $4001			; 8 128x32 HCZ Waterfall
		dc.w prio(6)
		dc.b $40
		dc.b $10
		dc.w $C001			; 9 Stagger Down HCZ Waterfall
		dc.w prio(0)
		dc.b $40
		dc.b $40
		dc.w $C001			; A Stagger Up HCZ Waterfall
		dc.w prio(0)
		dc.b $40
		dc.b $60
		dc.w $4451			; B MGZ Signpost Left
		dc.w prio(6)
		dc.b $10
		dc.b $18
		dc.w $4451			; C MGZ Signpost Right
		dc.w prio(6)
		dc.b $10
		dc.b $18
		dc.w $4451			; D MGZ Signpost Up
		dc.w prio(6)
		dc.b $10
		dc.b $18
		dc.w $4451			; E MGZ Signpost Down
		dc.w prio(6)
		dc.b $10
		dc.b $18
		dc.w $C368			; F HCZ2 Tube Bend 1
		dc.w prio(0)
		dc.b 8
		dc.b $30
		dc.w $C379			; 10 HCZ2 Tube Bend 2
		dc.w prio(0)
		dc.b $30
		dc.b $18
		dc.w $C399			; 11 HCZ2 Tube Bend 3
		dc.w prio(0)
		dc.b $C
		dc.b $10
		dc.w $C3A4			; 12 HCZ2 Tube Crossover
		dc.w prio(0)
		dc.b $20
		dc.b $34
		dc.w $4038			; 13 HCZ2 Bridge Post
		dc.w prio(6)
		dc.b 4
		dc.b $10
		dc.w $440D			; 14 LBZ Cup Elevator Pole Top
		dc.w prio(6)
		dc.b 8
		dc.b 8
		dc.w $2433			; 15 LBZ Steel Girder Low Priority
		dc.w prio(6)
		dc.b $10
		dc.b $40
		dc.w $2433			; 16 LBZ Large Steel Girder
		dc.w prio(6)
		dc.b $10
		dc.b $80
		dc.w $2433			; 17 LBZ Steel Girder High Priority
		dc.w prio(1)
		dc.b $10
		dc.b $40
		dc.w $C357			; 18 MHZ Cliff Edge
		dc.w prio(1)
		dc.b 4
		dc.b $10
		dc.w $C357			; 19 MHZ Cliff Edge 2
		dc.w prio(1)
		dc.b 4
		dc.b $10
		dc.w $C357			; 1A MHZ Grass
		dc.w prio(1)
		dc.b $10
		dc.b 4
		dc.w $E40E			; 1B MHZ Wood Column Bottom
		dc.w prio(1)
		dc.b $10
		dc.b 8
		dc.w $E40E			; 1C MHZ Wood Column Top
		dc.w prio(1)
		dc.b $10
		dc.b 8
		dc.w $441E			; 1D MHZ Parachute Vines
		dc.w prio(4)
		dc.b $10
		dc.b 8
		dc.w $347			; 1E Diagonal Spring Pedestal
		dc.w prio(5)
		dc.b 8
		dc.b 8
		dc.w $C3A1			; 1F LRZ Horizontal Gear Rail Small (Unused)
		dc.w prio(3)
		dc.b $10
		dc.b 4
		dc.w $C3A1			; 20 LRZ Horizontal Gear Rail Medium (Unused)
		dc.w prio(3)
		dc.b $20
		dc.b 4
		dc.w $C3A1			; 21 LRZ Horizontal Gear Rail Large (Unused)
		dc.w prio(3)
		dc.b $30
		dc.b 4
		dc.w $C0D3			; 22 LRZ Foreground Rock Ceiling
		dc.w prio(1)
		dc.b $10
		dc.b $10
		dc.w $A3A1			; 23 LRZ Gear Rail Top
		dc.w prio(3)
		dc.b 4
		dc.b $10
		dc.w $A3A1			; 24 LRZ Gear Rail Small
		dc.w prio(3)
		dc.b 4
		dc.b $20
		dc.w $A3A1			; 25 LRZ Gear Rail Large
		dc.w prio(3)
		dc.b 4
		dc.b $40
		dc.w $A3A1			; 26 LRZ Gear Rail Bottom
		dc.w prio(3)
		dc.b 4
		dc.b $10
		dc.w $4379			; 27 FBZ Single Metal Hanger
		dc.w prio(1)
		dc.b 8
		dc.b $14
		dc.w $4379			; 28 FBZ Two Metal Hangers
		dc.w prio(1)
		dc.b $18
		dc.b $14
		dc.w $4379			; 29 FBZ Three Metal Hangers
		dc.w prio(1)
		dc.b $28
		dc.b $14
		dc.w $4379			; 2A FBZ Four Metal Hangers
		dc.w prio(1)
		dc.b $38
		dc.b $14
		dc.w $2443			; 2B Unknown?
		dc.w prio(6)
		dc.b 4
		dc.b $10
		dc.w $2339			; 2C FBZ2 Spider Rail
		dc.w prio(0)
		dc.b $40
		dc.b 4
		dc.w $2339			; 2D FBZ2 Spider Rail Low Priority
		dc.w prio(5)
		dc.b $40
		dc.b 4
		dc.w $C001			; 2E SOZ Indoor Sloped Edge
		dc.w prio(2)
		dc.b $10
		dc.b 8
		dc.w $3AF			; 2F SOZ2 Sand Cork Holder
		dc.w prio(0)
		dc.b $10
		dc.b 4
		dc.w $23FF			; 30 DEZ Horizontal Beam Platform Shooter
		dc.w prio(5)
		dc.b 8
		dc.b $C
		dc.w $23FF			; 31 DEZ Vertical Beam Platform Shooter
		dc.w prio(5)
		dc.b $C
		dc.b 8
		dc.w $2385			; 32 DEZ Light Tunnel Post
		dc.w prio(1)
		dc.b $10
		dc.b $24
Map_StillSprites:include "Levels/Misc/Map - Still Sprites.asm"

; ---------------------------------------------------------------------------

Obj_AnimatedStillSprite:

		move.l	#Map_AnimatedStillSprites,$C(a0)
		ori.b	#4,4(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.b	d0,$20(a0)
		add.w	d0,d0
		move.w	d0,d1
		add.w	d0,d0
		add.w	d1,d0
		lea	word_2BF6C(pc,d0.w),a1
		move.w	(a1)+,$A(a0)
		move.w	(a1)+,8(a0)
		move.b	(a1)+,7(a0)
		move.b	(a1)+,6(a0)
		move.l	#loc_2BF5A,(a0)

loc_2BF5A:
		lea	(Ani_AnimatedStillSprites).l,a1
		jsr	Animate_Sprite.w
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------
word_2BF6C:	dc.w $62E9, prio(6)
		dc.b 8, $C
		dc.w $62E9, prio(6)
		dc.b 8, $C
		dc.w $C0D3, prio(4)
		dc.b $10, 4
		dc.w $240D, prio(6)
		dc.b $10, 4
		dc.w $440F, prio(6)
		dc.b 4, 4
		dc.w $440F, prio(6)
		dc.b $14, 4
		dc.w $440F, prio(6)
		dc.b $34, 4
		dc.w $440F, prio(6)
		dc.b $54, 4
Ani_AnimatedStillSprites:	include "Levels/Misc/Anim - Animated Still Sprites.asm"

Map_AnimatedStillSprites:include "Levels/Misc/Map - Animated Still Sprites.asm"

; ---------------------------------------------------------------------------

Obj_AIZForegroundPlant:

		move.l	#Map_AIZForegroundPlant,$C(a0)
		ori.b	#4,4(a0)
		move.w	$10(a0),$30(a0)
		move.w	$14(a0),$32(a0)
		move.b	$2C(a0),d0
		andi.w	#$F,d0
		move.b	d0,$22(a0)
		add.w	d0,d0
		move.w	d0,d1
		add.w	d0,d0
		add.w	d1,d0
		lea	word_2C242(pc,d0.w),a1
		move.w	(a1)+,$A(a0)
		move.w	(a1)+,8(a0)
		move.b	(a1)+,7(a0)
		move.b	(a1)+,6(a0)
		move.b	$2C(a0),d0
		lsr.w	#2,d0
		andi.w	#$3C,d0
		move.l	off_2C24E(pc,d0.w),(a0)
		rts
; ---------------------------------------------------------------------------
word_2C242:	dc.w $C333
		dc.w prio(0)
		dc.b $20
		dc.b $30
		dc.w $C333
		dc.w prio(0)
		dc.b $20
		dc.b $3C
off_2C24E:	dc.l loc_2C26A
		dc.l loc_2C270
		dc.l loc_2C2A6
		dc.l loc_2C2DC
		dc.l loc_2C312
		dc.l loc_2C348
		dc.l loc_2C37A
; ---------------------------------------------------------------------------

loc_2C26A:
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_2C270:
		move.w	$30(a0),d1
		move.w	d1,d2
		subi.w	#$A0,d1
		sub.w	(Camera_X_pos).w,d1
		asr.w	#4,d1
		add.w	d2,d1
		move.w	d1,$10(a0)
		move.w	$32(a0),d1
		move.w	d1,d2
		subi.w	#$70,d1
		sub.w	(Camera_Y_pos).w,d1
		asr.w	#4,d1
		add.w	d2,d1
		move.w	d1,$14(a0)
		move.w	$30(a0),d0
		jmp	Sprite_OnScreen_Test2.w
; ---------------------------------------------------------------------------

loc_2C2A6:
		move.w	$30(a0),d1
		move.w	d1,d2
		subi.w	#$A0,d1
		sub.w	(Camera_X_pos).w,d1
		asr.w	#3,d1
		add.w	d2,d1
		move.w	d1,$10(a0)
		move.w	$32(a0),d1
		move.w	d1,d2
		subi.w	#$70,d1
		sub.w	(Camera_Y_pos).w,d1
		asr.w	#3,d1
		add.w	d2,d1
		move.w	d1,$14(a0)
		move.w	$30(a0),d0
		jmp	Sprite_OnScreen_Test2.w
; ---------------------------------------------------------------------------

loc_2C2DC:
		move.w	$30(a0),d1
		move.w	d1,d2
		subi.w	#$A0,d1
		sub.w	(Camera_X_pos).w,d1
		asr.w	#2,d1
		add.w	d2,d1
		move.w	d1,$10(a0)
		move.w	$32(a0),d1
		move.w	d1,d2
		subi.w	#$70,d1
		sub.w	(Camera_Y_pos).w,d1
		asr.w	#2,d1
		add.w	d2,d1
		move.w	d1,$14(a0)
		move.w	$30(a0),d0
		jmp	Sprite_OnScreen_Test2.w
; ---------------------------------------------------------------------------

loc_2C312:
		move.w	$30(a0),d1
		move.w	d1,d2
		subi.w	#$A0,d1
		sub.w	(Camera_X_pos).w,d1
		asr.w	#1,d1
		add.w	d2,d1
		move.w	d1,$10(a0)
		move.w	$32(a0),d1
		move.w	d1,d2
		subi.w	#$70,d1
		sub.w	(Camera_Y_pos).w,d1
		asr.w	#1,d1
		add.w	d2,d1
		move.w	d1,$14(a0)
		move.w	$30(a0),d0
		jmp	Sprite_OnScreen_Test2.w
; ---------------------------------------------------------------------------

loc_2C348:
		move.w	$30(a0),d1
		move.w	d1,d2
		subi.w	#$A0,d1
		sub.w	(Camera_X_pos).w,d1
		add.w	d2,d1
		move.w	d1,$10(a0)
		move.w	$32(a0),d1
		move.w	d1,d2
		subi.w	#$70,d1
		sub.w	(Camera_Y_pos).w,d1
		add.w	d2,d1
		move.w	d1,$14(a0)
		move.w	$30(a0),d0
		jmp	Sprite_OnScreen_Test2.w
; ---------------------------------------------------------------------------

loc_2C37A:
		move.w	$30(a0),d1
		move.w	d1,d2
		subi.w	#$A0,d1
		sub.w	(Camera_X_pos).w,d1
		add.w	d1,d1
		add.w	d2,d1
		move.w	d1,$10(a0)
		move.w	$32(a0),d1
		move.w	d1,d2
		subi.w	#$70,d1
		sub.w	(Camera_Y_pos).w,d1
		add.w	d2,d1
		move.w	d1,$14(a0)
		move.w	$30(a0),d0
		jmp	Sprite_OnScreen_Test2.w
; ---------------------------------------------------------------------------

Obj_31_1:
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	d0,$32(a0)
		neg.w	d0
		move.w	d0,$30(a0)
		move.b	#$80,7(a0)
		move.l	#loc_2C3CA,(a0)

loc_2C3CA:
		lea	(Player_1).w,a1
		lea	(__u_F7B0).w,a2
		moveq	#3,d6
		bsr.s	sub_2C3E8
		lea	(Player_2).w,a1
		lea	(__u_F7B0+$1).w,a2
		moveq	#4,d6			; NAT: FUCK SANIC TEEM
		pea	Delete_Sprite_If_Not_In_Range.w

; =============== S U B R O U T I N E =======================================


sub_2C3E8:
		btst	d6,$2A(a0)
		bne.w	loc_2C46E
		cmpi.b	#6,5(a1)
		bhs.s	locret_2C46C+2
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		cmp.w	$30(a0),d0
		blt.s	locret_2C46C
		cmp.w	$32(a0),d0
		bge.s	locret_2C46C

loc_2C404:
		move.w	$14(a1),d0
		sub.w	$14(a0),d0
		addi.w	#$53,d0
		cmpi.w	#$A6,d0
		bhs.s	locret_2C46C
		cmpi.w	#$53,d0
		bhs.s	loc_2C424
		tst.w	$1A(a1)
		bmi.s	locret_2C46C
		bra.s	loc_2C42C
; ---------------------------------------------------------------------------

loc_2C424:
		cmpi.w	#$38,$1A(a1)
		bgt.s	locret_2C46C

loc_2C42C:
		tst.b	(Debug_On).w
		bne.s	locret_2C46C
		cmpi.w	#8,d0
		bhs.s	loc_2C444
		move.b	#-$7F,(a2)

loc_2C444:
		cmpi.w	#$9E,d0
		blo.s	loc_2C44E
		move.b	#1,(a2)

loc_2C44E:
		jsr	RideObject_SetRide.w
		tst.b	jumping(a1)		; NAT: Check if player was bounced back up
		bne.s	locret_2C46C		; if so, do not set animation

		move.b	#$80,$2D(a1)
		move.w	#1,$20(a1)
		tst.w	$1C(a1)
		bne.s	locret_2C46C
		move.w	#1,$1C(a1)

locret_2C46C:
		rts
		cmpi.b	#8,5(a1)
		blo.s	locret_2C46C
		cmp.w	#Player_1,a1		; check if this is p1
		beq.s	.sonic			; if no, bra
		move.b	(__u_F7B0).w,(a2)	; copy angle from p1
		rts

.sonic		move.b	(__u_F7B0+$1).w,(a2)	; copy angle from p2
		rts
; ---------------------------------------------------------------------------

loc_2C46E:
		btst	#1,$2A(a1)
		bne.s	loc_2C4A8
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		cmp.w	$30(a0),d0
		blt.s	loc_2C48A
		cmp.w	$32(a0),d0
		blt.s	loc_2C4BA

loc_2C48A:

		bclr	#3,$2A(a1)
		bclr	d6,$2A(a0)
		clr.b	$30(a1)
		move.b	#4,$31(a1)
		bset	#1,$2A(a1)
	;	clr.b	(a2)			; NAT: make sure no snapping
		rts
; ---------------------------------------------------------------------------

loc_2C4A8:
		move.w	$14(a1),d0
		sub.w	$14(a0),d0
		bmi.s	loc_2C48A
		move.w	#$400,$1A(a1)
		bra.s	loc_2C48A
; ---------------------------------------------------------------------------

loc_2C4BA:
		btst	#3,$2A(a1)
		beq.s	locret_2C46C
		move.b	(a2),d0
		jsr	GetSineCosine.w
		moveq	#0,d2
		move.b	$1E(a1),d2
		lsl.w	#8,d2
		addi.w	#$4000,d2
		muls.w	d2,d1
		swap	d1
		add.w	$14(a0),d1
		move.w	d1,$14(a1)
		move.b	(a2),d0
		addi.b	#$80,d0
		move.b	d0,$27(a1)
		addq.b	#2,(a2)
		move.b	#$80,$2D(a1)
		tst.w	$1C(a1)
		bne.s	loc_2C506
		move.w	#1,$1C(a1)
		move.b	#-$7F,$2D(a1)

loc_2C506:
		bset	#7,$A(a1)
		tst.b	d0
		bpl.s	locret_2C516
		bclr	#7,$A(a1)

locret_2C516:
		rts
; End of function sub_2C3E8

; ---------------------------------------------------------------------------

Obj_Button:
		move.l	#Map_Button,$C(a0)
		move.w	#$456,$A(a0)
		cmpi.b	#1,(Current_zone).w
		bne.s	loc_2C544
		move.l	#Map_Button2,$C(a0)
		move.w	#$2426,$A(a0)

loc_2C544:
		cmpi.b	#3,(Current_zone).w
		bne.s	loc_2C55A
		move.l	#Map_CNZButton,$C(a0)
		move.w	#$441A,$A(a0)

loc_2C55A:
		cmpi.b	#4,(Current_zone).w
		bne.s	loc_2C568
		move.w	#$500,$A(a0)

loc_2C568:
		cmpi.b	#9,(Current_zone).w
		bne.s	loc_2C58A
		move.l	#Map_LRZButton,$C(a0)
		move.w	#$63A1,$A(a0)
		tst.b	(Current_act).w
		beq.s	loc_2C58A
		move.w	#$2429,$A(a0)

loc_2C58A:
		move.b	#4,4(a0)
		move.b	#$10,7(a0)
		move.b	#8,6(a0)
		move.w	#prio(4),8(a0)
		addq.w	#4,$14(a0)
		btst	#5,$2C(a0)
		beq.s	loc_2C5B8
		move.l	#loc_2C62C,(a0)
		bra.w	loc_2C62C
; ---------------------------------------------------------------------------

loc_2C5B8:
		move.l	#loc_2C5BE,(a0)

loc_2C5BE:
		tst.b	4(a0)
		bpl.s	loc_2C626
		move.w	#$1B,d1
		move.w	#4,d2
		move.w	#5,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		move.b	#0,$22(a0)
		move.b	$2C(a0),d0
		andi.w	#$F,d0
		lea	(Level_trigger_array).w,a3

loc_2C5EC:
		lea	(a3,d0.w),a3
		moveq	#0,d3
		btst	#6,$2C(a0)
		beq.s	loc_2C5FC
		moveq	#7,d3

loc_2C5FC:
		move.b	$2A(a0),d0
		andi.b	#$18,d0

loc_2C604:
		bne.s	loc_2C612
		btst	#4,$2C(a0)
		bne.s	loc_2C626
		bclr	d3,(a3)
		bra.s	loc_2C626
; ---------------------------------------------------------------------------

loc_2C612:
		tst.b	(a3)
		bne.s	loc_2C61E
		moveq	#$5B,d0
		jsr	Play_Sound_2.w

loc_2C61E:
		bset	d3,(a3)
		move.b	#1,$22(a0)

loc_2C626:
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_2C62C:
		move.w	#$10,d1
		move.w	#6,d3
		move.w	$10(a0),d4
		jsr	SolidObjectTop.w
		move.b	#0,$22(a0)
		move.b	$2C(a0),d0
		andi.w	#$F,d0
		lea	(Level_trigger_array).w,a3
		lea	(a3,d0.w),a3
		moveq	#0,d3
		btst	#6,$2C(a0)
		beq.s	loc_2C666
		moveq	#7,d3

loc_2C666:
		move.b	$2A(a0),d0
		andi.b	#$18,d0
		bne.s	loc_2C67C
		btst	#4,$2C(a0)
		bne.s	loc_2C690
		bclr	d3,(a3)
		bra.s	loc_2C690
; ---------------------------------------------------------------------------

loc_2C67C:
		tst.b	(a3)
		bne.s	loc_2C688
		moveq	#$5B,d0
		jsr	Play_Sound_2.w

loc_2C688:
		bset	d3,(a3)
		move.b	#1,$22(a0)

loc_2C690:
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------
Map_Button:	include "General/Sprites/Buttons/Map - Button.asm"

Map_LRZButton:	include "Levels/LRZ/Misc Object Data/Map - Button.asm"

; ---------------------------------------------------------------------------

Obj_Animal:

		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_2C786(pc,d0.w),d1
		jmp	off_2C786(pc,d1.w)
; ---------------------------------------------------------------------------
off_2C786:	dc.w loc_2C8B8-off_2C786

		dc.w loc_2C9E0-off_2C786
		dc.w loc_2CA3C-off_2C786
		dc.w loc_2CA7C-off_2C786
		dc.w loc_2CA3C-off_2C786
		dc.w loc_2CA3C-off_2C786
		dc.w loc_2CA3C-off_2C786
		dc.w loc_2CA7C-off_2C786
		dc.w loc_2CA3C-off_2C786
		dc.w loc_2CA7C-off_2C786
		dc.w loc_2CA3C-off_2C786
		dc.w loc_2CA3C-off_2C786
		dc.w loc_2CA3C-off_2C786
		dc.w loc_2CA3C-off_2C786
		dc.w loc_2CB02-off_2C786
		dc.w loc_2CB24-off_2C786
		dc.w loc_2CB24-off_2C786
		dc.w loc_2CB44-off_2C786
		dc.w loc_2CB80-off_2C786
		dc.w loc_2CBDC-off_2C786
		dc.w loc_2CBFC-off_2C786
		dc.w loc_2CBDC-off_2C786
		dc.w loc_2CBFC-off_2C786
		dc.w loc_2CBDC-off_2C786
		dc.w loc_2CC3C-off_2C786
		dc.w loc_2CB9C-off_2C786
byte_2C7BA:	dc.b 5

		dc.b 1
		dc.b 0
		dc.b 3
		dc.b 5
		dc.b 1
		dc.b 0
		dc.b 5
		dc.b 6
		dc.b 5
		dc.b 2
		dc.b 3
		dc.b 5
		dc.b 1
		dc.b 6
		dc.b 1
		dc.b 0
		dc.b 1
		dc.b 5
		dc.b 1
		dc.b 0
		dc.b 5
		dc.b 6
		dc.b 1
		dc.b 6
		dc.b 5
		dc.b 5
		dc.b 1
		dc.b 5
		dc.b 1
		dc.b 5
		dc.b 1
		dc.b 5
		dc.b 1
		dc.b 5
		dc.b 1
		dc.b 5
		dc.b 1
		dc.b 5
		dc.b 1
		dc.b 5
		dc.b 1
		dc.b 5
		dc.b 1
		dc.b 5
		dc.b 1
		dc.b 5
		dc.b 1
word_2C7EA:	dc.w $FE00

		dc.w $FC00
		dc.l Map_Animals5
		dc.w $FE00
		dc.w $FD00
		dc.l Map_Animals1
		dc.w $FE80
		dc.w $FD00
		dc.l Map_Animals5
		dc.w $FEC0
		dc.w $FE80
		dc.l Map_Animals4
		dc.w $FE40
		dc.w $FD00
		dc.l Map_Animals3
		dc.w $FD00
		dc.w $FC00
		dc.l Map_Animals1
		dc.w $FD80
		dc.w $FC80
		dc.l Map_Animals2
		dc.w $FD80
		dc.w $FD00
		dc.l Map_Animals1
		dc.w $FE00
		dc.w $FC80
		dc.l Map_Animals2
		dc.w $FD40
		dc.w $FD00
		dc.l Map_Animals2
		dc.w $FEC0
		dc.w $FE00
		dc.l Map_Animals2
		dc.w $FE00
		dc.w $FD00
		dc.l Map_Animals2
word_2C84A:	dc.w $FBC0, $FC00
		dc.w $FBC0, $FC00
		dc.w $FBC0, $FC00
		dc.w $FD00, $FC00
		dc.w $FD00, $FC00
		dc.w $FE80, $FD00
		dc.w $FE80, $FD00
		dc.w $FEC0, $FE80
		dc.w $FE40, $FD00
		dc.w $FE00, $FD00
		dc.w $FD80, $FC80
off_2C876:	dc.l Map_Animals1
		dc.l Map_Animals1
		dc.l Map_Animals1
		dc.l Map_Animals5
		dc.l Map_Animals5
		dc.l Map_Animals5
		dc.l Map_Animals5
		dc.l Map_Animals4
		dc.l Map_Animals3
		dc.l Map_Animals1
		dc.l Map_Animals2
word_2C8A2:	dc.w $5A5
		dc.w $5A5
		dc.w $5A5
		dc.w $553
		dc.w $553
		dc.w $573
		dc.w $573
		dc.w $585
		dc.w $593
		dc.w $565
		dc.w $5B3
; ---------------------------------------------------------------------------

loc_2C8B8:
		tst.b	$2C(a0)
		beq.w	loc_2C924
		moveq	#0,d0
		move.b	$2C(a0),d0
		add.w	d0,d0
		move.b	d0,5(a0)
		subi.w	#$14,d0
		move.w	word_2C8A2(pc,d0.w),$A(a0)
		add.w	d0,d0
		move.l	off_2C876(pc,d0.w),$C(a0)
		lea	word_2C84A(pc),a1
		move.w	(a1,d0.w),$32(a0)
		move.w	(a1,d0.w),$18(a0)
		move.w	2(a1,d0.w),$34(a0)
		move.w	2(a1,d0.w),$1A(a0)
		move.b	#$C,$1E(a0)
		move.b	#4,4(a0)
		bset	#0,4(a0)
		move.w	#prio(6),8(a0)
		move.b	#8,7(a0)
		move.b	#7,$24(a0)
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_2C924:
		addq.b	#2,5(a0)
		jsr	Random_Number.w
		move.w	#$580,$A(a0)
		andi.w	#1,d0
		beq.s	loc_2C940
		move.w	#$592,$A(a0)

loc_2C940:
		moveq	#0,d1
		move.b	(Current_zone).w,d1
		add.w	d1,d1
		add.w	d0,d1
		lea	byte_2C7BA(pc),a1
		move.b	(a1,d1.w),d0
		move.b	d0,$30(a0)
		lsl.w	#3,d0
		lea	word_2C7EA(pc),a1
		adda.w	d0,a1
		move.w	(a1)+,$32(a0)
		move.w	(a1)+,$34(a0)
		move.l	(a1)+,$C(a0)
		move.b	#$C,$1E(a0)
		move.b	#4,4(a0)
		bset	#0,4(a0)
		move.w	#prio(6),8(a0)
		move.b	#8,7(a0)
		move.b	#7,$24(a0)
		move.b	#2,$22(a0)
		move.w	#-$400,$1A(a0)
		tst.b	$38(a0)
		bne.s	loc_2C9CA


loc_2C9C4:
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_2C9CA:
		move.b	#$1C,5(a0)
		clr.w	$18(a0)
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_2C9DA:

		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_2C9E0:
		tst.b	4(a0)
		bpl.s	loc_2C9DA
		jsr	MoveSprite.w
		tst.w	$1A(a0)
		bmi.s	loc_2CA36
		jsr	ObjCheckFloorDist.w
		tst.w	d1
		bpl.s	loc_2CA36
		add.w	d1,$14(a0)
		move.w	$32(a0),$18(a0)
		move.w	$34(a0),$1A(a0)
		move.b	#1,$22(a0)
		move.b	$30(a0),d0
		add.b	d0,d0
		addq.b	#4,d0
		move.b	d0,5(a0)
		tst.b	$38(a0)
		beq.s	loc_2CA36
		btst	#4,(V_int_run_count+3).w
		beq.s	loc_2CA36
		neg.w	$18(a0)
		bchg	#0,4(a0)

loc_2CA36:

		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_2CA3C:

		jsr	MoveSprite.w
		move.b	#1,$22(a0)
		tst.w	$1A(a0)
		bmi.s	loc_2CA68
		move.b	#0,$22(a0)
		jsr	ObjCheckFloorDist.w
		tst.w	d1
		bpl.s	loc_2CA68
		add.w	d1,$14(a0)
		move.w	$34(a0),$1A(a0)

loc_2CA68:

		tst.b	$2C(a0)
		bne.s	loc_2CAE4
		tst.b	4(a0)
		bpl.w	loc_2C9DA
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_2CA7C:

		jsr	MoveSprite2.w
		addi.w	#$18,$1A(a0)
		tst.w	$1A(a0)
		bmi.s	loc_2CABA
		jsr	ObjCheckFloorDist.w
		tst.w	d1
		bpl.s	loc_2CABA
		add.w	d1,$14(a0)
		move.w	$34(a0),$1A(a0)
		tst.b	$2C(a0)
		beq.s	loc_2CABA
		cmpi.b	#$A,$2C(a0)
		beq.s	loc_2CABA
		neg.w	$18(a0)
		bchg	#0,4(a0)

loc_2CABA:

		subq.b	#1,$24(a0)
		bpl.s	loc_2CAD0
		move.b	#1,$24(a0)
		addq.b	#1,$22(a0)
		andi.b	#1,$22(a0)

loc_2CAD0:
		tst.b	$2C(a0)
		bne.s	loc_2CAE4
		tst.b	4(a0)
		bpl.w	loc_2C9DA
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_2CAE4:

		move.w	$10(a0),d0
		sub.w	(Player_1+x_pos).w,d0
		bcs.s	loc_2CAFC
		subi.w	#$180,d0
		bpl.s	loc_2CAFC
		tst.b	4(a0)
		bpl.w	loc_2C9DA

loc_2CAFC:

		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_2CB02:
		tst.b	4(a0)
		bpl.w	loc_2C9DA
		subq.w	#1,$36(a0)
		bne.w	loc_2CB1E
		move.b	#2,5(a0)
		move.w	#prio(1),8(a0)

loc_2CB1E:
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_2CB24:
		bsr.w	sub_2CCD2
		bcc.s	loc_2CB40
		move.w	$32(a0),$18(a0)
		move.w	$34(a0),$1A(a0)
		move.b	#$E,5(a0)
		bra.w	loc_2CA7C
; ---------------------------------------------------------------------------

loc_2CB40:
		bra.w	loc_2CAE4
; ---------------------------------------------------------------------------

loc_2CB44:
		bsr.w	sub_2CCD2
		bpl.s	loc_2CB7C
		clr.w	$18(a0)
		clr.w	$32(a0)
		jsr	MoveSprite2.w
		addi.w	#$18,$1A(a0)
		bsr.w	sub_2CC92
		bsr.w	sub_2CCBA
		subq.b	#1,$24(a0)
		bpl.s	loc_2CB7C
		move.b	#1,$24(a0)
		addq.b	#1,$22(a0)
		andi.b	#1,$22(a0)

loc_2CB7C:

		bra.w	loc_2CAE4
; ---------------------------------------------------------------------------

loc_2CB80:
		bsr.w	sub_2CCD2
		bpl.s	loc_2CBD8
		move.w	$32(a0),$18(a0)
		move.w	$34(a0),$1A(a0)
		move.b	#4,5(a0)
		bra.w	loc_2CA3C
; ---------------------------------------------------------------------------

loc_2CB9C:
		jsr	MoveSprite.w
		move.b	#1,$22(a0)
		tst.w	$1A(a0)
		bmi.s	loc_2CBD8
		move.b	#0,$22(a0)
		jsr	ObjCheckFloorDist.w
		tst.w	d1
		bpl.s	loc_2CBD8
		not.b	$2D(a0)
		bne.s	loc_2CBCE
		neg.w	$18(a0)
		bchg	#0,4(a0)

loc_2CBCE:
		add.w	d1,$14(a0)
		move.w	$34(a0),$1A(a0)

loc_2CBD8:

		bra.w	loc_2CAE4
; ---------------------------------------------------------------------------

loc_2CBDC:
		bsr.w	sub_2CCD2
		bpl.s	loc_2CBF8
		clr.w	$18(a0)
		clr.w	$32(a0)
		jsr	MoveSprite.w
		bsr.w	sub_2CC92
		bsr.w	sub_2CCBA

loc_2CBF8:
		bra.w	loc_2CAE4
; ---------------------------------------------------------------------------

loc_2CBFC:
		bsr.w	sub_2CCD2
		bpl.s	loc_2CC38
		jsr	MoveSprite.w
		move.b	#1,$22(a0)
		tst.w	$1A(a0)
		bmi.s	loc_2CC38
		move.b	#0,$22(a0)
		jsr	ObjCheckFloorDist.w
		tst.w	d1
		bpl.s	loc_2CC38
		neg.w	$18(a0)
		bchg	#0,4(a0)
		add.w	d1,$14(a0)
		move.w	$34(a0),$1A(a0)

loc_2CC38:

		bra.w	loc_2CAE4
; ---------------------------------------------------------------------------

loc_2CC3C:
		bsr.w	sub_2CCD2
		bpl.s	loc_2CC8E
		jsr	MoveSprite2.w
		addi.w	#$18,$1A(a0)
		tst.w	$1A(a0)
		bmi.s	loc_2CC78
		jsr	ObjCheckFloorDist.w
		tst.w	d1
		bpl.s	loc_2CC78
		not.b	$2D(a0)
		bne.s	loc_2CC6E
		neg.w	$18(a0)
		bchg	#0,4(a0)

loc_2CC6E:
		add.w	d1,$14(a0)
		move.w	$34(a0),$1A(a0)

loc_2CC78:

		subq.b	#1,$24(a0)
		bpl.s	loc_2CC8E
		move.b	#1,$24(a0)

loc_2CC84:
		addq.b	#1,$22(a0)
		andi.b	#1,$22(a0)

loc_2CC8E:

		bra.w	loc_2CAE4

; =============== S U B R O U T I N E =======================================


sub_2CC92:

		move.b	#1,$22(a0)
		tst.w	$1A(a0)
		bmi.s	locret_2CCB8
		move.b	#0,$22(a0)
		jsr	ObjCheckFloorDist.w
		tst.w	d1
		bpl.s	locret_2CCB8
		add.w	d1,$14(a0)
		move.w	$34(a0),$1A(a0)

locret_2CCB8:

		rts
; End of function sub_2CC92


; =============== S U B R O U T I N E =======================================


sub_2CCBA:

		bset	#0,4(a0)
		move.w	$10(a0),d0
		sub.w	(Player_1+x_pos).w,d0
		bcc.s	locret_2CCD0
		bclr	#0,4(a0)

locret_2CCD0:
		rts
; End of function sub_2CCBA


; =============== S U B R O U T I N E =======================================


sub_2CCD2:

		move.w	(Player_1+x_pos).w,d0
		sub.w	$10(a0),d0
		subi.w	#$B8,d0
		rts
; End of function sub_2CCD2

; ---------------------------------------------------------------------------
ChildObjDat_2CD36:dc.w 3
		dc.l loc_2CD3C
; ---------------------------------------------------------------------------

Obj_EnemyScore:
Obj_Difficulty_2CD26:
loc_2CD3C:
		jmp	Delete_Current_Sprite.w

; ---------------------------------------------------------------------------
word_2CD5E:	dc.w	$C0,   $A0
		dc.w	$A8,   $C8
		dc.w	$D0,   $B8
		dc.w	$D8,   $D0
; ---------------------------------------------------------------------------

loc_2CD6E:
		subq.w	#1,$2E(a0)
		bpl.s	loc_2CD7A
		move.l	#loc_2CD84,(a0)

loc_2CD7A:
		bsr.w	sub_2CEA2
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_2CD84:
		bsr.w	sub_2CEA2
		jsr	Swing_UpAndDown.w
		jsr	MoveSprite2.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

Obj_Difficulty_2CD9A:
		lea	ChildObjDat_2CDAA(pc),a2
		jsr	CreateChild6_Simple.w
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------
ChildObjDat_2CDAA:dc.w 3
		dc.l loc_2CDB0
; ---------------------------------------------------------------------------

loc_2CDB0:
		move.l	#loc_2CDEA,(a0)
		move.l	#Map_Animals2,$C(a0)
		move.w	#$22CF,$A(a0)
		bset	#0,4(a0)
		lea	word_2CDDA(pc),a1
		bsr.w	sub_2CE76
		move.w	$14(a0),$3A(a0)
		rts
; ---------------------------------------------------------------------------
word_2CDDA:	dc.w $160, $130
		dc.w $180, $120
		dc.w $1A0, $128
		dc.w $178, $138
; ---------------------------------------------------------------------------

loc_2CDEA:

		jsr	MoveSprite.w
		move.b	#1,$22(a0)
		tst.w	$1A(a0)
		bmi.s	loc_2CE26
		move.b	#0,$22(a0)
		move.w	$14(a0),d0
		cmp.w	$3A(a0),d0
		blo.s	loc_2CE26
		move.w	$3A(a0),$14(a0)
		jsr	Random_Number.w
		andi.w	#$1FF,d0
		addi.w	#$100,d0
		neg.w	d0
		move.w	d0,$1A(a0)

loc_2CE26:

		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

Obj_Difficulty_2CE2C:
		lea	ChildObjDat_2CE3C(pc),a2
		jsr	CreateChild6_Simple.w
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------
ChildObjDat_2CE3C:dc.w 3
		dc.l loc_2CE42
; ---------------------------------------------------------------------------

loc_2CE42:
		move.l	#loc_2CDEA,(a0)
		move.l	#Map_Animals5,$C(a0)
		move.w	#$22E1,$A(a0)
		lea	word_2CE66(pc),a1
		bsr.w	sub_2CE76
		move.w	$14(a0),$3A(a0)
		rts
; ---------------------------------------------------------------------------
word_2CE66:	dc.w $C0, $110
		dc.w $A8, $128
		dc.w $C0, $130
		dc.w $D8, $138

; =============== S U B R O U T I N E =======================================


sub_2CE76:

		moveq	#0,d0
		move.b	$2C(a0),d0
		add.w	d0,d0
		adda.w	d0,a1
		move.w	(a1)+,$10(a0)
		move.w	(a1)+,$14(a0)
		add.w	d0,d0
		move.w	d0,$2E(a0)
		move.b	#$10,7(a0)
		move.b	#$10,6(a0)
		move.w	#prio(4),8(a0)
		rts
; End of function sub_2CE76


; =============== S U B R O U T I N E =======================================


sub_2CEA2:

		subq.b	#1,$24(a0)
		bpl.s	locret_2CEB8
		move.b	#2,$24(a0)
		addq.b	#1,$22(a0)
		andi.b	#1,$22(a0)

locret_2CEB8:
		rts
; End of function sub_2CEA2

; ---------------------------------------------------------------------------
Map_Animals1:;	include "General/Sprites/Animals/Map - Animals 1.asm"

Map_Animals2:;	include "General/Sprites/Animals/Map - Animals 2.asm"

Map_Animals3:;	include "General/Sprites/Animals/Map - Animals 3.asm"

Map_Animals4:;	include "General/Sprites/Animals/Map - Animals 4.asm"

Map_Animals5:;	include "General/Sprites/Animals/Map - Animals 5.asm"

Map_EnemyScore:	;include "General/Sprites/Enemy Misc/Map - Enemy Points.asm"

; ---------------------------------------------------------------------------

Obj_StarPost:
		jmp	Delete_Current_Sprite.w
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_2CFB6(pc,d0.w),d1
		jmp	off_2CFB6(pc,d1.w)
; ---------------------------------------------------------------------------
off_2CFB6:	dc.w loc_2CFC0-off_2CFB6

		dc.w loc_2D012-off_2CFB6
		dc.w loc_2D0F8-off_2CFB6
		dc.w loc_2D10A-off_2CFB6
		dc.w loc_2D47E-off_2CFB6
; ---------------------------------------------------------------------------

loc_2CFC0:
		addq.b	#2,5(a0)
		move.l	#Map_StarPost,$C(a0)
		move.w	#$5EC,$A(a0)
		move.b	#4,4(a0)
		move.b	#8,7(a0)
		move.b	#$28,6(a0)
		move.w	#prio(5),8(a0)
		movea.w	respawn_addr(a0),a2
		btst	#0,(a2)
		bne.s	loc_2D008
		move.b	(Last_star_post_hit).w,d1
		andi.b	#$7F,d1
		move.b	$2C(a0),d2
		andi.b	#$7F,d2
		cmp.b	d2,d1
		blo.s	loc_2D012

loc_2D008:
		bset	#0,(a2)
		move.b	#2,$20(a0)

loc_2D012:

		tst.b	(Debug_On).w
		bne.w	loc_2D0F8
		lea	(Player_1).w,a3
		move.b	(Last_star_post_hit).w,d1
		bsr.s	sub_2D028
		bra.w	loc_2D0F8

; =============== S U B R O U T I N E =======================================


sub_2D028:
		andi.b	#$7F,d1
		move.b	$2C(a0),d2
		andi.b	#$7F,d2
		cmp.b	d2,d1
		bhs.w	loc_2D0EA
		move.w	$10(a3),d0
		sub.w	$10(a0),d0
		addi.w	#8,d0
		cmpi.w	#$10,d0
		bhs.w	locret_2D0E8
		move.w	$14(a3),d0
		sub.w	$14(a0),d0
		addi.w	#$40,d0
		cmpi.w	#$68,d0
		bhs.w	locret_2D0E8
		moveq	#$63,d0
		jsr	Play_Sound_2.w
		jsr	Create_New_Sprite.w
		bne.s	loc_2D0D0
		move.l	#Obj_StarPost,(a1)
		move.b	#6,5(a1)
		move.w	$10(a0),$30(a1)
		move.w	$14(a0),$32(a1)
		subi.w	#$14,$32(a1)
		move.l	$C(a0),$C(a1)
		move.w	$A(a0),$A(a1)
		move.b	#4,4(a1)
		move.b	#8,7(a1)
		move.b	#8,6(a1)
		move.w	#prio(4),8(a1)
		move.b	#2,$22(a1)
		move.w	#$20,$36(a1)
		move.w	a0,$3E(a1)

loc_2D0D0:

		move.b	#1,$20(a0)
		bsr.w	sub_2D164
		move.b	#4,5(a0)
		movea.w	respawn_addr(a0),a2
		bset	#0,(a2)

locret_2D0E8:

		rts
; ---------------------------------------------------------------------------

loc_2D0EA:
		tst.b	$20(a0)
		bne.s	locret_2D0F6
		move.b	#2,$20(a0)

locret_2D0F6:
		rts
; End of function sub_2D028

; ---------------------------------------------------------------------------

loc_2D0F8:


		lea	(Ani_Starpost).l,a1
		jsr	Animate_Sprite.w
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_2D10A:
		subq.w	#1,$36(a0)
		bpl.s	loc_2D12E
		movea.w	$3E(a0),a1
		cmpi.l	#Obj_StarPost,(a1)
		bne.s	loc_2D128
		move.b	#2,$20(a1)
		move.b	#0,$22(a1)

loc_2D128:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_2D12E:
		move.b	$26(a0),d0
		subi.b	#$10,$26(a0)
		subi.b	#$40,d0
		jsr	GetSineCosine.w
		muls.w	#$C00,d1
		swap	d1
		add.w	$30(a0),d1
		move.w	d1,$10(a0)
		muls.w	#$C00,d0
		swap	d0

		add.w	$32(a0),d0
		move.w	d0,$14(a0)
		jmp	Sprite_OnScreen_Test.w

; =============== S U B R O U T I N E =======================================


sub_2D164:
		move.b	$2C(a0),(Last_star_post_hit).w

; =============== S U B R O U T I N E =======================================


Save_Level_Data:
Save_Level_Data2:
Load_Starpost_Settings:
		rts

; ---------------------------------------------------------------------------
Ani_Starpost:	include "General/Sprites/Starpost/Anim - Starpost.asm"

Map_StarPost:	include "General/Sprites/Starpost/Map - Starpost.asm"

Map_StarpostStars:	include "General/Sprites/Starpost/Map - Starpost Stars.asm"

; =============== S U B R O U T I N E =======================================


sub_2D3C8:
		moveq	#3,d1
		moveq	#0,d2

loc_2D3CC:
		jsr	Create_New_Sprite.w
		bne.s	loc_2D436
		move.l	(a0),(a1)
		move.l	#Map_StarpostStars,$C(a1)
		move.w	#$5EC,$A(a1)
		move.b	#4,4(a1)
		move.b	#8,5(a1)
		move.w	$10(a0),d0
		move.w	d0,$10(a1)
		move.w	d0,$30(a1)
		move.w	$14(a0),d0
		subi.w	#$30,d0
		move.w	d0,$14(a1)
		move.w	d0,$32(a1)
		move.w	8(a0),8(a1)
		move.b	#8,7(a1)
		move.b	#1,$22(a1)
		move.w	#-$400,$18(a1)
		move.w	#0,$1A(a1)
		move.w	d2,$34(a1)
		addi.w	#$40,d2
		dbf	d1,loc_2D3CC

loc_2D436:
		lea	(ArtKosM_StarPostStars3).l,a1
		move.b	(Ring_count).w,d0
		subi.w	#20,d0
		divu.w	#15,d0
		ext.l	d0
		moveq	#2,d2
		tst.w	(SK_alone_flag).w
		bne.s	loc_2D454
		moveq	#3,d2

loc_2D454:
		divu.w	d2,d0
		swap	d0
		tst.w	d0
		beq.s	loc_2D474
		lea	(ArtKosM_StarPost_Stars1).l,a1
		cmpi.w	#1,d0
		beq.s	loc_2D474
		tst.w	(SK_alone_flag).w
		bne.s	loc_2D474
		lea	(ArtKosM_StarPostStars2).l,a1

loc_2D474:

		move.w	#-$4280,d2
		jmp	Queue_Kos_Module.w
; End of function sub_2D3C8

; ---------------------------------------------------------------------------

loc_2D47E:
		move.b	$29(a0),d0
		beq.w	loc_2D50A
		andi.b	#1,d0
		beq.s	loc_2D506
		move.w	#$1500,d1
	;	move.w	(Saved_ring_count).w,d0
		subi.w	#$14,d0
		divu.w	#$F,d0
		ext.l	d0
		moveq	#2,d2
		tst.w	(SK_alone_flag).w
		bne.s	loc_2D4AE
		moveq	#3,d2

loc_2D4AE:
		divu.w	d2,d0
		swap	d0
		tst.w	d0
		beq.s	loc_2D4CA
		move.w	#$1400,d1
		cmpi.w	#1,d0
		beq.s	loc_2D4CA
		tst.w	(SK_alone_flag).w
		bne.s	loc_2D4CA
		move.w	#$1300,d1

loc_2D4CA:

		move.w	d1,(Current_zone_and_act).w
		move.w	d1,(Apparent_zone_and_act).w
		move.b	#0,(Last_star_post_hit).w
		st	(Restart_level_flag).w
		move.b	#1,(NoReset_RespawnTbl).w
		jsr	(Clear_SpriteRingMem).l

loc_2D506:
		clr.b	$29(a0)

loc_2D50A:
		addi.w	#$A,$34(a0)
		move.w	$34(a0),d0
		andi.w	#$FF,d0
		jsr	GetSineCosine.w
		asr.w	#5,d0
		asr.w	#3,d1
		move.w	d1,d3
		move.w	$34(a0),d2
		andi.w	#$3E0,d2
		lsr.w	#5,d2
		moveq	#2,d5
		moveq	#0,d4
		cmpi.w	#$10,d2
		ble.s	loc_2D53A
		neg.w	d1

loc_2D53A:
		andi.w	#$F,d2
		cmpi.w	#8,d2
		ble.s	loc_2D54A
		neg.w	d2
		andi.w	#7,d2

loc_2D54A:

		lsr.w	#1,d2
		beq.s	loc_2D550
		add.w	d1,d4

loc_2D550:
		asl.w	#1,d1
		dbf	d5,loc_2D54A
		asr.w	#4,d4
		add.w	d4,d0
		addq.w	#1,$36(a0)
		move.w	$36(a0),d1
		cmpi.w	#$80,d1
		beq.s	loc_2D574
		bgt.s	loc_2D57A

loc_2D56A:
		muls.w	d1,d0
		muls.w	d1,d3
		asr.w	#7,d0
		asr.w	#7,d3
		bra.s	loc_2D58C
; ---------------------------------------------------------------------------

loc_2D574:
		move.b	#-$28,$28(a0)

loc_2D57A:
		cmpi.w	#$180,d1
		ble.s	loc_2D58C
		neg.w	d1
		addi.w	#$200,d1
		bmi.w	loc_2D5C0
		bra.s	loc_2D56A
; ---------------------------------------------------------------------------

loc_2D58C:

		move.w	$30(a0),d2
		add.w	d3,d2
		move.w	d2,$10(a0)
		move.w	$32(a0),d2
		add.w	d0,d2
		move.w	d2,$14(a0)
		addq.b	#1,$23(a0)
		move.b	$23(a0),d0
		andi.w	#6,d0
		lsr.w	#1,d0
		cmpi.b	#3,d0
		bne.s	loc_2D5B6
		moveq	#1,d0

loc_2D5B6:
		move.b	d0,$22(a0)
		jmp	loc_1B662.w
; ---------------------------------------------------------------------------

loc_2D5C0:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

Obj_TitleCard:

		moveq	#0,d0
		move.b	5(a0),d0
		move.w	TitleCard_Index(pc,d0.w),d1
		jmp	TitleCard_Index(pc,d1.w)
; ---------------------------------------------------------------------------
TitleCard_Index:	dc.w Obj_TitleCardInit-TitleCard_Index
		dc.w Obj_TitleCardCreate-TitleCard_Index
		dc.w Obj_TitleCardWait-TitleCard_Index
		dc.w Obj_TitleCardWait2-TitleCard_Index
; ---------------------------------------------------------------------------

Obj_TitleCardInit:
		cmpi.w	#$D01,(Current_zone_and_act).w
		beq.s	loc_2D6C2			; if we're in the ending, don't show title card
		cmpi.b	#CompID,(Current_zone).w
		blo.s	loc_2D6C8			; If in any of the 2P stages, don't show title card
		cmpi.b	#$12,(Current_zone).w
		bhi.s	loc_2D6C8
		st	$44(a0)

loc_2D6C2:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_2D6C8:

		lea	(ArtKosM_TitleCardRedAct).l,a1
		move.w	#$A000,d2
		jsr	Queue_Kos_Module.w
		lea	(ArtKosM_TitleCardSKZone).l,a1
		tst.w	(SK_alone_flag).w
		bne.s	loc_2D6EA
		lea	(ArtKosM_TitleCardS3KZone).l,a1

loc_2D6EA:
		move.w	#$A200,d2
		jsr	Queue_Kos_Module.w
		lea	(ArtKosM_TitleCardNum2).l,a1
		cmpi.w	#$1600,(Current_zone_and_act).w
		beq.s	loc_2D716
		cmpi.w	#$1700,(Current_zone_and_act).w
		beq.s	loc_2D716		; Death Egg Boss and LRZ Boss show act 2
		tst.b	(Apparent_act).w
		bne.s	loc_2D716
		lea	(ArtKosM_TitleCardNum1).l,a1

loc_2D716:

		move.w	#$A7A0,d2
		jsr	Queue_Kos_Module.w
		lea	TitleCard_LevelGfx(pc),a1
		moveq	#9,d0
		cmpi.w	#$1600,(Current_zone_and_act).w	; If in LRZ's boss, set it to Lava Reef's card
		beq.s	loc_2D746
		moveq	#$D,d0
		cmpi.w	#$1601,(Current_zone_and_act).w	; If in Hidden Palace, set it to its card
		beq.s	loc_2D746
		moveq	#$B,d0
		cmpi.w	#$1700,(Current_zone_and_act).w	; If in Death Egg boss, set it to Death Egg's card
		beq.s	loc_2D746
		move.b	(Apparent_zone_and_act).w,d0		; Otherwise, just use current zone

loc_2D746:

		lsl.w	#2,d0
		movea.l	(a1,d0.w),a1
		move.w	#$A9A0,d2
		jsr	Queue_Kos_Module.w
		move.w	#$5A,$2E(a0)			; Set wait value
		clr.w	$32(a0)
		st	$48(a0)
		addq.b	#2,5(a0)
		rts
; ---------------------------------------------------------------------------

Obj_TitleCardCreate:
		tst.b	(Kos_modules_left).w
		bne.w	locret_2D802		; Wait for KosM queue to clear
		jsr	Create_New_Sprite3.w
		bne.w	locret_2D802
		cmpi.b	#$16,(Current_zone).w
		beq.s	loc_2D79A
		cmpi.w	#$1700,(Current_zone_and_act).w
		beq.s	loc_2D79A
		lea	ObjArray_TtlCardBonus(pc),a2
		moveq	#1,d1
		cmpi.b	#$13,(Current_zone).w
		bhs.s	loc_2D7AC

loc_2D79A:

		lea	ObjArray_TtlCard(pc),a2
		moveq	#3,d1
		tst.b	$44(a0)
		beq.s	loc_2D7AC
		lea	ObjArray_TtlCard2(pc),a2
		moveq	#0,d1

loc_2D7AC:

		addq.w	#1,$30(a0)
		move.l	(a2)+,(a1)
		move.w	(a2)+,$46(a1)
		move.w	(a2)+,$10(a1)
		move.w	(a2)+,$14(a1)
		move.b	(a2)+,$22(a1)
		move.b	(a2)+,7(a1)
		move.w	(a2)+,d2
		move.b	d2,$28(a1)
		move.b	#$40,4(a1)
		move.l	#Map_TitleCard,$C(a1)
		move.w	a0,parent2(a1)
		jsr	(CreateNewSprite4).l
		dbne	d1,loc_2D7AC
		tst.b	$3E(a0)
		beq.s	loc_2D7FE
		cmpi.b	#6,(Current_zone).w
		bne.s	loc_2D7FE
		moveq	#$25,d0			; If title card is mid-level and it's in LBZ, load the LBZ 2 misc art
		jsr	Load_PLC.w

loc_2D7FE:

		addq.b	#2,5(a0)

locret_2D802:

		rts
; ---------------------------------------------------------------------------

Obj_TitleCardWait:
		tst.w	$34(a0)
		beq.s	loc_2D810
		clr.w	$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_2D810:
		tst.w	$3E(a0)
		beq.s	loc_2D84C
		clr.l	(Timer).w		; If using in-level title card
		clr.w	(Ring_count).w		; Reset HUD rings and timer
		st	(Update_HUD_timer).w
		st	(Update_HUD_ring_count).w			; Start updating timer and rings again
		move.b	#$1E,(Player_1+$2C).w
		move.b	#$1E,(Player_2+$2C).w	; Reset air
		jsr	Obj_PlayLevelMusic.w		; Play music

loc_2D84C:
		clr.w	$48(a0)
		addq.b	#2,5(a0)
		rts
; ---------------------------------------------------------------------------

Obj_TitleCardWait2:
		tst.w	$2E(a0)
		beq.s	loc_2D862
		subq.w	#1,$2E(a0)
		rts
; ---------------------------------------------------------------------------

loc_2D862:
		tst.w	$30(a0)
		beq.s	loc_2D86E
		addq.w	#1,$32(a0)
		rts
; ---------------------------------------------------------------------------

loc_2D86E:
		tst.b	$44(a0)
		bne.w	loc_2D8DC
		tst.b	OptionsBits.w		; NAT: Check if alternate layout
		bmi.s	loc_2D88A		; if yes, do not load ghosts
		cmpi.w	#$801,(Current_zone_and_act).w
		bne.s	loc_2D88A
		jsr	Create_New_Sprite.w
		bne.s	loc_2D88A
		move.l	#Obj_SOZ_Ghosts,(a1)	; If new level is Sandopolis 2, then load the ghosts

loc_2D88A:

		cmpi.b	#$16,(Current_zone).w
		beq.s	loc_2D8A2
		cmpi.w	#$1700,(Current_zone_and_act).w
		beq.s	loc_2D8A2
		cmpi.b	#$13,(Current_zone).w
		bhs.s	loc_2D8DC

loc_2D8A2:

		tst.w	$3E(a0)
		beq.s	loc_2D8AE
		st	(Title_Card_Out_Flag).w	; If in-level, set end of title card flag. No need to reload PLCs
		bra.s	loc_2D8CA
; ---------------------------------------------------------------------------

loc_2D8AE:
		cmp.b	#6,PlayMode.w			; NAT: If playmode 6, load boss
		bne.s	.noboss				; if not tho, branch
		cmp.w	#$300,Current_zone_and_act.w	; check if CNZ1
		beq.s	loc_2D8DC			; if yes, branch

.noboss		cmpi.b	#$C,(Current_zone).w
		beq.s	loc_2D8DC
		cmpi.w	#$1700,(Current_zone_and_act).w
		beq.s	loc_2D8DC
		lea	(PLC_SpikesSprings).l,a1		; Reload spikes in all but DEZ boss and Doomsday
		jsr	Load_PLC_Raw.w

loc_2D8CA:
		cmpi.w	#$1700,(Current_zone_and_act).w
		beq.s	loc_2D8DC
		jsr	LoadEnemyArt			; Load animals and enemies in all but DEZ boss
		jsr	(PLCLoad_AnimalsAndExplosion).l

loc_2D8DC:

		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

Obj_TitleCardRedBanner:
		movea.w	parent2(a0),a1
		move.w	$32(a1),d0
		beq.s	loc_2D90A
		tst.b	4(a0)
		bmi.s	loc_2D8FC
		subq.w	#1,$30(a1)
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_2D8FC:
		cmp.b	$28(a0),d0
		blo.s	loc_2D920
		subi.w	#$20,$14(a0)
		bra.s	loc_2D920
; ---------------------------------------------------------------------------

loc_2D90A:
		move.w	$14(a0),d0
		cmp.w	$46(a0),d0
		beq.s	loc_2D920
		addi.w	#$10,d0
		move.w	d0,$14(a0)
		st	$34(a1)

loc_2D920:

		move.b	#$70,6(a0)
		move.w	#prio(0),Priority(a0)
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

Obj_TitleCardName:
		move.b	(Apparent_zone_and_act).w,d0
		add.b	d0,$22(a0)
		moveq	#$D,d0
		cmpi.w	#$1600,(Current_zone_and_act).w
		beq.s	loc_2D952
		moveq	#$11,d0
		cmpi.w	#$1601,(Current_zone_and_act).w
		beq.s	loc_2D952
		moveq	#$F,d0
		cmpi.w	#$1700,(Current_zone_and_act).w
		bne.s	loc_2D956

loc_2D952:

		move.b	d0,$22(a0)

loc_2D956:
		move.l	#Obj_TitleCardElement,(a0)

Obj_TitleCardElement:
		movea.w	parent2(a0),a1
		move.w	$32(a1),d0
		beq.s	loc_2D984
		tst.b	4(a0)
		bmi.s	loc_2D976
		subq.w	#1,$30(a1)
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_2D976:
		cmp.b	$28(a0),d0
		blo.s	loc_2D99A
		addi.w	#$20,$10(a0)
		bra.s	loc_2D99A
; ---------------------------------------------------------------------------

loc_2D984:
		move.w	$10(a0),d0
		cmp.w	$46(a0),d0
		beq.s	loc_2D99A
		subi.w	#$10,d0
		move.w	d0,$10(a0)
		st	$34(a1)

loc_2D99A:
		move.w	#prio(0),Priority(a0)
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

Obj_TitleCardAct:
		move.l	#Obj_TitleCardElement,(a0)
		cmpi.b	#$A,(Current_zone).w
		beq.s	loc_2D9BE
		cmpi.b	#$C,(Current_zone).w
		beq.s	loc_2D9BE
		cmpi.w	#$1601,(Current_zone_and_act).w
		bne.s	Obj_TitleCardElement

loc_2D9BE:

		movea.w	parent2(a0),a1		; Sky Sanctuary, Doomsday, and Hidden Palace do not have act numbers
		subq.w	#1,$30(a1)
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

Obj_TitleCardElement2:
		clr.b	4(a0)			; I'm not entirely sure what this is used for
		movea.w	parent2(a0),a1
		move.w	$32(a1),d0
		beq.s	loc_2D9FA
		cmpi.w	#$20C,$10(a0)
		blo.s	loc_2D9EC
		subq.w	#1,$30(a1)
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_2D9EC:
		cmp.b	$28(a0),d0
		blo.s	loc_2DA10
		addi.w	#$20,$10(a0)
		bra.s	loc_2DA10
; ---------------------------------------------------------------------------

loc_2D9FA:
		move.w	$10(a0),d0
		cmp.w	$46(a0),d0
		beq.s	loc_2DA10
		subi.w	#$10,d0
		move.w	d0,$10(a0)
		st	$34(a1)

loc_2DA10:
		move.w	#prio(0),Priority(a0)
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
TitleCard_LevelGfx:	dc.l ArtKosM_AIZTitleCard
		dc.l ArtKosM_HCZTitleCard
		dc.l ArtKosM_MGZTitleCard
		dc.l ArtKosM_CNZTitleCard
		dc.l ArtKosM_FBZTitleCard
		dc.l ArtKosM_ICZTitleCard
		dc.l ArtKosM_LBZTitleCard
		dc.l ArtKosM_MHZTitleCard
		dc.l ArtKosM_SOZTitleCard
		dc.l ArtKosM_LRZTitleCard
		dc.l ArtKosM_SSZTitleCard
		dc.l ArtKosM_DEZTitleCard
		dc.l ArtKosM_DDZTitleCard
		dc.l ArtKosM_HPZTitleCard
		dc.l ArtKosM_OAZTitleCard
		dc.l ArtKosM_BPZTitleCard
		dc.l ArtKosM_DPZTitleCard
		dc.l ArtKosM_CGZTitleCard
		dc.l ArtKosM_EMZTitleCard
		dc.l ArtKosM_BonusTitleCard
		dc.l ArtKosM_BonusTitleCard
		dc.l ArtKosM_BonusTitleCard
ObjArray_TtlCard:	dc.l Obj_TitleCardName
		dc.w $120
		dc.w $260
		dc.w $E0
		dc.b 4
		dc.b $80
		dc.w 3
		dc.l Obj_TitleCardElement
		dc.w $17C
		dc.w $2FC
		dc.w $100
		dc.b 3
		dc.b $24
		dc.w 5
		dc.l Obj_TitleCardAct
		dc.w $184
		dc.w $344
		dc.w $120
		dc.b 2
		dc.b $1C
		dc.w 7
		dc.l Obj_TitleCardRedBanner
		dc.w $C0
		dc.w $E0
		dc.w $10
		dc.b 1
		dc.b 0
		dc.w 1
ObjArray_TtlCard2:	dc.l Obj_TitleCardElement2
		dc.w $15C
		dc.w $21C
		dc.w $BC
		dc.b $12
		dc.b $80
		dc.w 1
ObjArray_TtlCardBonus:	dc.l Obj_TitleCardElement
		dc.w $C8
		dc.w $188
		dc.w $E8
		dc.b $13
		dc.b $80
		dc.w 1
		dc.l Obj_TitleCardElement
		dc.w $128
		dc.w $1E8
		dc.w $E8
		dc.b $14
		dc.b $80
		dc.w 1
; ---------------------------------------------------------------------------

Obj_LevelResults:

		moveq	#0,d0
		move.b	5(a0),d0
		move.w	LevelResults_Index(pc,d0.w),d1
		jmp	LevelResults_Index(pc,d1.w)
; ---------------------------------------------------------------------------
LevelResults_Index:
		dc.w Obj_LevelResultsInit-LevelResults_Index
		dc.w Obj_LevelResultsCreate-LevelResults_Index
		dc.w Obj_LevelResultsWait-LevelResults_Index
		dc.w Obj_LevelResultsWait2-LevelResults_Index
; ---------------------------------------------------------------------------

Obj_LevelResultsInit:
		moveq	#-$1F,d0
		jsr	Play_Sound.w				; Fade music
		lea	(ArtKosM_ResultsGeneral).l,a1
		move.w	#$A940,d2				; NAT: Remove extra junk from file
		jsr	Queue_Kos_Module.w			; General art for

		lea	(ArtKosM_TitleCardNum2).l,a1
		moveq	#-1,d0
		tst.b	(Apparent_act).w
		bne.s	loc_2DB1C
		lea	(ArtKosM_TitleCardNum1).l,a1	; Otherwise, use the 1 digit if internal act number is 0
		moveq	#0,d0

loc_2DB1C:
		move.w	d0,$2C(a0)
		move.w	#$AD00,d2
		jsr	Queue_Kos_Module.w

		lea	WinsPl1.w,a2
		lea	ArtKosM_ResultsSONIC,a1	; Sonic
		tst.b	LevelWinner.w		; NAT: Check who is the winner
		bgt.s	.winfound		; if Sonic, branch
		bmi.s	.tailswin		; if Tais, branch

		lea	ArtKosM_ResultsKNUCKLES,a1; tie
		bra.s	.ok

.tailswin	lea	ArtKosM_ResultsMILES,a1	; NAT2: Miles in JP
		lea	WinsPl2.w,a2
		tst.b	Graphics_flags.w	; check if overseas
		bpl.s	.winfound		; if so, branch
		lea	ArtKosM_ResultsTAILS,a1	; NAT2: Tails

.winfound	addq.b	#1,(a2)			; add 1 to player score
		cmp.b	#99,(a2)		; check for max num
		bls.s	.ok			; branch if not max
		subq.b	#1,(a2)			; keep at max

.ok		move.w	#$AF00,d2
		tst.w	$2C(a0)
		beq.s	loc_2DB66
		move.w	#$B400,d2

loc_2DB66:
		jsr	Queue_Kos_Module.w		; Load character name graphics
		clr.w	Time_bonus_countdown.w		; clear the time bonus

loc_2DBA8:
		clr.w	(Ring_bonus_countdown).w	; clear the ring bonus
		clr.w	(Total_bonus_countup).w
		move.w	#280,$2E(a0)		; Wait 6 seconds before starting score counting sequence
		addq.b	#2,5(a0)
		rts
; ---------------------------------------------------------------------------

Obj_LevelResultsCreate:
		tst.b	(Kos_modules_left).w
		bne.s	locret_2DC34		; Don't load the objects until the art has been loaded
		jsr	Create_New_Sprite3.w
		bne.s	locret_2DC34
	;	lea	ObjArray_LevResults(pc),a2
	;	moveq	#$00,d0				; MJ: load level winner
		move.b	(LevelWinner).w,d1		; MJ: load level winner
		ext.w	d1				; MJ: ''
		bpl.s	OLRC_NoTails			; MJ: if tails didn't win, skip the Miles check
		tst.b	(Graphics_flags).w		; MJ: is the machine Japanese region?
		bpl.s	OLRC_Miles			; MJ: if so, branch to use "MILES" mappings

OLRC_NoTails:
		addq.w	#$01,d1				; MJ: convert to positive

OLRC_Miles:
		add.w	d1,d1				; MJ: multiply by size of long-word
		add.w	d1,d1				; MJ: ''
		lea	MixedResults(pc),a2		; MJ: load correct results list
		move.l	(a2,d1.w),a2			; MJ: ''
		move.w	(a2)+,d1			; MJ: load number of entries
		move.w	d1,$30(a0)			; NAT: Save amount of opbjects
		addq.w	#1,$30(a0)			; account for deb
	;	moveq	#3-1,d1

loc_2DBDE:
		move.l	(a2)+,(a1)
		move.w	(a2)+,$46(a1)
		move.w	(a2)+,$10(a1)
		spl	5(a1)
		move.w	(a2)+,$14(a1)
		move.b	(a2)+,$22(a1)
		move.b	(a2)+,7(a1)
		move.w	(a2)+,d2
		move.b	d2,$28(a1)
		move.b	#$40,4(a1)
		move.w	#prio(0),priority(a1)
		move.l	#Map_Results,$C(a1)
		move.w	a0,parent2(a1)
		jsr	CreateNewSprite4
		dbne	d1,loc_2DBDE
		addq.b	#2,5(a0)


locret_2DC34:
		rts
; ---------------------------------------------------------------------------

Obj_LevelResultsWait:
		move.w	(HudPos).w,d0			; load position
		move.w	#$0080,d1			; set destination
		sub.w	d0,d1				; get distance
		asr.w	#$04,d1				; get 1/8th of the position
		add.w	d1,(HudPos).w			; add to position
		move.b	#$1E,(Player_1+$2C).w		; Reset air for Hydrocity
		move.b	#$1E,(Player_2+$2C).w
		tst.w	$2E(a0)
		beq.s	loc_2DC5C
		subq.w	#1,$2E(a0)
		cmpi.w	#230,$2E(a0)
		bne.s	locret_2DC34			; Play after eh, a second or so
		moveq	#0,d0
		jsr	Change_Music_Tempo.w		; slow music down

		move.b	LevelWinner.w,d0		; NAT: get winner to d0
		ext.w	d0				; extemd to word
		move.b	.songs+1(pc,d0.w),d0		; get the right tune
		jmp	Play_Sound.w			; Play level complete theme

.songs	dc.b Mus_ResultsTails, Mus_ResultsTie, Mus_ResultsSonic
	even
; ---------------------------------------------------------------------------

loc_2DC5C:
loc_2DCB6:
loc_2DCC0:
		move.w	#$5A,$2E(a0)	; Set wait amount
		addq.b	#2,5(a0)

Obj_LevelResultsWait2:
		tst.w	$2E(a0)
		beq.s	loc_2DCD6
		subq.w	#1,$2E(a0)
		rts
; ---------------------------------------------------------------------------

loc_2DCD6:
		tst.w	$30(a0)			; Wait for title screen objects to disappear
		beq.s	loc_2DCE2
		addq.w	#1,$32(a0)
		rts
; ---------------------------------------------------------------------------

loc_2DCE2:
		clr.b	(End_Of_Level_Flag).w		; Act 2 (or Sky Sanctuary or LRZ boss)
	;	st	(Title_Card_Out_Flag).w			; Stop level results flag and set title card finished flag
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_2DD06:
		move.b	#1,(Apparent_act).w	; Change to act 2 if in act 1

loc_2DD0C:
		clr.b	(Last_star_post_hit).w
		clr.b	(End_Of_Level_Flag).w
;		cmpi.b	#8,(Current_zone).w
;		beq.s	loc_2DD38
;		cmpi.b	#$B,(Current_zone).w
;		beq.s	loc_2DD38			; Neither Sandopolis 1 nor Death Egg 1 immediately show title cards
;		move.l	#Obj_TitleCard,(a0)	; Change current object to title card
;		clr.b	5(a0)
;		st	$3E(a0)
;		rts
; ---------------------------------------------------------------------------

loc_2DD38:

		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

Obj_LevResultsCharName:
		moveq	#0,d0
		movea.w	parent2(a0),a1
		tst.w	$2C(a1)
		beq.s	loc_2DD8E
		move.w	#$28,d0

loc_2DD8E:
		move.w	d0,$A(a0)		; Offset VRAM depending on act number
		move.l	#Obj_LevResultsGeneral,(a0)

Obj_LevResultsGeneral:
		jsr	LevelResults_MoveElement(pc)
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

Obj_LevelResultsTimeBonus:
		jsr	LevelResults_MoveElement(pc)
		move.w	(Time_bonus_countdown).w,d0
		bra.s	loc_2DDBE
; ---------------------------------------------------------------------------

Obj_LevelResultsRingBonus:
		jsr	LevelResults_MoveElement(pc)
		move.w	(Ring_bonus_countdown).w,d0
		bra.s	loc_2DDBE
; ---------------------------------------------------------------------------

Obj_LevelResultsTotal:
		jsr	LevelResults_MoveElement(pc)
		move.w	(Total_bonus_countup).w,d0

loc_2DDBE:

		bsr.s	LevResults_DisplayScore
		jmp	Draw_Sprite.w

; =============== S U B R O U T I N E =======================================


LevResults_DisplayScore:

		move.w	#7,$16(a0)
		jsr	LevResults_GetDecimalScore(pc)
		rol.l	#4,d1
		lea	$18(a0),a1
		move.w	$10(a0),d2
		subi.w	#$38,d2
		move.w	$14(a0),d3
		moveq	#0,d4
		moveq	#6,d5

loc_2DDE6:
		move.w	d2,(a1)+
		move.w	d3,(a1)+
		addq.w	#1,a1
		rol.l	#4,d1
		move.w	d1,d0
		andi.w	#$F,d0
		beq.s	loc_2DDF8
		moveq	#1,d4

loc_2DDF8:
		add.w	d4,d0
		move.b	d0,(a1)+
		addq.w	#8,d2
		dbf	d5,loc_2DDE6
		rts
; End of function LevResults_DisplayScore


; =============== S U B R O U T I N E =======================================


LevelResults_MoveElement:

		movea.w	parent2(a0),a1
		move.w	$32(a1),d0
		beq.s	loc_2DE38
		tst.b	4(a0)
		bmi.s	loc_2DE20
		subq.w	#1,$30(a1)			; If offscreen, subtract from number of elements and delete
		addq.w	#4,sp
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_2DE20:
		cmp.b	$28(a0),d0		; Level element moving out. Test if value of parent queue matches given queue value
		blo.s	locret_2DE4E
		move.w	#-$20,d0		; If so, move out
		tst.b	5(a0)
		beq.s	loc_2DE32
		neg.w	d0				; Change direction depending on where it came from

loc_2DE32:
		add.w	$10(a0),d0
		bra.s	loc_2DE4A
; ---------------------------------------------------------------------------

loc_2DE38:
		moveq	#$10,d1			; Level element moving in
		move.w	$10(a0),d0
		cmp.w	$46(a0),d0
		beq.s	loc_2DE4A		; If X position has reached destination, don't do anything else
		blt.s	loc_2DE48		; See which direction it needs to go
		neg.w	d1

loc_2DE48:
		add.w	d1,d0			; Add speed to X amount

loc_2DE4A:

		move.w	d0,$10(a0)

locret_2DE4E:
		rts
; End of function LevelResults_MoveElement


; =============== S U B R O U T I N E =======================================


LevResults_GetDecimalScore:

		clr.l	(__u_EF40).w
		lea	TimeBonus(pc),a1
		moveq	#$F,d2

loc_2DE5A:
		ror.w	#1,d0
		bcs.s	loc_2DE62
		subq.w	#3,a1
		bra.s	loc_2DE70
; ---------------------------------------------------------------------------

loc_2DE62:
		lea	(__u_EF44).w,a2
		addi.w	#0,d0
		abcd	-(a1),-(a2)
		abcd	-(a1),-(a2)
		abcd	-(a1),-(a2)

loc_2DE70:
		dbf	d2,loc_2DE5A
		move.l	(__u_EF40).w,d1
		rts
; End of function LevResults_GetDecimalScore

; ---------------------------------------------------------------------------
		dc.b 3, $27, $68
		dc.b 1, $63, $84
		dc.b 0, $81, $92
		dc.b 0, $40, $96
		dc.b 0, $20, $48
		dc.b 0, $10, $24
		dc.b 0, 5, $12
		dc.b 0, 2, $56
		dc.b 0, 1, $28
		dc.b 0, 0, $64
		dc.b 0, 0, $32
		dc.b 0, 0, $16
		dc.b 0, 0, 8
		dc.b 0, 0, 4
		dc.b 0, 0, 2
		dc.b 0, 0, 1
TimeBonus:	dc.w  $1388, $1388,  $3E8,  $1F4,  $190,  $12C,	  $64,	  $A

; ===========================================================================
; ---------------------------------------------------------------------------
; End results objects/mappings
; ---------------------------------------------------------------------------

		dc.l	SonicResults		; MILES
MixedResults:	dc.l	TailsResults		; TAILS
		dc.l	TiedResults		; TIED
		dc.l	SonicResults		; SONIC

	; --- Sonic/Miles ---

SonicResults:	dc.w	3-1

	; "SONIC/MILES"

		dc.l Obj_LevResultsCharName	; Object address
		dc.w $E0			; X destination
		dc.w $FDE0			; X position
		dc.w $B8			; Y position
		dc.b $13			; Mapping frame
		dc.b $48			; Width
		dc.w 1				; Place in exit queue

	; "WINS"

		dc.l Obj_LevResultsGeneral
		dc.w $130
		dc.w $FE30
		dc.w $B8
		dc.b $11
		dc.b $30
		dc.w 1

	; Act X

		dc.l Obj_LevResultsGeneral
		dc.w ((320/2)-$0C)+$80
		dc.w $4E0+4
		dc.w $BC+$10
		dc.b $F
		dc.b $38
		dc.w 3

	; --- Tails ---

TailsResults:	dc.w	3-1

	; "TAILS"

		dc.l Obj_LevResultsCharName	; Object address
		dc.w $E0			; X destination
		dc.w $FDE0			; X position
		dc.w $B8			; Y position
		dc.b $3B			; Mapping frame
		dc.b $48			; Width
		dc.w 1				; Place in exit queue

	; "WINS"

		dc.l Obj_LevResultsGeneral
		dc.w $130
		dc.w $FE30
		dc.w $B8
		dc.b $11
		dc.b $30
		dc.w 1

	; Act X

		dc.l Obj_LevResultsGeneral
		dc.w ((320/2)-$0C)+$80
		dc.w $4E0+4
		dc.w $BC+$10
		dc.b $F
		dc.b $38
		dc.w 3

	; --- Tied ---

TiedResults:	dc.w	2-1

	; "TIE IN"

		dc.l Obj_LevResultsGeneral	; Object address
		dc.w $100			; X destination
		dc.w $FDE0			; X position
		dc.w $B8			; Y position
		dc.b $3C			; Mapping frame
		dc.b $48			; Width
		dc.w 1				; Place in exit queue

	; Act X

		dc.l Obj_LevResultsGeneral
		dc.w ((320/2)-$0C)+$80
		dc.w $4E0+4
		dc.w $BC+$10
		dc.b $F
		dc.b $38
		dc.w 3

; ---------------------------------------------------------------------------

Map_TitleCard:	include "General/Title/Map - S3 card.asm"

Map_Results:	include "General/Sprites/Results/Map - Results.asm"


; ---------------------------------------------------------------------------

Obj_Bubbler:

		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_2F946(pc,d0.w),d1
		jmp	off_2F946(pc,d1.w)
; ---------------------------------------------------------------------------
off_2F946:	dc.w loc_2F952-off_2F946

		dc.w loc_2F9B0-off_2F946
		dc.w loc_2F9CA-off_2F946
		dc.w loc_2FA2C-off_2F946
		dc.w loc_2FA4A-off_2F946
		dc.w loc_2FA50-off_2F946
; ---------------------------------------------------------------------------

loc_2F952:
		addq.b	#2,5(a0)
		move.l	#Map_Bubbler,$C(a0)
		move.w	#$45C,$A(a0)
		move.b	#-$7C,4(a0)
		move.b	#$10,7(a0)
		move.w	#prio(1),8(a0)
		move.b	$2C(a0),d0
		bpl.s	loc_2F996
		addq.b	#8,5(a0)
		andi.w	#$7F,d0
		move.b	d0,$32(a0)
		move.b	d0,$33(a0)
		move.b	#8,$20(a0)
		bra.w	loc_2FA50
; ---------------------------------------------------------------------------

loc_2F996:
		move.b	d0,$20(a0)
		move.w	$10(a0),$30(a0)
		move.w	#-$88,$1A(a0)
		jsr	Random_Number.w
		move.b	d0,$26(a0)

loc_2F9B0:
		lea	(Ani_Bubbler).l,a1
		jsr	Animate_Sprite.w
		cmpi.b	#6,$22(a0)
		bne.s	loc_2F9CA
		move.b	#1,$2E(a0)

loc_2F9CA:

		move.w	(Water_level).w,d0
		cmp.w	$14(a0),d0
		blo.s	loc_2F9E2
		move.b	#6,5(a0)
		addq.b	#4,$20(a0)
		bra.w	loc_2FA2C
; ---------------------------------------------------------------------------

loc_2F9E2:
		move.b	$26(a0),d0
		addq.b	#1,$26(a0)
		andi.w	#$7F,d0
		lea	(byte_1831E).l,a1
		move.b	(a1,d0.w),d0
		ext.w	d0
		add.w	$30(a0),d0
		move.w	d0,$10(a0)
		tst.b	$2E(a0)
		beq.s	loc_2FA14
		bsr.w	sub_2FBA8
		cmpi.b	#6,5(a0)
		beq.s	loc_2FA2C

loc_2FA14:
		jsr	MoveSprite2.w
		tst.b	4(a0)
		bpl.s	loc_2FA26
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_2FA26:
loc_2FA44:
loc_2FA4A:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_2FA2C:


		lea	(Ani_Bubbler).l,a1
		jsr	Animate_Sprite.w
		tst.b	4(a0)
		bpl.s	loc_2FA44
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_2FA50:

		tst.w	$36(a0)
		bne.s	loc_2FAB2
		move.w	(Water_level).w,d0
		cmp.w	$14(a0),d0
		bhs.w	loc_2FB5C
		tst.b	4(a0)
		bpl.w	loc_2FB5C
		subq.w	#1,$38(a0)
		bpl.w	loc_2FB50
		move.w	#1,$36(a0)

loc_2FA78:
		jsr	Random_Number.w
		move.w	d0,d1
		andi.w	#7,d0
		cmpi.w	#6,d0
		bhs.s	loc_2FA78
		move.b	d0,$34(a0)
		andi.w	#$C,d1
		lea	(byte_2FB96).l,a1
		adda.w	d1,a1
		move.l	a1,$3C(a0)
		subq.b	#1,$32(a0)
		bpl.s	loc_2FAB0
		move.b	$33(a0),$32(a0)
		bset	#7,$36(a0)

loc_2FAB0:
		bra.s	loc_2FABA
; ---------------------------------------------------------------------------

loc_2FAB2:
		subq.w	#1,$38(a0)
		bpl.w	loc_2FB50

loc_2FABA:
		jsr	Random_Number.w
		andi.w	#$1F,d0
		move.w	d0,$38(a0)
		jsr	Create_New_Sprite.w
		bne.s	loc_2FB34
		move.l	(a0),(a1)
		move.w	$10(a0),$10(a1)
		jsr	Random_Number.w
		andi.w	#$F,d0
		subq.w	#8,d0
		add.w	d0,$10(a1)
		move.w	$14(a0),$14(a1)
		moveq	#0,d0
		move.b	$34(a0),d0
		movea.l	$3C(a0),a2
		move.b	(a2,d0.w),$2C(a1)
		btst	#7,$36(a0)

loc_2FB04:
		beq.s	loc_2FB34
		jsr	Random_Number.w
		andi.w	#3,d0
		bne.s	loc_2FB20
		bset	#6,$36(a0)
		bne.s	loc_2FB34
		move.b	#2,$2C(a1)

loc_2FB20:
		tst.b	$34(a0)
		bne.s	loc_2FB34
		bset	#6,$36(a0)
		bne.s	loc_2FB34
		move.b	#2,$2C(a1)

loc_2FB34:

		subq.b	#1,$34(a0)
		bpl.s	loc_2FB50
		jsr	Random_Number.w
		andi.w	#$7F,d0
		addi.w	#$80,d0
		add.w	d0,$38(a0)
		clr.w	$36(a0)

loc_2FB50:

		lea	(Ani_Bubbler).l,a1
		jsr	Animate_Sprite.w

loc_2FB5C:

		move.w	$10(a0),d0
		andi.w	#-$80,d0
		sub.w	(Camera_X_pos_coarse_back).w,d0
		cmpi.w	#$280,d0
		bhi.w	loc_2FB7E
		move.w	(Water_level).w,d0
		cmp.w	$14(a0),d0
		blo.w	loc_2FB90
		rts
; ---------------------------------------------------------------------------

loc_2FB7E:
		move.w	respawn_addr(a0),d0
		beq.s	loc_2FB8A
		movea.w	d0,a2
		bclr	#7,(a2)

loc_2FB8A:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_2FB90:
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
byte_2FB96:	dc.b 0
		dc.b 1
		dc.b 0
		dc.b 0
		dc.b 0
		dc.b 0
		dc.b 1
		dc.b 0
		dc.b 0
		dc.b 0
		dc.b 0
		dc.b 1
		dc.b 0
		dc.b 1
		dc.b 0
		dc.b 0
		dc.b 1
		dc.b 0

; =============== S U B R O U T I N E =======================================


sub_2FBA8:
		lea	(Player_1).w,a1
		bsr.s	loc_2FBB2
		lea	(Player_2).w,a1
; End of function sub_2FBA8


loc_2FBB2:
		tst.b	$2E(a1)
		bmi.w	locret_2FC7C
		move.w	$10(a1),d0
		move.w	$10(a0),d1
		subi.w	#$10,d1
		cmp.w	d0,d1
		bhs.w	locret_2FC7C
		addi.w	#$20,d1
		cmp.w	d0,d1
		blo.w	locret_2FC7C
		move.w	$14(a1),d0
		move.w	$14(a0),d1
		cmp.w	d0,d1
		bhs.w	locret_2FC7C
		addi.w	#$10,d1
		cmp.w	d0,d1
		blo.w	locret_2FC7C
		btst	#6,$2B(a1)
		bne.w	locret_2FC7C
		jsr	(Player_ResetAirTimer).l
		moveq	#$38,d0
		jsr	Play_Sound_2.w

loc_2FC06:
		clr.w	$18(a1)

loc_2FC0A:
		clr.w	$1A(a1)
		clr.w	$1C(a1)
		move.b	#$15,$20(a1)
		move.w	#$23,$32(a1)
		move.b	#0,$40(a1)
		bclr	#5,$2A(a1)
		bclr	#4,$2A(a1)
		btst	#2,$2A(a1)
		beq.w	loc_2FC6A
		cmpi.l	#Obj_Sonic,(a1)
		bne.s	loc_2FC5A
		bclr	#2,$2A(a1)
		move.b	#$13,$1E(a1)
		move.b	#9,$1F(a1)
		subq.w	#5,$14(a1)
		bra.s	loc_2FC6A
; ---------------------------------------------------------------------------

loc_2FC5A:
		move.b	#$F,$1E(a1)
		move.b	#9,$1F(a1)
		subq.w	#1,$14(a1)

loc_2FC6A:

		cmpi.b	#6,5(a0)
		beq.s	locret_2FC7C
		move.b	#6,5(a0)
		addq.b	#4,$20(a0)

locret_2FC7C:

		rts
; ---------------------------------------------------------------------------
Ani_Bubbler:	include "General/Sprites/Bubbles/Anim - Bubbler.asm"

Map_Bubbler:	include "General/Sprites/Bubbles/Map - Bubbler.asm"

; ---------------------------------------------------------------------------

Obj_37_1:
		move.l	#Map_HCZWaterRush,$C(a0)
		ori.b	#4,4(a0)
		move.w	#$437A,$A(a0)
		move.b	#4,4(a0)
		move.w	#prio(1),8(a0)
		move.b	#$40,7(a0)
		move.b	#$20,6(a0)
		move.b	#2,$22(a0)
		jsr	Create_New_Sprite3.w
		bne.w	loc_2FE28
		move.l	#loc_2FEB2,(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		subi.w	#$30,$10(a1)
		move.l	#Map_HCZWaterRushBlock,$C(a1)
		move.w	#$43D4,$A(a1)
		move.b	#$10,7(a1)
		move.b	#$20,6(a1)
		move.b	#4,4(a1)
		move.w	#prio(5),8(a1)
		move.b	#1,$22(a1)
		move.w	a1,$3C(a0)

loc_2FE28:
		move.b	#3,(__u_F7C7).w
		move.l	#loc_2FE34,(a0)

loc_2FE34:
		tst.b	(Level_trigger_array).w
		beq.s	loc_2FE58
		move.b	#3,$22(a0)
		move.b	#1,$24(a0)
		move.l	#loc_2FE5E,(a0)
		move.b	#0,(__u_F7C7).w
		move.b	#1,(PalCyc_Counters2).w

loc_2FE58:
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_2FE5E:
		subq.b	#1,$24(a0)
		bpl.s	loc_2FE9E
		move.b	#1,$24(a0)
		addq.b	#1,$22(a0)
		cmpi.b	#2,$22(a0)
		bne.s	loc_2FE98
		addi.w	#$20,$10(a0)
		cmpi.w	#$580,$10(a0)
		bne.s	loc_2FE98
		cmpi.w	#$5A0,$14(a0)
		bne.s	loc_2FE98
		subi.w	#$20,$10(a0)
		subi.w	#$20,$14(a0)

loc_2FE98:

		andi.b	#1,$22(a0)

loc_2FE9E:
		cmpi.w	#$980,$10(a0)
		blo.s	loc_2FEAC
		move.w	#$7F00,$10(a0)

loc_2FEAC:
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_2FEB2:
		tst.b	(Level_trigger_array).w
		beq.s	loc_2FED2
		move.l	#loc_2FEBE,(a0)

loc_2FEBE:
		subi.w	#$10,$14(a0)
		cmpi.w	#$560,$14(a0)
		bne.s	loc_2FED2
		move.w	#$7F00,$10(a0)

loc_2FED2:

		moveq	#0,d1
		move.b	7(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

Obj_HCZWaterWall:

		tst.b	$2C(a0)
		beq.s	loc_2FF04
		move.l	#loc_30294,(a0)
		rts
; ---------------------------------------------------------------------------

loc_2FF04:
		move.w	Player_1+y_pos.w,d0
		cmpi.w	#$500,d0
		bhs.s	loc_2FF14
		move.w	Player_2+y_pos.w,d0
		cmpi.w	#$500,d0
		bhs.s	loc_2FF14
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_2FF14:
		lea	(ArtKosM_HCZGeyserHorz).l,a1
		move.w	#-$6000,d2
		jsr	Queue_Kos_Module.w
		move.l	#loc_2FF2A,(a0)

loc_2FF2A:
		tst.b	(Kos_modules_left).w
		beq.s	loc_2FF32
		rts
; ---------------------------------------------------------------------------

loc_2FF32:
		ori.b	#4,4(a0)

loc_2FF38:
		move.w	#prio(6),8(a0)
		move.l	#Map_HCZWaterWall,$C(a0)
		move.w	#$4500,$A(a0)
		move.b	#-$80,7(a0)
		move.b	#$20,6(a0)
		bset	#6,4(a0)
		move.w	#1,$16(a0)
		lea	$18(a0),a2
		move.w	$10(a0),(a2)+
		move.w	$14(a0),(a2)+
		move.w	#$20,$30(a0)
		move.l	#loc_2FF7C,(a0)

loc_2FF7C:
		move.w	Player_2+x_pos.w,d0
		subi.w	#$60,d0
		cmp.w	$10(a0),d0
		bhs.s	.ok

		move.w	Player_1+x_pos.w,d0
		subi.w	#$60,d0
		cmp.w	$10(a0),d0
		blo.w	loc_30006

.ok		move.l	#loc_3003C,(a0)
		moveq	#$57,d0
		jsr	Play_Sound_2.w
		lea	(byte_3000C).l,a3
		move.w	$10(a0),d2
		addi.w	#$60,d2

loc_2FFA8:
		move.w	$14(a0),d3
		moveq	#7,d1

loc_2FFAE:
		jsr	Create_New_Sprite3.w
		bne.s	loc_30006
		move.l	#loc_3011A,(a1)

loc_2FFBC:
		move.l	#Map_HCZWaterWallDebris,$C(a1)
		move.w	#$4558,$A(a1)
		move.b	#-$7C,4(a1)
		move.b	(a3)+,d0
		ext.w	d0
		add.w	d2,d0
		move.w	d0,$10(a1)
		move.b	(a3)+,d0
		ext.w	d0
		add.w	d3,d0
		move.w	d0,$14(a1)
		move.w	#prio(7),8(a1)
		move.b	#$18,7(a1)
		move.b	#$18,6(a1)
		move.w	(a3)+,$18(a1)
		move.w	(a3)+,$1A(a1)

loc_2FFFE:
		move.b	d1,$22(a1)

loc_30002:
		dbf	d1,loc_2FFAE

loc_30006:

		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------
byte_3000C:	dc.b 0
		dc.b $E8
		dc.w $400
		dc.w $FF80
		dc.b 0
		dc.b $F8
		dc.w $600
		dc.w $FFC0
		dc.b 0
		dc.b 8
		dc.w $600
		dc.w $40
		dc.b 0
		dc.b $18
		dc.w $400
		dc.w $80
		dc.b 0
		dc.b $E8
		dc.w $300
		dc.w $FC80
		dc.b 0
		dc.b $F8
		dc.w $400
		dc.w $FCC0
		dc.b 0
		dc.b 8
		dc.w $300
		dc.w $100
		dc.b 0
		dc.b $18
		dc.w $500
		dc.w $FF00
; ---------------------------------------------------------------------------

loc_3003C:
		tst.w	$30(a0)
		beq.s	loc_3004A
		subq.w	#1,$30(a0)
		addq.w	#8,$10(a0)

loc_3004A:
		jsr	Create_New_Sprite3.w
		bne.w	loc_300C8
		move.l	#loc_301DE,(a1)
		move.l	$C(a0),$C(a1)
		move.b	#-$7C,4(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		move.w	(Level_frame_counter).w,d0
		jsr	Random_Number.w
		move.w	d0,d1
		andi.w	#$F,d0
		lsl.w	#3,d0
		subi.w	#$50,d0
		add.w	d0,$10(a1)
		addi.w	#$18,$14(a1)
		move.w	#$4530,$A(a1)
		lsr.w	#4,d1
		andi.w	#3,d1
		bne.s	loc_300A6
		move.w	#$45C,$A(a1)

loc_300A6:
		move.b	d1,$20(a1)
		move.w	#prio(7),8(a1)
		move.b	#$18,7(a1)
		move.b	#$18,6(a1)
		move.w	#$400,$18(a1)
		move.w	#0,$1A(a1)

loc_300C8:
		lea	$18(a0),a2
		move.w	$10(a0),(a2)+
		move.w	$14(a0),(a2)+
		tst.b	4(a0)
		bmi.s	loc_30100
		clr.b	(PalCyc_Counters2).w
		move.w	#-$1D,d0
		jsr	Play_Sound_2.w
		move.w	#-$1C,d0
		jsr	Play_Sound_2.w
		move.w	#$96,$30(a0)
		move.l	#loc_30106,(a0)
		rts
; ---------------------------------------------------------------------------

loc_30100:
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_30106:

		subq.w	#1,$30(a0)
		bmi.s	loc_3010E
		rts
; ---------------------------------------------------------------------------

loc_3010E:
		jsr	(LoadEnemyArt).l
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_3011A:

		subq.b	#1,$24(a0)
		bpl.s	loc_30130
		move.b	#2,$24(a0)
		addq.b	#1,$22(a0)
		andi.b	#7,$22(a0)

loc_30130:
		jsr	MoveSprite2.w
		addi.w	#$38,$1A(a0)
		move.w	(Water_level).w,d0
		cmp.w	$14(a0),d0
		bhs.s	loc_301A2
		move.w	#0,$1A(a0)
		asr	$18(a0)
		asr	$18(a0)
		move.l	#loc_301A8,(a0)
		jsr	Create_New_Sprite3.w
		bne.w	loc_301A2
		move.l	#loc_3023E,(a1)
		move.l	#Map_HCZWaterWall,$C(a1)
		move.w	#$2530,$A(a1)
		move.b	#-$7C,4(a1)

loc_3017E:
		move.w	$10(a0),$10(a1)
		move.w	(Water_level).w,$14(a1)
		move.w	#prio(4),8(a1)
		move.b	#$18,7(a1)
		move.b	#$18,6(a1)
		move.b	#8,$20(a1)

loc_301A2:

		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_301A8:
		subq.b	#1,$24(a0)
		bpl.s	loc_301BE
		move.b	#9,$24(a0)
		addq.b	#1,$22(a0)
		andi.b	#7,$22(a0)

loc_301BE:
		jsr	MoveSprite2.w
		addi.w	#8,$1A(a0)
		tst.b	4(a0)
		bpl.w	loc_301D8
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_301D8:

		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_301DE:
		jsr	MoveSprite2.w
		addi.w	#$28,$1A(a0)
		move.w	(Water_level).w,d0
		cmp.w	$14(a0),d0
		bhs.s	loc_30202
		move.w	d0,$14(a0)
		move.l	#loc_3021C,(a0)
		addq.b	#4,$20(a0)

loc_30202:
		tst.b	4(a0)
		bpl.w	loc_301D8
		lea	(Ani_HCZWaterWall).l,a1
		jsr	Animate_Sprite.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_3021C:
		tst.b	4(a0)
		bpl.w	loc_301D8
		lea	(Ani_HCZWaterWall).l,a1
		jsr	Animate_Sprite.w
		tst.b	5(a0)
		bne.w	loc_301D8
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_3023E:
		tst.b	4(a0)
		bpl.w	loc_301D8
		lea	(Ani_HCZWaterWall).l,a1
		jsr	Animate_SpriteIrregularDelay.w
		tst.b	5(a0)
		bne.w	loc_301D8
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
Ani_HCZWaterWall:	include "Levels/HCZ/Misc Object Data/Anim - Water Wall.asm"

; ---------------------------------------------------------------------------

loc_30294:
		moveq	#0,d1
		move.w	$10(a0),d2
		move.w	$14(a0),d3
		lea	Player_1.w,a1
		bsr.s	.chk
		lea	Player_2.w,a1
		bsr.s	.chk
		tst.b	d1
		bne.s	loc_302BE
		jmp	Delete_Sprite_If_Not_In_Range.w

.chk		move.w	$10(a1),d0
		addi.w	#$30,d0
		sub.w	d2,d0
		cmpi.w	#$60,d0
		bhs.s	loc_302B8
		move.w	$14(a1),d0
		addi.w	#$40,d0
		sub.w	d3,d0
		cmpi.w	#$10,d0
		bhs.s	loc_302B8
		addq.b	#1,d1

loc_302B8:
		rts
; ---------------------------------------------------------------------------

loc_302BE:
		lea	(ArtKosM_HCZGeyserVert).l,a1
		move.w	#-$6000,d2
		jsr	Queue_Kos_Module.w
		move.b	#1,$22(a0)
		move.b	#-$7F,(Player_1+$2E).w
		move.b	#-$7F,(Player_2+$2E).w
		move.l	#loc_302E6,(a0)

loc_302E6:
		tst.b	(Kos_modules_left).w
		beq.s	loc_302FA
		subi.w	#8,(Player_1+y_pos).w
		subi.w	#8,(Player_2+y_pos).w
		rts
; ---------------------------------------------------------------------------

loc_302FA:
		ori.b	#4,4(a0)
		move.w	#prio(6),8(a0)
		move.l	#Map_HCZWaterWall,$C(a0)
		move.w	#$4500,$A(a0)
		move.b	#$20,7(a0)
		move.b	#$60,6(a0)
		move.w	#$60,$30(a0)
		move.b	#$1C,(Player_1+anim).w
		move.b	#$1C,(Player_2+anim).w
		move.l	#loc_30338,(a0)

loc_30338:
		tst.w	$30(a0)
		beq.s	loc_30346
		subq.w	#1,$30(a0)
		subq.w	#8,$14(a0)

loc_30346:
		subi.w	#8,(Player_1+y_pos).w
		subi.w	#8,(Player_2+y_pos).w
		cmpi.w	#$28,$30(a0)
		bhi.w	locret_303E8
		move.b	#$1A,(Player_1+anim).w
		move.b	#$1A,(Player_2+anim).w
		move.l	#loc_3041A,(a0)
		moveq	#$57,d0
		jsr	Play_Sound_2.w
		move.b	#1,(PalCyc_Counters2).w
		lea	(byte_303EA).l,a3
		move.w	$10(a0),d2
		move.w	$14(a0),d3
		subi.w	#$80,d3
		moveq	#7,d1

loc_30390:
		jsr	Create_New_Sprite3.w
		bne.s	locret_303E8
		move.l	#loc_3011A,(a1)
		move.l	#Map_HCZWaterWallDebris,$C(a1)
		move.w	#$4558,$A(a1)
		move.b	#-$7C,4(a1)
		move.b	(a3)+,d0
		ext.w	d0
		add.w	d2,d0
		move.w	d0,$10(a1)
		move.b	(a3)+,d0
		ext.w	d0
		add.w	d3,d0
		move.w	d0,$14(a1)
		move.w	#prio(5),8(a1)
		move.b	#$18,7(a1)
		move.b	#$18,6(a1)
		move.w	(a3)+,$18(a1)
		move.w	(a3)+,$1A(a1)
		move.b	d1,$22(a1)

loc_303E4:
		dbf	d1,loc_30390

locret_303E8:

		rts
; ---------------------------------------------------------------------------
byte_303EA:	dc.b $E8

		dc.b 0
		dc.w $FE00
		dc.w $F500
		dc.b $F8
		dc.b 0
		dc.w $FF00
		dc.w $F400
		dc.b $E8
		dc.b 0
		dc.w $FC00
		dc.w $F800
		dc.b $F8
		dc.b 0
		dc.w $FD00
		dc.w $F600
		dc.b 8
		dc.b 0
word_30404:	dc.w $300
		dc.w $F400
		dc.b $18
		dc.b 0
		dc.w $400
word_3040C:	dc.w $F500
		dc.b 8
		dc.b 0
		dc.w $100
		dc.w $F600
		dc.b $18
		dc.b 0
		dc.w $200
		dc.w $F800
; ---------------------------------------------------------------------------

loc_3041A:
		tst.w	$30(a0)
		beq.s	loc_30470
		move.w	#-$A00,$1A(a0)

		subq.w	#1,$30(a0)

loc_3042A:
		bne.s	loc_30470
		move.l	#loc_3052A,(a0)
		lea	(Player_1).w,a1
		move.b	#0,$2E(a1)
		move.w	#0,$18(a1)
		move.w	#-$C00,$1A(a1)
		move.b	#0,$40(a1)
		lea	(Player_2).w,a1
		move.b	#0,$2E(a1)
		move.w	#0,$18(a1)
		move.w	#-$C00,$1A(a1)
		move.b	#0,$40(a1)
		move.w	#-$800,$1A(a0)

loc_30470:

		subi.w	#$A,(Player_1+y_pos).w
		subi.w	#$A,(Player_2+y_pos).w
		jsr	MoveSprite2.w
		addi.w	#$48,$1A(a0)
		jsr	Create_New_Sprite3.w
		bne.w	loc_304D4
		jsr	Random_Number.w
		move.w	d0,d1
		move.w	d0,d2
		bsr.s	sub_304DA
		addi.w	#$10,$10(a1)
		andi.w	#$F,d1
		lsl.w	#6,d1
		move.w	d1,$18(a1)
		move.w	#-$700,$1A(a1)
		move.w	d0,d2
		jsr	Create_New_Sprite3.w
		bne.w	loc_304D4
		bsr.s	sub_304DA
		subi.w	#$10,$10(a1)
		neg.w	d1
		move.w	d1,$18(a1)
		move.w	#-$700,$1A(a1)

loc_304D4:

		jmp	Sprite_OnScreen_Test.w

; =============== S U B R O U T I N E =======================================


sub_304DA:

		move.l	#loc_301DE,(a1)
		move.l	$C(a0),$C(a1)
		move.b	#-$7C,4(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		subi.w	#$50,$14(a1)
		move.w	#prio(7),8(a1)

loc_30504:
		move.b	#$18,7(a1)
		move.b	#$18,6(a1)
		move.w	#$4530,$A(a1)
		lsr.w	#4,d2
		andi.w	#3,d2
		bne.s	loc_30524
		move.w	#$45C,$A(a1)

loc_30524:
		move.b	d2,$20(a1)
		rts
; End of function sub_304DA

; ---------------------------------------------------------------------------

loc_3052A:
		tst.b	4(a0)
		bmi.s	loc_3056E
		move.w	#-$1C,d0
		jsr	Play_Sound_2.w
		move.w	#-$1D,d0
		jsr	Play_Sound_2.w
		move.w	#-$1C,d0
		jsr	Play_Sound_2.w
		move.b	#0,(PalCyc_Counters2).w
		move.w	respawn_addr(a0),d0
		beq.s	loc_30560
		movea.w	d0,a2
		bclr	#7,(a2)

loc_30560:
		move.w	#$1E,$30(a0)
		move.l	#loc_30106,(a0)
		rts
; ---------------------------------------------------------------------------

loc_3056E:
		jsr	MoveSprite2.w
		addi.w	#$48,$1A(a0)
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

Obj_HCZCGZFan:

		tst.w	(Competition_mode).w
		bne.w	loc_309CC
		movea.l	a0,a1
		tst.b	$2C(a0)
		bpl.s	loc_30602
		jsr	Create_New_Sprite3.w
		bne.w	locret_3064C
		move.l	#loc_30850,(a0)
		move.w	$10(a0),$10(a1)
		move.w	$10(a0),$40(a0)
		move.w	$14(a0),$14(a1)
		addi.w	#$1C,$14(a0)
		move.l	#Map_HCZWaterRushBlock,$C(a0)
		move.w	#$43D4,$A(a0)
		move.b	#$10,7(a0)
		move.b	#$10,6(a0)
		move.b	#4,4(a0)
		move.w	#prio(5),8(a0)
		move.w	a1,$3C(a0)
		move.b	$2C(a0),d0

loc_305E6:
		andi.w	#$30,d0
		add.w	d0,d0
		move.w	d0,$3A(a0)
		move.b	$2C(a0),$2C(a1)
		bclr	#5,$2C(a1)
		bset	#4,$2C(a1)

loc_30602:
		move.l	#Map_HCZFan,$C(a1)
		move.w	#$240B,$A(a1)
		ori.b	#4,4(a1)
		move.w	#prio(4),8(a1)
		move.b	#$10,7(a1)
		move.b	#$C,6(a1)
		move.w	$10(a1),$40(a1)
		move.b	$2C(a1),d0
		andi.w	#$F,d0
		addq.w	#8,d0
		lsl.w	#4,d0
		move.w	d0,$36(a1)
		addi.w	#$30,d0
		move.w	d0,$38(a1)
		move.l	#loc_3064E,(a1)

locret_3064C:
		rts
; ---------------------------------------------------------------------------

loc_3064E:
		move.b	$2C(a0),d0
		btst	#5,d0
		beq.s	loc_3066C
		tst.b	(Level_trigger_array).w
		beq.w	loc_30774
		bclr	#5,$2C(a0)
		bset	#4,$2C(a0)

loc_3066C:
		tst.b	$42(a0)
		bne.s	loc_306A2
		btst	#4,$2C(a0)
		bne.s	loc_306C2
		subq.w	#1,$30(a0)
		bpl.s	loc_3069A
		move.w	#0,$34(a0)
		move.w	#$78,$30(a0)

loc_3068C:
		bchg	#0,$32(a0)
		beq.s	loc_3069A
		move.w	#$B4,$30(a0)

loc_3069A:

		tst.b	$32(a0)
		beq.w	loc_306C2

loc_306A2:
		subq.b	#1,$24(a0)
		bpl.w	loc_30774
		cmpi.w	#$400,$34(a0)
		bhs.w	loc_30774
		addi.w	#$2A,$34(a0)
		move.b	$34(a0),$24(a0)
		bra.s	loc_306E0
; ---------------------------------------------------------------------------

loc_306C2:

		lea	(Player_1).w,a1
		bsr.w	loc_3077E
		lea	(Player_2).w,a1
		bsr.w	loc_3077E
		subq.b	#1,$24(a0)
		bpl.w	loc_306F2
		move.b	#0,$24(a0)

loc_306E0:
		addq.b	#1,$22(a0)
		cmpi.b	#5,$22(a0)
		blo.s	loc_306F2
		move.b	#0,$22(a0)

loc_306F2:

		tst.b	4(a0)
		bpl.s	loc_3070C
		move.b	(Level_frame_counter+1).w,d0
		addq.b	#1,d0
		andi.b	#$F,d0
		bne.s	loc_3070C
		moveq	#-$3F,d0
		jsr	Play_Sound_2.w

loc_3070C:

		btst	#6,$2C(a0)
		beq.s	loc_30774
		move.b	(Level_frame_counter+1).w,d0
		andi.b	#3,d0
		bne.s	loc_30774
		jsr	Create_New_Sprite.w
		bne.s	loc_30774
		move.l	#loc_30834,(a1)
		move.l	#Map_Bubbler,$C(a1)
		move.w	#$45C,$A(a1)
		move.b	#-$7C,4(a1)
		move.b	#4,7(a1)
		move.b	#4,7(a1)
		move.w	#prio(6),8(a1)
		move.w	$10(a0),$10(a1)
		jsr	Random_Number.w
		andi.w	#$F,d0
		subq.w	#8,d0
		add.w	d0,$10(a1)
		move.w	$14(a0),$14(a1)
		move.w	#-$800,$1A(a1)

loc_30774:

		move.w	$40(a0),d0
		jmp	Sprite_OnScreen_Test2.w
; ---------------------------------------------------------------------------

loc_3077E:

		cmpi.b	#4,5(a1)
		bhs.w	locret_3081C
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		addi.w	#$18,d0
		cmpi.w	#$30,d0
		bhs.w	locret_3081C
		moveq	#0,d1
		move.b	(OscNumbers+$16).w,d1
		add.w	$14(a1),d1
		add.w	$36(a0),d1
		sub.w	$14(a0),d1
		bcs.s	locret_3081C
		cmp.w	$38(a0),d1
		bhs.s	locret_3081C
		tst.b	$2E(a1)
		bne.s	loc_3081E
		sub.w	$36(a0),d1
		bcs.s	loc_307C6
		not.w	d1
		add.w	d1,d1

loc_307C6:
		add.w	$36(a0),d1
		neg.w	d1
		asr.w	#6,d1

loc_307CE:
		add.w	d1,$14(a1)
		bset	#1,$2A(a1)
		bclr	#4,$2A(a1)
		move.w	#0,$1A(a1)
		move.b	#0,$2F(a1)
		move.b	#0,$40(a1)
		btst	#6,$2C(a0)
		bne.s	loc_30826
		move.w	#1,$1C(a1)
		tst.b	$27(a1)
		bne.s	locret_3081C
		move.b	#1,$27(a1)

loc_3080A:
		move.b	#0,$20(a1)
		move.b	#$7F,$30(a1)
		move.b	#8,$31(a1)

locret_3081C:

		rts
; ---------------------------------------------------------------------------

loc_3081E:
		move.w	#1,$1C(a1)
		rts
; ---------------------------------------------------------------------------

loc_30826:
		move.w	#1,$1C(a1)
		move.b	#$F,$20(a1)
		rts
; ---------------------------------------------------------------------------

loc_30834:
		move.w	(Water_level).w,d0
		cmp.w	$14(a0),d0
		bhs.s	loc_3084A
		jsr	MoveSprite2.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_3084A:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_30850:	; NAT: Some older changes here
		movea.w	$3C(a0),a1
		move.w	Player_2+$14.w,d0
		cmp.b	#6,Player_2+5.w		; NAT: Check if ded
		bhs.s	.sonic			; if so, ignore
		sub.w	$14(a0),d0
		bcc.s	.derpt
		cmpi.w	#-$30,d0
		blt.s	loc_3088E
		bra.s	.sonic

.derpt		cmpi.w	#$20,d0
		bge.s	.sonic
		cmpi.w	#-$30,d0
		blt.s	loc_3088E

.sonic		move.w	(Player_1+y_pos).w,d0
		cmp.b	#6,Player_1+5.w		; NAT: Check if ded
		bhs.s	.ok			; if so, ignore
		sub.w	$14(a0),d0
		bcc.s	.derps
		cmpi.w	#-$30,d0
		blt.s	loc_3088E
		bra.s	.ok

.derps		cmpi.w	#$20,d0
		bge.s	.ok
		cmpi.w	#-$30,d0
		bge.s	loc_308B8
		bra.s	loc_3088E

.ok		tst.b	$42(a1)
		bne.s	loc_3087E
		move.b	#1,$42(a1)
		move.w	#0,$34(a1)
		moveq	#$58,d0
		jsr	Play_Sound_2.w

loc_3087E:
		move.w	$3A(a0),d1
		cmp.w	$30(a0),d1
		beq.s	loc_308B8
		addq.w	#8,$30(a0)
		bra.s	loc_308B8
; ---------------------------------------------------------------------------

loc_3088E:
		tst.b	$42(a1)
		beq.s	loc_308AE
		move.b	#0,$42(a1)
		move.b	#0,$24(a1)
		moveq	#$58,d0
		jsr	Play_Sound_2.w

loc_308AE:
		tst.w	$30(a0)
		beq.s	loc_308B8
		subq.w	#8,$30(a0)

loc_308B8:

		move.w	$30(a0),d0
		btst	#0,$2A(a0)
		beq.s	loc_308C6
		neg.w	d0

loc_308C6:
		add.w	$40(a0),d0
		move.w	d0,$10(a0)
		move.w	d0,$10(a1)
		moveq	#0,d1
		move.b	7(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		move.w	$40(a0),d0
		jmp	Sprite_OnScreen_Test2.w
; ---------------------------------------------------------------------------

Obj_HCZLargeFan:
		pea	loc_30926(pc)
		moveq	#0,d1
		lea	Player_2.w,a1
		bsr.s	.chk
		lea	Player_1.w,a1

.chk		move.w	$10(a1),d0
		subi.w	#$20,d0
		cmp.w	$10(a0),d0
		blo.s	loc_3091A
		move.w	$14(a1),d0
		subi.w	#$20,d0
		sub.w	$14(a0),d0
		cmpi.w	#$40,d0
		bhs.s	.rts
		moveq	#-1,d1

.rts		rts

loc_3091A:
		move.b	#3,(__u_F7C7).w
		jmp	Delete_Sprite_If_Not_In_Range.w
; ---------------------------------------------------------------------------

loc_30926:
		tst.b	d1
		bpl.s	loc_3091A
		lea	(ArtKosM_HCZLargeFan).l,a1
		move.w	#-$6000,d2
		jsr	Queue_Kos_Module.w
		move.l	#loc_3093C,(a0)

loc_3093C:
		tst.b	(Kos_modules_left).w
		beq.s	loc_30944
		rts
; ---------------------------------------------------------------------------

loc_30944:
		ori.b	#4,4(a0)
		move.w	#prio(4),8(a0)

loc_30950:
		move.l	#Map_HCZLargeFan,$C(a0)
		move.w	#$2500,$A(a0)
		move.b	#$18,7(a0)
		move.b	#$20,6(a0)
		move.w	#8,$30(a0)
		moveq	#$58,d0
		jsr	Play_Sound_2.w
		move.l	#loc_3097E,(a0)

loc_3097E:
		tst.w	$30(a0)
		beq.s	loc_30994
		addq.w	#8,$14(a0)
		subq.w	#1,$30(a0)
		bne.s	loc_30994
		move.b	#0,(__u_F7C7).w

loc_30994:

		move.b	(Level_frame_counter+1).w,d0
		andi.b	#$F,d0
		bne.s	loc_309A6
		moveq	#-$40,d0
		jsr	Play_Sound_2.w

loc_309A6:
		subq.b	#1,$24(a0)
		bpl.w	loc_309C6
		move.b	#0,$24(a0)
		addq.b	#1,$22(a0)
		cmpi.b	#5,$22(a0)
		blo.s	loc_309C6
		move.b	#0,$22(a0)

loc_309C6:

		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_309CC:
		move.l	#Map_CGZFan,$C(a0)
		move.w	#$6300,$A(a0)
		ori.b	#4,4(a0)
		move.w	#prio(4),8(a0)
		move.b	#$10,7(a0)
		move.b	#4,6(a0)
		move.b	$2C(a0),d0
		andi.w	#$F,d0
		addq.w	#8,d0
		lsl.w	#4,d0
		move.w	d0,$36(a0)
		addi.w	#$30,d0
		move.w	d0,$38(a0)
		move.l	#loc_30A10,(a0)

loc_30A10:
		lea	(Player_1).w,a1
		bsr.w	sub_30A38
		lea	(Player_2).w,a1
		bsr.w	sub_30A38
		addq.b	#1,$22(a0)
		cmpi.b	#3,$22(a0)
		blo.s	loc_30A32
		move.b	#0,$22(a0)

loc_30A32:
		jmp	Draw_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_30A38:

		cmpi.b	#4,5(a1)
		bhs.w	locret_30ACE
		tst.b	$2E(a1)
		bne.w	locret_30ACE
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		addi.w	#$14,d0
		cmpi.w	#$28,d0
		bhs.s	locret_30ACE
		moveq	#0,d1
		move.b	(OscNumbers+$16).w,d1
		add.w	$14(a1),d1

loc_30A66:
		add.w	$36(a0),d1
		sub.w	$14(a0),d1
		bcs.s	locret_30ACE
		cmp.w	$38(a0),d1
		bhs.s	locret_30ACE
		sub.w	$36(a0),d1
		bcs.s	loc_30A80
		not.w	d1
		add.w	d1,d1

loc_30A80:
		add.w	$36(a0),d1
		neg.w	d1
		asr.w	#6,d1
		add.w	d1,$14(a1)
		bset	#1,$2A(a1)
		bclr	#4,$2A(a1)
		move.w	#0,$1A(a1)
		move.b	#0,$2F(a1)
		move.b	#0,$40(a1)
		move.w	#1,$1C(a1)
		tst.b	$27(a1)
		bne.s	locret_30ACE
		move.b	#1,$27(a1)
		move.b	#0,$20(a1)
		move.b	#$7F,$30(a1)
		move.b	#8,$31(a1)

locret_30ACE:
		rts
; End of function sub_30A38

; ---------------------------------------------------------------------------

Obj_HCZHandLauncher:

		ori.b	#4,4(a0)
		move.w	#prio(4),8(a0)
		move.l	#Map_HCZHandLauncher,$C(a0)
		move.w	#$23E4,$A(a0)
		move.b	#$20,7(a0)
		move.b	#$40,6(a0)
		move.w	$14(a0),$32(a0)
		move.b	#6,$22(a0)
		move.w	#$50,$30(a0)
		bset	#7,$2A(a0)

loc_30B0E:
		jsr	Create_New_Sprite3.w
		bne.s	loc_30B52
		move.l	#loc_30DEC,(a1)
		move.l	#Map_HCZHandLauncher,$C(a1)
		move.w	#$23E4,$A(a1)
		move.b	4(a0),4(a1)
		move.b	#$20,7(a1)
		move.b	#$30,7(a1)
		move.w	#prio(5),8(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		move.w	a0,$3C(a1)

loc_30B52:
		move.l	#loc_30B58,(a0)

loc_30B58:

		move.w	$10(a0),d1
		subi.w	#$20,d1
		move.w	Player_1+x_pos.w,d0
		sub.w	d1,d0
		cmpi.w	#$40,d0
		blo.s	loc_30B78
		move.w	Player_2+x_pos.w,d0
		sub.w	d1,d0
		cmpi.w	#$40,d0
		bhs.s	loc_30BD6

loc_30B78:
		tst.b	$34(a0)
		beq.s	loc_30BB0
		move.b	#7,$22(a0)
		move.w	#prio(1),8(a0)
		tst.w	$36(a0)
		beq.s	loc_30B96
		subq.w	#1,$36(a0)
		bra.s	loc_30BD0
; ---------------------------------------------------------------------------

loc_30B96:
		tst.w	$30(a0)
		beq.s	loc_30BA2
		subq.w	#8,$30(a0)
		bra.s	loc_30BD0
; ---------------------------------------------------------------------------

loc_30BA2:
		move.l	#loc_30C06,(a0)
		move.w	#$3B,$36(a0)
		bra.s	loc_30BD0
; ---------------------------------------------------------------------------

loc_30BB0:
		move.w	#$13,$36(a0)
		move.b	#6,$22(a0)
		move.w	#prio(4),8(a0)
		cmpi.w	#$18,$30(a0)
		bls.s	loc_30BD0
		subq.w	#8,$30(a0)
		bra.s	loc_30BE2
; ---------------------------------------------------------------------------

loc_30BD0:

		bsr.w	sub_30CE0
		bra.s	loc_30BE2
; ---------------------------------------------------------------------------

loc_30BD6:
		cmpi.w	#$50,$30(a0)
		beq.s	loc_30BE2
		addq.w	#8,$30(a0)

loc_30BE2:

		move.w	$30(a0),d0
		add.w	$32(a0),d0
		move.w	d0,$14(a0)
		move.w	#$20,d1
		move.w	#$11,d3
		move.w	$10(a0),d4
		jsr	SolidObjectTop.w
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_30C06:
		tst.w	$36(a0)
		beq.s	loc_30C16
		subq.w	#1,$36(a0)
		bsr.w	sub_30CE0
		bra.s	loc_30C50
; ---------------------------------------------------------------------------

loc_30C16:
		cmpi.w	#$50,$30(a0)
		bne.s	loc_30C34
		move.b	#0,$34(a0)
		move.l	#loc_30B58,(a0)
		moveq	#-$4A,d0
		jsr	Play_Sound_2.w
		bra.s	loc_30C50
; ---------------------------------------------------------------------------

loc_30C34:
		cmpi.w	#$18,$30(a0)
		bne.s	loc_30C4C
		bsr.w	sub_30C7C
		move.b	#6,$22(a0)
		move.w	#prio(4),8(a0)

loc_30C4C:
		addq.w	#8,$30(a0)

loc_30C50:

		move.w	$30(a0),d0
		add.w	$32(a0),d0
		move.w	d0,$14(a0)
		cmpi.w	#$18,$30(a0)
		bhi.s	loc_30C76
		move.w	#$20,d1
		move.w	#$11,d3

loc_30C6C:
		move.w	$10(a0),d4
		jsr	SolidObjectTop.w

loc_30C76:
		jmp	Sprite_OnScreen_Test.w

; =============== S U B R O U T I N E =======================================


sub_30C7C:
		lea	(Player_1).w,a1
		moveq	#3,d6
		bsr.w	sub_30C8C
		lea	(Player_2).w,a1
		moveq	#4,d6
; End of function sub_30C7C


; =============== S U B R O U T I N E =======================================


sub_30C8C:
		cmp.b	#4,5(a1)		; NAT: Check if hurt
		bhs.s	loc_30CCC		; if yes, do not lunch place

		bclr	d6,$35(a0)
		beq.s	loc_30CCC
		move.w	#$1000,$1C(a1)
		move.w	#$1000,$18(a1)
		move.w	#0,$1A(a1)
		btst	#0,$2A(a0)
		beq.s	loc_30CB4

loc_30CAC:
		neg.w	$1C(a1)
		neg.w	$18(a1)

loc_30CB4:
		move.b	#0,$20(a1)
		move.b	#0,$2E(a1)
		bclr	#3,$2A(a1)
		bclr	d6,$2A(a0)
		rts
; ---------------------------------------------------------------------------

loc_30CCC:
		bclr	d6,$2A(a0)
		beq.s	locret_30CDE
		bclr	#3,$2A(a1)
		bset	#1,$2A(a1)

locret_30CDE:
		rts
; End of function sub_30C8C


; =============== S U B R O U T I N E =======================================


sub_30CE0:

		lea	(Player_1).w,a1
		moveq	#3,d6
		move.b	(Ctrl_1_pressed_logical).w,d0
		bsr.w	sub_30CF8
		lea	(Player_2).w,a1
		moveq	#4,d6
		move.b	(Ctrl_2_pressed_logical).w,d0
; End of function sub_30CE0


; =============== S U B R O U T I N E =======================================


sub_30CF8:
		btst	d6,$35(a0)
		beq.s	loc_30D4E
		andi.b	#$70,d0
		beq.s	locret_30D4C
		bclr	d6,$35(a0)
		bclr	d6,$2A(a0)
		move.w	#$800,$1C(a1)
		move.w	#$800,$18(a1)
		move.w	#-$400,$1A(a1)
		btst	#0,$2A(a0)
		beq.s	loc_30D2E
		neg.w	$1C(a1)
		neg.w	$18(a1)

loc_30D2E:
		move.b	#0,$2E(a1)
		bclr	#3,$2A(a1)
		bset	#1,$2A(a1)
		tst.b	$35(a0)
		bne.s	locret_30D4C
		move.b	#0,$34(a0)

locret_30D4C:

		rts
; ---------------------------------------------------------------------------

loc_30D4E:
		btst	d6,$2A(a0)
		beq.w	locret_30DEA
		tst.b	$34(a0)
		bne.s	loc_30D6E
		move.w	$10(a1),d0
		addi.w	#8,d0
		sub.w	$10(a0),d0
		cmpi.w	#$10,d0
		bhs.s	locret_30DEA

loc_30D6E:
		tst.b	$2E(a1)
		bne.s	locret_30DEA
		tst.b	(Debug_On).w
		bne.s	locret_30DEA
		bset	d6,$35(a0)
		moveq	#$3C,d0
		jsr	Play_Sound_2.w
		move.b	#0,$20(a1)
		move.b	#$13,$1E(a1)
		move.b	#9,$1F(a1)
		bclr	#2,$2A(a1)
	;	cmpi.l	#Obj_Tails,(a1)		; NAT: Disable, Tails is as high as Sonic
	;	bne.s	loc_30DAC
	;	move.b	#$F,$1E(a1)

loc_30DAC:
		move.b	#1,$2E(a1)
		bclr	#5,$2A(a1)
		move.w	$10(a0),$10(a1)
		subq.w	#2,$10(a1)
		move.w	#$1000,$1C(a1)
		bclr	#0,$2A(a1)
		btst	#0,$2A(a0)
		beq.s	loc_30DE4
		addq.w	#4,$10(a1)
		neg.w	$1C(a1)
		bset	#0,$2A(a1)

loc_30DE4:
		move.b	#1,$34(a0)

locret_30DEA:

		rts
; End of function sub_30CF8

; ---------------------------------------------------------------------------

loc_30DEC:
		movea.w	$3C(a0),a1
		move.w	$14(a1),$14(a0)
		cmpi.w	#$18,$30(a1)
		bls.s	loc_30E00
		rts
; ---------------------------------------------------------------------------

loc_30E00:
		addq.b	#1,$22(a0)
		cmpi.b	#6,$22(a0)
		blo.s	loc_30E12
		move.b	#0,$22(a0)

loc_30E12:
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------
byte_30E18:	dc.b $10
		dc.b $20
		dc.w $43D4
		dc.b 8
		dc.b $20
		dc.w $4416
		dc.b $10
		dc.b $20
		dc.w $236B
; ---------------------------------------------------------------------------

Obj_Door:

		moveq	#0,d0
		move.b	$2C(a0),d0
		bmi.w	loc_30FD2
		move.b	d0,$22(a0)
		add.w	d0,d0
		add.w	d0,d0
		lea	byte_30E18(pc,d0.w),a1
		move.b	(a1)+,7(a0)
		move.b	(a1)+,6(a0)
		move.w	(a1)+,$A(a0)
		move.l	#Map_HCZCNZDEZDoor,$C(a0)
		ori.b	#4,4(a0)
		move.w	#prio(6),8(a0)
		move.w	$14(a0),$32(a0)
		move.w	$10(a0),d2
		move.w	d2,d3
		subi.w	#$200,d2
		addi.w	#$18,d3
		btst	#0,$2A(a0)
		beq.s	loc_30E7E
		subi.w	#-$1E8,d2
		addi.w	#$1E8,d3

loc_30E7E:
		move.w	d2,$34(a0)
		move.w	d3,$36(a0)
		move.l	#loc_30E8C,(a0)

loc_30E8C:
		btst	#0,$2A(a0)
		bne.s	loc_30EA8
		move.w	$34(a0),d2
		move.w	$10(a0),d3
		tst.b	$38(a0)
		beq.s	loc_30EBA
		move.w	$36(a0),d3
		bra.s	loc_30EBA
; ---------------------------------------------------------------------------

loc_30EA8:
		move.w	$10(a0),d2

loc_30EAC:
		move.w	$36(a0),d3
		tst.b	$38(a0)
		beq.s	loc_30EBA
		move.w	$34(a0),d2

loc_30EBA:

		move.w	$32(a0),d4
		move.w	d4,d5
		subi.w	#$20,d4
		addi.w	#$20,d5
		move.b	#0,$38(a0)
		lea	(Player_1).w,a1
		bsr.w	sub_30F58
		lea	(Player_2).w,a1
		bsr.s	sub_30F58
		tst.b	$38(a0)
		beq.s	loc_30F0A
		cmpi.w	#$40,$30(a0)
		beq.s	loc_30F34
		addq.w	#8,$30(a0)
		cmpi.w	#$40,$30(a0)
		bne.s	loc_30F28
		moveq	#$58,d0
		cmpi.b	#$B,(Current_zone).w
		bne.s	loc_30F02
		moveq	#$58,d0

loc_30F02:
		jsr	Play_Sound_2.w
		bra.s	loc_30F28
; ---------------------------------------------------------------------------

loc_30F0A:
		tst.w	$30(a0)
		beq.s	loc_30F34
		subq.w	#8,$30(a0)
		bne.s	loc_30F28
		moveq	#$58,d0
		cmpi.b	#$B,(Current_zone).w
		bne.s	loc_30F22
		moveq	#$58,d0

loc_30F22:
		jsr	Play_Sound_2.w

loc_30F28:

		move.w	$32(a0),d0
		sub.w	$30(a0),d0
		move.w	d0,$14(a0)

loc_30F34:

		moveq	#0,d1
		move.b	7(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		jmp	Sprite_OnScreen_Test.w

; =============== S U B R O U T I N E =======================================


sub_30F58:

		move.w	$10(a1),d0
		cmp.w	d2,d0
		blt.w	locret_30F84
		cmp.w	d3,d0
		bhs.w	locret_30F84
		move.w	$14(a1),d0
		cmp.w	d4,d0
		blo.w	locret_30F84
		cmp.w	d5,d0
		bhs.w	locret_30F84
		tst.b	$2E(a1)
		bmi.s	locret_30F84
		move.b	#1,$38(a0)

locret_30F84:
		rts
; End of function sub_30F58

; ---------------------------------------------------------------------------
Map_HCZCNZDEZDoor:include "Levels/HCZ/Misc Object Data/Map - (&CNZ &DEZ) Door.asm"

byte_30FCE:	dc.b $20
		dc.b 8
		dc.w $4416
; ---------------------------------------------------------------------------

loc_30FD2:
		andi.w	#$7F,d0
		move.b	d0,$22(a0)
		add.w	d0,d0
		add.w	d0,d0
		lea	byte_30FCE(pc,d0.w),a1
		move.b	(a1)+,7(a0)
		move.b	(a1)+,6(a0)
		move.w	(a1)+,$A(a0)
		move.l	#Map_CNZDoorHorizontal,$C(a0)
		ori.b	#4,4(a0)
		move.w	#prio(4),8(a0)
		move.w	$10(a0),$32(a0)

loc_31008:
		move.w	$14(a0),d2
		move.w	d2,d3

loc_3100E:
		subi.w	#$100,d2

loc_31012:
		addi.w	#$18,d3

loc_31016:
		btst	#1,$2A(a0)
		beq.s	loc_31026
		subi.w	#-$E8,d2
		addi.w	#$E8,d3

loc_31026:
		move.w	d2,$34(a0)
		move.w	d3,$36(a0)
		move.l	#loc_31034,(a0)

loc_31034:
		btst	#1,$2A(a0)
		bne.s	loc_31050
		move.w	$34(a0),d2
		move.w	$14(a0),d3
		tst.b	$38(a0)
		beq.s	loc_31062
		move.w	$36(a0),d3
		bra.s	loc_31062
; ---------------------------------------------------------------------------

loc_31050:
		move.w	$14(a0),d2
		move.w	$36(a0),d3
		tst.b	$38(a0)
		beq.s	loc_31062
		move.w	$34(a0),d2

loc_31062:

		move.w	$32(a0),d4
		move.w	d4,d5
		subi.w	#$20,d4
		addi.w	#$20,d5

loc_31070:
		move.b	#0,$38(a0)
		lea	(Player_1).w,a1
		bsr.s	sub_310DA
		lea	(Player_2).w,a1
		bsr.s	sub_310DA
		tst.b	$38(a0)
		beq.s	loc_31096
		cmpi.w	#$40,$30(a0)
		beq.s	loc_310B6
		addq.w	#8,$30(a0)
		bra.s	loc_310A0
; ---------------------------------------------------------------------------

loc_31096:
		tst.w	$30(a0)
		beq.s	loc_310B6
		subq.w	#8,$30(a0)

loc_310A0:
		move.w	$30(a0),d0
		btst	#0,$2A(a0)
		beq.s	loc_310AE
		neg.w	d0

loc_310AE:
		add.w	$32(a0),d0

loc_310B2:
		move.w	d0,$10(a0)

loc_310B6:

		moveq	#0,d1
		move.b	7(a0),d1

loc_310BC:
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w

loc_310D4:
		jmp	Sprite_OnScreen_Test.w

; =============== S U B R O U T I N E =======================================


sub_310DA:

		move.w	$14(a1),d0
		cmp.w	d2,d0
		blt.w	locret_31106

loc_310E4:
		cmp.w	d3,d0
		bhs.w	locret_31106
		move.w	$10(a1),d0
		cmp.w	d4,d0
		blo.w	locret_31106
		cmp.w	d5,d0
		bhs.w	locret_31106
		tst.b	$2E(a1)
		bmi.s	locret_31106
		move.b	#1,$38(a0)

locret_31106:
		rts
; End of function sub_310DA

; ---------------------------------------------------------------------------
Map_CNZDoorHorizontal:include "Levels/CNZ/Misc Object Data/Map - Door Horizontal.asm"

word_31124:	dc.w   $B28,  $CD8
		dc.w   $BA8,  $CD8
		dc.w   $BA8,  $CD8
		dc.w   $EA8, $1058
		dc.w  $11A8, $12D8
		dc.w  $1928, $19D8
		dc.w  $21A8, $2358
		dc.w  $21A8, $2358
		dc.w  $22A8, $2458
		dc.w  $23A8, $2558
		dc.w  $2528, $26D8
		dc.w  $26A8, $27D8
		dc.w  $26A8, $2958	; $C
		dc.w  $2728, $28D8
		dc.w  $3328, $3458
		dc.w  $3328, $33D8
; ---------------------------------------------------------------------------

Obj_HCZConveyorBelt:
		lea	(HCZ_Conveyors).w,a1
		moveq	#0,d0
		move.b	$2C(a0),d0

		tst.b	(a1,d0.w)
		beq.s	loc_31186
		move.w	respawn_addr(a0),d0
		beq.s	loc_31180
		movea.w	d0,a2
		bclr	#7,(a2)

loc_31180:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_31186:
		st.b	(a1,d0.w)
		andi.w	#$F,d0
		lsl.w	#2,d0
		lea	word_31124(pc,d0.w),a1
		move.w	(a1)+,d0
		move.w	d0,$3C(a0)
		btst	#0,$2A(a0)
		bne.s	loc_311A6
		subq.w	#8,d0

loc_311A6:
		move.w	d0,$40(a0)
		move.w	(a1)+,d0
		move.w	d0,$3E(a0)
		btst	#0,$2A(a0)
		beq.s	loc_311BA
		addq.w	#8,d0

loc_311BA:
		move.w	d0,$42(a0)
		move.l	#loc_311C4,(a0)

loc_311C4:
		lea	$32(a0),a2
		lea	(Player_1).w,a1
		move.w	(Ctrl_1_logical).w,d1
		moveq	#0,d2
		bsr.s	sub_31226

		addq.w	#1,a2
		lea	(Player_2).w,a1
		move.w	(Ctrl_2_logical).w,d1
		moveq	#1,d2
		bsr.s	sub_31226
		move.w	(Camera_X_pos_coarse_back).w,d1
		move.w	$3C(a0),d0
		andi.w	#-$80,d0

loc_311EE:
		subi.w	#$280,d0
		cmp.w	d0,d1
		blo.s	loc_31204
		move.w	$3E(a0),d0
		andi.w	#-$80,d0
		cmp.w	d0,d1
		bhi.s	loc_31204
		rts
; ---------------------------------------------------------------------------

loc_31204:

		lea	(HCZ_Conveyors).w,a1
		moveq	#0,d0
		move.b	$2C(a0),d0
		clr.b	(a1,d0.w)
		move.w	respawn_addr(a0),d0
		beq.s	loc_31220
		movea.w	d0,a2
		bclr	#7,(a2)

loc_31220:
		jmp	Delete_Current_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_31226:

		tst.b	(a2)
		beq.w	loc_31322
		cmpi.b	#4,5(a1)
		bhs.w	loc_312D4

loc_3123E:
		btst	#$A,d1
		beq.s	loc_31260
		subq.w	#1,$10(a1)
		subq.b	#1,6(a2)
		bpl.s	loc_31260
		move.b	#7,6(a2)
		addi.b	#$10,8(a2)
		andi.b	#$10,8(a2)

loc_31260:

		btst	#$B,d1
		beq.s	loc_31282
		addq.w	#1,$10(a1)
		subq.b	#1,6(a2)
		bpl.s	loc_31282
		move.b	#7,6(a2)
		addi.b	#$10,8(a2)
		andi.b	#$10,8(a2)

loc_31282:

		andi.w	#$70,d1
		bne.w	loc_312C0
		moveq	#2,d0
		btst	#0,$2A(a0)
		beq.s	loc_31296
		neg.w	d0

loc_31296:
		add.w	d0,$10(a1)
		move.w	$10(a1),d0
		cmp.w	$40(a0),d0
		blo.s	loc_312D4
		cmp.w	$42(a0),d0
		bhs.s	loc_312D4
		bsr.w	sub_3145A
		moveq	#0,d0
		move.b	$22(a1),d0
		move.l	a2,-(sp)
		jsr	(Tails_Carry_LoadPLC).l
		movea.l	(sp)+,a2
		rts
; ---------------------------------------------------------------------------

loc_312C0:
		move.w	#-$500,$1A(a1)
		btst	#6,$2A(a1)
		beq.s	loc_312D4
		move.w	#-$200,$1A(a1)

loc_312D4:

		clr.b	(a2)
		move.b	#$3C,2(a2)
		btst	#6,$2A(a1)
		beq.s	loc_312EA
		move.b	#$5A,2(a2)

loc_312EA:
		andi.b	#-4,$2E(a1)
		bset	#1,$2A(a1)
		move.b	#1,$40(a1)

loc_312FC:
		move.b	#$E,$1E(a1)
		move.b	#7,$1F(a1)

loc_31308:
		move.b	#2,$20(a1)
		bset	#2,$2A(a1)
		bclr	#4,$2A(a1)
		move.b	#0,$27(a1)
		rts
; ---------------------------------------------------------------------------

loc_31322:
		tst.b	2(a2)
		beq.s	loc_3132E
		subq.b	#1,2(a2)
		rts
; ---------------------------------------------------------------------------

loc_3132E:
		move.w	$10(a1),d0
		cmp.w	$40(a0),d0
		blo.w	locret_313D4
		cmp.w	$42(a0),d0
		bhs.w	locret_313D4

		cmpi.w	#1,$1C(a1)
		beq.w	loc_313D6

		move.w	$14(a0),d0
		addi.w	#$14,d0
		cmp.w	$14(a1),d0
		bhs.s	locret_313D4
		addi.w	#$10,d0
		cmp.w	$14(a1),d0
		blo.s	locret_313D4

		cmpi.b	#4,5(a1)
		bhs.s	locret_313D4
		tst.b	$2E(a1)
		bne.s	locret_313D4
		tst.w	$1A(a1)
		bmi.s	locret_313D4

		clr.w	$18(a1)
		clr.w	$1A(a1)
		clr.w	$1C(a1)
		andi.b	#-4,4(a1)
		move.w	$14(a0),d0
		addi.w	#$14,d0
		move.w	d0,$14(a1)
		move.b	#0,$20(a1)
		move.b	#3,$2E(a1)
		move.b	#$63,$22(a1)
		move.b	#0,4(a2)
		move.b	#0,6(a2)

loc_313BA:
		move.b	#0,8(a2)
		move.b	#1,(a2)
		moveq	#0,d0

loc_313C6:
		move.b	$22(a1),d0
		move.l	a2,-(sp)
		jsr	(Tails_Carry_LoadPLC).l
		movea.l	(sp)+,a2

locret_313D4:

		rts
; ---------------------------------------------------------------------------

loc_313D6:
		move.w	$14(a0),d0
		subi.w	#$14,d0
		cmp.w	$14(a1),d0
		bhs.s	locret_313D4
		addi.w	#$10,d0
		cmp.w	$14(a1),d0
		blo.s	locret_313D4

		cmpi.b	#4,5(a1)
		bhs.s	locret_313D4
		tst.b	$2E(a1)
		bne.s	locret_313D4

		clr.w	$18(a1)
		clr.w	$1A(a1)
		clr.w	$1C(a1)
		andi.b	#-4,4(a1)
		move.w	$14(a0),d0
		subi.w	#$14,d0
		move.w	d0,$14(a1)
		move.b	#0,$20(a1)
		move.b	#3,$2E(a1)
		move.b	#$65,$22(a1)
		move.b	#-$80,4(a2)
		move.b	#0,6(a2)

loc_3143E:
		move.b	#0,8(a2)
		move.b	#1,(a2)
		moveq	#0,d0
		move.b	$22(a1),d0
		move.l	a2,-(sp)
		jsr	(Tails_Carry_LoadPLC).l
		movea.l	(sp)+,a2
		rts
; End of function sub_31226


; =============== S U B R O U T I N E =======================================


sub_3145A:
		tst.w	$1C(a1)
		bne.s	loc_31480
		move.b	4(a2),d0
		beq.s	loc_3147E
		bpl.s	loc_31472
		addi.b	#6,d0
		bcc.s	loc_31470
		moveq	#0,d0

loc_31470:
		bra.s	loc_3147A
; ---------------------------------------------------------------------------

loc_31472:
		subi.b	#6,d0
		bcc.s	loc_3147A
		moveq	#0,d0

loc_3147A:

		move.b	d0,4(a2)

loc_3147E:
		bra.s	loc_314AA
; ---------------------------------------------------------------------------

loc_31480:
		clr.w	$1C(a1)
		move.b	4(a2),d0
		subi.b	#-$80,d0
		beq.s	loc_314AA
		bpl.s	loc_3149A
		addi.b	#6,d0
		bcc.s	loc_31498
		moveq	#0,d0

loc_31498:
		bra.s	loc_314A2
; ---------------------------------------------------------------------------

loc_3149A:
		subi.b	#6,d0
		bcc.s	loc_314A2
		moveq	#0,d0

loc_314A2:

		addi.b	#-$80,d0
		move.b	d0,4(a2)

loc_314AA:

		moveq	#0,d0
		move.b	4(a2),d0
		lsr.b	#4,d0
		add.b	8(a2),d0
		move.b	byte_314D2(pc,d0.w),d1
		move.b	d1,$22(a1)
		andi.w	#$F,d0
		move.b	byte_314F2(pc,d0.w),d1
		ext.w	d1
		add.w	$14(a0),d1
		move.w	d1,$14(a1)
		rts
; End of function sub_3145A

; ---------------------------------------------------------------------------
byte_314D2:	dc.b  $94, $63, $64, $64, $65, $65, $65, $66, $66, $66, $66, $67, $67, $67, $68, $68, $95, $63, $64, $64
		dc.b  $65, $65, $65, $66, $66, $66, $66, $67, $67, $67, $68, $68
byte_314F2:	dc.b  $14, $14,	 $B,  $B, $F1, $F1, $F1, $EC, $EC, $EC,	$EC, $F4, $F4, $F4, $FE, $FE
; ---------------------------------------------------------------------------

Obj_HCZConveryorSpike:

		moveq	#0,d0
		move.b	$2C(a0),d0
		andi.w	#$F,d0
		lsl.w	#2,d0
		lea	word_31124(pc),a1
		lea	(a1,d0.w),a1
		move.w	(a1)+,$3C(a0)
		move.w	(a1)+,$3E(a0)
		move.l	#Map_HCZConveyorSpike,$C(a0)
		move.w	#$243E,$A(a0)
		ori.b	#4,4(a0)
		move.w	#prio(5),8(a0)
		move.b	#$C,7(a0)
		move.b	#$C,6(a0)
		move.b	#-$75,$28(a0)
		move.w	$10(a0),$30(a0)

loc_31550:
		move.w	$14(a0),$32(a0)
		btst	#0,$2A(a0)
		beq.s	loc_3156E

loc_3155E:
		addi.w	#$18,$14(a0)
		move.l	#loc_315D2,(a0)
		bra.w	loc_315D2
; ---------------------------------------------------------------------------

loc_3156E:
		subi.w	#$18,$14(a0)
		move.w	#$40,$26(a0)
		move.l	#loc_31580,(a0)

loc_31580:

		addq.w	#2,$10(a0)
		move.w	$10(a0),d0
		cmp.w	$3E(a0),d0
		bne.s	loc_3159A
		move.l	#loc_3159E,(a0)

loc_31594:
		move.w	$10(a0),$30(a0)

loc_3159A:
		bra.w	loc_31626
; ---------------------------------------------------------------------------

loc_3159E:
		subq.w	#2,$26(a0)
		andi.w	#$7E,$26(a0)
		move.w	$26(a0),d0
		bne.s	loc_315B4
		move.l	#loc_315D2,(a0)

loc_315B4:
		lea	word_31664(pc),a1
		move.w	(a1,d0.w),d1
		move.w	$20(a1,d0.w),d2
		add.w	$30(a0),d1
		add.w	$32(a0),d2
		move.w	d1,$10(a0)
		move.w	d2,$14(a0)
		bra.s	loc_31626
; ---------------------------------------------------------------------------

loc_315D2:

		subq.w	#2,$10(a0)
		move.w	$10(a0),d0
		cmp.w	$3C(a0),d0
		bne.s	loc_315EC
		move.l	#loc_315EE,(a0)
		move.w	$10(a0),$30(a0)

loc_315EC:
		bra.s	loc_31626
; ---------------------------------------------------------------------------

loc_315EE:
		subq.w	#2,$26(a0)
		andi.w	#$7E,$26(a0)
		move.w	$26(a0),d0
		cmpi.w	#$40,$26(a0)
		bne.s	loc_3160A
		move.l	#loc_31580,(a0)

loc_3160A:
		lea	word_31664(pc),a1
		move.w	(a1,d0.w),d1
		move.w	$20(a1,d0.w),d2
		add.w	$30(a0),d1
		add.w	$32(a0),d2
		move.w	d1,$10(a0)
		move.w	d2,$14(a0)

loc_31626:

		move.w	(Camera_X_pos_coarse_back).w,d1

loc_3162A:
		move.w	$3C(a0),d0
		andi.w	#-$80,d0
		subi.w	#$280,d0
		cmp.w	d0,d1
		blo.s	loc_31652
		move.w	$3E(a0),d0
		andi.w	#-$80,d0
		cmp.w	d0,d1
		bhi.s	loc_31652
		jsr	Add_SpriteToCollisionResponseList.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_31652:

		move.w	respawn_addr(a0),d0
		beq.s	loc_3165E
		movea.w	d0,a2
		bclr	#7,(a2)

loc_3165E:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------
word_31664:	dc.w 0

		dc.w 2
		dc.w 4
		dc.w 6
		dc.w 9
		dc.w $B
		dc.w $D
		dc.w $F
		dc.w $10
		dc.w $12
		dc.w $13
		dc.w $15
		dc.w $16
		dc.w $16
		dc.w $17
		dc.w $17
		dc.w $18
		dc.w $17
		dc.w $17
		dc.w $16
		dc.w $16
		dc.w $15
		dc.w $13
		dc.w $12
		dc.w $10
		dc.w $F
		dc.w $D
		dc.w $B
		dc.w 9
		dc.w 6
		dc.w 4
		dc.w 2
		dc.w 0
		dc.w $FFFD
		dc.w $FFFB
		dc.w $FFF9
		dc.w $FFF6
		dc.w $FFF4
		dc.w $FFF2
		dc.w $FFF0
		dc.w $FFEF
		dc.w $FFED
		dc.w $FFEC
		dc.w $FFEA
		dc.w $FFE9
		dc.w $FFE9
		dc.w $FFE8
		dc.w $FFE8
		dc.w $FFE8
		dc.w $FFE8
		dc.w $FFE8
		dc.w $FFE9
		dc.w $FFE9
		dc.w $FFEA
		dc.w $FFEC
		dc.w $FFED
		dc.w $FFEF
		dc.w $FFF0
		dc.w $FFF2
		dc.w $FFF4
		dc.w $FFF6
		dc.w $FFF9
		dc.w $FFFB
		dc.w $FFFD
word_316E4:	dc.w 0
		dc.w 2
		dc.w 4
		dc.w 6
		dc.w 9
		dc.w $B
		dc.w $D
		dc.w $F
		dc.w $10
		dc.w $12
		dc.w $13
		dc.w $15
		dc.w $16
		dc.w $16
		dc.w $17
		dc.w $17
; ---------------------------------------------------------------------------

Obj_CNZBalloon:

		move.l	#Map_CNZBalloon,$C(a0)
		move.w	#$351,$A(a0)
		ori.b	#4,4(a0)
		move.w	#prio(5),8(a0)
		move.b	#$10,7(a0)
		move.b	#$20,6(a0)
		move.b	#-$29,$28(a0)
		move.w	$14(a0),$32(a0)
		move.b	$2C(a0),d0
		add.b	d0,d0
		andi.b	#$E,d0
		move.b	d0,$20(a0)

		cmp.b	#4*2,d0			; NAT: Check if this is the red balloon
		bne.s	loc_3174A		; if not, skip
		move.l	#ArtUnc_CNZBalloon,d1
		move.w	#$A240,d2
		move.w	#$160/2,d3
		jsr	Add_To_DMA_Queue.w	; DMA red balloon gfx

loc_3174A:
		jsr	Random_Number.w
		move.b	d0,$26(a0)
		move.l	#loc_31754,(a0)

loc_31754:
		tst.b	$29(a0)
		beq.s	loc_31776
		lea	(Player_1).w,a1
		bclr	#0,$29(a0)
		beq.s	loc_31768
		bsr.s	sub_317AE

loc_31768:
		lea	(Player_2).w,a1
		bclr	#1,$29(a0)
		beq.s	loc_31776
		bsr.s	sub_317AE

loc_31776:

		lea	(Ani_CNZBalloon).l,a1
		jsr	Animate_Sprite.w
	;	tst.b	(Vectors+5).w		; NAT: Wat
	;	beq.s	loc_3178E
	;	move.w	#$7F00,$10(a0)

loc_3178E:
		moveq	#0,d0
		move.b	$26(a0),d0
		addq.b	#1,$26(a0)
		jsr	GetSineCosine.w
		asr.w	#5,d0
		add.w	$32(a0),d0
		move.w	d0,$14(a0)
		jmp	loc_1B662.w

; =============== S U B R O U T I N E =======================================


sub_317AE:

		move.w	#-$700,$1A(a1)
		bset	#1,$2A(a1)
		bclr	#4,$2A(a1)

loc_317C0:
		bclr	#5,$2A(a1)
		clr.b	$40(a1)
		move.b	#0,$2E(a1)
		bset	#0,$20(a0)
		tst.b	$2C(a0)
		bpl.s	loc_31808
		move.w	#-$380,$1A(a1)
		tst.b	(Water_flag).w
		beq.s	loc_31808
		tst.b	$34(a0)
		bne.s	loc_31808
		lea	(word_3185A).l,a2
		bsr.s	sub_3181E
		bsr.s	sub_3181E
		bsr.s	sub_3181E
		bsr.s	sub_3181E
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)

loc_31808:

		tst.b	$34(a0)
		bne.s	locret_3181C
		moveq	#$77,d0
		jsr	Play_Sound_2.w
		move.b	#1,$34(a0)

locret_3181C:
		rts
; End of function sub_317AE


; =============== S U B R O U T I N E =======================================


sub_3181E:

		jsr	Create_New_Sprite.w
		bne.s	locret_31858

loc_31826:
		move.l	#Obj_Bubbler,(a1)
		move.w	$10(a0),$10(a1)
		jsr	Random_Number.w
		move.w	d0,d1
		andi.w	#$F,d0
		subq.w	#8,d0
		add.w	d0,$10(a1)
		move.w	$14(a0),$14(a1)
		andi.w	#$F,d1
		subq.w	#8,d1
		add.w	d1,$14(a1)
		move.b	(a2)+,$2C(a1)

locret_31858:
		rts
; End of function sub_3181E

; ---------------------------------------------------------------------------
word_3185A:	dc.w	  0,  $103
Ani_CNZBalloon:	include "Levels/CNZ/Misc Object Data/Anim - Balloon.asm"

; ---------------------------------------------------------------------------

Obj_CNZCannon:

		move.l	#Map_CNZCannon,$C(a0)
		move.w	#$4374,$A(a0)
		move.b	#4,4(a0)
		move.w	#prio(5),8(a0)
		move.b	#$30,7(a0)
		move.b	#$30,6(a0)
		move.b	#9,$22(a0)
		bset	#6,4(a0)
		move.w	#1,$16(a0)
		lea	$18(a0),a2
		move.w	$10(a0),(a2)+
		move.w	$14(a0),(a2)+
		move.w	#4,(a2)
		move.l	#loc_318F2,(a0)

loc_318F2:
		bsr.s	sub_3192C
		lea	$30(a0),a2
		lea	(Player_1).w,a1
		moveq	#3,d6
		move.w	(Ctrl_1_logical).w,d1
		bsr.w	sub_319F4
		addq.w	#1,a2
		lea	(Player_2).w,a1
		moveq	#4,d6
		move.w	(Ctrl_2_logical).w,d1

		bsr.w	sub_319F4
		bsr.w	sub_31B18
		jmp	Sprite_OnScreen_Test.w

; =============== S U B R O U T I N E =======================================


sub_3192C:
		move.w	$34(a0),d0
		bne.s	loc_31944
		move.w	#$10,d1
		move.w	#$29,d3
		move.w	$10(a0),d4
		jmp	SolidObjectTop.w
; ---------------------------------------------------------------------------

loc_31944:
		subq.w	#1,d0
		bne.s	loc_31974
		tst.w	$30(a0)			; NAT: Check if Sonic & Tails are on
		bne.s	.ison			; if so, branch
		move.w	#3,$34(a0)		; set to reset the thing
		rts

.ison		move.b	$26(a0),d0
		addq.b	#2,$26(a0)
		jsr	GetSineCosine.w
		addi.w	#$120,d0
		lsr.w	#6,d0
		move.b	d0,$1D(a0)
		move.b	(Level_frame_counter+1).w,d0
		andi.b	#$1F,d0
		bne.s	locret_31972
		moveq	#-$39,d0
		jmp	Play_Sound_2.w

locret_31972:
		rts
; ---------------------------------------------------------------------------

loc_31974:
		subq.w	#1,d0
		bne.s	loc_319CE
		subq.w	#1,$36(a0)
		bpl.s	loc_31984

loc_3197E:
		move.w	#3,$34(a0)

loc_31984:
		move.b	(Level_frame_counter+1).w,d0
		andi.b	#3,d0
		bne.s	locret_319CC
		jsr	Create_New_Sprite3.w
		bne.w	locret_319CC
		move.l	#Obj_FireShield_Dissipate,(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		subi.w	#$18,$14(a1)
		move.b	$1D(a0),d0

loc_319B4:
		lsl.b	#4,d0
		addi.b	#-$80,d0
		jsr	GetSineCosine.w
		asl.w	#3,d1
		asl.w	#3,d0

loc_319C4:
		move.w	d1,$18(a1)
		move.w	d0,$1A(a1)

locret_319CC:

		rts
; ---------------------------------------------------------------------------

loc_319CE:
		move.b	$26(a0),d0
		addq.b	#2,$26(a0)
		jsr	GetSineCosine.w
		addi.w	#$120,d0
		lsr.w	#6,d0

loc_319E2:
		move.b	d0,$1D(a0)
		cmpi.b	#4,d0
		bne.s	locret_319F2
		move.w	#0,$34(a0)

locret_319F2:
		rts
; End of function sub_3192C


; =============== S U B R O U T I N E =======================================


sub_319F4:

		move.b	(a2),d0
		bne.s	loc_31A4C
		bclr	d6,$2A(a0)
		beq.s	locret_31A4A
		bclr	#3,$2A(a1)
		move.w	$10(a0),$10(a1)
		move.w	#prio(7),8(a1)
		move.w	#0,$18(a1)
		move.w	#0,$1A(a1)
		move.w	#0,$1C(a1)
		move.b	#-$7F,$2E(a1)
		bset	#2,$2A(a1)
		bset	#1,$2A(a1)
		move.b	#$E,$1E(a1)
		move.b	#7,$1F(a1)
		move.b	#2,$20(a1)
		move.b	#1,(a2)

locret_31A4A:
		rts
; ---------------------------------------------------------------------------

loc_31A4C:
		subq.b	#1,d0
		bne.s	loc_31A7C
		cmp.b	#6,5(a1)		; NAT: Check if pl is dead
		blo.s	.notdead		; if not, branch
		clr.b	(a2)			; else, reset their state
		rts

.notdead	move.w	$1A(a1),d0
		addi.w	#$38,$1A(a1)
		ext.l	d0
		lsl.l	#8,d0
		add.l	d0,$14(a1)
		move.w	$14(a0),d0
		cmp.w	$14(a1),d0
		bhs.s	locret_31A7A
		move.w	d0,$14(a1)
		move.b	#$1C,$20(a1)
		move.b	#2,(a2)

locret_31A7A:
		rts
; ---------------------------------------------------------------------------

loc_31A7C:
		subq.b	#1,d0
		bne.w	loc_31B06
		cmp.b	#6,5(a1)		; NAT: Check if pl is dead
		blo.s	.notdead		; if not, branch
		clr.b	(a2)			; else, reset their state
		rts

.notdead	cmpi.w	#2,$34(a0)
		beq.s	loc_31AA6

loc_31A9A:
		move.w	#1,$34(a0)

loc_31AA0:
		andi.w	#$70,d1
		beq.s	locret_31B04

loc_31AA6:
		move.b	$1D(a0),d0
		lsl.b	#4,d0
		addi.b	#-$80,d0
		jsr	GetSineCosine.w
		asl.w	#4,d1
		asl.w	#4,d0
		move.w	d1,$18(a1)
		move.w	d0,$1A(a1)
		move.w	d1,$1C(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		subi.w	#$18,$14(a1)
		move.b	#0,$2E(a1)
		bset	#1,$2A(a1)
		clr.b	$40(a1)
		move.b	#2,$20(a1)

loc_31AEE:
		move.w	#2,$34(a0)
		move.w	#$F,$36(a0)
		move.b	#3,(a2)

loc_31AFE:
		move.b	#8,2(a2)

locret_31B04:
		rts
; ---------------------------------------------------------------------------

loc_31B06:
		subq.b	#1,2(a2)
		bne.s	locret_31B16
		move.w	#prio(2),8(a1)
		clr.b	(a2)

locret_31B16:
		rts
; End of function sub_319F4


; =============== S U B R O U T I N E =======================================


sub_31B18:
		tst.b	4(a0)
		bpl.s	locret_31B70
		moveq	#0,d0
		move.b	$1D(a0),d0
		cmp.b	$2E(a0),d0
		beq.s	locret_31B70
		move.b	d0,$2E(a0)
		lea	(DPLC_CNZCannon).l,a2
		add.w	d0,d0
		adda.w	(a2,d0.w),a2
		move.w	(a2)+,d5
		subq.w	#1,d5
		bmi.s	locret_31B70
		move.w	#-$7700,d4

loc_31B44:
		moveq	#0,d1
		move.w	(a2)+,d1
		move.w	d1,d3
		lsr.w	#8,d3
		andi.w	#$F0,d3
		addi.w	#$10,d3
		andi.w	#$FFF,d1
		lsl.l	#5,d1
		addi.l	#ArtUnc_CNZCannon,d1
		move.w	d4,d2
		add.w	d3,d4
		add.w	d3,d4
		jsr	Add_To_DMA_Queue.w
		dbf	d5,loc_31B44

locret_31B70:

		rts
; End of function sub_31B18

; ---------------------------------------------------------------------------
DPLC_CNZCannon:	include "General/Sprites/CNZ Cannon/DPLC - CNZ Cannon.asm"

; ---------------------------------------------------------------------------

Obj_CNZRisingPlatform:

		move.l	#Map_CNZRisingPlatform,$C(a0)
		move.w	#$43BE,$A(a0)
		ori.b	#4,4(a0)
		move.w	#prio(5),8(a0)
		move.b	#$30,7(a0)
		move.b	#$10,6(a0)
		move.b	#6,$1E(a0)
		move.l	#loc_31BD0,(a0)

loc_31BD0:
		bsr.s	sub_31C0A

loc_31BD2:
		move.w	#$30,d1
		move.w	#$11,d3
		move.w	$10(a0),d4
		jsr	SolidObjectTop.w
		lea	(Ani_CNZRisingPlatform).l,a1
		jsr	Animate_Sprite.w
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------
Ani_CNZRisingPlatform:	include "Levels/CNZ/Misc Object Data/Anim - Rising Platform.asm"


; =============== S U B R O U T I N E =======================================


sub_31C0A:
		move.b	$30(a0),d0
		bne.s	loc_31C4C
		move.b	$2A(a0),d0
		andi.b	#$18,d0
		beq.s	loc_31C26
		move.b	#1,$30(a0)
		move.w	#$100,$20(a0)

loc_31C26:
		tst.w	$1A(a0)
		beq.s	locret_31C4A
		jsr	MoveSprite2.w
		addi.w	#8,$1A(a0)
		tst.w	$1A(a0)
		bmi.s	locret_31C4A
		move.w	#0,$1A(a0)
		move.w	#$200,$20(a0)

locret_31C4A:

		rts
; ---------------------------------------------------------------------------

loc_31C4C:
		move.b	$2A(a0),d0
		andi.b	#$18,d0
		beq.s	loc_31C86
		jsr	MoveSprite2.w
		cmpi.w	#$200,$1A(a0)
		bge.s	loc_31C6A

loc_31C64:
		addi.w	#$18,$1A(a0)

loc_31C6A:
		jsr	ObjCheckFloorDist.w
		tst.w	d1
		bpl.s	locret_31C84
		add.w	d1,$14(a0)
		move.l	#loc_31BD2,(a0)
		move.w	#$200,$20(a0)

locret_31C84:
		rts
; ---------------------------------------------------------------------------

loc_31C86:
		neg.w	$1A(a0)
		subi.w	#$80,$1A(a0)
		move.b	#0,$30(a0)
		moveq	#$75,d0
		jmp	Play_Sound_2.w
; End of function sub_31C0A

; ---------------------------------------------------------------------------

Obj_CNZTrapDoor:

		move.l	#Map_CNZTrapDoor,$C(a0)
		move.w	#$43F0,$A(a0)
		ori.b	#4,4(a0)
		move.w	#prio(1),8(a0)
		move.b	#$20,7(a0)
		move.b	#8,6(a0)
		move.l	#loc_31CCA,(a0)

loc_31CCA:
		lea	(Player_1).w,a1
		bsr.s	sub_31CFA
		lea	(Player_2).w,a1
		bsr.s	sub_31CFA
		move.w	#$20,d1
		move.w	#9,d3
		move.w	$10(a0),d4

loc_31CE2:
		jsr	SolidObjectTop.w
		lea	(Ani_CNZTrapDoor).l,a1
		jsr	Animate_Sprite.w
		jmp	Sprite_OnScreen_Test.w

; =============== S U B R O U T I N E =======================================


sub_31CFA:

		move.w	$10(a0),d0
		sub.w	$10(a1),d0
		addi.w	#$20,d0
		cmpi.w	#$40,d0
		bhs.s	locret_31D2C
		move.w	$14(a0),d0
		sub.w	$14(a1),d0
		addi.w	#$20,d0
		cmpi.w	#$20,d0
		bhs.s	locret_31D2C
		move.b	#1,$20(a0)
		moveq	#$76,d0
		jmp	Play_Sound_2.w

locret_31D2C:

		rts
; End of function sub_31CFA

; ---------------------------------------------------------------------------
Ani_CNZTrapDoor:	include "Levels/CNZ/Misc Object Data/Anim - Trap Door.asm"

; ---------------------------------------------------------------------------

Obj_CNZLightBulb:

		move.l	#Map_CNZLightBulb,$C(a0)
		move.w	#$4404,$A(a0)
		ori.b	#4,4(a0)
		move.w	#prio(5),8(a0)
		move.b	#$10,7(a0)
		move.b	#$10,6(a0)

loc_31D60:
		tst.b	(Water_flag).w
		bne.s	loc_31D6E
		move.l	#loc_31D8A,(a0)
		bra.s	loc_31D8A
; ---------------------------------------------------------------------------

loc_31D6E:
		move.l	#loc_31D74,(a0)

loc_31D74:
		move.w	(Water_level).w,d0
		cmp.w	$14(a0),d0
		bhs.s	loc_31D8A
		move.b	#1,$22(a0)
		move.l	#loc_31D8A,(a0)

loc_31D8A:


		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

Obj_CNZHoverFan:

		move.l	#Map_CNZHoverFan,$C(a0)
		move.w	#$43E8,$A(a0)
		ori.b	#4,4(a0)
		move.w	#prio(5),8(a0)
		move.b	#$10,7(a0)
		move.b	#$10,6(a0)
		move.w	$10(a0),$30(a0)
		move.b	$2C(a0),d0
		move.b	d0,d1
		andi.w	#$F,d0
		addq.w	#4,d0
		lsl.w	#4,d0
		move.w	d0,$36(a0)
		addi.w	#$30,d0
		move.w	d0,$38(a0)
		andi.w	#$70,d1
		addi.w	#$18,d1
		move.w	d1,$32(a0)
		add.w	d1,d1
		move.w	d1,$34(a0)
		move.b	$2C(a0),d0
		bmi.s	loc_31DF8
		move.l	#loc_31E68,(a0)
		bra.w	loc_31E68
; ---------------------------------------------------------------------------

loc_31DF8:
		andi.w	#$70,d0
		move.w	d0,d1
		lsr.w	#4,d0
		move.b	d0,$22(a0)
		addi.b	#$10,d1
		move.b	d1,7(a0)
		btst	#0,$2A(a0)
		bne.s	loc_31E1E
		move.l	#loc_31E36,(a0)
		bra.w	loc_31E36
; ---------------------------------------------------------------------------

loc_31E1E:
		move.l	#loc_31E24,(a0)

loc_31E24:
		moveq	#0,d0
		move.b	(OscNumbers+$E).w,d0
		subi.w	#$30,d0
		add.w	$30(a0),d0
		move.w	d0,$10(a0)

loc_31E36:

		moveq	#0,d6
		lea	(Player_1).w,a1
		bsr.w	sub_31E96
		lea	(Player_2).w,a1
		bsr.w	sub_31E96
		tst.w	d6
		beq.s	loc_31E5E
		move.b	(Level_frame_counter+1).w,d0
		andi.b	#$1F,d0
		bne.s	loc_31E5E
		moveq	#$72,d0
		jsr	Play_Sound_2.w

loc_31E5E:

		move.w	$30(a0),d0
		jmp	Sprite_OnScreen_Test2.w
; ---------------------------------------------------------------------------

loc_31E68:

		moveq	#0,d6
		lea	(Player_1).w,a1
		bsr.w	sub_31E96
		lea	(Player_2).w,a1
		bsr.w	sub_31E96
		tst.w	d6
		beq.s	loc_31E90
		move.b	(Level_frame_counter+1).w,d0
		andi.b	#$1F,d0
		bne.s	loc_31E90
		moveq	#$72,d0
		jsr	Play_Sound_2.w

loc_31E90:

		jmp	Delete_Sprite_If_Not_In_Range.w

; =============== S U B R O U T I N E =======================================


sub_31E96:

		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		add.w	$32(a0),d0
		cmp.w	$34(a0),d0
		bhs.w	locret_31F2E
		moveq	#0,d1
		move.b	(OscNumbers+$16).w,d1
		add.w	$14(a1),d1
		add.w	$36(a0),d1
		sub.w	$14(a0),d1
		bcs.s	locret_31F2E
		cmp.w	$38(a0),d1
		bhs.s	locret_31F2E
		cmpi.b	#4,5(a1)
		bhs.w	locret_31F2E
		tst.b	$2E(a1)
		bne.s	locret_31F2E
		sub.w	$36(a0),d1
		bcs.s	loc_31EDE
		not.w	d1
		add.w	d1,d1

loc_31EDE:
		add.w	$36(a0),d1
		neg.w	d1
		asr.w	#4,d1
		add.w	d1,$14(a1)
		bset	#1,$2A(a1)
		bclr	#4,$2A(a1)
		move.w	#0,$1A(a1)
		move.b	#0,$2F(a1)
		move.b	#0,$40(a1)
		moveq	#1,d6
		move.w	#1,$1C(a1)
		tst.b	$27(a1)
		bne.s	locret_31F2E
		move.b	#1,$27(a1)
		move.b	#0,$20(a1)
		move.b	#$7F,$30(a1)
		move.b	#8,$31(a1)

locret_31F2E:

		rts
; End of function sub_31E96

; ---------------------------------------------------------------------------

Obj_48_1:

		move.b	$2C(a0),d0
		beq.s	loc_31F46
		add.b	d0,d0
		move.b	d0,$34(a0)
		move.l	#loc_31FF4,(a0)
		bra.w	loc_31FF4
; ---------------------------------------------------------------------------

loc_31F46:
		move.l	#loc_31F4C,(a0)

loc_31F4C:
		lea	(Player_1).w,a1
		bsr.w	sub_31F62
		lea	(Player_2).w,a1
		bsr.w	sub_31F62
		jmp	Delete_Sprite_If_Not_In_Range.w

; =============== S U B R O U T I N E =======================================


sub_31F62:

		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		btst	#0,$2A(a0)
		bne.s	loc_31F74
		neg.w	d0

loc_31F74:
		addi.w	#$50,d0
		cmpi.w	#$A0,d0
		bhs.s	locret_31FF2
		move.w	$14(a1),d1
		addi.w	#$20,d1
		sub.w	$14(a0),d1
		bcs.s	locret_31FF2
		cmpi.w	#$40,d1
		bhs.s	locret_31FF2
		cmpi.b	#4,5(a1)
		bhs.s	locret_31FF2
		tst.b	$2E(a1)
		bne.s	locret_31FF2
		subi.w	#$50,d0
		bcc.s	loc_31FC2
		not.w	d0
		move.w	#$1000,$1C(a1)
		btst	#0,$2A(a0)
		bne.s	loc_31FBA
		neg.w	$1C(a1)

loc_31FBA:
		move.w	$1C(a1),$18(a1)
		rts
; ---------------------------------------------------------------------------

loc_31FC2:
		add.w	d0,d0
		addi.w	#$60,d0
		btst	#0,$2A(a0)
		bne.s	loc_31FD2
		neg.w	d0

loc_31FD2:
		neg.b	d0
		asr.w	#4,d0
		add.w	d0,$10(a1)
		move.w	$36(a0),d0
		bne.s	loc_31FE8
		moveq	#$74,d0
		jsr	Play_Sound_2.w

loc_31FE8:
		addq.w	#1,$36(a0)
		andi.w	#$1F,$36(a0)

locret_31FF2:

		rts
; End of function sub_31F62

; ---------------------------------------------------------------------------

loc_31FF4:
		lea	$30(a0),a2
		move.b	3(a2),d6
		lea	(Player_1).w,a1
		bsr.w	sub_32010

		addq.w	#1,a2
		move.b	1(a2),d6
		lea	(Player_2).w,a1
		bsr.w	sub_32010
		jmp	Delete_Sprite_If_Not_In_Range.w

; =============== S U B R O U T I N E =======================================


sub_32010:
		move.b	(a2),d0
		bne.w	loc_3209C
		cmpi.b	#4,5(a1)		; NAT: Fix Tails spawning and falling
		blo.s	.nothurt
		cmpi.b	#6,5(a1)
		blo.s	.rts
		tst.w	$30(a0)			; check if either player is on this thing
		beq.s	.rts			; branch if not
		move.b	#1,(a2)			; put the dead player on this too
		move.b	d6,2(a2)
.rts		rts

.nothurt	move.w	$10(a1),d0
		sub.w	$10(a0),d0
		addi.w	#$18,d0
		cmpi.w	#$30,d0
		bhs.s	.rts

		move.w	$14(a1),d1
		sub.w	$14(a0),d1
		addi.w	#$30,d1
		cmpi.w	#$50,d1
		bhs.s	.rts

		tst.b	$2E(a1)
		bne.s	.rts
		subi.w	#$50,d1
		neg.w	d1
		cmpi.w	#$40,d1
		blo.s	loc_3206A
		move.b	#1,(a2)
		move.b	$34(a0),2(a2)
		move.w	d0,-(sp)
		moveq	#$73,d0
		jsr	Play_Sound_2.w
		move.w	(sp)+,d0

loc_3206A:
		asr.w	#2,d1
		cmpi.b	#1,$38(a1)
		beq.s	loc_32076
		asr.w	#1,d1

loc_32076:
		sub.w	d1,$14(a1)
		moveq	#1,d2
		cmpi.w	#$18,d0
		beq.s	loc_3208A
		bcs.s	loc_32086
		neg.w	d2

loc_32086:
		add.w	d2,$10(a1)

loc_3208A:
		bset	#1,$2A(a1)
		move.b	#$F,$20(a1)
		clr.b	$40(a1)

locret_3209A:

		rts
; ---------------------------------------------------------------------------

loc_3209C:
		cmpi.b	#6,5(a1)		; NAT: Fix Tails spawning and falling
		blo.s	.notdead
		clr.b	(a2)			; clear state

		tst.w	$30(a0)			; check if either player is on this thing
		beq.s	.rts			; branch if not
		move.b	#1,(a2)			; do not get out of here yet
		move.b	d6,2(a2)
.rts		rts

.notdead	subq.b	#1,d0
		bne.s	locret_320E0
		subq.b	#1,2(a2)
		beq.s	loc_320D4

loc_320A6:
		subi.w	#8,$14(a1)
		moveq	#1,d2
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		beq.s	loc_320C0
		bcs.s	loc_320BC
		neg.w	d2

loc_320BC:
		add.w	d2,$10(a1)

loc_320C0:
		move.w	#0,$18(a1)

loc_320C6:
		move.w	#0,$1C(a1)
		move.w	#0,$1A(a1)
		rts
; ---------------------------------------------------------------------------

loc_320D4:
		move.w	#-$800,$1A(a1)
		clr.b	(a2)
		rts
; ---------------------------------------------------------------------------

locret_320E0:
		rts

; ---------------------------------------------------------------------------
word_320E2:	dc.w $4E0
		dc.w $6F0
		dc.w $870
		dc.w $9C0
		dc.w $AE0
		dc.w $C00
		dc.w $CF0
		dc.w $DE0
; ---------------------------------------------------------------------------

Obj_CNZCylinder:
		cmpi.w	#$17E0,$10(a0)
		bne.s	loc_32108
		cmpi.w	#3,(Player_mode).w
		bne.s	loc_32108

loc_32102:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_32108:
		move.b	$2C(a0),d0
		move.b	d0,d1
		lsr.b	#3,d1

loc_32110:
		andi.w	#$E,d1
		move.w	word_320E2(pc,d1.w),d1
		move.w	d1,$3E(a0)
		add.w	d0,d0
		andi.w	#$1E,d0
		move.w	d0,$3A(a0)
		move.l	#Map_CNZCylinder,$C(a0)
		move.w	#$438E,$A(a0)
		move.b	#4,4(a0)
		move.w	#prio(5),8(a0)
		move.b	#$20,7(a0)
		move.b	#$20,6(a0)
		move.w	$10(a0),$2E(a0)
		move.w	$14(a0),$30(a0)
		move.b	$2C(a0),d0
		move.b	d0,d1
		andi.b	#$F,d0
		subi.b	#$A,d0
		andi.b	#3,d0
		move.b	d0,$44(a0)
		andi.w	#$F0,d1
		lsl.w	#2,d1
		btst	#0,$2A(a0)
		beq.s	loc_3217E
		neg.w	d1

loc_3217E:
		move.w	d1,$46(a0)
		move.l	#loc_32188,(a0)

loc_32188:
		bsr.s	sub_321E2
		lea	$32(a0),a2
		lea	(Player_1).w,a1
		moveq	#3,d6
		move.w	(Ctrl_1_logical).w,d5
		bsr.w	sub_324C0
		addq.w	#4,a2
		lea	(Player_2).w,a1
		moveq	#4,d6
		move.w	(Ctrl_2_logical).w,d5
		bsr.w	sub_324C0
		move.w	#$2B,d1
		move.w	#$20,d2
		move.w	#$21,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		subq.b	#1,$24(a0)
		bpl.s	loc_321D8
		move.b	#1,$24(a0)
		addq.b	#1,$22(a0)
		andi.b	#3,$22(a0)

loc_321D8:
		move.w	$2E(a0),d0
		jmp	Sprite_OnScreen_Test2.w

; =============== S U B R O U T I N E =======================================


sub_321E2:
		move.w	$3A(a0),d0
		move.w	off_321EE(pc,d0.w),d0
		jmp	off_321EE(pc,d0.w)

; ---------------------------------------------------------------------------
off_321EE:	dc.w loc_32208-off_321EE

		dc.w loc_322F0-off_321EE
		dc.w loc_3230E-off_321EE
		dc.w loc_3232C-off_321EE
		dc.w loc_32350-off_321EE
		dc.w loc_3236E-off_321EE
		dc.w loc_3238C-off_321EE
		dc.w loc_323AA-off_321EE
		dc.w loc_323CE-off_321EE
		dc.w loc_323EC-off_321EE
		dc.w loc_323EC-off_321EE
		dc.w loc_323EC-off_321EE
		dc.w loc_323EC-off_321EE
; ---------------------------------------------------------------------------

loc_32208:
		move.w	$3C(a0),d1
		move.b	$2A(a0),d0
		andi.b	#$18,d0
		cmp.w	d1,d0
		beq.s	loc_32254
		move.w	d0,$3C(a0)
		sub.w	d1,d0
		bcs.s	loc_32254
		move.w	$1A(a0),d0
		bpl.s	loc_32228
		neg.w	d0

loc_32228:
		cmpi.w	#$200,d0
		bhs.s	loc_32254
		move.w	$14(a0),d0
		sub.w	$30(a0),d0
		addi.w	#$40,d0
		cmpi.w	#$80,d0
		bhs.s	loc_32254
		addi.w	#$400,$1A(a0)
		move.w	$3E(a0),d0
		cmp.w	$1A(a0),d0
		bgt.s	loc_32254
		move.w	d0,$1A(a0)

loc_32254:

		jsr	MoveSprite2.w
		moveq	#0,d5
		btst	#3,$2A(a0)
		beq.s	loc_32268
		move.b	(Ctrl_1_logical).w,d5

loc_32268:
		btst	#4,$2A(a0)
		beq.s	loc_32274
		or.b	(Ctrl_2_logical).w,d5

loc_32274:
		move.w	$14(a0),d0
		sub.w	$30(a0),d0
		beq.s	loc_322DA
		bcc.s	loc_322AC
		move.w	$3E(a0),d0
		cmp.w	$1A(a0),d0
		ble.s	locret_322EE
		addi.w	#$20,$1A(a0)
		tst.w	$1A(a0)
		bmi.s	loc_322A4
		btst	#1,d5
		beq.s	loc_322AA
		addi.w	#$20,$1A(a0)
		bra.s	loc_322AA
; ---------------------------------------------------------------------------

loc_322A4:
		addi.w	#$10,$1A(a0)

loc_322AA:

		bra.s	locret_322EE
; ---------------------------------------------------------------------------

loc_322AC:
		move.w	$3E(a0),d0
		neg.w	d0
		cmp.w	$1A(a0),d0
		bge.s	locret_322EE
		subi.w	#$20,$1A(a0)
		tst.w	$1A(a0)
		bpl.s	loc_322D2
		btst	#0,d5
		beq.s	loc_322D8
		subi.w	#$20,$1A(a0)
		bra.s	loc_322D8
; ---------------------------------------------------------------------------

loc_322D2:
		subi.w	#$10,$1A(a0)

loc_322D8:

		bra.s	locret_322EE
; ---------------------------------------------------------------------------

loc_322DA:
		move.w	$1A(a0),d0
		bpl.s	loc_322E2
		neg.w	d0

loc_322E2:
		cmpi.w	#$80,d0
		bhs.s	locret_322EE
		move.w	#0,$1A(a0)

locret_322EE:

		rts
; ---------------------------------------------------------------------------

loc_322F0:
		move.b	$26(a0),d0
		jsr	GetSineCosine.w
		asr.w	#3,d0
		add.w	$2E(a0),d0
		move.w	d0,$10(a0)
		move.w	$46(a0),d0
		add.w	d0,$26(a0)
		rts
; ---------------------------------------------------------------------------

loc_3230E:
		move.b	$26(a0),d0
		jsr	GetSineCosine.w
		asr.w	#2,d0
		add.w	$2E(a0),d0
		move.w	d0,$10(a0)
		move.w	$46(a0),d0
		add.w	d0,$26(a0)
		rts
; ---------------------------------------------------------------------------

loc_3232C:
		move.b	$26(a0),d0
		jsr	GetSineCosine.w
		asr.w	#2,d0
		move.w	d0,d1
		asr.w	#1,d0
		add.w	d1,d0
		add.w	$2E(a0),d0
		move.w	d0,$10(a0)
		move.w	$46(a0),d0
		add.w	d0,$26(a0)
		rts
; ---------------------------------------------------------------------------

loc_32350:
		move.b	$26(a0),d0
		jsr	GetSineCosine.w
		asr.w	#1,d0
		add.w	$2E(a0),d0
		move.w	d0,$10(a0)
		move.w	$46(a0),d0
		add.w	d0,$26(a0)
		rts
; ---------------------------------------------------------------------------

loc_3236E:
		move.b	$26(a0),d0
		jsr	GetSineCosine.w
		asr.w	#3,d0
		add.w	$30(a0),d0
		move.w	d0,$14(a0)
		move.w	$46(a0),d0
		add.w	d0,$26(a0)
		rts
; ---------------------------------------------------------------------------

loc_3238C:
		move.b	$26(a0),d0
		jsr	GetSineCosine.w
		asr.w	#2,d0
		add.w	$30(a0),d0
		move.w	d0,$14(a0)
		move.w	$46(a0),d0
		add.w	d0,$26(a0)
		rts
; ---------------------------------------------------------------------------

loc_323AA:
		move.b	$26(a0),d0
		jsr	GetSineCosine.w
		asr.w	#2,d0
		move.w	d0,d1
		asr.w	#1,d0
		add.w	d1,d0
		add.w	$30(a0),d0
		move.w	d0,$14(a0)
		move.w	$46(a0),d0
		add.w	d0,$26(a0)
		rts
; ---------------------------------------------------------------------------

loc_323CE:
		move.b	$26(a0),d0
		jsr	GetSineCosine.w
		asr.w	#1,d0
		add.w	$30(a0),d0
		move.w	d0,$14(a0)
		move.w	$46(a0),d0
		add.w	d0,$26(a0)
		rts
; ---------------------------------------------------------------------------

loc_323EC:
		move.w	$46(a0),d0
		bpl.s	loc_3242E
		add.w	d0,$26(a0)
		move.b	$26(a0),d0
		cmpi.b	#-$80,d0
		bhs.s	loc_32416
		andi.b	#$7F,d0
		addi.b	#-$80,d0
		move.b	d0,$26(a0)
		subq.b	#1,$44(a0)
		andi.b	#3,$44(a0)

loc_32416:
		move.w	#$20,d2
		move.b	$26(a0),d0
		cmpi.b	#-$80,d0
		bhs.s	loc_32456
		move.b	#-$80,d0
		move.b	d0,$26(a0)
		bra.s	loc_32456
; ---------------------------------------------------------------------------

loc_3242E:
		add.w	d0,$26(a0)
		move.b	$26(a0),d0
		cmpi.b	#-$80,d0
		bhs.s	loc_32452
		andi.b	#$7F,d0
		addi.b	#-$80,d0
		move.b	d0,$26(a0)
		addq.b	#1,$44(a0)
		andi.b	#3,$44(a0)

loc_32452:
		move.w	#$20,d2

loc_32456:

		jsr	GetSineCosine.w
		asr.w	#3,d1
		move.b	$44(a0),d3
		andi.b	#3,d3
		bne.s	loc_3247C
		add.w	$2E(a0),d1
		move.w	d1,$10(a0)
		neg.w	d2
		add.w	$30(a0),d2
		move.w	d2,$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_3247C:
		subq.b	#1,d3
		bne.s	loc_32492
		add.w	$30(a0),d1
		move.w	d1,$14(a0)
		add.w	$2E(a0),d2
		move.w	d2,$10(a0)
		rts
; ---------------------------------------------------------------------------

loc_32492:
		subq.b	#1,d3
		bne.s	loc_324AA
		neg.w	d1
		add.w	$2E(a0),d1
		move.w	d1,$10(a0)
		add.w	$30(a0),d2
		move.w	d2,$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_324AA:
		neg.w	d1
		add.w	$30(a0),d1
		move.w	d1,$14(a0)
		neg.w	d2
		add.w	$2E(a0),d2
		move.w	d2,$10(a0)
		rts

; =============== S U B R O U T I N E =======================================


sub_324C0:

		move.b	(a2),d0
		bne.s	loc_32538
		btst	d6,$2A(a0)
		beq.s	locret_32536
		cmpi.b	#4,5(a1)
		bhs.s	locret_32536
		move.b	#0,1(a2)
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		bpl.s	loc_324E2
		neg.w	d0
		move.b	#-$80,1(a2)

loc_324E2:
		move.b	d0,2(a2)
		move.w	#0,$18(a1)
		move.w	#0,$1A(a1)
		move.w	#0,$1C(a1)
		move.b	#3,$2E(a1)

loc_324FE:
		move.b	$44(a1),$1E(a1)
		move.b	$45(a1),$1F(a1)

loc_3250A:
		bclr	#2,$2A(a1)
		bclr	#1,$2A(a1)
		bclr	#5,$2A(a1)

loc_3251C:
		bclr	#4,$2A(a1)
		move.b	#0,$40(a1)
		move.b	#0,$20(a1)
		move.b	#1,(a2)
		bra.w	loc_3260A
; ---------------------------------------------------------------------------

locret_32536:
		rts
; ---------------------------------------------------------------------------

loc_32538:
		tst.b	4(a1)
		bpl.w	loc_325F2
		cmpi.b	#4,5(a1)
		bhs.w	loc_325F2
		btst	d6,$2A(a0)
		beq.w	loc_325F2
		moveq	#0,d0
		move.b	1(a2),d0
		jsr	GetSineCosine.w
		addi.w	#$100,d0
		asr.w	#2,d0
		move.b	d0,3(a2)
		moveq	#0,d2

loc_3256A:
		move.w	2(a2),d2
		muls.w	d2,d1

loc_32570:
		swap	d1
		add.w	$10(a0),d1
		move.w	d1,$10(a1)
		addq.b	#2,1(a2)
		move.w	#prio(2),8(a1)
		move.b	$35(a0),d0

loc_32588:
		cmp.b	3(a2),d0
		bls.s	loc_32594
		move.w	#prio(1),8(a1)

loc_32594:
		move.w	#0,$1C(a1)
		move.w	$1A(a0),d0
		bpl.s	loc_325A2
		neg.w	d0

loc_325A2:
		btst	#1,$2A(a1)
		bne.s	loc_325B6
		cmpi.w	#$480,d0
		blo.s	loc_325B6
		move.w	#$800,$1C(a1)

loc_325B6:

		andi.b	#$70,d5
		beq.s	loc_3260A
		move.b	#1,$40(a1)
		move.b	#$E,$1E(a1)
		move.b	#7,$1F(a1)
		move.b	#2,$20(a1)
		move.w	$1A(a0),$1A(a1)
		addi.w	#-$680,$1A(a1)
		move.w	#0,$18(a1)
		move.w	#0,$1C(a1)

loc_325F2:
		or.b	#6,$2A(a1)
		move.w	#prio(2),8(a1)
		move.b	#0,$2E(a1)

loc_32604:
		move.b	#0,(a2)
		rts
; ---------------------------------------------------------------------------

loc_3260A:

		moveq	#0,d0
		move.b	1(a2),d0

loc_32610:					; Used by LBZ cup elevator
		addi.b	#$B,d0
		divu.w	#$16,d0
		move.b	PlayerTwistFrames(pc,d0.w),$22(a1)
		andi.b	#-4,4(a1)
		move.b	PlayerTwistFlip(pc,d0.w),d0
		or.b	d0,4(a1)
		moveq	#0,d0
		move.b	$22(a1),d0
		move.l	a2,-(sp)
		jsr	(Tails_Carry_LoadPLC).l
		movea.l	(sp)+,a2
		rts
; End of function sub_324C0

; ---------------------------------------------------------------------------
PlayerTwistFrames:	dc.b $55
		dc.b $59
		dc.b $5A
		dc.b $5B
		dc.b $5A
		dc.b $59
		dc.b $55
		dc.b $56
		dc.b $57
		dc.b $58
		dc.b $57
		dc.b $56
PlayerTwistFlip:	dc.b 0
		dc.b 1
		dc.b 1
		dc.b 0
		dc.b 0
		dc.b 0
		dc.b 1
		dc.b 1
		dc.b 1
		dc.b 0
		dc.b 0
		dc.b 0
; ---------------------------------------------------------------------------

Obj_HCZSpinningColumn:

		move.l	#Map_HCZSpinningColumn,$C(a0)
		move.w	#$4040,$A(a0)
		move.b	#4,4(a0)
		move.w	#prio(5),8(a0)
		move.b	#$10,7(a0)
		move.b	#$20,6(a0)
		move.w	$10(a0),$2E(a0)
		move.w	$14(a0),$30(a0)
		move.b	$2C(a0),d0
		move.w	d0,d1
		add.w	d0,d0
		andi.w	#6,d0
		move.w	d0,$3A(a0)
		andi.w	#$F0,d1
		move.w	d1,$40(a0)
		move.w	#1,$42(a0)
		cmpi.w	#$E0,d1
		bne.s	loc_326B0

loc_326AC:
		neg.w	$42(a0)

loc_326B0:
		move.l	#loc_326B6,(a0)

loc_326B6:
		bsr.s	sub_32712
		lea	$32(a0),a2
		lea	(Player_1).w,a1
		moveq	#3,d6
		move.w	(Ctrl_1_logical).w,d5
		bsr.w	sub_32784
		addq.w	#4,a2
		lea	(Player_2).w,a1
		moveq	#4,d6
		move.w	(Ctrl_2_logical).w,d5
		bsr.w	sub_32784
		move.w	#$1B,d1
		move.w	#$20,d2
		move.w	#$21,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		subq.b	#1,$24(a0)
		bpl.s	loc_32708
		move.b	#7,$24(a0)
		subq.b	#1,$22(a0)
		bcc.s	loc_32708
		move.b	#2,$22(a0)

loc_32708:

		move.w	$2E(a0),d0
		jmp	Sprite_OnScreen_Test2.w

; =============== S U B R O U T I N E =======================================


sub_32712:
		move.w	$3A(a0),d0
		move.w	off_3271E(pc,d0.w),d0
		jmp	off_3271E(pc,d0.w)
; End of function sub_32712

; ---------------------------------------------------------------------------
off_3271E:	dc.w locret_32724-off_3271E

		dc.w loc_32726-off_3271E
		dc.w loc_32766-off_3271E
; ---------------------------------------------------------------------------

locret_32724:
		rts
; ---------------------------------------------------------------------------

loc_32726:
		move.w	$42(a0),d1
		bmi.s	loc_3273E
		move.w	$40(a0),d0
		add.w	d1,d0
		cmpi.w	#$E0,d0
		bne.s	loc_3273C
		neg.w	$42(a0)

loc_3273C:
		bra.s	loc_3274A
; ---------------------------------------------------------------------------

loc_3273E:
		move.w	$40(a0),d0
		add.w	d1,d0
		bne.s	loc_3274A
		neg.w	$42(a0)

loc_3274A:

		move.w	d0,$40(a0)
		subi.w	#$70,d0
		btst	#0,$2A(a0)
		beq.s	loc_3275C
		neg.w	d0

loc_3275C:
		add.w	$2E(a0),d0
		move.w	d0,$10(a0)
		rts
; ---------------------------------------------------------------------------

loc_32766:
		moveq	#0,d0

loc_32768:
		move.b	(OscNumbers+$1E).w,d0
		btst	#0,$2A(a0)
		beq.s	loc_3277A
		neg.w	d0
		addi.w	#$80,d0

loc_3277A:
		add.w	$30(a0),d0
		move.w	d0,$14(a0)
		rts

; =============== S U B R O U T I N E =======================================


sub_32784:

		move.b	(a2),d0
		bne.s	loc_327FC
		btst	d6,$2A(a0)
		beq.s	locret_327FA
		cmpi.b	#4,5(a1)
		bhs.s	locret_327FA
		move.b	#0,1(a2)
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		bpl.s	loc_327A6
		neg.w	d0
		move.b	#-$80,1(a2)

loc_327A6:
		move.b	d0,2(a2)
		move.w	#0,$18(a1)
		move.w	#0,$1A(a1)
		move.w	#0,$1C(a1)
		move.b	#3,$2E(a1)
		move.b	$44(a1),$1E(a1)
		move.b	$45(a1),$1F(a1)
		bclr	#2,$2A(a1)
		bclr	#1,$2A(a1)
		bclr	#5,$2A(a1)
		bclr	#4,$2A(a1)
		move.b	#0,$40(a1)
		move.b	#0,$20(a1)
		move.b	#1,(a2)
		bra.w	loc_3260A
; ---------------------------------------------------------------------------

locret_327FA:
		rts
; ---------------------------------------------------------------------------

loc_327FC:
		tst.b	4(a1)
		bpl.w	loc_328AC
		cmpi.b	#4,5(a1)
		bhs.w	loc_328AC

loc_3280E:
		btst	d6,$2A(a0)
		beq.w	loc_328AC
		tst.b	2(a2)
		beq.s	loc_32820
		subq.b	#1,2(a2)

loc_32820:
		moveq	#0,d0
		move.b	1(a2),d0
		jsr	GetSineCosine.w
		addi.w	#$100,d0
		asr.w	#2,d0
		move.b	d0,3(a2)
		moveq	#0,d2
		move.w	2(a2),d2
		muls.w	d2,d1
		swap	d1
		add.w	$10(a0),d1
		move.w	d1,$10(a1)
		addq.b	#2,1(a2)
		move.w	#0,$1C(a1)
		move.w	$1A(a0),d0
		bpl.s	loc_3285A
		neg.w	d0

loc_3285A:
		btst	#1,$2A(a1)
		bne.s	loc_3286E
		cmpi.w	#$480,d0
		blo.s	loc_3286E
		move.w	#$800,$1C(a1)

loc_3286E:

		andi.b	#$70,d5
		beq.w	loc_3260A
		move.b	#1,$40(a1)

loc_3287C:
		move.b	#$E,$1E(a1)
		move.b	#7,$1F(a1)
		move.b	#2,$20(a1)
		bset	#2,$2A(a1)
		move.w	$1A(a0),$1A(a1)

loc_3289A:
		addi.w	#-$680,$1A(a1)
		move.w	#0,$18(a1)

loc_328A6:
		move.w	#0,$1C(a1)

loc_328AC:

		bset	#1,$2A(a1)
		move.w	#prio(2),8(a1)
		move.b	#0,$2E(a1)

loc_328BE:
		move.b	#0,(a2)
		rts
; End of function sub_32784

; ---------------------------------------------------------------------------

Obj_49_1:
		move.b	#$60,$32(a0)
		move.l	#loc_328D0,(a0)

loc_328D0:
		lea	$36(a0),a2
		lea	(Player_1).w,a1
		bsr.s	sub_328E8
		addq.w	#1,a2
		lea	(Player_2).w,a1
		bsr.s	sub_328E8
		jmp	Delete_Sprite_If_Not_In_Range.w

; =============== S U B R O U T I N E =======================================


sub_328E8:

		moveq	#0,d2
		move.b	$32(a0),d2
		move.w	d2,d3
		add.w	d3,d3
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		add.w	d2,d0
		cmp.w	d3,d0
		bhs.s	loc_3291A

loc_32900:
		move.w	$14(a1),d1
		sub.w	$14(a0),d1
		add.w	d2,d1
		cmp.w	d3,d1
		bhs.s	loc_3291A
		btst	#1,$2A(a1)
		beq.s	loc_32926
		clr.b	(a2)
		rts
; ---------------------------------------------------------------------------

loc_3291A:

		tst.b	(a2)
		beq.s	locret_32924
		clr.b	$3C(a1)
		clr.b	(a2)

locret_32924:
		rts
; ---------------------------------------------------------------------------

loc_32926:
		tst.b	(a2)
		bne.s	loc_3294C
		move.b	#1,(a2)
		btst	#2,$2A(a1)
		bne.s	loc_3293A
		clr.b	$20(a1)

loc_3293A:
		bclr	#5,$2A(a1)
		move.b	#1,$21(a1)
		move.b	#1,$3C(a1)

loc_3294C:
		move.w	$1C(a1),d0
		btst	#0,$2A(a0)
		beq.s	loc_32974
		cmpi.w	#-$400,d0
		ble.s	loc_32966
		move.w	#-$400,$1C(a1)
		rts
; ---------------------------------------------------------------------------

loc_32966:
		cmpi.w	#-$F00,d0
		bge.s	locret_32972
		move.w	#-$F00,$1C(a1)

locret_32972:
		rts
; ---------------------------------------------------------------------------

loc_32974:
		cmpi.w	#$400,d0
		bge.s	loc_32982
		move.w	#$400,$1C(a1)
		rts
; ---------------------------------------------------------------------------

loc_32982:
		cmpi.w	#$F00,d0
		ble.s	locret_3298E
		move.w	#$F00,$1C(a1)

locret_3298E:
		rts
; End of function sub_328E8

; ---------------------------------------------------------------------------

Obj_4B_1:
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	d0,$34(a0)
		add.w	d0,d0
		move.w	d0,$32(a0)
		move.l	#loc_329A6,(a0)

loc_329A6:
		lea	(Player_1).w,a1
		bsr.s	sub_329B8
		lea	(Player_2).w,a1
		bsr.s	sub_329B8
		jmp	Delete_Sprite_If_Not_In_Range.w

; =============== S U B R O U T I N E =======================================


sub_329B8:

		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		add.w	$34(a0),d0
		cmp.w	$32(a0),d0
		bhs.s	locret_329E4
		move.w	$14(a1),d1
		sub.w	$14(a0),d1
		addi.w	#$14,d1
		cmpi.w	#$28,d1
		bhs.s	locret_329E4

loc_329DC:
		cmpi.b	#4,5(a1)
		blo.s	loc_329E6

locret_329E4:

		rts
; ---------------------------------------------------------------------------

loc_329E6:
		move.w	#-$800,$18(a1)
		move.w	#-$800,$1A(a1)
		bset	#0,$2A(a1)
		btst	#0,$2A(a0)
		bne.s	loc_32A0A
		bclr	#0,$2A(a1)
		neg.w	$18(a1)

loc_32A0A:
		btst	#1,$2A(a0)
		beq.s	loc_32A16
		neg.w	$1A(a1)

loc_32A16:
		move.w	#$F,$32(a1)
		move.w	$18(a1),$1C(a1)

loc_32A22:
		btst	#2,$2A(a1)
		bne.s	loc_32A30
		move.b	#0,$20(a1)

loc_32A30:
		tst.b	$27(a1)
		bne.s	loc_32A5A
		move.b	#1,$27(a1)
		move.b	#0,$20(a1)
		move.b	#3,$30(a1)
		move.b	#8,$31(a1)
		btst	#0,$2A(a1)
		beq.s	loc_32A5A
		neg.b	$27(a1)

loc_32A5A:

		clr.b	$40(a1)
		bset	#1,$2A(a1)
		bclr	#4,$2A(a1)
		bclr	#5,$2A(a1)
		moveq	#$7B,d0
		jmp	Play_Sound_2.w
; End of function sub_329B8

; ---------------------------------------------------------------------------

Obj_4F_1:
		move.b	$2C(a0),d0
		lsl.w	#3,d0
		move.b	d0,7(a0)
		move.w	$14(a0),$30(a0)
		move.b	#$30,$38(a0)
		move.b	#$30,$3A(a0)
		bset	#7,$2A(a0)
		move.l	#loc_32AAE,(a0)

loc_32AAE:
		tst.b	(Debug_On).w
		bne.w	loc_32B62
		lea	(Player_1).w,a1
		btst	#3,$2A(a0)
		bne.s	loc_32AEA

loc_32AC2:
		cmpi.b	#$30,$38(a0)
		bhs.s	loc_32ACE
		addq.b	#2,$38(a0)

loc_32ACE:
		btst	#3,$2A(a1)
		beq.s	loc_32AF4
		movea.w	$42(a1),a2
		cmpi.l	#loc_32AAE,(a2)
		bne.s	loc_32AF4
		move.b	$38(a2),$38(a0)
		bra.s	loc_32AF4
; ---------------------------------------------------------------------------

loc_32AEA:
		tst.b	$38(a0)
		beq.s	loc_32B68
		subq.b	#1,$38(a0)

loc_32AF4:
		moveq	#0,d1
		move.b	7(a0),d1
		moveq	#0,d3
		move.b	$38(a0),d3
		moveq	#3,d6
		move.w	$10(a0),d4
		jsr	sub_1E2BC.w

		lea	(Player_2).w,a1
		btst	#4,$2A(a0)
		bne.s	loc_32B40
		cmpi.b	#$30,$3A(a0)
		bhs.s	loc_32B24
		addq.b	#2,$3A(a0)

loc_32B24:
		btst	#3,$2A(a1)
		beq.s	loc_32B4A
		movea.w	$42(a1),a2
		cmpi.l	#loc_32AAE,(a2)
		bne.s	loc_32B4A
		move.b	$3A(a2),$3A(a0)
		bra.s	loc_32B4A
; ---------------------------------------------------------------------------

loc_32B40:
		tst.b	$3A(a0)
		beq.s	loc_32B70
		subq.b	#1,$3A(a0)

loc_32B4A:

		moveq	#0,d1
		move.b	7(a0),d1
		moveq	#0,d3
		move.b	$3A(a0),d3
		moveq	#4,d6
		move.w	$10(a0),d4
		jsr	sub_1E2BC.w

loc_32B62:
		jmp	Delete_Sprite_If_Not_In_Range.w
; ---------------------------------------------------------------------------

loc_32B68:
		move.b	#$30,$38(a0)
		bra.s	loc_32B76
; ---------------------------------------------------------------------------

loc_32B70:
		move.b	#$30,$3A(a0)

loc_32B76:
		not.b	d1
		and.b	d1,$2A(a0)
		move.l	a0,-(sp)
		movea.l	a0,a2
		movea.l	a1,a0

loc_32B82:
		jsr	(Kill_Character).l
		movea.l	(sp)+,a0
		rts
; ---------------------------------------------------------------------------

loc_32B8C:

		tst.b	(Debug_On).w
		bne.w	locret_32C44
		lea	(Player_1).w,a1
		btst	#3,$2A(a0)
		bne.s	loc_32BC8
		cmpi.b	#$30,$38(a0)
		bhs.s	loc_32BAC

loc_32BA8:
		addq.b	#2,$38(a0)

loc_32BAC:
		btst	#3,$2A(a1)
		beq.s	loc_32BD2
		movea.w	$42(a1),a2
		cmpi.l	#loc_32AAE,(a2)
		bne.s	loc_32BD2
		move.b	$38(a2),$38(a0)
		bra.s	loc_32BD2
; ---------------------------------------------------------------------------

loc_32BC8:
		tst.b	$38(a0)
		beq.s	loc_32C46
		subq.b	#1,$38(a0)

loc_32BD2:

		moveq	#0,d1
		move.b	7(a0),d1
		moveq	#0,d3
		move.b	$38(a0),d3
		lsr.w	#1,d3
		moveq	#3,d6
		move.w	$10(a0),d4
		jsr	sub_1E2BC.w
		lea	(Player_2).w,a1
		btst	#4,$2A(a0)
		bne.s	loc_32C20
		cmpi.b	#$30,$3A(a0)
		bhs.s	loc_32C04
		addq.b	#2,$3A(a0)

loc_32C04:
		btst	#3,$2A(a1)
		beq.s	loc_32C2A
		movea.w	$42(a1),a2
		cmpi.l	#loc_32AAE,(a2)
		bne.s	loc_32C2A

loc_32C18:
		move.b	$3A(a2),$3A(a0)
		bra.s	loc_32C2A
; ---------------------------------------------------------------------------

loc_32C20:
		tst.b	$3A(a0)
		beq.s	loc_32C4E
		subq.b	#1,$3A(a0)

loc_32C2A:

		moveq	#0,d1
		move.b	7(a0),d1
		moveq	#0,d3
		move.b	$3A(a0),d3

loc_32C36:
		lsr.w	#1,d3
		moveq	#4,d6
		move.w	$10(a0),d4
		jsr	sub_1E2BC.w

locret_32C44:
		rts
; ---------------------------------------------------------------------------

loc_32C46:
		move.b	#$30,$38(a0)
		bra.s	loc_32C54
; ---------------------------------------------------------------------------

loc_32C4E:
		move.b	#$30,$3A(a0)

loc_32C54:
		not.b	d1
		and.b	d1,$2A(a0)
		move.l	a0,-(sp)
		movea.l	a0,a2
		movea.l	a1,a0
		jsr	(Kill_Character).l
		movea.l	(sp)+,a0
		rts
; ---------------------------------------------------------------------------

Obj_5D_1:
		move.b	#8,7(a0)
		move.b	#$40,6(a0)
		move.b	$2C(a0),d0
		lsr.b	#4,d0
		andi.b	#7,d0
		move.b	d0,$22(a0)
		beq.s	loc_32C8C
		move.b	#-$80,6(a0)

loc_32C8C:
		move.l	#loc_32C92,(a0)

loc_32C92:
		move.w	#$10,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	$10(a0),d4
		lea	(Player_1).w,a1
		moveq	#3,d6
		movem.l	d1-d4,-(sp)
		jsr	SolidObjectFull2_1P.w
		cmpi.b	#1,d4
		bne.s	loc_32CDC

loc_32CBA:
		btst	#1,$2A(a1)
		beq.s	loc_32CDC
		move.b	$2A(a0),d1
		move.w	$10(a0),d0
		sub.w	$10(a1),d0
		bcs.s	loc_32CD4
		eori.b	#1,d1

loc_32CD4:
		andi.b	#1,d1
		bne.s	loc_32CDC
		bsr.s	sub_32D16

loc_32CDC:

		movem.l	(sp)+,d1-d4
		lea	(Player_2).w,a1
		moveq	#4,d6
		jsr	SolidObjectFull2_1P.w
		cmpi.b	#1,d4
		bne.s	locret_32D14
		btst	#1,$2A(a1)
		beq.s	locret_32D14
		move.b	$2A(a0),d1
		move.w	$10(a0),d0
		sub.w	$10(a1),d0
		bcs.s	loc_32D0C
		eori.b	#1,d1

loc_32D0C:
		andi.b	#1,d1
		bne.s	locret_32D14
		bsr.s	sub_32D16

locret_32D14:

		rts

; =============== S U B R O U T I N E =======================================


sub_32D16:

		cmpi.b	#4,5(a1)
		blo.s	loc_32D20
		rts
; ---------------------------------------------------------------------------

loc_32D20:
		move.w	#-$800,$18(a1)
		move.w	#$400,$1A(a1)
		bset	#0,$2A(a1)
		btst	#0,$2A(a0)
		bne.s	loc_32D44
		bclr	#0,$2A(a1)
		neg.w	$18(a1)

loc_32D44:
		move.w	#$F,$32(a1)
		move.w	$18(a1),$1C(a1)
		btst	#2,$2A(a1)
		bne.s	loc_32D5E
		move.b	#0,$20(a1)

loc_32D5E:
		move.b	$2C(a0),d0
		bpl.s	loc_32D6A
		move.w	#0,$1A(a1)

loc_32D6A:
		btst	#0,d0
		beq.s	loc_32DAA
		move.w	#1,$1C(a1)
		move.b	#1,$27(a1)
		move.b	#0,$20(a1)

loc_32D82:
		move.b	#1,$30(a1)
		move.b	#8,$31(a1)
		btst	#1,d0
		bne.s	loc_32D9A
		move.b	#3,$30(a1)

loc_32D9A:
		btst	#0,$2A(a1)
		beq.s	loc_32DAA
		neg.b	$27(a1)
		neg.w	$1C(a1)

loc_32DAA:

		andi.b	#$C,d0
		cmpi.b	#4,d0
		bne.s	loc_32DC0
		move.b	#$C,$46(a1)
		move.b	#$D,$47(a1)

loc_32DC0:
		cmpi.b	#8,d0
		bne.s	loc_32DD2
		move.b	#$E,$46(a1)
		move.b	#$F,$47(a1)

loc_32DD2:
		bclr	#5,$2A(a0)
		bclr	#6,$2A(a0)
		bclr	#5,$2A(a1)
		bclr	#4,$2A(a1)
		moveq	#$7B,d0
		jmp	Play_Sound_2.w
; End of function sub_32D16

; ---------------------------------------------------------------------------

Obj_Bumper:

		move.b	#4,4(a0)
		move.b	#$10,7(a0)
		move.b	#$10,6(a0)
		move.w	#prio(1),8(a0)

loc_32E0A:
		move.b	#-$29,$28(a0)

loc_32E10:
		move.w	$10(a0),$30(a0)
		move.w	$14(a0),$32(a0)
		cmpi.b	#$14,(Current_zone).w
		bne.s	loc_32E3C
		move.l	#Map_PachinkoBumper,$C(a0)
		move.w	#$62CD,$A(a0)
		move.l	#loc_32EF0,(a0)
		bra.w	loc_32EF0
; ---------------------------------------------------------------------------

loc_32E3C:
		tst.w	(Competition_mode).w
		beq.s	loc_32E5A
		move.l	#Map_2PBumper,$C(a0)
		move.w	#$2300,$A(a0)
		move.l	#loc_32FF0,(a0)
		bra.w	loc_32FF0
; ---------------------------------------------------------------------------

loc_32E5A:
		move.l	#Map_Bumper,$C(a0)
		move.w	#$4364,$A(a0)
		move.l	#loc_32EAA,(a0)
		move.b	$2C(a0),d0
		beq.s	loc_32EAA
		move.b	d0,$26(a0)
		move.l	#loc_32E7E,(a0)

loc_32E7E:
		move.b	(Level_frame_counter+1).w,d0
		btst	#0,$2A(a0)
		beq.s	loc_32E8C
		neg.b	d0

loc_32E8C:
		add.b	$26(a0),d0
		jsr	GetSineCosine.w
		asr.w	#2,d1
		asr.w	#2,d0
		add.w	$30(a0),d1
		add.w	$32(a0),d0
		move.w	d1,$10(a0)
		move.w	d0,$14(a0)

loc_32EAA:

		tst.b	$29(a0)
		beq.s	loc_32EB4
		bsr.w	sub_32F34

loc_32EB4:
		lea	(Ani_PachinkoBumper).l,a1
		jsr	Animate_Sprite.w
		move.w	$30(a0),d0
		andi.w	#-$80,d0
		sub.w	(Camera_X_pos_coarse_back).w,d0
		cmpi.w	#$280,d0
		bhi.s	loc_32EDE
		jsr	Add_SpriteToCollisionResponseList.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_32EDE:
		move.w	respawn_addr(a0),d0
		beq.s	loc_32EEA
		movea.w	d0,a2
		bclr	#7,(a2)

loc_32EEA:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_32EF0:

		tst.b	$29(a0)
		beq.s	loc_32EF8
		bsr.s	sub_32F34

loc_32EF8:
		lea	(Ani_PachinkoBumper).l,a1
		jsr	Animate_Sprite.w
		move.w	$14(a0),d0
		andi.w	#-$80,d0
		sub.w	(Camera_Y_pos_coarse_back).w,d0
		cmpi.w	#$200,d0
		bhi.s	loc_32F22
		jsr	Add_SpriteToCollisionResponseList.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_32F22:
		move.w	respawn_addr(a0),d0
		beq.s	loc_32F2E
		movea.w	d0,a2
		bclr	#7,(a2)

loc_32F2E:
		jmp	Delete_Current_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_32F34:

		lea	(Player_1).w,a1
		bclr	#0,$29(a0)
		beq.s	loc_32F42
		bsr.s	sub_32F56

loc_32F42:
		lea	(Player_2).w,a1
		bclr	#1,$29(a0)
		beq.s	loc_32F50
		bsr.s	sub_32F56

loc_32F50:
		clr.b	$29(a0)
		rts
; End of function sub_32F34


; =============== S U B R O U T I N E =======================================


sub_32F56:

		move.w	$10(a0),d1
		move.w	$14(a0),d2
		sub.w	$10(a1),d1
		sub.w	$14(a1),d2
		jsr	GetArcTan.w

loc_32F6C:
		move.b	(Level_frame_counter).w,d1
		andi.w	#3,d1
		add.w	d1,d0
		jsr	GetSineCosine.w
		muls.w	#-$700,d1
		asr.l	#8,d1

loc_32F82:
		move.w	d1,$18(a1)

loc_32F86:
		muls.w	#-$700,d0
		asr.l	#8,d0
		move.w	d0,$1A(a1)
		bset	#1,$2A(a1)

loc_32F96:
		bclr	#4,$2A(a1)
		bclr	#5,$2A(a1)
		clr.b	$40(a1)
		move.b	#1,$20(a0)
		moveq	#-$56,d0
		jsr	Play_Sound_2.w
		move.w	respawn_addr(a0),d0
		beq.s	loc_32FC4
		movea.w	d0,a2
		cmpi.b	#-$76,(a2)
		bhs.s	locret_32FEE
		addq.b	#1,(a2)

loc_32FC4:
		moveq	#1,d0
		movea.w	a1,a3
		jsr	(HUD_AddToScore).l

locret_32FEE:

		rts
; End of function sub_32F56

; ---------------------------------------------------------------------------

loc_32FF0:

		tst.b	$29(a0)
		beq.w	loc_3307C
		lea	(Player_1).w,a1

loc_32FFC:
		bclr	#0,$29(a0)
		beq.s	loc_33006
		bsr.s	sub_3301C

loc_33006:
		lea	(Player_2).w,a1
		bclr	#1,$29(a0)
		beq.s	loc_33014
		bsr.s	sub_3301C

loc_33014:
		clr.b	$29(a0)
		bra.w	loc_3307C

; =============== S U B R O U T I N E =======================================


sub_3301C:

		move.w	$10(a0),d1
		move.w	$14(a0),d2
		sub.w	$10(a1),d1
		sub.w	$14(a1),d2
		jsr	GetArcTan.w
		move.b	(Level_frame_counter).w,d1
		andi.w	#3,d1
		add.w	d1,d0
		jsr	GetSineCosine.w
		muls.w	#-$700,d1
		asr.l	#8,d1
		move.w	d1,$18(a1)
		muls.w	#-$700,d0
		asr.l	#8,d0
		move.w	d0,$1A(a1)
		bset	#1,$2A(a1)
		bclr	#4,$2A(a1)
		bclr	#5,$2A(a1)
		clr.b	$40(a1)
		move.b	#1,$20(a0)
		moveq	#$7B,d0
		jmp	Play_Sound_2.w
; End of function sub_3301C

; ---------------------------------------------------------------------------

loc_3307C:

		lea	(Ani_PachinkoBumper).l,a1
		jsr	Animate_Sprite.w
		jsr	Add_SpriteToCollisionResponseList.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
Ani_PachinkoBumper:	include "Levels/Pachinko/Misc Object Data/Anim - Bumper.asm"

;Map_PachinkoBumper:
	include "Levels/Pachinko/Misc Object Data/Map - Bumper.asm"

; ---------------------------------------------------------------------------

Obj_4C_1:
		lea	(Player_1).w,a1
		lea	$30(a0),a4
		bsr.s	sub_330EE
		lea	(Player_2).w,a1
		lea	$3A(a0),a4
		bsr.s	sub_330EE
		move.b	$30(a0),d0
		add.b	$3A(a0),d0
		beq.s	loc_330E8
		rts
; ---------------------------------------------------------------------------

loc_330E8:
		jmp	Delete_Sprite_If_Not_In_Range.w

; =============== S U B R O U T I N E =======================================


sub_330EE:
		cmp.b	#6,5(a1)		; check if dead
		blo.s	.noded			; branch if not
		clr.b	(a4)			; clear routine

.noded		moveq	#0,d0
		move.b	(a4),d0
		move.w	off_330FA(pc,d0.w),d0
		jmp	off_330FA(pc,d0.w)
; End of function sub_330EE

; ---------------------------------------------------------------------------
off_330FA:	dc.w loc_33102-off_330FA

		dc.w loc_3318E-off_330FA
		dc.w loc_331CA-off_330FA
		dc.w loc_3320E-off_330FA
; ---------------------------------------------------------------------------

locret_33100:
		rts

loc_33102:
		tst.b	(Debug_On).w
		bne.s	locret_33100
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		addi.w	#$40,d0
		cmpi.w	#$80,d0
		bhs.s	locret_33100
		move.w	$14(a1),d1
		sub.w	$14(a0),d1
		addi.w	#$10,d1
		cmpi.w	#$20,d1
		bhs.s	locret_33100
		tst.b	$2E(a1)
		bne.s	locret_33100
		addq.b	#2,(a4)
		move.b	#-$7F,$2E(a1)
		move.b	#2,$20(a1)
		move.w	#$800,$1C(a1)
		move.w	#0,$18(a1)
		move.w	#0,$1A(a1)
		bclr	#5,$2A(a1)
		bset	#1,$2A(a1)
		clr.b	1(a4)
		moveq	#$30,d1
		cmpi.w	#$40,d0
		bhs.s	loc_33174
		neg.w	d1
		move.b	#-$80,1(a4)

loc_33174:
		add.w	$10(a0),d1
		move.w	d1,$10(a1)
		move.w	$14(a0),$14(a1)
		move.w	#$3C,d0
		jmp	Play_Sound_2.w
; ---------------------------------------------------------------------------

loc_3318E:
		move.b	1(a4),d0
		addq.b	#8,1(a4)
		jsr	GetSineCosine.w
		asr.w	#3,d1
		move.w	d1,d0
		asr.w	#1,d1
		add.w	d1,d0
		add.w	$10(a0),d0
		move.w	d0,$10(a1)
		moveq	#0,d0
		btst	#0,(Ring_count).w	; NAT: !!!
		beq.s	loc_331BA
		move.w	#$80,d0

loc_331BA:
		cmp.b	1(a4),d0
		bne.s	locret_331C8
		addq.b	#2,(a4)
		move.w	#$C0,2(a4)

locret_331C8:
		rts
; ---------------------------------------------------------------------------

loc_331CA:
		move.b	1(a4),d0
		addi.b	#$C,1(a4)
		jsr	GetSineCosine.w
		asr.w	#3,d1
		move.w	d1,d0
		asr.w	#1,d1
		add.w	d1,d0
		add.w	$10(a0),d0
		move.w	d0,$10(a1)
		addq.w	#2,$14(a1)
		subq.w	#1,2(a4)
		bne.s	locret_3320C
		moveq	#0,d0
		move.w	$10(a0),d1
		sub.w	$10(a1),d1
		bcc.s	loc_33202
		moveq	#1,d0

loc_33202:
		add.b	$2C(a0),d0
		bsr.w	sub_33272
		addq.b	#2,(a4)

locret_3320C:
		rts
; ---------------------------------------------------------------------------

loc_3320E:
		subq.b	#1,2(a4)
		bpl.s	loc_3323A
		movea.l	6(a4),a2
		move.w	(a2)+,d4
		move.w	d4,$10(a1)
		move.w	(a2)+,d5
		move.w	d5,$14(a1)
		move.l	a2,6(a4)
		subq.w	#4,4(a4)
		beq.s	loc_33260
		move.w	(a2)+,d4
		move.w	(a2)+,d5
		move.w	#$C00,d2
		bra.w	loc_332A2
; ---------------------------------------------------------------------------

loc_3323A:

		move.l	$10(a1),d2
		move.l	$14(a1),d3
		move.w	$18(a1),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d2
		move.w	$1A(a1),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d3
		move.l	d2,$10(a1)
		move.l	d3,$14(a1)
		rts
; ---------------------------------------------------------------------------

loc_33260:
		andi.w	#$FFF,$14(a1)
		clr.b	(a4)
		clr.b	$2E(a1)
		clr.b	$40(a1)
		bra.s	loc_3323A

; =============== S U B R O U T I N E =======================================


sub_33272:
		andi.w	#$F,d0
		add.w	d0,d0
		lea	(off_33320).l,a2
		adda.w	(a2,d0.w),a2
		move.w	(a2)+,4(a4)
		subq.w	#4,4(a4)
		move.w	(a2)+,d4
		move.w	d4,$10(a1)
		move.w	(a2)+,d5
		move.w	d5,$14(a1)
		move.l	a2,6(a4)
		move.w	(a2)+,d4
		move.w	(a2)+,d5
		move.w	#$C00,d2

loc_332A2:
		moveq	#0,d0
		move.w	d2,d3
		move.w	d4,d0
		sub.w	$10(a1),d0
		bge.s	loc_332B2
		neg.w	d0
		neg.w	d2

loc_332B2:
		moveq	#0,d1
		move.w	d5,d1
		sub.w	$14(a1),d1
		bge.s	loc_332C0
		neg.w	d1
		neg.w	d3

loc_332C0:
		cmp.w	d0,d1
		blo.s	loc_332F2
		moveq	#0,d1
		move.w	d5,d1
		sub.w	$14(a1),d1
		swap	d1
		divs.w	d3,d1
		moveq	#0,d0
		move.w	d4,d0
		sub.w	$10(a1),d0
		beq.s	loc_332DE
		swap	d0
		divs.w	d1,d0

loc_332DE:
		move.w	d0,$18(a1)
		move.w	d3,$1A(a1)
		tst.w	d1
		bpl.s	loc_332EC
		neg.w	d1

loc_332EC:
		move.w	d1,2(a4)
		rts
; ---------------------------------------------------------------------------

loc_332F2:
		moveq	#0,d0
		move.w	d4,d0
		sub.w	$10(a1),d0
		swap	d0
		divs.w	d2,d0
		moveq	#0,d1
		move.w	d5,d1
		sub.w	$14(a1),d1
		beq.s	loc_3330C
		swap	d1
		divs.w	d0,d1

loc_3330C:
		move.w	d1,$1A(a1)
		move.w	d2,$18(a1)
		tst.w	d0
		bpl.s	loc_3331A
		neg.w	d0

loc_3331A:
		move.w	d0,2(a4)
		rts
; End of function sub_33272

; ---------------------------------------------------------------------------
off_33320:	dc.w word_33328-off_33320

		dc.w word_33336-off_33320
		dc.w word_33344-off_33320
		dc.w word_33352-off_33320
word_33328:	dc.w $C
		dc.w $1390
		dc.w $2D0
		dc.w $1230
		dc.w $2D0
		dc.w $1230
		dc.w $300
word_33336:	dc.w $C
		dc.w $13F0
		dc.w $2D0
		dc.w $1560
		dc.w $2D0
		dc.w $1560
		dc.w $280
word_33344:	dc.w $C
		dc.w $2090
		dc.w $650
		dc.w $2030
		dc.w $650
		dc.w $2030
		dc.w $680
word_33352:	dc.w $C
		dc.w $20F0
		dc.w $650
		dc.w $21E0
		dc.w $650
		dc.w $21E0
		dc.w $600
; ---------------------------------------------------------------------------

Obj_CNZBarberPoleSprite:
		tst.b	$2C(a0)
		beq.s	loc_33370
		move.l	#loc_335A8,(a0)
		bra.w	loc_335A8
; ---------------------------------------------------------------------------

loc_33370:
		move.l	#loc_33376,(a0)

loc_33376:
		lea	$30(a0),a2
		lea	(Player_1).w,a1
		moveq	#3,d6
		bsr.s	sub_33392
		addq.w	#6,a2
		lea	(Player_2).w,a1
		moveq	#4,d6			; NAT: FUCK SANIC TEEM
		bsr.s	sub_33392
		jmp	Delete_Sprite_If_Not_In_Range.w

; =============== S U B R O U T I N E =======================================


sub_33392:
		cmp.b	#6,5(a1)
		bhs.w	locret_33428

		btst	d6,$2A(a0)
		bne.w	loc_334B6
		btst	#3,$2A(a1)
		bne.w	loc_3342A

		moveq	#0,d0
		move.b	$1F(a1),d0
		neg.w	d0
		add.w	$10(a1),d0
		sub.w	$10(a0),d0
		addi.w	#$40,d0
		cmpi.w	#$A0,d0
		bhs.s	locret_33428
		subi.w	#$61,d0
		moveq	#0,d1
		move.b	$1E(a1),d1
		add.w	$14(a1),d1
		sub.w	$14(a0),d1
		sub.w	d0,d1
		cmpi.w	#$10,d1
		bhs.s	locret_33428

		tst.b	$2E(a1)
		bne.s	locret_33428
		tst.b	(Debug_On).w
		bne.s	locret_33428
		btst	#1,$2A(a1)
		beq.s	loc_333F2
		tst.w	$1A(a1)
		bmi.s	locret_33428

loc_333F2:
		move.l	$10(a1),(a2)
		move.w	(a2),d0
		sub.w	$10(a0),d0
		addi.w	#$40,d0
		move.w	d0,(a2)
		clr.w	4(a2)
		subi.w	#$18,d0
		cmpi.w	#$70,d0
		bhs.s	loc_33418
		move.w	#1,4(a2)

loc_33418:
		bsr.w	sub_337D8
		move.b	#$20,$26(a1)

loc_33422:
		move.b	#2,$2D(a1)

locret_33428:
		rts
; ---------------------------------------------------------------------------

loc_3342A:
		moveq	#0,d0
		move.b	$1F(a1),d0
		neg.w	d0
		add.w	$10(a1),d0
		sub.w	$10(a0),d0
		addi.w	#$30,d0
		cmpi.w	#$80,d0
		bhs.s	locret_334B4
		subi.w	#$51,d0
		moveq	#0,d1
		move.b	$1E(a1),d1
		add.w	$14(a1),d1
		sub.w	$14(a0),d1
		sub.w	d0,d1
		cmpi.w	#$10,d1
		bhs.s	locret_334B4
		tst.b	$2E(a1)
		bne.s	locret_334B4
		btst	#1,$2A(a1)
		beq.s	loc_33472
		tst.w	$1A(a1)
		bmi.s	locret_334B4

loc_33472:
		movea.w	$42(a1),a3
		cmpi.l	#loc_33376,(a3)
		bne.s	locret_334B4
		move.l	$10(a1),(a2)
		move.w	(a2),d0
		sub.w	$10(a0),d0
		addi.w	#$40,d0
		move.w	d0,(a2)
		move.w	#0,4(a2)
		subi.w	#$20,d0
		cmpi.w	#$60,d0
		bhs.s	loc_334A4
		move.w	#1,4(a2)

loc_334A4:
		bsr.w	sub_337D8
		move.b	#$20,$26(a1)
		move.b	#2,$2D(a1)

locret_334B4:

		rts
; ---------------------------------------------------------------------------

loc_334B6:
		tst.w	4(a2)
		bne.s	loc_334D2
		move.w	$1C(a1),d0
		bpl.s	loc_334C4
		neg.w	d0

loc_334C4:
		cmpi.w	#$118,d0
		bhs.s	loc_334D2
		bset	#1,$2A(a1)
		bra.s	loc_334FA
; ---------------------------------------------------------------------------

loc_334D2:

		btst	#1,$2A(a1)
		bne.s	loc_334FA
		move.w	$18(a1),d0
		ext.l	d0
		lsl.l	#6,d0
		move.l	d0,d1
		add.l	d0,d0
		add.l	d1,d0
		add.l	d0,(a2)
		moveq	#0,d0
		move.b	$1F(a1),d0
		neg.w	d0
		add.w	(a2),d0
		cmpi.w	#$A0,d0
		blo.s	loc_33518

loc_334FA:
		and.b	#(~$88)&$FF,$2A(a1)		; NAT: Clear no-spawn and no fall flags
		bclr	d6,$2A(a0)
		clr.b	$30(a1)
		move.b	#4,$31(a1)
		andi.w	#$7FFF,$A(a1)
		rts
; ---------------------------------------------------------------------------

loc_33518:
		btst	#3,$2A(a1)
		beq.w	locret_335A6
		move.w	d0,d2
		subi.b	#$10,d0
		bcc.s	loc_33532
		move.w	#0,4(a2)
		moveq	#0,d0

loc_33532:
		cmpi.b	#-$80,d0
		blo.s	loc_33542
		move.w	#0,4(a2)
		move.w	#$80,d0

loc_33542:
		andi.w	#$7FFF,$A(a1)
		cmpi.b	#$34,d0
		bhs.s	loc_33554
		ori.w	#-$8000,$A(a1)

loc_33554:
		tst.w	4(a2)
		beq.s	loc_3355C
		moveq	#0,d0

loc_3355C:
		add.w	d0,d0
		move.b	d0,$27(a1)
		jsr	GetSineCosine.w
		move.w	d1,d4
		asr.w	#4,d1
		move.w	d1,d3
		add.w	d2,d1
		add.w	$10(a0),d1
		subi.w	#$50,d1
		moveq	#0,d0
		move.b	$1F(a1),d0
		muls.w	d4,d0
		asr.w	#8,d0
		add.w	d0,d1
		move.w	d1,$10(a1)
		move.w	d2,d0
		subi.w	#$51,d0
		move.w	$14(a0),d2
		sub.w	d3,d2
		add.w	d0,d2
		moveq	#0,d1
		move.b	$1E(a1),d1
		muls.w	d4,d1
		asr.w	#8,d1
		sub.w	d1,d2
		move.w	d2,$14(a1)

locret_335A6:
		rts
; End of function sub_33392

; ---------------------------------------------------------------------------

loc_335A8:

		lea	$30(a0),a2
		lea	(Player_1).w,a1
		moveq	#3,d6
		bsr.s	sub_335C4
		addq.w	#6,a2
		lea	(Player_2).w,a1
		moveq	#4,d6			; NAT: FUCK SANIC TEEM
		bsr.s	sub_335C4
		jmp	Delete_Sprite_If_Not_In_Range.w

; =============== S U B R O U T I N E =======================================


sub_335C4:
		cmp.b	#6,5(a1)
		bhs.s	locret_335A6
		btst	d6,$2A(a0)
		bne.w	loc_336E4
		btst	#3,$2A(a1)
		bne.w	loc_3365A
		moveq	#0,d0
		move.b	$1F(a1),d0
		add.w	$10(a1),d0
		sub.w	$10(a0),d0
		addi.w	#$60,d0
		cmpi.w	#$A0,d0
		bhs.s	locret_33658
		subi.w	#$3E,d0
		moveq	#0,d1
		move.b	$1E(a1),d1
		add.w	$14(a1),d1
		sub.w	$14(a0),d1
		add.w	d0,d1
		cmpi.w	#$10,d1
		bhs.s	locret_33658
		tst.b	$2E(a1)
		bne.s	locret_33658
		tst.b	(Debug_On).w
		bne.s	locret_33658
		btst	#1,$2A(a1)
		beq.s	loc_33622
		tst.w	$1A(a1)
		bmi.s	locret_33658

loc_33622:
		move.l	$10(a1),(a2)
		move.w	(a2),d0
		sub.w	$10(a0),d0
		addi.w	#$60,d0
		move.w	d0,(a2)
		move.w	#0,4(a2)
		subi.w	#$18,d0
		cmpi.w	#$70,d0
		bhs.s	loc_33648
		move.w	#1,4(a2)

loc_33648:
		bsr.w	sub_337D8
		move.b	#-$20,$26(a1)
		move.b	#3,$2D(a1)

locret_33658:

		rts
; ---------------------------------------------------------------------------

loc_3365A:
		moveq	#0,d0
		move.b	$1F(a1),d0
		add.w	$10(a1),d0
		sub.w	$10(a0),d0
		addi.w	#$50,d0
		cmpi.w	#$80,d0
		bhs.s	locret_336E2
		subi.w	#$2E,d0
		moveq	#0,d1
		move.b	$1E(a1),d1
		add.w	$14(a1),d1
		sub.w	$14(a0),d1
		add.w	d0,d1
		cmpi.w	#$10,d1
		bhs.s	locret_336E2
		tst.b	$2E(a1)
		bne.s	locret_336E2
		btst	#1,$2A(a1)
		beq.s	loc_336A0
		tst.w	$1A(a1)
		bmi.s	locret_336E2

loc_336A0:
		movea.w	$42(a1),a3
		cmpi.l	#loc_335A8,(a3)
		bne.s	locret_336E2
		move.l	$10(a1),(a2)
		move.w	(a2),d0
		sub.w	$10(a0),d0
		addi.w	#$60,d0
		move.w	d0,(a2)
		move.w	#0,4(a2)
		subi.w	#$20,d0
		cmpi.w	#$60,d0
		bhs.s	loc_336D2
		move.w	#1,4(a2)

loc_336D2:
		bsr.w	sub_337D8
		move.b	#-$20,$26(a1)
		move.b	#3,$2D(a1)

locret_336E2:

		rts
; ---------------------------------------------------------------------------

loc_336E4:
		tst.w	4(a2)
		bne.s	loc_33700
		move.w	$1C(a1),d0
		bpl.s	loc_336F2
		neg.w	d0

loc_336F2:
		cmpi.w	#$118,d0
		bhs.s	loc_33700
		bset	#1,$2A(a1)
		bra.s	loc_33726
; ---------------------------------------------------------------------------

loc_33700:

		btst	#1,$2A(a1)
		bne.s	loc_33726
		move.w	$18(a1),d0
		ext.l	d0
		lsl.l	#6,d0
		move.l	d0,d1
		add.l	d0,d0
		add.l	d1,d0
		add.l	d0,(a2)
		moveq	#0,d0
		move.b	$1F(a1),d0
		add.w	(a2),d0
		cmpi.w	#$A0,d0
		blo.s	loc_33744

loc_33726:
		and.b	#(~$88)&$FF,$2A(a1)		; NAT: Clear no-spawn and no fall flags
		bclr	d6,$2A(a0)
		clr.b	$30(a1)
		move.b	#4,$31(a1)
		andi.w	#$7FFF,$A(a1)
		rts
; ---------------------------------------------------------------------------

loc_33744:
		btst	#3,$2A(a1)
		beq.w	locret_337D6
		move.w	d0,d2
		subi.b	#$10,d0
		bcc.s	loc_3375E
		move.w	#0,4(a2)
		moveq	#0,d0

loc_3375E:
		cmpi.b	#-$80,d0
		blo.s	loc_3376E
		move.w	#0,4(a2)
		move.w	#$80,d0

loc_3376E:
		andi.w	#$7FFF,$A(a1)
		cmpi.b	#$4C,d0
		blo.s	loc_33780
		ori.w	#-$8000,$A(a1)

loc_33780:
		tst.w	4(a2)
		beq.s	loc_33788
		moveq	#0,d0

loc_33788:
		neg.b	d0
		add.w	d0,d0
		move.b	d0,$27(a1)
		jsr	GetSineCosine.w
		move.w	d1,d4
		asr.w	#4,d1
		move.w	d1,d3
		neg.w	d1
		add.w	d2,d1
		add.w	$10(a0),d1
		subi.w	#$50,d1
		moveq	#0,d0
		move.b	$1F(a1),d0
		muls.w	d4,d0
		asr.w	#8,d0
		sub.w	d0,d1
		move.w	d1,$10(a1)
		move.w	d2,d0
		subi.w	#$4E,d0
		move.w	$14(a0),d2
		sub.w	d3,d2
		sub.w	d0,d2
		moveq	#0,d1
		move.b	$1E(a1),d1
		muls.w	d4,d1
		asr.w	#8,d1
		sub.w	d1,d2
		move.w	d2,$14(a1)

locret_337D6:
		rts
; End of function sub_335C4


; =============== S U B R O U T I N E =======================================


sub_337D8:

		btst	#3,$2A(a1)
		beq.s	loc_337E8
		movea.w	$42(a1),a3
		bclr	d6,$2A(a3)

loc_337E8:
		move.w	a0,$42(a1)
		btst	#1,$2A(a1)
		beq.s	loc_33824
		clr.w	$1A(a1)
		move.w	$18(a1),$1C(a1)
		move.l	a0,-(sp)
		movea.l	a1,a0
		move.w	a0,d1
		subi.w	#-$5000,d1
		bne.s	loc_3381C
		cmpi.w	#2,(Player_mode).w
		beq.s	loc_3381C
		jsr	(Player_TouchFloor).l
		bra.s	loc_33822
; ---------------------------------------------------------------------------

loc_3381C:

		jsr	(Tails_TouchFloor).l

loc_33822:
		movea.l	(sp)+,a0

loc_33824:
		or.b	#$88,$2A(a1)		; NAT: Set no-spawn and no fall flags
		bclr	#1,$2A(a1)
		bset	d6,$2A(a0)
		rts
; End of function sub_337D8

; ---------------------------------------------------------------------------

Obj_4E_1:
		moveq	#0,d0
		move.b	$2C(a0),d0
		lsl.w	#3,d0
		move.w	d0,$38(a0)
		add.w	d0,d0
		move.w	d0,$3A(a0)
		moveq	#1,d1
		btst	#0,$2A(a0)
		bne.s	loc_33854
		neg.w	d1

loc_33854:
		move.w	d1,$1A(a0)
		move.l	#loc_3385E,(a0)

loc_3385E:
		lea	(Player_1).w,a1
		lea	$30(a0),a2
		moveq	#3,d6
		move.w	(Ctrl_1_logical).w,d5
		bsr.s	sub_338C4

		lea	(Player_2).w,a1
		lea	$34(a0),a2
		moveq	#4,d6			; NAT3: Fucking retarded Sonic Team forgot PLC loading replaces d6!
		move.w	(Ctrl_2_logical).w,d5	; This was originally addq.b #1,d6, which broke Tails. LMAO
		bsr.s	sub_338C4

		move.b	(Level_frame_counter+1).w,d0
		andi.b	#$3F,d0
		bne.s	loc_338BE
		move.w	$10(a0),d0
		sub.w	(Camera_X_pos).w,d0
		addi.w	#$40,d0
		cmpi.w	#$1C0,d0
		bhs.s	loc_338BE

loc_3389A:
		move.w	$14(a1),d0
		sub.w	$14(a0),d0
		add.w	$38(a0),d0
		addi.w	#$40,d0
		move.w	$3A(a0),d1
		addi.w	#$80,d1
		cmp.w	d1,d0
		bhs.s	loc_338BE
		moveq	#-$3A,d0
		jsr	Play_Sound_2.w

loc_338BE:

		jmp	Delete_Sprite_If_Not_In_Range.w

; =============== S U B R O U T I N E =======================================


sub_338C4:

		btst	d6,$2A(a0)
		bne.w	loc_339A0
		tst.b	1(a2)
		beq.s	loc_338D8
		subq.b	#1,1(a2)
		rts
; ---------------------------------------------------------------------------

loc_338D8:
		moveq	#0,d1
		move.b	$1E(a1),d1
		addi.w	#$44,d1
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		add.w	d1,d0
		add.w	d1,d1
		cmp.w	d1,d0
		bhs.w	locret_3399E
		move.w	$14(a1),d0
		sub.w	$14(a0),d0
		add.w	$38(a0),d0
		cmp.w	$3A(a0),d0
		bhs.w	locret_3399E
		tst.b	$2E(a1)
		bne.w	locret_3399E
		tst.b	(Debug_On).w
		bne.w	locret_3399E
		subi.w	#$10,d0
		bcc.s	loc_33922
		sub.w	d0,$14(a1)

loc_33922:
		btst	#1,$2A(a1)
		beq.w	loc_33958
		tst.b	$26(a1)
		beq.s	loc_3394C
		bclr	#1,$2A(a1)
		move.w	$1C(a1),d0
		bpl.s	loc_33940
		neg.w	d0

loc_33940:
		cmpi.w	#$400,d0
		bhs.s	loc_33958
		bset	#1,$2A(a1)

loc_3394C:
		move.b	#1,1(a2)		; not walking up to it
		bset	#0,$2E(a1)		; obj controls player

loc_33958:
		bsr.w	sub_33C34
		move.b	#-$80,(a2)
		move.b	#-$40,$26(a1)		; set angle
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		bcs.s	loc_3397A
		move.b	#$40,$26(a1)		; another side
		move.b	#0,(a2)

loc_3397A:
		bclr	#0,$2A(a1)
		bclr	#0,4(a1)
		bclr	#1,4(a1)
		bset	#6,$2E(a1)
		bset	#1,$2E(a1)
		move.b	#0,$20(a1)		; walking animation

locret_3399E:
		rts
; ---------------------------------------------------------------------------

loc_339A0:
		cmp.b	#6,5(a1)		; is player dead?
		bgt.s	loc_33A0E		; if yes, branch

		tst.b	1(a2)
		bne.w	loc_33ADE
		tst.b	(Debug_On).w
		bne.s	loc_33A0E
		move.w	$1C(a1),d0
		bpl.s	loc_339B6
		neg.w	d0

loc_339B6:
		cmpi.w	#$300,d0
		bhs.s	loc_339CC
		move.b	#1,1(a2)
		bset	#0,$2E(a1)
		bra.w	loc_33ADE
; ---------------------------------------------------------------------------

loc_339CC:
		btst	#1,$2A(a1)
		beq.s	loc_339FC
		move.w	#-$800,$18(a1)
		move.w	#-$200,$1A(a1)
		bset	#0,$2A(a1)
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		bcs.s	loc_33A0E
		neg.w	$18(a1)
		bclr	#0,$2A(a1)
		bra.s	loc_33A0E
; ---------------------------------------------------------------------------

loc_339FC:
		move.w	$14(a1),d0
		sub.w	$14(a0),d0
		add.w	$38(a0),d0
		cmp.w	$3A(a0),d0
		blo.s	loc_33A50

loc_33A0E:

		move.b	#0,$26(a1)
		bclr	#2,$2A(a1)
		move.b	#$13,$1E(a1)
		move.b	#9,$1F(a1)
		move.w	#1,$20(a1)
		bclr	#3,$2A(a1)
		bclr	d6,$2A(a0)
		bclr	#6,$2E(a1)
		bclr	#1,$2E(a1)
		andi.w	#$7FFF,$A(a1)
		move.b	#$10,1(a2)
		rts
; ---------------------------------------------------------------------------

loc_33A50:
		move.w	$1A(a0),d1
		bpl.s	loc_33A5C
		cmpi.w	#$10,d0
		bls.s	loc_33A60

loc_33A5C:
		add.w	d1,$14(a1)

loc_33A60:
		subi.w	#$10,d0
		bcc.s	loc_33A6A
		sub.w	d0,$14(a1)

loc_33A6A:
		moveq	#0,d0
		move.b	(a2),d0
		addq.b	#4,(a2)
		jsr	GetSineCosine.w
		move.w	d1,d3
		asr.w	#2,d1
		add.w	$10(a0),d1
		moveq	#0,d0
		move.b	$1E(a1),d0
		muls.w	d3,d0
		asr.w	#8,d0
		add.w	d0,d1
		move.w	d1,$10(a1)
		moveq	#0,d0
		move.b	(a2),d0
		andi.w	#$7FFF,$A(a1)
		cmpi.b	#-$80,d0
		blo.s	loc_33AA4
		ori.w	#-$8000,$A(a1)

loc_33AA4:
		addi.b	#$40,d0
		neg.b	d0
		andi.w	#$FF,d0
		divu.w	#$B,d0
		move.b	RawAni_33AC6(pc,d0.w),$22(a1)
		moveq	#0,d0
		move.b	$22(a1),d0
		jmp	(Tails_Carry_LoadPLC).l

; ---------------------------------------------------------------------------
RawAni_33AC6:	dc.b  $76, $76, $77, $77, $6C, $6C, $6D, $6D, $6E, $6E, $6F, $6F, $70, $70, $71, $71, $72, $72, $73, $73
		dc.b  $74, $74, $75, $75
; ---------------------------------------------------------------------------

loc_33ADE:

		tst.b	(Debug_On).w
		bne.s	loc_33B62
		andi.w	#$70,d5		; check ABC
		beq.s	loc_33B1E
		bset	#1,$2A(a1)
		move.b	#0,$40(a1)
		move.w	#-$800,$18(a1)
		move.w	#-$200,$1A(a1)
		bset	#0,$2A(a1)
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		bcs.s	loc_33B62
		neg.w	$18(a1)
		bclr	#0,$2A(a1)
		bra.s	loc_33B62
; ---------------------------------------------------------------------------

loc_33B1E:
		btst	#1,$2A(a1)
		bne.s	loc_33B62
		move.w	$14(a1),d0
		sub.w	$14(a0),d0

loc_33B2E:
		add.w	$38(a0),d0
		cmp.w	$3A(a0),d0
		blo.s	loc_33BAA
		bne.s	loc_33B62
		move.b	(a2),d0
		andi.b	#$7F,d0
		bne.s	loc_33BBA
		move.w	#-$100,$18(a1)
		move.w	#0,$1A(a1)
		tst.b	(a2)
		bmi.s	loc_33B56
		neg.w	$18(a1)

loc_33B56:
		move.w	$18(a1),$1C(a1)
		bset	#1,$2A(a1)

loc_33B62:

		move.b	#0,$26(a1)
		bclr	#2,$2A(a1)
		move.b	#$13,$1E(a1)
		move.b	#9,$1F(a1)
		move.w	#1,$20(a1)
		bclr	#3,$2A(a1)
		bclr	d6,$2A(a0)
		bclr	#6,$2E(a1)
		bclr	#1,$2E(a1)
		bclr	#0,$2E(a1)
		andi.w	#$7FFF,$A(a1)
		move.b	#$10,1(a2)		; delay
		rts
; ---------------------------------------------------------------------------

loc_33BAA:
		move.w	$1A(a0),d1
		bpl.s	loc_33BB6
		cmpi.w	#$10,d0
		bls.s	loc_33BBA

loc_33BB6:
		add.w	d1,$14(a1)

loc_33BBA:

		moveq	#0,d0
		move.b	(a2),d0
		addq.b	#4,(a2)
		jsr	GetSineCosine.w
		move.w	d1,d3
		asr.w	#2,d1
		add.w	$10(a0),d1
		moveq	#0,d0
		move.b	$1E(a1),d0
		muls.w	d3,d0
		asr.w	#8,d0
		add.w	d0,d1
		move.w	d1,$10(a1)
		moveq	#0,d0
		move.b	(a2),d0
		andi.w	#$7FFF,$A(a1)
		cmpi.b	#-$80,d0
		blo.s	loc_33BF4
		ori.w	#-$8000,$A(a1)

loc_33BF4:
		addi.b	#$40,d0
		neg.b	d0
		andi.w	#$FF,d0
		divu.w	#$B,d0
		move.b	RawAni_33C1C(pc,d0.w),$22(a1)
		move.b	#0,$20(a1)
		moveq	#0,d0
		move.b	$22(a1),d0
		jmp	(Tails_Carry_LoadPLC).l

; ---------------------------------------------------------------------------
RawAni_33C1C:	dc.b  $5E, $5E, $5E, $5F, $5F, $5F, $5F, $60, $60, $60, $60, $60, $61, $61, $61, $61, $5C, $5C, $5C, $5C
		dc.b  $5D, $5D, $5D, $5D

; =============== S U B R O U T I N E =======================================


sub_33C34:

		btst	#3,$2A(a1)
		beq.s	loc_33C44
		movea.w	$42(a1),a3
		bclr	d6,$2A(a3)		; make not stand on platform

loc_33C44:
		move.w	a0,$42(a1)		; set this as the platform pl is standing on
		btst	#1,$2A(a1)
		beq.s	loc_33C62
		move.w	#0,$18(a1)
		move.l	a0,-(sp)
		movea.l	a1,a0
		jsr	(Player_TouchFloor).l
		movea.l	(sp)+,a0

loc_33C62:
		bset	#3,$2A(a1)
		bclr	#1,$2A(a1)
		bset	d6,$2A(a0)
		rts
; End of function sub_33C34

; ---------------------------------------------------------------------------

Obj_50_1:
		moveq	#0,d0
		move.b	$2C(a0),d0

loc_33C7A:
		lsl.w	#4,d0
		move.w	d0,$3C(a0)
		move.l	#loc_33C86,(a0)

loc_33C86:
		lea	(Player_1).w,a1
		lea	$30(a0),a2
		moveq	#3,d6
		move.w	(Ctrl_1_logical).w,d5
		bsr.s	sub_33CAC
		lea	(Player_2).w,a1
		lea	$36(a0),a2
		moveq	#4,d6			; NAT: 3RD DAMN TIME FUCKING SHIT I HATE THIS GAME
		move.w	(Ctrl_2_logical).w,d5
		bsr.s	sub_33CAC
		jmp	Delete_Sprite_If_Not_In_Range.w

; =============== S U B R O U T I N E =======================================


sub_33CAC:

		btst	d6,$2A(a0)
		bne.w	loc_33D8A

loc_33CB4:
		tst.b	4(a2)
		beq.s	loc_33CE6
		subq.b	#1,4(a2)
		bne.s	loc_33CC6
		bclr	#0,$2E(a1)

loc_33CC6:
		move.w	$18(a1),d0
		ext.l	d0
		lsl.l	#8,d0
		add.l	d0,$10(a1)
		move.w	$1A(a1),d0
		addi.w	#$38,$1A(a1)
		ext.l	d0
		lsl.l	#8,d0
		add.l	d0,$14(a1)
		rts
; ---------------------------------------------------------------------------

loc_33CE6:
		moveq	#0,d1
		move.b	$1E(a1),d1
		addi.w	#$24,d1
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		add.w	d1,d0
		add.w	d1,d1
		cmp.w	d1,d0
		bhs.w	locret_33D88
		move.w	$14(a1),d0
		sub.w	$14(a0),d0
		cmpi.w	#$20,d0
		bhs.s	locret_33D88
		tst.b	$2E(a1)
		bne.s	locret_33D88
		tst.b	(Debug_On).w
		bne.s	locret_33D88
		btst	#1,$2A(a1)
		bne.s	locret_33D88
		move.b	$26(a1),d0
		andi.b	#$7F,d0
		cmpi.w	#$40,d0
		bne.s	locret_33D88
		move.l	$14(a1),(a2)
		move.w	(a2),d0
		sub.w	$14(a0),d0
		move.w	d0,(a2)
		bsr.w	sub_33C34
		move.b	#-$40,$26(a1)
		bclr	#0,4(a1)
		move.b	#-$80,5(a2)
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		bcs.s	loc_33D70
		move.b	#$40,$26(a1)
		bset	#0,4(a1)
		move.b	#0,5(a2)

loc_33D70:
		bset	#1,4(a1)
		bset	#6,$2E(a1)
		bset	#1,$2E(a1)
		move.b	#0,$20(a1)

locret_33D88:

		rts
; ---------------------------------------------------------------------------

loc_33D8A:
		tst.b	(Debug_On).w
		bne.w	loc_33E7A
		andi.w	#$70,d5
		beq.s	loc_33DDC
		move.b	#8,4(a2)
		bset	#0,$2E(a1)
		bset	#1,$2A(a1)
		move.b	#0,$40(a1)
		move.w	#-$800,$18(a1)
		move.w	#-$200,$1A(a1)
		bset	#0,$2A(a1)
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		bcs.w	loc_33E7A
		neg.w	$18(a1)
		bclr	#0,$2A(a1)
		bra.w	loc_33E7A
; ---------------------------------------------------------------------------

loc_33DDC:
		move.w	$1C(a1),d0
		bpl.s	loc_33DF2
		neg.w	d0
		cmpi.w	#$400,d0
		bhs.s	loc_33DFE
		move.w	#-$400,$1C(a1)
		bra.s	loc_33DFE
; ---------------------------------------------------------------------------

loc_33DF2:
		cmpi.w	#$400,d0
		bhs.s	loc_33DFE
		move.w	#$400,$1C(a1)

loc_33DFE:

		move.w	$14(a1),d0
		sub.w	$14(a0),d0
		cmp.w	$3C(a0),d0
		blo.w	loc_33EBE
		move.w	$1C(a1),d0
		bpl.s	loc_33E2A
		neg.w	d0
		cmpi.w	#$C00,d0
		blo.s	loc_33E3C
		move.w	#-$C00,$1C(a1)
		move.w	#$C00,$1A(a1)
		bra.s	loc_33E3C
; ---------------------------------------------------------------------------

loc_33E2A:
		cmpi.w	#$C00,d0
		blo.s	loc_33E3C
		move.w	#$C00,$1C(a1)
		move.w	#$C00,$1A(a1)

loc_33E3C:

		move.w	$1A(a1),d0
		ext.l	d0
		lsl.l	#6,d0
		move.l	d0,d1
		add.l	d0,d0
		add.l	d1,d0
		add.l	(a2),d0
		swap	d0
		moveq	#0,d2
		mulu.w	#$155,d0
		lsr.l	#8,d0
		move.w	d0,d2
		add.b	5(a2),d0
		jsr	GetSineCosine.w
		move.w	d1,d3
		asr.w	#3,d1
		add.w	$10(a0),d1
		moveq	#0,d0
		move.b	$1E(a1),d0
		muls.w	d3,d0
		asr.w	#8,d0
		add.w	d0,d1
		move.w	d1,$10(a1)

loc_33E7A:

		btst	#0,$2A(a0)
		beq.s	loc_33E88
		addi.b	#-$80,$26(a1)

loc_33E88:
		bclr	#2,$2A(a1)
		move.b	#$13,$1E(a1)
		move.b	#9,$1F(a1)
		move.w	#1,$20(a1)
		bclr	#3,$2A(a1)
		bclr	d6,$2A(a0)
		bclr	#6,$2E(a1)
		bclr	#1,$2E(a1)
		andi.w	#$7FFF,$A(a1)
		rts
; ---------------------------------------------------------------------------

loc_33EBE:
		move.w	$1C(a1),d0
		bpl.s	loc_33EDA
		neg.w	d0
		cmpi.w	#$C00,d0
		blo.s	loc_33EEC
		move.w	#-$C00,$1C(a1)
		move.w	#$C00,$1A(a1)
		bra.s	loc_33EEC
; ---------------------------------------------------------------------------

loc_33EDA:
		cmpi.w	#$C00,d0
		blo.s	loc_33EEC
		move.w	#$C00,$1C(a1)
		move.w	#$C00,$1A(a1)

loc_33EEC:

		move.w	$1A(a1),d0
		ext.l	d0
		lsl.l	#6,d0
		move.l	d0,d1
		add.l	d0,d0
		add.l	d1,d0
		add.l	d0,(a2)
		moveq	#0,d0
		moveq	#0,d2
		move.w	(a2),d0
		mulu.w	#$155,d0
		lsr.l	#8,d0
		move.w	d0,d2
		add.b	5(a2),d0
		jsr	GetSineCosine.w
		move.w	d1,d3
		asr.w	#3,d1
		add.w	$10(a0),d1
		moveq	#0,d0
		move.b	$1E(a1),d0
		muls.w	d3,d0
		asr.w	#8,d0
		add.w	d0,d1
		move.w	d1,$10(a1)
		move.w	(a2),d0
		add.w	$14(a0),d0

loc_33F32:
		move.w	d0,$14(a1)
		moveq	#0,d0
		andi.w	#$7FFF,$A(a1)
		cmpi.b	#-$80,d2
		bhs.s	loc_33F4A
		ori.w	#-$8000,$A(a1)

loc_33F4A:
		subi.b	#$40,d2
		neg.b	d2
		andi.w	#$FF,d2
		divu.w	#$B,d2
		move.b	byte_33F6C(pc,d2.w),$22(a1)
		moveq	#0,d0
		move.b	$22(a1),d0
		jmp	(Tails_Carry_LoadPLC).l
; End of function sub_33CAC

; ---------------------------------------------------------------------------
		rts
; ---------------------------------------------------------------------------
byte_33F6C:	dc.b  $76, $76, $77, $77, $6C, $6C, $6D, $6D, $6E, $6E, $6F, $6F, $70, $70, $71, $71, $72, $72, $73, $73
		dc.b  $74, $74, $75, $75
; ---------------------------------------------------------------------------

Obj_MGZSwingingPlatform:

		move.l	#Map_MGZSwingingPlatform,$C(a0)
		move.w	#$435F,$A(a0)
		move.b	#4,4(a0)
		move.b	#$18,7(a0)
		move.b	#$C,6(a0)
		move.w	#prio(4),8(a0)
		move.w	$10(a0),$30(a0)
		move.w	$14(a0),$32(a0)
		move.b	#2,$22(a0)
		jsr	Create_New_Sprite3.w
		bne.w	loc_3401C
		move.l	#loc_3406E,(a1)
		move.l	#Map_MGZSwingingPlatform,$C(a1)
		move.w	#$435F,$A(a1)
		move.b	#4,4(a1)
		move.b	#$50,7(a1)
		move.b	#$50,6(a1)
		move.w	#prio(5),8(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		btst	#1,$2A(a0)
		bne.s	loc_3400C
		move.b	#1,$22(a1)

loc_3400C:
		bset	#6,4(a1)
		move.w	#4,$16(a1)
		move.w	a1,$3C(a0)

loc_3401C:
		moveq	#1,d0
		btst	#0,$2A(a0)
		beq.s	loc_34028
		neg.w	d0

loc_34028:
		move.b	d0,$36(a0)
		move.b	$2C(a0),d0
		move.b	d0,$34(a0)
		move.l	#loc_3403A,(a0)

loc_3403A:
		move.w	$10(a0),-(sp)
		movea.w	$3C(a0),a1
		bsr.w	sub_34074
		move.b	$36(a0),d0
		add.b	d0,$34(a0)
		moveq	#0,d1
		move.b	7(a0),d1
		moveq	#0,d3
		move.b	6(a0),d3
		addq.w	#1,d3
		move.w	(sp)+,d4
		jsr	SolidObjectTop.w
		move.w	$30(a0),d0
		jmp	Sprite_OnScreen_Test2.w
; ---------------------------------------------------------------------------

loc_3406E:
		jmp	Sprite_OnScreen_Test.w

; =============== S U B R O U T I N E =======================================


sub_34074:
		move.b	$34(a0),d0
		jsr	GetSineCosine.w
		move.w	$32(a0),d2
		move.w	$30(a0),d3
		swap	d0
		swap	d1
		asr.l	#4,d0
		asr.l	#4,d1
		move.l	d0,d4
		move.l	d1,d5
		lea	$18(a1),a2
		move.w	$16(a1),d6
		subq.w	#1,d6

loc_3409C:
		movem.l	d4-d5,-(sp)
		swap	d4
		swap	d5
		add.w	d2,d4
		add.w	d3,d5
		move.w	d5,(a2)+
		move.w	d4,(a2)+
		movem.l	(sp)+,d4-d5
		add.l	d0,d4
		add.l	d1,d5
		addq.w	#2,a2
		dbf	d6,loc_3409C
		swap	d4
		swap	d5
		add.w	d2,d4
		add.w	d3,d5
		move.w	d5,$10(a0)
		move.w	d4,$14(a0)
		rts
; End of function sub_34074

; ---------------------------------------------------------------------------

Obj_MGZSwingingSpikeBall:
;		tst.b	OptionsBits.w		; NAT: Check if alternate layout
;		bmi.w	loc_34530		; if is, delete

		move.l	#Map_MGZSwingingSpikeBall,$C(a0)
		move.w	#$235F,$A(a0)
		ori.b	#4,4(a0)
		move.b	#$20,7(a0)
		move.b	#$20,6(a0)
		move.w	#prio(4),8(a0)
		move.w	$10(a0),$30(a0)
		move.w	$14(a0),$32(a0)
		move.b	#3,$22(a0)
		move.b	#-$71,$28(a0)
		jsr	Create_New_Sprite3.w
		bne.w	loc_34180
		move.l	#loc_34244,(a1)
		move.l	#Map_MGZSwingingSpikeBall,$C(a1)
		move.w	#$235F,$A(a1)
		move.b	4(a0),4(a1)
		move.b	#$50,7(a1)
		move.b	#$50,6(a1)
		move.w	#prio(5),8(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		bset	#6,4(a1)
		move.w	#4,$16(a1)
		lea	$18(a1),a2
		move.w	$16(a1),d0

loc_34160:
		move.w	$10(a0),(a2)+
		move.w	$14(a0),(a2)+
		move.w	#0,(a2)+
		dbf	d0,loc_34160
		move.w	#1,-2(a2)
		move.b	#1,$22(a1)
		move.w	a1,$3C(a0)

loc_34180:
		move.b	$2C(a0),d0
		beq.s	loc_341A6
		move.w	#2,-2(a2)
		move.b	#2,$22(a1)
		move.w	#-$8000,$34(a0)
		move.w	#$100,$36(a0)
		move.l	#loc_341FA,(a0)
		bra.s	loc_341FA
; ---------------------------------------------------------------------------

loc_341A6:
		moveq	#2,d0
		btst	#1,$2A(a0)
		beq.s	loc_341B2
		neg.w	d0

loc_341B2:
		move.b	d0,$36(a0)
		move.l	#loc_341BC,(a0)

loc_341BC:
		movea.w	$3C(a0),a1
		bsr.w	sub_3424A
		move.b	$34(a0),d2
		move.b	$36(a0),d0
		add.b	d0,$34(a0)
		tst.b	4(a0)
		bpl.s	loc_341F0
		move.b	$34(a0),d0
		eor.b	d0,d2
		andi.b	#$40,d2
		beq.s	loc_341F0
		andi.b	#$40,d0
		beq.s	loc_341F0
		moveq	#-$37,d0
		jsr	Play_Sound_2.w

loc_341F0:

		move.w	$30(a0),d0
		jmp	loc_1B666.w
; ---------------------------------------------------------------------------

loc_341FA:

		movea.w	$3C(a0),a1
		bsr.w	sub_342A6
		move.b	$34(a0),d2
		bpl.s	loc_34210
		addi.w	#$10,$36(a0)
		bra.s	loc_34216
; ---------------------------------------------------------------------------

loc_34210:
		subi.w	#$10,$36(a0)

loc_34216:
		move.w	$36(a0),d0
		add.w	d0,$34(a0)
		tst.b	4(a0)
		bpl.s	loc_3423E
		move.b	$34(a0),d0
		eor.b	d0,d2
		andi.b	#$40,d2
		beq.s	loc_3423E
		andi.b	#$40,d0
		beq.s	loc_3423E
		moveq	#-$37,d0
		jsr	Play_Sound_2.w

loc_3423E:

		jmp	loc_1B662.w
; ---------------------------------------------------------------------------

loc_34244:
		jmp	Sprite_OnScreen_Test.w

; =============== S U B R O U T I N E =======================================


sub_3424A:
		move.w	#prio(4),8(a0)
		move.b	#0,$22(a1)
		move.w	#5,$16(a1)
		move.b	$34(a0),d0
		bpl.s	loc_34274
		move.w	#prio(6),8(a0)
		move.b	#1,$22(a1)
		move.w	#4,$16(a1)

loc_34274:
		jsr	GetSineCosine.w
		move.w	$30(a0),d3
		swap	d1
		asr.l	#4,d1
		move.l	d1,d5
		lea	$18(a1),a2
		moveq	#3,d6

loc_3428A:
		move.l	d5,d4
		swap	d4
		add.w	d3,d4
		move.w	d4,(a2)+
		add.l	d1,d5
		addq.w	#4,a2
		dbf	d6,loc_3428A
		add.l	d1,d5
		swap	d5
		add.w	d3,d5
		move.w	d5,$10(a0)
		rts
; End of function sub_3424A


; =============== S U B R O U T I N E =======================================


sub_342A6:
		move.w	#prio(4),8(a0)
		move.b	#0,$22(a1)
		move.w	#5,$16(a1)
		move.b	$34(a0),d0
		bpl.s	loc_342D0
		move.w	#prio(6),8(a0)
		move.b	#2,$22(a1)
		move.w	#4,$16(a1)

loc_342D0:
		jsr	GetSineCosine.w
		move.w	$32(a0),d3
		swap	d1
		asr.l	#4,d1
		move.l	d1,d5
		lea	$1A(a1),a2
		moveq	#3,d6

loc_342E6:
		move.l	d5,d4
		swap	d4
		add.w	d3,d4
		move.w	d4,(a2)+
		add.l	d1,d5
		addq.w	#4,a2
		dbf	d6,loc_342E6
		add.l	d1,d5
		swap	d5
		add.w	d3,d5
		move.w	d5,$14(a0)
		rts
; End of function sub_342A6

; ---------------------------------------------------------------------------

Obj_MGZHeadTrigger:

		move.l	#Map_MGZHeadTrigger,$C(a0)
		move.w	#-$5C01,$A(a0)
		ori.b	#4,4(a0)
		move.w	#prio(5),8(a0)
		move.b	#$10,7(a0)
		move.b	#$38,6(a0)
		move.b	#2,$22(a0)
		move.b	#$17,$28(a0)
		move.b	#3,$29(a0)
		bset	#6,4(a0)
		move.w	#1,$16(a0)
		lea	$18(a0),a2
		move.w	$10(a0),(a2)+
		move.w	$14(a0),(a2)+
		move.w	#6,(a2)+
		btst	#0,$2A(a0)
		bne.s	loc_34364
		move.w	#$C0,$30(a0)

loc_34364:
		move.b	$2C(a0),d0
		andi.w	#$F,d0
		lea	(Level_trigger_array).w,a3
		tst.b	(a3,d0.w)
		beq.s	loc_34388
		move.b	#1,$34(a0)
		move.b	#0,$22(a0)
		move.b	#0,$28(a0)

loc_34388:
		move.l	#loc_3438E,(a0)

loc_3438E:
		tst.b	$34(a0)
		bne.w	loc_34512
		move.w	(Player_1+x_pos).w,d0
		sub.w	$10(a0),d0
		add.w	$30(a0),d0
		cmpi.w	#$C0,d0
		bhs.s	.chktails
		move.w	(Player_1+y_pos).w,d0
		sub.w	$14(a0),d0
		addi.w	#$80,d0
		cmpi.w	#$C0,d0
		blo.s	.foundone

.chktails	move.w	Player_2+x_pos.w,d0	; NAT: Allow player 2 to trigger firing too
		sub.w	$10(a0),d0
		add.w	$30(a0),d0
		cmpi.w	#$C0,d0
		bhs.s	loc_343C6
		move.w	Player_2+y_pos.w,d0
		sub.w	$14(a0),d0
		addi.w	#$80,d0
		cmpi.w	#$C0,d0
		bhs.s	loc_343C6

.foundone	tst.b	$20(a0)
		bne.s	loc_343C6
		move.w	#$100,$20(a0)

loc_343C6:

		tst.b	$28(a0)
		bne.w	loc_3447C
		tst.w	$32(a0)
		beq.s	loc_343E6
		subq.w	#1,$32(a0)
		bne.w	loc_3447C
		move.b	#$17,$28(a0)
		bra.w	loc_3447C
; ---------------------------------------------------------------------------

loc_343E6:
		move.w	#$3C,$32(a0)
		jsr	Create_New_Sprite3.w
		bne.w	loc_34474
		move.l	#loc_34536,(a1)
		tst.b	$29(a0)
		bne.s	loc_34432
		move.l	#Obj_Explosion,(a1)
		move.w	#$8000,$A(a1)
		move.b	#2,5(a1)
		move.b	#1,$34(a0)
		move.b	#0,$22(a0)
		move.b	$2C(a0),d0
		andi.w	#$F,d0
		lea	(Level_trigger_array).w,a3
		move.b	#1,(a3,d0.w)

loc_34432:
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		move.b	4(a0),4(a1)
		andi.b	#-$41,4(a1)
		move.b	$2A(a0),$2A(a1)
		move.l	$C(a0),$C(a1)
		move.w	$A(a0),$A(a1)
		move.w	#prio(4),8(a1)
		move.b	#8,7(a1)
		move.b	#8,6(a1)
		move.b	#2,$20(a1)

loc_34474:
		moveq	#$6E,d0
		jsr	Play_Sound_2.w

loc_3447C:

		lea	(Ani_MGZHeadTrigger).l,a1
		jsr	Animate_Sprite.w
		tst.b	5(a0)
		beq.w	loc_34512
		clr.b	5(a0)
		jsr	Create_New_Sprite3.w
		bne.w	loc_34512
		move.l	#loc_34518,(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		addi.w	#$10,$10(a1)
		addi.w	#$20,$14(a1)
		move.b	4(a0),4(a1)
		andi.b	#-$41,4(a1)
		move.l	$C(a0),$C(a1)
		move.w	$A(a0),$A(a1)
		andi.w	#$7FFF,$A(a1)
		move.w	#prio(6),8(a1)
		move.b	#$10,7(a1)
		move.b	#4,6(a1)
		move.b	#-$65,$28(a1)
		move.w	#-$400,$18(a1)
		btst	#0,$2A(a0)
		beq.s	loc_3450A
		neg.w	$18(a1)
		subi.w	#$20,$10(a1)

loc_3450A:
		moveq	#$67,d0
		jsr	Play_Sound_2.w

loc_34512:

		jmp	loc_1B662.w
; ---------------------------------------------------------------------------

loc_34518:
		tst.b	4(a0)
		bpl.s	loc_34530
		jsr	MoveSprite2.w
		jsr	Add_SpriteToCollisionResponseList.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_34530:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_34536:
		lea	(Ani_MGZHeadTrigger).l,a1
		jsr	Animate_Sprite.w
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------
Ani_MGZHeadTrigger:	include "Levels/MGZ/Misc Object Data/Anim - Head Trigger.asm"

byte_34568:	dc.b  $40, $1E,	  0, $40, $20, $40,   1, $40, $20, $40,	  1, $40
; ---------------------------------------------------------------------------

Obj_MGZTriggerPlatform:

		move.b	$2C(a0),d1
		andi.w	#$F0,d1
		lsr.w	#2,d1
		lea	byte_34568(pc,d1.w),a1
		move.b	(a1)+,7(a0)
		move.b	(a1)+,6(a0)
		move.b	(a1)+,$22(a0)
		moveq	#0,d0
		move.b	(a1)+,d0
		move.w	d0,$30(a0)
		lsr.w	#2,d1
		move.w	d1,$34(a0)
		move.l	#Map_MGZTriggerPlatform,$C(a0)
		move.w	#$4001,$A(a0)
		ori.b	#4,4(a0)
		move.w	#prio(5),8(a0)
		move.w	$10(a0),$36(a0)
		tst.w	d1
		beq.s	loc_345FA
		move.b	$2C(a0),d0
		andi.w	#$F,d0
		lea	(Level_trigger_array).w,a3
		tst.b	(a3,d0.w)
		beq.s	loc_345F0
		move.w	$34(a0),d0
		btst	#0,$2A(a0)
		beq.s	loc_345E0
		neg.w	d0

loc_345E0:

		add.w	d0,$14(a0)
		subq.w	#1,$30(a0)
		bne.s	loc_345E0
		move.b	#-1,$32(a0)

loc_345F0:
		move.l	#loc_3466E,(a0)
		bra.w	loc_3466E
; ---------------------------------------------------------------------------

loc_345FA:
		move.l	#loc_34600,(a0)

loc_34600:
		move.b	$2C(a0),d0
		andi.w	#$F,d0
		lea	(Level_trigger_array).w,a3
		tst.b	(a3,d0.w)
		beq.s	loc_34646
		moveq	#2,d0
		btst	#0,$2A(a0)
		beq.s	loc_3461E
		neg.w	d0

loc_3461E:
		add.w	d0,$10(a0)
		move.w	#-1,(ScrShake_Value).w
		subq.w	#1,$30(a0)
		bne.s	loc_34646
		move.w	#$7F00,$10(a0)
		move.w	#$7F00,$36(a0)
		move.w	#0,respawn_addr(a0)
		move.w	#0,(ScrShake_Value).w

loc_34646:

		moveq	#0,d1
		move.b	7(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		move.w	$36(a0),d0
		jmp	Sprite_OnScreen_Test2.w
; ---------------------------------------------------------------------------

loc_3466E:

		move.b	$2C(a0),d0
		andi.w	#$F,d0
		lea	(Level_trigger_array).w,a3
		tst.b	(a3,d0.w)
		beq.s	loc_3468C
		tst.b	$32(a0)
		bmi.s	loc_346BE
		move.b	#1,$32(a0)

loc_3468C:
		tst.b	$32(a0)
		beq.s	loc_346BE
		bmi.s	loc_346BE
		move.w	$34(a0),d0
		btst	#0,$2A(a0)
		beq.s	loc_346A2
		neg.w	d0

loc_346A2:
		add.w	d0,$14(a0)
		move.w	#-1,(ScrShake_Value).w
		subq.w	#1,$30(a0)
		bne.s	loc_346BE
		move.b	#-1,$32(a0)
		move.w	#0,(ScrShake_Value).w

loc_346BE:

		moveq	#0,d1
		move.b	7(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

Obj_MGZMovingSpikePlatform:

		move.l	#Map_MGZMovingSpikePlatform,$C(a0)
		move.w	#$4001,$A(a0)
		ori.b	#4,4(a0)
		move.w	#prio(4),8(a0)
		move.b	#$18,7(a0)
		move.b	#$30,6(a0)
		move.w	$10(a0),$30(a0)
		move.w	$14(a0),$32(a0)
		btst	#0,$2A(a0)
		beq.s	loc_34722
		move.b	#1,$34(a0)

loc_34722:
		move.l	#loc_34728,(a0)

loc_34728:
		move.w	$10(a0),-(sp)
		tst.b	$34(a0)
		bne.s	loc_3474C
		addq.w	#1,$10(a0)
		move.w	$30(a0),d0
		addi.w	#$50,d0
		cmp.w	$10(a0),d0
		bne.s	loc_34764
		move.b	#1,$34(a0)
		bra.s	loc_34764
; ---------------------------------------------------------------------------

loc_3474C:
		subq.w	#1,$10(a0)
		move.w	$30(a0),d0
		subi.w	#$50,d0
		cmp.w	$10(a0),d0
		bne.s	loc_34764
		move.b	#0,$34(a0)

loc_34764:

		moveq	#0,d0
		move.b	(OscNumbers+$12).w,d0
		add.w	$32(a0),d0
		move.w	d0,$14(a0)
		moveq	#0,d1
		move.b	7(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	(sp)+,d4
		jsr	SolidObjectFull.w
		swap	d6
		andi.w	#3,d6
		beq.s	loc_347E0
		move.b	d6,d0
		andi.b	#1,d0
		beq.s	loc_347BC
		bclr	#5,$2A(a0)
		lea	(Player_1).w,a1
		move.w	$14(a1),d0
		sub.w	$14(a0),d0
		addi.w	#$28,d0
		bmi.s	loc_347BC
		jsr	sub_24280.w

loc_347BC:

		andi.b	#2,d6
		beq.s	loc_347E0
		bclr	#6,$2A(a0)
		lea	(Player_2).w,a1
		move.w	$14(a1),d0
		sub.w	$14(a0),d0
		addi.w	#$28,d0
		bmi.s	loc_347E0
		jsr	sub_24280.w

loc_347E0:

		subq.b	#1,$24(a0)
		bpl.s	loc_347F6
		move.b	#7,$24(a0)
		addq.b	#1,$22(a0)
		andi.b	#3,$22(a0)

loc_347F6:
		move.w	$30(a0),d0
		jmp	Sprite_OnScreen_Test2.w
; ---------------------------------------------------------------------------

Obj_MGZPulley:

		move.l	#Map_MGZPulley,$C(a0)
		move.w	#$235F,$A(a0)
		ori.b	#4,4(a0)
		move.b	#$20,7(a0)
		move.b	#$20,6(a0)
		move.w	#prio(5),8(a0)
		bset	#6,4(a0)
		move.w	#1,$16(a0)
		lea	$18(a0),a2
		move.w	$10(a0),(a2)+
		move.w	$14(a0),(a2)+
		move.w	#0,(a2)+
		moveq	#0,d0
		move.b	$2C(a0),d0
		lsl.w	#3,d0
		move.w	d0,$40(a0)
		move.w	d0,$3C(a0)
		jsr	Create_New_Sprite3.w
		bne.w	loc_348FA
		move.l	#loc_34BEE,(a1)
		move.l	$C(a0),$C(a1)
		move.w	$A(a0),$A(a1)
		move.b	4(a0),4(a1)
		move.b	#$60,7(a1)
		move.b	#-$40,6(a1)
		move.w	#prio(6),8(a1)
		move.w	$10(a0),$12(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		subi.w	#$78,$10(a1)
		btst	#0,$2A(a0)
		beq.s	loc_348AC
		addi.w	#$F0,$10(a1)

loc_348AC:
		addi.w	#$D0,$14(a1)
		bset	#6,4(a1)
		move.w	#8,$16(a1)
		lea	$18(a1),a2
		moveq	#7,d0
		move.w	$10(a0),d2
		move.w	$14(a0),d3
		subi.w	#$C,d2
		subi.w	#8,d3
		subi.w	#$18,d2
		addi.w	#$30,d3

loc_348DC:
		move.w	d2,(a2)+
		move.w	d3,(a2)+
		move.w	#5,(a2)+
		subi.w	#$18,d2
		addi.w	#$30,d3
		dbf	d0,loc_348DC
		move.w	#6,-2(a2)
		move.w	a1,$3E(a0)

loc_348FA:
		move.l	#loc_34900,(a0)

loc_34900:
		moveq	#0,d4
		tst.w	$38(a0)
		bne.s	loc_34928
		move.w	$3C(a0),d0
		cmp.w	$40(a0),d0
		beq.s	loc_3498E
		bcc.s	loc_3491E
		addq.w	#2,$3C(a0)
		move.b	#-1,d4
		bra.s	loc_34966
; ---------------------------------------------------------------------------

loc_3491E:
		move.b	#1,d4
		subq.w	#2,$3C(a0)
		bra.s	loc_34966
; ---------------------------------------------------------------------------

loc_34928:
		tst.w	$34(a0)
		bne.s	loc_34946
		tst.w	$3C(a0)
		beq.s	loc_3498E
		move.b	#1,d4
		subq.w	#4,$3C(a0)
		bcc.s	loc_34966
		move.w	#0,$3C(a0)
		bra.s	loc_34966
; ---------------------------------------------------------------------------

loc_34946:
		subq.w	#1,$34(a0)
		cmpi.w	#$C,$34(a0)
		blo.s	loc_3498E
		move.w	$40(a0),d0
		addq.w	#8,d0
		cmp.w	$3C(a0),d0
		beq.s	loc_3498E
		addq.w	#2,$3C(a0)
		move.b	#-1,d4

loc_34966:

		subq.b	#1,$24(a0)
		bpl.s	loc_3497C
		move.b	#1,$24(a0)
		add.b	d4,$1D(a0)
		andi.b	#3,$1D(a0)

loc_3497C:
		tst.b	$22(a0)
		bne.s	loc_3498E
		tst.w	d4
		beq.s	loc_34994
		move.b	#4,$22(a0)
		bra.s	loc_34994
; ---------------------------------------------------------------------------

loc_3498E:

		move.b	#0,$22(a0)

loc_34994:

		bsr.w	sub_34B22
		bsr.w	sub_349A2
		jmp	Sprite_OnScreen_Test.w

; =============== S U B R O U T I N E =======================================


sub_349A2:
		lea	$38(a0),a2
		lea	(Player_1).w,a1
		move.w	(Ctrl_1).w,d0
		bsr.s	sub_349BA
		addq.w	#1,a2
		lea	(Player_2).w,a1
		move.w	(Ctrl_2).w,d0
; End of function sub_349A2


; =============== S U B R O U T I N E =======================================


sub_349BA:
		tst.b	(a2)
		beq.w	loc_34A5A
		tst.b	4(a1)
		bpl.s	loc_34A1A
		cmpi.b	#4,5(a1)
		bhs.s	loc_34A1A
		andi.b	#$70,d0
		beq.w	loc_34A28
		clr.b	$2E(a1)
		clr.b	(a2)
		move.b	#$3C,2(a2)
		move.w	#-$400,$18(a1)
		btst	#0,$2A(a0)
		beq.s	loc_349F4
		neg.w	$18(a1)

loc_349F4:
		move.w	#-$600,$1A(a1)
		bset	#1,$2A(a1)
		move.b	#$E,$1E(a1)
		move.b	#7,$1F(a1)
		move.b	#2,$20(a1)
		bset	#2,$2A(a1)
		rts
; ---------------------------------------------------------------------------

loc_34A1A:

		clr.b	$2E(a1)
		clr.b	(a2)
		move.b	#$3C,2(a2)
		rts
; ---------------------------------------------------------------------------

loc_34A28:
		move.w	$10(a0),d2
		move.w	$14(a0),d3
		subi.w	#$26,d2
		addi.w	#$2E,d3
		move.w	$3C(a0),d0
		add.w	d0,d3
		lsr.w	#1,d0
		btst	#0,$2A(a0)
		beq.s	loc_34A4E
		addi.w	#$4C,d2
		neg.w	d0

loc_34A4E:
		sub.w	d0,d2
		move.w	d2,$10(a1)
		move.w	d3,$14(a1)
		rts
; ---------------------------------------------------------------------------

loc_34A5A:
		tst.b	2(a2)
		beq.s	loc_34A68
		subq.b	#1,2(a2)
		bne.w	locret_34B20

loc_34A68:
		move.w	$10(a0),d2
		move.w	$14(a0),d3
		subi.w	#$26,d2
		addi.w	#$2E,d3
		move.w	$3C(a0),d0
		add.w	d0,d3
		lsr.w	#1,d0
		btst	#0,$2A(a0)
		beq.s	loc_34A8E
		addi.w	#$4C,d2
		neg.w	d0

loc_34A8E:
		sub.w	d0,d2
		move.w	$10(a1),d0
		sub.w	d2,d0
		addi.w	#$C,d0
		cmpi.w	#$18,d0
		bhs.w	locret_34B20
		move.w	$14(a1),d1
		sub.w	d3,d1
		addi.w	#$C,d1
		cmpi.w	#$18,d1
		bhs.w	locret_34B20
		tst.b	$2E(a1)
		bne.s	locret_34B20
		cmpi.b	#4,5(a1)
		bhs.s	locret_34B20
		tst.b	(Debug_On).w
		bne.s	locret_34B20
		move.w	$18(a1),d0
		btst	#0,$2A(a0)
		beq.s	loc_34AD6
		neg.w	d0

loc_34AD6:
		tst.w	d0
		bpl.s	locret_34B20
		clr.w	$18(a1)
		clr.w	$1A(a1)
		clr.w	$1C(a1)
		move.w	d2,$10(a1)
		move.w	d3,$14(a1)
		move.b	#$B,$20(a1)
		move.b	#1,$2E(a1)
		bclr	#0,$2A(a1)
		btst	#0,$2A(a0)
		beq.s	loc_34B0E
		bset	#0,$2A(a1)

loc_34B0E:
		move.w	#$10,$34(a0)
		move.b	#1,(a2)
		moveq	#$64,d0
		jmp	Play_Sound_2.w

locret_34B20:

		rts
; End of function sub_349BA


; =============== S U B R O U T I N E =======================================


sub_34B22:
		btst	#0,$2A(a0)
		bne.s	loc_34B8C
		movea.w	$3E(a0),a1
		moveq	#0,d0
		move.w	$3C(a0),d0
		addi.w	#$18,d0
		divu.w	#$30,d0
		move.w	d0,$16(a1)
		move.w	d0,d1
		lea	$18(a1),a2
		move.w	$10(a0),d2
		move.w	$14(a0),d3
		subi.w	#$C,d2
		subi.w	#8,d3
		swap	d0
		cmpi.w	#8,d1
		bne.s	loc_34B66
		move.w	#$30,d0
		moveq	#7,d1
		bra.s	loc_34B6A
; ---------------------------------------------------------------------------

loc_34B66:
		addq.w	#1,$16(a1)

loc_34B6A:
		add.w	d0,d3
		lsr.w	#1,d0
		sub.w	d0,d2

loc_34B70:
		move.w	d2,(a2)+
		move.w	d3,(a2)+
		move.w	#5,(a2)+
		subi.w	#$18,d2
		addi.w	#$30,d3
		dbf	d1,loc_34B70
		move.w	#6,-2(a2)
		rts
; ---------------------------------------------------------------------------

loc_34B8C:
		movea.w	$3E(a0),a1
		moveq	#0,d0
		move.w	$3C(a0),d0
		addi.w	#$18,d0
		divu.w	#$30,d0
		move.w	d0,$16(a1)
		move.w	d0,d1
		lea	$18(a1),a2
		move.w	$10(a0),d2
		move.w	$14(a0),d3
		addi.w	#$C,d2
		subi.w	#8,d3
		swap	d0
		cmpi.w	#8,d1
		bne.s	loc_34BC8
		move.w	#$30,d0
		moveq	#7,d1
		bra.s	loc_34BCC
; ---------------------------------------------------------------------------

loc_34BC8:
		addq.w	#1,$16(a1)

loc_34BCC:
		add.w	d0,d3
		lsr.w	#1,d0
		add.w	d0,d2

loc_34BD2:
		move.w	d2,(a2)+
		move.w	d3,(a2)+
		move.w	#5,(a2)+
		addi.w	#$18,d2
		addi.w	#$30,d3
		dbf	d1,loc_34BD2
		move.w	#6,-2(a2)
		rts
; End of function sub_34B22

; ---------------------------------------------------------------------------

loc_34BEE:
		move.w	$12(a0),d0
		jmp	Sprite_OnScreen_Test2.w
; ---------------------------------------------------------------------------

Obj_MGZTopPlatform:
		move.l	#Map_MGZTopPlatform,$C(a0)
		move.w	#$235F,$A(a0)
		ori.b	#4,4(a0)
		move.w	#prio(5),8(a0)
		move.b	#$18,7(a0)
		move.b	#$C,6(a0)
		move.b	#$1F,$1E(a0)
		move.b	#$18,$1F(a0)
		move.b	#$1F,$44(a0)
		move.b	#$18,$45(a0)
		move.w	$10(a0),$30(a0)
		move.w	$14(a0),$32(a0)
		move.b	#$C,$46(a0)
		move.b	#$D,$47(a0)
		move.l	#loc_34C54,(a0)

loc_34C54:
		lea	Player_1.w,a1
		lea	$40(a0),a4
		move.w	(Ctrl_1_logical).w,d5
		moveq	#3,d6
		bsr.w	sub_34EEC
		lea	(Player_2).w,a1
		lea	$42(a0),a4
		move.w	(Ctrl_2_logical).w,d5
		moveq	#4,d6
		bsr.w	sub_34EEC
		tst.b	$2C(a0)
		bne.w	loc_34D62
		btst	#1,$2A(a0)
		beq.w	loc_34D0E
		cmpi.w	#$200,$1A(a0)
		bge.s	loc_34C98
		addi.w	#8,$1A(a0)

loc_34C98:
		jsr	MoveSprite2.w
		subi.w	#$13,$14(a0)
		move.l	a1,-(sp)
		jsr	(sub_3526A).l
		movea.l	(sp)+,a1
		addi.w	#$13,$14(a0)
		tst.b	$2D(a0)
		beq.s	loc_34CD0
		move.w	#0,$1A(a0)
		move.w	#0,$18(a0)
		bclr	#1,$2A(a0)
		bra.w	loc_34D62
; ---------------------------------------------------------------------------

loc_34CD0:
		btst	#1,$2A(a0)
		bne.w	loc_34D62
		move.w	$18(a0),d0
		bpl.s	loc_34CE2
		neg.w	d0

loc_34CE2:
		cmpi.w	#$40,d0
		blo.s	loc_34D62
		move.w	#$800,d1
		cmpi.w	#$100,d0
		blo.s	loc_34CF6
		move.w	#$C00,d1

loc_34CF6:
		tst.w	$18(a0)
		bpl.s	loc_34CFE
		neg.w	d1

loc_34CFE:
		move.w	d1,$18(a0)
		move.w	d1,$1C(a0)
		move.b	#1,$34(a0)
		bra.s	loc_34D62
; ---------------------------------------------------------------------------

loc_34D0E:
		tst.b	$35(a0)
		beq.s	loc_34D1E
		bsr.w	sub_35868
		addq.w	#4,$24(a0)
		bra.s	loc_34D62
; ---------------------------------------------------------------------------

loc_34D1E:
		move.b	$26(a0),d0
		jsr	GetSineCosine.w
		muls.w	$1C(a0),d1
		asr.l	#8,d1
		move.w	d1,$18(a0)
		muls.w	$1C(a0),d0
		asr.l	#8,d0
		move.w	d0,$1A(a0)
		bsr.s	sub_34DBA
		jsr	MoveSprite2.w
		tst.b	$2D(a0)
		bne.s	loc_34D4E
		bsr.w	sub_34E6E

loc_34D4E:
		addq.w	#4,$24(a0)
		tst.w	$1C(a0)
		bne.s	loc_34D5E
		move.b	#0,$34(a0)

loc_34D5E:
		bsr.w	sub_35666

loc_34D62:

		lea	(Player_1).w,a1
		lea	$40(a0),a4
		moveq	#3,d6
		bsr.w	sub_35202
		lea	(Player_2).w,a1
		lea	$42(a0),a4
		moveq	#4,d6
		bsr.w	sub_35202
		move.w	$24(a0),d0
		asr.w	#3,d0
		andi.w	#1,d0
		move.b	d0,$22(a0)
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_34D92:
		jsr	MoveSprite.w
		addq.w	#4,$24(a0)
		move.w	$24(a0),d0
		asr.w	#3,d0
		andi.w	#1,d0
		move.b	d0,$22(a0)
		tst.b	4(a0)
		bmi.s	loc_34DB6
		move.w	#$7F00,$10(a0)

loc_34DB6:
		jmp	Sprite_OnScreen_Test.w

; =============== S U B R O U T I N E =======================================


sub_34DBA:
		move.b	#$40,d1
		tst.w	$1C(a0)
		beq.s	locret_34E36
		bmi.s	loc_34DCA
		neg.w	d1

loc_34DCA:
		move.b	$26(a0),d0
		add.b	d1,d0
		move.w	d0,-(sp)
		move.b	#$13,$1E(a0)
		move.b	#$18,$1F(a0)
		subi.w	#$C,$14(a0)
		jsr	sub_F6B4.w
		addi.w	#$C,$14(a0)
		move.w	(sp)+,d0
		tst.w	d1
		bpl.s	locret_34E36
		asl.w	#8,d1
		addi.b	#$20,d0
		andi.b	#-$40,d0
		beq.s	loc_34E68
		cmpi.b	#$40,d0
		beq.s	loc_34E3E
		cmpi.b	#-$80,d0
		beq.s	loc_34E38
		addi.b	#$30,d3
		cmpi.b	#$60,d3
		blo.s	locret_34E36
		add.w	d1,$18(a0)
		move.w	#0,$1A(a0)
		move.w	#0,$1C(a0)
		btst	#0,$2A(a0)
		bne.s	locret_34E36
		bset	#5,$2A(a0)

locret_34E36:
		rts
; ---------------------------------------------------------------------------

loc_34E38:
		sub.w	d1,$1A(a0)
		rts
; ---------------------------------------------------------------------------

loc_34E3E:
		addi.b	#$30,d3
		cmpi.b	#$60,d3
		blo.s	locret_34E36
		sub.w	d1,$18(a0)
		move.w	#0,$1A(a0)
		move.w	#0,$1C(a0)
		btst	#0,$2A(a0)
		beq.s	locret_34E36
		bset	#5,$2A(a0)
		rts
; ---------------------------------------------------------------------------

loc_34E68:
		add.w	d1,$1A(a0)
		rts

; =============== S U B R O U T I N E =======================================


sub_34E6E:
		move.b	#$C,$1E(a0)
		move.b	#$A,$1F(a0)
		moveq	#3,d0
		move.b	d0,(Primary_Angle).w
		move.b	d0,(Secondary_Angle).w
		jsr	(Sonic_CheckFloor).l
		tst.b	d3
		bpl.s	loc_34E9A
		cmpi.b	#-$1E,d3
		bhs.s	loc_34EA4
		move.b	#-$1E,d3
		bra.s	loc_34EA4
; ---------------------------------------------------------------------------

loc_34E9A:
		cmpi.b	#$1E,d3
		bls.s	loc_34EA4
		move.b	#$1E,d3

loc_34EA4:

		move.b	d3,$26(a0)
		tst.w	d1
		beq.s	locret_34EB8
		bpl.s	loc_34EBA
		cmpi.w	#-$E,d1
		blt.s	locret_34EB8
		add.w	d1,$14(a0)

locret_34EB8:

		rts
; ---------------------------------------------------------------------------

loc_34EBA:
		move.b	$18(a0),d0
		bpl.s	loc_34EC2
		neg.b	d0

loc_34EC2:
		addq.b	#4,d0
		cmpi.b	#$E,d0
		blo.s	loc_34ECE
		move.b	#$E,d0

loc_34ECE:
		cmp.b	d0,d1
		bgt.s	loc_34ED8
		add.w	d1,$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_34ED8:
		bset	#1,$2A(a0)
		bclr	#5,$2A(a0)
		move.b	#0,$34(a0)
		rts
; End of function sub_34E6E


; =============== S U B R O U T I N E =======================================


sub_34EEC:
		move.b	(a4),d0
		and.w	#6,d0
		move.w	off_34EF8(pc,d0.w),d0
		jmp	off_34EF8(pc,d0.w)
; End of function sub_34EEC

; ---------------------------------------------------------------------------
off_34EF8:	dc.w loc_34F04-off_34EF8

		dc.w loc_34F4C-off_34EF8
		dc.w loc_34FBC-off_34EF8
		dc.w loc_34F00-off_34EF8
; ---------------------------------------------------------------------------

loc_34F00:
		clr.w	(a4)

locret_34F02:
		rts
; ---------------------------------------------------------------------------

loc_34F04:
		moveq	#0,d1
		move.b	7(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	$10(a0),d4
		jsr	sub_1DC74.w
		btst	d6,$2A(a0)
		bne.s	loc_34F2A
		rts
; ---------------------------------------------------------------------------

loc_34F2A:
		tst.b	$37(a1)
		bmi.s	locret_34F4A
		addq.b	#2,(a4)
		move.b	#0,1(a4)
		move.w	$10(a0),d0
		sub.w	$10(a1),d0
		bcc.s	loc_34F48
		move.b	#1,1(a4)

loc_34F48:
		bra.s	loc_34F6A
; ---------------------------------------------------------------------------

loc_34F4C:
		moveq	#0,d1
		move.b	7(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	$10(a0),d4
		jsr	sub_1DC74.w

loc_34F6A:
		btst	d6,$2A(a0)	; NAT: WARNING! IN THE ORIGINAL GAME, THE CLR BELOW
		bne.s	loc_34F72	; COULD BREAK PLAYER CONTROL, BECAUSE THERE COULD BE
		clr.b	(a4)		; A DISCONNECT, WHERE THE PLAYER IS NOT ON THE PLATFORM
locret_34F4A:				; BUT THE PLAYER ITSELF THINKS ITS BEING CONTROLLED BY
		rts			; THE PLATFORM. TOOK ME FUCKING AGES TO FIND THIS CUNT BUG!

loc_34F72:
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		tst.b	1(a4)
		beq.s	loc_34F84
		addi.w	#$F,d0

loc_34F84:
		cmpi.w	#$10,d0
		bhs.s	locret_34FBA
		move.w	$10(a0),$10(a1)
		move.b	$44(a1),d0
		addi.b	#$18,d0
		move.b	d0,$1E(a1)
		bset	#0,$2E(a1)
		move.b	#-$80,$37(a1)
		bclr	d6,$2A(a0)
		bclr	#3,$2A(a1)
		bset	#1,$2A(a1)
		addq.b	#2,(a4)

		move.l	a4,a5
		addq.l	#2,a5			; NA11: go to player 2's data
		cmp.w	#Player_1,a1		; NAT1: check if we are player 1
		beq.s	.ok			; NAT1: if so, branch
		subq.l	#4,a5			; NAT1: instead go to player 1's data

.ok		tst.b	(a5)			; NAT1: Check if a player is already in control
		bmi.s	locret_34FBA		; NAT1: If is, then branch
		or.b	#$80,(a4)		; NAT1: Else make this player in control

locret_34FBA:
		rts
; ---------------------------------------------------------------------------

loc_34FBC:
		tst.b	4(a1)
		bpl.s	loc_3500A
		cmpi.b	#4,5(a1)
		bhs.w	loc_3500A
	;	tst.b	(Debug_On).w
	;	bne.s	loc_3500A
		move.w	d5,d0
		andi.w	#$70,d0
		beq.w	loc_35028		; NAT3: Branch if they havent jumped out
		move.w	#-$680,$1A(a1)
		move.w	$18(a0),$18(a1)		; NAT: Fix jumping and going backwards
		asr	$18(a1)

		move.b	#1,$40(a1)
		move.b	#$E,$1E(a1)
		move.b	#7,$1F(a1)
		move.b	#2,$20(a1)
		bset	#2,$2A(a1)
		move.w	#$62,d0
		jsr	Play_Sound_2.w

loc_3500A:
		bclr	#0,$2E(a1)
		clr.b	$37(a1)
		bset	#1,$2A(a1)
		clr.b	(a4)

		tst.b	$40(a0)			; NAT3: Check if a player is still on platform
		beq.s	.chktails		; NAT3: If Sonic is not, branch
		or.b	#$80,$40(a0)		; NAT3: Make this player the leader
		rts

.chktails	tst.b	$42(a0)			; NAT3: Check if a player is still on platform
		beq.w	sub_3519A		; NAT3: If Tails is not, branch
		or.b	#$80,$42(a0)		; NAT3: Make this player the leader

locret_35026:
		rts
; ---------------------------------------------------------------------------

loc_35028:
		move.w	d5,d0
		andi.w	#$C00,d0
		bne.s	loc_35048
		tst.w	$18(a0)
		beq.s	loc_35048
		bclr	#0,$2A(a1)
		tst.w	$18(a0)
		bpl.s	loc_35048
		bset	#0,$2A(a1)

loc_35048:

		move.b	$44(a1),d0
		addi.b	#$18,d0
		move.b	d0,$1E(a1)
		tst.b	(a4)			; NAT1: Is player in control?
		bpl.s	locret_350A4		; NAT1: If not, branch
;		cmpa.w	#Player_2,a1		; NAT1: !!!!!
;		bne.s	loc_3505C
; 		rts
; ---------------------------------------------------------------------------

loc_3505C:
		move.l	a0,-(sp)
		movea.l	a1,a0
		move.w	d5,d3
		cmpi.b	#$10,$20(a0)
		beq.s	loc_35070
		jsr	(sub_35504).l

loc_35070:
		jsr	(Player_LevelBound).l
		jsr	MoveSprite2.w
		movea.l	(sp)+,a0
		cmpi.b	#$10,$20(a1)
		bne.s	loc_350A6
		move.w	$18(a1),$18(a0)
		move.w	$1A(a1),$1A(a0)
		addi.w	#$38,$1A(a1)
		bset	#1,$2A(a0)
		move.b	#0,$34(a0)

locret_350A4:
		rts
; ---------------------------------------------------------------------------

loc_350A6:
		bclr	#6,$37(a1)
		beq.s	loc_350BA
		move.w	#0,$1C(a0)
		move.w	#0,$18(a0)

loc_350BA:
		bclr	#5,$37(a1)
		beq.s	loc_350C8
		move.w	#0,$1A(a0)

loc_350C8:
		move.w	$18(a0),$18(a1)
		move.w	$1A(a0),$1A(a1)
		move.w	$46(a1),$46(a0)
		tst.b	$34(a0)
		bne.w	locret_35026
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		beq.w	loc_35170
		bcc.w	loc_35130
		cmpi.w	#-$200,$18(a0)
		ble.s	loc_3510A

loc_350FA:
		add.w	d0,$18(a0)
		add.w	d0,$18(a0)
		add.w	d0,$18(a0)
		add.w	d0,$18(a0)

loc_3510A:
		add.w	d0,$24(a0)
		move.w	$18(a0),d0
		bpl.s	loc_35128
		asr.w	#4,d0
		subi.w	#8,$1A(a0)
		cmpi.w	#-$100,$1A(a0)
		ble.s	loc_35128
		add.w	d0,$1A(a0)

loc_35128:

		bset	#1,$2A(a0)
		rts
; ---------------------------------------------------------------------------

loc_35130:
		cmpi.w	#$200,$18(a0)
		bge.s	loc_35148
		add.w	d0,$18(a0)
		add.w	d0,$18(a0)
		add.w	d0,$18(a0)
		add.w	d0,$18(a0)

loc_35148:
		add.w	d0,$24(a0)
		move.w	$18(a0),d0
		bmi.s	loc_35168
		neg.w	d0
		asr.w	#4,d0
		subi.w	#8,$1A(a0)
		cmpi.w	#-$100,$1A(a0)
		ble.s	loc_35168
		add.w	d0,$1A(a0)

loc_35168:

		bset	#1,$2A(a0)
		rts
; ---------------------------------------------------------------------------

loc_35170:
		moveq	#1,d0
		tst.w	$18(a0)
		beq.s	loc_35180
		bmi.s	loc_3517C
		neg.w	d0

loc_3517C:
		add.w	d0,$18(a0)

loc_35180:
		add.w	d0,$24(a0)
		tst.w	$1A(a0)
		bpl.s	locret_3518E
		clr.w	$1A(a0)

locret_3518E:
		rts

; =============== S U B R O U T I N E =======================================


sub_3519A:
		move.l	#loc_34D92,(a0)
		lea	(Player_1).w,a2
		cmpi.b	#4,$40(a0)
		blo.s	loc_351BE
		bclr	#0,$2E(a2)
		clr.b	$37(a2)
		bset	#1,$2A(a2)

loc_351BE:
		tst.b	$40(a0)
		beq.s	loc_351CA
		bclr	#3,$2A(a2)
		move.b	#6,$40(a0)

loc_351CA:
		lea	(Player_2).w,a2
		cmpi.b	#4,$42(a0)
		blo.s	loc_351E8
		bclr	#0,$2E(a2)
		clr.b	$37(a2)
		bset	#1,$2A(a2)

loc_351E8:
		tst.b	$42(a0)
		beq.s	loc_351F4
		bclr	#3,$2A(a2)
		move.b	#6,$42(a0)

loc_351F4:
		rts


; =============== S U B R O U T I N E =======================================


sub_35202:
		btst	#3,$2A(a1)
		bne.s	loc_35232
		cmpi.b	#4,(a4)
		blo.s	locret_35230
		move.w	$14(a0),d0
		subi.w	#$C,d0
		moveq	#0,d1
		move.b	$44(a1),d1
		sub.w	d1,d0
		move.w	d0,$14(a1)
		move.w	$10(a0),$10(a1)
		clr.b	$2D(a0)

locret_35230:
		rts
; ---------------------------------------------------------------------------

loc_35232:
		cmpi.b	#4,(a4)
		blo.s	locret_35268
		movea.w	$42(a1),a2
		cmpi.l	#loc_32AAE,(a2)
		bne.s	loc_35248
		bsr.w	sub_3519A
		bclr	#1,$2A(a1)	; NAT: Seems to have caused some weird bug with rolling

loc_35248:
		move.w	$10(a0),$10(a1)
		move.w	$14(a1),d0
		moveq	#0,d1
		move.b	$44(a1),d1
		add.w	d1,d0
		addi.w	#$D,d0
		move.w	d0,$14(a0)
		move.b	#1,$2D(a0)

locret_35268:
		rts


; =============== S U B R O U T I N E =======================================


sub_3526A:
		move.l	(Primary_collision_addr).w,(Collision_addr).w
		cmpi.b	#$C,$46(a0)
		beq.s	loc_3527E
		move.l	(Secondary_collision_addr).w,(Collision_addr).w

loc_3527E:
		move.b	$47(a0),d5
		move.w	$18(a0),d1
		move.w	$1A(a0),d2
		jsr	GetArcTan.w
		subi.b	#$20,d0
		andi.b	#-$40,d0
		cmpi.b	#$40,d0
		beq.w	loc_3536E
		cmpi.b	#-$80,d0
		beq.w	loc_353F8
		cmpi.b	#-$40,d0
		beq.w	loc_3547A
		move.b	#$C,$1E(a0)
		move.b	#$18,$1F(a0)
		jsr	sub_FD32.w
		tst.w	d1
		bpl.s	loc_352D0
		sub.w	d1,$10(a0)
		move.w	#0,$18(a0)

loc_352D0:
		jsr	sub_FA1A.w
		tst.w	d1
		bpl.s	loc_352E4
		add.w	d1,$10(a0)
		move.w	#0,$18(a0)

loc_352E4:
		move.b	#$1F,$1E(a0)
		move.b	#$A,$1F(a0)
		jsr	(Sonic_CheckFloor).l
		tst.w	d1
		bpl.s	locret_3536C
		move.b	$1A(a0),d2
		addq.b	#8,d2
		neg.b	d2
		cmp.b	d2,d1
		bge.s	loc_3530A
		cmp.b	d2,d0
		blt.s	locret_3536C

loc_3530A:
		add.w	d1,$14(a0)
		move.b	d3,$26(a0)
		bclr	#1,$2A(a0)
		move.b	#0,$2D(a0)
		move.b	d3,d0
		addi.b	#$20,d0
		andi.b	#$40,d0
		bne.s	loc_3534A
		move.b	d3,d0
		addi.b	#$10,d0
		andi.b	#$20,d0
		beq.s	loc_3533C
		asr	$1A(a0)
		bra.s	loc_3535E
; ---------------------------------------------------------------------------

loc_3533C:
		move.w	#0,$1A(a0)
		move.w	$18(a0),$1C(a0)
		rts
; ---------------------------------------------------------------------------

loc_3534A:
		move.w	#0,$18(a0)
		cmpi.w	#$FC0,$1A(a0)
		ble.s	loc_3535E
		move.w	#$FC0,$1A(a0)

loc_3535E:

		move.w	$1A(a0),$1C(a0)
		tst.b	d3
		bpl.s	locret_3536C
		neg.w	$1C(a0)

locret_3536C:

		rts
; ---------------------------------------------------------------------------

loc_3536E:
		move.b	#$C,$1E(a0)
		move.b	#$18,$1F(a0)
		jsr	sub_FD32.w
		tst.w	d1
		bpl.s	loc_3539E
		sub.w	d1,$10(a0)
		addi.b	#$30,d3
		cmpi.b	#$60,d3
		blo.s	loc_3539E
		move.w	#0,$18(a0)

loc_35398:
		move.w	$1A(a0),$1C(a0)

loc_3539E:

		move.b	#$1F,$1E(a0)
		move.b	#$A,$1F(a0)
		jsr	sub_FB5A.w
		tst.w	d1
		bpl.s	loc_353C6
		sub.w	d1,$14(a0)
		tst.w	$1A(a0)
		bpl.s	locret_353C4
		move.w	#0,$1A(a0)

locret_353C4:
		rts
; ---------------------------------------------------------------------------

loc_353C6:
		tst.w	$1A(a0)
		bmi.s	locret_353F6
		jsr	(Sonic_CheckFloor).l
		tst.w	d1
		bpl.s	locret_353F6
		add.w	d1,$14(a0)
		move.b	d3,$26(a0)
		bclr	#1,$2A(a0)
		move.b	#0,$2D(a0)
		move.w	#0,$1A(a0)
		move.w	$18(a0),$1C(a0)

locret_353F6:

		rts
; ---------------------------------------------------------------------------

loc_353F8:
		move.b	#$C,$1E(a0)
		move.b	#$18,$1F(a0)
		jsr	sub_FD32.w
		tst.w	d1
		bpl.s	loc_35418
		sub.w	d1,$10(a0)
		move.w	#0,$18(a0)

loc_35418:
		jsr	sub_FA1A.w
		tst.w	d1
		bpl.s	loc_3542C
		add.w	d1,$10(a0)
		move.w	#0,$18(a0)

loc_3542C:
		move.b	#$1F,$1E(a0)
		move.b	#$A,$1F(a0)
		jsr	sub_FB5A.w
		tst.w	d1
		bpl.s	locret_35478
		sub.w	d1,$14(a0)
		move.b	d3,d0
		addi.b	#$20,d0
		andi.b	#$40,d0
		bne.s	loc_3545A
		move.w	#0,$1A(a0)
		rts
; ---------------------------------------------------------------------------

loc_3545A:
		move.b	d3,$26(a0)
		bclr	#1,$2A(a0)
		move.b	#0,$2D(a0)
		move.w	$1A(a0),$1C(a0)
		tst.b	d3
		bpl.s	locret_35478
		neg.w	$1C(a0)

locret_35478:

		rts
; ---------------------------------------------------------------------------

loc_3547A:
		move.b	#$C,$1E(a0)
		move.b	#$18,$1F(a0)
		jsr	sub_FA1A.w
		tst.w	d1
		bpl.s	loc_354AA
		add.w	d1,$10(a0)
		addi.b	#$30,d3
		cmpi.b	#$60,d3
		blo.s	loc_354AA
		move.w	#0,$18(a0)
		move.w	$1A(a0),$1C(a0)

loc_354AA:

		move.b	#$1F,$1E(a0)
		move.b	#$A,$1F(a0)
		jsr	sub_FB5A.w
		tst.w	d1
		bpl.s	loc_354D2
		sub.w	d1,$14(a0)
		tst.w	$1A(a0)
		bpl.s	locret_354D0
		move.w	#0,$1A(a0)

locret_354D0:
		rts
; ---------------------------------------------------------------------------

loc_354D2:
		tst.w	$1A(a0)
		bmi.s	locret_35502
		jsr	(Sonic_CheckFloor).l
		tst.w	d1
		bpl.s	locret_35502
		add.w	d1,$14(a0)
		move.b	d3,$26(a0)
		bclr	#1,$2A(a0)
		move.b	#0,$2D(a0)
		move.w	#0,$1A(a0)
		move.w	$18(a0),$1C(a0)

locret_35502:

		rts
; End of function sub_3526A


; =============== S U B R O U T I N E =======================================


sub_35504:
		move.w	#$600,d6
		move.w	#$C,d5
		move.w	#$80,d4
		btst	#$A,d3
		beq.s	loc_3551A
		bsr.w	sub_3555C

loc_3551A:
		btst	#$B,d3
		beq.s	loc_35524
		bsr.w	sub_355E4

loc_35524:
		move.w	d3,d0
		andi.w	#$C00,d0
		bne.s	loc_3554E
		move.w	$1C(a0),d0
		beq.s	loc_3554E
		bmi.s	loc_35542
		sub.w	d5,d0
		bcc.s	loc_3553C
		move.w	#0,d0

loc_3553C:
		move.w	d0,$1C(a0)
		bra.s	loc_3554E
; ---------------------------------------------------------------------------

loc_35542:
		add.w	d5,d0
		bcc.s	loc_3554A
		move.w	#0,d0

loc_3554A:
		move.w	d0,$1C(a0)

loc_3554E:

		move.w	$1C(a0),$18(a0)
		move.w	#0,$1A(a0)
		rts
; End of function sub_35504


; =============== S U B R O U T I N E =======================================


sub_3555C:
		move.w	$1C(a0),d0
		beq.s	loc_35564
		bpl.s	loc_35596

loc_35564:
		bset	#0,$2A(a0)
		bne.s	loc_35578
		bclr	#5,$2A(a0)
		move.b	#1,$21(a0)

loc_35578:
		sub.w	d5,d0
		move.w	d6,d1
		neg.w	d1
		cmp.w	d1,d0
		bgt.s	loc_3558A
		add.w	d5,d0
		cmp.w	d1,d0
		ble.s	loc_3558A
		move.w	d1,d0

loc_3558A:

		move.w	d0,$1C(a0)
		move.b	#0,$20(a0)
		rts
; ---------------------------------------------------------------------------

loc_35596:
		sub.w	d4,d0
		bcc.s	loc_3559E
		move.w	#-$80,d0

loc_3559E:
		move.w	d0,$1C(a0)
		move.b	$26(a0),d0
		addi.b	#$20,d0
		andi.b	#-$40,d0
		bne.s	locret_355E2
		cmpi.w	#$400,d0
		blt.s	locret_355E2
		move.b	#$D,$20(a0)
		bclr	#0,$2A(a0)
		move.w	#$36,d0
		jsr	Play_Sound_2.w
		movea.l	a0,a2
		suba.w	#-$5000,a2
		adda.w	#-$33AC,a2
		move.b	#6,5(a2)
		move.b	#$15,$22(a2)

locret_355E2:

		rts
; End of function sub_3555C


; =============== S U B R O U T I N E =======================================


sub_355E4:
		move.w	$1C(a0),d0
		bmi.s	loc_35618
		bclr	#0,$2A(a0)
		beq.s	loc_355FE
		bclr	#5,$2A(a0)
		move.b	#1,$21(a0)

loc_355FE:
		add.w	d5,d0
		cmp.w	d6,d0
		blt.s	loc_3560C
		sub.w	d5,d0
		cmp.w	d6,d0
		bge.s	loc_3560C
		move.w	d6,d0

loc_3560C:

		move.w	d0,$1C(a0)
		move.b	#0,$20(a0)
		rts
; ---------------------------------------------------------------------------

loc_35618:
		add.w	d4,d0
		bcc.s	loc_35620
		move.w	#$80,d0

loc_35620:
		move.w	d0,$1C(a0)
		move.b	$26(a0),d0
		addi.b	#$20,d0
		andi.b	#-$40,d0
		bne.s	locret_35664
		cmpi.w	#-$400,d0
		bgt.s	locret_35664
		move.b	#$D,$20(a0)
		bset	#0,$2A(a0)
		move.w	#$36,d0
		jsr	Play_Sound_2.w
		movea.l	a0,a2
		suba.w	#-$5000,a2
		adda.w	#-$33AC,a2
		move.b	#6,5(a2)
		move.b	#$15,$22(a2)

locret_35664:

		rts
; End of function sub_355E4


; =============== S U B R O U T I N E =======================================


sub_35666:
		tst.b	(Debug_On).w
		bne.s	locret_356C8
		tst.b	$34(a0)
		beq.s	locret_356C8
		lea	(word_35784).l,a1
		tst.b	(Current_act).w
		beq.s	loc_35684
		lea	(word_357F6).l,a1

loc_35684:
		move.w	(a1)+,d6
		move.w	$10(a0),d2
		move.w	$14(a0),d3

loc_3568E:
		move.w	(a1),d0
		sub.w	d2,d0
		addi.w	#$10,d0
		cmpi.w	#$20,d0
		bhs.s	loc_356C0
		move.w	2(a1),d1
		sub.w	d3,d1
		addi.w	#$10,d1
		cmpi.w	#$20,d1
		bhs.s	loc_356C0
		move.w	$1C(a0),d0

loc_356B0:
		move.b	4(a1),d2
		andi.b	#$7F,d2
		beq.s	loc_356BC
		neg.w	d0

loc_356BC:
		tst.w	d0
		bpl.s	loc_356CA

loc_356C0:

		adda.w	#$10,a1
		dbf	d6,loc_3568E

locret_356C8:
		rts
; ---------------------------------------------------------------------------

loc_356CA:
		move.b	#1,$35(a0)
		move.w	4(a1),$3E(a0)
		addq.w	#6,a1
		move.w	(a1)+,d4
		move.w	d4,$30(a0)
		move.w	(a1)+,d5
		move.w	d5,d0
		move.b	$3F(a0),d1
		andi.b	#$7F,d1
		beq.s	loc_356EE
		sub.w	(a1),d0

loc_356EE:
		move.w	d0,$32(a0)
		move.l	a1,$36(a0)
		move.w	$1C(a0),d2
		bpl.s	loc_356FE
		neg.w	d2

loc_356FE:
		tst.w	d2
		bne.s	loc_35706
		move.w	#$800,d2

loc_35706:

		moveq	#0,d0
		move.w	d2,d3
		move.w	d4,d0
		sub.w	$10(a0),d0
		bge.s	loc_35716
		neg.w	d0
		neg.w	d2

loc_35716:
		moveq	#0,d1
		move.w	d5,d1
		sub.w	$14(a0),d1
		bge.s	loc_35724
		neg.w	d1
		neg.w	d3

loc_35724:
		cmp.w	d0,d1
		blo.s	loc_35756
		moveq	#0,d1
		move.w	d5,d1
		sub.w	$14(a0),d1
		swap	d1
		divs.w	d3,d1
		moveq	#0,d0
		move.w	d4,d0
		sub.w	$10(a0),d0
		beq.s	loc_35742
		swap	d0
		divs.w	d1,d0

loc_35742:
		move.w	d0,$18(a0)
		move.w	d3,$1A(a0)
		tst.w	d1
		bpl.s	loc_35750
		neg.w	d1

loc_35750:
		move.w	d1,$3A(a0)
		rts
; ---------------------------------------------------------------------------

loc_35756:
		moveq	#0,d0
		move.w	d4,d0

loc_3575A:
		sub.w	$10(a0),d0
		swap	d0
		divs.w	d2,d0
		moveq	#0,d1
		move.w	d5,d1
		sub.w	$14(a0),d1
		beq.s	loc_35770
		swap	d1
		divs.w	d0,d1

loc_35770:
		move.w	d1,$1A(a0)
		move.w	d2,$18(a0)
		tst.w	d0
		bpl.s	loc_3577E
		neg.w	d0

loc_3577E:
		move.w	d0,$3A(a0)
		rts
; End of function sub_35666

; ---------------------------------------------------------------------------
word_35784:	dc.w	  6
		dc.w  $1BA0,   $C6,	0, $1C40
		dc.w	$E6,  $280, $1CE0,  $385
		dc.w  $1BA0,  $3C4, $8001, $1C40
		dc.w   $3A6,  $2C0, $1BA0,   $C6
		dc.w  $1CE0,  $385,  $101, $1C40
		dc.w   $366,  $280, $1BA0,   $C6
		dc.w  $2720,  $846,	0, $27C0
		dc.w   $866,  $200, $2860,  $A86
		dc.w  $2860,  $846,  $180, $27C0
		dc.w   $866,  $200, $2720,  $A86
		dc.w  $2720,  $A86,   $81, $27C0
		dc.w   $A66,  $200, $2860,  $846
		dc.w  $2860,  $A86,  $101, $27C0
		dc.w   $A66,  $200, $2720,  $846
word_357F6:	dc.w 6
		dc.w  $1760,  $546, $8180, $16C0
		dc.w   $566,  $140, $1760,  $6C5
		dc.w  $1760,  $6C5, $8181, $16C0
		dc.w   $6A6,  $140, $1760,  $546
		dc.w  $1620,  $6C4,   $81, $16C0
		dc.w   $6C6,  $180, $1760,  $546
		dc.w  $2AA0,  $444, $8000, $2B40
		dc.w   $466,  $2C0, $2AA0,  $744
		dc.w  $2BE0,  $446, $8180, $2B40
		dc.w   $466,  $2C0, $2BE0,  $746
		dc.w  $2AA0,  $744, $8001, $2B40
		dc.w   $726,  $2C0, $2AA0,  $444
		dc.w  $2BE0,  $746, $8181, $2B40
		dc.w   $726,  $2C0, $2BE0,  $446

; =============== S U B R O U T I N E =======================================


sub_35868:
		cmpi.b	#2,$35(a0)

loc_3586E:
		beq.s	loc_358E0
		subq.b	#1,$3A(a0)
		bpl.s	loc_358A8
		cmpi.b	#3,$35(a0)
		beq.s	loc_358CE
		move.w	#0,$3C(a0)
		move.b	#2,$35(a0)
		movea.l	$36(a0),a1
		move.w	(a1)+,d0
		move.w	d0,$2E(a0)
		move.b	$3F(a0),d1
		andi.b	#$7F,d1
		beq.s	loc_358A2
		move.w	d0,$3C(a0)

loc_358A2:
		move.l	a1,$36(a0)
		bra.s	loc_358E0
; ---------------------------------------------------------------------------

loc_358A8:
		move.l	$10(a0),d2
		move.l	$14(a0),d3
		move.w	$18(a0),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d2
		move.w	$1A(a0),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d3
		move.l	d2,$10(a0)
		move.l	d3,$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_358CE:
		tst.b	$3E(a0)
		bpl.s	loc_358D8
		neg.w	$1C(a0)

loc_358D8:
		move.b	#0,$35(a0)
		rts
; ---------------------------------------------------------------------------

loc_358E0:

		move.w	$3C(a0),d0
		add.w	d0,d0
		tst.b	$3F(a0)
		bpl.s	loc_358EE
		neg.w	d0

loc_358EE:
		jsr	GetSineCosine.w
		muls.w	#$5800,d0
		swap	d0
		add.w	$30(a0),d0
		move.w	d0,$10(a0)
		move.w	$32(a0),d0
		add.w	$3C(a0),d0
		move.w	d0,$14(a0)
		moveq	#2,d1
		move.w	$1C(a0),d0
		bpl.s	loc_35918
		neg.w	d0

loc_35918:
		cmpi.w	#$C00,d0
		bne.s	loc_35920
		moveq	#3,d1

loc_35920:
		move.b	$3F(a0),d0
		andi.b	#$7F,d0
		beq.s	loc_35932
		sub.w	d1,$3C(a0)
		bgt.s	locret_35962
		bra.s	loc_35940
; ---------------------------------------------------------------------------

loc_35932:
		add.w	d1,$3C(a0)

loc_35936:
		move.w	$2E(a0),d0
		cmp.w	$3C(a0),d0
		bhi.s	locret_35962

loc_35940:
		move.b	#3,$35(a0)
		movea.l	$36(a0),a2
		move.w	(a2)+,d4
		move.w	(a2)+,d5
		move.w	$1C(a0),d2
		bpl.s	loc_35956
		neg.w	d2

loc_35956:
		tst.w	d2
		bne.s	loc_3595E
		move.w	#$800,d2

loc_3595E:
		bra.w	loc_35706
; ---------------------------------------------------------------------------

locret_35962:

		rts
; End of function sub_35868

; ---------------------------------------------------------------------------
Map_MGZTopPlatform:include "Levels/MGZ/Misc Object Data/Map - Top Platform.asm"

; ---------------------------------------------------------------------------

Obj_MGZTopLauncher:

		move.l	#Map_MGZTopPlatform,$C(a0)
		move.w	#$43FF,$A(a0)
		ori.b	#4,4(a0)
		move.w	#prio(4),8(a0)
		move.b	#$C,7(a0)
		move.b	#8,6(a0)
		move.b	#2,$22(a0)
		move.w	#$10,$30(a0)
		move.w	#$C00,d0
		btst	#0,$2A(a0)
		beq.s	loc_359CE
		neg.w	d0

loc_359CE:
		move.w	d0,$18(a0)
		jsr	Create_New_Sprite3.w
		bne.s	loc_359EA
		move.l	#Obj_MGZTopPlatform,(a1)
		move.b	#1,$2C(a1)
		move.w	a1,$3E(a0)

loc_359EA:
		move.l	#loc_359F0,(a0)

loc_359F0:
		movea.w	$3E(a0),a1
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		addq.w	#4,$24(a1)
		cmpi.b	#$84,$40(a1)
		beq.s	loc_35A14
		cmpi.b	#$84,$42(a1)
		bne.s	loc_35A1A

loc_35A14:
		move.l	#loc_35A20,(a0)

loc_35A1A:
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_35A20:
		movea.w	$3E(a0),a1
		addq.w	#1,$14(a0)
		subq.w	#1,$30(a0)
		bne.s	loc_35A3A
		move.l	#loc_35A74,(a0)
		move.w	#$7F00,$10(a0)

loc_35A3A:
		cmpi.w	#4,$30(a0)
		beq.s	loc_35A56
		bcs.s	loc_35A74
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		addq.w	#4,$24(a1)
		bra.s	loc_35A74
; ---------------------------------------------------------------------------

loc_35A56:
		move.w	$18(a0),d1
		move.w	d1,$18(a1)
		move.w	d1,$1C(a1)
		move.b	#1,$34(a1)
		bclr	#1,$2A(a1)
		move.b	#0,$2C(a1)

loc_35A74:


		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

Obj_WaterDrop:

		move.l	#Map_HCZWaterDrop,$C(a0)
		move.w	#$235C,$A(a0)
		ori.b	#4,4(a0)
		move.w	#prio(0),8(a0)

loc_38296:
		move.b	#8,7(a0)
		move.b	#8,6(a0)
		move.b	#8,$1F(a0)
		move.b	#7,$1E(a0)
		move.b	#6,$22(a0)
		move.l	#loc_382BA,(a0)

loc_382BA:
		subq.w	#1,$30(a0)
		bpl.s	loc_382F6
		moveq	#0,d0
		move.b	$2C(a0),d0
		lsl.w	#2,d0
		move.w	d0,$30(a0)
		tst.b	4(a0)

loc_382D0:
		bpl.s	loc_382F6
		jsr	Create_New_Sprite3.w
		bne.w	loc_382F6
		moveq	#$2C,d0

loc_382DE:
		move.w	(a0,d0.w),(a1,d0.w)
		subq.w	#2,d0
		bcc.s	loc_382DE
		move.l	#loc_382FC,(a1)
		move.b	#-$39,$28(a1)
		moveq	#0,d0

loc_382F6:

		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_382FC:
		tst.b	5(a0)
		beq.s	loc_38336
		jsr	MoveSprite2.w
		addi.w	#8,$1A(a0)
		jsr	ObjCheckFloorDist.w
		tst.w	d1
		bpl.s	loc_38336
		add.w	d1,$14(a0)
		clr.w	$1A(a0)
		move.w	#$101,$20(a0)
		move.l	#loc_38336,(a0)
		move.b	#1,$24(a0)
		clr.b	$23(a0)

loc_38336:


		lea	(Ani_HCZWaterDrop).l,a1
		jsr	Animate_Sprite.w
		cmpi.b	#4,5(a0)
		bne.s	loc_38350
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_38350:
		tst.b	$29(a0)
		beq.s	loc_38376
		lea	(Player_1).w,a2
		bclr	#0,$29(a0)
		beq.s	loc_38364
		bsr.s	sub_38382

loc_38364:
		lea	(Player_2).w,a2
		bclr	#1,$29(a0)
		beq.s	loc_38372
		bsr.s	sub_38382

loc_38372:
		clr.b	$29(a0)

loc_38376:
		jsr	Add_SpriteToCollisionResponseList.w
		jmp	Draw_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_38382:

		cmpi.b	#5,$20(a2)
		bne.s	loc_38390
		move.b	#0,$21(a2)

loc_38390:
		move.b	#1,$20(a0)
		move.l	#loc_38336,(a0)
		move.b	#0,$28(a0)
		move.b	#2,5(a0)
		rts
; End of function sub_38382

; ---------------------------------------------------------------------------
Ani_HCZWaterDrop:	include "Levels/HCZ/Misc Object Data/Anim - Water Drop.asm"

; ---------------------------------------------------------------------------

Obj_HCZWaterSplash:

		tst.b	$2C(a0)
		beq.s	loc_38432
		move.l	#Map_HCZWaterSplash2,$C(a0)
		move.w	#$36E,$A(a0)
		tst.b	(Current_act).w
		beq.s	loc_383DC
		move.w	#$344,$A(a0)

loc_383DC:
		ori.b	#4,4(a0)
		move.w	#prio(6),8(a0)
		move.b	#-$60,7(a0)
		move.b	#-$80,6(a0)
		move.b	#-1,$31(a0)
		move.b	#0,$2A(a0)
		bset	#6,4(a0)
		move.w	#2,$16(a0)
		lea	$18(a0),a2
		move.w	$10(a0),(a2)+
		move.w	$14(a0),(a2)+
		move.w	#5,(a2)+
		move.w	$10(a0),(a2)+
		move.w	$14(a0),(a2)+
		move.w	#$505,(a2)+
		move.l	#loc_384B2,(a0)
		bra.w	loc_384B2
; ---------------------------------------------------------------------------

loc_38432:
		move.l	#Map_HCZWaterSplash,$C(a0)
		move.w	#$43B2,$A(a0)
		ori.b	#4,4(a0)
		move.w	#prio(6),8(a0)
		move.b	#$28,7(a0)
		move.b	#$20,6(a0)
		move.b	#-1,$30(a0)
		move.l	#loc_38464,(a0)

loc_38464:
		subq.b	#1,$24(a0)
		bpl.s	loc_3847A
		move.b	#7,$24(a0)
		addq.b	#1,$22(a0)
		andi.b	#3,$22(a0)

loc_3847A:
		tst.b	4(a0)
		bpl.s	loc_384AC
		moveq	#0,d1
		move.b	$22(a0),d1
		cmp.b	$30(a0),d1
		beq.s	loc_384AC
		move.b	d1,$30(a0)
		lsl.w	#8,d1
		move.w	d1,d0
		add.w	d0,d0
		add.w	d0,d1
		addi.l	#ArtUnc_HCZWaterSplash,d1
		move.w	#$7640,d2
		move.w	#$180,d3
		jsr	Add_To_DMA_Queue.w

loc_384AC:

		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_384B2:
		move.w	Player_1+x_pos.w,$10(a0)	; NAT: Fix tails not getting water thingy
		cmp.b	#1,BoxWinner.w
		ble.s	.sonic				; NAT: Branch if Sonic is winrar
		move.w	Player_2+x_pos.w,$10(a0)

.sonic		move.w	(Water_level).w,$14(a0)
		bsr.s	sub_38534
		tst.b	$2A(a0)
		beq.s	loc_384F8
		move.b	(Level_frame_counter+1).w,d0
		addq.b	#2,d0
		andi.b	#$F,d0
		bne.s	loc_384DA
		moveq	#-$25,d0
		jsr	Play_Sound_2.w

loc_384DA:
		subq.b	#1,$24(a0)
		bpl.s	loc_384F8
		move.b	#2,$24(a0)
		addq.b	#1,$30(a0)
		cmpi.b	#5,$30(a0)
		blo.s	loc_384F8
		move.b	#0,$30(a0)

loc_384F8:

		moveq	#0,d1
		move.b	$30(a0),d1
		cmp.b	$31(a0),d1
		beq.s	loc_3852E
		move.b	d1,$31(a0)
		lsl.w	#7,d1
		move.w	d1,d0
		add.w	d0,d0
		add.w	d0,d1
		addi.l	#ArtUnc_HCZWaterSplash2,d1
		move.w	#$6DC0,d2
		tst.b	(Current_act).w
		beq.s	loc_38524
		move.w	#$6880,d2

loc_38524:
		move.w	#$C0,d3
		jsr	Add_To_DMA_Queue.w

loc_3852E:
		jmp	Draw_Sprite.w		; NAT: Fix the object deleting itself when its not supposed to

; =============== S U B R O U T I N E =======================================


sub_38534:
		lea	(Player_1).w,a1
		lea	$18(a0),a2
		moveq	#3,d6
		move.w	(Ctrl_1_logical).w,d5
		bsr.s	sub_3857E
		bclr	#0,4(a0)
		btst	#0,$2A(a1)
		beq.s	loc_38558
		bset	#0,4(a0)

loc_38558:
		lea	(Player_2).w,a1
		lea	$1E(a0),a2
		moveq	#4,d6
		move.w	(Ctrl_2_logical).w,d5
		bsr.s	sub_3857E
		move.b	4(a0),d0
		add.b	$2A(a1),d0
		andi.b	#1,d0
		beq.s	locret_3857C
		move.b	#5,5(a2)

locret_3857C:
		rts
; End of function sub_38534


; =============== S U B R O U T I N E =======================================


sub_3857E:
		btst	d6,$2A(a0)
		bne.s	loc_385D2

		move.w	$1A(a1),d0		; NAT: Get y-vel
		cmp.w	#$38,d0			; max of 38 allowed (respawning!!!)
		bhi.s	locret_385D0		; if be moving too much, is no good

		moveq	#0,d1
		move.b	$1E(a1),d1
		add.w	$14(a1),d1
		addq.w	#1,d1
		cmp.w	(Water_level).w,d1
		bne.s	locret_385D0
		move.w	$18(a1),d0
		bpl.s	loc_385A4
		neg.w	d0

loc_385A4:
		cmpi.w	#$700,d0
		blo.s	locret_385D0
		bset	d6,$2A(a0)
		move.w	$10(a1),(a2)
		move.w	(Water_level).w,2(a2)
		move.b	#0,5(a2)
		bclr	#0,$2A(a1)
		tst.w	$18(a1)
		bpl.s	locret_385D0
		bset	#0,$2A(a1)

locret_385D0:

		rts
; ---------------------------------------------------------------------------

loc_385D2:
		move.w	d5,d0
		andi.w	#$70,d0
		bne.s	loc_38652
		move.w	(Water_level).w,d0
		moveq	#0,d1
		move.b	$1E(a1),d1
		sub.w	d1,d0
		subq.w	#1,d0
		cmp.w	$14(a1),d0
		bhi.s	loc_38646
		move.w	$18(a1),d1
		bpl.s	loc_385F6
		neg.w	d1

loc_385F6:
		cmpi.w	#$700,d1
		blo.s	loc_38646
		move.w	d0,$14(a1)
		clr.w	$1A(a1)
		move.w	$10(a1),(a2)
		move.w	(Water_level).w,2(a2)
		btst	#1,$2A(a1)
		beq.s	locret_38650
		andi.w	#$C00,d5
		bne.s	locret_38650
		move.w	#$C,d1
		move.w	$18(a1),d0
		beq.s	loc_38646
		bmi.s	loc_38638
		sub.w	d1,d0
		bcc.s	loc_38632
		move.w	#0,d0

loc_38632:
		move.w	d0,$18(a1)
		bra.s	locret_38650
; ---------------------------------------------------------------------------

loc_38638:
		add.w	d1,d0
		bcc.s	loc_38640
		move.w	#0,d0

loc_38640:
		move.w	d0,$18(a1)
		bra.s	locret_38650
; ---------------------------------------------------------------------------

loc_38646:

		bclr	d6,$2A(a0)
		move.b	#5,5(a2)

locret_38650:

		rts
; ---------------------------------------------------------------------------

loc_38652:
		bclr	d6,$2A(a0)
		move.b	#5,5(a2)
		move.w	#-$680,$1A(a1)
		bset	#1,$2A(a1)
		move.b	#1,$40(a1)
		move.b	#$E,$1E(a1)
		move.b	#7,$1F(a1)
		move.b	#2,$20(a1)
		bset	#2,$2A(a1)
		rts
; End of function sub_3857E

; ---------------------------------------------------------------------------

Obj_TensionBridge:
		move.l	#loc_387E0,(a0)
		move.l	#Map_TensionBridge,$C(a0)
		move.w	#$4038,$A(a0)
		move.w	#prio(4),8(a0)
		cmpi.b	#5,(Current_zone).w
		bne.s	loc_386D0
		move.l	#loc_38882,(a0)
		move.l	#Map_ICZTensionBridge,$C(a0)
		move.w	#$43B6,$A(a0)
		tst.b	$2C(a0)
		bpl.s	loc_386D0
		move.l	#loc_38946,(a0)
		andi.b	#$7F,$2C(a0)

loc_386D0:
		cmpi.b	#9,(Current_zone).w
		bne.s	loc_386DE
		move.w	#-$1EED,$A(a0)

loc_386DE:
		tst.b	$2C(a0)
		bpl.s	loc_386F0
		move.l	#loc_387B6,(a0)
		andi.b	#$7F,$2C(a0)

loc_386F0:
		move.b	#4,4(a0)
		move.b	#-$80,7(a0)
		move.b	#8,6(a0)
		move.w	$14(a0),d2
		move.w	d2,$3C(a0)
		move.w	$10(a0),d3
		lea	$2C(a0),a2
		moveq	#0,d1
		move.b	(a2),d1
		move.w	d1,d0
		lsr.w	#1,d0
		lsl.w	#4,d0
		sub.w	d0,d3
		swap	d1
		move.w	#8,d1
		bsr.s	sub_38756
		move.w	$30(a1),d0
		subq.w	#8,d0
		move.w	d0,$10(a1)
		move.l	a1,$30(a0)
		swap	d1
		subq.w	#8,d1
		bls.s	loc_38752
		move.w	d1,d4
		bsr.s	sub_38756
		move.l	a1,$34(a0)
		move.w	d4,d0
		add.w	d0,d0
		add.w	d4,d0
		move.w	$18(a1,d0.w),d0
		subq.w	#8,d0
		move.w	d0,$10(a1)

loc_38752:
		bra.w	loc_387E0

; =============== S U B R O U T I N E =======================================


sub_38756:
		jsr	Create_New_Sprite3.w
		bne.s	locret_387B4
		move.l	#Draw_Sprite,(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		move.l	$C(a0),$C(a1)
		move.w	$A(a0),$A(a1)
		move.b	4(a0),4(a1)
		move.w	8(a0),8(a1)
		bset	#6,4(a1)
		move.b	#$40,7(a1)
		move.b	#8,6(a1)
		move.w	d1,$16(a1)
		subq.b	#1,d1
		lea	$18(a1),a2

loc_387A4:
		move.w	d3,(a2)+
		move.w	d2,(a2)+
		move.w	#0,(a2)+
		addi.w	#$10,d3
		dbf	d1,loc_387A4

locret_387B4:
		rts
; End of function sub_38756

; ---------------------------------------------------------------------------

loc_387B6:
		move.b	$2C(a0),d0
		andi.w	#$F,d0
		lea	(Level_trigger_array).w,a3
		tst.b	(a3,d0.w)
		beq.s	loc_387E0
		move.l	#loc_3890C,(a0)
		move.b	#$E,$34(a0)
		move.l	#loc_388E4,d4
		bra.w	loc_389C8
; ---------------------------------------------------------------------------

loc_387E0:
		move.b	$2A(a0),d0
		andi.b	#$18,d0
		bne.s	loc_387F6
		tst.b	$3E(a0)
		beq.s	loc_38822
		subq.b	#4,$3E(a0)
		bra.s	loc_3881E
; ---------------------------------------------------------------------------

loc_387F6:
		andi.b	#$10,d0
		beq.s	loc_38812
		move.b	$3F(a0),d0
		sub.b	$3B(a0),d0
		beq.s	loc_38812
		bcc.s	loc_3880E
		addq.b	#1,$3F(a0)
		bra.s	loc_38812
; ---------------------------------------------------------------------------

loc_3880E:
		subq.b	#1,$3F(a0)

loc_38812:

		cmpi.b	#$40,$3E(a0)
		beq.s	loc_3881E
		addq.b	#4,$3E(a0)

loc_3881E:

		bsr.w	sub_38CC2

loc_38822:
		moveq	#0,d1
		move.b	$2C(a0),d1
		lsl.w	#3,d1
		move.w	d1,d2
		addq.w	#8,d1
		add.w	d2,d2
		moveq	#8,d3
		move.w	$10(a0),d4
		bsr.w	sub_38A88

loc_3883A:
		move.w	$10(a0),d0
		andi.w	#-$80,d0
		sub.w	(Camera_X_pos_coarse_back).w,d0
		cmpi.w	#$280,d0
		bhi.s	loc_3884E
		rts
; ---------------------------------------------------------------------------

loc_3884E:
		movea.l	$30(a0),a1

loc_38852:
		jsr	Delete_Referenced_Sprite.w
		cmpi.b	#8,$2C(a0)
		bls.s	loc_3886A
		movea.l	$34(a0),a1
		jsr	Delete_Referenced_Sprite.w

loc_3886A:
		move.w	respawn_addr(a0),d0
		beq.s	loc_38876
		movea.w	d0,a2
		bclr	#7,(a2)

loc_38876:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_38882:
		move.b	$2A(a0),d0
		andi.b	#$18,d0
		bne.s	loc_38898
		tst.b	$3E(a0)
		beq.s	loc_388C4
		subq.b	#4,$3E(a0)
		bra.s	loc_388C0
; ---------------------------------------------------------------------------

loc_38898:
		andi.b	#$10,d0
		beq.s	loc_388B4
		move.b	$3F(a0),d0
		sub.b	$3B(a0),d0
		beq.s	loc_388B4
		bcc.s	loc_388B0
		addq.b	#1,$3F(a0)
		bra.s	loc_388B4
; ---------------------------------------------------------------------------

loc_388B0:
		subq.b	#1,$3F(a0)

loc_388B4:

		cmpi.b	#$40,$3E(a0)
		beq.s	loc_388C0
		addq.b	#4,$3E(a0)

loc_388C0:

		bsr.w	sub_38CC2

loc_388C4:
		moveq	#0,d1
		move.b	$2C(a0),d1
		lsl.w	#3,d1
		move.w	d1,d2
		addq.w	#8,d1
		add.w	d2,d2
		moveq	#8,d3

loc_388D4:
		move.w	$10(a0),d4
		bsr.w	sub_38A88
		bsr.w	sub_38C12
		bra.w	loc_3883A
; ---------------------------------------------------------------------------

loc_388E4:
		tst.b	$34(a0)
		beq.s	loc_388F4
		subq.b	#1,$34(a0)
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_388F4:
		jsr	MoveSprite.w
		tst.b	4(a0)
		bpl.s	loc_38906
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_38906:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_3890C:
		tst.b	$34(a0)
		beq.s	loc_38918
		subq.b	#1,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_38918:
		bclr	#3,$2A(a0)
		beq.s	loc_3892C
		bclr	#3,(Player_1+$2A).w
		bset	#1,(Player_1+$2A).w

loc_3892C:
		bclr	#4,$2A(a0)
		beq.s	loc_38940
		bclr	#3,(Player_2+$2A).w
		bset	#1,(Player_2+$2A).w

loc_38940:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_38946:
		bsr.w	sub_38D74
		move.l	#loc_38950,(a0)

loc_38950:
		move.b	$2A(a0),d0
		andi.b	#$18,d0
		bne.s	loc_38966
		tst.b	$3E(a0)
		beq.s	loc_389A8
		subq.b	#4,$3E(a0)
		bra.s	loc_389A4
; ---------------------------------------------------------------------------

loc_38966:
		moveq	#0,d1
		move.b	$2C(a0),d1
		lsl.w	#3,d1
		move.w	d1,d2
		addq.w	#8,d1
		add.w	d2,d2
		bsr.w	sub_38BD8
		move.b	$2A(a0),d0
		andi.b	#$10,d0
		beq.s	loc_38998
		move.b	$3F(a0),d0
		sub.b	$3B(a0),d0
		beq.s	loc_38998
		bcc.s	loc_38994
		addq.b	#1,$3F(a0)
		bra.s	loc_38998
; ---------------------------------------------------------------------------

loc_38994:
		subq.b	#1,$3F(a0)

loc_38998:

		cmpi.b	#$40,$3E(a0)
		beq.s	loc_389A4
		addq.b	#4,$3E(a0)

loc_389A4:

		bsr.w	sub_38D74

loc_389A8:
		moveq	#0,d1
		move.b	$2C(a0),d1
		lsl.w	#3,d1
		move.w	d1,d2
		addq.w	#8,d1
		add.w	d2,d2
		moveq	#8,d3
		move.w	$10(a0),d4
		bsr.w	sub_38B2A
		bsr.w	sub_38C12
		bra.w	loc_3883A
; ---------------------------------------------------------------------------

loc_389C8:
		movea.l	$30(a0),a3
		bsr.s	sub_389DE
		cmpi.b	#8,$2C(a0)
		bls.w	locret_389DC
		movea.l	$34(a0),a3

; =============== S U B R O U T I N E =======================================


sub_389DE:
		lea	(byte_38A78).l,a4
		lea	$18(a3),a2
		move.w	$16(a3),d6
		subq.w	#1,d6
		bclr	#6,4(a3)
		movea.l	a3,a1
		bra.s	loc_38A00
; ---------------------------------------------------------------------------

loc_389F8:
		jsr	Create_New_Sprite3.w
		bne.s	loc_38A64

loc_38A00:
		move.l	d4,(a1)
		move.l	$C(a3),$C(a1)
		move.b	4(a3),4(a1)
		move.w	$A(a3),$A(a1)
		move.w	8(a3),8(a1)
		move.b	7(a3),7(a1)
		move.b	6(a3),6(a1)
		move.w	8(a3),8(a1)
		move.w	(a2)+,$10(a1)
		move.w	(a2)+,$14(a1)
		move.w	(a2)+,d0
		move.b	d0,$22(a1)
		move.b	(a4)+,$34(a1)
		movea.l	a1,a5
		jsr	Create_New_Sprite3.w
		bne.s	loc_38A64
		move.l	#loc_1E6EC,(a1)
		move.w	$10(a5),$10(a1)
		move.w	$14(a5),$14(a1)
		move.b	-1(a4),$24(a1)
		dbf	d6,loc_389F8

loc_38A64:
		move.w	#0,$18(a3)
		clr.w	$1A(a3)
		moveq	#-$7D,d0
		jmp	Play_Sound_2.w
; End of function sub_389DE

; ---------------------------------------------------------------------------
byte_38A78:	dc.b	8, $10,	 $C,  $E,   6,	$A,   4,   2
		dc.b	8, $10,	 $C,  $E,   6,	$A,   4,   2

; =============== S U B R O U T I N E =======================================


sub_38A88:

		lea	(Player_2).w,a1
		moveq	#4,d6
		moveq	#$3B,d5
		movem.l	d1-d4,-(sp)
		bsr.s	sub_38AA2
		movem.l	(sp)+,d1-d4
		lea	(Player_1).w,a1
		subq.b	#1,d6
		moveq	#$3F,d5
; End of function sub_38A88


; =============== S U B R O U T I N E =======================================


sub_38AA2:
		btst	d6,$2A(a0)
		beq.s	loc_38B06
		btst	#1,$2A(a1)
		bne.s	loc_38AC2
		moveq	#0,d0
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		add.w	d1,d0
		bmi.s	loc_38AC2
		cmp.w	d2,d0
		blo.s	loc_38AD0

loc_38AC2:

		bclr	#3,$2A(a1)
		bclr	d6,$2A(a0)
		moveq	#0,d4

locret_389DC:
		rts
; ---------------------------------------------------------------------------

loc_38AD0:
		lsr.w	#4,d0
		move.b	d0,(a0,d5.w)
		movea.l	$30(a0),a2
		cmpi.w	#8,d0
		blo.s	loc_38AE8
		movea.l	$34(a0),a2
		subi.w	#8,d0

loc_38AE8:
		add.w	d0,d0
		move.w	d0,d1
		add.w	d0,d0
		add.w	d1,d0
		move.w	$1A(a2,d0.w),d0
		subq.w	#8,d0
		moveq	#0,d1
		move.b	$1E(a1),d1
		sub.w	d1,d0
		move.w	d0,$14(a1)
		moveq	#0,d4
		rts
; ---------------------------------------------------------------------------

loc_38B06:
		move.w	d1,-(sp)
		jsr	sub_1E410.w
		move.w	(sp)+,d1
		btst	d6,$2A(a0)
		beq.s	locret_38B28
		moveq	#0,d0
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		add.w	d1,d0
		lsr.w	#4,d0
		move.b	d0,(a0,d5.w)

locret_38B28:
		rts
; End of function sub_38AA2


; =============== S U B R O U T I N E =======================================


sub_38B2A:
		lea	(Player_2).w,a1
		moveq	#4,d6
		moveq	#$3B,d5
		movem.l	d1-d4,-(sp)
		bsr.s	sub_38B44
		movem.l	(sp)+,d1-d4
		lea	(Player_1).w,a1
		subq.b	#1,d6
		moveq	#$3F,d5
; End of function sub_38B2A


; =============== S U B R O U T I N E =======================================


sub_38B44:
		btst	d6,$2A(a0)
		beq.s	loc_38BA4
		btst	#1,$2A(a1)
		bne.s	loc_38B64
		moveq	#0,d0
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		add.w	d1,d0
		bmi.s	loc_38B64
		cmp.w	d2,d0
		blo.s	loc_38B72

loc_38B64:

		bclr	#3,$2A(a1)
		bclr	d6,$2A(a0)
		moveq	#0,d4
		rts
; ---------------------------------------------------------------------------

loc_38B72:
		lsr.w	#4,d0
		movea.l	$30(a0),a2
		cmpi.w	#8,d0
		blo.s	loc_38B86
		movea.l	$34(a0),a2
		subi.w	#8,d0

loc_38B86:
		add.w	d0,d0
		move.w	d0,d1
		add.w	d0,d0
		add.w	d1,d0
		move.w	$1A(a2,d0.w),d0
		subq.w	#8,d0
		moveq	#0,d1
		move.b	$1E(a1),d1
		sub.w	d1,d0
		move.w	d0,$14(a1)
		moveq	#0,d4
		rts
; ---------------------------------------------------------------------------

loc_38BA4:

sub_38BA8:
		tst.w	$1A(a1)
		bmi.s	locret_38BD6
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		add.w	d1,d0
		bmi.s	locret_38BD6
		cmp.w	d2,d0
		bhs.s	locret_38BD6
		lsr.w	#4,d0
		move.w	d0,d3
		add.w	d0,d0
		add.w	d0,d3
		neg.w	d3
		addq.w	#8,d3
		move.w	$14(a0),d0
		sub.w	d3,d0
		jmp	loc_1E45A.w
; ---------------------------------------------------------------------------

locret_38BD6:

		rts
; End of function sub_38BA8


; =============== S U B R O U T I N E =======================================


sub_38BD8:
		lea	(Player_2).w,a1
		moveq	#4,d6
		moveq	#$3B,d5
		bsr.s	sub_38BEA
		lea	(Player_1).w,a1
		subq.b	#1,d6

		moveq	#$3F,d5
; End of function sub_38BD8


; =============== S U B R O U T I N E =======================================


sub_38BEA:
		btst	d6,$2A(a0)
		beq.s	locret_38C10
		btst	#1,$2A(a1)
		bne.s	locret_38C10
		moveq	#0,d0
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		add.w	d1,d0
		bmi.s	locret_38C10
		cmp.w	d2,d0
		bhs.s	locret_38C10
		lsr.w	#4,d0
		move.b	d0,(a0,d5.w)

locret_38C10:
		rts
; End of function sub_38BEA


; =============== S U B R O U T I N E =======================================


sub_38C12:

		movea.l	$30(a0),a1
		lea	$1D(a1),a1
		movea.l	$34(a0),a2
		lea	$1D(a2),a2
		moveq	#-2,d3
		moveq	#-2,d4
		move.b	$2A(a0),d0
		andi.w	#8,d0
		beq.s	loc_38C3E
		tst.w	(Player_1+x_vel).w
		beq.s	loc_38C3E
		move.b	$3F(a0),d0
		bsr.w	sub_38C8E

loc_38C3E:

		move.b	$2A(a0),d0
		andi.w	#$10,d0
		beq.s	loc_38C56
		tst.w	(Player_2+$18).w
		beq.s	loc_38C56
		move.b	$3B(a0),d0
		bsr.w	sub_38C8E

loc_38C56:

		movea.l	$30(a0),a1
		lea	$4D(a1),a2
		lea	$1D(a1),a1
		moveq	#0,d1
		move.b	$2C(a0),d1
		subq.b	#1,d1

loc_38C6A:
		tst.b	(a1)
		beq.s	loc_38C7A
		addq.b	#1,(a1)
		cmpi.b	#$C,(a1)
		blo.s	loc_38C7A
		move.b	#0,(a1)

loc_38C7A:

		addq.w	#6,a1
		cmpa.w	a2,a1
		bne.s	loc_38C88
		movea.l	$34(a0),a1
		lea	$1D(a1),a1

loc_38C88:
		dbf	d1,loc_38C6A
		rts
; End of function sub_38C12


; =============== S U B R O U T I N E =======================================


sub_38C8E:

		cmpi.b	#8,d0
		bhs.s	loc_38CAA
		move.w	d0,d1
		add.w	d0,d0
		add.w	d1,d0
		add.w	d0,d0
		tst.b	(a1,d0.w)
		bne.s	locret_38CA8
		move.b	#1,(a1,d0.w)

locret_38CA8:
		rts
; ---------------------------------------------------------------------------

loc_38CAA:
		subq.w	#8,d0
		move.w	d0,d1
		add.w	d0,d0
		add.w	d1,d0
		add.w	d0,d0
		tst.b	(a2,d0.w)
		bne.s	locret_38CC0
		move.b	#1,(a2,d0.w)

locret_38CC0:
		rts
; End of function sub_38C8E


; =============== S U B R O U T I N E =======================================


sub_38CC2:

		move.b	$3E(a0),d0
		jsr	GetSineCosine.w
		move.w	d0,d4
		lea	(BridgeBendData).l,a4
		moveq	#0,d0
		move.b	$2C(a0),d0
		lsl.w	#4,d0
		moveq	#0,d3
		move.b	$3F(a0),d3
		move.w	d3,d2
		add.w	d0,d3
		moveq	#0,d5
		lea	(loc_38DAA).l,a5
		move.b	(a5,d3.w),d5
		andi.w	#$F,d3
		lsl.w	#4,d3
		lea	(a4,d3.w),a3
		movea.l	$30(a0),a1
		lea	next_object(a1),a2
		lea	$1A(a1),a1

loc_38D08:
		moveq	#0,d0
		move.b	(a3)+,d0
		addq.w	#1,d0
		mulu.w	d5,d0
		mulu.w	d4,d0
		swap	d0
		add.w	$3C(a0),d0
		move.w	d0,(a1)
		addq.w	#6,a1
		cmpa.w	a2,a1
		bne.s	loc_38D28
		movea.l	$34(a0),a1
		lea	$1A(a1),a1

loc_38D28:
		dbf	d2,loc_38D08
		moveq	#0,d0
		move.b	$2C(a0),d0
		moveq	#0,d3
		move.b	$3F(a0),d3
		addq.b	#1,d3
		sub.b	d0,d3
		neg.b	d3
		bmi.s	locret_38D72
		move.w	d3,d2
		lsl.w	#4,d3
		lea	(a4,d3.w),a3
		adda.w	d2,a3
		subq.w	#1,d2
		bcs.s	locret_38D72

loc_38D4E:
		moveq	#0,d0
		move.b	-(a3),d0
		addq.w	#1,d0
		mulu.w	d5,d0
		mulu.w	d4,d0
		swap	d0
		add.w	$3C(a0),d0
		move.w	d0,(a1)
		addq.w	#6,a1
		cmpa.w	a2,a1
		bne.s	loc_38D6E
		movea.l	$34(a0),a1
		lea	$1A(a1),a1

loc_38D6E:
		dbf	d2,loc_38D4E

locret_38D72:

		rts
; End of function sub_38CC2


; =============== S U B R O U T I N E =======================================


sub_38D74:

		move.b	$3E(a0),d0
		jsr	GetSineCosine.w
		move.w	d0,d4
		lea	(BridgeBendData).l,a4
		moveq	#0,d0
		move.b	$2C(a0),d0
		lsl.w	#4,d0
		moveq	#0,d3
		move.b	$3F(a0),d3
		move.w	d3,d2
		add.w	d0,d3
		moveq	#0,d5
		lea	(loc_38DAA).l,a5
		move.b	(a5,d3.w),d5
		andi.w	#$F,d3
		lsl.w	#4,d3

loc_38DAA:

		lea	(a4,d3.w),a3
		move.w	$3C(a0),d6
		movea.l	$30(a0),a1
		lea	next_object(a1),a2
		lea	$1A(a1),a1

loc_38DBE:
		moveq	#0,d0
		move.b	(a3)+,d0
		addq.w	#1,d0
		mulu.w	d5,d0
		mulu.w	d4,d0
		swap	d0
		add.w	d6,d0
		addq.w	#3,d6
		move.w	d0,(a1)
		addq.w	#6,a1
		cmpa.w	a2,a1
		bne.s	loc_38DDE
		movea.l	$34(a0),a1
		lea	$1A(a1),a1

loc_38DDE:
		dbf	d2,loc_38DBE
		moveq	#0,d0
		move.b	$2C(a0),d0
		moveq	#0,d3
		move.b	$3F(a0),d3
		addq.b	#1,d3
		sub.b	d0,d3
		neg.b	d3
		bmi.s	locret_38E28
		move.w	d3,d2
		lsl.w	#4,d3
		lea	(a4,d3.w),a3
		adda.w	d2,a3
		subq.w	#1,d2
		bcs.s	locret_38E28

loc_38E04:
		moveq	#0,d0
		move.b	-(a3),d0
		addq.w	#1,d0
		mulu.w	d5,d0
		mulu.w	d4,d0
		swap	d0
		add.w	d6,d0
		addq.w	#3,d6
		move.w	d0,(a1)
		addq.w	#6,a1
		cmpa.w	a2,a1
		bne.s	loc_38E24
		movea.l	$34(a0),a1
		lea	$1A(a1),a1

loc_38E24:
		dbf	d2,loc_38E04

locret_38E28:

		rts
; End of function sub_38D74

; ---------------------------------------------------------------------------
byte_38E2A:	dc.b	2,   4,	  6,   8,   8,	 6,   4,   2,	0,   0,	  0,   0,   0,	 0,   0,   0
		dc.b	2,   4,	  6,   8,  $A,	 8,   6,   4,	2,   0,	  0,   0,   0,	 0,   0,   0
		dc.b	2,   4,	  6,   8,  $A,	$A,   8,   6,	4,   2,	  0,   0,   0,	 0,   0,   0
		dc.b	2,   4,	  6,   8,  $A,	$C,  $A,   8,	6,   4,	  2,   0,   0,	 0,   0,   0
		dc.b	2,   4,	  6,   8,  $A,	$C,  $C,  $A,	8,   6,	  4,   2,   0,	 0,   0,   0
		dc.b	2,   4,	  6,   8,  $A,	$C,  $E,  $C,  $A,   8,	  6,   4,   2,	 0,   0,   0
		dc.b	2,   4,	  6,   8,  $A,	$C,  $E,  $E,  $C,  $A,	  8,   6,   4,	 2,   0,   0
		dc.b	2,   4,	  6,   8,  $A,	$C,  $E, $10,  $E,  $C,	 $A,   8,   6,	 4,   2,   0
		dc.b	2,   4,	  6,   8,  $A,	$C,  $E, $10, $10,  $E,	 $C,  $A,   8,	 6,   4,   2
BridgeBendData:	dc.b  $FF,   0,	  0,   0,   0,	 0,   0,   0,	0,   0,	  0,   0,   0,	 0,   0,   0

		dc.b  $B5, $FF,	  0,   0,   0,	 0,   0,   0,	0,   0,	  0,   0,   0,	 0,   0,   0
		dc.b  $7E, $DB,	$FF,   0,   0,	 0,   0,   0,	0,   0,	  0,   0,   0,	 0,   0,   0
		dc.b  $61, $B5,	$EC, $FF,   0,	 0,   0,   0,	0,   0,	  0,   0,   0,	 0,   0,   0
		dc.b  $4A, $93,	$CD, $F3, $FF,	 0,   0,   0,	0,   0,	  0,   0,   0,	 0,   0,   0
		dc.b  $3E, $7E,	$B0, $DB, $F6, $FF,   0,   0,	0,   0,	  0,   0,   0,	 0,   0,   0
		dc.b  $38, $6D,	$9D, $C5, $E4, $F8, $FF,   0,	0,   0,	  0,   0,   0,	 0,   0,   0
		dc.b  $31, $61,	$8E, $B5, $D4, $EC, $FB, $FF,	0,   0,	  0,   0,   0,	 0,   0,   0
		dc.b  $2B, $56,	$7E, $A2, $C1, $DB, $EE, $FB, $FF,   0,	  0,   0,   0,	 0,   0,   0
		dc.b  $25, $4A,	$73, $93, $B0, $CD, $E1, $F3, $FC, $FF,	  0,   0,   0,	 0,   0,   0
		dc.b  $1F, $44,	$67, $88, $A7, $BD, $D4, $E7, $F4, $FD,	$FF,   0,   0,	 0,   0,   0
		dc.b  $1F, $3E,	$5C, $7E, $98, $B0, $C9, $DB, $EA, $F6,	$FD, $FF,   0,	 0,   0,   0
		dc.b  $19, $38,	$56, $73, $8E, $A7, $BD, $D1, $E1, $EE,	$F8, $FE, $FF,	 0,   0,   0
		dc.b  $19, $38,	$50, $6D, $83, $9D, $B0, $C5, $D8, $E4,	$F1, $F8, $FE, $FF,   0,   0
		dc.b  $19, $31,	$4A, $67, $7E, $93, $A7, $BD, $CD, $DB,	$E7, $F3, $F9, $FE, $FF,   0
		dc.b  $19, $31,	$4A, $61, $78, $8E, $A2, $B5, $C5, $D4,	$E1, $EC, $F4, $FB, $FE, $FF
Map_ICZTensionBridge:include "Levels/ICZ/Misc Object Data/Map - ICZ Tension Bridge.asm"

Map_TensionBridge:include "Levels/Misc/Map - Tension Bridge.asm"

byte_39006:	dc.b	2,   4,	  4,   4,   4,	 4,  $C,   0

byte_3900E:	dc.b	2,   4,	  6,   6,   6,	 6,   8,   8,	8,   8,	 $A,  $A,   0,	 0


byte_3901C:	dc.b	2,   4,	  6,   6,   6,	 6,   8,   8,	8,   8,	 $A,   0

byte_39028:	dc.b	2,   4,	  6,   6,   6,	 6,   8,   8,	8,   8,	  8,   8,   8,	 8,   8,   8,	8,   8,	 $E,   0

word_3903C:	dc.w $840
		dc.w $120
		dc.l byte_39006
		dc.w $1540
		dc.w $620
		dc.l byte_3900E
		dc.w $1740
		dc.w $3A0
		dc.l byte_3900E
		dc.w $1CC0
		dc.w $620
		dc.l byte_39006
		dc.w $1FC0
		dc.w $2A0
		dc.l byte_3901C
		dc.w $24C0
		dc.w $220
		dc.l byte_39028
		dc.w $26C0
		dc.w $120
		dc.l byte_39006
		dc.w $3040
		dc.w $620
		dc.l byte_3900E
; ---------------------------------------------------------------------------

Obj_69_1:
		move.b	$2C(a0),d0
		andi.w	#$7F,d0
		lsl.w	#3,d0
		lea	word_3903C(pc,d0.w),a1
		move.w	(a1)+,$30(a0)
		move.w	(a1)+,$32(a0)
		move.l	(a1)+,$40(a0)
		move.l	#loc_3909C,(a0)

loc_3909C:
		lea	(Player_1).w,a1
		lea	$34(a0),a4
		bsr.s	sub_390C2
		lea	(Player_2).w,a1
		lea	$3A(a0),a4
		bsr.s	sub_390C2
		move.b	$34(a0),d0
		add.b	$3A(a0),d0
		beq.s	loc_390BC
		rts
; ---------------------------------------------------------------------------

loc_390BC:
		jmp	Delete_Sprite_If_Not_In_Range.w

; =============== S U B R O U T I N E =======================================


sub_390C2:
		cmp.b	#6,5(a1)		; NAT: Fix death bug
		blo.s	.notded
		clr.b	(a4)
		rts

.notded		moveq	#0,d0
		move.b	(a4),d0
		move.w	off_390F2(pc,d0.w),d0
		jsr	off_390F2(pc,d0.w)
		tst.b	(a4)
		beq.s	locret_390F0
		bsr.w	sub_39208
		moveq	#0,d0
		move.w	2(a4),d0
		divu.w	#$60,d0
		movea.l	$40(a0),a2
		move.b	(a2,d0.w),(a4)
		bne.s	locret_390F0
		move.b	#0,$2E(a1)

locret_390F0:

		rts
; End of function sub_390C2

; ---------------------------------------------------------------------------
off_390F2:	dc.w loc_39102-off_390F2

		dc.w loc_3925C-off_390F2
		dc.w loc_392B6-off_390F2
		dc.w loc_392EE-off_390F2
		dc.w loc_3931E-off_390F2
		dc.w loc_3935E-off_390F2
		dc.w loc_3938E-off_390F2
		dc.w loc_393BE-off_390F2
; ---------------------------------------------------------------------------

loc_39102:
		tst.b	(Debug_On).w
		bne.w	locret_39196
		tst.b	$2C(a0)
		bmi.w	loc_39198
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		addi.w	#8,d0
		cmpi.w	#$10,d0
		bhs.s	locret_39196
		move.w	$14(a1),d1
		sub.w	$14(a0),d1
		cmpi.w	#$30,d1
		bhs.s	locret_39196
		tst.b	$2E(a1)
		bne.s	locret_39196
		btst	#0,$2A(a0)
		beq.s	loc_39152
		tst.w	$1C(a1)
		bpl.s	locret_39196
		tst.w	$18(a1)
		bpl.s	locret_39196
		neg.w	$1C(a1)
		bra.s	loc_39158
; ---------------------------------------------------------------------------

loc_39152:
		tst.w	$1C(a1)
		bmi.s	locret_39196

loc_39158:
		addq.b	#2,(a4)
		move.b	#1,$2E(a1)
		move.b	#2,$20(a1)
		move.b	#$E,$1E(a1)
		move.b	#7,$1F(a1)
		move.b	#2,$20(a1)
		bset	#2,$2A(a1)
		bclr	#5,$2A(a1)
		move.b	#$28,$26(a1)
		move.w	$14(a1),d1
		sub.w	$32(a0),d1
		move.w	d1,2(a4)

locret_39196:

		rts
; ---------------------------------------------------------------------------

loc_39198:
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		addi.w	#$10,d0
		cmpi.w	#$20,d0
		bhs.s	locret_39196
		move.w	$14(a1),d1
		sub.w	$14(a0),d1
		addi.w	#$10,d1
		cmpi.w	#$10,d1
		bhs.s	locret_39196
		tst.b	$2E(a1)
		bne.s	locret_39196
		tst.w	$1C(a1)
		bpl.s	locret_39196
		addq.b	#2,(a4)
		move.b	#1,$2E(a1)
		move.b	#2,$20(a1)
		move.b	#$E,$1E(a1)
		move.b	#7,$1F(a1)
		move.b	#2,$20(a1)
		bset	#2,$2A(a1)
		bclr	#5,$2A(a1)
		move.b	#$28,$26(a1)
		move.w	$14(a1),d1
		sub.w	$32(a0),d1
		move.w	d1,2(a4)
		rts

; =============== S U B R O U T I N E =======================================


sub_39208:

		move.b	$26(a1),d0
		jsr	GetSineCosine.w
		muls.w	$1C(a1),d1
		asr.l	#8,d1
		move.w	d1,$18(a1)
		muls.w	$1C(a1),d0
		asr.l	#8,d0
		move.w	d0,$1A(a1)
		move.b	$26(a1),d0
		jsr	GetSineCosine.w
		muls.w	#$50,d0
		asr.l	#8,d0
		tst.w	$1C(a1)
		bmi.s	loc_39250
		tst.w	d0
		bpl.s	loc_39242
		asr.l	#2,d0

loc_39242:
		cmpi.w	#$1800,$1C(a1)
		bge.s	locret_3925A
		add.w	d0,$1C(a1)
		rts
; ---------------------------------------------------------------------------

loc_39250:
		tst.w	d0
		bmi.s	loc_39256
		asr.l	#2,d0

loc_39256:
		add.w	d0,$1C(a1)

locret_3925A:
		rts
; End of function sub_39208

; ---------------------------------------------------------------------------

loc_3925C:
		move.w	2(a4),d0
		subi.w	#$16,d0
		bcc.s	loc_39282
		tst.w	$1C(a1)
		bpl.s	loc_39280
		move.b	#0,(a4)
		move.b	#0,$2E(a1)
		move.b	#$70,$26(a1)
		bra.w	sub_39208
; ---------------------------------------------------------------------------

loc_39280:
		moveq	#0,d0

loc_39282:
		mulu.w	#$DD,d0
		lsr.w	#8,d0
		jsr	GetSineCosine.w
		muls.w	#-$2800,d0
		swap	d0
		add.w	$30(a0),d0
		move.w	d0,$10(a1)
		move.w	2(a4),d0
		add.w	$32(a0),d0
		move.w	d0,$14(a1)
		move.w	$1A(a1),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,2(a4)
		rts
; ---------------------------------------------------------------------------

loc_392B6:
		move.w	2(a4),d0
		mulu.w	#$AA,d0
		asr.w	#8,d0
		jsr	GetSineCosine.w
		muls.w	#-$2800,d0
		swap	d0
		add.w	$30(a0),d0
		move.w	d0,$10(a1)
		move.w	2(a4),d0
		add.w	$32(a0),d0
		move.w	d0,$14(a1)
		move.w	$1A(a1),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,2(a4)
		rts
; ---------------------------------------------------------------------------

loc_392EE:
		move.w	2(a4),d0
		subi.w	#$C0,d0
		muls.w	#$AA,d0
		asr.l	#8,d0
		add.w	$30(a0),d0
		move.w	d0,$10(a1)
		move.w	2(a4),d0
		add.w	$32(a0),d0
		move.w	d0,$14(a1)
		move.w	$1A(a1),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,2(a4)
		rts
; ---------------------------------------------------------------------------

loc_3931E:
		move.w	2(a4),d0
		subi.w	#$180,d0
		mulu.w	#$AA,d0
		asr.w	#8,d0
		jsr	GetSineCosine.w
		muls.w	#-$2800,d0
		swap	d0
		addi.w	#$100,d0
		add.w	$30(a0),d0
		move.w	d0,$10(a1)
		move.w	2(a4),d0
		add.w	$32(a0),d0
		move.w	d0,$14(a1)
		move.w	$1A(a1),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,2(a4)
		rts
; ---------------------------------------------------------------------------

loc_3935E:
		move.w	2(a4),d0
		subi.w	#$240,d0
		muls.w	#$AA,d0
		asr.l	#8,d0
		add.w	$30(a0),d0
		move.w	d0,$10(a1)
		move.w	2(a4),d0
		add.w	$32(a0),d0
		move.w	d0,$14(a1)
		move.w	$1A(a1),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,2(a4)
		rts
; ---------------------------------------------------------------------------

loc_3938E:
		move.w	2(a4),d0
		subi.w	#$240,d0
		muls.w	#$AA,d0
		asr.l	#8,d0
		add.w	$30(a0),d0
		move.w	d0,$10(a1)
		move.w	2(a4),d0
		add.w	$32(a0),d0
		move.w	d0,$14(a1)
		move.w	$1A(a1),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,2(a4)
		rts
; ---------------------------------------------------------------------------

loc_393BE:
		move.w	2(a4),d0
		subi.w	#$540,d0
		muls.w	#$AA,d0
		asr.l	#8,d0
		add.w	$30(a0),d0
		move.w	d0,$10(a1)
		move.w	2(a4),d0
		add.w	$32(a0),d0
		move.w	d0,$14(a1)
		move.w	$1A(a1),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,2(a4)
		rts
; ---------------------------------------------------------------------------

loc_393EE:
		move.w	#$680,$A(a0)
		move.l	#Map_SonicSnowboard,$C(a0)
		move.w	#prio(2),8(a0)
		move.b	#$20,7(a0)
		move.b	#$20,6(a0)
		move.b	#4,4(a0)
		move.b	#6,$22(a0)
		move.w	#1,$20(a0)
		jsr	Create_New_Sprite3.w
		bne.w	loc_39434
		move.l	#loc_398E0,(a1)
		move.w	a0,$30(a1)

loc_39434:
		move.l	#loc_3943A,(a0)

loc_3943A:
		lea	(Player_1).w,a1
		move.w	$10(a1),$10(a0)
		move.w	$14(a1),$14(a0)
		btst	#1,$2A(a1)
		bne.s	loc_3945E
		move.b	#1,$20(a0)
		move.l	#loc_394A0,(a0)

loc_3945E:
		lea	(Ani_SonicSnowboard).l,a1
		jsr	Animate_Sprite.w
		jsr	(sub_3968E).l
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
Ani_SonicSnowboard:	include "General/Sprites/Sonic/Anim - Sonic Snowboard.asm"

; ---------------------------------------------------------------------------

loc_394A0:

		lea	(Player_1).w,a2
		move.w	$10(a2),$10(a0)
		move.w	$14(a2),$14(a0)
		moveq	#0,d0
		move.b	$26(a2),d0
		addq.b	#5,d0
		lsr.w	#4,d0
		move.b	byte_394F2(pc,d0.w),$20(a0)
		btst	#1,$2A(a2)
		beq.s	loc_39502
		move.b	#0,$20(a0)
		tst.w	$18(a2)
		beq.s	loc_394E2
		cmpi.w	#$1000,$18(a2)
		blt.s	loc_394E2
		move.w	#$1000,$18(a2)

loc_394E2:

		cmpi.w	#-$200,$1A(a2)
		bge.s	loc_39554
		move.w	#-$200,$1A(a2)
		bra.s	loc_39554
; ---------------------------------------------------------------------------
byte_394F2:	dc.b	4,   5,	  2,   1,   1,	 1,   1,   1,	0,   1,	  2,   0,   1,	 2,   0,   4
; ---------------------------------------------------------------------------

loc_39502:
		move.b	(Level_frame_counter+1).w,d0
		andi.b	#$F,d0
		bne.s	loc_39514
		moveq	#-$38,d0
		jsr	Play_Sound_2.w

loc_39514:
		cmpi.w	#$1310,$10(a2)
		blo.s	loc_39554
		moveq	#1,d0
		cmpi.w	#$1330,$10(a2)
		blo.s	loc_39538
		cmpi.w	#$2210,$10(a2)
		blo.s	loc_39554
		cmpi.w	#$2230,$10(a2)
		bhs.s	loc_39554
		moveq	#2,d0

loc_39538:
		cmp.b	$36(a0),d0
		beq.s	loc_39554
		move.b	d0,$36(a0)
		move.b	#3,$2E(a2)
		move.l	#loc_395FE,(a0)
		move.w	#0,$34(a0)

loc_39554:

		lea	(Ani_SonicSnowboard).l,a1
		jsr	Animate_Sprite.w
		cmpi.b	#8,$22(a0)
		bne.s	loc_39578
		cmpi.w	#$1000,$1C(a2)
		blt.s	loc_39578
		subi.w	#8,$1C(a2)
		bra.s	loc_39586
; ---------------------------------------------------------------------------

loc_39578:

		cmpi.w	#$1000,$1C(a2)
		bge.s	loc_39586
		move.w	#$1000,$1C(a2)

loc_39586:

		cmpi.w	#$3880,$10(a2)
		blo.s	loc_395CC
		tst.w	$18(a2)
		bne.s	loc_395CC
		move.l	#loc_39676,(a0)
		bset	#1,$2A(a2)
		move.w	#-$200,$18(a2)
		move.w	#-$400,$1A(a2)
		move.b	#$19,$20(a2)
		move.b	#0,$2E(a2)
		move.w	#$14,(ScrShake_Value).w
		moveq	#$5F,d0
		jsr	Play_Sound_2.w
		move.w	#2,(CPU_Routine).w

loc_395CC:

		btst	#1,$2A(a2)
		bne.s	loc_395F2
		move.b	$22(a0),d0
		cmp.b	$32(a0),d0
		beq.s	loc_395F2
		cmpi.b	#7,d0
		beq.s	loc_395EA
		cmpi.b	#8,d0
		bne.s	loc_395F2

loc_395EA:
		moveq	#$7E,d0
		jsr	Play_Sound_2.w

loc_395F2:

		jsr	(sub_3968E).l
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_395FE:
		lea	(Player_1).w,a2
		move.w	$34(a0),d0
		addq.w	#6,$34(a0)
		lea	(ICZSnowboard_Slope1).l,a1
		cmpi.b	#1,$36(a0)
		beq.s	loc_3961E
		lea	(ICZSnowboard_Slope2).l,a1

loc_3961E:
		lea	(a1,d0.w),a1
		move.w	(a1)+,d0
		move.w	d0,$10(a0)
		move.w	d0,$10(a2)
		move.w	(a1)+,d0
		move.w	d0,$14(a0)
		move.w	d0,$14(a2)
		move.w	(a1)+,d0
		move.b	d0,$22(a0)
		tst.w	(a1)
		bpl.s	loc_39658
		move.b	#$E,$46(a2)
		move.b	#$F,$47(a2)
		move.b	#2,$2E(a2)
		move.l	#loc_394A0,(a0)

loc_39658:
		move.b	$22(a0),d0
		cmp.b	$32(a0),d0
		beq.s	loc_3966A
		moveq	#$7E,d0
		jsr	Play_Sound_2.w

loc_3966A:
		jsr	(sub_3968E).l
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_39676:
		jmp	Delete_Current_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_3967C:
		move.w	#$6400,d4
		move.l	#ArtUnc_Snowboard,d6
		lea	(DPLC_Snowboard).l,a2
		bra.s	loc_3969E
; End of function sub_3967C


; =============== S U B R O U T I N E =======================================


sub_3968E:

		move.w	#-$3000,d4
		move.l	#ArtUnc_SonicSnowboard,d6
		lea	(DPLC_SonicSnowboard).l,a2

loc_3969E:
		moveq	#0,d0
		move.b	$22(a0),d0
		cmp.b	$32(a0),d0
		beq.s	locret_396E2
		move.b	d0,$32(a0)
		add.w	d0,d0
		adda.w	(a2,d0.w),a2
		move.w	(a2)+,d5
		subq.w	#1,d5
		bmi.s	locret_396E2

loc_396BA:
		moveq	#0,d1
		move.w	(a2)+,d1
		move.w	d1,d3
		lsr.w	#8,d3
		andi.w	#$F0,d3
		addi.w	#$10,d3
		andi.w	#$FFF,d1
		lsl.l	#5,d1
		add.l	d6,d1
		move.w	d4,d2
		add.w	d3,d4
		add.w	d3,d4
		jsr	Add_To_DMA_Queue.w
		dbf	d5,loc_396BA

locret_396E2:

		rts
; End of function sub_3968E

; ---------------------------------------------------------------------------

Obj_LevelIntroICZ1:
		lea	(Player_1).w,a1
		move.w	#$800,$18(a1)
		move.w	#$280,$1A(a1)
		move.w	#$800,$1C(a1)
		bset	#1,$2A(a1)
		move.b	#0,$40(a1)
		move.b	#$E,$1E(a1)
		move.b	#7,$1F(a1)
		move.b	#2,$20(a1)
		bset	#2,$2A(a1)
		move.b	#1,(Ctrl_1_locked).w
		move.w	#0,(Ctrl_1_logical).w
		move.w	#0,(Ctrl_1).w
		move.b	#0,$22(a1)
		move.b	#3,$2E(a1)
		move.b	#$1E,$24(a0)
		move.l	#Map_Snowboard,$C(a0)
		move.w	#$320,$A(a0)
		move.w	#prio(1),8(a0)
		move.b	#$20,7(a0)
		move.b	#$20,6(a0)
		move.b	#4,4(a0)
		move.b	#8,$22(a0)
		move.w	#$C0,$10(a0)
		move.w	#$170,$14(a0)
		move.l	#loc_39780,(a0)

loc_39780:
		subq.b	#1,$24(a0)
		bne.s	loc_39796
		lea	(Player_1).w,a2
		move.b	#0,$2E(a2)
		move.l	#loc_39796,(a0)

loc_39796:

		move.b	#1,(Ctrl_1_locked).w
		move.w	#0,(Ctrl_1_logical).w
		lea	(Player_1).w,a2
		cmpi.w	#$C0,$10(a2)
		blo.s	loc_397C6
		move.w	#-$600,$1A(a0)
		move.w	#$400,$18(a2)
		move.w	#-$800,$1A(a2)
		move.l	#loc_397D2,(a0)

loc_397C6:

		jsr	(sub_3967C).l
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_397D2:
		lea	(Player_1).w,a2
		move.w	$10(a2),$10(a0)
		subq.b	#1,$24(a0)
		bpl.s	loc_397FA
		move.b	#1,$24(a0)
		addq.b	#1,$22(a0)
		cmpi.b	#9,$22(a0)
		blo.s	loc_397FA
		move.b	#1,$22(a0)

loc_397FA:

		cmpi.w	#$184,$10(a2)
		blo.s	loc_3983E
		move.b	#0,$22(a2)
		move.b	#2,$2E(a2)
		jsr	Create_New_Sprite3.w
		bne.w	loc_39836
		move.l	#loc_393EE,(a1)
		move.w	$10(a2),$10(a1)
		move.w	$14(a2),$14(a1)
		move.w	$18(a2),$18(a1)
		move.w	$1A(a2),$1A(a1)

loc_39836:
		move.l	#loc_3984E,(a0)
		rts
; ---------------------------------------------------------------------------

loc_3983E:
		jsr	MoveSprite2.w
		addi.w	#$28,$1A(a0)
		bra.w	loc_397C6
; ---------------------------------------------------------------------------

loc_3984E:
		lea	(Player_1).w,a2
		move.w	$10(a2),$10(a0)
		move.w	$14(a2),$14(a0)
		move.w	(Ctrl_1).w,d0
		andi.w	#-$F10,d0
		move.w	d0,(Ctrl_1_logical).w
		tst.b	$2E(a2)
		bne.s	locret_398A4
		move.b	#0,(Ctrl_1_locked).w
		move.l	#loc_398A6,(a0)
		addi.w	#$14,$14(a0)
		move.w	#-$200,$18(a0)
		move.w	#-$400,$1A(a0)
		move.b	#-$7C,4(a0)
		move.b	#1,$22(a0)
		move.b	#1,$24(a0)
		bra.w	loc_397C6
; ---------------------------------------------------------------------------

locret_398A4:
		rts
; ---------------------------------------------------------------------------

loc_398A6:
		tst.b	4(a0)
		bmi.s	loc_398B2
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_398B2:
		subq.b	#1,$24(a0)
		bpl.s	loc_398D0
		move.b	#1,$24(a0)
		addq.b	#1,$22(a0)
		cmpi.b	#9,$22(a0)
		blo.s	loc_398D0
		move.b	#1,$22(a0)

loc_398D0:

		jsr	MoveSprite2.w
		addi.w	#$28,$1A(a0)
		bra.w	loc_397C6
; ---------------------------------------------------------------------------

loc_398E0:
		move.l	#loc_398E6,(a0)

loc_398E6:
		movea.w	$30(a0),a3
		lea	(Player_1).w,a2
		tst.b	$2E(a2)
		bne.s	loc_398FA
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_398FA:
		btst	#1,$2A(a2)
		bne.s	locret_39922
		bsr.s	sub_39924
		bsr.s	sub_39924
		cmpi.b	#7,$22(a3)
		beq.s	loc_39916
		cmpi.b	#8,$22(a3)
		bne.s	locret_39922

loc_39916:
		bsr.s	sub_39924
		bsr.s	sub_39924
		bsr.s	sub_39924
		bsr.s	sub_39924
		bsr.s	sub_39924
		bsr.s	sub_39924

locret_39922:

		rts

; =============== S U B R O U T I N E =======================================


sub_39924:

		jsr	Create_New_Sprite3.w
		bne.w	locret_399A4
		move.l	#loc_399A6,(a1)
		move.w	#$6B8,$A(a1)
		move.l	#Map_SnowboardDust,$C(a1)
		move.w	#prio(2),8(a1)
		move.b	#4,7(a1)
		move.b	#4,6(a1)
		move.b	#-$7C,4(a1)
		move.w	#1,$20(a1)
		move.w	$10(a2),$10(a1)
		move.w	$14(a2),$14(a1)
		addi.w	#$14,$14(a1)
		jsr	Random_Number.w
		move.l	d0,d1
		andi.w	#$1FF,d0
		neg.w	d0
		subi.w	#$200,$1A(a1)
		move.w	d0,$1A(a1)
		move.w	#-$100,$18(a1)
		move.l	d1,d0
		andi.w	#$F,d0
		sub.w	d0,$10(a1)
		swap	d0
		andi.w	#$F,d0
		sub.w	d0,$14(a1)

locret_399A4:
		rts
; End of function sub_39924

; ---------------------------------------------------------------------------

loc_399A6:
		tst.b	4(a0)
		bpl.s	loc_399CA
		jsr	MoveSprite2.w
		lea	(Ani_SnowboardDust).l,a1
		jsr	Animate_Sprite.w
		tst.b	5(a0)
		bne.s	loc_399CA
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_399CA:

		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------
Ani_SnowboardDust:	include "General/Sprites/Snowboard/Anim - Snowboard Dust.asm"

Map_SnowboardDust:	include "General/Sprites/Snowboard/Map - Snowboard Dust.asm"

ArtNem_SnowboardDust:	binclude "General/Sprites/Snowboard/Snowboard Dust.kosm"
	even


; ---------------------------------------------------------------------------

Obj_LevelIntro_PlayerLaunchFromGround:
		move.l	#loc_39A80,(a0)
		move.b	#1,(Ctrl_1_locked).w
		move.b	#1,(Ctrl_2_locked).w
		moveq	#0,d0
		move.w	d0,(Ctrl_1_logical).w
		move.w	d0,(Ctrl_1).w
		move.w	d0,(Ctrl_2_logical).w
		move.w	d0,(Ctrl_2).w
		move.b	#$1E,$24(a0)
		lea	(Player_1).w,a1
		bsr.s	sub_39A78
		lea	(Player_2).w,a1
		tst.l	(a1)
		beq.s	locret_39A7E

sub_39A78:
		move.b	#3,$2E(a1)

locret_39A7E:
		rts

; ---------------------------------------------------------------------------

loc_39A80:
		move.b	#1,(Ctrl_1_locked).w
		move.b	#1,(Ctrl_2_locked).w
		move.w	#0,(Ctrl_1_logical).w
		move.w	#0,(Ctrl_2_logical).w
		subq.b	#1,$24(a0)
		beq.s	loc_39AA0
		rts
; ---------------------------------------------------------------------------

loc_39AA0:
		move.l	#loc_39AD2,(a0)
		lea	(Player_1).w,a1
		bsr.s	sub_39AB4
		lea	(Player_2).w,a1
		tst.l	(a1)
		beq.s	locret_39AD0

; =============== S U B R O U T I N E =======================================


sub_39AB4:
		move.w	#-$B00,$1A(a1)
		bset	#1,$2A(a1)
		clr.b	$40(a1)
		move.b	#$10,$20(a1)
		move.b	#1,$2E(a1)

locret_39AD0:
		rts
; End of function sub_39AB4

; ---------------------------------------------------------------------------

loc_39AD2:
		move.b	#1,(Ctrl_1_locked).w
		move.b	#1,(Ctrl_2_locked).w
		move.w	#0,(Ctrl_1_logical).w
		move.w	#0,(Ctrl_2_logical).w
		lea	(Player_1).w,a2
		cmpi.w	#$5C0,$14(a2)
		bhs.s	loc_39B3C
		move.b	#0,$2E(a2)
		move.w	#$400,(Dust+$20).w
		move.w	#$5C0,(Dust+$14).w
		lea	(Player_2).w,a2
		tst.l	(a2)
		beq.s	loc_39B22
		move.b	#0,$2E(a2)
		move.w	#$400,(Dust_P2+$20).w
		move.w	#$5C0,(Dust_P2+$14).w

loc_39B22:
		moveq	#-$7E,d0
		jsr	Play_Sound_2.w
		move.b	#0,(Ctrl_1_locked).w
		move.b	#0,(Ctrl_2_locked).w
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_39B3C:
		bsr.s	sub_39B46
		lea	(Player_2).w,a2
		tst.l	(a2)
		beq.s	locret_39B64

; =============== S U B R O U T I N E =======================================


sub_39B46:
		move.w	$18(a2),d0
		ext.l	d0
		lsl.l	#8,d0
		add.l	d0,$10(a2)
		move.w	$1A(a2),d0
		addi.w	#$38,$1A(a2)
		ext.l	d0
		lsl.l	#8,d0
		add.l	d0,$14(a2)

locret_39B64:
		rts
; End of function sub_39B46

; ---------------------------------------------------------------------------

Obj_LevelIntroICZ1Tails:
		lea	(Player_1).w,a1
		move.w	#$800,$18(a1)
		move.w	#$480,$1A(a1)
		move.w	#$800,$1C(a1)
		bset	#1,$2A(a1)
		move.b	#0,$40(a1)
		move.b	#$E,$1E(a1)
		move.b	#7,$1F(a1)
		move.b	#2,$20(a1)
		bset	#2,$2A(a1)
		move.b	#3,$2E(a1)
		move.b	#1,(Ctrl_1_locked).w
		move.w	#0,(Ctrl_1_logical).w
		move.w	#0,(Ctrl_1).w
		move.b	#$1E,$24(a0)
		move.l	#loc_39BC4,(a0)

loc_39BC4:
		move.b	#1,(Ctrl_1_locked).w
		move.w	#0,(Ctrl_1_logical).w
		move.w	#0,(Ctrl_2_logical).w
		subq.b	#1,$24(a0)
		beq.s	loc_39BDE
		rts
; ---------------------------------------------------------------------------

loc_39BDE:
		lea	(Player_1).w,a2
		move.b	#0,$2E(a2)
		move.l	#loc_39BEE,(a0)

loc_39BEE:
		move.b	#1,(Ctrl_1_locked).w
		move.w	#0,(Ctrl_1_logical).w
		lea	(Player_1).w,a2
		cmpi.w	#$38F0,$10(a2)
		blo.s	locret_39C4E
		bset	#1,$2A(a2)
		move.w	#-$200,$18(a2)
		move.w	#-$400,$1A(a2)
		move.b	#$19,$20(a2)
		move.b	#0,$2E(a2)
		move.b	#0,(Ctrl_1_locked).w
		move.w	#$14,(ScrShake_Value).w
		move.w	#-$100,d0
		move.w	d0,(Camera_min_Y_pos).w
		move.w	d0,(Camera_target_min_Y_pos).w
		move.w	d0,(Camera_min_Y_pos_P2).w
		moveq	#$5F,d0
		jsr	Play_Sound_2.w
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

locret_39C4E:
		rts
; ---------------------------------------------------------------------------

Obj_LRZCollapsingBridge:

		move.l	#loc_39CA8,(a0)
		move.b	#4,4(a0)
		move.w	#prio(1),8(a0)
		move.l	#Map_LRZCollapsingBridge,$C(a0)
		move.w	#-$3F2D,$A(a0)
		move.b	$2C(a0),d0
		move.b	d0,d1
		andi.w	#$F,d0
		lsl.w	#4,d0
		addq.w	#8,d0
		move.b	d0,$30(a0)
		andi.w	#$F0,d1
		lsr.w	#2,d1
		lea	byte_39CA4(pc,d1.w),a1
		move.b	(a1)+,7(a0)
		move.b	(a1)+,6(a0)
		move.b	(a1)+,$22(a0)
		move.b	(a1)+,$2C(a0)
		move.b	#$1C,$1E(a0)
		bra.s	loc_39CA8
; ---------------------------------------------------------------------------
byte_39CA4:	dc.b $40
		dc.b $20
		dc.b 8
		dc.b 0
; ---------------------------------------------------------------------------

loc_39CA8:

		tst.b	$32(a0)
		beq.s	loc_39CBC
		tst.b	$30(a0)
		bne.s	loc_39CB8
		bra.w	loc_39D84
; ---------------------------------------------------------------------------

loc_39CB8:
		subq.b	#1,$30(a0)

loc_39CBC:
		move.b	$2A(a0),d0
		andi.b	#$18,d0
		beq.s	loc_39CCC
		move.b	#1,$32(a0)

loc_39CCC:
		moveq	#0,d1
		move.b	7(a0),d1
		moveq	#0,d3
		move.b	$1E(a0),d3
		move.w	$10(a0),d4
		jsr	SolidObjectTop.w
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_39CE8:
		moveq	#0,d1
		move.b	7(a0),d1
		moveq	#0,d3
		move.b	$1E(a0),d3
		move.w	$10(a0),d4
		jsr	SolidObjectTop.w
		subq.b	#1,$30(a0)
		bne.s	locret_39D3C
		lea	(Player_1).w,a1
		moveq	#3,d6
		bsr.s	sub_39D1A
		lea	(Player_2).w,a1
		moveq	#4,d6
		bsr.s	sub_39D1A
		jmp	Delete_Current_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_39D1A:

		btst	d6,$2A(a0)
		beq.s	locret_39D3C
		bclr	d6,$2A(a0)
		bclr	#3,$2A(a1)
		bclr	#5,$2A(a1)
		bset	#1,$2A(a1)
		move.b	#1,$21(a1)

locret_39D3C:

		rts
; End of function sub_39D1A

; ---------------------------------------------------------------------------

loc_39D3E:
		tst.b	$30(a0)
		beq.s	loc_39D4E
		subq.b	#1,$30(a0)
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_39D4E:
		subq.b	#1,$24(a0)
		bpl.s	loc_39D6C
		move.b	#7,$24(a0)
		move.b	$22(a0),d0
		addq.b	#1,d0
		andi.b	#3,d0
		add.b	$34(a0),d0
		move.b	d0,$22(a0)

loc_39D6C:
		jsr	MoveSprite.w
		tst.b	4(a0)
		bpl.s	loc_39D7E
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_39D7E:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_39D84:
		move.b	#$2A,$30(a0)
		lea	(word_39E20).l,a3
		move.l	#loc_39CE8,(a0)
		move.l	#loc_39D3E,d4
		move.w	(a3)+,d1
		move.b	4(a0),d5
		move.w	$10(a0),d2
		move.w	$14(a0),d3

loc_39DAA:
		jsr	Create_New_Sprite3.w
		bne.s	loc_39E08
		move.l	d4,(a1)
		move.l	$C(a0),$C(a1)
		move.b	d5,4(a1)
		move.b	(a3)+,d0
		ext.w	d0
		add.w	d2,d0
		move.w	d0,$10(a1)
		move.b	(a3)+,d0
		ext.w	d0
		add.w	d3,d0
		move.w	d0,$14(a1)
		move.b	(a3)+,$22(a1)
		move.w	$A(a0),$A(a1)
		ori.w	#-$8000,$A(a1)
		move.w	#prio(1),8(a1)
		move.b	#$20,7(a1)
		move.b	#$20,7(a1)
		move.b	(a3)+,$30(a1)
		move.b	$22(a1),d0
		andi.b	#-4,d0
		move.b	d0,$34(a1)
		dbf	d1,loc_39DAA

loc_39E08:
		move.w	respawn_addr(a0),d0
		beq.s	loc_39E18
		movea.w	d0,a1
		bclr	#7,(a1)
		clr.w	respawn_addr(a0)

loc_39E18:
		moveq	#$59,d0
		jmp	Play_Sound_2.w
; ---------------------------------------------------------------------------
word_39E20:	dc.w $15
		dc.b  $E0,   4,	  7, $24
		dc.b	0,   8,	  6, $20
		dc.b  $20,   4,	  6, $22
		dc.b  $D0, $F0,	  7, $2C
		dc.b  $F0, $F0,	  6, $28
		dc.b  $10, $F0,	  7, $2A
		dc.b  $30, $F0,	  6, $26
		dc.b  $E0, $E8,	  0, $1E
		dc.b  $20, $E8,	  1, $1C
		dc.b  $C8,   0,	  0, $1A
		dc.b  $38,   0,	  1, $18
		dc.b  $D0, $10,	  0, $12
		dc.b  $30, $10,	  1, $10
		dc.b  $E8, $10,	  0,  $E
		dc.b  $18, $10,	  1,  $C
		dc.b  $F6, $14,	  0,  $A
		dc.b   $A, $14,	  1,   8
		dc.b	0, $18,	  0,   6
		dc.b  $E0, $18,	  0,   2
		dc.b  $20, $18,	  1,   4
		dc.b  $D4,  $C,	  4, $16
		dc.b  $2C,  $C,	  5, $14
Map_LRZCollapsingBridge:include "Levels/LRZ/Misc Object Data/Map - Collapsing Bridge.asm"

; ---------------------------------------------------------------------------

Obj_6F_1:
		moveq	#0,d0
		move.b	$2C(a0),d0
		bpl.s	loc_39F48
		andi.w	#$7F,d0
		lsl.w	#3,d0
		move.w	d0,$2C(a0)
		move.l	#loc_3A0B0,(a0)
		bra.w	loc_3A0B0
; ---------------------------------------------------------------------------

loc_39F48:
		lsl.w	#3,d0
		move.w	d0,$2C(a0)
		move.l	#loc_39F58,(a0)

loc_39F58:
		move.w	$2C(a0),d4
		move.w	d4,d5
		add.w	d5,d5
		lea	(Player_1).w,a1
		lea	(__u_F7B0).w,a2
		moveq	#3,d6
		bsr.s	sub_39F7E
		lea	(Player_2).w,a1
		lea	(__u_F7B0+$1).w,a2
		moveq	#4,d6			; NAT: FUCK SANIC TEEM
		bsr.s	sub_39F7E
		jmp	Delete_Sprite_If_Not_In_Range.w

; =============== S U B R O U T I N E =======================================


sub_39F7E:
		btst	d6,$2A(a0)
		bne.w	loc_3A01A
		cmpi.b	#6,5(a1)		; NAT: Check ded
		bhs.w	loc_3A018

		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		add.w	d4,d0
		cmp.w	d5,d0
		bhs.w	locret_3A018
		move.w	$14(a1),d0
		sub.w	$14(a0),d0
		addi.w	#$50,d0
		cmpi.w	#$18,d0
		bhs.s	loc_39FAE
		move.b	#8,2(a2)

loc_39FAE:
		tst.b	2(a2)
		beq.s	loc_39FBA
		subq.b	#1,2(a2)
		rts
; ---------------------------------------------------------------------------

loc_39FBA:
		move.w	$14(a0),d0
		addi.w	#$3C,d0
		move.w	$14(a1),d2
		move.b	$1E(a1),d1
		ext.w	d1
		add.w	d2,d1
		addq.w	#4,d1
		sub.w	d1,d0
		bhi.s	locret_3A018
		cmpi.w	#-$10,d0
		blo.s	locret_3A018
		tst.b	(Debug_On).w
		bne.s	locret_3A018
		add.w	d0,d2
		addq.w	#3,d2
		move.w	d2,$14(a1)
		jsr	RideObject_SetRide.w
		move.b	#-$80,$2D(a1)
		move.w	#1,$20(a1)
		clr.b	2(a2)
		clr.b	(a2)
		tst.w	$1C(a1)
		bne.s	locret_3A018
		move.w	#1,$1C(a1)


locret_3A018:
		rts
; ---------------------------------------------------------------------------

loc_3A018:
		cmpi.b	#8,5(a1)
		blo.s	locret_3A018
		cmp.w	#Player_1,a1		; check if this is p1
		beq.s	.sonic			; if no, bra
		move.b	-1(a2),(a2)		; copy angle from p1
		rts

.sonic		move.b	1(a2),(a2)		; copy angle from p2
		rts
; ---------------------------------------------------------------------------

loc_3A01A:
		btst	#1,$2A(a1)
		bne.s	loc_3A054
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		add.w	d4,d0
		cmp.w	d5,d0
		blo.s	loc_3A06E

loc_3A030:

		bclr	#3,$2A(a1)
		bclr	d6,$2A(a0)
		move.b	#0,$30(a1)
		move.b	#4,$31(a1)
		bset	#1,$2A(a1)
		move.b	#0,$2D(a1)
		clr.b	(a2)		; NAT: make sure there is no snapping
		rts
; ---------------------------------------------------------------------------

loc_3A054:
		move.b	(a2),d0
		addi.b	#$20,d0
		cmpi.b	#$40,d0
		bhs.s	loc_3A066
		asr	$1A(a1)
		bra.s	loc_3A030
; ---------------------------------------------------------------------------

loc_3A066:
		clr.w	$1A(a1)
		bra.s	loc_3A030
; ---------------------------------------------------------------------------

loc_3A06E:
		btst	#3,$2A(a1)
		beq.s	locret_3A018
		move.b	(a2),d0
		jsr	GetSineCosine.w
		muls.w	#$2800,d1
		swap	d1
		move.w	$14(a0),d2
		add.w	d1,d2
		moveq	#0,d1
		move.b	$1E(a1),d1
		subi.w	#$13,d1
		sub.w	d1,d2
		move.w	d2,$14(a1)
		move.b	(a2),d0
		move.b	d0,$27(a1)
		addq.b	#4,(a2)
		tst.w	$1C(a1)
		bne.s	locret_3A0AE
		move.w	#1,$1C(a1)

locret_3A0AE:
		rts
; End of function sub_39F7E

; ---------------------------------------------------------------------------

loc_3A0B0:
		lea	(Player_1).w,a1
		lea	(__u_F7B0).w,a2
		moveq	#3,d6
		bsr.s	sub_3A0D6
		lea	(Player_2).w,a1
		lea	(__u_F7B0+$1).w,a2
		moveq	#4,d6			; NAT: FUCK SANIC TEEM
		bsr.s	sub_3A0D6
		jmp	Delete_Sprite_If_Not_In_Range.w

; =============== S U B R O U T I N E =======================================

locret_3A18C:
		rts

sub_3A0D6:
		move.w	$2C(a0),d4
		move.w	d4,d5
		add.w	d5,d5

		btst	d6,$2A(a0)
		bne.w	loc_3A18E
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		addi.w	#$80,d0
		cmpi.w	#$100,d0
		bhs.s	locret_3A18C
		move.w	$14(a1),d1
		sub.w	$14(a0),d1
		add.w	d4,d1
		cmp.w	d5,d1
		bhs.s	locret_3A18C
		cmpi.b	#6,5(a1)
		bhs.s	locret_3A18C
		tst.b	(Debug_On).w
		bne.s	locret_3A18C
		tst.b	$2E(a1)
		bmi.s	locret_3A18C
		cmpi.w	#$20,d0
		blo.s	loc_3A126
		cmpi.w	#$E0,d0
		blo.s	locret_3A18C

loc_3A126:
		bsr.w	sub_33C34
		move.b	#-$40,$26(a1)
		bclr	#0,4(a1)
		bclr	#0,$2A(a1)
		move.b	#0,(a2)
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		bcc.s	loc_3A14E
		move.b	#-$80,(a2)

loc_3A14E:
		move.w	$1A(a1),$1C(a1)
		neg.w	$1C(a1)
		move.w	$14(a1),d0
		sub.w	$14(a0),d0
		bcc.s	loc_3A16C
		move.b	#$40,$26(a1)
		neg.w	$1C(a1)

loc_3A16C:
		bset	#6,$2E(a1)
		bset	#1,$2E(a1)
		move.w	#1,$20(a1)
		move.b	#0,$27(a1)
		move.b	#0,2(a2)
; ---------------------------------------------------------------------------

loc_3A18E:

		move.w	$14(a1),d1
		sub.w	$14(a0),d1
		add.w	d4,d1
		cmp.w	d5,d1
		blo.s	loc_3A1C6
		move.b	#0,$2E(a1)
		bclr	#3,$2A(a1)
		bclr	d6,$2A(a0)
		move.b	#1,$27(a1)
		move.b	#0,$30(a1)
		move.b	#4,$31(a1)
		bset	#1,$2A(a1)
		rts
; ---------------------------------------------------------------------------

loc_3A1C6:
		btst	#3,$2A(a1)
		beq.w	locret_3A18C
		bclr	#1,4(a1)
		tst.w	$1A(a1)
		bmi.s	loc_3A1E0
		bset	#1,4(a1)

loc_3A1E0:
		move.b	(a2),d0
		jsr	GetSineCosine.w
		muls.w	#$6800,d1
		swap	d1
		move.w	$10(a0),d2
		add.w	d1,d2
		moveq	#0,d1
		move.b	$1E(a1),d1
		subi.w	#$13,d1
		sub.w	d1,d2
		move.w	d2,$10(a1)
		moveq	#0,d2
		move.b	(a2),d2
		addq.b	#4,(a2)
		divu.w	#$B,d2
		move.b	RawAni_3A220(pc,d2.w),$22(a1)
		moveq	#0,d0
		move.b	$22(a1),d0
		jmp	(Tails_Carry_LoadPLC).l
; End of function sub_3A0D6

; ---------------------------------------------------------------------------
RawAni_3A220:	dc.b  $6D, $6D, $6E, $6E, $6F, $6F, $70, $70, $71, $71, $72, $72, $73, $73, $74, $74, $75, $75, $76, $76
		dc.b  $77, $77, $6C, $6C, $6D, $6D
; ---------------------------------------------------------------------------

Obj_70_1_FBZ_Twisting_Cylinders:
		moveq	#0,d0
		move.b	$2C(a0),d0
		lsl.w	#8,d0
		move.w	d0,$40(a0)
		lsl.w	#2,d0
		move.w	d0,$42(a0)
		move.l	#loc_3A252,(a0)

loc_3A252:
		lea	(Player_1).w,a1
		lea	$30(a0),a2
		moveq	#3,d6
		bsr.s	sub_3A270
		lea	(Player_2).w,a1
		lea	$38(a0),a2
		moveq	#4,d6		; Fucking Sunak teem faggots, same issue as CNZ cylinders
		bsr.s	sub_3A270
		jmp	Delete_Sprite_If_Not_In_Range.w

; =============== S U B R O U T I N E =======================================


sub_3A270:

		btst	d6,$2A(a0)
		bne.w	loc_3A314
		btst	#1,$2A(a1)
		bne.w	locret_3A312
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		tst.w	$18(a1)
		bmi.s	loc_3A2A2
		cmpi.w	#-$B0,d0
		bgt.w	locret_3A312
		cmpi.w	#-$C0,d0
		blt.s	locret_3A312
		moveq	#0,d2
		bra.s	loc_3A2B0
; ---------------------------------------------------------------------------

loc_3A2A2:
		cmpi.w	#$B0,d0
		blt.s	locret_3A312
		cmpi.w	#$C0,d0
		bgt.s	locret_3A312
		moveq	#1,d2

loc_3A2B0:
		move.w	$14(a1),d1
		sub.w	$14(a0),d1
		addi.w	#$10,d1
		cmpi.w	#$20,d1
		bhs.s	locret_3A312
		move.w	$1C(a1),d0
		bpl.s	loc_3A2CA
		neg.w	d0

loc_3A2CA:
		cmpi.w	#$400,d0
		blo.s	locret_3A312
		tst.b	$2E(a1)
		bne.s	locret_3A312
		moveq	#0,d3
		tst.b	$2C(a0)
		beq.s	loc_3A2F0
		btst	#0,$2A(a0)
		bne.s	loc_3A2EC
		tst.w	d2
		bne.s	locret_3A312
		bra.s	loc_3A2F0
; ---------------------------------------------------------------------------

loc_3A2EC:
		tst.w	d2
		beq.s	locret_3A312

loc_3A2F0:

		move.l	#0,(a2)
		move.b	d2,4(a2)
		move.w	d3,6(a2)
		bset	#1,$2A(a1)
		jsr	RideObject_SetRide.w
		move.b	#$42,$2E(a1)
		bra.s	loc_3A314
; ---------------------------------------------------------------------------

locret_3A312:

		rts
; ---------------------------------------------------------------------------

loc_3A314:

		move.w	$1C(a1),d0
		bpl.s	loc_3A31C
		neg.w	d0

loc_3A31C:
		cmpi.w	#$400,d0
		blo.s	loc_3A36E
		btst	#1,$2A(a1)
		bne.s	loc_3A36E
		tst.l	(a2)
		bne.w	loc_3A480
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		addi.w	#$C0,d0
		bmi.s	loc_3A344
		cmpi.w	#$180,d0
		blo.s	loc_3A3B4

loc_3A344:
		bclr	#2,$2A(a1)
		move.b	$44(a1),$1E(a1)
		move.b	$45(a1),$1F(a1)
		move.w	#1,$20(a1)
		move.b	#0,$2E(a1)
		bclr	#3,$2A(a1)
		bclr	d6,$2A(a0)
		rts
; ---------------------------------------------------------------------------

loc_3A36E:

		asr	$18(a1)
		bset	#1,$2A(a1)
		bclr	#2,$2A(a1)
		move.b	$44(a1),$1E(a1)
		move.b	$45(a1),$1F(a1)
		move.w	#1,$20(a1)
		move.b	#0,$2E(a1)
		bclr	#3,$2A(a1)
		bclr	d6,$2A(a0)
		move.b	#-$40,$27(a1)
		move.b	#0,$30(a1)
		move.b	#4,$31(a1)
		rts
; ---------------------------------------------------------------------------

loc_3A3B4:
		btst	#3,$2A(a1)
		beq.w	locret_3A312
		tst.b	$2C(a0)
		beq.s	loc_3A426
		tst.b	4(a2)
		bne.s	loc_3A3F2
		cmpi.w	#$C0,d0
		blo.s	loc_3A426
		tst.w	$1C(a1)
		bmi.s	loc_3A426
		subi.w	#$C0,d0
		move.w	d0,(a2)
		move.w	#0,2(a2)
		bset	#0,4(a1)
		bset	#1,4(a1)
		bra.w	loc_3A480
; ---------------------------------------------------------------------------

loc_3A3F2:
		cmpi.w	#$C0,d0
		bhs.s	loc_3A426
		tst.w	$1C(a1)
		bpl.s	loc_3A426
		subi.w	#$C0,d0
		add.w	$42(a0),d0
		move.w	d0,(a2)
		move.w	#0,2(a2)
		move.w	$40(a0),d0
		neg.w	d0
		move.w	d0,6(a2)
		bclr	#0,4(a1)
		bclr	#1,4(a1)
		bra.s	loc_3A480
; ---------------------------------------------------------------------------

loc_3A426:

		lsr.w	#5,d0
		andi.w	#$F,d0
		move.b	byte_3A468(pc,d0.w),d1
		move.b	RawAni_3A474(pc,d0.w),$22(a1)
		ext.w	d1
		move.w	$14(a0),d2
		add.w	6(a2),d2
		add.w	d1,d2
		moveq	#0,d1
		move.b	$1E(a1),d1
		subi.w	#$13,d1
		sub.w	d1,d2
		move.w	d2,$14(a1)
		moveq	#0,d0
		move.b	d0,$20(a1)
		move.b	$22(a1),d0
		move.l	a2,-(sp)
		jsr	(Tails_Carry_LoadPLC).l
		movea.l	(sp)+,a2
		rts
; ---------------------------------------------------------------------------
byte_3A468:	dc.b	4,   0,	  0,   0,   0,	 0,   0,   0,	0,   0,	  0,   4
RawAni_3A474:
		dc.b  $49, $54,	$53, $52, $53, $52, $53, $52, $53, $52,	$54, $49
; ---------------------------------------------------------------------------

loc_3A480:

		move.w	$1C(a1),d0
		ext.l	d0
		lsl.l	#8,d0
		add.l	d0,(a2)
		bpl.s	loc_3A4B2
		move.l	#0,(a2)
		move.b	#0,4(a2)
		move.w	$40(a0),d0
		neg.w	d0
		move.w	d0,6(a2)
		bset	#0,4(a1)
		bclr	#1,4(a1)
		bra.w	loc_3A314
; ---------------------------------------------------------------------------

loc_3A4B2:
		move.w	(a2),d0
		cmp.w	$42(a0),d0
		blo.s	loc_3A4DC
		move.l	#0,(a2)
		move.b	#1,4(a2)
		move.w	$40(a0),6(a2)
		bclr	#0,4(a1)
		bclr	#1,4(a1)
		bra.w	loc_3A314
; ---------------------------------------------------------------------------

loc_3A4DC:
		move.w	$10(a1),d2
		move.w	(a2),d0
		lsr.w	#1,d0
		jsr	GetSineCosine.w
		muls.w	#$6800,d0
		swap	d0
		add.w	$10(a0),d0
		move.w	d0,$10(a1)
		sub.w	d2,d0
		asl.w	#8,d0
		move.w	d0,$18(a1)
		move.w	$14(a1),d2
		move.w	(a2),d0
		lsr.w	#2,d0
		add.w	6(a2),d0
		add.w	$14(a0),d0
		move.w	d0,$14(a1)
		sub.w	d2,d0
		asl.w	#8,d0
		move.w	d0,$1A(a1)
		moveq	#0,d0
		move.w	(a2),d0
		lsr.w	#1,d0
		andi.w	#$FF,d0
		tst.w	$1C(a1)
		bpl.s	loc_3A52E
		neg.b	d0

loc_3A52E:
		divu.w	#$B,d0
		move.b	RawAni_3A548(pc,d0.w),$22(a1)
		moveq	#0,d0
		move.b	d0,$20(a1)
		move.b	$22(a1),d0
		jmp	(Tails_Carry_LoadPLC).l
; End of function sub_3A270

; ---------------------------------------------------------------------------
RawAni_3A548:	dc.b  $70, $70, $71, $71, $72, $72, $73, $73, $74, $74, $75, $75, $76, $76, $77, $77, $6C, $6C, $6D, $6D
		dc.b  $6E, $6E, $6F, $6F, $70, $70, $71, $71, $72, $72, $73, $73, $74, $74, $75, $75
off_3A56C:	dc.l loc_3A620
		dc.l loc_3A63A
		dc.l loc_3A646
		dc.l loc_3A664
		dc.l loc_3A692
		dc.l Obj_FBZFlPl_SineLR	; $50	; NAT: Extra modes
; ---------------------------------------------------------------------------

Obj_FBZFloatingPlatform:

		move.l	#Map_FBZFloatingPlatform,$C(a0)
		move.w	#$2383,$A(a0)
		ori.b	#4,4(a0)
		move.b	#$20,7(a0)
		move.b	#$18,6(a0)
		move.w	#prio(5),8(a0)
		move.b	#-$74,$28(a0)
		move.w	$10(a0),$44(a0)
		move.w	$14(a0),$46(a0)
		move.b	$2C(a0),d0
		move.b	d0,d1
		andi.w	#$70,d0
		lsr.w	#2,d0
		move.l	off_3A56C(pc,d0.w),$40(a0)
		andi.w	#$F,d1
		lsl.w	#4,d1
		move.b	d1,$26(a0)
		move.l	#loc_3A5DA,(a0)

loc_3A5DA:
		move.w	$10(a0),-(sp)
		movea.l	$40(a0),a1
		jsr	(a1)
		move.w	#$2B,d1
		move.w	#$C,d2
		move.w	#-$D,d3
		move.w	(sp)+,d4
		jsr	SolidObjectFull_Offset.w
		subq.b	#1,$24(a0)
		bpl.s	loc_3A616
		move.b	#1,$24(a0)
		addq.b	#1,$22(a0)
		cmpi.b	#3,$22(a0)
		blo.s	loc_3A616
		move.b	#0,$22(a0)

loc_3A616:

		move.w	$44(a0),d0
		jmp	loc_1B666.w
; ---------------------------------------------------------------------------

loc_3A620:
		move.b	$27(a0),d0
		addq.b	#1,$27(a0)
		jsr	GetSineCosine.w
		asr.w	#5,d0
		add.w	$46(a0),d0
		move.w	d0,$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_3A63A:
		moveq	#0,d0
		move.b	(OscNumbers+$A).w,d0
		subi.w	#$20,d0
		bra.s	loc_3A650
; ---------------------------------------------------------------------------

loc_3A646:
		moveq	#0,d0
		move.b	(OscNumbers+$1E).w,d0
		subi.w	#$40,d0

loc_3A650:
		btst	#0,$2A(a0)
		beq.s	loc_3A65A
		neg.w	d0

loc_3A65A:
		add.w	$46(a0),d0
		move.w	d0,$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_3A664:
		move.b	(Level_frame_counter+1).w,d0
		btst	#0,$2A(a0)
		beq.s	loc_3A672
		neg.b	d0

loc_3A672:
		add.b	$26(a0),d0
		jsr	GetSineCosine.w
		asr.w	#2,d0
		asr.w	#2,d1
		add.w	$44(a0),d0
		move.w	d0,$10(a0)
		add.w	$46(a0),d1
		move.w	d1,$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_3A692:
		move.b	$2A(a0),d0
		andi.b	#$18,d0
		beq.s	loc_3A620
		move.l	#loc_3A6A4,$40(a0)

loc_3A6A4:
		move.b	$27(a0),d0
		andi.b	#$7F,d0
		bne.w	loc_3A620
		move.l	#loc_3A6D0,$40(a0)
		move.b	#0,$27(a0)
		move.b	$2C(a0),d0
		andi.w	#$F,d0
		lsl.w	#1,d0
		addi.w	#$28,d0
		move.w	d0,$36(a0)

loc_3A6D0:
		move.w	$36(a0),d2
		subq.w	#1,d2
		tst.b	$30(a0)
		bne.s	loc_3A6F8
		move.w	$34(a0),d1
		addq.w	#4,d1
		move.w	d1,$34(a0)
		add.w	d1,$32(a0)
		cmp.b	$32(a0),d2
		bhi.s	loc_3A712
		move.b	#1,$30(a0)
		bra.s	loc_3A712
; ---------------------------------------------------------------------------

loc_3A6F8:
		move.w	$34(a0),d1
		subq.w	#4,d1
		move.w	d1,$34(a0)
		add.w	d1,$32(a0)
		cmp.b	$32(a0),d2
		bls.s	loc_3A712
		move.b	#0,$30(a0)

loc_3A712:

		moveq	#0,d0
		move.w	$32(a0),d0
		lsr.w	#6,d0
		btst	#0,$2A(a0)
		beq.s	loc_3A724
		neg.w	d0

loc_3A724:
		add.w	$46(a0),d0
		move.w	d0,$14(a0)
		tst.w	$34(a0)
		bne.s	locret_3A740
		move.w	$14(a0),$46(a0)
		move.l	#loc_3A620,$40(a0)

locret_3A740:
		rts
; --------------------------------------------------------------------------

Obj_FBZFlPl_SineLR:	; NAT: Extra modes
		move.b	$27(a0),d0
		addq.b	#1,$27(a0)
		jsr	GetSineCosine.w
		asr.w	#3,d0
		add.w	$44(a0),d0
		move.w	d0,$10(a0)
		rts
; --------------------------------------------------------------------------

Map_FBZFloatingPlatform:include "Levels/FBZ/Misc Object Data/Map - Floating Platform.asm"

; ---------------------------------------------------------------------------

Obj_FBZ_ChainLink:

		move.b	$2C(a0),d0
		bpl.s	loc_3A7E6
		andi.w	#$3F,d0
		lsl.w	#4,d0
		move.w	d0,$3E(a0)
		move.l	#loc_3AA5A,(a0)
		bra.w	loc_3AA5A
; ---------------------------------------------------------------------------

loc_3A7E6:
		move.b	#4,4(a0)
		move.b	#$10,7(a0)
		move.w	#prio(1),8(a0)
		move.b	#-$80,6(a0)
		move.w	$14(a0),$46(a0)
		move.l	#Map_FBZChainLink,$C(a0)
		move.w	#$4379,$A(a0)
		move.b	$2C(a0),d0
		andi.w	#$7F,d0
		lsl.w	#3,d0
		move.w	d0,$2E(a0)
		move.w	#2,$3C(a0)
		move.b	$2C(a0),d0
		bpl.s	loc_3A846
		move.w	$2E(a0),d0
		move.w	d0,$3A(a0)
		move.b	#1,$38(a0)
		add.w	d0,$14(a0)
		lsr.w	#4,d0
		addq.w	#1,d0
		move.b	d0,$22(a0)

loc_3A846:
		move.l	#loc_3A84C,(a0)

loc_3A84C:

		tst.b	$38(a0)
		beq.s	loc_3A85A
		tst.w	$30(a0)
		bne.s	loc_3A870
		bra.s	loc_3A860
; ---------------------------------------------------------------------------

loc_3A85A:
		tst.w	$30(a0)
		beq.s	loc_3A870

loc_3A860:
		move.w	$3A(a0),d2
		cmp.w	$2E(a0),d2
		beq.s	loc_3A894
		add.w	$3C(a0),d2
		bra.s	loc_3A87A
; ---------------------------------------------------------------------------

loc_3A870:
		move.w	$3A(a0),d2
		beq.s	loc_3A894
		sub.w	$3C(a0),d2

loc_3A87A:
		move.w	d2,$3A(a0)
		move.w	$46(a0),d0
		add.w	d2,d0
		move.w	d0,$14(a0)
		move.w	d2,d0
		beq.s	loc_3A890
		lsr.w	#4,d0
		addq.w	#1,d0

loc_3A890:
		move.b	d0,$22(a0)

loc_3A894:
		lea	$30(a0),a2
		lea	(Player_1).w,a1
		move.w	(Ctrl_1_logical).w,d0
		bsr.w	sub_3A8B8
		lea	(Player_2).w,a1
		addq.w	#1,a2
		move.w	(Ctrl_2_logical).w,d0
		bsr.w	sub_3A8B8
		jmp	Sprite_OnScreen_Test.w

; =============== S U B R O U T I N E =======================================

sub_3A8B8:
		tst.b	(a2)
		beq.w	loc_3A9A6
		tst.b	4(a1)
		bpl.w	loc_3A954
		tst.b	(Debug_On).w
		bne.w	loc_3A954
		cmpi.b	#4,5(a1)
		bhs.s	loc_3A954
		andi.b	#$70,d0
		beq.w	loc_3A96E
		clr.b	$2E(a1)
		clr.b	(a2)
		move.b	#$12,2(a2)
		andi.w	#$F00,d0
		beq.w	loc_3A8F8
		move.b	#$3C,2(a2)

loc_3A8F8:
		btst	#$A,d0
		beq.s	loc_3A904
		move.w	#-$200,$18(a1)

loc_3A904:
		btst	#$B,d0
		beq.s	loc_3A910
		move.w	#$200,$18(a1)

loc_3A910:
		move.w	#-$380,$1A(a1)
		bset	#1,$2A(a1)
		move.b	#1,$40(a1)
		move.b	#$E,$1E(a1)
		move.b	#7,$1F(a1)
		move.b	#2,$20(a1)
		bset	#2,$2A(a1)
		bclr	#4,$2A(a1)
		move.b	#0,$27(a1)
		bclr	#3,$2A(a1)
		move.w	#0,$42(a1)
		rts
; ---------------------------------------------------------------------------

loc_3A954:
		clr.b	$2E(a1)
		clr.b	(a2)
		move.b	#$3C,2(a2)
		bclr	#3,$2A(a1)
		move.w	#0,$42(a1)
		rts
; ---------------------------------------------------------------------------

loc_3A96E:
		btst	#$A,d0
		beq.s	loc_3A97A
		bset	#0,$2A(a1)

loc_3A97A:
		btst	#$B,d0
		beq.s	loc_3A986
		bclr	#0,$2A(a1)

loc_3A986:
		move.b	$2A(a1),d0
		andi.b	#1,d0
		andi.b	#-2,4(a1)
		or.b	d0,4(a1)
		move.w	$14(a0),$14(a1)
		addi.w	#$9C,$14(a1)

locret_3AA58:
		rts
; ---------------------------------------------------------------------------

loc_3A9A6:
		tst.b	2(a2)
		beq.s	loc_3A9B4
		subq.b	#1,2(a2)
		bne.w	locret_3AA58

loc_3A9B4:
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		addi.w	#$10,d0
		cmpi.w	#$20,d0
		bhs.s	locret_3AA58
		move.w	$14(a1),d1
		sub.w	$14(a0),d1
		subi.w	#$90,d1
		cmpi.w	#$18,d1
		bhs.s	locret_3AA58
		tst.b	$2E(a1)
		bmi.s	locret_3AA58
		cmpi.b	#4,5(a1)
		bhs.s	locret_3AA58
		tst.b	(Debug_On).w
		bne.s	locret_3AA58
		btst	#3,$2A(a1)
		beq.s	loc_3AA18
		movea.w	$42(a1),a3
		cmpi.l	#loc_3AA5A,(a3)
		bne.s	loc_3AA18
		move.w	a2,d0
		sub.w	a0,d0
		adda.w	d0,a3
		tst.b	4(a3)
		bne.w	locret_3AA58
		clr.b	(a3)
		move.b	#$3C,2(a3)

loc_3AA18:
		move.w	a0,$42(a1)
		bset	#3,$2A(a1)
		clr.w	$18(a1)
		clr.w	$1A(a1)
		clr.w	$1C(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		addi.w	#$9C,$14(a1)
		move.b	#$14,$20(a1)
		move.b	#1,$2E(a1)
		move.b	#1,(a2)
		moveq	#$4A,d0
		jmp	Play_Sound_2.w
; ---------------------------------------------------------------------------

loc_3AA5A:
		lea	$30(a0),a2
		lea	(Player_1).w,a1
		move.w	(Ctrl_1_logical).w,d0
		bsr.w	sub_3AA7E
		lea	(Player_2).w,a1
		addq.w	#1,a2
		move.w	(Ctrl_2_logical).w,d0
		bsr.w	sub_3AA7E
		jmp	Delete_Sprite_If_Not_In_Range.w

; =============== S U B R O U T I N E =======================================


sub_3AA7E:

		tst.b	(a2)
		beq.w	loc_3AC86
		tst.b	4(a1)
		bpl.w	loc_3AB24
		tst.b	(Debug_On).w
		bne.w	loc_3AB24
		cmpi.b	#4,5(a1)
		bhs.w	loc_3AB24
		andi.b	#$70,d0
		beq.w	loc_3AB3E
		clr.b	$2E(a1)
		clr.b	(a2)
		move.b	#$12,2(a2)
		andi.w	#$F00,d0
		beq.w	loc_3AAC0
		move.b	#$3C,2(a2)

loc_3AAC0:
		btst	#$A,d0
		beq.s	loc_3AACC
		move.w	#-$200,$18(a1)

loc_3AACC:
		btst	#$B,d0
		beq.s	loc_3AAD8
		move.w	#$200,$18(a1)

loc_3AAD8:
		move.w	#-$380,$1A(a1)
		bset	#1,$2A(a1)
		move.b	#1,$40(a1)
		move.b	#$E,$1E(a1)
		move.b	#7,$1F(a1)
		move.b	#2,$20(a1)
		move.b	#-$6A,$22(a1)
		bset	#2,$2A(a1)
		bclr	#4,$2A(a1)
		move.b	#0,$27(a1)
		bclr	#3,$2A(a1)
		move.w	#0,$42(a1)
		bra.w	loc_3AC26
; ---------------------------------------------------------------------------

loc_3AB24:

		clr.b	$2E(a1)
		clr.b	(a2)
		move.b	#$3C,2(a2)
		bclr	#3,$2A(a1)
		move.w	#0,$42(a1)
		rts
; ---------------------------------------------------------------------------

loc_3AB3E:
		tst.b	4(a2)
		bne.s	loc_3ABBE

loc_3AB44:
		move.w	$3E(a0),d2
		subi.w	#$10,d2
		btst	#$A,d0
		beq.s	loc_3AB70
		bset	#0,$2A(a1)
		move.w	$10(a1),d1
		sub.w	$10(a0),d1
		add.w	d2,d1
		beq.s	loc_3AB70
		move.b	#4,4(a2)
		move.b	#1,2(a2)

loc_3AB70:

		btst	#$B,d0
		beq.s	loc_3AB9A
		bclr	#0,$2A(a1)
		move.w	$10(a1),d1
		sub.w	$10(a0),d1
		add.w	d2,d1
		add.w	d2,d2
		cmp.w	d2,d1
		beq.w	loc_3AB9A
		move.b	#4,4(a2)
		move.b	#0,2(a2)

loc_3AB9A:

		move.b	$2A(a1),d0
		andi.b	#1,d0
		andi.b	#-4,4(a1)
		or.b	d0,4(a1)
		move.w	$14(a0),$14(a1)
		addi.w	#$12,$14(a1)
		tst.b	4(a2)
		beq.s	loc_3AC26

loc_3ABBE:
		subq.b	#1,6(a2)
		bpl.s	loc_3AC26
		move.b	#7,6(a2)
		move.b	#0,$20(a1)
		moveq	#0,d1
		move.b	4(a2),d1
		cmpi.b	#2,d1
		bne.s	loc_3ABE4
		moveq	#$4A,d0
		jsr	Play_Sound_2.w

loc_3ABE4:
		subq.w	#1,d1
		bne.s	loc_3ABEE
		move.b	#$14,$20(a1)

loc_3ABEE:
		add.b	8(a2),d1
		move.b	RawAni_3AC38(pc,d1.w),$22(a1)
		move.b	byte_3AC40(pc,d1.w),d1
		ext.w	d1
		tst.b	2(a2)
		beq.s	loc_3AC06
		neg.w	d1

loc_3AC06:
		add.w	d1,$10(a1)
		subq.b	#1,4(a2)
		bne.s	loc_3AC26
		bsr.s	sub_3AC48
		move.b	#0,6(a2)
		bchg	#2,8(a2)
		andi.w	#$C00,d0
		bne.w	loc_3AB44

loc_3AC26:

		moveq	#0,d0
		move.b	$22(a1),d0
		move.l	a2,-(sp)
		jsr	(Tails_Carry_LoadPLC).l
		movea.l	(sp)+,a2
		rts
; End of function sub_3AA7E

; ---------------------------------------------------------------------------
RawAni_3AC38:	dc.b  $91, $81,	$80, $85, $91, $84, $83, $82
byte_3AC40:	dc.b	4,  $C,	 $A,   6,   4,	$C,  $C,   4

; =============== S U B R O U T I N E =======================================


sub_3AC48:
		btst	#6,$2C(a0)
		beq.s	locret_3AC84
		move.w	$3E(a0),d2
		subi.w	#$10,d2
		btst	#0,$2A(a0)
		beq.s	loc_3AC70
		move.w	$10(a1),d1
		sub.w	$10(a0),d1
		add.w	d2,d1
		bne.s	locret_3AC84
		bra.w	loc_3AB24
; ---------------------------------------------------------------------------

loc_3AC70:
		move.w	$10(a1),d1
		sub.w	$10(a0),d1
		add.w	d2,d1
		add.w	d2,d2
		cmp.w	d2,d1
		bne.s	locret_3AC84
		bra.w	loc_3AB24
; ---------------------------------------------------------------------------

locret_3AC84:

		rts
; End of function sub_3AC48

; ---------------------------------------------------------------------------

loc_3AC86:
		tst.b	2(a2)
		beq.s	loc_3AC94
		subq.b	#1,2(a2)
		bne.w	locret_3AD88

loc_3AC94:
		move.w	$3E(a0),d2
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		add.w	d2,d0
		add.w	d2,d2
		cmp.w	d2,d0
		bhs.w	locret_3AD88
		move.w	$14(a1),d1
		sub.w	$14(a0),d1
		cmpi.w	#$18,d1
		bhs.w	locret_3AD88
		tst.b	$2E(a1)
		bmi.w	locret_3AD88
		cmpi.b	#4,5(a1)
		bhs.w	locret_3AD88
		tst.b	(Debug_On).w
		bne.w	locret_3AD88
		btst	#3,$2A(a1)
		beq.s	loc_3ACEA
		movea.w	$42(a1),a3
		cmpi.l	#loc_3A84C,(a3)
		beq.w	locret_3AD88

loc_3ACEA:
		andi.w	#-$20,d0
		btst	#6,$2C(a0)
		beq.s	loc_3AD10
		btst	#0,$2A(a0)
		beq.s	loc_3AD06
		tst.w	d0
		beq.w	locret_3AD88
		bra.s	loc_3AD10
; ---------------------------------------------------------------------------

loc_3AD06:
		subi.w	#$20,d2
		cmp.w	d2,d0
		beq.w	locret_3AD88

loc_3AD10:

		addi.w	#$10,d0
		sub.w	$3E(a0),d0
		add.w	$10(a0),d0
		move.w	d0,$10(a1)
		move.w	a0,$42(a1)
		bset	#3,$2A(a1)
		clr.w	$18(a1)
		clr.w	$1A(a1)
		clr.w	$1C(a1)
		move.w	$14(a0),$14(a1)
		addi.w	#$12,$14(a1)
		move.b	#$14,$20(a1)
		move.b	#3,$2E(a1)
		andi.b	#-3,4(a1)
		move.b	#1,(a2)
		move.b	#0,2(a2)
		move.b	#0,4(a2)
		move.b	#0,6(a2)
		move.b	#-$6F,$22(a1)
		moveq	#0,d0
		move.b	$22(a1),d0
		move.l	a2,-(sp)
		jsr	(Tails_Carry_LoadPLC).l
		movea.l	(sp)+,a2
		moveq	#$4A,d0

loc_3AD82:

		jsr	Play_Sound_2.w

locret_3AD88:

		rts
; ---------------------------------------------------------------------------
Map_FBZChainLink:include "Levels/FBZ/Misc Object Data/Map - Chain Link.asm"

; ---------------------------------------------------------------------------

Obj_FBZMagneticSpikeBall:

		move.l	#Map_FBZMagneticSpikeBall,$C(a0)
		move.w	#$2443,$A(a0)
		ori.b	#4,4(a0)
		move.w	#prio(5),8(a0)
		tst.b	$2C(a0)
		beq.s	loc_3B16E
		bmi.s	loc_3B122
		move.b	#$10,7(a0)
		move.b	#$10,6(a0)
		move.b	#-$66,$28(a0)
		move.l	#loc_1B662,(a0)
		jmp	loc_1B662.w
; ---------------------------------------------------------------------------

loc_3B122:
		btst	#0,$2C(a0)
		bne.s	loc_3B146
		ori.w	#-$8000,$A(a0)
		move.b	#$30,7(a0)
		move.b	#8,6(a0)
		move.l	#loc_3B1FC,(a0)
		bra.w	loc_3B1FC
; ---------------------------------------------------------------------------

loc_3B146:
		move.w	#-$5BBE,$A(a0)

loc_3B14C:
		move.b	#$24,7(a0)
		move.b	#4,6(a0)
		move.b	#4,$22(a0)
		move.w	#prio(4),8(a0)
		move.l	#loc_3B238,(a0)
		bra.w	loc_3B238
; ---------------------------------------------------------------------------

loc_3B16E:
		move.b	#$10,7(a0)
		move.b	#$10,6(a0)
		move.b	#$A,$1E(a0)
		move.b	#-$66,$28(a0)
		move.l	#loc_3B18C,(a0)

loc_3B18C:

		jsr	MoveSprite2.w
		addi.w	#$58,$1A(a0)
		jsr	ObjCheckFloorDist.w
		tst.w	d1
		bpl.s	loc_3B1B2
		add.w	d1,$14(a0)
		move.w	#0,$1A(a0)
		move.l	#loc_3B1B2,(a0)

loc_3B1B2:

		tst.b	(__u_F7C1).w
		beq.s	loc_3B1BE
		move.l	#loc_3B1C4,(a0)

loc_3B1BE:
		jmp	loc_1B662.w
; ---------------------------------------------------------------------------

loc_3B1C4:
		jsr	MoveSprite2.w
		subi.w	#$18,$1A(a0)
		jsr	ObjCheckCeilingDist.w
		tst.w	d1
		bpl.s	loc_3B1EA
		sub.w	d1,$14(a0)
		move.w	#0,$1A(a0)
		move.l	#loc_3B1EA,(a0)

loc_3B1EA:

		tst.b	(__u_F7C1).w
		bne.s	loc_3B1F6
		move.l	#loc_3B18C,(a0)

loc_3B1F6:
		jmp	loc_1B662.w
; ---------------------------------------------------------------------------

loc_3B1FC:

		tst.b	(__u_F7C1).w
		beq.s	loc_3B232
		addq.b	#1,$22(a0)
		cmpi.b	#5,$22(a0)
		blo.s	loc_3B214
		move.b	#1,$22(a0)

loc_3B214:
		move.b	(Level_frame_counter+1).w,d0
		andi.b	#$F,d0
		bne.s	loc_3B22C
		tst.b	4(a0)
		bpl.s	loc_3B22C
		moveq	#-$27,d0
		jsr	Play_Sound_2.w

loc_3B22C:

		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_3B232:
		jmp	Delete_Sprite_If_Not_In_Range.w
; ---------------------------------------------------------------------------

loc_3B238:

		tst.b	(__u_F7C1).w
		beq.s	loc_3B256
		addq.b	#1,$22(a0)
		cmpi.b	#7,$22(a0)
		blo.s	loc_3B250
		move.b	#5,$22(a0)

loc_3B250:
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_3B256:
		jmp	Delete_Sprite_If_Not_In_Range.w
; ---------------------------------------------------------------------------
Map_FBZMagneticSpikeBall:include "Levels/FBZ/Misc Object Data/Map - Magnetic Spike Ball.asm"

; ---------------------------------------------------------------------------

Obj_FBZMagneticPlatform:

		move.l	#Map_FBZMagneticPlatform,$C(a0)
		move.w	#$2443,$A(a0)
		ori.b	#4,4(a0)
		move.b	#$18,7(a0)
		move.b	#$10,6(a0)
		move.w	#prio(5),8(a0)
		move.b	#$F,$1E(a0)
		move.w	$14(a0),$46(a0)
		move.b	#-$73,$28(a0)
		moveq	#0,d1
		move.b	$2C(a0),d1
		lsl.w	#4,d1
		subi.w	#$20,d1
		move.w	d1,$2E(a0)
		jsr	Create_New_Sprite3.w
		bne.w	loc_3B3BA
		move.l	#loc_3B482,(a1)
		move.l	$C(a0),$C(a1)

loc_3B354:
		move.w	$A(a0),$A(a1)
		move.b	4(a0),4(a1)
		move.b	#$10,7(a1)
		move.b	#-$80,6(a1)
		move.w	#prio(4),8(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		subi.w	#$70,$14(a1)
		moveq	#8,d0
		bset	#6,4(a1)
		move.w	d0,$16(a1)
		move.w	$14(a0),d1
		addi.w	#$C,d1
		lea	$18(a1),a2
		move.w	$16(a1),d0
		subq.w	#1,d0

loc_3B3A2:
		move.w	$10(a0),(a2)+
		move.w	d1,(a2)+
		move.w	#1,(a2)+
		dbf	d0,loc_3B3A2
		move.w	#3,$1C(a1)
		move.w	a1,$3C(a0)

loc_3B3BA:
		move.l	#loc_3B3C0,(a0)

loc_3B3C0:

		jsr	MoveSprite2.w
		addi.w	#$58,$1A(a0)
		jsr	ObjCheckFloorDist.w
		tst.w	d1
		bpl.s	loc_3B3EC
		add.w	d1,$14(a0)
		move.w	#0,$1A(a0)
		move.b	#$10,$1E(a0)
		move.l	#loc_3B3EC,(a0)

loc_3B3EC:

		tst.b	(__u_F7C1).w
		beq.s	loc_3B3F8
		move.l	#loc_3B3FA,(a0)

loc_3B3F8:
		bra.s	loc_3B462
; ---------------------------------------------------------------------------

loc_3B3FA:
		jsr	MoveSprite2.w
		subi.w	#$18,$1A(a0)
		move.w	$46(a0),d0
		sub.w	$14(a0),d0
		cmp.w	$2E(a0),d0
		blo.s	loc_3B436
		move.w	$46(a0),d0
		sub.w	$2E(a0),d0
		move.w	d0,$14(a0)
		move.w	#0,$1A(a0)
		move.l	#loc_3B450,(a0)
		moveq	#$7C,d0
		jsr	Play_Sound_2.w
		bra.s	loc_3B450
; ---------------------------------------------------------------------------

loc_3B436:
		jsr	ObjCheckCeilingDist.w
		tst.w	d1
		bpl.s	loc_3B450
		sub.w	d1,$14(a0)
		move.w	#0,$1A(a0)
		move.l	#loc_3B450,(a0)

loc_3B450:


		tst.b	(__u_F7C1).w
		bne.s	loc_3B462
		move.b	#$F,$1E(a0)
		move.l	#loc_3B3C0,(a0)

loc_3B462:

		bsr.w	sub_3B488
		move.w	#$23,d1
		move.w	#8,d2
		move.w	#-9,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull_Offset.w
		jmp	loc_1B662.w
; ---------------------------------------------------------------------------

loc_3B482:
		jmp	Sprite_OnScreen_Test.w

; =============== S U B R O U T I N E =======================================


sub_3B488:
		movea.w	$3C(a0),a1
		lea	$20(a1),a2
		move.w	$14(a0),d2
		addi.w	#$18,d2
		move.w	$46(a0),d0
		sub.w	$14(a0),d0
		move.w	d0,d6
		addi.w	#$18,d6
		lsr.w	#5,d6
		addq.w	#1,d6
		cmpi.w	#8,d6
		blo.s	loc_3B4B2
		moveq	#8,d6

loc_3B4B2:
		move.w	d6,$16(a1)
		subq.w	#2,d6
		bcs.s	locret_3B4DC

loc_3B4BA:
		move.w	d2,(a2)+
		move.w	#2,(a2)+
		addq.w	#2,a2
		addi.w	#$20,d2
		dbf	d6,loc_3B4BA
		subq.w	#8,d0
		andi.w	#$1F,d0
		cmpi.w	#$10,d0
		bhs.s	locret_3B4DC
		move.w	#1,-4(a2)

locret_3B4DC:

		rts
; End of function sub_3B488

; ---------------------------------------------------------------------------
Map_FBZMagneticPlatform:include "Levels/FBZ/Misc Object Data/Map - Magnetic Platform.asm"

; ---------------------------------------------------------------------------

Obj_FBZSnakePlatform:
		moveq	#$19,d2
		moveq	#2,d1

loc_3B538:
		jsr	Create_New_Sprite3.w
		bne.w	loc_3B556
		move.l	#Obj_FBZSnakePlatformMain,(a1)
		move.b	d2,$24(a1)
		addi.b	#$18,d2
		move.b	$2C(a0),$2C(a1)

loc_3B556:
		dbf	d1,loc_3B538
		move.b	#1,$24(a0)
		move.l	#Obj_FBZSnakePlatformMain,(a0)

Obj_FBZSnakePlatformMain:

		move.l	#Map_FBZSnakePlatform,$C(a0)
		move.w	#$246B,$A(a0)
		ori.b	#4,4(a0)
		move.b	#$C,7(a0)
		move.b	#$C,6(a0)
		move.w	#prio(5),8(a0)
		bset	#7,$2A(a0)
		move.b	$2C(a0),d0
		andi.w	#$F,d0
		add.w	d0,d0
		add.w	d0,d0
		lea	(FBZSnakePlatform_Data).l,a2
		movea.l	(a2,d0.w),a2
		move.w	(a2)+,d1
		move.w	(a2)+,d0
		move.w	d0,$34(a0)
		sub.w	d1,d0
		andi.w	#-$80,d0
		addi.w	#$300,d0
		move.w	d0,$36(a0)
		move.l	a2,$30(a0)
		bsr.w	FBZSnake_ChangeDir
		move.l	#Obj_FBZSnakePlatformWait,(a0)

Obj_FBZSnakePlatformWait:
		subq.b	#1,$24(a0)
		bne.s	loc_3B60E
		move.l	#Obj_FBZSnakePlatformMove,(a0)

Obj_FBZSnakePlatformMove:

		move.w	$10(a0),-(sp)
		jsr	MoveSprite2.w
		movea.l	$30(a0),a2
		move.w	(a2)+,d0
		cmp.w	$10(a0),d0
		bne.s	loc_3B5FA
		move.w	(a2)+,d0
		cmp.w	$14(a0),d0
		bne.s	loc_3B5FA
		bsr.w	FBZSnake_ChangeDir

loc_3B5FA:

		move.w	(sp)+,d4

loc_3B5FC:
		move.w	#$17,d1
		move.w	#$C,d2
		move.w	#$D,d3
		jsr	SolidObjectFull.w

loc_3B60E:
		move.w	$34(a0),d0
		andi.w	#-$80,d0
		sub.w	(Camera_X_pos_coarse_back).w,d0
		cmp.w	$36(a0),d0
		bhi.w	loc_3B628
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_3B628:
		move.w	respawn_addr(a0),d0
		beq.s	loc_3B634
		movea.w	d0,a2
		bclr	#7,(a2)

loc_3B634:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

Obj_FBZSnakePlatformStopRestart:
		move.w	$10(a0),d4
		subq.w	#1,$38(a0)
		bne.s	loc_3B5FC
		move.l	#Obj_FBZSnakePlatformMove,(a0)
		bra.s	Obj_FBZSnakePlatformMove

; =============== S U B R O U T I N E =======================================


FBZSnake_ChangeDir:

		movea.l	$30(a0),a2
		move.w	(a2)+,d4
		move.w	d4,$10(a0)
		move.w	(a2)+,d5
		move.w	d5,$14(a0)
		move.l	a2,$30(a0)
		move.w	(a2)+,d4
		bmi.s	loc_3B6A0
		move.w	(a2)+,d5
		move.w	#$140,d0
		cmp.w	$10(a0),d4
		beq.s	loc_3B680
		bcc.s	loc_3B674
		neg.w	d0

loc_3B674:
		move.w	d0,$18(a0)
		move.w	#0,$1A(a0)
		rts
; ---------------------------------------------------------------------------

loc_3B680:
		cmp.w	$14(a0),d5
		beq.s	loc_3B696
		bcc.s	loc_3B68A
		neg.w	d0

loc_3B68A:
		move.w	#0,$18(a0)
		move.w	d0,$1A(a0)
		rts
; ---------------------------------------------------------------------------

loc_3B696:
		move.w	d0,$18(a0)
		move.w	d0,$1A(a0)
		rts
; ---------------------------------------------------------------------------

loc_3B6A0:
		move.w	(a2),d0
		beq.s	loc_3B6AE
		move.w	d0,$38(a0)
		move.l	#Obj_FBZSnakePlatformStopRestart,(a0)

loc_3B6AE:
		move.b	$2C(a0),d0
		andi.w	#$F,d0
		add.w	d0,d0
		add.w	d0,d0
		lea	(FBZSnakePlatform_Data).l,a2
		movea.l	(a2,d0.w),a2
		addq.w	#4,a2
		move.l	a2,$30(a0)
		bra.w	FBZSnake_ChangeDir
; End of function FBZSnake_ChangeDir

; ---------------------------------------------------------------------------
Map_FBZSnakePlatform:	include "Levels/FBZ/Misc Object Data/Map - Snake Platform.asm"

byte_3B6D8:	dc.b $18
byte_3B6D9:	dc.b $10
		dc.b $10
		dc.b 8
		dc.b $18
		dc.b $10
; ---------------------------------------------------------------------------

Obj_FBZBentPipe:

		move.l	#Map_FBZBentPipe,$C(a0)
		move.w	#$246B,$A(a0)
		ori.b	#4,4(a0)
		move.w	#prio(4),8(a0)
		move.b	$2C(a0),d0
		move.b	d0,$22(a0)
		andi.w	#3,d0

loc_3B704:
		add.w	d0,d0
		move.b	byte_3B6D8(pc,d0.w),7(a0)
		move.b	byte_3B6D9(pc,d0.w),6(a0)
		move.l	#loc_3B718,(a0)

loc_3B718:
		moveq	#0,d1
		move.b	7(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------
Map_FBZBentPipe:include "Levels/FBZ/Misc Object Data/Map - Bent Pipe.asm"

; ---------------------------------------------------------------------------

Obj_FBZRotatingPlatform:

		move.b	$2C(a0),d0
		andi.w	#$F,d0
		lsl.w	#3,d0
		lea	byte_3B780(pc,d0.w),a2
		moveq	#0,d1
		move.b	(a2)+,d1
		move.b	(a2)+,d2
		movea.l	a0,a1
		bra.w	loc_3B802
; ---------------------------------------------------------------------------
byte_3B780:	dc.b	5,   0,	$5C, $44, $2C, $D4, $BC, $A4
		dc.b	5,   1,	$5C, $44, $2C, $D4, $BC, $A4
		dc.b	5, $21,	$5C, $44, $2C, $D4, $BC, $A4
		dc.b	3,   0,	$44, $2C, $D4, $BC,   0,   0
		dc.b	3,   1,	$44, $2C, $D4, $BC,   0,   0
		dc.b	3,   9,	$44, $2C, $D4, $BC,   0,   0
		dc.b	1,   0,	$2C, $D4,   0,	 0,   0,   0
		dc.b	1,   1,	$2C, $D4,   0,	 0,   0,   0
		dc.b	1,   3,	$2C, $D4,   0,	 0,   0,   0
		dc.b	2,   0,	$5C, $44, $2C,	 0,   0,   0
		dc.b	2,   1,	$5C, $44, $2C,	 0,   0,   0
		dc.b	1,   0,	$44, $2C,   0,	 0,   0,   0
		dc.b	1,   1,	$44, $2C,   0,	 0,   0,   0
		dc.b	0,   0,	$2C,   0,   0,	 0,   0,   0
		dc.b	0,   1,	$2C,   0,   0,	 0,   0,   0
; ---------------------------------------------------------------------------

loc_3B7F8:
		jsr	Create_New_Sprite3.w
		bne.w	loc_3B866

loc_3B802:
		move.l	#loc_3B86A,(a1)
		move.l	#Map_FBZRotatingPlatform,$C(a1)
		move.w	#$246B,$A(a1)
		ori.b	#4,4(a1)
		move.b	#$C,7(a1)
		move.b	#$C,6(a1)
		move.w	#prio(5),8(a1)
		move.b	$2A(a0),$2A(a1)
		bset	#7,$2A(a1)
		move.w	$10(a0),$44(a1)
		move.w	$14(a0),$46(a1)
		move.b	(a2)+,$30(a1)
		lsr.b	#1,d2
		bcc.s	loc_3B866
		move.l	#loc_3B8C2,(a1)
		move.w	#$2443,$A(a1)
		move.b	#1,$22(a1)
		move.b	#-$7A,$28(a1)

loc_3B866:

		dbf	d1,loc_3B7F8

loc_3B86A:
		move.w	$10(a0),-(sp)
		move.b	$26(a0),d0
		jsr	GetSineCosine.w
		move.w	$30(a0),d2
		muls.w	d2,d1
		muls.w	d2,d0
		swap	d1
		swap	d0
		add.w	$44(a0),d1
		add.w	$46(a0),d0
		move.w	d1,$10(a0)
		move.w	d0,$14(a0)
		move.w	#$17,d1
		move.w	#$C,d2
		move.w	#$D,d3
		move.w	(sp)+,d4
		jsr	SolidObjectFull.w
		moveq	#1,d1
		btst	#0,$2A(a0)
		beq.s	loc_3B8B4
		neg.w	d1

loc_3B8B4:
		add.b	d1,$26(a0)
		move.w	$44(a0),d0
		jmp	Sprite_OnScreen_Test2.w
; ---------------------------------------------------------------------------

loc_3B8C2:
		move.w	$10(a0),-(sp)
		move.b	$26(a0),d0
		jsr	GetSineCosine.w
		move.w	$30(a0),d2
		muls.w	d2,d1
		muls.w	d2,d0
		swap	d1
		swap	d0
		add.w	$44(a0),d1
		add.w	$46(a0),d0
		move.w	d1,$10(a0)
		move.w	d0,$14(a0)
		move.w	#$17,d1
		move.w	#$C,d2
		move.w	#$D,d3
		move.w	(sp)+,d4
		jsr	SolidObjectFull.w
		moveq	#1,d1
		btst	#0,$2A(a0)
		beq.s	loc_3B90C
		neg.w	d1

loc_3B90C:
		add.b	d1,$26(a0)
		move.w	$44(a0),d0
		jmp	loc_1B666.w
; ---------------------------------------------------------------------------
Map_FBZRotatingPlatform:include "Levels/FBZ/Misc Object Data/Map - Rotating Platform.asm"

; ---------------------------------------------------------------------------

Obj_FBZDEZPlayerLauncher:

		move.l	#Map_FBZDEZPlayerLauncher,$C(a0)
		move.w	#$23B5,$A(a0)
		cmpi.b	#$B,(Current_zone).w
		bne.s	loc_3B956
		move.w	#$22FC,$A(a0)
		move.b	#1,$22(a0)

loc_3B956:
		ori.b	#4,4(a0)
		move.b	#$10,7(a0)
		move.b	#$10,6(a0)
		move.w	#prio(5),8(a0)
		move.w	$10(a0),$44(a0)
		move.l	#loc_3B97A,(a0)

loc_3B97A:

		tst.b	$30(a0)
		beq.s	loc_3B9AC
		subq.b	#1,$30(a0)
		bne.s	loc_3B998
		move.w	#0,$18(a0)
		move.l	#loc_3BA4A,(a0)
		move.b	#1,$32(a0)

loc_3B998:
		jsr	MoveSprite2.w
		tst.b	$31(a0)
		beq.s	loc_3B9AC
		subq.b	#1,$31(a0)
		asl	$18(a0)

loc_3B9AC:

		lea	(Player_1).w,a1
		moveq	#3,d6
		bsr.s	sub_3B9D8
		lea	(Player_2).w,a1
		moveq	#4,d6
		bsr.s	sub_3B9D8
		move.w	#$10,d1
		move.w	#3,d3
		move.w	$10(a0),d4
		jsr	SolidObjectTop.w
		move.w	$44(a0),d0
		jmp	Sprite_OnScreen_Test2.w

; =============== S U B R O U T I N E =======================================


sub_3B9D8:

		btst	d6,$2A(a0)
		beq.s	locret_3BA48
		moveq	#4,d0
		move.w	#$100,d1
		bclr	#0,$2A(a1)
		btst	#0,$2A(a0)
		beq.s	loc_3B9FC

loc_3B9F2:
		bset	#0,$2A(a1)
		neg.w	d0
		neg.w	d1

loc_3B9FC:
		add.w	$10(a0),d0
		move.w	d0,$10(a1)
		tst.b	$32(a0)
		beq.s	loc_3BA1E
		move.b	#0,$20(a1)
		bset	#1,$2A(a1)
		move.w	#0,$1A(a1)

locret_3BA48:
		rts
; ---------------------------------------------------------------------------

loc_3BA1E:
		move.w	$18(a0),d0
		move.w	d0,$18(a1)
		move.w	d0,$1C(a1)
		tst.b	$30(a0)
		bne.s	locret_3BA48
		move.w	d1,$18(a0)
		move.b	#$C,$30(a0)
		move.b	#4,$31(a0)
		moveq	#-$5E,d0
		jmp	Play_Sound_2.w

; ---------------------------------------------------------------------------

loc_3BA4A:
		move.w	$10(a0),-(sp)
		moveq	#1,d1
		move.w	$10(a0),d0
		sub.w	$44(a0),d0
		bne.s	loc_3BA68
		move.l	#loc_3B97A,(a0)
		move.b	#0,$32(a0)
		bra.s	loc_3BA70
; ---------------------------------------------------------------------------

loc_3BA68:
		bcs.s	loc_3BA6C
		neg.w	d1

loc_3BA6C:
		add.w	d1,$10(a0)

loc_3BA70:
		move.w	#$10,d1
		move.w	#3,d3
		move.w	(sp)+,d4
		jsr	SolidObjectTop.w
		move.w	$44(a0),d0
		jmp	Sprite_OnScreen_Test2.w
; ---------------------------------------------------------------------------
Map_FBZDEZPlayerLauncher:include "Levels/FBZ/Misc Object Data/Map - DEZ Player Launcher.asm"

word_3BAAA:	dc.w $7F
		dc.w $FF
		dc.w $1FF
		dc.w $3FF
; ---------------------------------------------------------------------------

Obj_FBZDisappearingPlatform:

		move.l	#Map_FBZDisappearingPlatform,$C(a0)
		move.w	#$23BA,$A(a0)
		ori.b	#4,4(a0)
		move.b	#$10,7(a0)
		move.b	#$10,6(a0)
		move.w	#prio(5),8(a0)
		move.b	#2,$22(a0)
		move.b	$2C(a0),d0
		move.b	d0,d1
		andi.w	#$C,d0
		lsr.w	#1,d0
		move.w	word_3BAAA(pc,d0.w),d0
		move.w	d0,$32(a0)
		addq.w	#1,d0
		lsr.w	#4,d0
		andi.w	#$F0,d1
		lsr.w	#4,d1
		mulu.w	d1,d0
		move.w	d0,$30(a0)
		move.l	#loc_3BB08,(a0)

loc_3BB08:

		move.w	(Level_frame_counter).w,d0
		add.w	$30(a0),d0

loc_3BB10:
		and.w	$32(a0),d0
		beq.s	loc_3BB1C
		jmp	Delete_Sprite_If_Not_In_Range.w
; ---------------------------------------------------------------------------

loc_3BB1C:
		move.b	$2C(a0),d0
		andi.b	#3,d0

loc_3BB24:
		move.b	d0,$20(a0)
		move.b	#4,$21(a0)
		move.l	#loc_3BB34,(a0)

loc_3BB34:
		lea	(Ani_FBZDisappearingPlatform).l,a1
		jsr	Animate_SpriteIrregularDelay.w
		tst.b	$22(a0)
		beq.s	loc_3BB6E
		lea	(Player_1).w,a1
		moveq	#3,d6
		bsr.s	sub_3BB86
		lea	(Player_2).w,a1
		moveq	#4,d6
		bsr.s	sub_3BB86
		tst.b	5(a0)
		beq.s	loc_3BB80

loc_3BB5C:
		clr.b	5(a0)
		move.b	#2,$22(a0)
		move.l	#loc_3BB08,(a0)
		bra.s	loc_3BB80
; ---------------------------------------------------------------------------

loc_3BB6E:
		move.w	#$1B,d1
		move.w	#$11,d3
		move.w	$10(a0),d4
		jsr	SolidObjectTop.w

loc_3BB80:

		jmp	Sprite_OnScreen_Test.w

; =============== S U B R O U T I N E =======================================


sub_3BB86:

		bclr	d6,$2A(a0)
		beq.s	locret_3BB98
		bclr	#3,$2A(a1)
		bset	#1,$2A(a1)

locret_3BB98:
		rts
; End of function sub_3BB86

; ---------------------------------------------------------------------------
Ani_FBZDisappearingPlatform:	include "Levels/FBZ/Misc Object Data/Anim - Disappearing Platform.asm"

Map_FBZDisappearingPlatform:include "Levels/FBZ/Misc Object Data/Map - Disappearing Platform.asm"


byte_3BBE8:	dc.b 8
byte_3BBE9:	dc.b $20
		dc.b $20
		dc.b 8
		dc.b $40
		dc.b 8
; ---------------------------------------------------------------------------

Obj_FBZScrewDoor:

		move.b	$2C(a0),d0
		lsr.w	#4,d0
		andi.w	#7,d0
		move.b	d0,$20(a0)
		andi.w	#6,d0
		move.b	byte_3BBE8(pc,d0.w),7(a0)
		move.b	byte_3BBE9(pc,d0.w),6(a0)
		move.l	#Map_FBZScrewDoor,$C(a0)
		move.w	#$23D2,$A(a0)
		ori.b	#4,4(a0)
		move.w	#prio(5),8(a0)
		move.w	$10(a0),$44(a0)
		move.w	$14(a0),$46(a0)
		lea	(Ani_FBZScrewDoor).l,a1
		jsr	Animate_Sprite.w
		tst.b	$2C(a0)
		bpl.s	loc_3BC6C
		move.w	respawn_addr(a0),d0
		beq.s	loc_3BC62
		movea.w	d0,a2
		btst	#0,(a2)
		beq.s	loc_3BC62
		addi.w	#$40,$14(a0)
		move.l	#loc_3BCF2,(a0)
		bra.w	loc_3BCF2
; ---------------------------------------------------------------------------

loc_3BC62:

		move.l	#loc_3BD1A,(a0)
		bra.w	loc_3BD1A
; ---------------------------------------------------------------------------

loc_3BC6C:
		move.l	#loc_3BC72,(a0)

loc_3BC72:
		move.b	$2C(a0),d0
		andi.w	#$F,d0
		lea	(Level_trigger_array).w,a3
		tst.b	(a3,d0.w)
		beq.s	loc_3BCF2
		move.l	#loc_3BC92,(a0)
		moveq	#-$71,d0
		jsr	Play_Sound_2.w

loc_3BC92:

		addq.b	#1,$2E(a0)
		cmpi.b	#-$80,$2E(a0)
		bne.s	loc_3BCA4
		move.l	#loc_3BCF2,(a0)

loc_3BCA4:
		moveq	#0,d0
		move.b	$2E(a0),d0
		btst	#4,$2C(a0)
		beq.s	loc_3BCB4
		neg.w	d0

loc_3BCB4:
		btst	#5,$2C(a0)
		bne.s	loc_3BCDC
		btst	#6,$2C(a0)
		bne.s	loc_3BCDE
		asr.w	#1,d0
		add.w	$46(a0),d0
		move.w	d0,$14(a0)
		lea	(Ani_FBZScrewDoor).l,a1
		jsr	Animate_Sprite.w
		bra.s	loc_3BCF2
; ---------------------------------------------------------------------------

loc_3BCDC:
		asr.w	#1,d0

loc_3BCDE:
		add.w	$44(a0),d0
		move.w	d0,$10(a0)
		lea	(Ani_FBZScrewDoor).l,a1
		jsr	Animate_Sprite.w

loc_3BCF2:

		moveq	#0,d1

loc_3BCF4:
		move.b	7(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	d2,d3
		addq.w	#1,d3

loc_3BD06:
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		move.w	$44(a0),d0
		jmp	Sprite_OnScreen_Test2.w
; ---------------------------------------------------------------------------

loc_3BD1A:

		lea	(Player_1).w,a1
		move.w	$14(a1),d0
		sub.w	$14(a0),d0
		addi.w	#-$20,d0
		cmpi.w	#$40,d0
		bhs.s	loc_3BCF2
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		btst	#0,$2A(a0)
		beq.s	loc_3BD42
		neg.w	d0

loc_3BD42:
		cmpi.w	#$40,d0
		blt.s	loc_3BCF2
		move.w	respawn_addr(a0),d0
		beq.s	loc_3BD54
		movea.w	d0,a2
		bset	#0,(a2)

loc_3BD54:
		move.l	#loc_3BC92,(a0)
		bra.w	loc_3BC92
; ---------------------------------------------------------------------------
Ani_FBZScrewDoor:	include "Levels/FBZ/Misc Object Data/Anim - Screw Door.asm"

Map_FBZScrewDoor:include "Levels/FBZ/Misc Object Data/Map - Screw Door.asm"

; ---------------------------------------------------------------------------

Obj_7B_1:
		moveq	#0,d0
		move.b	$2C(a0),d0
		lsl.w	#3,d0
		move.w	d0,$36(a0)
		move.l	#loc_3BF68,(a0)

loc_3BF68:
		lea	$30(a0),a2
		lea	(Player_1).w,a1
		move.w	(Ctrl_1_logical).w,d1
		bsr.s	sub_3BFA0
		addq.w	#1,a2
		lea	(Player_2).w,a1
		move.w	(Ctrl_2_logical).w,d1
		bsr.s	sub_3BFA0

	; NAT: Needed a rewrite here
		lea	$30(a0),a1			; NAT: get Sonic to a1
		cmp.b	#2,BoxWinner.w			; check if tails is winrar
		bne.s	.sonic				; if not, branch
		addq.w	#1,a1				; go to tails byte

.sonic		tst.b	(a1)				; check if this player is on the pole
		beq.s	loc_3BF9A			; if not, just skip
		moveq	#$20,d4				; set camera x-offsetr
		move.b	$30(a0),d5			; get player 1 check byte
		move.b	$31(a0),d6			; get player 2 check byte
		jsr	Camera_FixToObj			; control camera now

loc_3BF9A:
		jmp	Delete_Sprite_If_Not_In_Range.w

; =============== S U B R O U T I N E =======================================


sub_3BFA0:

		tst.b	(a2)
		beq.w	loc_3C0D0
		tst.b	(Debug_On).w
		bne.w	loc_3C096
		cmpi.b	#4,5(a1)
		bhs.w	loc_3C096
		tst.b	$2E(a1)
		bmi.w	loc_3C096
		btst	#8,d1
		beq.s	loc_3BFD8
		move.w	$14(a0),d0
		sub.w	$36(a0),d0
		cmp.w	$14(a1),d0
		bge.s	loc_3BFD8
		subq.w	#1,$14(a1)

loc_3BFD8:

		btst	#9,d1
		beq.s	loc_3BFEC
		move.w	$14(a0),d0
		cmp.w	$14(a1),d0
		ble.s	loc_3BFEC
		addq.w	#1,$14(a1)

loc_3BFEC:

		move.w	d1,d0
		andi.w	#$70,d0
		bne.w	loc_3C068
		addi.b	#8,4(a2)
		bsr.s	sub_3C010

loc_3BFFE:
		moveq	#0,d0
		move.b	$22(a1),d0
		move.l	a2,-(sp)
		jsr	(Tails_Carry_LoadPLC).l
		movea.l	(sp)+,a2
		rts
; End of function sub_3BFA0


; =============== S U B R O U T I N E =======================================


sub_3C010:

		andi.w	#$7FFF,$A(a1)
		moveq	#0,d0
		move.b	4(a2),d0
		bmi.s	loc_3C024
		ori.w	#-$8000,$A(a1)

loc_3C024:
		lsr.b	#4,d0
		move.b	RawAni_3C048(pc,d0.w),d1
		move.b	d1,$22(a1)
		move.b	byte_3C058(pc,d0.w),d1
		ext.w	d1
		btst	#0,4(a1)
		beq.s	loc_3C03E
		neg.w	d1

loc_3C03E:
		add.w	$10(a0),d1
		move.w	d1,$10(a1)
		rts
; End of function sub_3C010

; ---------------------------------------------------------------------------
RawAni_3C048:	dc.b  $5C, $5C,	$5D, $5D, $5D, $5E, $5E, $5E, $5F, $5F,	$60, $60, $60, $61, $61, $61
byte_3C058:	dc.b  $18, $18,	  4,   4,   4, $F6, $F6, $F6, $E8, $E8,	$E8, $E8, $E8,	$A,  $A,  $A
; ---------------------------------------------------------------------------

loc_3C068:
		move.w	#$1000,$18(a1)
		btst	#$A,d1
		beq.s	loc_3C078
		neg.w	$18(a1)

loc_3C078:
		move.w	#-$100,$1A(a1)
		move.b	#$E,$1E(a1)
		move.b	#7,$1F(a1)
		move.b	#2,$20(a1)
		bset	#2,$2A(a1)

loc_3C096:

		clr.b	(a2)
		move.b	#$1E,2(a2)
		andi.b	#-4,$2E(a1)
		andi.w	#$7FFF,$A(a1)
		bset	#1,$2A(a1)
		move.b	#1,$40(a1)
		bclr	#4,$2A(a1)
		move.b	#0,$27(a1)
		move.b	#0,$3D(a1)
		move.b	#0,$2F(a1)
		rts
; ---------------------------------------------------------------------------

loc_3C0D0:
		tst.b	2(a2)
		beq.s	loc_3C0DC
		subq.b	#1,2(a2)
		rts
; ---------------------------------------------------------------------------

loc_3C0DC:
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		addi.w	#$C,d0
		cmpi.w	#$18,d0
		bhs.w	locret_3C19A
		move.w	$36(a0),d1
		move.w	$14(a0),d0
		sub.w	$14(a1),d0
		addi.w	#$10,d0
		cmp.w	$36(a0),d0
		bhs.w	locret_3C19A
		tst.b	(Debug_On).w
		bne.w	locret_3C19A
		cmpi.b	#4,5(a1)
		bhs.w	locret_3C19A
		tst.b	$2E(a1)
		bne.w	locret_3C19A
		clr.w	$18(a1)
		clr.w	$1A(a1)
		clr.w	$1C(a1)
		andi.b	#-4,4(a1)
		move.b	$1E(a1),d0
		move.b	$44(a1),$1E(a1)
		move.b	$45(a1),$1F(a1)
		bclr	#2,$2A(a1)
		beq.s	loc_3C156
		sub.b	$44(a1),d0
		ext.w	d0
		add.w	d0,$14(a1)

loc_3C156:
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),d0
		cmp.w	$14(a1),d0
		bhs.s	loc_3C16A
		move.w	d0,$14(a1)

loc_3C16A:
		bset	#1,$2A(a1)
		bclr	#0,$2A(a1)
		move.b	#0,$20(a1)
		move.b	#3,$2E(a1)
		andi.b	#-3,4(a1)
		move.b	#-$20,4(a2)
		move.b	#1,(a2)
		bsr.w	sub_3C010
		bra.w	loc_3BFFE
; ---------------------------------------------------------------------------

locret_3C19A:

		rts
; ---------------------------------------------------------------------------
		dc.w 2
		dc.w 1
		dc.w $805
		dc.w $9036
		dc.w $FFF8
; ---------------------------------------------------------------------------

Obj_FBZPropeller:

		move.l	#Map_FBZPropeller,$C(a0)
		move.w	#$22E5,$A(a0)
		ori.b	#4,4(a0)
		move.b	#$68,7(a0)
		move.b	#8,6(a0)
		move.w	#prio(5),8(a0)
		bset	#6,4(a0)
		move.w	#1,$16(a0)
		lea	$18(a0),a2
		move.w	$10(a0),(a2)+
		move.w	$14(a0),(a2)+
		move.w	#0,(a2)+
		move.l	#loc_3C1EE,(a0)

loc_3C1EE:
		lea	$1D(a0),a2
		addq.b	#1,(a2)
		andi.b	#3,(a2)
		moveq	#0,d0
		move.b	(a2),d0
		move.b	CollisionEffects_3C208(pc,d0.w),$28(a0)
		jmp	loc_1B662.w
; ---------------------------------------------------------------------------
CollisionEffects_3C208:dc.b $B6
		dc.b 0
		dc.b $B6
		dc.b $B7
Map_FBZPropeller:include "Levels/FBZ/Misc Object Data/Map - Propeller.asm"

; ---------------------------------------------------------------------------

Obj_FBZPiston:

		move.l	#Map_FBZPiston,$C(a0)
		move.w	#$231B,$A(a0)
		ori.b	#4,4(a0)
		move.b	#$20,7(a0)
		move.b	#$20,6(a0)
		move.w	#prio(5),8(a0)
		move.w	$10(a0),$44(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		lsl.w	#3,d0
		move.w	d0,$34(a0)
		andi.w	#-$80,d0
		addi.w	#$200,d0
		move.w	d0,$36(a0)
		move.l	#loc_3C2A6,(a0)

loc_3C2A6:
		move.w	$10(a0),-(sp)
		tst.b	$30(a0)
		beq.s	loc_3C2BE
		subq.w	#2,$32(a0)
		bne.s	loc_3C2D2
		move.b	#0,$30(a0)
		bra.s	loc_3C2D2
; ---------------------------------------------------------------------------

loc_3C2BE:
		addq.w	#2,$32(a0)
		move.w	$34(a0),d0
		cmp.w	$32(a0),d0
		bne.s	loc_3C2D2
		move.b	#1,$30(a0)

loc_3C2D2:

		move.w	$32(a0),d0
		neg.w	d0
		add.w	$44(a0),d0
		move.w	d0,$10(a0)
		moveq	#0,d1
		move.b	7(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	(sp)+,d4
		jsr	SolidObjectFull.w
		move.w	$44(a0),d0
		andi.w	#-$80,d0
		sub.w	(Camera_X_pos_coarse_back).w,d0
		cmp.w	$36(a0),d0
		bhi.w	loc_3C316
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_3C316:
		move.w	respawn_addr(a0),d0
		beq.s	loc_3C322
		movea.w	d0,a2
		bclr	#7,(a2)

loc_3C322:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------
Map_FBZPiston:	include "Levels/FBZ/Misc Object Data/Map - Piston.asm"

byte_3C344:	dc.b $10
byte_3C345:	dc.b $10
		dc.b $20
		dc.b $10
		dc.b $30
		dc.b $10
		dc.b $40
		dc.b $10
; ---------------------------------------------------------------------------

Obj_FBZPlatformBlocks:

		move.b	$2C(a0),d0
		lsr.w	#4,d0
		andi.w	#7,d0
		move.b	d0,$22(a0)
		add.w	d0,d0
		move.b	byte_3C344(pc,d0.w),7(a0)
		move.b	byte_3C345(pc,d0.w),6(a0)
		move.l	#Map_FBZPlatformBlocks,$C(a0)
		move.w	#$440D,$A(a0)
		ori.b	#4,4(a0)
		move.w	#prio(5),8(a0)

loc_3C382:
		move.w	$10(a0),$44(a0)
		move.b	$2C(a0),d0
		andi.w	#$F,d0
		lsl.w	#4,d0
		move.w	d0,$30(a0)
		bne.s	loc_3C3A2
		move.l	#loc_3C3EE,(a0)
		bra.w	loc_3C3EE
; ---------------------------------------------------------------------------

loc_3C3A2:
		move.l	#loc_3C3A8,(a0)

loc_3C3A8:
		move.w	Player_1+y_pos.w,d0
		cmp.b	#2,BoxWinner.w		; NAT: Check if Tails is winrar
		bne.s	.sunak			; if not, use default
		move.w	Player_2+y_pos.w,d0	; uses tail's pos

.sunak		sub.w	$14(a0),d0
		bcs.s	loc_3C3C8
		cmpi.w	#$20,d0
		blt.s	loc_3C3D8
		move.w	$30(a0),d1
		cmp.w	$32(a0),d1
		beq.s	loc_3C3D8
		addq.w	#8,$32(a0)
		bra.s	loc_3C3D8
; ---------------------------------------------------------------------------

loc_3C3C8:
		cmpi.w	#-$28,d0
		bge.s	loc_3C3D8
		tst.w	$32(a0)
		beq.s	loc_3C3D8
		subq.w	#8,$32(a0)

loc_3C3D8:

		move.w	$32(a0),d0
		btst	#0,$2A(a0)
		beq.s	loc_3C3E6
		neg.w	d0

loc_3C3E6:
		add.w	$44(a0),d0
		move.w	d0,$10(a0)

loc_3C3EE:

		moveq	#0,d1
		move.b	7(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		move.w	$44(a0),d0
		jmp	Sprite_OnScreen_Test2.w
; ---------------------------------------------------------------------------
Map_FBZPlatformBlocks:include "Levels/FBZ/Misc Object Data/Map - Platform Blocks.asm"

; ---------------------------------------------------------------------------

Obj_FBZMissileLauncher:

		move.l	#Map_FBZMissileLauncher,$C(a0)
		move.w	#-$5CD5,$A(a0)
		ori.b	#4,4(a0)
		move.b	#$10,7(a0)
		move.b	#$10,6(a0)

loc_3C482:
		move.w	#prio(1),8(a0)
		move.b	$2C(a0),d0
		move.b	d0,d1
		andi.w	#$C,d0
		addi.w	#4,d0
		lsl.w	#2,d0
		move.w	d0,$30(a0)
		move.b	d1,d0
		andi.b	#3,d0
		move.b	d0,$34(a0)
		move.b	d0,$35(a0)
		andi.b	#$70,d1
		move.b	d1,$32(a0)
		tst.b	$2C(a0)
		bpl.s	loc_3C520
		jsr	Create_New_Sprite3.w
		bne.w	loc_3C51A

loc_3C4C2:
		move.l	#loc_3C636,(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		addi.w	#$30,$10(a1)
		subi.w	#$30,$14(a1)
		move.w	$10(a0),$44(a1)
		move.b	4(a0),4(a1)
		move.l	$C(a0),$C(a1)
		move.w	#-$3CD5,$A(a1)
		move.w	#prio(2),8(a1)
		move.b	#$20,7(a1)

loc_3C504:
		move.b	#8,6(a1)
		move.b	#6,$22(a1)
		bset	#7,$2A(a1)
		move.w	a0,$3C(a1)

loc_3C51A:
		move.b	#5,$40(a0)

loc_3C520:
		move.l	#loc_3C526,(a0)

loc_3C526:
		tst.b	4(a0)
		bpl.w	loc_3C60C
		move.l	#loc_3C534,(a0)

loc_3C534:

		move.b	(Level_frame_counter+1).w,d0
		add.b	$32(a0),d0
		bne.w	loc_3C60C
		move.w	#0,$2E(a0)
		move.b	#1,$22(a0)
		move.l	#loc_3C552,(a0)

loc_3C552:
		subq.w	#1,$2E(a0)
		bpl.w	loc_3C60C
		move.w	$30(a0),$2E(a0)
		jsr	Create_New_Sprite3.w
		bne.w	loc_3C5F4
		move.l	#loc_3C6CC,(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		subi.w	#4,$14(a1)

loc_3C582:
		move.w	$14(a0),$46(a1)
		subi.w	#$44,$46(a1)
		move.b	4(a0),4(a1)
		move.l	$C(a0),$C(a1)
		move.w	#-$5CD5,$A(a1)
		move.w	#prio(1),8(a1)
		move.b	#8,7(a1)
		move.b	#$24,6(a1)
		move.b	#$C,$1E(a1)
		move.b	#2,$22(a1)
		move.w	#-$600,$1A(a1)

loc_3C5C4:
		addi.w	#6,$14(a1)
		move.b	$2C(a0),$2C(a1)
		move.w	a0,$3C(a1)
		moveq	#0,d0
		move.b	$23(a0),d0
		andi.w	#$E,d0
		move.w	word_3C612(pc,d0.w),d0
		lsl.l	#8,d0
		move.l	d0,$36(a1)
		addq.b	#2,$23(a0)
		moveq	#$67,d0
		jsr	Play_Sound_2.w

loc_3C5F4:
		subq.b	#1,$34(a0)
		bpl.s	loc_3C60C
		move.b	$35(a0),$34(a0)
		move.l	#loc_3C622,(a0)
		move.b	#7,$24(a0)

loc_3C60C:

		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------
word_3C612:	dc.w $100
		dc.w $E0
		dc.w $120
		dc.w $140
		dc.w $100
		dc.w $E0
		dc.w $C0
		dc.w $E0
; ---------------------------------------------------------------------------

loc_3C622:
		subq.b	#1,$24(a0)
		bpl.s	loc_3C60C
		move.b	#0,$22(a0)
		move.l	#loc_3C534,(a0)
		bra.s	loc_3C60C
; ---------------------------------------------------------------------------

loc_3C636:
		movea.w	$3C(a0),a1
		tst.b	$40(a1)
		bne.s	loc_3C694
		lea	(word_3C6BC).l,a2
		moveq	#3,d1

loc_3C648:
		jsr	Create_New_Sprite3.w
		bne.w	loc_3C67C
		move.l	#Obj_Explosion,(a1)
		move.b	#6,5(a1)
		move.w	#$8000,$A(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		move.w	(a2)+,d0
		add.w	d0,$10(a1)
		move.w	(a2)+,d0
		add.w	d0,$14(a1)

loc_3C67C:
		dbf	d1,loc_3C648
		move.w	#$7F00,$10(a0)
		move.w	$10(a0),$44(a0)
		moveq	#-$7F,d0
		jsr	Play_Sound_2.w

loc_3C694:
		moveq	#0,d1
		move.b	7(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		move.w	$44(a0),d0
		jmp	Sprite_OnScreen_Test2.w
; ---------------------------------------------------------------------------
word_3C6BC:	dc.w $FFE8
		dc.w 2
		dc.w $FFF8
		dc.w $FFFC
		dc.w 8
		dc.w 4
		dc.w $18
		dc.w $FFFE
; ---------------------------------------------------------------------------

loc_3C6CC:
		jsr	MoveSprite2.w
		tst.w	$1A(a0)
		bpl.s	loc_3C6F4
		addi.w	#$18,$1A(a0)
		bmi.s	loc_3C740
		move.b	#3,$22(a0)
		move.b	#-$62,$28(a0)
		andi.w	#$7FFF,$A(a0)
		bra.s	loc_3C740
; ---------------------------------------------------------------------------

loc_3C6F4:
		addi.w	#$10,$1A(a0)
		tst.b	$2C(a0)
		bmi.s	loc_3C716

loc_3C700:
		jsr	ObjCheckFloorDist.w
		tst.w	d1
		bpl.s	loc_3C740
		add.w	d1,$14(a0)
		move.l	#loc_3C768,(a0)
		bra.s	loc_3C740
; ---------------------------------------------------------------------------

loc_3C716:
		movea.w	$3C(a0),a1
		tst.b	$40(a1)
		beq.s	loc_3C700
		move.w	$46(a0),d0
		sub.w	$14(a0),d0
		bcc.s	loc_3C740
		add.w	d0,$14(a0)
		move.l	#loc_3C768,(a0)
		subq.b	#1,$40(a1)
		bne.s	loc_3C740
		andi.b	#$7F,$2C(a1)

loc_3C740:

		move.w	$1A(a0),d0
		bpl.s	loc_3C748
		neg.w	d0

loc_3C748:
		cmpi.w	#$1D0,d0
		bhs.s	loc_3C756
		move.l	$36(a0),d0
		add.l	d0,$10(a0)

loc_3C756:
		jsr	Add_SpriteToCollisionResponseList.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_3C768:

		addq.w	#4,$14(a0)
		move.l	#Obj_Explosion,(a0)
		move.b	#6,5(a0)
		clr.b	$28(a0)
		clr.b	$29(a0)
		moveq	#-$4C,d0
		jsr	Play_Sound_2.w
		jmp	(Obj_Explosion).l
; ---------------------------------------------------------------------------
Map_FBZMissileLauncher:include "Levels/FBZ/Misc Object Data/Map - Missile Launcher.asm"

; ---------------------------------------------------------------------------

Obj_FBZWallMissile:

		move.l	#Map_FBZWallMissile,$C(a0)
		move.w	#$232B,$A(a0)
		ori.b	#4,4(a0)
		move.b	#$10,7(a0)
		move.b	#4,6(a0)
		move.w	#prio(5),8(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		lsl.w	#2,d0
		move.w	d0,$2E(a0)
		move.w	d0,$30(a0)
		move.l	#loc_3C828,(a0)

loc_3C828:

		tst.b	4(a0)
		bpl.w	loc_3C8B0
		subq.w	#1,$2E(a0)
		bpl.s	loc_3C8B0
		move.w	$30(a0),$2E(a0)
		jsr	Create_New_Sprite3.w
		bne.w	loc_3C89C
		move.l	#loc_3C8D4,(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		move.b	4(a0),4(a1)
		move.l	$C(a0),$C(a1)
		move.w	#$232B,$A(a1)
		move.w	#prio(6),8(a1)
		move.b	#$10,7(a1)
		move.b	#4,6(a1)
		move.b	#-$65,$28(a1)
		move.w	#$400,$18(a1)
		btst	#0,$2A(a0)
		bne.s	loc_3C894
		neg.w	$18(a1)

loc_3C894:
		moveq	#$67,d0
		jsr	Play_Sound_2.w

loc_3C89C:
		move.l	#loc_3C8B6,(a0)
		move.b	#7,$22(a0)
		move.b	#$1F,$24(a0)
		bra.s	loc_3C8B6
; ---------------------------------------------------------------------------

loc_3C8B0:

		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_3C8B6:

		subq.b	#1,$24(a0)
		bpl.s	loc_3C8CE
		move.b	#7,$24(a0)
		subq.b	#1,$22(a0)
		bne.s	loc_3C8CE
		move.l	#loc_3C828,(a0)

loc_3C8CE:

		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_3C8D4:
		move.b	(Level_frame_counter+1).w,d0
		andi.b	#3,d0
		bne.s	loc_3C8E8
		addq.b	#1,$22(a0)
		andi.b	#1,$22(a0)

loc_3C8E8:
		tst.b	4(a0)
		bpl.s	loc_3C900
		jsr	MoveSprite2.w
		jsr	Add_SpriteToCollisionResponseList.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_3C900:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------
Map_FBZWallMissile:	include "Levels/FBZ/Misc Object Data/Map - Wall Missile.asm"

; ---------------------------------------------------------------------------

Obj_FBZMine:

		move.l	#Map_FBZMine,$C(a0)
		move.w	#$40A,$A(a0)
		ori.b	#4,4(a0)
		move.b	#$C,7(a0)
		move.b	#4,6(a0)
		move.w	#prio(1),8(a0)
		move.l	#loc_3C972,(a0)

loc_3C972:
		lea	(Player_1).w,a1
		bsr.s	sub_3C984
		lea	(Player_2).w,a1
		bsr.s	sub_3C984
		jmp	Sprite_OnScreen_Test.w

; =============== S U B R O U T I N E =======================================


sub_3C984:

		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		addi.w	#$10,d0
		cmpi.w	#$20,d0
		bhs.s	locret_3C9BA
		move.w	$14(a1),d0
		sub.w	$14(a0),d0
		addi.w	#$18,d0
		cmpi.w	#$20,d0
		bhs.s	locret_3C9BA
		tst.b	(Debug_On).w
		bne.s	locret_3C9BA
		move.w	#$1E,$30(a0)
		move.l	#loc_3C9BC,(a0)

locret_3C9BA:

		rts
; End of function sub_3C984

; ---------------------------------------------------------------------------

loc_3C9BC:
		addq.b	#1,$22(a0)
		andi.b	#1,$22(a0)
		subq.w	#1,$30(a0)
		bpl.s	loc_3C9DE
		move.l	#loc_3C9E4,(a0)
		move.b	#-$75,$28(a0)
		jsr	Add_SpriteToCollisionResponseList.w

loc_3C9DE:
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_3C9E4:
		move.l	#Obj_Explosion,(a0)
		move.b	#6,5(a0)
		clr.b	$28(a0)
		clr.b	$29(a0)
		moveq	#-$4C,d0
		jsr	Play_Sound_2.w
		jmp	(Obj_Explosion).l
; ---------------------------------------------------------------------------
Map_FBZMine:	include "Levels/FBZ/Misc Object Data/Map - Mine.asm"

; ---------------------------------------------------------------------------

Obj_FBZElevator:

		move.l	#loc_3CA20,(a0)

loc_3CA20:
		subq.w	#1,$30(a0)
		bpl.s	loc_3CA8C
		move.w	#$5F,$30(a0)
		jsr	Create_New_Sprite3.w
		bne.w	loc_3CA8C
		move.l	#loc_3CA92,(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		move.l	#Map_FBZElevator,$C(a1)
		move.w	#$42D2,$A(a1)
		ori.b	#4,4(a1)
		move.b	#$30,7(a1)
		move.b	#$20,6(a1)
		move.w	#prio(1),8(a1)
		moveq	#0,d0
		move.b	$2C(a0),d0
		lsl.w	#3,d0
		move.w	d0,$30(a1)
		move.w	#1,$1A(a1)
		btst	#0,$2A(a0)
		bne.s	loc_3CA8C
		neg.w	$1A(a1)

loc_3CA8C:

		jmp	Delete_Sprite_If_Not_In_Range.w
; ---------------------------------------------------------------------------

loc_3CA92:
		subq.w	#1,$30(a0)
		bpl.s	loc_3CA9E
		move.w	#$7F00,$10(a0)

loc_3CA9E:
		move.w	$1A(a0),d0
		add.w	d0,$14(a0)
		move.w	#$3B,d1
		move.w	#$10,d2
		move.w	$10(a0),d4
		lea	(byte_3CAD0).l,a2
		jsr	sub_1DD0E.w
		tst.w	$1A(a0)
		bmi.s	loc_3CACA
		jsr	CheckPlayerReleaseFromObj.w

loc_3CACA:
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------
byte_3CAD0:	dc.b  $10, $10,	$10, $10, $10, $10, $10, $11, $12, $12,	$13, $13, $13, $14, $14, $14, $15, $15,	$15, $16

		dc.b  $16, $16,	$17, $17, $17, $18, $18, $18, $19, $19,	$19, $1A, $1A, $1A, $1B, $1B, $1B, $1C,	$1C, $1C
		dc.b  $1D, $1D,	$1D, $1E, $1E, $1E, $1F, $1F, $1F, $20,	$20, $20, $21, $21, $21, $21, $21, $21,	$21, $21
Map_FBZElevator:include "Levels/FBZ/Misc Object Data/Map - Elevator.asm"

; ---------------------------------------------------------------------------

Obj_FBZTrapSpring:

		move.l	#Map_FBZTrapSpring,$C(a0)
		move.w	#$30F,$A(a0)
		ori.b	#4,4(a0)
		move.b	#$10,7(a0)
		move.b	#$10,6(a0)
		move.w	#prio(1),8(a0)
		move.l	#loc_3CB66,(a0)

loc_3CB66:
		move.w	Player_1+y_pos.w,d0	; get Sonic
		cmp.b	#2,BoxWinner.w		; NAT: Check box winner
		bne.s	.sunak			; if not Tails, branch
		move.w	Player_2+y_pos.w,d0	; get tails

.sunak		sub.w	$14(a0),d0
		bcs.s	loc_3CB7E

loc_3CB70:
		cmpi.w	#$20,d0
		blt.s	loc_3CB8A
		move.b	#1,$20(a0)
		bra.s	loc_3CB8A
; ---------------------------------------------------------------------------

loc_3CB7E:
		cmpi.w	#-$10,d0
		bge.s	loc_3CB8A
		move.b	#0,$20(a0)

loc_3CB8A:

		lea	(Player_1).w,a1
		bclr	#3,$2A(a0)
		beq.s	loc_3CB98

loc_3CB96:
		bsr.s	sub_3CBCE

loc_3CB98:
		lea	(Player_2).w,a1
		bclr	#4,$2A(a0)
		beq.s	loc_3CBA6
		bsr.s	sub_3CBCE

loc_3CBA6:
		move.w	#$1B,d1
		move.w	#8,d2
		move.w	#9,d3
		move.w	$10(a0),d4
		jsr	SolidObjectTop.w
		lea	(Ani_FBZTrapSpring).l,a1
		jsr	Animate_Sprite.w
		jmp	Sprite_OnScreen_Test.w

; =============== S U B R O U T I N E =======================================


sub_3CBCE:

		move.w	#-$1000,$1A(a1)
		move.b	$2C(a0),d0
		btst	#1,d0
		beq.s	loc_3CBE4
		move.w	#-$A00,$1A(a1)

loc_3CBE4:
		bset	#1,$2A(a1)
		bclr	#3,$2A(a1)
		clr.b	$40(a1)
		clr.b	$3D(a1)
		move.b	#$10,$20(a1)
		move.b	#2,5(a1)
		btst	#0,d0
		beq.s	loc_3CC44
		move.w	#1,$1C(a1)
		move.b	#1,$27(a1)
		move.b	#0,$20(a1)
		move.b	#0,$30(a1)
		move.b	#4,$31(a1)
		btst	#1,d0
		bne.s	loc_3CC34
		move.b	#1,$30(a1)

loc_3CC34:
		btst	#0,$2A(a1)
		beq.s	loc_3CC44
		neg.b	$27(a1)
		neg.w	$1C(a1)

loc_3CC44:

		moveq	#-$4F,d0
		jmp	Play_Sound_2.w
; End of function sub_3CBCE

; ---------------------------------------------------------------------------
Ani_FBZTrapSpring:	include "Levels/FBZ/Misc Object Data/Anim - Trap Spring.asm"

Map_FBZTrapSpring:include "Levels/FBZ/Misc Object Data/Map - Trap Spring.asm"

; ---------------------------------------------------------------------------

Obj_FBZFlamethrower:

		move.l	#Map_FBZFlameThrower,$C(a0)
		move.w	#$41D,$A(a0)
		move.b	#4,4(a0)
		move.b	#$10,7(a0)
		move.b	#$10,6(a0)
		move.w	#prio(3),8(a0)
		bset	#6,4(a0)
		move.w	#3,$16(a0)
		lea	$18(a0),a2
		move.w	$10(a0),d0
		addq.w	#8,d0
		move.w	d0,(a2)+
		move.w	$14(a0),d1
		move.w	d1,(a2)+
		move.w	#0,(a2)+
		move.w	$10(a0),(a2)+
		move.w	d1,(a2)+
		move.w	#$11,(a2)+
		subi.w	#$10,d0
		move.w	d0,(a2)+
		move.w	d1,(a2)+
		move.w	#$10,(a2)+
		move.b	#1,$22(a0)
		move.b	$2C(a0),d0
		bpl.s	loc_3CCFA
		move.b	#3,$22(a0)

loc_3CCFA:
		andi.b	#$40,d0
		beq.s	loc_3CD26
		move.w	#2,$16(a0)
		btst	#0,$2A(a0)
		beq.s	loc_3CD1C
		lea	$18(a0),a2
		subi.w	#$10,(a2)
		move.b	#$10,5(a2)

loc_3CD1C:
		move.l	#loc_3CDB0,(a0)
		bra.w	loc_3CDB0
; ---------------------------------------------------------------------------

loc_3CD26:
		move.l	#loc_3CD2C,(a0)

loc_3CD2C:
		cmpi.b	#2,$22(a0)
		beq.w	loc_3CD8E
		subq.b	#1,$34(a0)
		bpl.s	loc_3CD4C
		move.b	#2,$34(a0)
		addq.b	#1,$35(a0)
		andi.b	#3,$35(a0)

loc_3CD4C:
		move.b	(Level_frame_counter+1).w,d0
		move.b	d0,d1
		andi.b	#3,d0
		bne.w	loc_3CD8E
		andi.b	#$F,d1
		bne.s	loc_3CD6E
		tst.b	4(a0)
		bpl.s	loc_3CD6E
		moveq	#-$3E,d0
		jsr	Play_Sound_2.w

loc_3CD6E:

		tst.b	4(a0)
		bpl.w	loc_3CD8E
		subq.b	#4,$2E(a0)
		andi.b	#$7F,$2E(a0)
		bsr.w	sub_3CEC0
		ori.b	#-$80,$2E(a0)
		bsr.w	sub_3CEC0

loc_3CD8E:

		bsr.w	sub_3CE7A
		move.w	#$1B,d1
		move.w	#8,d2
		move.w	#9,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		bsr.s	sub_3CE1A
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_3CDB0:

		cmpi.b	#2,$22(a0)
		beq.w	loc_3CDFC
		subq.b	#1,$34(a0)
		bpl.s	loc_3CDD0
		move.b	#2,$34(a0)
		addq.b	#1,$35(a0)
		andi.b	#3,$35(a0)

loc_3CDD0:
		move.b	(Level_frame_counter+1).w,d0
		move.b	d0,d1
		andi.b	#3,d0
		bne.w	loc_3CDFC
		andi.b	#$F,d1
		bne.s	loc_3CDEC
		moveq	#-$3E,d0
		jsr	Play_Sound_2.w

loc_3CDEC:
		tst.b	4(a0)
		bpl.w	loc_3CDFC
		addq.b	#2,$2E(a0)
		bsr.w	sub_3CEC0

loc_3CDFC:

		move.w	#$1B,d1
		move.w	#8,d2
		move.w	#9,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		bsr.s	sub_3CE1A
		jmp	Sprite_OnScreen_Test.w

; =============== S U B R O U T I N E =======================================


sub_3CE1A:

		tst.b	$2C(a0)
		bmi.s	locret_3CE42
		move.b	$2A(a0),d0
		andi.b	#$18,d0
		beq.s	loc_3CE44
		tst.w	$30(a0)
		bne.s	loc_3CE52
		move.w	#$3C,$30(a0)
		move.b	#2,$22(a0)
		move.b	#0,$2E(a0)

locret_3CE42:

		rts
; ---------------------------------------------------------------------------

loc_3CE44:
		move.w	#0,$30(a0)
		move.b	#1,$22(a0)
		rts
; ---------------------------------------------------------------------------

loc_3CE52:
		subq.w	#1,$30(a0)
		bne.s	locret_3CE42
		lea	(Player_1).w,a1
		bclr	#3,$2A(a0)
		beq.s	loc_3CE68
		bsr.w	sub_3CBCE

loc_3CE68:
		lea	(Player_2).w,a1
		bclr	#4,$2A(a0)
		beq.s	locret_3CE78
		bsr.w	sub_3CBCE

locret_3CE78:
		rts
; End of function sub_3CE1A


; =============== S U B R O U T I N E =======================================


sub_3CE7A:
		move.b	$2E(a0),d0
		jsr	GetSineCosine.w
		asr.w	#5,d1
		move.w	d1,d0
		lea	$18(a0),a2
		move.w	$10(a0),d2
		add.w	d2,d1
		move.w	d1,(a2)
		neg.w	d0
		add.w	d2,d0
		move.w	d0,$C(a2)
		cmpi.b	#-$40,$2E(a0)
		blo.s	loc_3CEB2
		move.b	#0,5(a2)
		move.b	#$10,$11(a2)
		rts
; ---------------------------------------------------------------------------

loc_3CEB2:
		move.b	#$10,5(a2)
		move.b	#0,$11(a2)
		rts
; End of function sub_3CE7A


; =============== S U B R O U T I N E =======================================


sub_3CEC0:

		jsr	Create_New_Sprite3.w
		bne.w	locret_3CF4A
		move.l	#loc_3CF90,(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		subq.w	#4,$14(a1)
		move.b	4(a0),4(a1)
		move.l	$C(a0),$C(a1)

loc_3CEEC:
		move.w	#$41D,$A(a1)
		move.w	#prio(4),8(a1)
		move.b	#$C,7(a1)
		move.b	#$C,6(a1)
		move.b	#-$68,$28(a1)
		bset	#4,$2B(a1)
		btst	#6,$2C(a0)
		bne.s	loc_3CF4C
		move.b	$2E(a0),d0
		bpl.s	loc_3CF24
		move.w	#prio(1),8(a1)

loc_3CF24:
		jsr	GetSineCosine.w
		move.w	d1,d0
		asl.w	#2,d1
		move.w	d1,$18(a1)
		asr.w	#4,d0
		add.w	d0,$10(a1)
		move.b	$35(a0),$23(a1)
		move.b	#4,$24(a1)
		move.b	#$C,$20(a1)

locret_3CF4A:
		rts
; ---------------------------------------------------------------------------

loc_3CF4C:
		move.b	$2E(a0),d0
		jsr	GetSineCosine.w
		move.w	d1,d2
		asr.w	#1,d2
		add.w	d2,d1
		addi.w	#$280,d1
		move.w	d1,$18(a1)
		addi.w	#$10,$10(a1)
		btst	#0,$2A(a0)
		beq.s	loc_3CF7C
		neg.w	$18(a1)
		subi.w	#$20,$10(a1)

loc_3CF7C:
		move.b	$35(a0),$23(a1)
		move.b	#4,$24(a1)
		move.b	#$C,$20(a1)
		rts
; End of function sub_3CEC0

; ---------------------------------------------------------------------------

loc_3CF90:
		subq.b	#1,$24(a0)
		bpl.s	loc_3CFA2
		move.b	#5,$24(a0)
		subq.b	#4,$20(a0)
		beq.s	loc_3CFCA

loc_3CFA2:
		addq.b	#1,$23(a0)
		andi.b	#3,$23(a0)
		move.b	$20(a0),d0
		add.b	$23(a0),d0
		move.b	d0,$22(a0)
		jsr	MoveSprite2.w
		jsr	Add_SpriteToCollisionResponseList.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_3CFCA:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------
Map_FBZFlameThrower:include "Levels/FBZ/Misc Object Data/Map - Flamethrower.asm"

; ---------------------------------------------------------------------------

Obj_FBZSpiderCrane:

		move.l	#Map_FBZSpiderCrane,$C(a0)
		move.w	#$2339,$A(a0)
		ori.b	#4,4(a0)
		move.b	#$18,7(a0)
		move.b	#$60,6(a0)
		move.w	#prio(1),8(a0)
		move.w	$10(a0),$44(a0)
		move.w	$14(a0),$46(a0)
		bset	#6,4(a0)
		move.w	#1,$16(a0)
		lea	$18(a0),a2
		move.w	$10(a0),(a2)+
		move.w	$14(a0),(a2)+
		move.w	#0,(a2)+
		move.b	#$A,$22(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		lsl.w	#2,d0
		move.w	d0,$38(a0)
		move.l	#loc_3D0F6,(a0)

loc_3D0F6:
		lea	(Player_1).w,a1		; NAT: Cool stuffs
		bsr.s	.test
		lea	(Player_2).w,a1
		bsr.s	.test
		jmp	Sprite_OnScreen_Test.w

.test		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		addi.w	#$10,d0
		cmpi.w	#$20,d0
		bhs.s	.rts
		move.l	#loc_3D11E,(a0)
.rts		rts

; ---------------------------------------------------------------------------

loc_3D11E:
		cmpi.w	#$40,$34(a0)
		bhs.s	loc_3D12A
		addq.w	#1,$34(a0)

loc_3D12A:
		move.w	$34(a0),d0
		add.w	$46(a0),d0
		move.w	d0,$14(a0)
		move.w	$14(a0),$1A(a0)
		move.w	$34(a0),d0
		addq.w	#7,d0
		lsr.w	#3,d0
		move.b	d0,$1D(a0)

		lea	(Player_1).w,a1		; NAT: Yes!
		moveq	#3,d6
		bsr.s	.test
		lea	(Player_2).w,a1
		moveq	#4,d6
		bsr.s	.test
		jmp	Sprite_OnScreen_Test.w

.test		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		addi.w	#$10,d0
		cmpi.w	#$20,d0
		bhs.w	.rts
		move.w	$14(a1),d0
		sub.w	$14(a0),d0
		subi.w	#5,d0
		cmpi.w	#$14,d0
		bhs.w	.rts
		btst	#1,$2A(a1)
		bne.s	.rts
		move.b	#$E,$20(a1)
		move.b	#-$3F,$2E(a1)
		clr.b	$3D(a1)
		moveq	#0,d0
		move.b	d0,$2A(a1)
		move.w	d0,$18(a1)
		move.w	d0,$1A(a1)
		move.b	$44(a1),$1E(a1)
		move.b	$45(a1),$1F(a1)
		bset	d6,parent(a0)		; NAT: Set player as riding
		move.l	#loc_3D1B2,(a0)
.rts		rts

; --------------------------------------------------------------------------

loc_3D1B2:
		jsr	Create_New_Sprite3.w
		bne.s	.nope
		move.l	#loc_3D2F6,(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		move.b	4(a0),4(a1)
		move.l	$C(a0),$C(a1)
		move.w	$A(a0),$A(a1)
		move.w	#prio(5),8(a1)
		move.b	#$18,7(a1)
		move.b	#$18,6(a1)
		move.b	#$B,$22(a1)
		move.w	a1,$3C(a0)

.nope		move.b	#9,$22(a0)
		move.l	#loc_3D220,(a0)
		jsr	Sprite_OnScreen_Test.w

Obj_FBZSC_UpdatePls:
		lea	(Player_1).w,a2		; NAT: Yes!
		moveq	#3,d6
		bsr.s	.player
		lea	(Player_2).w,a2
		moveq	#4,d6

.player		btst	d6,parent(a0)		; check if player active
		beq.s	.nopl			; if not, branch
		move.w	$10(a0),$10(a2)
		move.w	$14(a0),d0
		addi.w	#$10,d0
		move.w	d0,$14(a2)
.nopl		rts
; ---------------------------------------------------------------------------

loc_3D220:
		tst.w	$34(a0)
		beq.s	loc_3D232
		subq.w	#1,$34(a0)
		bne.s	loc_3D232
		move.l	#loc_3D278,(a0)

loc_3D232:
		move.w	$34(a0),d0
		add.w	$46(a0),d0
		move.w	d0,$14(a0)
		move.w	$14(a0),$1A(a0)
		move.w	$34(a0),d0
		addq.w	#7,d0
		lsr.w	#3,d0
		move.b	d0,$1D(a0)

		bsr.s	Obj_FBZSC_UpdatePls
		movea.w	$3C(a0),a1
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_3D278:
		tst.b	$36(a0)
		bne.s	loc_3D29C
		addi.l	#$1000,$30(a0)
		move.w	$10(a0),d0
		sub.w	$44(a0),d0
		cmp.w	$38(a0),d0
		blt.s	loc_3D2D2
		move.b	#1,$36(a0)
		bra.s	loc_3D2D2
; ---------------------------------------------------------------------------

loc_3D29C:
		subi.l	#$1000,$30(a0)
		bne.s	loc_3D2D2
		move.l	#loc_3D2F6,(a0)
		move.b	#$A,$22(a0)
		movea.w	$3C(a0),a1
		clr.b	$22(a1)
		bsr.s	Obj_FBZSC_UpdStat

loc_3D2D2:
		move.l	$30(a0),d0
		add.l	d0,$10(a0)
		move.w	$10(a0),$18(a0)
		movea.w	$3C(a0),a1
		move.w	$10(a0),$10(a1)

		btst	#3,parent(a0)
		beq.s	.noson
		move.w	$10(a0),Player_1+x_pos.w

.noson		btst	#4,parent(a0)
		beq.s	loc_3D2F6
		move.w	$10(a0),Player_2+x_pos.w
; ---------------------------------------------------------------------------

loc_3D2F6:
		jmp	Sprite_OnScreen_Test.w

Obj_FBZSC_UpdStat:
		lea	(Player_1).w,a2		; NAT: Yes!
		moveq	#3,d6
		bsr.s	.player
		lea	(Player_2).w,a2
		moveq	#4,d6

.player		btst	d6,parent(a0)		; check if player active
		beq.s	.nopl			; if not, branch
		clr.b	$20(a2)
		clr.b	$2E(a2)
		bset	#1,$2A(a2)
.nopl		rts
; ---------------------------------------------------------------------------
Map_FBZSpiderCrane:include "Levels/FBZ/Misc Object Data/Map - Spider Crane.asm"

; ---------------------------------------------------------------------------

Obj_FBZMagneticPendulum:

		move.l	#loc_3D4C2,(a0)
		move.b	#4,4(a0)
		move.b	#$10,6(a0)
		move.b	#$10,7(a0)
		move.w	#prio(3),8(a0)
		move.w	#$2323,$A(a0)
		move.l	#Map_FBZMagneticPendulum,$C(a0)
		jsr	Create_New_Sprite3.w
		bne.s	loc_3D496
		move.w	a1,$44(a0)
		move.l	#loc_3D736,(a1)
		move.w	$10(a0),$12(a1)
		move.w	$14(a0),$16(a1)
		move.w	a0,$46(a1)

loc_3D496:
		moveq	#-$80,d0
		tst.b	$2C(a0)
		bpl.s	loc_3D4A8
		addi.w	#$40,d0
		move.b	#1,$22(a0)

loc_3D4A8:
		move.w	respawn_addr(a0),d1
		beq.s	loc_3D4BE
		movea.w	d1,a1
		btst	#0,(a1)
		beq.s	loc_3D4BE
		st	$2E(a0)
		addi.w	#$80,d0

loc_3D4BE:

		move.b	d0,$26(a0)

loc_3D4C2:
		move.w	$10(a0),d0
		andi.w	#-$80,d0
		sub.w	(Camera_X_pos_coarse_back).w,d0
		cmpi.w	#$280,d0
		bls.s	loc_3D506
		move.w	$44(a0),d0
		beq.s	loc_3D4E0
		movea.w	d0,a1
		st	5(a1)

loc_3D4E0:
		move.w	respawn_addr(a0),d0
		beq.s	loc_3D500
		movea.w	d0,a1
		move.b	$26(a0),d0
		tst.b	$2C(a0)
		bmi.s	loc_3D4F6
		addi.b	#$40,d0

loc_3D4F6:
		moveq	#0,d1
		tst.b	d0
		bmi.s	loc_3D4FE
		moveq	#1,d1

loc_3D4FE:
		move.b	d1,(a1)

loc_3D500:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_3D506:
		lea	Player_1.w,a3		; NAT: oopsy doopsy
		lea	Player_2.w,a4
	;	move.w	parent(a0),a2
		tst.b	$2F(a0)
		beq.w	loc_3D730
		bmi.s	loc_3D542

		lea	.speed(pc),a5
		bsr.w	Obj_FMP_Run		; NAT: Run this cool cool

		subq.b	#1,$2F(a0)
		bne.w	loc_3D730

		lea	.idk(pc),a5
		bsr.w	Obj_FMP_Run		; NAT: Run this cool cool
		bra.w	loc_3D730

.idk		clr.b	$2E(a2)
		bclr	#1,$2A(a2)
		rts

.speed		move.w	$18(a2),d0
		ext.l	d0
		lsl.l	#8,d0
		add.l	d0,$10(a2)
		move.w	$1A(a2),d0
		ext.l	d0
		lsl.l	#8,d0
		add.l	d0,$14(a2)
.rts		rts
; ---------------------------------------------------------------------------

Obj_FMP_Run:
		tst.b	Parent(a0)		; NAT: check p1
		beq.s	.p2			; branch if yes
		lea	(a3),a2			; get p1 addr
		jsr	(a5)			; run

.p2		tst.b	Parent+1(a0)		; NAT: check p1
		beq.s	loc_3D506.rts		; branch if yes
		lea	(a4),a2			; get p2 addr
		jmp	(a5)			; run
; ---------------------------------------------------------------------------

loc_3D542:
		move.w	$30(a0),d0
		add.w	d0,$26(a0)
		moveq	#6,d1
		move.b	$26(a0),d0
		subi.b	#$40,d0
		bmi.s	loc_3D558
		neg.w	d1

loc_3D558:
		add.w	d1,$30(a0)
		move.b	$26(a0),d0
		tst.b	$2C(a0)
		bpl.s	loc_3D594
		tst.w	$30(a0)
		bpl.s	loc_3D580
		tst.b	d0
		bpl.w	loc_3D640
		cmpi.b	#-$40,d0
		bhi.w	loc_3D640
		moveq	#-$40,d0
		moveq	#0,d1
		bra.s	loc_3D5C4
; ---------------------------------------------------------------------------

loc_3D580:
		tst.b	d0
		bmi.w	loc_3D640
		cmpi.b	#$40,d0
		blo.w	loc_3D640
		moveq	#$40,d0
		moveq	#-1,d1
		bra.s	loc_3D5C4
; ---------------------------------------------------------------------------

loc_3D594:
		addi.b	#$40,d0
		tst.w	$30(a0)
		bpl.s	loc_3D5B2
		tst.b	d0
		bpl.w	loc_3D640
		cmpi.b	#-$40,d0
		bhi.w	loc_3D640
		moveq	#-$80,d0
		moveq	#0,d1
		bra.s	loc_3D5C4
; ---------------------------------------------------------------------------

loc_3D5B2:
		tst.b	d0
		bmi.w	loc_3D640
		cmpi.b	#$40,d0
		blo.w	loc_3D640
		moveq	#0,d0
		moveq	#-1,d1

loc_3D5C4:

		move.b	d0,$26(a0)
		clr.b	$27(a0)
		move.b	d1,$2E(a0)
		clr.b	$2F(a0)
		moveq	#-$62,d0
		jsr	Play_Sound_2.w
		tst.b	$32(a0)
		beq.w	loc_3D730
		clr.b	$32(a0)
		move.b	#1,$2F(a0)
		moveq	#0,d0
		move.w	$30(a0),d0
		bpl.s	loc_3D5F8
		neg.w	d0

loc_3D5F8:
		lsl.l	#8,d0
		divu.w	#$51,d0
		cmpi.w	#$100,d0
		bhs.s	loc_3D608
		move.w	#$100,d0

loc_3D608:
		tst.b	$2C(a0)
		bpl.s	loc_3D628

		neg.w	d0
		lea	.setspd(pc),a5
		bsr.w	Obj_FMP_Run		; NAT: Run this cool cool

		tst.b	$26(a0)
		bmi.s	loc_3D648
		lea	.negspd(pc),a5
		bsr.w	Obj_FMP_Run		; NAT: Run this cool cool
		bra.s	loc_3D648

.setspd		clr.w	$1A(a2)
		move.w	d0,$18(a2)
		move.w	d0,$1C(a2)
		rts

.negspd		neg.w	$1C(a2)
		rts
; ---------------------------------------------------------------------------

loc_3D628:
		lea	loc_3D608.setspd(pc),a5
		bsr.w	Obj_FMP_Run		; NAT: Run this cool cool

		tst.b	$26(a0)
		bpl.s	loc_3D648

		lea	loc_3D608.negspd(pc),a5
		bsr.w	Obj_FMP_Run		; NAT: Run this cool cool
		bra.s	loc_3D648
; ---------------------------------------------------------------------------

loc_3D640:

		tst.b	$32(a0)
		beq.w	loc_3D730

loc_3D648:

		move.b	$26(a0),d0
		jsr	GetSineCosine.w
		swap	d1
		clr.w	d1
		asr.l	#1,d1
		move.l	d1,d3
		asr.l	#3,d3
		add.l	d3,d1
		swap	d0
		clr.w	d0
		asr.l	#1,d0
		move.l	d0,d2
		asr.l	#3,d2
		add.l	d2,d0

		btst	#2,$2A(a3)		; NAT: Check both pls
		bne.s	loc_3D67C
		btst	#2,$2A(a4)
		bne.s	loc_3D67C

		asr.l	#2,d3
		add.l	d3,d1
		asr.l	#2,d2
		add.l	d2,d0
		bra.s	loc_3D684

.spdstuff	move.w	d1,$10(a2)
		move.w	d0,$14(a2)
		swap	d0
		move.b	d0,$26(a2)
		swap	d0
		rts

.speeds		move.w	d1,$18(a2)
		move.w	d0,$1A(a2)
		rts
; ---------------------------------------------------------------------------

loc_3D67C:
		asr.l	#4,d3
		sub.l	d3,d1
		asr.l	#4,d2
		sub.l	d2,d0

loc_3D684:
		swap	d1
		add.w	$10(a0),d1
		move.b	$26(a0),d0
		addi.b	#$40,d0
		swap	d0
		add.w	$14(a0),d0

		lea	loc_3D648.spdstuff(pc),a5
		bsr.w	Obj_FMP_Run		; NAT: Run this cool cool

		tst.b	$32(a0)
		beq.w	loc_3D730
		move.b	$26(a0),d0
		addi.b	#$40,d0
		jsr	GetSineCosine.w
		tst.w	$30(a0)
		bpl.s	loc_3D6C4
		neg.w	d1
		neg.w	d0

loc_3D6C4:
		lea	loc_3D648.speeds(pc),a5
		bsr.w	Obj_FMP_Run		; NAT: Run this cool cool

		move.b	(Ctrl_1_pressed_logical).w,d0
		andi.w	#$70,d0
		beq.s	loc_3D730

		move.b	$26(a0),d0
		jsr	GetSineCosine.w
		move.w	d1,d3
		lsl.w	#3,d1
		sub.w	d3,d1
		move.w	d0,d2
		lsl.w	#3,d0
		sub.w	d2,d0

		lea	loc_3D730.dosomething(pc),a5
		bsr.w	Obj_FMP_Run		; NAT: Run this cool cool
		moveq	#$62,d0
		jsr	Play_Sound_2.w

loc_3D730:
		jmp	Draw_Sprite.w

.dosomething	clr.b	$32(a0)
		clr.b	$2E(a2)
		clr.b	$3D(a2)
		bset	#1,$2A(a2)
		move.b	#1,$40(a2)
		bset	#2,$2A(a2)
		move.b	#2,$20(a2)
		move.b	#$E,$1E(a2)
		move.b	#7,$1F(a2)
		clr.w	$1C(a2)
		move.w	d0,$1A(a2)
		move.w	d1,$18(a2)
		rts
; ---------------------------------------------------------------------------

loc_3D736:
		move.l	#loc_3D78C,(a0)
		move.b	#4,4(a0)
		move.b	#$10,6(a0)
		move.b	#$10,7(a0)
		move.w	#prio(3),8(a0)
		move.w	#$2323,$A(a0)
		move.l	#Map_FBZMagneticPendulum,$C(a0)
		move.b	#3,$22(a0)
		jsr	Create_New_Sprite3.w
		bne.s	loc_3D78C
		move.w	a1,$44(a0)
		move.l	#loc_3D908,(a1)
		move.w	$12(a0),$10(a1)
		move.w	$16(a0),$14(a1)
		move.w	$46(a0),$46(a1)

loc_3D78C:

		tst.b	5(a0)
		beq.s	loc_3D7A4
		move.w	$44(a0),d0
		beq.s	loc_3D79E
		movea.w	d0,a1
		st	5(a1)

loc_3D79E:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_3D7A4:
		movea.w	$46(a0),a1
		move.b	$26(a1),d0
		jsr	GetSineCosine.w
		swap	d1
		clr.w	d1
		asr.l	#1,d1
		move.l	d1,d3
		asr.l	#3,d3
		sub.l	d3,d1
		swap	d1
		add.w	$12(a0),d1
		move.w	d1,$10(a0)
		swap	d0
		clr.w	d0
		asr.l	#1,d0
		move.l	d0,d3
		asr.l	#3,d3
		sub.l	d3,d0
		swap	d0
		add.w	$16(a0),d0
		move.w	d0,$14(a0)
		tst.b	$2F(a1)
		bne.w	.disp

		lea	(Player_1).w,a2		; NAT: check attract
		lea	parent(a1),a3		;
		bsr.s	.test
		lea	(Player_2).w,a2
		addq.w	#1,a3			; goto tails
		bsr.s	.test
.disp		jmp	Draw_Sprite.w

.test		tst.b	$2E(a2)
		bne.w	loc_3D902
		cmpi.b	#4,5(a2)
		bhs.w	loc_3D902
		tst.b	(Debug_On).w
		bne.w	loc_3D902
		tst.b	$2C(a1)
		bpl.s	loc_3D87A
		tst.w	$18(a2)
		bmi.w	loc_3D902
		move.w	$10(a0),d0
		subq.w	#8,d0
		cmp.w	$10(a2),d0
		bhi.w	loc_3D902
		addi.w	#$18,d0
		cmp.w	$10(a2),d0
		blo.w	loc_3D902
		moveq	#$1D,d0
		moveq	#$21,d1
		btst	#2,$2A(a2)
		bne.s	loc_3D848
		moveq	#$22,d0
		moveq	#$26,d1

loc_3D848:

		tst.b	$2E(a1)
		beq.s	loc_3D858
		subq.w	#1,d0
		neg.w	d0
		subq.w	#1,d1
		neg.w	d1
		exg	d0,d1

loc_3D858:
		move.w	$14(a0),d2
		sub.w	d0,d2
		cmp.w	$14(a2),d2
		blo.w	loc_3D902
		move.w	$14(a0),d2
		sub.w	d1,d2
		cmp.w	$14(a2),d2
		bhi.w	loc_3D902
		move.w	$18(a2),d0
		bra.s	loc_3D8E2
; ---------------------------------------------------------------------------

loc_3D87A:
		tst.w	$1A(a2)
		bpl.w	loc_3D902
		move.w	$14(a0),d0
		addq.w	#8,d0
		cmp.w	$14(a2),d0
		blo.w	loc_3D902
		subi.w	#$18,d0
		cmp.w	$14(a2),d0
		bhi.w	loc_3D902
		moveq	#$1D,d0
		moveq	#$21,d1
		btst	#2,$2A(a2)
		bne.s	loc_3D8B4
		moveq	#$22,d0
		moveq	#$26,d1

loc_3D8B4:

		tst.b	$2E(a1)
		beq.s	loc_3D8C4
		subq.w	#1,d0
		neg.w	d0
		subq.w	#1,d1
		neg.w	d1
		exg	d0,d1

loc_3D8C4:
		move.w	$10(a0),d2
		sub.w	d0,d2
		cmp.w	$10(a2),d2
		blo.s	loc_3D902
		move.w	$10(a0),d2
		sub.w	d1,d2
		cmp.w	$10(a2),d2
		bhi.s	loc_3D902
		move.w	$1A(a2),d0
		neg.w	d0

loc_3D8E2:
		mulu.w	#$51,d0
		lsr.l	#8,d0
		tst.b	$2E(a1)
		beq.s	loc_3D8F0
		neg.w	d0

loc_3D8F0:
		st	$2F(a1)
		move.w	d0,$30(a1)
		st	$32(a1)
		move.b	#1,$2E(a2)
		st	(a3)		; NAT: Enable object

loc_3D902:
		rts
; ---------------------------------------------------------------------------

loc_3D908:
		move.l	#loc_3D93A,(a0)

loc_3D90E:
		move.b	#$44,4(a0)
		move.b	#$70,6(a0)
		move.b	#$70,7(a0)
		move.w	#prio(3),8(a0)
		move.w	#$2323,$A(a0)
		move.l	#Map_FBZMagneticPendulum,$C(a0)
		move.w	#5,$16(a0)

loc_3D93A:
		tst.b	5(a0)
		beq.s	loc_3D946
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_3D946:
		movea.w	$46(a0),a1
		move.w	$10(a0),d3
		swap	d3
		clr.w	d3
		move.w	$14(a0),d2
		swap	d2
		clr.w	d2
		move.b	$26(a1),d0
		jsr	GetSineCosine.w
		swap	d1
		clr.w	d1
		asr.l	#4,d1
		swap	d0
		clr.w	d0
		asr.l	#4,d0
		add.l	d1,d3
		add.l	d0,d2
		move.l	d1,d5
		move.l	d0,d4
		asr.l	#2,d5
		asr.l	#2,d4
		add.l	d5,d3
		add.l	d4,d2
		asr.l	#2,d5
		asr.l	#2,d4
		add.l	d5,d1
		add.l	d4,d0
		lea	$18(a0),a1
		moveq	#4,d4

loc_3D98E:
		swap	d3
		swap	d2
		move.w	d3,(a1)+
		move.w	d2,(a1)+
		addq.w	#1,a1
		move.b	#2,(a1)+
		swap	d3
		swap	d2
		add.l	d1,d3
		add.l	d0,d2
		dbf	d4,loc_3D98E
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
Map_FBZMagneticPendulum:include "Levels/FBZ/Misc Object Data/Map - Magnetic Pendulum.asm"

; ---------------------------------------------------------------------------

Obj_MHZ_Pollen_Spawner:
		cmpi.b	#$10,(Pollen_Counter).w
		bhs.s	locret_3DA22
		lea	$2E(a0),a3
		lea	(Player_1).w,a2
		bsr.s	sub_3DA24
		lea	(Player_2).w,a2
		tst.b	4(a2)
		bpl.s	locret_3DA22
		lea	$30(a0),a3
		bsr.s	sub_3DA24

locret_3DA22:

		rts

; =============== S U B R O U T I N E =======================================


sub_3DA24:

		cmpi.b	#$C,$46(a2)
		bne.s	locret_3DA22
		btst	#1,$2A(a2)
		bne.w	loc_3DAC4
		jsr	Random_Number.w
		andi.w	#3,d0
		bne.s	locret_3DA22
		move.w	(a3),d2
		beq.s	loc_3DA58
		move.w	#0,(a3)
		btst	#3,$2A(a2)
		bne.s	loc_3DA58
		cmpi.w	#$400,d2
		bhs.s	loc_3DACA

loc_3DA58:

		move.w	$18(a2),d2
		bpl.s	loc_3DA60
		neg.w	d2

loc_3DA60:
		cmpi.w	#$500,d2
		blo.s	locret_3DAC2
		jsr	Create_New_Sprite3.w
		bne.s	locret_3DAC2
		bsr.w	sub_3DB68
		ori.b	#4,4(a1)
		move.w	#prio(0),8(a1)
		move.b	#4,7(a1)
		move.b	#4,6(a1)
		move.w	$10(a2),$10(a1)
		move.w	$14(a2),$14(a1)
		addi.w	#$10,$14(a1)
		subi.w	#$500,d2
		lsr.w	#4,d2
		addi.w	#$200,d2
		neg.w	d2
		move.w	d2,$1A(a1)
		swap	d0
		andi.w	#3,d0
		addq.w	#2,d0
		move.w	d0,$34(a1)
		move.l	#Obj_MHZ_Pollen,(a1)
		addq.b	#1,(Pollen_Counter).w

locret_3DAC2:

		rts
; ---------------------------------------------------------------------------

loc_3DAC4:
		move.w	$1A(a2),(a3)
		rts
; ---------------------------------------------------------------------------

loc_3DACA:
		move.w	#$100,d2
		lea	(word_3DB50).l,a4
		moveq	#5,d6

loc_3DAD6:
		jsr	Create_New_Sprite3.w
		bne.s	loc_3DB4A
		bsr.w	sub_3DB68
		ori.b	#4,4(a1)
		move.w	#prio(0),8(a1)
		move.b	#4,7(a1)
		move.b	#4,6(a1)
		move.w	$10(a2),$10(a1)
		move.w	$14(a2),$14(a1)
		addi.w	#$18,$14(a1)
		jsr	Random_Number.w
		move.w	d0,$26(a1)
		andi.w	#$1FF,d0
		subi.w	#$100,d0
		add.w	(a4)+,d0
		move.w	d0,$18(a1)
		swap	d0
		andi.w	#$FF,d0
		add.w	d2,d0
		sub.w	(a4)+,d0
		neg.w	d0
		move.w	d0,$1A(a1)
		swap	d0
		andi.w	#3,d0
		addq.w	#2,d0
		move.w	d0,$34(a1)
		move.l	#loc_3DC18,(a1)
		addq.b	#1,(Pollen_Counter).w

loc_3DB4A:
		dbf	d6,loc_3DAD6
		rts
; End of function sub_3DA24

; ---------------------------------------------------------------------------
word_3DB50:	dc.w	$80,  $100
		dc.w   $100,   $C0
		dc.w   $180,   $80
		dc.w  $FF80,  $100
		dc.w  $FF00,   $C0
		dc.w  $FE80,   $80

; =============== S U B R O U T I N E =======================================


sub_3DB68:

		tst.b	(__u_F7C1).w
		bne.s	loc_3DB7E
		move.l	#Map_MHZPollen,$C(a1)
		move.w	#-$1C98,$A(a1)
		rts
; ---------------------------------------------------------------------------

loc_3DB7E:
		move.b	$32(a0),d0
		addq.b	#1,$32(a0)
		andi.w	#7,d0
		move.b	byte_3DBB0(pc,d0.w),d0
		bne.s	loc_3DBA0
		move.l	#Map_MHZBigLeaves,$C(a1)
		move.w	#-$1C9D,$A(a1)
		rts
; ---------------------------------------------------------------------------

loc_3DBA0:
		move.l	#Map_MHZPollen,$C(a1)
		move.w	#-$1C9D,$A(a1)
		rts
; End of function sub_3DB68

; ---------------------------------------------------------------------------
byte_3DBB0:	dc.b 0
		dc.b 0
		dc.b 1
		dc.b 0
		dc.b 0
		dc.b 0
		dc.b 1
		dc.b 1
; ---------------------------------------------------------------------------

Obj_MHZ_Pollen:
		jsr	MoveSprite2.w
		move.w	$34(a0),d0
		add.w	d0,d0
		add.w	d0,d0
		add.w	d0,$1A(a0)
		bmi.s	loc_3DBD8
		move.l	#loc_3DBE0,(a0)
		move.b	(Level_frame_counter+1).w,$26(a0)

loc_3DBD8:
		bsr.s	sub_3DC3A
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_3DBE0:

		move.b	$26(a0),d0
		addq.b	#4,$26(a0)
		jsr	GetSineCosine.w
		move.w	d0,$18(a0)
		jsr	MoveSprite2.w
		move.w	$34(a0),d0
		add.w	d0,$1A(a0)
		tst.b	4(a0)
		bmi.s	loc_3DC10
		move.w	#$7F00,$10(a0)
		subq.b	#1,(Pollen_Counter).w

loc_3DC10:
		bsr.s	sub_3DC3A
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_3DC18:
		jsr	MoveSprite2.w
		move.w	$34(a0),d0
		add.w	d0,d0
		add.w	d0,d0
		add.w	d0,$1A(a0)
		bmi.s	loc_3DC32
		move.l	#loc_3DBE0,(a0)

loc_3DC32:
		bsr.s	sub_3DC3A
		jmp	Draw_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_3DC3A:

		subq.b	#1,$24(a0)
		bpl.s	locret_3DC5A
		move.b	#7,$24(a0)
		addq.b	#1,$22(a0)
		andi.b	#1,$22(a0)
		tst.w	$18(a0)
		bpl.s	locret_3DC5A
		addq.b	#2,$22(a0)

locret_3DC5A:

		rts
; End of function sub_3DC3A

; ---------------------------------------------------------------------------
Map_MHZPollen:	include "Levels/MHZ/Misc Object Data/Map - Pollen Leaves.asm"

Map_MHZBigLeaves:	include "Levels/MHZ/Misc Object Data/Map - Big Leaves.asm"

; ---------------------------------------------------------------------------

Obj_03_2:
		move.b	#-$30,7(a0)
		btst	#0,$2A(a0)
		beq.s	loc_3DCB4
		move.l	#loc_3DE6A,(a0)
		bra.w	loc_3DE6A
; ---------------------------------------------------------------------------

loc_3DCB4:
		move.l	#loc_3DCBA,(a0)

loc_3DCBA:
		lea	(Player_1).w,a1
		moveq	#3,d6
		bsr.s	sub_3DCD0
		lea	(Player_2).w,a1
		moveq	#4,d6			; NAT: FUCK SANIC TEEM
		bsr.s	sub_3DCD0
		jmp	Delete_Sprite_If_Not_In_Range.w

; =============== S U B R O U T I N E =======================================


sub_3DCD0:

		btst	d6,$2A(a0)
		bne.w	loc_3DD9E
		btst	#1,$2A(a1)
		bne.w	locret_3DD9C
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		tst.w	$18(a1)
		beq.w	locret_3DD9C
		bmi.s	loc_3DD48
		cmpi.w	#-$30,d0
		bgt.w	locret_3DD9C
		cmpi.w	#-$40,d0
		blt.w	locret_3DD9C
		move.w	$14(a1),d1
		sub.w	$14(a0),d1
		addi.w	#$30,d1
		cmpi.w	#$20,d1
		bhs.w	locret_3DD9C
		tst.b	$2E(a1)
		bne.s	locret_3DD9C
		bclr	#0,$2A(a1)
		jsr	RideObject_SetRide.w
		move.b	#-$80,$2D(a1)
		move.w	#$14,$32(a1)
		move.w	$1C(a1),d0
		cmpi.w	#$600,d0
		bhs.s	locret_3DD9C
		move.w	#$600,$1C(a1)
		rts
; ---------------------------------------------------------------------------

loc_3DD48:
		cmpi.w	#$30,d0
		blt.s	locret_3DD9C
		cmpi.w	#$40,d0
		bgt.s	locret_3DD9C
		move.w	$14(a1),d1
		sub.w	$14(a0),d1
		subi.w	#$10,d1
		cmpi.w	#$20,d1
		bhs.s	locret_3DD9C
		tst.b	$2E(a1)
		bne.s	locret_3DD9C
		bset	#0,$2A(a1)
		jsr	RideObject_SetRide.w
		move.b	#-$80,$27(a1)
		move.b	#-$80,$2D(a1)
		move.w	$1C(a1),d0
		neg.w	d0
		cmpi.w	#$600,d0
		bhs.s	locret_3DD9C
		move.w	#-$600,$1C(a1)
		move.w	#$14,$32(a1)

locret_3DD9C:

		rts
; ---------------------------------------------------------------------------

loc_3DD9E:
		move.w	$1C(a1),d0
		bpl.s	loc_3DDA6
		neg.w	d0

loc_3DDA6:
		cmpi.w	#$500,d0
		blo.s	loc_3DE12
		btst	#1,$2A(a1)
		bne.s	loc_3DE18
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		addi.w	#$40,d0
		bmi.s	loc_3DDF4
		cmpi.w	#$80,d0
		blo.s	loc_3DE36
		bclr	#3,$2A(a1)
		bclr	d6,$2A(a0)
		move.b	#-$80,$26(a1)
		move.b	#0,$27(a1)
		move.b	#0,$2D(a1)
		neg.w	$1C(a1)
		neg.w	$18(a1)
		bset	#0,$2A(a1)
		rts
; ---------------------------------------------------------------------------

loc_3DDF4:
		bclr	#3,$2A(a1)
		bclr	d6,$2A(a0)
		move.b	#0,$26(a1)
		move.b	#0,$27(a1)
		move.b	#0,$2D(a1)
		rts
; ---------------------------------------------------------------------------

loc_3DE12:
		move.b	#0,$27(a1)

loc_3DE18:
		bclr	#3,$2A(a1)
		bclr	d6,$2A(a0)
		move.b	#0,$30(a1)
		move.b	#4,$31(a1)
		move.b	#0,$2D(a1)
		rts
; ---------------------------------------------------------------------------

loc_3DE36:
		btst	#3,$2A(a1)
		beq.w	locret_3DD9C
		move.w	d0,d2
		addi.b	#-$80,d0
		jsr	GetSineCosine.w
		move.w	d1,d3
		asr.w	#4,d1
		add.w	$14(a0),d1
		moveq	#0,d0
		move.b	$1E(a1),d0
		muls.w	d3,d0
		asr.w	#8,d0
		add.w	d0,d1
		move.w	d1,$14(a1)
		move.b	d2,$27(a1)
		rts
; End of function sub_3DCD0

; ---------------------------------------------------------------------------

loc_3DE6A:

		lea	(Player_1).w,a1
		moveq	#3,d6
		bsr.s	sub_3DE80
		lea	(Player_2).w,a1
		moveq	#4,d6			; NAT: FUCK SANIC TEEM
		bsr.s	sub_3DE80
		jmp	Delete_Sprite_If_Not_In_Range.w

; =============== S U B R O U T I N E =======================================


sub_3DE80:

		btst	d6,$2A(a0)
		bne.w	loc_3DF48
		btst	#1,$2A(a1)
		bne.w	locret_3DEF2
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		tst.w	$18(a1)
		beq.w	locret_3DEF2
		bpl.s	loc_3DEF4
		cmpi.w	#$30,d0
		blt.s	locret_3DEF2
		cmpi.w	#$40,d0
		bgt.s	locret_3DEF2
		move.w	$14(a1),d1
		sub.w	$14(a0),d1
		addi.w	#$30,d1
		cmpi.w	#$20,d1
		bhs.s	locret_3DEF2
		tst.b	$2E(a1)
		bne.s	locret_3DEF2
		bset	#0,$2A(a1)
		jsr	RideObject_SetRide.w
		move.b	#-$7C,$2D(a1)
		move.w	#$14,$32(a1)
		move.w	$1C(a1),d0
		neg.w	d0
		cmpi.w	#$600,d0
		bhs.s	locret_3DEF2
		move.w	#-$600,$1C(a1)

locret_3DEF2:

		rts
; ---------------------------------------------------------------------------

loc_3DEF4:
		cmpi.w	#-$30,d0
		bgt.s	locret_3DEF2
		cmpi.w	#-$40,d0
		blt.s	locret_3DEF2
		move.w	$14(a1),d1
		sub.w	$14(a0),d1
		subi.w	#$10,d1
		cmpi.w	#$20,d1
		bhs.s	locret_3DEF2
		tst.b	$2E(a1)
		bne.s	locret_3DEF2
		bclr	#0,$2A(a1)
		jsr	RideObject_SetRide.w
		move.b	#-$80,$27(a1)
		move.b	#-$7C,$2D(a1)
		move.w	$1C(a1),d0
		cmpi.w	#$600,d0
		bhs.s	locret_3DEF2
		move.w	#$600,$1C(a1)
		move.w	#$14,$32(a1)
		rts
; ---------------------------------------------------------------------------

loc_3DF48:
		move.w	$1C(a1),d0
		bpl.s	loc_3DF50
		neg.w	d0

loc_3DF50:
		cmpi.w	#$500,d0
		blo.s	loc_3DFBE
		btst	#1,$2A(a1)
		bne.s	loc_3DFC4
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		addi.w	#$40,d0
		bmi.s	loc_3DF92
		cmpi.w	#$80,d0
		blo.w	loc_3DFE2
		bclr	#3,$2A(a1)
		bclr	d6,$2A(a0)
		move.b	#0,$26(a1)
		move.b	#0,$27(a1)
		move.b	#0,$2D(a1)
		rts
; ---------------------------------------------------------------------------

loc_3DF92:
		bclr	#3,$2A(a1)
		bclr	d6,$2A(a0)
		move.b	#-$80,$26(a1)
		move.b	#0,$27(a1)
		move.b	#0,$2D(a1)
		neg.w	$1C(a1)
		neg.w	$18(a1)
		bclr	#0,$2A(a1)
		rts
; ---------------------------------------------------------------------------

loc_3DFBE:
		move.b	#0,$27(a1)

loc_3DFC4:
		bclr	#3,$2A(a1)
		bclr	d6,$2A(a0)
		move.b	#0,$30(a1)
		move.b	#4,$31(a1)
		move.b	#0,$2D(a1)
		rts
; ---------------------------------------------------------------------------

loc_3DFE2:
		btst	#3,$2A(a1)
		beq.w	locret_3DEF2
		move.w	d0,d2
		jsr	GetSineCosine.w
		move.w	d1,d3
		asr.w	#4,d1
		add.w	$14(a0),d1
		moveq	#0,d0
		move.b	$1E(a1),d0
		muls.w	d3,d0
		asr.w	#8,d0
		add.w	d0,d1
		move.w	d1,$14(a1)

loc_3E00C:
		subi.b	#-$80,d2
		neg.b	d2
		move.b	d2,$27(a1)
		rts
; End of function sub_3DE80

; ---------------------------------------------------------------------------

Obj_MHZMushroomCap:
		; init routine
		move.w	#prio(1),priority(a0)
		move.b	subtype(a0),d0		; If bit 7 set...
		bpl.s	.highspritepriority
		move.w	#prio(6),priority(a0)
; loc_3E02A:
.highspritepriority:
		move.b	d0,d1
		move.w	#$C369,art_tile(a0)	; Dark-spotted mushroom
		andi.b	#1,d0			; If bit 0 set...
		beq.s	.lightmushroom
		move.w	#$C399,art_tile(a0)	; Light-spotted mushroom
		move.b	#$14,$36(a0)		; Change animation timing a little, so not all mushrooms are synchronised
; loc_3E044:
.lightmushroom:
		add.b	d1,d1			; If bit 6 set...
		bpl.s	.highplanepriority
		andi.w	#$7FFF,art_tile(a0)	; Strip 'high priority' bit
; loc_3E04E:
.highplanepriority:
		move.l	#Map_MHZMushroomCap,mappings(a0)
		ori.b	#4,render_flags(a0)
		move.b	#$20,width_pixels(a0)
		move.b	#$10,height_pixels(a0)
		bset	#7,status(a0)		; ???
		move.w	x_pos(a0),$38(a0)	; Store initial x_pos
		move.w	y_pos(a0),$3A(a0)	; Store initial y_pos
		move.l	#Obj_MHZMushroomCap_Main,(a0)
; loc_3E080:
Obj_MHZMushroomCap_Main:
		; main routine
		lea	(Ani_MHZMushroomCap).l,a1
		jsr	Animate_Sprite.w
		tst.b	routine(a0)		; Has animation byte_3E1E1 ended?
		beq.s	.animstillgoing
		move.w	#0,anim(a0)		; and prev_anim
		move.b	#0,anim_frame(a0)
		clr.b	routine(a0)
; oc_3E0A2:
.animstillgoing:
		bsr.s	MHZMushroomCap_UpdatePosition
		move.w	#$18,d1
		moveq	#0,d3
		move.b	mapping_frame(a0),d3
		move.b	byte_3E0DA(pc,d3.w),d3
		move.w	x_pos(a0),d4
		jsr	SolidObjectTop.w
		; Bounce player
		lea	(Player_1).w,a1
		moveq	#$30,d5		; $30(a0), player's y_vel
		moveq	#3,d6		; 'Player standing on this object' bit
		bsr.w	MHZMushroomCap_BounceCharacter
		; Bounce sidekick
		lea	(Player_2).w,a1
		moveq	#$32,d5		; $32(a0), sidekick's y_vel
		moveq	#4,d6		; 'Sidekick standing on this object' bit
		bsr.w	MHZMushroomCap_BounceCharacter

		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------
byte_3E0DA:	dc.b $12
		dc.b 8
		dc.b $12
		dc.b $12

; =============== S U B R O U T I N E =======================================

; sub_3E0DE:
MHZMushroomCap_UpdatePosition:
		moveq	#0,d0
		move.b	(Anim_Counters+$F).w,d0	; Update according to level animation
		add.b	$36(a0),d0		; Add in offset value, so not all mushrooms animate identically
		lea	MHZMushroomCap_Positions(pc,d0.w),a1	; Get appropriate data
		; Update x_pos
		move.b	(a1)+,d0
		ext.w	d0
		add.w	$38(a0),d0	; Add initial x_pos
		move.w	d0,x_pos(a0)	; Set x_pos
		; Update y_pos
		move.b	(a1)+,d1
		ext.w	d1
		add.w	$3A(a0),d1	; Add initial y_pos
		move.w	d1,y_pos(a0)	; Set y_pos
		rts
; End of function MHZMushroomCap_UpdatePosition

; ---------------------------------------------------------------------------
; byte_3E106:
MHZMushroomCap_Positions:
		;       X    Y
		dc.b	0,   0
		dc.b	0,   0
		dc.b	0,   0
		dc.b	0,   0
		dc.b   -1,   0
		dc.b   -1,   0
		dc.b   -1,   0
		dc.b   -2,   0
		dc.b   -2,   0
		dc.b   -2,   0
		dc.b   -3,   1
		dc.b   -3,   1
		dc.b   -3,   1
		dc.b   -3,   1
		dc.b   -3,   1
		dc.b   -3,   1
		dc.b   -2,   0
		dc.b   -2,   0
		dc.b   -2,   0
		dc.b   -1,   0
		dc.b   -1,   0
		dc.b   -1,   0
		dc.b	0,   0
		dc.b	0,   0
		dc.b	0,   0
		dc.b	0,   0
		dc.b	1,   0
		dc.b	1,   0
		dc.b	1,   0
		dc.b	2,   0
		dc.b	2,   0
		dc.b	2,   0
		dc.b	3,   1
		dc.b	3,   1
		dc.b	3,   1
		dc.b	3,   1
		dc.b	3,   1
		dc.b	3,   1
		dc.b	2,   0
		dc.b	2,   0
		dc.b	2,   0
		dc.b	1,   0
		dc.b	1,   0
		dc.b	1,   0
		dc.b	0,   0
		dc.b	0,   0
		dc.b	0,   0
		dc.b	0,   0
		dc.b   -1,   0
		dc.b   -1,   0
		dc.b   -1,   0
		dc.b   -2,   0
		dc.b   -2,   0
		dc.b   -2,   0

; =============== S U B R O U T I N E =======================================

; sub_3E172:
MHZMushroomCap_BounceCharacter:
		btst	d6,status(a0)		; Is character standing on object?
		bne.s	.characteronmushroom	; If so, prepare to bounce them
		move.w	y_vel(a1),(a0,d5.w)	; If not, just store character's y_vel
		rts
; loc_3E180:
.characteronmushroom:
		move.b	#1,anim(a0)		; Set mushroom to 'spring' animation
		cmpi.b	#3,mapping_frame(a0)	; Are we at an actual 'spring up' frame?
		bne.s	.locret			; If not, return and don't do anything else to the character
		move.w	(a0,d5.w),d0		; Get character's previous y_vel
		; These checks make the character bounce higher if they hit the mushroom at a high speed
		move.w	#$660,d1
		cmp.w	d1,d0			; Is character going slow?
		blt.s	.bouncecharacter	; If so, make them bounce low
		move.w	#$760,d1
		cmp.w	d1,d0			; Is character going faster?
		blt.s	.bouncecharacter	; If so, make them bounce high
		move.w	#$860,d1		; Otherwise, they're going really fast; make them bounce really high
; loc_3E1A6:
.bouncecharacter:
		addi.w	#$20,d1
		neg.w	d1
		move.w	d1,y_vel(a1)		; Set character's y_vel, bouncing them
		bset	#1,status(a1)		; Set character's 'in air' bit
		bclr	#3,status(a1)		; Clear character's 'on object' bit
		clr.b	jumping(a1)
		clr.b	spin_dash_flag(a1)
		move.b	#$10,anim(a1)		; Set character to 'spring-jumping' animation
		move.b	#2,routine(a1)
		moveq	#$87,d0
		jmp	Play_Sound_2.w	; Play bounce sound
; locret_3E1D8:
.locret:
		rts
; End of function MHZMushroomCap_BounceCharacter

; ---------------------------------------------------------------------------
Ani_MHZMushroomCap:	include "Levels/MHZ/Misc Object Data/Anim - Mushroom Cap.asm"

Map_MHZMushroomCap:include "Levels/MHZ/Misc Object Data/Map - Mushroom Cap.asm"

; ---------------------------------------------------------------------------

Obj_MHZPulleyLift:

		move.l	#Map_MHZPulleyLift,$C(a0)
		move.w	#$424,$A(a0)
		ori.b	#4,4(a0)
		move.w	#prio(5),8(a0)
		move.b	#$40,7(a0)
		move.b	#-$80,6(a0)
		bset	#6,4(a0)
		move.w	$14(a0),$3C(a0)
		moveq	#3,d1
		move.w	d1,$16(a0)
		subq.b	#1,d1
		lea	$18(a0),a2
		lea	word_3E29E(pc),a3

loc_3E280:
		move.w	(a3)+,d0
		add.w	$10(a0),d0
		move.w	d0,(a2)+
		move.w	(a3)+,d0
		add.w	$14(a0),d0
		move.w	d0,(a2)+
		move.w	(a3)+,(a2)+
		dbf	d1,loc_3E280
		move.b	#4,$22(a0)
		bra.s	loc_3E2B0
; ---------------------------------------------------------------------------
word_3E29E:	dc.w	  0,   $40,	0
		dc.w  $FFF0,   $78,	5
		dc.w	$10,   $78,	6
; ---------------------------------------------------------------------------

loc_3E2B0:
		jsr	Create_New_Sprite3.w
		bne.w	loc_3E378
		move.l	#loc_3E472,(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		move.w	$10(a0),$2E(a1)
		subi.w	#$32,$10(a1)
		addi.w	#$3A,$14(a1)
		move.l	$C(a0),$C(a1)
		move.w	$A(a0),$A(a1)
		ori.b	#4,4(a1)
		move.w	8(a0),8(a1)
		move.b	#$C,7(a1)
		move.b	#$30,6(a1)
		move.w	a0,$46(a1)
		move.b	#2,$22(a1)
		move.w	#$34,$36(a1)
		jsr	Create_New_Sprite3.w
		bne.s	loc_3E378
		move.l	#loc_3E472,(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		move.w	$10(a0),$2E(a1)
		addi.w	#$32,$10(a1)
		addi.w	#$3A,$14(a1)
		move.l	$C(a0),$C(a1)
		move.w	$A(a0),$A(a1)
		ori.b	#4,4(a1)
		bset	#0,4(a1)
		move.w	8(a0),8(a1)
		move.b	#$C,7(a1)
		move.b	#$30,6(a1)
		move.b	#2,$22(a1)
		move.w	#$36,$36(a1)
		move.w	a0,$46(a1)

loc_3E378:

		move.l	#loc_3E37E,(a0)

loc_3E37E:
		lea	$18(a0),a2
		move.w	$34(a0),d0
		add.w	$36(a0),d0
		lsr.w	#1,d0
		move.w	d0,d2
		neg.w	d0
		addi.w	#$40,d0
		move.b	#0,5(a2)
		cmpi.w	#$20,d0
		bhi.s	loc_3E3A6
		move.b	#1,5(a2)

loc_3E3A6:
		move.w	d0,d1
		move.w	d2,d3
		sub.w	$38(a0),d2
		beq.s	loc_3E422
		bcc.s	loc_3E3E6
		cmpi.w	#-4,d2
		beq.s	loc_3E3CC
		add.w	$14(a0),d0
		andi.w	#$E,d0
		cmpi.w	#2,d0
		bne.s	loc_3E422

loc_3E3C6:
		subq.w	#2,$14(a0)
		bra.s	loc_3E422
; ---------------------------------------------------------------------------

loc_3E3CC:
		add.w	$14(a0),d0
		andi.w	#$E,d0
		cmpi.w	#2,d0
		beq.s	loc_3E3C6
		cmpi.w	#4,d0
		bne.s	loc_3E422
		subq.w	#4,$14(a0)
		bra.s	loc_3E422
; ---------------------------------------------------------------------------

loc_3E3E6:
		cmpi.w	#4,d2
		beq.s	loc_3E40E
		add.w	$14(a0),d0

loc_3E3F0:
		move.w	d0,d2
		andi.w	#$E,d0
		bne.s	loc_3E422

loc_3E3F8:
		cmp.w	$3C(a0),d2
		beq.s	loc_3E422

loc_3E3FE:
		move.w	d2,$3C(a0)
		tst.b	$2C(a0)
		beq.s	loc_3E422
		subq.b	#1,$2C(a0)
		bra.s	loc_3E422
; ---------------------------------------------------------------------------

loc_3E40E:
		add.w	$14(a0),d0
		addq.w	#2,d0
		move.w	d0,d2
		andi.w	#$E,d0
		beq.s	loc_3E3F8
		move.w	d2,d0
		subq.w	#2,d0
		bra.s	loc_3E3F0
; ---------------------------------------------------------------------------

loc_3E422:

		move.w	d3,$38(a0)
		add.w	$14(a0),d1
		move.w	d1,d0
		move.w	d0,2(a2)
		addi.w	#$38,d0
		move.w	d0,8(a2)
		move.w	d0,$E(a2)
		andi.w	#$F,d1
		move.b	byte_3E462(pc,d1.w),d1
		addi.w	#$10,d1
		move.w	d1,d0
		neg.w	d0
		add.w	$10(a0),d0
		move.w	d0,6(a2)
		add.w	$10(a0),d1
		move.w	d1,$C(a2)
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------
byte_3E462:	dc.b 0
		dc.b 8
		dc.b 8
		dc.b 8
		dc.b 8
		dc.b 8
		dc.b 7
		dc.b 6
		dc.b 5
		dc.b 4
		dc.b 3
		dc.b 2
		dc.b 1
		dc.b 0
		dc.b 0
		dc.b 0
; ---------------------------------------------------------------------------

loc_3E472:

		move.b	#0,$3A(a0)
		movea.w	$46(a0),a3
		move.w	$34(a0),d0
		subq.w	#6,d0
		add.w	$14(a3),d0
		move.w	d0,$14(a0)
		bsr.s	sub_3E4EC
		moveq	#$18,d1
		tst.b	$3A(a0)
		beq.s	loc_3E4AA
		tst.b	$2C(a3)
		beq.s	loc_3E4B6
		cmpi.w	#$40,$34(a0)
		beq.s	loc_3E4B6
		addq.w	#4,$34(a0)
		moveq	#$1C,d1
		bra.s	loc_3E4B6
; ---------------------------------------------------------------------------

loc_3E4AA:
		tst.w	$34(a0)
		beq.s	loc_3E4B6
		subq.w	#4,$34(a0)
		moveq	#$14,d1

loc_3E4B6:

		move.w	$36(a0),d0
		move.w	$34(a0),(a3,d0.w)
		move.b	#3,$22(a0)
		cmp.w	$34(a0),d1
		bhi.s	loc_3E4E2
		move.b	#2,$22(a0)
		addi.w	#$10,d1
		cmp.w	$34(a0),d1
		bhi.s	loc_3E4E2
		move.b	#7,$22(a0)

loc_3E4E2:

		move.w	$2E(a0),d0
		jmp	Sprite_OnScreen_Test2.w

; =============== S U B R O U T I N E =======================================


sub_3E4EC:
		movea.w	$46(a0),a3
		lea	$31(a0),a2
		lea	(Player_2).w,a1
		move.w	(Ctrl_2_logical).w,d0
		bsr.s	sub_3E508
		lea	(Player_1).w,a1
		subq.w	#1,a2
		move.w	(Ctrl_1_logical).w,d0
; End of function sub_3E4EC


; =============== S U B R O U T I N E =======================================


sub_3E508:
		tst.b	(a2)
		beq.w	loc_3E682
		tst.b	4(a1)
		bpl.s	loc_3E58A
		cmpi.b	#4,5(a1)
		bhs.s	loc_3E58A
		tst.b	(Debug_On).w
		bne.s	loc_3E58A
		move.w	d0,d1
		andi.b	#$70,d1
		beq.w	loc_3E5F2
		clr.b	$2E(a1)
		clr.b	(a2)
		move.b	#$12,2(a2)
		andi.w	#$F00,d0
		beq.w	loc_3E546
		move.b	#$3C,2(a2)

loc_3E546:
		btst	#$A,d0
		beq.s	loc_3E552
		move.w	#-$200,$18(a1)

loc_3E552:
		btst	#$B,d0
		beq.s	loc_3E55E
		move.w	#$200,$18(a1)

loc_3E55E:
		move.w	#-$380,$1A(a1)
		bset	#1,$2A(a1)
		move.b	#1,$40(a1)
		move.b	#$E,$1E(a1)
		move.b	#7,$1F(a1)
		move.b	#2,$20(a1)
		bset	#2,$2A(a1)
		rts
; ---------------------------------------------------------------------------

loc_3E58A:

		clr.b	$2E(a1)
		clr.b	(a2)
		move.b	#$3C,2(a2)

locret_3E5E6:
sub_3E598:
		rts
; ---------------------------------------------------------------------------

loc_3E5F2:
		bsr.s	sub_3E598
		btst	#$A,d0
		beq.s	loc_3E600
		bset	#0,$2A(a1)

loc_3E600:
		btst	#$B,d0
		beq.s	loc_3E60C
		bclr	#0,$2A(a1)

loc_3E60C:
		move.b	$2A(a1),d1
		andi.b	#1,d1
		andi.b	#-4,4(a1)
		or.b	d1,4(a1)
		move.b	#-$70,d1
		btst	#9,d0
		beq.s	loc_3E632
		move.b	#1,$3A(a0)
		move.b	#-$6F,d1

loc_3E632:
		btst	#1,d0
		beq.s	loc_3E646
		tst.b	$2C(a3)
		beq.s	loc_3E646
		moveq	#-$78,d0
		jsr	Play_Sound_2.w

loc_3E646:

		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		addi.w	#$42,$14(a1)

loc_3E658:
		move.w	$34(a0),d0
		beq.s	loc_3E66C
		move.b	#-$6F,d1
		cmpi.w	#$20,d0
		blo.s	loc_3E66C
		move.b	#-$6E,d1

loc_3E66C:

		move.b	d1,$22(a1)
		moveq	#0,d0
		move.b	$22(a1),d0
		move.l	a2,-(sp)
		jsr	(Tails_Carry_LoadPLC).l
		movea.l	(sp)+,a2
		rts
; ---------------------------------------------------------------------------

loc_3E682:
		tst.b	2(a2)
		beq.s	loc_3E690
		subq.b	#1,2(a2)
		bne.w	locret_3E71E

loc_3E690:
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		addi.w	#$10,d0
		cmpi.w	#$20,d0
		bhs.w	locret_3E71E
		move.w	$14(a1),d1
		sub.w	$14(a0),d1
		subi.w	#$30,d1
		cmpi.w	#$18,d1
		bhs.w	locret_3E71E
		tst.b	$2E(a1)
		bne.s	locret_3E71E
		cmpi.b	#4,5(a1)
		bhs.s	locret_3E71E
		tst.b	(Debug_On).w
		bne.s	locret_3E71E
		tst.w	$1A(a1)
		beq.s	locret_3E71E
		bmi.s	locret_3E71E
		clr.w	$18(a1)
		clr.w	$1A(a1)
		clr.w	$1C(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		addi.w	#$42,$14(a1)
		move.b	#$14,$20(a1)
		move.b	#0,$3D(a1)
		move.b	#3,$2E(a1)
		andi.b	#-3,4(a1)
		move.b	#1,(a2)
		move.b	#-$70,d1
		moveq	#$4A,d0
		jsr	Play_Sound_2.w
		bra.w	loc_3E658
; ---------------------------------------------------------------------------

locret_3E71E:

		rts
; ---------------------------------------------------------------------------
Map_MHZPulleyLift:include "Levels/MHZ/Misc Object Data/Map - Pulley Lift.asm"

; ---------------------------------------------------------------------------

Obj_MHZCurledVine:

		jsr	Create_New_Sprite3.w
		bne.s	loc_3E89C
		move.l	#loc_3E9A6,(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		move.l	#Map_MHZCurledVine,$C(a1)
		move.w	#$4353,$A(a1)
		ori.b	#4,4(a1)
		move.w	#prio(5),8(a1)
		move.b	#$40,7(a1)
		move.b	#$30,6(a1)
		bset	#6,4(a1)
		move.w	#8,$16(a1)
		move.l	#-$C0000,$32(a0)
		bset	#7,$2A(a0)
		move.w	a1,$46(a0)
		move.l	#loc_3E8A2,(a0)
		bra.s	loc_3E8A2
; ---------------------------------------------------------------------------

loc_3E89C:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_3E8A2:

		movea.w	$46(a0),a1
		moveq	#0,d1
		moveq	#0,d2
		move.b	$2A(a0),d1
		andi.b	#$18,d1
		beq.s	loc_3E8C4
		move.b	$36(a0),d1
		move.b	$37(a0),d2
		cmp.b	d1,d2
		blo.s	loc_3E8C2
		move.b	d2,d1

loc_3E8C2:
		addq.b	#1,d1

loc_3E8C4:
		move.b	byte_3E8F6(pc,d1.w),d2
		move.w	d2,-(sp)
		lsl.w	#2,d1
		move.l	dword_3E8D2(pc,d1.w),d0
		bra.s	loc_3E900
; ---------------------------------------------------------------------------
dword_3E8D2:	dc.l $FFF40000
		dc.l $FFFA0000
		dc.l $FFFB0000
		dc.l $FFFC0000
		dc.l $FFFD0000
		dc.l $FFFE0000
		dc.l Chunk_table
		dc.l Chunk_table
		dc.l Chunk_table
byte_3E8F6:	dc.b $40
		dc.b $40
		dc.b $40
		dc.b $40
		dc.b $50
		dc.b $60
		dc.b $70
		dc.b $80
		dc.b $80
		dc.b 0
; ---------------------------------------------------------------------------

loc_3E900:
		move.l	$32(a0),d4
		cmp.l	d0,d4
		beq.s	loc_3E918

loc_3E908:
		bcs.s	loc_3E912

loc_3E90A:
		subi.l	#$10000,d4
		bra.s	loc_3E918
; ---------------------------------------------------------------------------

loc_3E912:
		addi.l	#$10000,d4

loc_3E918:

		move.l	d4,$32(a0)
		move.l	d4,d1
		asr.l	#1,d1
		move.w	$10(a0),d2
		move.w	$14(a0),d3
		subi.w	#$38,d2
		move.l	#$A0000,d5
		moveq	#7,d6
		lea	$18(a1),a2
		move.l	d1,-(sp)
		bra.s	loc_3E952
; ---------------------------------------------------------------------------

loc_3E93C:
		move.l	d1,-(sp)
		swap	d5
		move.w	d5,d0
		swap	d5
		jsr	GetSineCosine.w
		asr.w	#4,d1
		asr.w	#4,d0
		add.w	d1,d2
		add.w	d0,d3

loc_3E952:
		move.w	d2,(a2)+
		move.w	d3,(a2)+
		addq.w	#2,a2
		add.l	d4,d5
		move.l	(sp)+,d1
		add.l	d1,d4
		dbf	d6,loc_3E93C
		move.w	(sp)+,d2
		move.w	#$40,d1
		moveq	#8,d3
		move.w	$10(a0),d4
		movea.l	a1,a2
		bsr.w	sub_3E9AC
		move.w	$10(a0),d0
		andi.w	#-$80,d0
		sub.w	(Camera_X_pos_coarse_back).w,d0
		cmpi.w	#$280,d0
		bhi.w	loc_3E98A
		rts
; ---------------------------------------------------------------------------

loc_3E98A:
		move.w	respawn_addr(a0),d0
		beq.s	loc_3E996
		movea.w	d0,a2
		bclr	#7,(a2)

loc_3E996:
		movea.w	$46(a0),a1
		jsr	Delete_Referenced_Sprite.w
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_3E9A6:
		jmp	Draw_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_3E9AC:
		lea	(Player_2).w,a1
		moveq	#4,d6
		moveq	#$37,d5
		movem.l	d1-d4,-(sp)
		bsr.s	sub_3E9C6
		movem.l	(sp)+,d1-d4
		lea	(Player_1).w,a1
		subq.b	#1,d6
		moveq	#$36,d5
; End of function sub_3E9AC


; =============== S U B R O U T I N E =======================================


sub_3E9C6:
		btst	d6,$2A(a0)
		beq.s	loc_3EA1E
		btst	#1,$2A(a1)
		bne.s	loc_3E9E6
		moveq	#0,d0
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		add.w	d1,d0
		bmi.s	loc_3E9E6
		cmp.w	d2,d0
		blo.s	loc_3E9FA

loc_3E9E6:

		bclr	#3,$2A(a1)
		bclr	d6,$2A(a0)
		move.b	#0,(a0,d5.w)
		moveq	#0,d4
		rts
; ---------------------------------------------------------------------------

loc_3E9FA:
		lsr.w	#4,d0
		move.b	d0,(a0,d5.w)
		add.w	d0,d0
		move.w	d0,d1
		add.w	d0,d0
		add.w	d1,d0
		move.w	$1A(a2,d0.w),d0
		subq.w	#8,d0
		moveq	#0,d1
		move.b	$1E(a1),d1
		sub.w	d1,d0
		move.w	d0,$14(a1)
		moveq	#0,d4

locret_3EA4A:
		rts
; ---------------------------------------------------------------------------

loc_3EA1E:
		tst.w	$1A(a1)
		bmi.s	locret_3EA4A
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		add.w	d1,d0
		bmi.s	locret_3EA4A
		cmp.w	d2,d0
		bhs.s	locret_3EA4A
		lsr.w	#4,d0
		add.w	d0,d0
		move.w	d0,d1
		add.w	d0,d0
		add.w	d1,d0
		move.w	$1A(a2,d0.w),d0
		subq.w	#8,d0
		jmp	loc_1E45A.w

; ---------------------------------------------------------------------------
Map_MHZCurledVine:include "Levels/MHZ/Misc Object Data/Map - Curled Vine.asm"

; ---------------------------------------------------------------------------

Obj_MHZStickyVine:	; eww
		tst.b	OptionsBits.w		; NAT: Check for better layout
		bmi.s	loc_3EAC4		; if so, delete
		jsr	Create_New_Sprite3.w
		bne.s	loc_3EAC4
		move.l	#loc_3ED0A,(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		move.l	#Map_MHZStickyVine,$C(a1)
		move.w	#$440A,$A(a1)
		ori.b	#4,4(a1)
		move.w	#prio(4),8(a1)
		move.b	#-$80,7(a1)
		move.b	#-$80,6(a1)
		bset	#6,4(a1)
		moveq	#8,d1
		move.w	d1,$16(a1)
		subq.b	#1,d1
		lea	$18(a1),a2

loc_3EAA8:
		move.w	$10(a0),(a2)+
		move.w	$14(a0),(a2)+
		move.w	#0,(a2)+
		dbf	d1,loc_3EAA8
		move.w	a1,$46(a0)
		move.l	#loc_3EACA,(a0)
		rts
; ---------------------------------------------------------------------------

loc_3EAC4:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_3EACA:

		lea	(Player_1).w,a1
		bsr.s	loc_3EADA
		lea	(Player_2).w,a1
		bsr.s	loc_3EADA
		bra.w	loc_3EBF8
; ---------------------------------------------------------------------------

loc_3EADA:

		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		addi.w	#$C,d0
		cmpi.w	#$18,d0
		bhs.w	locret_3EB24
		move.w	$14(a1),d0
		sub.w	$14(a0),d0
		addi.w	#$18,d0
		cmpi.w	#$30,d0
		bhs.w	locret_3EB24
		tst.b	(Debug_On).w
		bne.s	locret_3EB24

loc_3EB08:
		cmpi.b	#4,5(a1)
		bhs.w	locret_3EB24
		tst.b	$2E(a1)
		bne.w	locret_3EB24
		move.l	#loc_3EB26,(a0)
		move.l	a1,$2E(a0)

locret_3EB24:

		rts
; ---------------------------------------------------------------------------

loc_3EB26:
		movea.l	$2E(a0),a1
		or.b	#$80,$2A(a1)		; NAT: Prevent spawning
		tst.b	$3D(a1)
		beq.s	loc_3EB3C
		move.b	#1,$3D(a0)
		move.b	#$10,$3E(a0)

loc_3EB3C:
		move.l	$10(a1),d0
		move.l	$14(a1),d1
		bsr.w	sub_3EC2A
		bsr.w	sub_3EC66
		bra.w	loc_3EBF8
; ---------------------------------------------------------------------------

loc_3EB50:
		movea.l	$2E(a0),a1
		move.l	$30(a0),d0
		move.l	$34(a0),d1
		bsr.w	sub_3EC2A
		move.w	$30(a0),d0
		sub.w	$10(a0),d0
		beq.s	loc_3EB7A
		bcc.s	loc_3EB74
		addq.w	#2,d0
		bcc.s	loc_3EB7A
		moveq	#0,d0
		bra.s	loc_3EB7A
; ---------------------------------------------------------------------------

loc_3EB74:
		subq.w	#2,d0
		bcc.s	loc_3EB7A
		moveq	#0,d0

loc_3EB7A:

		move.w	d0,d2
		add.w	$10(a0),d2
		move.w	d2,$30(a0)
		move.w	$34(a0),d1
		sub.w	$14(a0),d1
		beq.s	loc_3EBEE
		bcc.s	loc_3EBBA
		move.w	$1A(a0),d2
		addi.w	#$38,$1A(a0)
		ext.l	d2
		asl.l	#8,d2
		add.l	d2,$34(a0)
		move.w	$34(a0),d2
		cmp.w	$14(a0),d2
		blo.s	loc_3EBEE
		move.w	$14(a0),$34(a0)
		move.w	#0,$1A(a0)
		bra.s	loc_3EBEE
; ---------------------------------------------------------------------------

loc_3EBBA:
		tst.w	$1A(a0)
		bpl.s	loc_3EBD4
		move.w	$1A(a0),d2
		addi.w	#$38,$1A(a0)
		ext.l	d2
		asl.l	#8,d2
		add.l	d2,$34(a0)
		bra.s	loc_3EBEE
; ---------------------------------------------------------------------------

loc_3EBD4:
		subq.w	#2,$34(a0)
		move.w	$34(a0),d2
		cmp.w	$14(a0),d2
		bhs.s	loc_3EBEE
		move.w	$14(a0),$34(a0)
		move.w	#0,$1A(a0)

loc_3EBEE:

		or.w	d0,d1
		bne.s	loc_3EBF8
		move.l	#loc_3EACA,(a0)

loc_3EBF8:

		move.w	$10(a0),d0
		andi.w	#-$80,d0
		sub.w	(Camera_X_pos_coarse_back).w,d0
		cmpi.w	#$280,d0
		bhi.s	loc_3EC0E

locret_3EC0C:
		rts
; ---------------------------------------------------------------------------

loc_3EC0E:
		move.l	$2E(a0),d0		; NAT: Get parent
		beq.s	.nochild		; if none, branch
		move.l	d0,a1			; to a1
		and.b	#$7F,$2A(a1)		; NAT: reset spawn flag

.nochild	move.w	respawn_addr(a0),d0
		beq.s	loc_3EC1A
		movea.w	d0,a2
		bclr	#7,(a2)

loc_3EC1A:
		movea.w	$46(a0),a1
		jsr	Delete_Referenced_Sprite.w
		jmp	Delete_Current_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_3EC2A:

		movea.w	$46(a0),a2
		move.l	$10(a0),d2
		move.l	$14(a0),d3
		sub.l	d2,d0
		sub.l	d3,d1
		movem.l	d0-d1,-(sp)
		asr.l	#3,d0
		asr.l	#3,d1
		lea	$48(a2),a3
		moveq	#7,d6
		bra.s	loc_3EC4E
; ---------------------------------------------------------------------------

loc_3EC4A:
		add.l	d0,d2
		add.l	d1,d3

loc_3EC4E:
		subq.w	#2,a3
		swap	d3
		move.w	d3,-(a3)
		swap	d3
		swap	d2
		move.w	d2,-(a3)
		swap	d2
		dbf	d6,loc_3EC4A
		movem.l	(sp)+,d1-d2
		rts
; End of function sub_3EC2A


; =============== S U B R O U T I N E =======================================


sub_3EC66:
		swap	d1
		swap	d2
		move.w	d1,d3
		bpl.s	loc_3EC70
		neg.w	d3

loc_3EC70:
		move.w	d2,d4
		bpl.s	loc_3EC76
		neg.w	d4

loc_3EC76:
		add.w	d4,d3
		add.w	d3,d3
		jsr	GetArcTan.w
		jsr	GetSineCosine.w
		muls.w	d3,d1
		muls.w	d3,d0
		asl.l	#1,d0
		asl.l	#2,d1
		sub.l	d1,$10(a1)
		btst	#1,$2A(a1)
		beq.s	loc_3ECAA
		sub.l	d0,$14(a1)
		tst.w	$1A(a1)
		bmi.s	loc_3ECCC
		asr	$18(a1)
		bra.s	loc_3ECCC
; ---------------------------------------------------------------------------

loc_3ECAA:
		asr.l	#8,d1
		tst.w	d1
		bpl.s	loc_3ECB2
		neg.w	d1

loc_3ECB2:
		move.w	$1C(a1),d0
		bpl.s	loc_3ECBA
		neg.w	d0

loc_3ECBA:
		cmpi.w	#$200,d0
		blo.s	loc_3ECCC
		subi.w	#$10,d0
		cmp.w	d1,d0
		bhs.s	loc_3ECCC
		asr	$1C(a1)

loc_3ECCC:
		cmp.b	#6,5(a1)
		bhs.s	.dead
		tst.b	$3D(a0)
		beq.s	loc_3ED02
		tst.b	$3D(a1)
		bne.s	loc_3ED02
		subq.b	#1,$3E(a0)
		bne.s	loc_3ED02
.dead		move.l	$10(a1),$30(a0)
		move.l	$14(a1),$34(a0)
		and.b	#$7F,$2A(a1)		; NAT: Enable spawning
		move.w	#-$600,$1A(a0)
		move.b	#0,$3D(a0)
		move.b	#0,$3E(a0)
		move.l	#loc_3EB50,(a0)

loc_3ED02:

		bclr	#5,$2A(a1)
		rts
; End of function sub_3EC66

; ---------------------------------------------------------------------------

loc_3ED0A:
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
Map_MHZStickyVine:include "Levels/MHZ/Misc Object Data/Map - Sticky Vine.asm"

; ---------------------------------------------------------------------------

Obj_MHZSwingBarHorizontal:

		move.l	#Map_MHZSwingBarHorizontal,$C(a0)
		move.w	#$3F3,$A(a0)
		ori.b	#4,4(a0)
		move.w	#prio(5),8(a0)
		move.b	#$20,7(a0)
		move.b	#4,6(a0)
		move.l	#loc_3ED46,(a0)

loc_3ED46:
		lea	$30(a0),a2
		lea	$3A(a0),a3
		lea	(Player_1).w,a1
		move.w	(Ctrl_1_logical).w,d1
		bsr.s	sub_3ED6E
		addq.w	#1,a2
		lea	$3C(a0),a3
		lea	(Player_2).w,a1
		move.w	(Ctrl_2_logical).w,d1
		bsr.s	sub_3ED6E
		jmp	Sprite_OnScreen_Test.w

; =============== S U B R O U T I N E =======================================


sub_3ED6E:

		tst.b	(a2)
		beq.w	loc_3EECE
		tst.b	(Debug_On).w
		bne.w	loc_3EE2C
		cmpi.b	#4,5(a1)
		bhs.w	loc_3EE2C
		btst	#$A,d1
		beq.s	loc_3EDB6
		move.w	$10(a0),d0
		subi.w	#$16,d0
		cmp.w	$10(a1),d0
		bge.s	loc_3EDB6
		subq.w	#1,$10(a1)
		subq.b	#1,6(a2)
		bpl.s	loc_3EDB6
		move.b	#7,6(a2)
		addi.b	#$10,8(a2)
		andi.b	#$10,8(a2)

loc_3EDB6:

		btst	#$B,d1
		beq.s	loc_3EDE6
		move.w	$10(a0),d0
		addi.w	#$15,d0
		cmp.w	$10(a1),d0
		ble.s	loc_3EDE6
		addq.w	#1,$10(a1)
		subq.b	#1,6(a2)
		bpl.s	loc_3EDE6
		move.b	#7,6(a2)
		addi.b	#$10,8(a2)
		andi.b	#$10,8(a2)

loc_3EDE6:

		andi.w	#$70,d1
		bne.w	loc_3EE18
		cmpi.b	#$28,4(a2)
		beq.w	loc_3EE7A
		cmpi.b	#5,4(a2)

loc_3EDFE:
		beq.w	loc_3EEC2

loc_3EE02:
		bsr.w	sub_3EFBA
		moveq	#0,d0
		move.b	$22(a1),d0
		move.l	a2,-(sp)
		jsr	(Tails_Carry_LoadPLC).l
		movea.l	(sp)+,a2
		rts
; ---------------------------------------------------------------------------

loc_3EE18:
		move.w	#-$500,$1A(a1)
		btst	#6,$2A(a1)
		beq.s	loc_3EE2C
		move.w	#-$200,$1A(a1)

loc_3EE2C:

		clr.b	(a2)
		move.b	#$1E,2(a2)
		btst	#6,$2A(a1)
		beq.s	loc_3EE42
		move.b	#$3C,2(a2)

loc_3EE42:
		andi.b	#-4,$2E(a1)
		bset	#1,$2A(a1)
		move.b	#1,$40(a1)
		move.b	#$E,$1E(a1)
		move.b	#7,$1F(a1)
		move.b	#2,$20(a1)
		bset	#2,$2A(a1)
		bclr	#4,$2A(a1)
		move.b	#0,$27(a1)
		rts
; ---------------------------------------------------------------------------

loc_3EE7A:
		move.w	#$1000,$20(a1)
		move.w	(a3),d0
		move.w	d0,d1
		asr.w	#1,d1
		add.w	d1,d0
		move.w	d0,$1A(a1)

loc_3EE8C:
		clr.b	(a2)
		move.b	#8,2(a2)
		andi.b	#-4,$2E(a1)
		bset	#1,$2A(a1)
		clr.b	$40(a1)
		clr.b	$3D(a1)
		move.b	#2,5(a1)
		bclr	#4,$2A(a1)
		move.b	#0,$2F(a1)
		move.b	#0,$27(a1)
		rts
; ---------------------------------------------------------------------------

loc_3EEC2:
		move.w	#0,$20(a1)
		move.w	(a3),$1A(a1)
		bra.s	loc_3EE8C
; ---------------------------------------------------------------------------

loc_3EECE:
		tst.b	2(a2)
		beq.s	loc_3EEDA
		subq.b	#1,2(a2)
		rts
; ---------------------------------------------------------------------------

loc_3EEDA:
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		addi.w	#$16,d0
		cmpi.w	#$2C,d0
		bhs.w	locret_3EFB8
		move.w	$14(a0),d0
		addi.w	#$14,d0
		cmp.w	$14(a1),d0
		bhs.w	locret_3EFB8
		addi.w	#$10,d0

loc_3EF02:
		cmp.w	$14(a1),d0

loc_3EF06:
		bcs.w	locret_3EFB8

loc_3EF0A:
		tst.b	(Debug_On).w
		bne.w	locret_3EFB8
		cmpi.b	#4,5(a1)
		bhs.w	locret_3EFB8
		tst.b	$2E(a1)
		bne.w	locret_3EFB8
		move.w	$1A(a1),(a3)
		clr.w	$18(a1)
		clr.w	$1A(a1)
		clr.w	$1C(a1)
		andi.b	#-4,4(a1)
		move.w	$14(a0),d0
		addi.w	#$14,d0
		move.w	d0,$14(a1)
		move.b	#0,$20(a1)
		move.b	#3,$2E(a1)
		move.b	#-$6C,$22(a1)
		move.b	#0,4(a2)
		move.b	#0,6(a2)
		move.b	#0,8(a2)
		cmpi.w	#-$400,(a3)
		bgt.s	loc_3EF84
		move.b	#-$6B,$22(a1)
		move.b	#$20,4(a2)
		move.b	#$10,8(a2)
		bra.s	loc_3EF9C
; ---------------------------------------------------------------------------

loc_3EF84:
		cmpi.w	#$400,(a3)
		blt.s	loc_3EF9C
		move.b	#-$6B,$22(a1)
		move.b	#$21,4(a2)
		move.b	#$10,8(a2)

loc_3EF9C:

		move.b	#1,(a2)
		moveq	#0,d0
		move.b	$22(a1),d0
		move.l	a2,-(sp)
		jsr	(Tails_Carry_LoadPLC).l
		movea.l	(sp)+,a2
		moveq	#$4A,d0
		jsr	Play_Sound_2.w

locret_3EFB8:

		rts
; End of function sub_3ED6E


; =============== S U B R O U T I N E =======================================


sub_3EFBA:
		cmpi.w	#-$400,(a3)
		ble.s	loc_3EFE6
		cmpi.w	#$400,(a3)
		bge.s	loc_3EFE6
		move.b	4(a2),d0
		beq.s	loc_3EFE4
		bpl.s	loc_3EFD8
		addi.b	#6,d0
		bcc.s	loc_3EFD6
		moveq	#0,d0

loc_3EFD6:
		bra.s	loc_3EFE0
; ---------------------------------------------------------------------------

loc_3EFD8:
		subi.b	#6,d0
		bcc.s	loc_3EFE0
		moveq	#0,d0

loc_3EFE0:

		move.b	d0,4(a2)

loc_3EFE4:
		bra.s	loc_3EFF2
; ---------------------------------------------------------------------------

loc_3EFE6:
		move.b	4(a2),d0
		addi.b	#$C,d0
		move.b	d0,4(a2)

loc_3EFF2:
		moveq	#0,d0
		move.b	4(a2),d0
		lsr.b	#4,d0
		add.b	8(a2),d0

loc_3EFFE:
		move.b	RawAni_3F01A(pc,d0.w),d1

loc_3F002:
		move.b	d1,$22(a1)

loc_3F006:
		andi.w	#$F,d0

loc_3F00A:
		move.b	byte_3F03A(pc,d0.w),d1

loc_3F00E:
		ext.w	d1
		add.w	$14(a0),d1
		move.w	d1,$14(a1)
		rts
; End of function sub_3EFBA

; ---------------------------------------------------------------------------
RawAni_3F01A:	dc.b  $94, $63, $64, $64, $65, $65, $65, $66, $66, $66, $66, $67, $67, $67, $68, $68, $95, $63, $64, $64
		dc.b  $65, $65, $65, $66, $66, $66, $66, $67, $67, $67, $68, $68
byte_3F03A:	dc.b  $14, $14,	 $B,  $B, $F1, $F1, $F1, $EC, $EC, $EC,	$EC, $F4, $F4, $F4, $FE, $FE
Map_MHZSwingBarHorizontal:include "Levels/MHZ/Misc Object Data/Map - Swing Bar Horizontal.asm"


; ---------------------------------------------------------------------------

Obj_MHZSwingBarVertical:

		move.l	#Map_MHZSwingBarVertical,$C(a0)
		move.w	#$3F3,$A(a0)
		ori.b	#4,4(a0)
		move.w	#prio(1),8(a0)
		move.b	#4,7(a0)
		move.b	#$20,6(a0)
		bset	#7,$2A(a0)
		move.l	#loc_3F08C,(a0)

loc_3F08C:
		moveq	#0,d1
		move.b	7(a0),d1
		move.w	#$21,d3
		move.w	$10(a0),d4
		jsr	SolidObjectTop.w
		lea	$30(a0),a2
		lea	(Player_1).w,a1
		move.w	(Ctrl_1_logical).w,d1
		bsr.s	sub_3F0D8
		addq.w	#1,a2
		lea	(Player_2).w,a1
		move.w	(Ctrl_2_logical).w,d1
		bsr.s	sub_3F0D8

		lea	$30(a0),a1			; NAT: get Sonic to a2
		cmp.b	#2,BoxWinner.w			; check if tails is winrar
		bne.s	.sonic				; if not, branch
		addq.w	#1,a1				; go to tails byte

.sonic		tst.b	(a1)				; check if this player is on the thing
		beq.s	loc_3F0D2			; if not, just skip
		moveq	#$08,d4				; set camera x-offset
		move.b	$30(a0),d5			; get player 1 check byte
		move.b	$31(a0),d6			; get player 2 check byte
		jsr	Camera_FixToObj			; control camera now

loc_3F0D2:
		jmp	Sprite_OnScreen_Test.w

; =============== S U B R O U T I N E =======================================


sub_3F0D8:

		tst.b	(a2)
		beq.w	loc_3F246
		tst.b	(Debug_On).w
		bne.w	loc_3F17A
		cmpi.b	#4,5(a1)
		bhs.w	loc_3F17A
		andi.w	#$70,d1
		bne.w	loc_3F166
		cmpi.b	#-8,4(a2)
		beq.w	loc_3F1C8
		addi.b	#8,4(a2)
		bsr.s	sub_3F11C

loc_3F10A:

		moveq	#0,d0
		move.b	$22(a1),d0
		move.l	a2,-(sp)
		jsr	(Tails_Carry_LoadPLC).l
		movea.l	(sp)+,a2
		rts
; End of function sub_3F0D8


; =============== S U B R O U T I N E =======================================


sub_3F11C:
		moveq	#0,d0
		move.b	4(a2),d0
		lsr.b	#4,d0
		move.b	RawAni_3F146(pc,d0.w),d1
		move.b	d1,$22(a1)
		move.b	byte_3F156(pc,d0.w),d1
		ext.w	d1
		btst	#0,4(a1)
		beq.s	loc_3F13C
		neg.w	d1

loc_3F13C:
		add.w	$10(a0),d1
		move.w	d1,$10(a1)
		rts
; End of function sub_3F11C

; ---------------------------------------------------------------------------
RawAni_3F146:	dc.b  $5C, $5C,	$5D, $5D, $5D, $5E, $5E, $5E, $5F, $5F,	$60, $60, $60, $61, $61, $61
byte_3F156:	dc.b  $12, $12,	  4,   4,   4, $F6, $F6, $F6, $EE, $EE,	$EE, $EE, $EE,	$A,  $A,  $A
; ---------------------------------------------------------------------------

loc_3F166:
		move.w	#-$500,$1A(a1)
		btst	#6,$2A(a1)
		beq.s	loc_3F17A
		move.w	#-$200,$1A(a1)

loc_3F17A:

		clr.b	(a2)
		move.b	#$1E,2(a2)
		btst	#6,$2A(a1)
		beq.s	loc_3F190
		move.b	#$3C,2(a2)

loc_3F190:
		andi.b	#-4,$2E(a1)
		bset	#1,$2A(a1)
		move.b	#1,$40(a1)
		move.b	#$E,$1E(a1)
		move.b	#7,$1F(a1)
		move.b	#2,$20(a1)
		bset	#2,$2A(a1)
		bclr	#4,$2A(a1)
		move.b	#0,$27(a1)
		rts
; ---------------------------------------------------------------------------

loc_3F1C8:
		move.w	#0,$20(a1)
		clr.b	(a2)
		move.b	#8,2(a2)
		andi.b	#-4,$2E(a1)
		move.w	$10(a0),$10(a1)
		move.w	#$1000,$18(a1)
		bclr	#0,$2A(a1)
		btst	#0,4(a1)
		beq.s	loc_3F200
		bset	#0,$2A(a1)
		neg.w	$18(a1)

loc_3F200:
		move.w	#$F,$32(a1)

loc_3F206:
		move.w	$18(a1),$1C(a1)

loc_3F20C:
		clr.b	$40(a1)
		clr.b	$3D(a1)
		move.b	#2,5(a1)
		bclr	#4,$2A(a1)
		move.b	#0,$2F(a1)
		move.b	#0,$27(a1)
		move.b	#$24,$22(a1)
		cmpi.b	#1,$38(a1)
		bne.w	loc_3F10A
		move.b	#$E,$22(a1)
		bra.w	loc_3F10A
; ---------------------------------------------------------------------------

loc_3F246:
		tst.b	2(a2)
		beq.s	loc_3F252
		subq.b	#1,2(a2)
		rts
; ---------------------------------------------------------------------------

loc_3F252:
		move.w	$18(a1),d0
		bpl.s	loc_3F28C
		cmpi.w	#-$400,d0
		bgt.w	locret_3F35E
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		addi.w	#$28,d0
		cmpi.w	#$18,d0
		bhs.w	locret_3F35E
		move.w	$14(a1),d0
		sub.w	$14(a0),d0
		addi.w	#$20,d0
		cmpi.w	#$40,d0
		bhs.w	locret_3F35E
		moveq	#-$12,d2
		bra.s	loc_3F2BE
; ---------------------------------------------------------------------------

loc_3F28C:
		cmpi.w	#$400,d0
		blt.w	locret_3F35E
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		subi.w	#$10,d0
		cmpi.w	#$18,d0
		bhs.w	locret_3F35E
		move.w	$14(a1),d0
		sub.w	$14(a0),d0
		addi.w	#$20,d0
		cmpi.w	#$40,d0
		bhs.w	locret_3F35E
		moveq	#$12,d2

loc_3F2BE:
		tst.b	(Debug_On).w
		bne.w	locret_3F35E
		cmpi.b	#4,5(a1)
		bhs.w	locret_3F35E
		tst.b	$2E(a1)
		bne.w	locret_3F35E
		btst	#1,$2A(a1)
		bne.w	locret_3F35E
		clr.w	$18(a1)
		clr.w	$1A(a1)
		clr.w	$1C(a1)
		andi.b	#-4,4(a1)
		move.b	$1E(a1),d0
		move.b	$44(a1),$1E(a1)

loc_3F2FE:
		move.b	$45(a1),$1F(a1)

loc_3F304:
		bclr	#2,$2A(a1)
		beq.s	loc_3F316

loc_3F30C:
		sub.b	$44(a1),d0
		ext.w	d0
		add.w	d0,$14(a1)

loc_3F316:
		move.w	$10(a0),d0
		add.w	d2,d0
		move.w	d0,$10(a1)
		move.b	#0,$20(a1)
		move.b	#3,$2E(a1)
		move.b	#$62,$22(a1)
		move.b	#8,4(a2)
		move.b	#1,(a2)
		tst.w	d2
		bpl.s	loc_3F346
		bset	#0,4(a1)

loc_3F346:
		moveq	#0,d0
		move.b	$22(a1),d0
		move.l	a2,-(sp)
		jsr	(Tails_Carry_LoadPLC).l
		movea.l	(sp)+,a2
		moveq	#$4A,d0
		jsr	Play_Sound_2.w

locret_3F35E:

		rts
; ---------------------------------------------------------------------------
Map_MHZSwingBarVertical:include "Levels/MHZ/Misc Object Data/Map - Swing Bar Vertical.asm"

; ---------------------------------------------------------------------------

Obj_MHZMushroomPlatform:

		move.l	#Map_MHZMushroomPlatform,$C(a0)
		move.w	#$43CD,$A(a0)
		ori.b	#4,4(a0)
		move.w	#prio(5),8(a0)
		move.b	#$20,7(a0)
		move.b	#$20,6(a0)
		move.l	#loc_3F39C,(a0)

loc_3F39C:
		tst.b	$2E(a0)
		beq.s	loc_3F3CC
		tst.b	$2F(a0)
		beq.s	loc_3F3AE
		subq.b	#1,$2F(a0)
		bra.s	loc_3F3CC
; ---------------------------------------------------------------------------

loc_3F3AE:
		jsr	MoveSprite2.w
		addi.w	#$28,$1A(a0)
		jsr	CheckPlayerReleaseFromObj.w
		tst.b	4(a0)
		bmi.s	loc_3F3CC
		move.w	#$7F00,$10(a0)

loc_3F3CC:

		moveq	#0,d1
		move.b	7(a0),d1
		lea	(byte_3F42A).l,a2
		move.w	$10(a0),d4
		jsr	SolidObjectTopSloped2.w
		move.b	$2A(a0),d0
		andi.b	#$18,d0
		beq.s	loc_3F40A
		move.b	#1,$20(a0)
		tst.b	$2C(a0)
		beq.s	loc_3F40A
		tst.b	$2E(a0)
		bne.s	loc_3F40A

loc_3F3FE:
		move.b	#1,$2E(a0)
		move.b	#$10,$2F(a0)

loc_3F40A:

		lea	(Ani_MHZMushroomPlatform).l,a1
		jsr	Animate_Sprite.w
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------
Ani_MHZMushroomPlatform:	include "Levels/MHZ/Misc Object Data/Anim - Mushroom Platform.asm"

byte_3F42A:	dc.b   $C,  $D,  $E,  $F, $10, $11, $12, $13, $13, $14, $14, $14, $14, $14, $14, $14, $14, $14, $14, $14
		dc.b  $14, $14, $14, $13, $13, $12, $11, $10,  $F,  $E,  $D,  $C

Map_MHZMushroomPlatform:include "Levels/MHZ/Misc Object Data/Map - Mushroom Platform.asm"

; ---------------------------------------------------------------------------

Obj_MHZMushroomParachute:

		move.l	#Map_MHZMushroomParachute,$C(a0)
		move.w	#-$3C33,$A(a0)
		ori.b	#4,4(a0)
		move.w	#prio(5),8(a0)
		move.b	#$20,7(a0)
		move.b	#$20,6(a0)
		move.b	#$20,$1F(a0)
		move.b	#$18,$1E(a0)
		move.w	#$200,$1C(a0)
		move.b	#0,$26(a0)
		tst.b	$2C(a0)
		beq.s	loc_3F4FA
		move.b	#-$80,$26(a0)

loc_3F4FA:
		move.l	#loc_3F500,(a0)

loc_3F500:
		bsr.w	sub_3F5AA
		tst.w	$30(a0)
		beq.s	loc_3F516
		move.l	#loc_3F51C,(a0)
		move.w	#$300,$1A(a0)

loc_3F516:
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_3F51C:

		bsr.w	sub_3F7E2
		jsr	MoveSprite2.w
		bsr.w	sub_3F7AE
		bsr.s	sub_3F5AA
		move.w	$18(a0),$34(a0)
		move.w	$1A(a0),$36(a0)
		tst.w	$30(a0)
		bne.s	loc_3F544
		move.l	#loc_3F572,(a0)

loc_3F544:
		tst.b	4(a0)
		bmi.s	loc_3F56C
		move.w	#$7F00,$10(a0)
		tst.b	$30(a0)
		beq.s	loc_3F55E
		clr.w	(Player_1+$42).w
		clr.b	(Player_1+$2E).w

loc_3F55E:
		tst.b	$31(a0)
		beq.s	loc_3F56C
		clr.w	(Player_2+$42).w
		clr.b	(Player_2+$2E).w

loc_3F56C:

		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_3F572:

		bsr.w	sub_3F7E2
		jsr	MoveSprite2.w
		tst.b	4(a0)
		bmi.s	loc_3F5A4
		move.w	#$7F00,$10(a0)
		tst.b	$30(a0)
		beq.s	loc_3F596
		clr.w	(Player_1+$42).w
		clr.b	(Player_1+$2E).w

loc_3F596:
		tst.b	$31(a0)
		beq.s	loc_3F5A4
		clr.w	(Player_2+$42).w
		clr.b	(Player_2+$2E).w

loc_3F5A4:

		jmp	Sprite_OnScreen_Test.w

; =============== S U B R O U T I N E =======================================


sub_3F5AA:

		lea	$31(a0),a2
		lea	(Player_2).w,a1
		move.w	(Ctrl_2_logical).w,d0
		bsr.s	sub_3F5C2
		lea	(Player_1).w,a1
		subq.w	#1,a2
		move.w	(Ctrl_1_logical).w,d0
; End of function sub_3F5AA


; =============== S U B R O U T I N E =======================================


sub_3F5C2:
		tst.b	(a2)
		beq.w	loc_3F6FE
		tst.b	4(a1)
		bpl.w	loc_3F660
		cmpi.b	#4,5(a1)
		bhs.w	loc_3F666
		tst.b	(Debug_On).w
		bne.w	loc_3F666
		move.w	$34(a0),d1
		cmp.w	$18(a1),d1
		bne.s	loc_3F660
		move.w	$36(a0),d1
		cmp.w	$1A(a1),d1
		bne.s	loc_3F660
		andi.b	#$70,d0
		beq.w	loc_3F678
		clr.w	$42(a1)
		clr.b	$2E(a1)
		clr.b	(a2)
		move.b	#$12,2(a2)
		andi.w	#$F00,d0
		beq.w	loc_3F61C
		move.b	#$3C,2(a2)

loc_3F61C:
		btst	#$A,d0
		beq.s	loc_3F628
		move.w	#-$200,$18(a1)

loc_3F628:
		btst	#$B,d0
		beq.s	loc_3F634
		move.w	#$200,$18(a1)

loc_3F634:
		move.w	#-$380,$1A(a1)
		bset	#1,$2A(a1)
		move.b	#1,$40(a1)
		move.b	#$E,$1E(a1)
		move.b	#7,$1F(a1)
		move.b	#2,$20(a1)
		bset	#2,$2A(a1)
		rts
; ---------------------------------------------------------------------------

loc_3F660:

		move.w	#-$100,$1A(a1)

loc_3F666:

		clr.w	$42(a1)
		clr.b	$2E(a1)
		clr.b	(a2)
		move.b	#$3C,2(a2)
		rts
; ---------------------------------------------------------------------------

loc_3F678:
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		addi.w	#$25,$14(a1)
		move.w	$18(a0),$18(a1)
		move.w	$1A(a0),$1A(a1)
		movem.l	d0-a6,-(sp)
		movea.l	a1,a0

loc_3F69C:
		jsr	(SonicKnux_DoLevelCollision).l
		movem.l	(sp)+,d0-a6

loc_3F6A6:
		bclr	#0,$2A(a1)
		move.b	$26(a0),d0
		addi.b	#$40,d0
		bpl.s	loc_3F6BC
		bset	#0,$2A(a1)

loc_3F6BC:
		move.b	$2A(a1),d0
		andi.b	#1,d0
		andi.b	#-4,4(a1)
		or.b	d0,4(a1)
		moveq	#0,d0
		move.b	$26(a0),d0
		lsr.w	#4,d0
		move.b	RawAni_3F6EE(pc,d0.w),$22(a1)
		moveq	#0,d0
		move.b	$22(a1),d0
		move.l	a2,-(sp)
		jsr	(Tails_Carry_LoadPLC).l
		movea.l	(sp)+,a2
		rts
; ---------------------------------------------------------------------------
RawAni_3F6EE:
		dc.b  $E4, $E5,	$E6, $E6, $E7, $E6, $E6, $E5, $E4, $E5,	$E6, $E6, $E7, $E6, $E6, $E5
; ---------------------------------------------------------------------------

loc_3F6FE:
		tst.b	2(a2)
		beq.s	loc_3F70C
		subq.b	#1,2(a2)
		bne.w	locret_3F7AC

loc_3F70C:
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		addi.w	#$10,d0
		cmpi.w	#$20,d0
		bhs.w	locret_3F7AC
		move.w	$14(a1),d1
		sub.w	$14(a0),d1
		subi.w	#$25,d1
		cmpi.w	#$18,d1
		bhs.w	locret_3F7AC
		tst.b	$2E(a1)
		bne.s	locret_3F7AC
		cmpi.b	#4,5(a1)
		bhs.s	locret_3F7AC
		tst.b	(Debug_On).w
		bne.s	locret_3F7AC
		tst.w	$1A(a1)
		beq.s	locret_3F7AC
		bmi.s	locret_3F7AC
		clr.w	$18(a1)
		clr.w	$1A(a1)
		clr.w	$1C(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		addi.w	#$25,$14(a1)
		move.b	#0,$20(a1)
		move.b	#0,$3D(a1)
		move.b	#3,$2E(a1)
		andi.b	#-3,4(a1)
		move.b	#1,(a2)
		move.w	a0,$42(a1)
		move.w	#prio(1),8(a0)
		move.w	$18(a0),$18(a1)
		move.w	$1A(a0),$1A(a1)
		moveq	#$4A,d0
		jsr	Play_Sound_2.w
		bra.w	loc_3F6A6
; ---------------------------------------------------------------------------

locret_3F7AC:

		rts
; End of function sub_3F5C2


; =============== S U B R O U T I N E =======================================


sub_3F7AE:
		move.l	(Primary_collision_addr).w,(Collision_addr).w
		cmpi.b	#$D,$47(a0)
		beq.s	loc_3F7C2
		move.l	(Secondary_collision_addr).w,(Collision_addr).w

loc_3F7C2:
		moveq	#$D,d5
		jsr	sub_FD32.w
		tst.w	d1
		bpl.s	loc_3F7D2
		sub.w	d1,$10(a0)

loc_3F7D2:
		jsr	sub_FA1A.w
		tst.w	d1
		bpl.s	locret_3F7E0
		add.w	d1,$10(a0)

locret_3F7E0:
		rts
; End of function sub_3F7AE


; =============== S U B R O U T I N E =======================================


sub_3F7E2:

		move.b	$26(a0),d0
		tst.b	$30(a0)
		beq.s	loc_3F818
		btst	#2,(Ctrl_1_logical).w
		beq.s	loc_3F804
		cmpi.b	#-$80,d0
		beq.s	loc_3F804
		tst.b	d0
		bpl.s	loc_3F800
		neg.b	d0

loc_3F800:
		addq.b	#2,d0
		bra.s	loc_3F822
; ---------------------------------------------------------------------------

loc_3F804:

		btst	#3,(Ctrl_1_logical).w
		beq.s	loc_3F818

loc_3F80C:
		tst.b	d0

loc_3F80E:
		beq.s	loc_3F818
		bmi.s	loc_3F814
		neg.b	d0

loc_3F814:
		addq.b	#2,d0
		bra.s	loc_3F822
; ---------------------------------------------------------------------------

loc_3F818:

		move.b	d0,d1
		andi.b	#$7F,d1
		beq.s	loc_3F822
		addq.b	#2,d0

loc_3F822:

		move.b	d0,$26(a0)
		move.b	$26(a0),d0
		jsr	GetSineCosine.w
		muls.w	$1C(a0),d1
		asr.l	#8,d1
		move.w	d1,$18(a0)
		cmpi.w	#$80,$1A(a0)
		blt.s	loc_3F84A
		subi.w	#$20,$1A(a0)
		bra.s	locret_3F850
; ---------------------------------------------------------------------------

loc_3F84A:
		addi.w	#$20,$1A(a0)

locret_3F850:
		rts
; End of function sub_3F7E2

; ---------------------------------------------------------------------------
Map_MHZMushroomParachute:include "Levels/MHZ/Misc Object Data/Map - Mushroom Parachute.asm"

; ---------------------------------------------------------------------------

Obj_MHZMushroomCatapult:

		move.l	#Map_MHZMushroomCatapult,$C(a0)
		move.w	#$43CD,$A(a0)
		ori.b	#4,4(a0)
		move.w	#prio(5),8(a0)
		move.b	#$20,7(a0)
		move.b	#$C,6(a0)
		move.w	$14(a0),$30(a0)
		jsr	Create_New_Sprite3.w
		bne.w	loc_3F960
		move.l	#loc_3FA8E,(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		move.w	$10(a0),$2E(a1)
		move.w	$14(a0),$30(a1)
		addi.w	#$40,$10(a1)
		tst.b	$2C(a0)
		beq.s	loc_3F8CE
		subi.w	#$80,$10(a1)

loc_3F8CE:
		subi.w	#$18,$14(a1)
		move.l	$C(a0),$C(a1)
		move.w	$A(a0),$A(a1)
		ori.b	#4,4(a1)
		move.w	8(a0),8(a1)
		move.b	#$20,7(a1)
		move.b	#$C,6(a1)
		move.w	a0,$46(a1)
		move.w	#$18,$34(a1)
		move.w	a1,$46(a0)
		jsr	Create_New_Sprite3.w
		bne.s	loc_3F960
		move.l	#loc_3FAC2,(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		move.w	$10(a0),$2E(a1)
		move.w	$14(a1),$30(a1)
		subi.w	#$14,$14(a1)
		move.l	$C(a0),$C(a1)
		move.w	#$2420,$A(a1)
		ori.b	#4,4(a1)
		move.w	8(a0),8(a1)
		move.b	#$10,7(a1)
		move.b	#8,6(a1)
		move.b	#1,$22(a1)
		move.w	a0,$46(a1)

loc_3F960:

		move.l	#loc_3F966,(a0)

loc_3F966:
		movea.w	$46(a0),a1
		bsr.s	sub_3F996
		move.w	$34(a0),d0
		neg.w	d0
		add.w	$30(a0),d0
		move.w	d0,$14(a0)
	;	moveq	#0,d1
	;	move.b	7(a0),d1
	;	lea	(byte_3FB50).l,a2
	;	move.w	$10(a0),d4
	;	jsr	SolidObjectTopSloped2.w
		jmp	Sprite_OnScreen_Test.w

; =============== S U B R O U T I N E =======================================


sub_3F996:
		move.w	$36(a0),d2
		tst.w	$32(a0)
		bne.s	loc_3F9E0
		move.b	$2A(a0),d0
		andi.b	#$18,d0
		beq.s	loc_3F9C0
		moveq	#0,d2
		tst.w	$34(a0)
		beq.s	loc_3F9C0
		move.b	#1,$32(a0)
		move.w	#0,$36(a0)
		bra.s	loc_3F9E0
; ---------------------------------------------------------------------------

loc_3F9C0:

		move.b	$2A(a1),d0
		andi.b	#$18,d0
		beq.s	loc_3F9E0
		moveq	#$18,d2
		cmpi.w	#$18,$34(a0)
		beq.s	loc_3F9E0
		move.b	#1,$33(a0)
		move.w	#$18,$36(a0)

loc_3F9E0:

		tst.w	d2
		bne.s	loc_3F9F0
		tst.w	$34(a0)
		beq.s	loc_3F9FE
		subq.w	#8,$34(a0)
		bra.s	locret_3F9FC
; ---------------------------------------------------------------------------

loc_3F9F0:
		cmpi.w	#$18,$34(a0)
		beq.s	loc_3FA42
		addq.w	#8,$34(a0)

locret_3F9FC:

		rts
; ---------------------------------------------------------------------------

loc_3F9FE:
		tst.b	$32(a0)
		beq.s	locret_3F9FC
		clr.w	$32(a0)
		move.b	$2A(a1),d0
		andi.b	#$18,d0
		bne.s	loc_3FA18
		clr.w	$3A(a0)
		rts
; ---------------------------------------------------------------------------

loc_3FA18:
		lea	(Player_1).w,a2
		moveq	#3,d6
		bsr.s	sub_3FA26
		lea	(Player_2).w,a2
		moveq	#4,d6
; End of function sub_3F996


; =============== S U B R O U T I N E =======================================


sub_3FA26:
		btst	d6,$2A(a1)
		beq.s	locret_3F9FC
		move.w	#-$E80,d1
		cmpi.w	#$900,$3A(a0)
		bhs.s	loc_3FA3C
		move.w	#-$D00,d1

loc_3FA3C:
		move.w	d1,$1A(a2)
		bra.s	loc_3FA66
; End of function sub_3FA26

; ---------------------------------------------------------------------------

loc_3FA42:
		tst.b	$33(a0)
		beq.s	locret_3F9FC
		clr.w	$32(a0)
		lea	(Player_1).w,a2
		moveq	#3,d6
		bsr.s	sub_3FA5A
		lea	(Player_2).w,a2
		moveq	#4,d6

; =============== S U B R O U T I N E =======================================


sub_3FA5A:
		btst	d6,$2A(a0)
		beq.s	locret_3F9FC
		move.w	#-$D00,$1A(a2)

loc_3FA66:
		bset	#1,$2A(a2)
		bclr	#3,$2A(a2)
		clr.b	$40(a2)
		clr.b	$3D(a2)
		move.b	#$10,$20(a2)
		move.b	#2,5(a2)
		moveq	#-$79,d0
		jmp	Play_Sound_2.w
; End of function sub_3FA5A

; ---------------------------------------------------------------------------

loc_3FA8E:
		movea.w	$46(a0),a1
		move.w	$34(a1),d0
		subi.w	#$18,d0
		add.w	$30(a0),d0
		move.w	d0,$14(a0)
		moveq	#0,d1
		move.b	7(a0),d1
		lea	(byte_3FB50).l,a2
		move.w	$10(a0),d4
		jsr	SolidObjectTopSloped2.w
		move.w	$2E(a0),d0
		jmp	Sprite_OnScreen_Test2.w
; ---------------------------------------------------------------------------

loc_3FAC2:

		movea.w	$46(a0),a1
		move.w	$34(a1),d0
		neg.w	d0
		add.w	$30(a0),d0
		subi.w	#$14,d0
		move.w	d0,$14(a0)
		cmpi.w	#$18,$34(a1)
		bne.s	loc_3FB06
		move.l	#loc_3FB0C,(a0)
		moveq	#-$52,d0
		jsr	Play_Sound_2.w
		move.w	#$18,$36(a1)
		move.w	#-$800,$1A(a0)
		tst.w	$3A(a1)
		beq.s	loc_3FB06
		move.w	#-$A00,$1A(a0)

loc_3FB06:

		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_3FB0C:
		jsr	MoveSprite.w
		movea.w	$46(a0),a1
		move.w	$34(a1),d0
		neg.w	d0
		add.w	$30(a0),d0
		subi.w	#$14,d0
		cmp.w	$14(a0),d0
		bhi.s	loc_3FB4A
		move.w	d0,$14(a0)
		move.l	#loc_3FAC2,(a0)
		move.w	#0,$36(a1)
		move.b	#1,$32(a1)
		move.w	$1A(a0),$3A(a1)
		clr.w	$1A(a0)

loc_3FB4A:
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------
byte_3FB50:	dc.b    4,   5,   6,   7,   8,   9,  $A,  $B,  $B,  $C,  $C,  $C,  $C,  $C,  $C,  $C,  $C,  $C,  $C,  $C
		dc.b   $C,  $C,  $C,  $B,  $B,  $A,   9,   8,   7,   6,   5,   4

Map_MHZMushroomCatapult:include "Levels/MHZ/Misc Object Data/Map - Mushroom Catapult.asm"

; ---------------------------------------------------------------------------

Obj_14_2:
		move.b	$2C(a0),d0
		andi.w	#$7F,d0
		lsl.w	#3,d0
		move.w	d0,$36(a0)
		addi.w	#$10,d0
		move.w	d0,$38(a0)
		move.l	#loc_3FBAC,(a0)

loc_3FBAC:
		moveq	#0,d2
		lea	(Player_1).w,a1
		bsr.w	sub_3FBC4
		lea	(Player_2).w,a1
		bsr.w	sub_3FBC4
		jmp	Delete_Sprite_If_Not_In_Range.w

; =============== S U B R O U T I N E =======================================


sub_3FBC4:

		cmpi.b	#4,5(a1)
		bhs.w	locret_3FC74
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		addi.w	#$40,d0
		cmpi.w	#$80,d0
		bhs.w	locret_3FC74
		tst.b	$2E(a1)
		bne.w	loc_3FC76

		cmp.b	#7,Current_zone.w	; NAT: Check if this is MHZ
		bne.s	.notMHZ			; if not, skip
		tst.b	OptionsBits.w		; NAT: Check if alt layout
		bmi.w	locret_3FC74		; if yes, do not float

.notMHZ		moveq	#0,d1
		move.b	(OscNumbers+$16).w,d1
		add.w	$14(a1),d1
		addi.w	#$40,d1
		sub.w	$14(a0),d1
		bcs.s	locret_3FC74

loc_3FBFE:
		cmpi.w	#$50,d1
		bhs.s	locret_3FC74

loc_3FC04:
		subi.w	#$40,d1
		bcs.s	loc_3FC0E
		not.w	d1
		add.w	d1,d1

loc_3FC0E:
		addi.w	#$40,d1
		neg.w	d1
		asr.w	#6,d1
		add.w	d1,$14(a1)
		bset	#1,$2A(a1)
		bclr	#4,$2A(a1)
		move.w	#0,$1A(a1)
		move.b	#0,$2F(a1)
		move.b	#0,$40(a1)
		move.b	(V_int_run_count+3).w,d0
		andi.b	#$F,d0
		bne.s	loc_3FC4A
		moveq	#-$32,d0
		jsr	Play_Sound_2.w

loc_3FC4A:
		tst.b	$2C(a0)
		bmi.s	loc_3FCC6
		move.w	#1,$1C(a1)
		tst.b	$27(a1)
		bne.s	locret_3FC74
		move.b	#1,$27(a1)
		move.b	#0,$20(a1)
		move.b	#$7F,$30(a1)
		move.b	#8,$31(a1)

locret_3FC74:

		rts
; ---------------------------------------------------------------------------

loc_3FC76:
		movea.w	$42(a1),a3
		cmpi.l	#loc_3F51C,(a3)
		beq.s	loc_3FC8A
		cmpi.l	#loc_3F572,(a3)
		bne.s	locret_3FC74

loc_3FC8A:
		moveq	#0,d1
		move.b	(OscNumbers+$16).w,d1
		add.w	$14(a1),d1

loc_3FC94:
		add.w	$36(a0),d1
		sub.w	$14(a0),d1
		bcs.s	locret_3FC74
		cmp.w	$38(a0),d1
		bhs.s	locret_3FC74
		sub.w	$36(a0),d1
		bcs.s	loc_3FCAE
		not.w	d1
		add.w	d1,d1

loc_3FCAE:
		add.w	$36(a0),d1
		neg.w	d1
		asr.w	#6,d1
		add.w	d1,$14(a1)
		tst.w	d2
		bne.s	locret_3FC74
		moveq	#1,d2
		add.w	d1,$14(a3)
		rts
; ---------------------------------------------------------------------------

loc_3FCC6:
		move.w	#1,$1C(a1)
		move.b	#$F,$20(a1)
		rts
; End of function sub_3FBC4

; ---------------------------------------------------------------------------

Obj_38_2:
		moveq	#0,d0
		move.b	$2C(a0),d0
		andi.w	#$3F,d0
		lsl.w	#3,d0
		move.w	d0,$30(a0)
		add.w	d0,d0
		move.w	d0,$32(a0)
		move.b	$2C(a0),d0
		andi.b	#$C0,d0
		cmpi.b	#$40,d0
		bne.s	loc_3FD02

loc_3FCF8:
		move.l	#loc_3FE44,(a0)
		bra.w	loc_3FE44
; ---------------------------------------------------------------------------

loc_3FD02:
		cmpi.b	#$80,d0
		bne.s	loc_3FD12

loc_3FD08:
		move.l	#loc_3FF80,(a0)
		bra.w	loc_3FF80
; ---------------------------------------------------------------------------

loc_3FD12:
		cmpi.b	#$C0,d0
		bne.s	loc_3FD22
		move.l	#loc_400CA,(a0)
		bra.w	loc_400CA
; ---------------------------------------------------------------------------

loc_3FD22:
		move.l	#loc_3FD28,(a0)

loc_3FD28:
		move.w	$30(a0),d2
		move.w	$32(a0),d3
		lea	(Player_1).w,a1
		moveq	#3,d6
		move.w	(Ctrl_1_logical).w,d5
		bsr.s	sub_3FD4E
		lea	(Player_2).w,a1
		moveq	#4,d6
		move.w	(Ctrl_2_logical).w,d5
		bsr.s	sub_3FD4E
		jmp	Delete_Sprite_If_Not_In_Range.w

; =============== S U B R O U T I N E =======================================


sub_3FD4E:

		btst	d6,$2A(a0)
		bne.w	loc_3FDD0
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		addi.w	#$10,d0
		cmpi.w	#$20,d0
		bhs.s	locret_3FDCE
		move.w	$14(a1),d0
		sub.w	$14(a0),d0
		add.w	d2,d0
		cmp.w	d3,d0
		bhs.s	locret_3FDCE
		btst	#1,$2A(a1)
		beq.s	locret_3FDCE
		btst	#3,$2A(a1)
		bne.s	locret_3FDCE
		cmpi.b	#4,5(a1)
		bhs.s	locret_3FDCE
		tst.b	$2E(a1)
		bne.s	locret_3FDCE
		move.w	a0,$42(a1)		; NAT: Save the platform. Hack!!!
		bset	#3,$2A(a1)
		bset	d6,$2A(a0)
		move.b	#$E,$1E(a1)
		move.b	#7,$1F(a1)
		move.b	#2,$20(a1)
		bset	#2,$2A(a1)
		bclr	#4,$2A(a1)
		move.b	#0,$2F(a1)
		move.b	#0,$40(a1)
		asr	$1A(a1)
		asr	$18(a1)

locret_3FDCE:

		rts
; ---------------------------------------------------------------------------

loc_3FDD0:
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		addi.w	#$10,d0
		cmpi.w	#$20,d0
		bhs.s	loc_3FDF8
		move.w	$14(a1),d0
		sub.w	$14(a0),d0
		add.w	d2,d0
		cmp.w	d3,d0
		bhs.s	loc_3FDF8
		btst	#1,$2A(a1)
		bne.s	loc_3FE04

loc_3FDF8:

		bclr	#3,$2A(a1)
		bclr	d6,$2A(a0)
		clr.w	$42(a1)			; NAT: clear the platform. Hack!!!
		rts
; ---------------------------------------------------------------------------

loc_3FE04:
		andi.w	#$70,d5
		beq.s	loc_3FE18
		move.w	#-$800,$1A(a1)
		moveq	#$62,d0
		jsr	Play_Sound_2.w

loc_3FE18:
		tst.w	$1A(a1)
		bpl.s	loc_3FE2A
		asr	$18(a1)
		addi.w	#$68,$1A(a1)
		rts
; ---------------------------------------------------------------------------

loc_3FE2A:
		asr	$18(a1)
		move.w	#$A8,$1A(a1)
		btst	#1,$2A(a0)
		beq.s	locret_3FE42
		move.w	#-$198,$1A(a1)

locret_3FE42:
		rts
; End of function sub_3FD4E

; ---------------------------------------------------------------------------

loc_3FE44:

		move.w	$30(a0),d2
		move.w	$32(a0),d3
		lea	$34(a0),a2
		lea	(Player_1).w,a1
		moveq	#3,d6
		move.w	(Ctrl_1_logical).w,d5
		bsr.s	sub_3FE70
		addq.w	#1,a2
		lea	(Player_2).w,a1
		moveq	#4,d6
		move.w	(Ctrl_2_logical).w,d5
		bsr.s	sub_3FE70
		jmp	Delete_Sprite_If_Not_In_Range.w

; =============== S U B R O U T I N E =======================================


sub_3FE70:

		tst.b	(a2)
		beq.s	loc_3FE78
		subq.b	#1,(a2)
		rts
; ---------------------------------------------------------------------------

loc_3FE78:
		btst	d6,$2A(a0)
		bne.w	loc_3FF02
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		add.w	d2,d0
		cmp.w	d3,d0
		bhs.s	locret_3FF00
		move.w	$14(a1),d0
		sub.w	$14(a0),d0
		addi.w	#$10,d0
		cmpi.w	#$20,d0
		bhs.s	locret_3FF00
		btst	#1,$2A(a1)
		beq.s	locret_3FF00

loc_3FEA8:
		btst	#3,$2A(a1)
		bne.s	locret_3FF00
		cmpi.b	#4,5(a1)
		bhs.s	locret_3FF00
		tst.b	$2E(a1)
		bne.s	locret_3FF00
		tst.w	$1A(a1)
		bmi.s	locret_3FF00
		bset	#3,$2A(a1)
		bset	d6,$2A(a0)
		move.b	#$E,$1E(a1)
		move.b	#7,$1F(a1)
		move.b	#2,$20(a1)
		bset	#2,$2A(a1)
		bclr	#4,$2A(a1)
		move.b	#0,$2F(a1)
		move.b	#0,$40(a1)
		asr	$1A(a1)
		asr	$18(a1)
		move.w	a0,$42(a1)		; NAT: set the platform. Hack!!!

locret_3FF00:

		rts
; ---------------------------------------------------------------------------

loc_3FF02:
		move.w	$10(a1),d0

loc_3FF06:
		sub.w	$10(a0),d0

loc_3FF0A:
		add.w	d2,d0
		cmp.w	d3,d0
		bhs.s	loc_3FF2A
		move.w	$14(a1),d0
		sub.w	$14(a0),d0
		addi.w	#$10,d0
		cmpi.w	#$20,d0
		bhs.s	loc_3FF2A
		btst	#1,$2A(a1)
		bne.s	loc_3FF3C

loc_3FF2A:

		move.w	#0,$1A(a1)
		bclr	#3,$2A(a1)
		bclr	d6,$2A(a0)
		clr.w	$42(a1)			; NAT: clear the platform. Hack!!!
		rts
; ---------------------------------------------------------------------------

loc_3FF3C:
		andi.w	#$70,d5
		beq.s	loc_3FF60
		move.w	#$400,$1A(a1)
		move.b	#$1E,(a2)
		bclr	#3,$2A(a1)
		bclr	d6,$2A(a0)
		moveq	#$62,d0
		jsr	Play_Sound_2.w
		rts
; ---------------------------------------------------------------------------

loc_3FF60:
		move.w	#0,$1A(a1)
		asr	$18(a1)
		move.l	#$B000,d0
		btst	#0,$2A(a0)
		beq.s	loc_3FF7A
		neg.l	d0

loc_3FF7A:
		add.l	d0,$10(a1)
		rts
; End of function sub_3FE70

; ---------------------------------------------------------------------------

loc_3FF80:

		move.w	$30(a0),d2
		move.w	$32(a0),d3
		lea	(Player_1).w,a1
		moveq	#3,d6
		bsr.s	loc_3FF9E
		lea	(Player_2).w,a1
		moveq	#4,d6
		bsr.s	loc_3FF9E
		jmp	Delete_Sprite_If_Not_In_Range.w
; ---------------------------------------------------------------------------

loc_3FF9E:

		btst	d6,$2A(a0)
		bne.w	loc_40042
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		addi.w	#$20,d0
		cmpi.w	#$40,d0
		bhs.w	locret_40040
		move.w	$14(a1),d0
		sub.w	$14(a0),d0
		add.w	d2,d0
		cmp.w	d3,d0
		bhs.w	locret_40040
		btst	#3,$2A(a1)
		bne.w	locret_40040
		cmpi.b	#4,5(a1)
		bhs.s	locret_40040
		tst.b	$2E(a1)
		bne.s	locret_40040
		btst	#1,$2A(a0)
		bne.s	loc_3FFF2
		btst	#1,$2A(a1)
		beq.s	locret_40040

loc_3FFF2:
		bset	#1,$2A(a1)
		bset	#3,$2A(a1)
		bset	d6,$2A(a0)
		bclr	#2,$2A(a1)
		bclr	#4,$2A(a1)
		move.b	#0,$2F(a1)
		move.b	#0,$40(a1)
		moveq	#1,d6
		move.w	#1,$1C(a1)
		move.w	a0,$42(a1)		; NAT: Save the platform. Hack!!!
		tst.b	$27(a1)
		bne.s	locret_40040
		move.b	#1,$27(a1)
		move.b	#0,$20(a1)
		move.b	#$7F,$30(a1)
		move.b	#8,$31(a1)

locret_40040:

		rts
; ---------------------------------------------------------------------------

loc_40042:
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		addi.w	#$20,d0
		cmpi.w	#$40,d0
		bhs.s	loc_40078
		move.w	$14(a1),d0
		sub.w	$14(a0),d0
		add.w	d2,d0
		cmp.w	d3,d0
		bhs.s	loc_40078
		tst.b	$2E(a1)
		bne.s	loc_40078
		cmpi.b	#4,5(a1)
		bhs.s	loc_40078
		btst	#1,$2A(a1)
		bne.s	loc_40084

loc_40078:

		bclr	#3,$2A(a1)
		bclr	d6,$2A(a0)
		clr.w	$42(a1)			; NAT: clear the platform. Hack!!!
		rts
; ---------------------------------------------------------------------------

loc_40084:
		move.b	#$7F,$30(a1)
		tst.w	$1A(a1)
		bpl.s	loc_400A6
		addi.w	#$68,$1A(a1)
		move.b	(Level_frame_counter+1).w,d0
		andi.b	#7,d0
		bne.s	locret_400A4
		asr	$18(a1)

locret_400A4:
		rts
; ---------------------------------------------------------------------------

loc_400A6:
		move.w	#$A8,$1A(a1)
		btst	#1,$2A(a0)
		beq.s	loc_400BA
		move.w	#-$330,$1A(a1)

loc_400BA:
		move.b	(Level_frame_counter+1).w,d0
		andi.b	#7,d0
		bne.s	locret_400C8
		asr	$18(a1)

locret_400C8:
		rts
; ---------------------------------------------------------------------------

loc_400CA:

		move.w	$30(a0),d2
		move.w	$32(a0),d3
		lea	(Player_1).w,a1
		moveq	#3,d6
		move.w	(Ctrl_1_logical).w,d5
		bsr.s	sub_400F0
		lea	(Player_2).w,a1
		moveq	#4,d6
		move.w	(Ctrl_2_logical).w,d5
		bsr.s	sub_400F0
		jmp	Delete_Sprite_If_Not_In_Range.w

; =============== S U B R O U T I N E =======================================


sub_400F0:

		btst	d6,$2A(a0)
		bne.w	loc_401AC

loc_400F8:
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		add.w	d2,d0
		cmp.w	d3,d0
		bhs.w	locret_401A2

loc_40108:
		move.w	$14(a1),d0
		sub.w	$14(a0),d0
		addi.w	#$33,d0
		cmpi.w	#$40,d0
		bhs.w	locret_401A2
		btst	#1,$2A(a1)
		beq.w	locret_401A2
		btst	#3,$2A(a1)
		bne.s	locret_401A2
		cmpi.b	#6,5(a1)
		bhs.s	locret_401A2
		tst.b	$2E(a1)
		bne.s	locret_401A2
		tst.w	$1A(a1)
		bmi.s	loc_401A4
		move.w	a0,$42(a1)		; NAT: Save the platform. Hack!!!
		bset	#3,$2A(a1)
		bset	d6,$2A(a0)
		move.b	$44(a1),$1E(a1)
		move.b	$45(a1),$1F(a1)
		bclr	#2,$2A(a1)
		bclr	#2,$2A(a1)
		bclr	#4,$2A(a1)
		clr.b	$20(a1)
		clr.b	$2F(a1)
		clr.b	$40(a1)
		clr.b	spin_dash_flag(a1)		; NAT: Also clear spindash flag
		asr	$18(a1)
		move.w	$18(a1),$1C(a1)
		asr	$1A(a1)
		cmpi.b	#2,5(a1)
		beq.s	locret_401A2
		move.b	#2,5(a1)
		move.b	#$78,$34(a1)

locret_401A2:

		rts
; ---------------------------------------------------------------------------

loc_401A4:
		addi.w	#$68,$1A(a1)
		rts
; ---------------------------------------------------------------------------

loc_401AC:
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		add.w	d2,d0
		cmp.w	d3,d0
		bhs.s	loc_401DA
		move.w	$14(a1),d0
		sub.w	$14(a0),d0
		addi.w	#$33,d0
		cmpi.w	#$40,d0
		bhs.s	loc_401DA
		tst.b	$2E(a1)
		bne.s	loc_401DA
		btst	#1,$2A(a1)
		bne.s	loc_401E6

loc_401DA:

		bclr	#3,$2A(a1)
		bclr	d6,$2A(a0)
		clr.w	$42(a1)			; NAT: Save the platform. Hack!!!
		rts
; ---------------------------------------------------------------------------

loc_401E6:
		andi.w	#$70,d5
		beq.s	loc_4023E
		bclr	#3,$2A(a1)
		bclr	d6,$2A(a0)
		move.w	#-$680,$1A(a1)
		cmpi.b	#2,$38(a1)
		bne.s	loc_4020A
		move.w	#-$600,$1A(a1)

loc_4020A:
		move.b	#$E,$1E(a1)
		move.b	#7,$1F(a1)
		move.b	#2,$20(a1)
		bset	#2,$2A(a1)
		bclr	#4,$2A(a1)
		move.b	#0,$2F(a1)
		move.b	#1,$40(a1)
		moveq	#$62,d0
		jsr	Play_Sound_2.w
		rts
; ---------------------------------------------------------------------------

loc_4023E:
		tst.w	$1A(a1)
		bpl.s	loc_40256
		asr	$18(a1)
		move.w	$18(a1),$1C(a1)
		addi.w	#$68,$1A(a1)
		rts
; ---------------------------------------------------------------------------

loc_40256:
		asr	$18(a1)
		move.w	$18(a1),$1C(a1)
		move.w	#$A8,$1A(a1)
		btst	#1,$2A(a0)
		beq.s	locret_40274
		move.w	#-$198,$1A(a1)

locret_40274:
		rts
; End of function sub_400F0

; ---------------------------------------------------------------------------

Obj_SOZSpawningSandBlocks:

		move.l	#Map_SOZSpawningSandBlocks,$C(a0)
		move.w	#$43C0,$A(a0)
		ori.b	#4,4(a0)
		move.b	#$10,7(a0)
		move.b	#$C,6(a0)
		move.w	#prio(4),8(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		lsl.w	#3,d0
		add.w	d0,$10(a0)
		move.w	$10(a0),$44(a0)
		move.w	$14(a0),$46(a0)
		move.w	$44(a0),$30(a0)
		andi.w	#-$80,d0
		addi.w	#$300,d0
		move.w	d0,$32(a0)
		move.l	#loc_402CC,(a0)

loc_402CC:
		tst.w	$34(a0)
		beq.s	loc_402EE
		subq.w	#1,$34(a0)
		bne.s	.rts
		tst.b	(OscNumbers+$16).w
		beq.s	loc_402EE
		move.w	#1,$34(a0)
		subq.w	#1,$36(a0)
.rts		rts
; ---------------------------------------------------------------------------

loc_402EE:

		moveq	#0,d0
		move.b	(OscNumbers+$16).w,d0
		add.w	$46(a0),d0
		move.w	d0,$14(a0)
		bsr.s	sub_40302

loc_402FE:
		bra.w	loc_403B0

; =============== S U B R O U T I N E =======================================


sub_40302:
		subq.w	#1,$36(a0)
		bpl.s	locret_4036C
		move.w	#$7F,$36(a0)
		tst.b	OptionsBits.w		; NAT: If alternate mode, spawn quicker
		bpl.s	.noquick
		move.w	#$2F,$36(a0)		; set smaller delay

.noquick	jsr	Create_New_Sprite.w
		bne.w	loc_40366
		move.l	#loc_4036E,(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		move.b	4(a0),4(a1)
		move.l	$C(a0),$C(a1)
		move.w	$A(a0),$A(a1)
		move.w	#prio(5),8(a1)
		move.b	#$18,7(a1)
		move.b	#$C,6(a1)
		moveq	#0,d0
		move.b	$2C(a0),d0
		lsl.w	#4,d0
		move.w	d0,$34(a1)
		move.w	$30(a0),$30(a1)
		move.w	$32(a0),$32(a1)

loc_40366:
		move.w	#1,$34(a0)

locret_4036C:

		rts
; End of function sub_40302

; ---------------------------------------------------------------------------

loc_4036E:
		move.w	$10(a0),-(sp)
		jsr	MoveSprite.w
		cmpi.w	#$200,$1A(a0)
		blt.s	loc_403A0
		jsr	ObjCheckFloorDist.w
		tst.w	d1
		bpl.s	loc_403A0
		add.w	d1,$14(a0)
		move.l	#loc_403DC,(a0)
		move.w	#-$100,$18(a0)
		move.w	#0,$1A(a0)

loc_403A0:

		move.w	(sp)+,d4

loc_403A2:

		move.w	#$18,d1
		move.w	#$D,d3
		jsr	SolidObjectTop.w

loc_403B0:
		move.w	$30(a0),d0
		andi.w	#-$80,d0
		sub.w	(Camera_X_pos_coarse_back).w,d0
		cmp.w	$32(a0),d0
		bhi.w	loc_403CA
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_403CA:
		move.w	respawn_addr(a0),d0
		beq.s	loc_403D6
		movea.w	d0,a2
		bclr	#7,(a2)

loc_403D6:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_403DC:
		subq.w	#1,$34(a0)
		bne.s	loc_403F4
		move.w	$14(a0),$46(a0)
		move.w	#0,$18(a0)
		move.l	#loc_4040C,(a0)

loc_403F4:
		move.w	$10(a0),-(sp)
		jsr	MoveSprite2.w

loc_403FE:
		jsr	ObjCheckFloorDist.w

loc_40404:
		add.w	d1,$14(a0)
		move.w	(sp)+,d4
		bra.s	loc_403A2
; ---------------------------------------------------------------------------

loc_4040C:
		jsr	MoveSprite2.w
		addi.w	#8,$1A(a0)
		move.w	$46(a0),d0
		addi.w	#$12,d0
		cmp.w	$14(a0),d0
		bhs.s	loc_40432
		move.w	#$7F00,$10(a0)
		move.w	#$7F00,$30(a0)

loc_40432:
		move.w	$10(a0),d4
		bra.w	loc_403A2
; ---------------------------------------------------------------------------
Map_SOZSpawningSandBlocks:include "Levels/SOZ/Misc Object Data/Map - Spawning Sand Blocks.asm"


; ---------------------------------------------------------------------------

Obj_3B_2:
		move.b	$2C(a0),d0
		andi.w	#$7F,d0
		lsl.w	#4,d0
		move.w	d0,$30(a0)
		move.l	#loc_4045E,(a0)

loc_4045E:
		lea	(Player_1).w,a1
		moveq	#3,d6
		bsr.s	sub_40474
		lea	(Player_2).w,a1
		moveq	#4,d6
		bsr.s	sub_40474
		jmp	Delete_Sprite_If_Not_In_Range.w

; =============== S U B R O U T I N E =======================================


sub_40474:

		btst	d6,$2A(a0)
		bne.w	loc_40508
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		addi.w	#$10,d0
		cmpi.w	#$20,d0
		bhs.w	locret_40506
		move.w	$14(a1),d0
		sub.w	$14(a0),d0
		addi.w	#$10,d0
		cmpi.w	#$20,d0
		bhs.s	locret_40506
		btst	#3,$2A(a1)
		bne.s	locret_40506
		cmpi.b	#4,5(a1)
		bhs.s	locret_40506
		tst.b	$2E(a1)
		bne.s	locret_40506
		cmpi.w	#$800,$1A(a1)
		blt.s	locret_40506
		bset	#3,$2A(a1)
		bset	d6,$2A(a0)
		move.b	#$E,$1E(a1)
		move.b	#7,$1F(a1)
		move.b	#2,$20(a1)
		bset	#2,$2A(a1)
		bclr	#4,$2A(a1)
		move.b	#0,$2F(a1)
		move.b	#0,$40(a1)
		bset	#1,$2A(a1)
		move.b	#-$7F,$2E(a1)

loc_40500:
		move.w	#0,$18(a1)

locret_40506:

		rts
; ---------------------------------------------------------------------------

loc_40508:
		move.w	$18(a1),d0
		ext.l	d0
		lsl.l	#8,d0
		add.l	d0,$10(a1)
		move.w	$1A(a1),d0
		addi.w	#$38,$1A(a1)
		ext.l	d0
		lsl.l	#8,d0
		add.l	d0,$14(a1)
		move.w	$14(a1),d0
		sub.w	$30(a0),d0
		cmp.w	$14(a0),d0
		blt.s	locret_40506
		bclr	#3,$2A(a1)
		bclr	d6,$2A(a0)
		move.b	#0,$2E(a1)
		rts
; End of function sub_40474

; ---------------------------------------------------------------------------

Obj_SOZPushableRock:

		move.l	#Map_SOZPushableRock,$C(a0)
		move.w	#$4455,$A(a0)
		ori.b	#4,4(a0)
		move.b	#$10,7(a0)
		move.b	#$C,6(a0)
		move.b	#$B,$1E(a0)
		move.w	#prio(5),8(a0)

Load_SOZ_Pushable_Rock_Track_Ride_Info:
		lea	(SOZRockRideInfo).l,a1
		moveq	#0,d0
		move.b	$2C(a0),d0
		andi.w	#$1F,d0
		add.w	d0,d0
		add.w	d0,d0
		movea.l	(a1,d0.w),a1
		move.w	(a1)+,$3A(a0)
		move.l	a1,$36(a0)
		tst.b	$2C(a0)
		bpl.s	loc_405A4
		move.w	a0,(__u_F7C4).w
		move.l	#loc_405D6,(a0)
		bra.s	loc_405D6
; ---------------------------------------------------------------------------

loc_405A4:
		move.l	#loc_405AA,(a0)

loc_405AA:

		move.b	(Player_1+$2A).w,$30(a0)
		move.b	(Player_2+$2A).w,$31(a0)
		move.w	#$1B,d1
		move.w	#$C,d2
		move.w	#$D,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		bsr.w	sub_406B4
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_405D6:

		bra.s	loc_405AA
; ---------------------------------------------------------------------------

loc_405D8:

		move.w	$10(a0),-(sp)
		jsr	MoveSprite.w
		move.w	(sp)+,d4
		move.w	(Camera_max_Y_pos).w,d0
		addi.w	#$120,d0
		cmp.w	$14(a0),d0
		bgt.s	loc_405FA
		move.w	#$7F00,d4
		move.w	d4,$10(a0)

loc_405FA:
		move.w	$3A(a0),d0
		cmp.w	$14(a0),d0
		bhs.s	loc_4063C
		move.w	d0,$14(a0)
		move.w	#0,$1A(a0)
		movea.l	$36(a0),a1
		move.w	(a1)+,d0
		bpl.s	loc_4061E
		move.l	#loc_406AE,(a0)
		bra.s	loc_4063C
; ---------------------------------------------------------------------------

loc_4061E:
		move.w	d0,$3A(a0)
		move.l	a1,$36(a0)
		move.l	#loc_40654,(a0)
		move.w	#$100,$18(a0)
		cmp.w	$10(a0),d0
		bhs.s	loc_4063C
		neg.w	$18(a0)

loc_4063C:

		move.w	#$1B,d1
		move.w	#$C,d2
		move.w	#$D,d3
		jsr	SolidObjectFull.w
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_40654:
		move.w	$10(a0),-(sp)
		jsr	MoveSprite2.w
		move.w	(sp)+,d4
		move.b	(Level_frame_counter+1).w,d0
		andi.b	#$1F,d0
		bne.s	loc_40672
		moveq	#$55,d0
		jsr	Play_Sound_2.w

loc_40672:
		tst.w	$18(a0)
		bmi.s	loc_40684
		move.w	$3A(a0),d0
		cmp.w	$10(a0),d0
		bhi.s	loc_406AC
		bra.s	loc_4068E
; ---------------------------------------------------------------------------

loc_40684:
		move.w	$3A(a0),d0
		cmp.w	$10(a0),d0
		blo.s	loc_406AC

loc_4068E:
		movea.l	$36(a0),a1
		move.w	(a1)+,d0
		bpl.s	loc_4069E
		move.l	#loc_406AE,(a0)
		bra.s	loc_4063C
; ---------------------------------------------------------------------------

loc_4069E:
		move.w	d0,$3A(a0)
		move.l	a1,$36(a0)
		move.l	#loc_405D8,(a0)

loc_406AC:

		bra.s	loc_4063C
; ---------------------------------------------------------------------------

loc_406AE:

		move.w	$10(a0),d4
		bra.s	loc_4063C

; =============== S U B R O U T I N E =======================================


sub_406B4:
		moveq	#0,d5
		move.b	$2A(a0),d3
		andi.b	#$60,d3
		beq.w	locret_406E2
		move.w	$10(a0),d2
		lea	(Player_1).w,a1
		move.b	$30(a0),d0
		moveq	#5,d6
		bsr.s	sub_406E4
		tst.w	d5
		bne.s	locret_406E2
		lea	(Player_2).w,a1
		move.b	$31(a0),d0
		moveq	#6,d6
		bsr.s	sub_406E4

locret_406E2:

		rts
; End of function sub_406B4


; =============== S U B R O U T I N E =======================================


sub_406E4:

		btst	d6,d3
		beq.s	locret_4075C
		cmp.w	$10(a1),d2
		bhs.s	loc_40726
		btst	#5,d0
		beq.s	locret_4075C
		subq.w	#1,$32(a0)
		bpl.s	loc_40722
		move.w	#4,$32(a0)
		subq.w	#1,$10(a0)
		subq.w	#1,$10(a1)
		bsr.s	sub_4076E
		move.w	$10(a0),d3
		addi.w	#$10,d3
		jsr	ObjCheckFloorDist2.w
		cmpi.w	#$E,d1
		bgt.s	loc_4075E
		add.w	d1,$14(a0)

loc_40722:

		moveq	#1,d5
		rts
; ---------------------------------------------------------------------------

loc_40726:
		btst	#5,d0
		beq.s	locret_4075C
		subq.w	#1,$32(a0)
		bpl.s	loc_40722
		move.w	#4,$32(a0)
		addq.w	#1,$10(a0)
		addq.w	#1,$10(a1)
		bsr.s	sub_4076E
		move.w	$10(a0),d3
		subi.w	#$10,d3
		jsr	ObjCheckFloorDist2.w
		cmpi.w	#$E,d1
		bgt.s	loc_4075E
		add.w	d1,$14(a0)
		moveq	#1,d5

locret_4075C:
		rts
; ---------------------------------------------------------------------------

loc_4075E:

		bset	#1,$2A(a0)
		move.l	#loc_405D8,(a0)
		moveq	#1,d5
		rts
; End of function sub_406E4


; =============== S U B R O U T I N E =======================================


sub_4076E:

		moveq	#$69,d0
		jmp	Play_Sound_2.w

; ---------------------------------------------------------------------------
Map_SOZPushableRock:include "Levels/SOZ/Misc Object Data/Map - Pushable Rock.asm"

; ---------------------------------------------------------------------------

Obj_SOZSpringVine:

		move.l	#Map_SOZSpringVine,$C(a0)

loc_4078E:
		move.w	#$43C9,$A(a0)
		ori.b	#4,4(a0)
		move.b	#$2C,7(a0)
		move.b	#$2C,6(a0)
		move.w	#prio(5),8(a0)
		bset	#7,$2A(a0)
		jsr	Create_New_Sprite3.w
		bne.w	loc_40840
		move.l	#loc_40872,(a1)
		move.l	$C(a0),$C(a1)
		move.w	$A(a0),$A(a1)
		move.b	4(a0),4(a1)
		move.b	#$40,7(a1)
		move.b	#$40,6(a1)
		move.w	#prio(4),8(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		moveq	#8,d0
		bset	#6,4(a1)
		move.w	d0,$16(a1)
		move.l	$10(a0),d1
		move.l	$14(a0),d2
		subi.l	#$280000,d1
		addi.l	#$280000,d2
		lea	$18(a1),a2
		move.w	$16(a1),d0
		subq.w	#1,d0

loc_4081C:
		swap	d1
		swap	d2
		move.w	d1,(a2)+
		move.w	d2,(a2)+
		swap	d1
		swap	d2
		move.w	#0,(a2)+
		addi.l	#$B504F,d1
		subi.l	#$B504F,d2
		dbf	d0,loc_4081C
		move.w	a1,$3C(a0)

loc_40840:
		addi.w	#$28,$14(a0)
		move.w	#$60,$30(a0)
		move.l	#loc_40852,(a0)

loc_40852:
		bsr.s	sub_40878
		bsr.w	sub_40A08
		move.w	#$30,d1
		lea	(Level_layout_main+$EF8).l,a2
		move.w	$10(a0),d4
		jsr	SolidObjectTopSloped.w
		jmp	Delete_Sprite_If_Not_In_Range.w
; ---------------------------------------------------------------------------

loc_40872:
		jmp	Sprite_OnScreen_Test.w

; =============== S U B R O U T I N E =======================================


sub_40878:
		moveq	#0,d4
		move.w	$30(a0),d5
		lea	$35(a0),a2
		lea	(Player_2).w,a1
		moveq	#4,d6
		bsr.w	sub_4093E
		subq.w	#1,a2
		lea	(Player_1).w,a1
		moveq	#3,d6
		bsr.w	sub_4093E
		move.w	d5,$30(a0)
		tst.b	$36(a0)
		bne.s	loc_408B6
		move.w	#$40,d0
		cmp.w	$32(a0),d4
		beq.s	locret_408B4
		bge.s	loc_408B0
		neg.w	d0

loc_408B0:
		add.w	d0,$32(a0)

locret_408B4:

		rts
; ---------------------------------------------------------------------------

loc_408B6:
		moveq	#0,d0
		move.b	$23(a0),d0
		addq.b	#2,$23(a0)
		move.w	word_408D4(pc,d0.w),d0
		move.w	d0,$32(a0)
		bne.s	locret_408B4
		move.b	d0,$36(a0)
		move.b	d0,$23(a0)
		rts
; End of function sub_40878

; ---------------------------------------------------------------------------
word_408D4:	dc.w $FF00
		dc.w $FF40
		dc.w $FF80
		dc.w $FFC0
		dc.w $FFFF
		dc.w $40
		dc.w $80
		dc.w $C0
		dc.w $100
		dc.w $C0
		dc.w $80
		dc.w $40
		dc.w 1
		dc.w $FFE0
		dc.w $FFC0
		dc.w $FFA0
		dc.w $FF80
		dc.w $FFA0
		dc.w $FFC0
		dc.w $FFE0
		dc.w $FFFF
		dc.w $10
		dc.w $20
		dc.w $30
		dc.w $40
		dc.w $30
		dc.w $20
		dc.w $10
		dc.w 1
		dc.w $FFF8
		dc.w $FFF0
		dc.w $FFE8
		dc.w $FFE0
		dc.w $FFE8
		dc.w $FFF0
		dc.w $FFF8
		dc.w $FFFF
		dc.w 4
		dc.w 8
		dc.w $C
		dc.w $10
		dc.w $C
		dc.w 8
		dc.w 4
		dc.w 1
		dc.w $FFFE
		dc.w $FFFC
		dc.w $FFFA
		dc.w $FFF8
		dc.w $FFFA
		dc.w $FFFC
		dc.w $FFFE
		dc.w 0

; =============== S U B R O U T I N E =======================================


sub_4093E:

		btst	d6,$2A(a0)
		bne.s	loc_4094A
		move.b	#0,(a2)
		rts
; ---------------------------------------------------------------------------

loc_4094A:
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		addi.w	#$30,d0
		cmpi.w	#$60,d0
		bhs.s	locret_409B8
		btst	#0,$2A(a0)
		beq.s	loc_4096A
		not.w	d0
		addi.w	#$60,d0

loc_4096A:
		move.w	d0,d5
		move.w	#-$100,d4
		tst.b	(a2)
		bne.s	loc_40982
		moveq	#1,d1
		cmpi.w	#$3C,d0
		bhs.s	loc_4097E
		neg.w	d1

loc_4097E:
		move.b	d1,(a2)
		rts
; ---------------------------------------------------------------------------

loc_40982:
		bpl.s	loc_40996
		cmpi.w	#$3C,d0
		blo.s	locret_409B8
		move.b	#0,(a2)
		move.b	#1,$36(a0)
		bra.s	loc_409BA
; ---------------------------------------------------------------------------

loc_40996:
		moveq	#$18,d1
		btst	#0,$2A(a0)
		beq.s	loc_409A2
		not.w	d1

loc_409A2:
		sub.w	d1,$1C(a1)
		cmpi.w	#$3C,d0
		bhs.s	locret_409B8
		move.b	#0,(a2)
		move.b	#1,$36(a0)
		bra.s	loc_409BA
; ---------------------------------------------------------------------------

locret_409B8:

		rts
; ---------------------------------------------------------------------------

loc_409BA:

		move.w	#-$EF0,$1A(a1)
		move.w	#-$EF0,$18(a1)
		bset	#0,$2A(a1)
		btst	#0,$2A(a0)
		beq.s	loc_409DE
		bclr	#0,$2A(a1)
		neg.w	$18(a1)

loc_409DE:
		bset	#1,$2A(a1)
		bclr	#3,$2A(a1)
		clr.b	$40(a1)
		move.b	#$10,$20(a1)
		move.b	#2,5(a1)
		move.b	#0,$2F(a1)
		moveq	#-$4F,d0
		jmp	Play_Sound_2.w
; End of function sub_4093E


; =============== S U B R O U T I N E =======================================


sub_40A08:
		move.w	$30(a0),d5
		beq.w	locret_40AA8
		lea	(byte_40AAA).l,a1
		moveq	#0,d0
		move.b	(a1,d5.w),d0
		muls.w	$32(a0),d0
		move.w	d5,d1
		ext.l	d1
		asl.l	#8,d1
		add.l	d1,d0

loc_40A28:
		move.l	d0,d4
		move.w	d5,d1
		divs.w	d1,d0
		ext.l	d0
		asl.l	#8,d0
		move.w	d1,d2
		subq.w	#1,d2
		lea	(Level_layout_main+$EF8).l,a2
		moveq	#0,d3

loc_40A3E:
		move.b	d3,(a2)+
		swap	d3
		add.l	d0,d3
		swap	d3
		dbf	d2,loc_40A3E
		move.w	#$60,d2
		sub.w	d1,d2
		bls.s	loc_40A6E
		move.l	#$6000,d0
		sub.l	d4,d0
		divs.w	d2,d0
		ext.l	d0
		asl.l	#8,d0
		subq.w	#1,d2

loc_40A62:
		move.b	d3,(a2)+
		swap	d3
		add.l	d0,d3
		swap	d3
		dbf	d2,loc_40A62

loc_40A6E:
		lea	(Level_layout_main+$EFE).l,a3
		move.w	$14(a0),d2
		addq.w	#6,d2
		movea.w	$3C(a0),a1
		lea	$1A(a1),a2
		moveq	#6,d3
		btst	#0,$2A(a0)
		beq.s	loc_40A92

loc_40A8C:
		lea	$44(a1),a2
		neg.w	d3

loc_40A92:
		moveq	#7,d0

loc_40A94:
		move.b	(a3),d1
		ext.w	d1
		neg.w	d1
		add.w	d2,d1
		move.w	d1,(a2)
		adda.w	d3,a2
		adda.w	#$C,a3
		dbf	d0,loc_40A94

locret_40AA8:
		rts
; End of function sub_40A08

; ---------------------------------------------------------------------------
byte_40AAA:	dc.b    0,   0,   1,   1,   2,   3,   3,   4,   5,   5,   6,   7,   7,   8,   9,   9,  $A,  $B,  $B,  $C
		dc.b   $D,  $D,  $E,  $F,  $F, $10, $11, $11, $12, $13, $13, $14, $15, $15, $16, $17, $17, $18, $19, $19
		dc.b  $1A, $1B, $1B, $1C, $1D, $1D, $1E, $1F, $1F, $20, $21, $21, $22, $23, $23, $24, $25, $25, $26, $27
		dc.b  $27, $28, $27, $27, $26, $25, $24, $23, $22, $21, $20, $1F, $1E, $1D, $1C, $1B, $1A, $19, $18, $17
		dc.b  $16, $15, $14, $13, $12, $11, $10,  $F,  $E,  $D,  $C,  $B,  $A,   9,   8,   7,   0,   0
Map_SOZSpringVine:include "Levels/SOZ/Misc Object Data/Map - Spring Vine.asm"

; ---------------------------------------------------------------------------

Obj_SOZRisingSandWall:

		move.l	#Map_SOZRisingSandWall,$C(a0)
		move.w	#$4432,$A(a0)
		ori.b	#4,4(a0)
		move.b	#$C,7(a0)
		move.b	#$34,6(a0)
		move.w	#prio(5),8(a0)
		move.w	#$19,$30(a0)
		move.l	#loc_40B48,(a0)

loc_40B48:
		moveq	#0,d1
		move.b	$2C(a0),d1
		move.w	d1,d2
		add.w	d2,d2
		lea	(Player_1).w,a1
		bsr.s	sub_40B62
		lea	(Player_2).w,a1
		bsr.s	sub_40B62
		bra.w	loc_40C0E

; =============== S U B R O U T I N E =======================================


sub_40B62:

		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		add.w	d1,d0
		cmp.w	d2,d0
		bhs.w	locret_40BC8
		move.w	$14(a1),d0
		sub.w	$14(a0),d0
		addi.w	#$A4,d0
		cmpi.w	#$C0,d0
		bhs.s	locret_40BC8
		tst.b	(Debug_On).w
		bne.s	locret_40BC8
		bset	#6,4(a0)
		move.w	#2,$16(a0)
		lea	$18(a0),a2
		move.w	$10(a0),(a2)+
		move.w	$14(a0),d0
		move.w	d0,(a2)+
		move.w	#9,(a2)+
		move.w	$10(a0),(a2)+
		move.w	$14(a0),(a2)+
		move.w	#0,(a2)+
		move.b	#3,$24(a0)
		moveq	#$47,d0
		jsr	Play_Sound_2.w
		move.l	#loc_40BCA,(a0)

locret_40BC8:

		rts
; End of function sub_40B62

; ---------------------------------------------------------------------------

loc_40BCA:
		lea	$18(a0),a2
		subq.b	#1,$24(a0)
		bpl.s	loc_40BEC
		move.b	#3,$24(a0)
		addq.b	#1,$1D(a0)
		cmpi.b	#$D,$1D(a0)
		blo.s	loc_40BEC
		move.b	#9,$1D(a0)

loc_40BEC:

		subq.w	#4,$14(a0)
		move.w	$14(a0),$20(a0)
		subq.w	#1,$30(a0)
		bpl.s	loc_40C0E
		bclr	#6,4(a0)
		move.w	#0,$16(a0)
		move.l	#loc_40C2A,(a0)

loc_40C0E:

		move.w	#$17,d1
		move.w	#$34,d2
		move.w	#$35,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_40C2A:
		move.w	#$17,d1
		move.w	#$34,d2
		move.w	#$35,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		swap	d6
		andi.w	#3,d6
		beq.w	loc_40CE6
		btst	#0,d6
		beq.s	loc_40C66
		lea	(Player_1).w,a1
		cmpi.b	#2,$20(a1)

loc_40C5A:
		bne.s	loc_40C66
		asr	$18(a1)
		asr	$1C(a1)
		bra.s	loc_40C80
; ---------------------------------------------------------------------------

loc_40C66:

		btst	#1,d6
		beq.s	loc_40CE6
		lea	(Player_2).w,a1
		cmpi.b	#2,$20(a1)
		bne.s	loc_40CE6
		asr	$18(a1)
		asr	$1C(a1)

loc_40C80:
		moveq	#-$7E,d0
		jsr	Play_Sound_2.w
		move.l	#loc_40CEC,(a0)
		move.b	#5,$24(a0)
		move.b	#1,$22(a0)
		lea	(Player_1).w,a1
		bclr	#3,$2A(a0)
		beq.s	loc_40CB2
		bclr	#3,$2A(a1)
		bset	#1,$2A(a1)

loc_40CB2:
		bclr	#5,$2A(a0)
		beq.s	loc_40CC0
		bclr	#5,$2A(a1)

loc_40CC0:
		lea	(Player_2).w,a1
		bclr	#4,$2A(a0)
		beq.s	loc_40CD8
		bclr	#3,$2A(a1)
		bset	#1,$2A(a1)

loc_40CD8:
		bclr	#6,$2A(a0)
		beq.s	loc_40CE6
		bclr	#5,$2A(a1)

loc_40CE6:

		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_40CEC:
		subq.b	#1,$24(a0)
		bpl.s	loc_40D0A
		move.b	#5,$24(a0)
		addq.b	#1,$22(a0)
		cmpi.b	#9,$22(a0)
		blo.s	loc_40D0A
		move.w	#$7F00,$10(a0)

loc_40D0A:

		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------
Map_SOZRisingSandWall:include "Levels/SOZ/Misc Object Data/Map - Rising Sand Wall.asm"

; ---------------------------------------------------------------------------

Obj_SOZLightSwitch:
		move.w	#prio(1),8(a0)
		tst.b	OptionsBits.w		; NAT: Check if alternate layout
		bmi.w	loc_40D0A		; if yes, just delete

		move.b	#4,4(a0)
		move.b	#$18,7(a0)
		move.b	#$40,6(a0)
		move.w	$14(a0),$46(a0)
		move.l	#Map_SOZLightSwitch,$C(a0)
		move.w	#$3AF,$A(a0)
		move.b	$2C(a0),d0
		andi.w	#$7F,d0
		lsl.w	#3,d0
		move.w	d0,$2E(a0)
		move.w	#2,$38(a0)
		move.b	#6,$22(a0)
		bset	#6,4(a0)
		move.w	#1,$16(a0)
		lea	$18(a0),a2
		move.w	$10(a0),(a2)+
		move.w	$14(a0),(a2)+
		move.w	#0,(a2)+
		move.l	#loc_40EC4,(a0)

loc_40EC4:
		tst.b	$34(a0)
		beq.s	loc_40ED2
		tst.w	$30(a0)
		bne.s	loc_40F0A
		bra.s	loc_40ED8
; ---------------------------------------------------------------------------

loc_40ED2:
		tst.w	$30(a0)
		beq.s	loc_40F0A

loc_40ED8:
		move.w	$36(a0),d2
		cmp.w	$2E(a0),d2
		beq.s	loc_40F2E
		add.w	$38(a0),d2
		cmp.w	$2E(a0),d2
		bne.s	loc_40F14
		move.w	#$383,(PalCyc_Counters+$2).w
		move.b	#0,(__u_F7C3).w
		move.w	(PalCyc_Counters2+$6).w,d0
		neg.b	d0
		move.b	d0,(PalCyc_Counters2).w
		move.w	#0,(PalCyc_Counters2+$8).w
		bra.s	loc_40F14
; ---------------------------------------------------------------------------

loc_40F0A:

		move.w	$36(a0),d2
		beq.s	loc_40F2E
		sub.w	$38(a0),d2

loc_40F14:

		move.w	d2,$36(a0)
		move.w	$46(a0),d0
		add.w	d2,d0
		move.w	d0,$1A(a0)
		move.w	d2,d0
		beq.s	loc_40F2A
		lsr.w	#3,d0
		addq.w	#1,d0

loc_40F2A:
		move.b	d0,$1D(a0)

loc_40F2E:

		lea	$30(a0),a2
		lea	(Player_1).w,a1
		move.w	(Ctrl_1_logical).w,d0
		bsr.w	sub_40F52
		lea	(Player_2).w,a1
		addq.w	#1,a2
		move.w	(Ctrl_2_logical).w,d0
		bsr.w	sub_40F52
		jmp	Sprite_OnScreen_Test.w

; =============== S U B R O U T I N E =======================================


sub_40F52:

		tst.b	(a2)
		beq.w	loc_4100E
		tst.b	4(a1)
		bpl.s	loc_40FD8
		cmpi.b	#4,5(a1)
		bhs.s	loc_40FD8
		andi.b	#$70,d0
		beq.w	loc_40FE6
		clr.b	$2E(a1)
		clr.b	(a2)
		move.b	#$12,2(a2)
		andi.w	#$F00,d0
		beq.w	loc_40F88
		move.b	#$3C,2(a2)

loc_40F88:
		btst	#$A,d0
		beq.s	loc_40F94
		move.w	#-$200,$18(a1)

loc_40F94:
		btst	#$B,d0
		beq.s	loc_40FA0
		move.w	#$200,$18(a1)

loc_40FA0:
		move.w	#-$380,$1A(a1)
		bset	#1,$2A(a1)
		move.b	#1,$40(a1)
		move.b	#$E,$1E(a1)
		move.b	#7,$1F(a1)
		move.b	#2,$20(a1)
		bset	#2,$2A(a1)
		bclr	#4,$2A(a1)
		move.b	#0,$27(a1)
		rts
; ---------------------------------------------------------------------------

loc_40FD8:

		clr.b	$2E(a1)
		clr.b	(a2)
		move.b	#$3C,2(a2)
		rts
; ---------------------------------------------------------------------------

loc_40FE6:
		tst.b	$2C(a0)
		bpl.s	loc_41000
		movem.l	a1-a2,-(sp)
		jsr	(SonicOnObjHitFloor).l
		movem.l	(sp)+,a1-a2
		tst.w	d1
		beq.s	loc_40FD8
		bmi.s	loc_40FD8

loc_41000:
		move.w	$1A(a0),$14(a1)
		addi.w	#$30,$14(a1)

locret_4108E:
		rts
; ---------------------------------------------------------------------------

loc_4100E:
		tst.b	2(a2)
		beq.s	loc_4101C
		subq.b	#1,2(a2)
		bne.w	locret_4108E

loc_4101C:
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		addi.w	#$10,d0
		cmpi.w	#$20,d0
		bhs.w	locret_4108E
		move.w	$14(a1),d1
		sub.w	$1A(a0),d1
		subi.w	#$30,d1
		cmpi.w	#$18,d1
		bhs.w	locret_4108E
		tst.b	$2E(a1)
		bmi.s	locret_4108E
		cmpi.b	#4,5(a1)
		bhs.s	locret_4108E
		tst.b	(Debug_On).w
		bne.s	locret_4108E
		clr.w	$18(a1)
		clr.w	$1A(a1)
		clr.w	$1C(a1)
		move.w	$10(a0),$10(a1)
		move.w	$1A(a0),$14(a1)
		addi.w	#$30,$14(a1)

loc_41076:
		move.b	#$14,$20(a1)
		move.b	#1,$2E(a1)
		move.b	#1,(a2)
		moveq	#$5B,d0
		jmp	Play_Sound_2.w

; ---------------------------------------------------------------------------
Map_SOZLightSwitch:include "Levels/SOZ/Misc Object Data/Map - Light Switch.asm"

byte_4116A:	dc.b  $20, $40,	  0,   0
		dc.b  $20, $50,	  1, $30
		dc.b  $20, $50,	  2,  $C
; ---------------------------------------------------------------------------

Obj_SOZFloatingPillar:

		move.l	#Map_SOZFloatingPillar,$C(a0)
		move.w	#$4001,$A(a0)
		ori.b	#4,4(a0)
		move.w	#prio(5),8(a0)
		move.w	$10(a0),$44(a0)
		move.w	$14(a0),$46(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		lsr.w	#2,d0

loc_411A4:
		andi.w	#$1C,d0
		lea	byte_4116A(pc,d0.w),a2
		move.b	(a2)+,7(a0)
		move.b	(a2)+,6(a0)
		move.b	(a2)+,$22(a0)
		move.b	(a2)+,$34(a0)
		move.b	$2C(a0),d0
		andi.w	#$F,d0
		add.w	d0,d0
		move.w	off_41210(pc,d0.w),d0
		lea	off_41210(pc,d0.w),a1
		move.l	a1,$30(a0)
		move.l	#loc_411D8,(a0)

loc_411D8:
		move.w	$10(a0),-(sp)
		movea.l	$30(a0),a1
		jsr	(a1)
		move.w	(sp)+,d4
		moveq	#0,d1
		move.b	7(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		jsr	SolidObjectFull.w
		swap	d6
		and.b	$34(a0),d6
		bne.s	loc_4121E

loc_41206:

		move.w	$44(a0),d0

loc_4120A:
		jmp	Sprite_OnScreen_Test2.w
; ---------------------------------------------------------------------------
off_41210:	dc.w locret_4126E-off_41210

		dc.w loc_41270-off_41210
		dc.w loc_4127C-off_41210
		dc.w loc_41288-off_41210
		dc.w loc_412A8-off_41210
		dc.w loc_412B4-off_41210
		dc.w loc_412C0-off_41210
; ---------------------------------------------------------------------------

loc_4121E:
		cmpi.b	#1,$22(a0)
		bne.s	loc_4124A
		move.b	d6,d0
		andi.b	#$10,d0
		beq.s	loc_41238
		lea	(Player_1).w,a1
		jsr	sub_24280.w

loc_41238:
		andi.b	#$20,d6
		beq.s	loc_41248
		lea	(Player_2).w,a1
		jsr	sub_24280.w

loc_41248:
		bra.s	loc_41206
; ---------------------------------------------------------------------------

loc_4124A:
		move.b	d6,d0

loc_4124C:
		andi.b	#4,d0
		beq.s	loc_4125C
		lea	(Player_1).w,a1
		jsr	sub_24280.w

loc_4125C:
		andi.b	#8,d6
		beq.s	loc_4126C
		lea	(Player_2).w,a1
		jsr	sub_24280.w

loc_4126C:
		bra.s	loc_41206
; ---------------------------------------------------------------------------

locret_4126E:
		rts
; ---------------------------------------------------------------------------

loc_41270:
		moveq	#0,d0
		move.b	(OscNumbers+$A).w,d0
		subi.w	#$20,d0
		bra.s	loc_41294
; ---------------------------------------------------------------------------

loc_4127C:
		moveq	#0,d0
		move.b	(OscNumbers+$1E).w,d0
		subi.w	#$40,d0
		bra.s	loc_41294
; ---------------------------------------------------------------------------

loc_41288:
		moveq	#0,d0
		move.b	(OscNumbers+$3A).w,d0
		add.w	d0,d0
		subi.w	#$80,d0

loc_41294:

		btst	#0,$2A(a0)
		beq.s	loc_4129E
		neg.w	d0

loc_4129E:
		add.w	$44(a0),d0
		move.w	d0,$10(a0)
		rts
; ---------------------------------------------------------------------------

loc_412A8:
		moveq	#0,d0
		move.b	(OscNumbers+$A).w,d0
		subi.w	#$20,d0
		bra.s	loc_412CC
; ---------------------------------------------------------------------------

loc_412B4:
		moveq	#0,d0
		move.b	(OscNumbers+$1E).w,d0
		subi.w	#$40,d0
		bra.s	loc_412CC
; ---------------------------------------------------------------------------

loc_412C0:
		moveq	#0,d0
		move.b	(OscNumbers+$3A).w,d0
		add.w	d0,d0
		subi.w	#$80,d0

loc_412CC:

		btst	#0,$2A(a0)
		beq.s	loc_412D6
		neg.w	d0

loc_412D6:
		add.w	$46(a0),d0
		move.w	d0,$14(a0)
		rts
; ---------------------------------------------------------------------------
Map_SOZFloatingPillar:include "Levels/SOZ/Misc Object Data/Map - Floating Pillar.asm"

; ---------------------------------------------------------------------------

Obj_SOZSwingingPlatform:

		move.l	#Map_SOZSwingingPlatform,$C(a0)
		move.w	#$4001,$A(a0)
		move.b	#4,4(a0)
		move.b	#$20,7(a0)
		move.b	#$10,6(a0)
		move.w	#prio(5),8(a0)
		move.w	$10(a0),$44(a0)
		move.w	$14(a0),$46(a0)
		jsr	Create_New_Sprite3.w
		bne.w	loc_414E6
		move.l	#Draw_Sprite,(a1)
		move.l	$C(a0),$C(a1)
		move.w	$A(a0),$A(a1)
		move.b	#4,4(a1)
		move.b	#$60,7(a1)
		move.b	#$60,6(a1)
		move.w	#prio(5),8(a1)
		move.w	$10(a0),d2
		move.w	d2,$10(a1)
		move.w	$14(a0),d3
		move.w	d3,$14(a1)
		bset	#6,4(a1)
		lea	$18(a1),a2
		move.b	$2C(a0),d1
		andi.w	#$F,d1
		move.w	d1,$16(a1)
		subq.w	#1,d1

loc_414CA:
		move.w	d2,(a2)+
		move.w	d3,(a2)+
		move.w	#1,(a2)+
		dbf	d1,loc_414CA
		move.b	#2,$1D(a1)
		move.b	#1,$22(a1)
		move.w	a1,$3C(a0)

loc_414E6:
		move.w	#$4000,$26(a0)

loc_414EC:
		move.w	#0,$32(a0)
		andi.b	#-$10,$2C(a0)
		move.l	#loc_414FE,(a0)

loc_414FE:
		move.w	$10(a0),-(sp)
		bsr.w	sub_4154C
		move.w	#$20,d1
		move.w	#$11,d3
		move.w	(sp)+,d4
		jsr	SolidObjectTop.w
		move.w	$44(a0),d0
		andi.w	#-$80,d0
		sub.w	(Camera_X_pos_coarse_back).w,d0
		cmpi.w	#$280,d0
		bhi.s	loc_41530
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_41530:
		move.w	respawn_addr(a0),d0
		beq.s	loc_4153C
		movea.w	d0,a2
		bclr	#7,(a2)

loc_4153C:
		movea.w	$3C(a0),a1
		jsr	Delete_Referenced_Sprite.w
		jmp	Delete_Current_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_4154C:
		moveq	#0,d0
		moveq	#0,d1
		move.b	(OscNumbers+$1A).w,d0
		addi.b	#-$80,d0
		tst.b	$2C(a0)
		beq.s	loc_41562
		bsr.w	sub_41636

loc_41562:
		cmp.b	$36(a0),d0
		beq.w	locret_41634
		move.b	d0,$36(a0)
		btst	#0,$2A(a0)
		beq.s	loc_4157C
		neg.w	d0
		addi.w	#$80,d0

loc_4157C:
		btst	#1,$2A(a0)
		beq.s	loc_41586
		neg.w	d0

loc_41586:
		jsr	GetSineCosine.w
		move.w	$46(a0),d2
		move.w	$44(a0),d3
		moveq	#0,d6
		movea.w	$3C(a0),a1
		move.w	$16(a1),d6
		subq.w	#2,d6
		bcs.w	locret_41634
		swap	d0
		swap	d1
		asr.l	#4,d0
		asr.l	#4,d1
		move.l	d0,d4
		move.l	d1,d5
		asr.l	#1,d4
		asr.l	#1,d5
		add.l	d0,d4
		add.l	d1,d5
		lea	$1E(a1),a2

loc_415BC:
		movem.l	d4-d5,-(sp)
		swap	d4
		swap	d5
		add.w	d2,d4
		add.w	d3,d5
		move.w	d5,(a2)+
		move.w	d4,(a2)+
		movem.l	(sp)+,d4-d5
		add.l	d0,d4
		add.l	d1,d5
		addq.w	#2,a2
		dbf	d6,loc_415BC
		movem.l	d4-d5,-(sp)
		swap	d4
		swap	d5
		add.w	d2,d4
		add.w	d3,d5
		move.w	$24(a1),d2
		move.w	$26(a1),d3
		move.w	d5,$24(a1)
		move.w	d4,$26(a1)
		move.w	d2,$10(a1)
		move.w	d3,$14(a1)
		movem.l	(sp)+,d4-d5
		asr.l	#1,d0
		asr.l	#1,d1

loc_41606:
		add.l	d0,d4
		add.l	d1,d5
		swap	d4
		swap	d5
		add.w	$46(a0),d4
		add.w	$44(a0),d5
		move.w	d4,$14(a0)
		tst.b	$2C(a0)
		beq.s	loc_41630
		subi.w	#$18,d5
		btst	#0,$2A(a0)
		beq.s	loc_41630
		addi.w	#$30,d5

loc_41630:

		move.w	d5,$10(a0)

locret_41634:

		rts
; End of function sub_4154C


; =============== S U B R O U T I N E =======================================


sub_41636:
		tst.w	$34(a0)
		beq.s	loc_4164C
		btst	#4,$2A(a0)
		bne.w	loc_416C0
		btst	#3,$2A(a0)
		bne.w	loc_416C0
		subq.w	#1,$34(a0)
		bra.w	loc_416C0
; ---------------------------------------------------------------------------

loc_4164C:
		tst.b	$31(a0)
		bne.s	loc_41668
		btst	#4,$2A(a0)
		bne.s	.a
		btst	#3,$2A(a0)
		beq.s	loc_416C0
.a		move.b	#1,$31(a0)

loc_41668:
		tst.b	$30(a0)
		bne.s	loc_41698
		move.w	$32(a0),d0
		addi.w	#8,d0
		move.w	d0,$32(a0)
		add.w	d0,$26(a0)
		tst.w	d0
		bne.s	loc_41688
		move.b	#0,$31(a0)

loc_41688:
		cmpi.b	#-$80,$26(a0)
		blo.s	loc_416C0
		move.b	#1,$30(a0)
		bra.s	loc_416C0
; ---------------------------------------------------------------------------

loc_41698:
		move.w	$32(a0),d0
		subi.w	#8,d0
		move.w	d0,$32(a0)
		add.w	d0,$26(a0)
		tst.w	d0
		bne.s	loc_416B2
		move.w	#$1E,$34(a0)

loc_416B2:
		cmpi.b	#-$80,$26(a0)
		bhs.s	loc_416C0
		move.b	#0,$30(a0)

loc_416C0:

		move.b	$26(a0),d0
		rts
; End of function sub_41636

; ---------------------------------------------------------------------------
Map_SOZSwingingPlatform:include "Levels/SOZ/Misc Object Data/Map - Swinging Platform.asm"

; ---------------------------------------------------------------------------

Obj_SOZBreakableSandRock:

		move.l	#Map_SOZBreakableSandRock,$C(a0)
		move.w	#$43D9,$A(a0)
		ori.b	#4,4(a0)
		move.b	#$18,7(a0)
		move.b	#$10,6(a0)
		move.w	#prio(5),8(a0)
		move.l	#loc_4172E,(a0)

loc_4172E:
		move.b	(Player_1+anim).w,$30(a0)
		move.b	(Player_2+anim).w,$31(a0)
		move.w	#$23,d1
		move.w	#$10,d2
		move.w	#$11,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		move.b	$2A(a0),d0
		andi.b	#$18,d0
		bne.s	loc_41760

loc_4175A:

		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_41760:
		cmpi.b	#$18,d0
		bne.s	loc_4178E
		cmpi.b	#2,$30(a0)
		beq.s	loc_41776
		cmpi.b	#2,$31(a0)
		bne.s	loc_4175A

loc_41776:
		lea	(Player_1).w,a1
		move.b	$30(a0),d0
		bsr.s	sub_417A6
		lea	(Player_2).w,a1
		move.b	$31(a0),d0
		bsr.s	sub_417A6
		bra.w	loc_417F6
; ---------------------------------------------------------------------------

loc_4178E:
		move.b	d0,d1
		andi.b	#8,d1
		beq.s	loc_417DE
		cmpi.b	#2,$30(a0)
		bne.s	loc_4175A
		lea	(Player_1).w,a1
		bsr.s	sub_417AC

loc_417A4:
		bra.s	loc_417F6

; =============== S U B R O U T I N E =======================================


sub_417A6:

		cmpi.b	#2,d0
		bne.s	loc_417CA
; End of function sub_417A6


; =============== S U B R O U T I N E =======================================


sub_417AC:

		bset	#2,$2A(a1)
		move.b	#$E,$1E(a1)
		move.b	#7,$1F(a1)
		move.b	#2,$20(a1)
		move.w	#-$300,$1A(a1)

loc_417CA:
		bset	#1,$2A(a1)
		bclr	#3,$2A(a1)
		move.b	#2,5(a1)
		rts
; End of function sub_417AC

; ---------------------------------------------------------------------------

loc_417DE:
		andi.b	#$10,d0
		beq.w	loc_4175A
		cmpi.b	#2,$31(a0)
		bne.w	loc_4175A
		lea	(Player_2).w,a1
		bsr.s	sub_417AC

loc_417F6:

		andi.b	#-$19,$2A(a0)
		moveq	#$6E,d0
		jsr	Play_Sound_2.w
		move.l	#loc_4180A,(a0)

loc_4180A:
		subq.b	#1,$24(a0)
		bpl.s	loc_41828
		move.b	#5,$24(a0)
		addq.b	#1,$22(a0)
		cmpi.b	#5,$22(a0)
		blo.s	loc_41828
		move.w	#$7F00,$10(a0)

loc_41828:

		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------
Map_SOZBreakableSandRock:include "Levels/SOZ/Misc Object Data/Map - Breakable Sand Rock.asm"

; ---------------------------------------------------------------------------

Obj_SOZPushSwitch:

		move.l	#Map_SOZPushSwitch,$C(a0)
		move.w	#$4455,$A(a0)
		ori.b	#4,4(a0)
		move.b	#$30,7(a0)
		move.b	#$10,6(a0)
		move.w	#prio(6),8(a0)
		move.b	#1,$22(a0)
		move.w	$10(a0),$44(a0)
		bset	#6,4(a0)
		move.w	#1,$16(a0)
		lea	$18(a0),a2
		move.w	$10(a0),d0
		addi.w	#$10,d0
		btst	#0,$2A(a0)

		beq.s	loc_418D4
		subi.w	#$20,d0

loc_418D4:
		move.w	d0,(a2)+
		move.w	$14(a0),(a2)+
		move.w	#0,(a2)+
		move.l	#loc_418E4,(a0)

loc_418E4:
		move.b	$2C(a0),d0
		andi.w	#$F,d0
		lea	(Level_trigger_array).w,a3
		lea	(a3,d0.w),a3
		moveq	#0,d1
		move.b	(a3),d1
		move.w	d1,$36(a0)
		move.b	(Player_1+$2A).w,$30(a0)
		move.b	(Player_2+$2A).w,$31(a0)
		move.w	#$17,d1
		move.w	#$10,d2
		move.w	#$11,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		moveq	#0,d4
		bsr.w	sub_419C6
		move.w	$36(a0),d0
		lsr.w	#2,d0
		btst	#0,$2A(a0)
		beq.s	loc_41934
		neg.w	d0

loc_41934:
		add.w	$44(a0),d0

loc_41938:
		move.w	d0,$10(a0)
		tst.b	$2C(a0)
		bpl.s	loc_41946
		bsr.w	sub_41AA8

loc_41946:
		move.w	$36(a0),d1
		move.b	d1,(a3)
		move.w	$44(a0),d0
		andi.w	#-$80,d0
		sub.w	(Camera_X_pos_coarse_back).w,d0
		cmpi.w	#$280,d0
		bhi.w	loc_41966
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_41966:
		move.w	respawn_addr(a0),d0
		beq.s	loc_41972
		movea.w	d0,a2
		bclr	#7,(a2)

loc_41972:
		tst.w	$36(a0)
		bne.s	loc_4197E
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_4197E:
		move.l	#loc_41984,(a0)

loc_41984:
		move.w	respawn_addr(a0),d0
		beq.s	loc_41996
		movea.w	d0,a2
		tst.b	(a2)
		bpl.s	loc_41996
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_41996:

		move.b	$2C(a0),d0
		andi.w	#$F,d0
		lea	(Level_trigger_array).w,a3

loc_419A2:
		lea	(a3,d0.w),a3
		moveq	#0,d1
		move.b	(a3),d1
		move.w	d1,$36(a0)
		bsr.w	sub_41A6C
		move.w	$36(a0),d1
		move.b	d1,(a3)
		tst.w	$36(a0)
		bne.s	locret_419C4
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

locret_419C4:
		rts

; =============== S U B R O U T I N E =======================================


sub_419C6:
		moveq	#0,d5
		move.b	$2A(a0),d3
		andi.b	#$60,d3
		beq.w	sub_41A6C
		move.w	$10(a0),d2
		lea	(Player_1).w,a1
		move.b	$30(a0),d0
		moveq	#5,d6
		bsr.s	sub_419FA
		tst.w	d5
		bne.s	locret_419F8
		lea	(Player_2).w,a1
		move.b	$31(a0),d0
		moveq	#6,d6
		bsr.s	sub_419FA
		tst.w	d5
		beq.s	sub_41A6C

locret_419F8:
		rts
; End of function sub_419C6


; =============== S U B R O U T I N E =======================================


sub_419FA:

		btst	d6,d3
		beq.s	locret_41A6A
		cmp.w	$10(a1),d2

loc_41A02:
		bcc.s	loc_41A38
		btst	#5,d0
		beq.s	locret_41A6A

loc_41A0A:
		btst	#0,$2A(a0)
		beq.s	locret_41A6A
		cmpi.w	#$80,$36(a0)
		beq.s	loc_41A34
		addq.w	#1,$36(a0)
		move.w	$36(a0),d0
		andi.w	#3,d0
		bne.s	loc_41A34
		subq.w	#1,$10(a1)
		moveq	#$69,d0
		jsr	Play_Sound_2.w

loc_41A34:

		moveq	#1,d5
		rts
; ---------------------------------------------------------------------------

loc_41A38:
		btst	#5,d0
		beq.s	locret_41A6A
		btst	#0,$2A(a0)
		bne.s	locret_41A6A
		cmpi.w	#$80,$36(a0)
		beq.s	loc_41A34
		addq.w	#1,$36(a0)
		move.w	$36(a0),d0
		andi.w	#3,d0
		bne.s	loc_41A34
		addq.w	#1,$10(a1)
		moveq	#$69,d0
		jsr	Play_Sound_2.w
		moveq	#1,d5

locret_41A6A:
		rts
; End of function sub_419FA


; =============== S U B R O U T I N E =======================================


sub_41A6C:

		move.b	$2C(a0),d0
		andi.w	#$70,d0
		bne.s	loc_41A82
		subq.w	#1,$34(a0)
		bpl.s	locret_41AA6
		move.w	#9,$34(a0)

loc_41A82:
		tst.w	$36(a0)
		beq.s	locret_41AA6
		moveq	#-$6F,d0
		subq.w	#1,$36(a0)
		beq.s	loc_41A9E
		subq.b	#1,$3A(a0)
		bpl.s	loc_41AA4
		move.b	#3,$3A(a0)
		moveq	#-$70,d0

loc_41A9E:
		jsr	Play_Sound_2.w

loc_41AA4:
		moveq	#1,d4

locret_41AA6:

		rts
; End of function sub_41A6C


; =============== S U B R O U T I N E =======================================


sub_41AA8:
		move.w	(__u_F7C4).w,d0
		beq.w	locret_41B54
		movea.w	d0,a2
		cmpi.l	#loc_405D6,(a2)
		beq.s	loc_41AC2
		clr.w	(__u_F7C4).w
		rts
; ---------------------------------------------------------------------------

loc_41AC2:
		move.w	$10(a2),d2

loc_41AC6:
		sub.w	$10(a0),d2
		addi.w	#$1B,d2
		cmpi.w	#$37,d2
		bhs.s	loc_41B4E
		move.w	$14(a2),d3
		sub.w	$14(a0),d3
		addi.w	#$C,d3
		cmpi.w	#$18,d3
		bhs.s	loc_41B4E
		move.b	$2A(a0),d0
		cmpi.w	#$1C,d2
		blo.s	loc_41AF4
		eori.b	#1,d0

loc_41AF4:
		andi.b	#1,d0
		bne.s	loc_41B24

loc_41AFA:
		cmpi.w	#$80,$36(a0)
		beq.s	loc_41B24
		moveq	#4,d1
		add.w	d4,d1
		move.w	$38(a0),d0
		cmp.w	$10(a2),d0
		bne.s	loc_41B12
		moveq	#1,d1

loc_41B12:
		add.w	d1,$36(a0)
		cmpi.w	#$80,$36(a0)
		blo.s	loc_41B24
		move.w	#$80,$36(a0)

loc_41B24:

		move.w	$36(a0),d0
		lsr.w	#2,d0
		btst	#0,$2A(a0)
		beq.s	loc_41B34
		neg.w	d0

loc_41B34:
		add.w	$44(a0),d0
		move.w	d0,$10(a0)
		subi.w	#$1C,d0
		cmpi.w	#$1C,d2
		blo.s	loc_41B4A
		addi.w	#$38,d0

loc_41B4A:
		move.w	d0,$10(a2)

loc_41B4E:

		move.w	$10(a2),$38(a0)

locret_41B54:
		rts
; End of function sub_41AA8

; ---------------------------------------------------------------------------
Map_SOZPushSwitch:include "Levels/SOZ/Misc Object Data/Map - Push Switch.asm"

; ---------------------------------------------------------------------------

Obj_SOZDoor:

		move.l	#Map_SOZDoor,$C(a0)
		move.w	#$4455,$A(a0)

loc_41B7E:
		ori.b	#4,4(a0)
		move.b	#$C,7(a0)
		move.b	#$40,6(a0)
		move.w	#prio(4),8(a0)
		move.w	$10(a0),$44(a0)
		move.w	$14(a0),$46(a0)
		move.b	$2C(a0),d0
		andi.w	#$F,d0
		lea	(Level_trigger_array).w,a3
		move.b	(a3,d0.w),d0
		move.w	d0,$36(a0)
		move.b	$2C(a0),d0
		andi.w	#$F0,d0
		beq.s	loc_41BDA
		move.b	#1,$22(a0)
		move.b	#$40,7(a0)
		move.b	#$C,6(a0)
		move.l	#loc_41C3A,(a0)
		bra.s	loc_41C3A
; ---------------------------------------------------------------------------

loc_41BDA:
		move.l	#loc_41BE0,(a0)

loc_41BE0:
		move.b	$2C(a0),d0
		andi.w	#$F,d0
		lea	(Level_trigger_array).w,a3
		move.b	(a3,d0.w),d0
		moveq	#1,d1
		cmp.w	$36(a0),d0
		beq.s	loc_41C00
		bcc.s	loc_41BFC
		neg.w	d1

loc_41BFC:
		add.w	d1,$36(a0)

loc_41C00:
		move.w	$36(a0),d0
		btst	#0,$2A(a0)
		bne.s	loc_41C0E
		neg.w	d0

loc_41C0E:
		add.w	$46(a0),d0
		move.w	d0,$14(a0)

loc_41C16:
		moveq	#0,d1
		move.b	7(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_41C3A:

		move.b	$2C(a0),d0
		andi.w	#$F,d0
		lea	(Level_trigger_array).w,a3
		move.b	(a3,d0.w),d0
		moveq	#1,d1
		cmp.w	$36(a0),d0
		beq.s	loc_41C5A
		bcc.s	loc_41C56
		neg.w	d1

loc_41C56:
		add.w	d1,$36(a0)

loc_41C5A:
		move.w	$36(a0),d0
		btst	#0,$2A(a0)
		bne.s	loc_41C68
		neg.w	d0

loc_41C68:
		add.w	$44(a0),d0
		move.w	d0,$10(a0)
		bra.s	loc_41C16
; ---------------------------------------------------------------------------
Map_SOZDoor:	include "Levels/SOZ/Misc Object Data/Map - Door.asm"

; ---------------------------------------------------------------------------

Obj_SOZSandCork:

		move.l	#Map_SOZSandCork,$C(a0)
		move.w	#$43BD,$A(a0)
		ori.b	#4,4(a0)
		move.b	#$C,7(a0)
		move.b	#8,6(a0)
		move.w	#prio(5),8(a0)
		move.b	#-$3A,$28(a0)
		move.w	respawn_addr(a0),d0
		beq.s	loc_41D2C
		movea.w	d0,a2
		btst	#0,(a2)
		beq.s	loc_41D2C

loc_41CFC:
		move.b	$2C(a0),d5
		andi.w	#$7F,d5
		lsl.w	#4,d5
		moveq	#0,d4
		move.w	$14(a0),d3
		add.w	d5,d3
		subi.w	#$90,d3

loc_41D12:
		bsr.w	sub_41E1A
		subi.w	#$100,d3
		subi.w	#$100,d5
		bhi.s	loc_41D12
		move.w	respawn_addr(a0),respawn_addr(a1)
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_41D2C:

		move.l	#loc_41D32,(a0)

loc_41D32:
		move.b	$29(a0),d0
		beq.w	loc_41D56
		lea	(Player_1).w,a1
		bclr	#0,$29(a0)
		beq.s	loc_41D48
		bsr.s	sub_41D5C

loc_41D48:
		lea	(Player_2).w,a1
		bclr	#1,$29(a0)
		beq.s	loc_41D56
		bsr.s	sub_41D5C

loc_41D56:

		jmp	loc_1B662.w

; =============== S U B R O U T I N E =======================================


sub_41D5C:

		cmpi.b	#2,$20(a1)
		bne.w	locret_41DF2
		neg.w	$18(a1)
		neg.w	$1A(a1)
		move.b	$2C(a0),d4
		andi.w	#$7F,d4
		lsl.w	#4,d4
		move.w	d4,d5
		move.w	$14(a0),d3
		subi.w	#$90,d3

loc_41D82:
		bsr.w	sub_41E1A
		subi.w	#$100,d3
		subi.w	#$100,d5
		bcc.s	loc_41D82
		move.w	respawn_addr(a0),respawn_addr(a1)
		lea	(word_41E96).l,a4
		move.l	#loc_41DF4,(a0)
		addq.b	#1,$22(a0)
		move.w	#prio(0),8(a0)
		moveq	#$59,d0
		jsr	Play_Sound_2.w
		jsr	(loc_216BE).l
		jsr	MoveSprite2.w
		addi.w	#$18,$1A(a0)
		move.w	respawn_addr(a0),d0
		beq.s	loc_41DD2
		movea.w	d0,a2
		bset	#0,(a2)

loc_41DD2:
		tst.b	$2C(a0)
		bpl.s	loc_41DE0
		move.w	#-1,(ScrEvents_1).w
		bra.s	loc_41DE6
; ---------------------------------------------------------------------------

loc_41DE0:
		move.w	#-1,(ScrEvents_2).w

loc_41DE6:
		move.b	#0,$28(a0)
		move.b	#0,$29(a0)

locret_41DF2:
		rts
; End of function sub_41D5C

; ---------------------------------------------------------------------------

loc_41DF4:
		jsr	MoveSprite2.w
		addi.w	#$18,$1A(a0)
		cmpi.w	#$400,$1A(a0)
		blt.s	loc_41E0E
		tst.b	4(a0)
		bpl.s	loc_41E14

loc_41E0E:
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_41E14:
		jmp	Delete_Current_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_41E1A:

		jsr	Create_New_Sprite.w
		bne.w	locret_41E68
		move.l	#loc_41E6A,(a1)
		move.w	$10(a0),$10(a1)
		move.w	d3,$14(a1)
		move.b	4(a0),4(a1)
		move.l	$C(a0),$C(a1)
		move.w	$A(a0),$A(a1)
		move.w	#prio(1),8(a1)
		move.b	#$C,7(a1)
		move.b	#-$80,6(a1)
		move.w	d4,$30(a1)
		move.b	#2,$22(a1)
		move.b	$2C(a0),$2C(a1)

locret_41E68:
		rts
; End of function sub_41E1A

; ---------------------------------------------------------------------------

loc_41E6A:
		tst.w	$30(a0)
		beq.s	loc_41E78
		addq.w	#4,$14(a0)
		subq.w	#4,$30(a0)

loc_41E78:
		move.b	-$1FB(a0),d0		; WHAT THE SHIT
		andi.b	#$F,d0
		bne.s	loc_41E90
		tst.b	4(a0)
		bpl.s	loc_41E90
		moveq	#-$38,d0
		jsr	Play_Sound_2.w

loc_41E90:

		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------
word_41E96:	dc.w  $FE00, $FE00
		dc.w	$80, $FE00
		dc.w   $200, $FE00
		dc.w  $FE20, $FE20
		dc.w	$60, $FE20
		dc.w   $1E0, $FE20
Map_SOZSandCork:include "Levels/SOZ/Misc Object Data/Map - Sand Cork.asm"

; ---------------------------------------------------------------------------

Obj_SOZSolidSprites:

		move.l	#Map_SOZSolidSprites,$C(a0)
		move.w	#$4001,$A(a0)
		ori.b	#4,4(a0)
		move.w	#prio(4),8(a0)
		tst.b	$2C(a0)
		beq.s	loc_41F7E
		move.b	#$20,7(a0)
		move.b	#8,6(a0)
		move.b	#1,$22(a0)
		move.l	#loc_41FAC,(a0)
		bra.s	loc_41FAC
; ---------------------------------------------------------------------------

loc_41F7E:
		move.b	#$10,7(a0)
		move.b	#$18,6(a0)
		move.l	#loc_41F90,(a0)

loc_41F90:
		move.w	#$1B,d1
		move.w	#$18,d2
		move.w	#$19,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_41FAC:

		move.w	#$2B,d1
		move.w	#8,d2
		move.w	#9,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------
Map_SOZSolidSprites:include "Levels/SOZ/Misc Object Data/Map - Solid Sprites.asm"

; ---------------------------------------------------------------------------

Obj_LevelIntro_PlayerFallIntoGround:
		move.l	#loc_42028,(a0)
		move.b	#1,(Ctrl_1_locked).w
		move.b	#1,(Ctrl_2_locked).w
		moveq	#0,d0
		move.w	d0,(Ctrl_1_logical).w
		move.w	d0,(Ctrl_1).w
		move.w	d0,(Ctrl_2_logical).w
		move.w	d0,(Ctrl_2).w
		lea	(Player_1).w,a1
		bsr.s	sub_42020
		lea	(Player_2).w,a1
		tst.l	(a1)
		beq.s	locret_42026

; =============== S U B R O U T I N E =======================================


sub_42020:
		move.b	#1,$2E(a1)

locret_42026:
		rts
; End of function sub_42020

; ---------------------------------------------------------------------------

loc_42028:
		move.b	#1,(Ctrl_1_locked).w
		move.b	#1,(Ctrl_2_locked).w
		move.w	#0,(Ctrl_1_logical).w
		move.w	#0,(Ctrl_2_logical).w
		lea	(Player_1).w,a1
		bsr.s	sub_42092
		lea	(Player_2).w,a1
		tst.l	(a1)
		beq.s	loc_42050
		bsr.s	sub_42092

loc_42050:
		lea	(Player_1).w,a2
		move.w	#$690,d0

loc_42062:
		cmp.w	$14(a2),d0
		bne.s	loc_42080
		bsr.w	loc_42180
		moveq	#-$7E,d0
		jsr	Play_Sound_2.w
		lea	(Player_2).w,a2
		tst.l	(a2)
		beq.s	loc_42080
		bsr.w	loc_42180

loc_42080:

		cmpi.w	#$6C0,(Player_1+y_pos).w
		bhs.s	loc_4208A
		rts
; ---------------------------------------------------------------------------

loc_4208A:
		move.l	#loc_420A6,(a0)
		rts

; =============== S U B R O U T I N E =======================================


sub_42092:

		move.w	$1A(a1),d0
		addi.w	#$38,$1A(a1)
		ext.l	d0
		lsl.l	#8,d0
		add.l	d0,$14(a1)
		rts
; End of function sub_42092

; ---------------------------------------------------------------------------

loc_420A6:
		move.b	#1,(Ctrl_1_locked).w
		move.b	#1,(Ctrl_2_locked).w
		move.w	#0,(Ctrl_1_logical).w
		move.w	#0,(Ctrl_2_logical).w

		move.b	(Ctrl_1_pressed).w,d0
		or.b	(Ctrl_2_pressed).w,d0
		andi.b	#$70,d0
		bne.s	loc_420CA
		rts
; ---------------------------------------------------------------------------

loc_420CA:
		move.l	#loc_420FC,(a0)
		lea	(Player_1).w,a1
		bsr.s	sub_420DE
		lea	(Player_2).w,a1
		tst.l	(a1)
		beq.s	locret_420FA

; =============== S U B R O U T I N E =======================================


sub_420DE:
		move.w	#-$800,$1A(a1)
		bset	#1,$2A(a1)
		clr.b	$40(a1)
		move.b	#$10,$20(a1)
		move.b	#1,$2E(a1)

locret_420FA:
		rts
; End of function sub_420DE

; ---------------------------------------------------------------------------

loc_420FC:
		move.b	#1,(Ctrl_1_locked).w
		move.b	#1,(Ctrl_2_locked).w
		move.w	#0,(Ctrl_1_logical).w
		move.w	#0,(Ctrl_2_logical).w
		lea	(Player_1).w,a2
		cmpi.w	#$6A8,$14(a2)
		bhs.s	loc_42156
		move.b	#0,$2E(a2)
		bsr.w	loc_42180
		lea	(Player_2).w,a2
		tst.l	(a2)
		beq.s	loc_4213C
		move.b	#0,$2E(a2)
		bsr.w	loc_42180

loc_4213C:
		moveq	#-$7E,d0
		jsr	Play_Sound_2.w
		move.b	#0,(Ctrl_1_locked).w
		move.b	#0,(Ctrl_2_locked).w
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_42156:
		bsr.s	sub_42160
		lea	(Player_2).w,a2
		tst.l	(a2)
		beq.s	locret_4217E

; =============== S U B R O U T I N E =======================================


sub_42160:
		move.w	$18(a2),d0
		ext.l	d0
		lsl.l	#8,d0
		add.l	d0,$10(a2)
		move.w	$1A(a2),d0
		addi.w	#$38,$1A(a2)
		ext.l	d0
		lsl.l	#8,d0
		add.l	d0,$14(a2)

locret_4217E:
		rts
; End of function sub_42160

; ---------------------------------------------------------------------------

loc_42180:

		jsr	Create_New_Sprite3.w
		bne.w	locret_4219C
		move.l	#loc_4219E,(a1)
		move.w	$10(a2),$10(a1)
		move.w	#$66C,$14(a1)

locret_4219C:
		rts
; ---------------------------------------------------------------------------

loc_4219E:
		move.l	#Map_SOZRisingSandWall,$C(a0)
		move.w	#$4432,$A(a0)
		ori.b	#4,4(a0)
		move.b	#$C,7(a0)
		move.b	#$34,6(a0)
		move.w	#prio(1),8(a0)
		move.b	#8,$22(a0)
		bset	#6,4(a0)
		move.w	#1,$16(a0)
		lea	$18(a0),a2
		move.w	$10(a0),(a2)+
		move.w	$14(a0),d0
		addi.w	#$68,d0
		move.w	d0,(a2)+
		move.w	#$D,(a2)+
		move.b	#3,$24(a0)
		move.w	#$13,$30(a0)
		move.l	#loc_421FE,(a0)

loc_421FE:
		lea	$18(a0),a2
		subq.b	#1,$24(a0)
		bpl.s	loc_4222E
		move.b	#3,$24(a0)
		bchg	#0,4(a0)
		addq.w	#1,$14(a0)
		addq.w	#1,$1A(a0)
		addq.b	#1,$1D(a0)
		cmpi.b	#$D,$1D(a0)
		blo.s	loc_4222E
		move.b	#9,$1D(a0)

loc_4222E:

		cmpi.w	#$C,$30(a0)
		bne.s	loc_4223C
		move.b	#$D,$22(a0)

loc_4223C:
		subq.w	#1,$30(a0)
		bpl.s	loc_42248
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_42248:
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

Obj_15_2:
		move.b	#-$30,7(a0)
		move.l	#loc_4225A,(a0)

loc_4225A:
		bsr.s	sub_42262
		jmp	Delete_Sprite_If_Not_In_Range.w

; =============== S U B R O U T I N E =======================================


sub_42262:
		lea	(Player_1).w,a1
		lea	$30(a0),a2
		moveq	#3,d6
		bsr.s	sub_42278
		lea	(Player_2).w,a1
		lea	$34(a0),a2
		moveq	#4,d6			; NAT: FUCK SANIC TEEM
; End of function sub_42262


; =============== S U B R O U T I N E =======================================


sub_42278:
		btst	d6,$2A(a0)

loc_4227C:
		bne.w	loc_42362
		move.w	$10(a1),d0
		addi.w	#$10,d0
		sub.w	$10(a0),d0
		bcs.w	locret_42360

loc_42290:
		cmpi.w	#$20,d0
		bge.w	locret_42360
		move.w	$14(a1),d0
		sub.w	$14(a0),d0
		addi.w	#$10,d0

loc_422A4:
		cmpi.w	#$20,d0
		bgt.w	locret_42360
		tst.b	$2E(a1)
		bne.w	locret_42360
		btst	#1,$2A(a1)
		bne.w	locret_42360
		tst.w	$1C(a1)
		bmi.w	locret_42360
		cmpi.w	#$600,$1C(a1)
		bge.w	loc_422D6
		move.w	#$600,$1C(a1)

loc_422D6:
		btst	#3,$2A(a1)
		beq.s	loc_422E6
		movea.w	$42(a1),a3
		bclr	d6,$2A(a3)

loc_422E6:
		move.w	a0,$42(a1)
		bset	d6,$2A(a0)
		move.w	#0,$18(a1)
		move.w	#0,$1A(a1)
		move.b	$44(a1),$1E(a1)
		move.b	$45(a1),$1F(a1)
		andi.b	#-$77,$2A(a1)
		bset	#3,$2A(a1)
		move.b	#0,$40(a1)

loc_42318:
		move.w	#0,(Chain_bonus_counter).w
		move.b	#0,$26(a1)
		move.b	#0,$27(a1)
		move.b	#0,$2D(a1)
		move.b	#0,$30(a1)
		move.b	#0,$39(a1)
		move.b	#0,$2F(a1)
		move.l	#0,(a2)
		bclr	#0,$2A(a1)
		andi.b	#-4,4(a1)
		move.b	#$43,$2E(a1)
		move.b	#0,$20(a1)

locret_42360:

		rts
; ---------------------------------------------------------------------------

loc_42362:
		tst.b	(Debug_On).w
		beq.s	loc_423D0

loc_42368:
		andi.b	#-$7F,$2A(a1)
		bset	#1,$2A(a1)
		bclr	d6,$2A(a0)

loc_42378:
		move.w	#1,$20(a1)
		move.b	#0,$2E(a1)
		neg.w	$1C(a1)
		move.w	$1C(a1),$18(a1)
		move.w	#0,$1A(a1)
		rts
; ---------------------------------------------------------------------------

loc_42396:
		move.b	#$E,$46(a1)
		move.b	#$F,$47(a1)
		andi.b	#-$7F,$2A(a1)
		bset	#0,$2A(a1)
		bclr	d6,$2A(a0)
		move.w	#1,$20(a1)
		move.b	#0,$2E(a1)
		neg.w	$1C(a1)
		move.w	$1C(a1),$18(a1)
		move.w	#0,$1A(a1)
		rts
; ---------------------------------------------------------------------------

loc_423D0:
		move.w	$1C(a1),d0
		ext.l	d0
		lsl.l	#8,d0
		add.l	d0,(a2)
		bmi.s	loc_42368
		cmpi.w	#$700,(a2)
		bhs.s	loc_42396
		cmpi.w	#$1000,$1C(a1)
		bge.s	loc_423F0
		addi.w	#$10,$1C(a1)

loc_423F0:
		bclr	#7,$A(a1)
		move.w	(a2),d0
		lsr.w	#1,d0
		addi.b	#$40,d0
		bmi.s	loc_42406
		bset	#7,$A(a1)

loc_42406:
		move.w	$10(a1),d2
		move.w	(a2),d0
		lsr.w	#1,d0
		jsr	GetSineCosine.w
		muls.w	#$4800,d0
		swap	d0
		add.w	$10(a0),d0
		move.w	d0,$10(a1)
		sub.w	d2,d0
		asl.w	#8,d0
		move.w	d0,$18(a1)
		lea	byte_4248A(pc),a3
		cmpi.w	#$600,(a2)
		blo.s	loc_42438
		lea	byte_4250A(pc),a3

loc_42438:
		move.w	$14(a1),d2
		move.w	(a2),d0
		lsr.w	#2,d0
		move.w	d0,d1
		andi.w	#$7F,d1
		andi.w	#-$80,d0
		add.b	(a3,d1.w),d0
		add.w	$14(a0),d0
		move.w	d0,$14(a1)
		sub.w	d2,d0
		asl.w	#8,d0
		move.w	d0,$1A(a1)
		moveq	#0,d0
		move.w	(a2),d0
		lsr.w	#1,d0
		andi.w	#$FF,d0
		divu.w	#$16,d0
		move.b	RawAni_4247E(pc,d0.w),$22(a1)
		moveq	#0,d0
		move.b	$22(a1),d0
		jmp	(Tails_Carry_LoadPLC).l
; End of function sub_42278

; ---------------------------------------------------------------------------
RawAni_4247E:	dc.b  $EF, $FA,	$F9, $F8, $F7, $F6, $F5, $F4, $F3, $F2,	$F1, $F0
byte_4248A:	dc.b    0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  $A,  $C,  $D,  $F, $10, $12, $13, $13, $14, $14
		dc.b  $16, $17, $17, $17, $17, $17, $17, $17, $17, $17, $17, $17, $18, $18, $18, $18, $19, $1B, $1C, $1E
		dc.b  $1F, $21, $22, $24, $25, $27, $28, $2A, $2B, $2D, $2E, $30, $31, $33, $34, $36, $37, $39, $3A, $3C
		dc.b  $3D, $3F, $40, $42, $43, $45, $46, $48, $49, $4B, $4C, $4E, $4F, $51, $52, $54, $55, $57, $58, $5A
		dc.b  $5B, $5D, $5E, $60, $60, $60, $60, $60, $60, $60, $60, $60, $60, $60, $60, $60, $60, $61, $62, $63
		dc.b  $64, $65, $66, $67, $68, $69, $6A, $6B, $6C, $6D, $6E, $6F, $70, $71, $72, $73, $74, $75, $76, $77
		dc.b  $78, $79, $7A, $7B, $7C, $7D, $7E, $7F
byte_4250A:	dc.b    0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  $A,  $C,  $D,  $F, $10, $12, $13, $13, $14, $14
		dc.b  $16, $17, $17, $17, $17, $17, $17, $17, $17, $17, $17, $17, $18, $18, $18, $18, $19, $19, $19, $1A
		dc.b  $1A, $1A, $1B, $1B, $1B, $1C, $1C, $1C, $1D, $1D, $1D, $1D, $1E, $1E, $1E, $1F, $1F, $1F, $20, $20
		dc.b  $20, $21, $21, $21
; ---------------------------------------------------------------------------

Obj_16_2:
		move.b	#-$30,7(a0)
		move.l	#loc_42556,(a0)

loc_42556:
		bsr.s	sub_4255E
		jmp	Delete_Sprite_If_Not_In_Range.w

; =============== S U B R O U T I N E =======================================


sub_4255E:
		lea	(Player_1).w,a1
		lea	$30(a0),a2
		moveq	#3,d6
		bsr.s	sub_42574
		lea	(Player_2).w,a1
		lea	$34(a0),a2
		moveq	#4,d6			; NAT: FUCK SANIC TEEM
; End of function sub_4255E


; =============== S U B R O U T I N E =======================================


sub_42574:
		btst	d6,$2A(a0)
		bne.w	loc_426B0
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		addi.w	#$10,d0
		cmpi.w	#$20,d0
		bhs.s	locret_425E8
		move.w	$14(a1),d0
		sub.w	$14(a0),d0
		addi.w	#$10,d0
		cmpi.w	#$20,d0
		bhs.s	locret_425E8
		btst	#0,$2A(a0)
		bne.s	loc_425EA
		tst.b	$2E(a1)
		bne.s	locret_425E8
		btst	#1,$2A(a1)
		bne.s	locret_425E8
		tst.w	$1C(a1)
		bmi.w	locret_425E8
		cmpi.w	#$400,$1C(a1)
		bge.w	loc_425CE
		move.w	#$400,$1C(a1)

loc_425CE:
		bsr.s	sub_42636

loc_425D0:
		move.l	#0,(a2)
		bclr	#0,$2A(a1)
		andi.b	#-4,4(a1)
		move.b	#$43,$2E(a1)

locret_425E8:

		rts
; ---------------------------------------------------------------------------

loc_425EA:
		tst.b	$2E(a1)
		bne.s	locret_425E8
		btst	#1,$2A(a1)
		bne.s	locret_425E8
		tst.w	$1C(a1)
		bpl.w	locret_425E8
		cmpi.w	#-$400,$1C(a1)
		ble.w	loc_42610
		move.w	#-$400,$1C(a1)

loc_42610:
		bsr.s	sub_42636
		move.l	#0,(a2)
		neg.w	$1C(a1)
		bset	#0,$2A(a1)
		andi.b	#-4,4(a1)
		ori.b	#1,4(a1)
		move.b	#$43,$2E(a1)
		rts
; End of function sub_42574


; =============== S U B R O U T I N E =======================================


sub_42636:

		btst	#3,$2A(a1)
		beq.s	loc_42646
		movea.w	$42(a1),a3
		bclr	d6,$2A(a3)

loc_42646:
		move.w	a0,$42(a1)
		bset	d6,$2A(a0)
		move.w	#0,$18(a1)
		move.w	#0,$1A(a1)
		move.b	$44(a1),$1E(a1)
		move.b	$45(a1),$1F(a1)

loc_42666:
		andi.b	#-$77,$2A(a1)
		bset	#3,$2A(a1)
		bset	#1,$2A(a1)
		move.b	#0,$40(a1)
		move.w	#0,(Chain_bonus_counter).w
		move.b	#0,$26(a1)
		move.b	#0,$27(a1)
		move.b	#0,$2D(a1)
		move.b	#0,$30(a1)
		move.b	#0,$39(a1)
		move.b	#0,$2F(a1)
		move.b	#0,$20(a1)
		rts
; End of function sub_42636

; ---------------------------------------------------------------------------

loc_426B0:
		tst.b	(Debug_On).w
		beq.s	loc_426F8

loc_426B6:

		andi.b	#-$80,$2A(a1)
		bset	#1,$2A(a1)
		btst	#0,$2A(a0)
		bne.s	loc_426DA
		bclr	#1,$2A(a1)
		bset	#0,$2A(a1)
		neg.w	$1C(a1)

loc_426DA:
		bclr	d6,$2A(a0)
		move.w	#1,$20(a1)
		move.b	#0,$2E(a1)
		move.w	$1C(a1),$18(a1)
		move.w	#0,$1A(a1)
		rts
; ---------------------------------------------------------------------------

loc_426F8:
		move.w	$1C(a1),d0
		ext.l	d0
		lsl.l	#7,d0
		add.l	d0,(a2)
		bmi.s	loc_426B6
		cmpi.w	#$100,(a2)
		bhs.s	loc_426B6
		cmpi.w	#$1000,$1C(a1)

loc_42710:
		bge.s	loc_42718
		addi.w	#$10,$1C(a1)

loc_42718:
		move.w	$10(a1),d2
		move.w	(a2),d0
		lsr.w	#1,d0
		jsr	GetSineCosine.w
		muls.w	#$A00,d0
		asl.l	#4,d0
		swap	d0
		move.w	#$165,d2
		btst	#0,$2A(a0)
		beq.s	loc_42740
		move.w	#$142,d2
		neg.w	d0

loc_42740:
		add.w	$10(a0),d0
		move.w	d0,$10(a1)
		sub.w	d2,d0
		asl.w	#8,d0
		move.w	d0,$18(a1)
		neg.w	d1
		addi.w	#$100,d1
		lsr.w	#1,d1
		mulu.w	d2,d1
		lsr.l	#8,d1
		move.w	d1,d0
		move.w	$14(a1),d2
		add.w	$14(a0),d0
		move.w	d0,$14(a1)
		sub.w	d2,d0
		asl.w	#8,d0
		move.w	d0,$1A(a1)
		moveq	#0,d0
		move.w	(a2),d0
		lsr.w	#1,d0
		andi.w	#$FF,d0
		divu.w	#$16,d0
		move.b	RawAni_42792(pc,d0.w),$22(a1)
		moveq	#0,d0
		move.b	$22(a1),d0
		jmp	(Tails_Carry_LoadPLC).l
; ---------------------------------------------------------------------------
RawAni_42792:	dc.b  $EF, $DF,	$E0, $E1, $E2, $E3, $F5, $F4, $F3, $F2,	$F1, $F0
; ---------------------------------------------------------------------------

Obj_LRZSinkingRock:

		move.l	#Map_LRZSinkingRock,$C(a0)
		move.w	#$40D3,$A(a0)

loc_427AC:
		ori.b	#4,4(a0)
		move.b	#$10,7(a0)
		move.b	#$10,6(a0)
		move.w	#prio(5),8(a0)
		move.w	$14(a0),$46(a0)
		tst.b	(Current_act).w
		beq.s	loc_427DC
		move.b	#1,$22(a0)
		move.w	#$4090,$A(a0)

loc_427DC:
		move.l	#loc_427E2,(a0)

loc_427E2:
		move.b	$2A(a0),d0
		andi.b	#$18,d0
		bne.s	loc_427F8
		tst.b	$2E(a0)
		beq.s	loc_42804
		subq.b	#1,$2E(a0)
		bra.s	loc_42804
; ---------------------------------------------------------------------------

loc_427F8:
		cmpi.b	#$40,$2E(a0)
		beq.s	loc_42804
		addq.b	#1,$2E(a0)

loc_42804:

		move.b	$2E(a0),d0
		jsr	GetSineCosine.w
		asr.w	#3,d0
		add.w	$46(a0),d0
		move.w	d0,$14(a0)
		move.w	#$1B,d1
		move.w	#$10,d2
		move.w	#$11,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------
Map_LRZSinkingRock:include "Levels/LRZ/Misc Object Data/Map - Sinking Rock.asm"

; ---------------------------------------------------------------------------

Obj_LRZFallingSpike:

		move.l	#Map_LRZFallingSpike,$C(a0)
		move.w	#$43A1,$A(a0)
		ori.b	#4,4(a0)
		move.b	#$10,7(a0)
		move.b	#$10,6(a0)
		move.b	#$C,$1E(a0)
		move.w	#prio(5),8(a0)
		move.b	#-$7E,$28(a0)
		move.b	$2C(a0),$2F(a0)
		move.l	#loc_42898,(a0)

loc_42898:
		lea	(Player_1).w,a1
		move.w	$10(a0),d0
		sub.w	$10(a1),d0
		bpl.s	loc_428A8
		neg.w	d0

loc_428A8:
		lea	(Player_2).w,a2
		move.w	$10(a0),d1
		sub.w	$10(a2),d1
		bpl.s	loc_428B8
		neg.w	d1

loc_428B8:
		cmp.w	d1,d0
		bls.s	loc_428BE
		move.w	d1,d0

loc_428BE:
		cmp.w	$2E(a0),d0
		bhs.s	loc_428D0
		tst.b	(Debug_On).w
		bne.s	loc_428D0
		move.l	#loc_428D6,(a0)

loc_428D0:

		jmp	loc_1B662.w
; ---------------------------------------------------------------------------

loc_428D6:
		jsr	MoveSprite.w
		jsr	ObjCheckFloorDist.w
		tst.w	d1
		bpl.s	loc_428FE
		add.w	d1,$14(a0)
		move.b	#0,$28(a0)
		move.l	#loc_42904,(a0)
		moveq	#-$68,d0
		jsr	Play_Sound_2.w

loc_428FE:
		jmp	loc_1B662.w
; ---------------------------------------------------------------------------

loc_42904:
		move.w	#$13,d1
		move.w	#$10,d2
		move.w	#$11,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------
Map_LRZFallingSpike:include "Levels/LRZ/Misc Object Data/Map - Falling Spike.asm"

; ---------------------------------------------------------------------------

Obj_LRZDoor:

		move.l	#Map_LRZDoor,$C(a0)
		move.w	#$43A1,$A(a0)
		ori.b	#4,4(a0)
		move.b	#$10,7(a0)
		move.b	#$28,6(a0)
		move.w	#prio(4),8(a0)
		move.w	$14(a0),$46(a0)
		tst.b	(Current_act).w
		beq.s	loc_4296E
		move.b	#1,$22(a0)
		move.w	#$4090,$A(a0)
		move.b	#$20,6(a0)

loc_4296E:
		move.l	#loc_42974,(a0)

loc_42974:
		move.b	$2C(a0),d0
		andi.w	#$F,d0
		lea	(Level_trigger_array).w,a3
		tst.b	(a3,d0.w)
		beq.s	loc_429BC
		move.l	#loc_42994,(a0)
		moveq	#-$71,d0
		jsr	Play_Sound_2.w

loc_42994:
		addq.b	#1,$2E(a0)
		cmpi.b	#$40,$2E(a0)
		bne.s	loc_429A6
		move.l	#loc_429BC,(a0)

loc_429A6:
		move.b	$2E(a0),d0
		jsr	GetSineCosine.w
		asr.w	#2,d0
		neg.w	d0
		add.w	$46(a0),d0
		move.w	d0,$14(a0)

loc_429BC:

		move.w	#$1B,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------
Map_LRZDoor:	include "Levels/LRZ/Misc Object Data/Map - Door.asm"

; ---------------------------------------------------------------------------

Obj_LRZBigDoor:

		move.l	#Map_LRZBigDoor,$C(a0)
		move.w	#$43A1,$A(a0)
		ori.b	#4,4(a0)
		move.b	#$30,7(a0)
		move.b	#$40,6(a0)

loc_42A38:
		move.w	#prio(5),8(a0)
		move.w	$14(a0),$46(a0)
		move.w	respawn_addr(a0),d0
		beq.s	loc_42A62
		movea.w	d0,a2
		btst	#0,(a2)
		beq.s	loc_42A62
		addi.w	#$80,$14(a0)
		move.l	#loc_42B08,(a0)
		bra.w	loc_42B08
; ---------------------------------------------------------------------------

loc_42A62:

		move.l	#loc_42A68,(a0)

loc_42A68:
		lea	(Player_1).w,a1
		move.w	$14(a1),d0
		sub.w	$14(a0),d0
		addi.w	#-$40,d0
		cmpi.w	#$80,d0
		bhs.w	loc_42B08
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		cmpi.w	#$50,d0
		blt.s	loc_42B08
		move.l	#loc_42AAE,(a0)
		move.w	#-1,(ScrShake_Value).w
		moveq	#-$34,d0
		jsr	Play_Sound_2.w
		move.w	respawn_addr(a0),d0
		beq.s	loc_42AAE
		movea.w	d0,a2
		bset	#0,(a2)

loc_42AAE:

		addq.b	#1,$2E(a0)
		cmpi.b	#$40,$2E(a0)
		bne.s	loc_42AC6
		move.l	#loc_42B08,(a0)
		move.w	#0,(ScrShake_Value).w

loc_42AC6:
		move.b	$2E(a0),d0
		jsr	GetSineCosine.w
		asr.w	#1,d0
		add.w	$46(a0),d0
		move.w	d0,$14(a0)
		move.b	(Level_frame_counter+1).w,d0
		andi.b	#$F,d0
		bne.s	loc_42AEC
		moveq	#-$34,d0
		jsr	Play_Sound_2.w

loc_42AEC:
		move.w	#$3B,d1
		move.w	#$40,d2
		move.w	#$41,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_42B08:

		move.w	#$3B,d1
		move.w	#$40,d2
		move.w	#$41,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------
Map_LRZBigDoor:	include "Levels/LRZ/Misc Object Data/Map - Big Door.asm"

; ---------------------------------------------------------------------------

Obj_LRZFireballLauncher:

		move.l	#Map_LRZFireballLauncher,$C(a0)
		move.w	#$63A1,$A(a0)
		ori.b	#4,4(a0)
		move.b	#$10,7(a0)
		move.b	#4,6(a0)
		move.w	#prio(5),8(a0)
		move.b	#2,$22(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		lsl.w	#2,d0
		move.w	d0,$30(a0)
		move.l	#loc_42BF6,(a0)

loc_42BF6:
		subq.w	#1,$2E(a0)
		bpl.s	loc_42C7A
		move.w	$30(a0),$2E(a0)
		tst.b	4(a0)
		bpl.s	loc_42C7A
		jsr	Create_New_Sprite3.w
		bne.w	loc_42C7A
		move.l	#loc_42C80,(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)

loc_42C24:
		addi.w	#8,$10(a1)
		move.b	4(a0),4(a1)
		move.l	$C(a0),$C(a1)
		move.w	#$3A1,$A(a1)
		move.w	#prio(6),8(a1)
		move.b	#$C,7(a1)
		move.b	#8,6(a1)
		move.b	#-$65,$28(a1)
		bset	#4,$2B(a1)
		move.w	#$200,$18(a1)
		btst	#0,$2A(a0)
		beq.s	loc_42C72
		neg.w	$18(a1)
		subi.w	#$10,$10(a1)

loc_42C72:
		moveq	#$67,d0
		jsr	Play_Sound_2.w

loc_42C7A:

		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_42C80:
		move.b	(Level_frame_counter+1).w,d0
		andi.b	#3,d0
		bne.s	loc_42C94
		addq.b	#1,$22(a0)
		andi.b	#1,$22(a0)

loc_42C94:
		tst.b	4(a0)
		bpl.s	loc_42CAC
		jsr	MoveSprite2.w
		jsr	Add_SpriteToCollisionResponseList.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_42CAC:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------
Map_LRZFireballLauncher:include "Levels/LRZ/Misc Object Data/Map - Fireball Launcher.asm"

; ---------------------------------------------------------------------------

Obj_LRZButtonHorizontal:

		move.l	#Map_LRZButtonHorizontal,$C(a0)
		move.w	#$63A1,$A(a0)
		ori.b	#4,4(a0)
		move.b	#$10,7(a0)
		move.b	#$10,6(a0)
		move.w	#prio(5),8(a0)
		tst.b	(Current_act).w
		beq.s	loc_42D10
		move.l	#Map_LRZButtonHorizontal2,$C(a0)
		move.w	#$240D,$A(a0)

loc_42D10:
		move.l	#loc_42D16,(a0)

loc_42D16:
		move.w	#$10,d1

loc_42D1A:
		move.w	#$F,d2
		move.w	#$10,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w

loc_42D2C:
		move.b	#0,$22(a0)
		move.b	$2C(a0),d0
		andi.w	#$F,d0
		lea	(Level_trigger_array).w,a3
		lea	(a3,d0.w),a3
		moveq	#0,d3

loc_42D44:
		btst	#6,$2C(a0)
		beq.s	loc_42D4E
		moveq	#7,d3

loc_42D4E:
		swap	d6
		andi.w	#3,d6
		bne.s	loc_42D62
		btst	#4,$2C(a0)
		bne.s	loc_42D76
		bclr	d3,(a3)
		bra.s	loc_42D76
; ---------------------------------------------------------------------------

loc_42D62:
		tst.b	(a3)
		bne.s	loc_42D6E
		moveq	#$5B,d0
		jsr	Play_Sound_2.w

loc_42D6E:
		bset	d3,(a3)
		move.b	#1,$22(a0)

loc_42D76:

		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------
Map_LRZButtonHorizontal:	include "Levels/LRZ/Misc Object Data/Map - Button Horizontal.asm"
; ---------------------------------------------------------------------------

Obj_LRZShootingTrigger:

		move.l	#Map_LRZShootingTrigger,$C(a0)
		move.w	#$63A1,$A(a0)

loc_42DCC:
		ori.b	#4,4(a0)
		move.b	#$10,7(a0)
		move.b	#$10,6(a0)
		move.w	#prio(5),8(a0)
		move.b	#-$3A,$28(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0

loc_42DF0:
		andi.w	#$F0,d0
		lsr.w	#2,d0
		move.w	d0,$30(a0)
		move.l	#loc_42E00,(a0)

loc_42E00:
		subq.w	#1,$2E(a0)
		bpl.s	loc_42E84
		move.w	$30(a0),$2E(a0)
		tst.b	4(a0)
		bpl.s	loc_42E84
		jsr	Create_New_Sprite3.w
		bne.w	loc_42E84

loc_42E1C:
		move.l	#loc_42EE8,(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		move.b	4(a0),4(a1)
		move.l	$C(a0),$C(a1)
		move.w	#$3A1,$A(a1)
		move.w	#prio(6),8(a1)
		move.b	#4,7(a1)
		move.b	#4,6(a1)

loc_42E52:
		move.b	#-$68,$28(a1)
		bset	#3,$2B(a1)

loc_42E5E:
		move.b	#1,$22(a1)
		move.w	#$200,$18(a1)
		move.w	#$200,$1A(a1)

loc_42E70:
		btst	#0,$2A(a0)
		beq.s	loc_42E7C
		neg.w	$18(a1)

loc_42E7C:
		moveq	#$4D,d0
		jsr	Play_Sound_2.w

loc_42E84:

		move.b	$29(a0),d0
		beq.w	loc_42EBA
		move.b	$2C(a0),d0

loc_42E90:
		andi.w	#$F,d0
		lea	(Level_trigger_array).w,a3
		lea	(a3,d0.w),a3
		moveq	#0,d3
		lea	(Player_1).w,a1

loc_42EA2:
		bclr	#0,$29(a0)
		beq.s	loc_42EAC
		bsr.s	sub_42EC0

loc_42EAC:
		lea	(Player_2).w,a1
		bclr	#1,$29(a0)
		beq.s	loc_42EBA
		bsr.s	sub_42EC0

loc_42EBA:

		jmp	loc_1B662.w

; =============== S U B R O U T I N E =======================================


sub_42EC0:

		cmpi.b	#2,$20(a1)
		bne.s	locret_42EE6
		neg.w	$18(a1)
		neg.w	$1A(a1)
		bset	d3,(a3)
		move.l	#Obj_Explosion,(a0)
		move.b	#2,5(a0)
		clr.b	$28(a0)
		clr.b	$29(a0)

locret_42EE6:
		rts
; End of function sub_42EC0

; ---------------------------------------------------------------------------

loc_42EE8:
		tst.b	4(a0)
		bpl.s	loc_42F00
		jsr	MoveSprite2.w
		jsr	Add_SpriteToCollisionResponseList.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_42F00:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------
Map_LRZShootingTrigger:include "Levels/LRZ/Misc Object Data/Map - Shooting Trigger.asm"

; ---------------------------------------------------------------------------

Obj_LRZDashElevator:

		move.l	#Map_LRZDashElevator,$C(a0)
		move.w	#$3A1,$A(a0)
		move.b	#4,4(a0)
		move.b	#$20,7(a0)
		move.b	#$10,6(a0)
		move.w	#prio(1),8(a0)
		move.w	$14(a0),$46(a0)
		moveq	#0,d1
		move.b	$2C(a0),d0
		bpl.s	loc_42F54
		moveq	#$20,d1
		move.w	d1,$30(a0)

loc_42F54:
		andi.w	#$7F,d0
		lsl.w	#3,d0
		move.w	d0,$34(a0)
		bclr	#0,$2A(a0)
		beq.s	loc_42F72
		move.w	d0,$30(a0)
		sub.w	d1,$30(a0)
		sub.w	d0,$46(a0)

loc_42F72:
		move.l	#loc_42F78,(a0)

loc_42F78:
		moveq	#0,d5
		lea	$2E(a0),a2
		lea	(Player_1).w,a1
		moveq	#3,d6
		bsr.w	sub_4301C
		addq.w	#1,a2
		lea	(Player_2).w,a1
		moveq	#4,d6
		bsr.w	sub_4301C
		move.l	$30(a0),d0
		swap	d5
		asr.l	#3,d5
		add.l	d5,d0
		bpl.s	loc_42FA4
		moveq	#0,d0
		moveq	#0,d5

loc_42FA4:
		move.l	$34(a0),d1
		cmp.l	d1,d0
		blo.s	loc_42FB0
		move.l	d1,d0
		moveq	#0,d5

loc_42FB0:
		move.l	d0,$30(a0)
		swap	d0
		add.w	$46(a0),d0

loc_42FBA:
		move.w	d0,$14(a0)
		move.b	(Level_frame_counter+1).w,d0
		andi.b	#3,d0
		bne.s	loc_43000
		tst.l	d5
		beq.s	loc_43000
		bpl.s	loc_42FE2
		addq.b	#1,$22(a0)
		cmpi.b	#3,$22(a0)
		blo.s	loc_42FEE
		move.b	#0,$22(a0)
		bra.s	loc_42FEE
; ---------------------------------------------------------------------------

loc_42FE2:
		subq.b	#1,$22(a0)
		bcc.s	loc_42FEE
		move.b	#2,$22(a0)

loc_42FEE:

		move.b	(Level_frame_counter+1).w,d0
		andi.b	#$F,d0
		bne.s	loc_43000
		moveq	#-$29,d0
		jsr	Play_Sound_2.w

loc_43000:

		move.w	#$2B,d1
		move.w	#8,d2
		move.w	#9,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		jmp	Sprite_OnScreen_Test.w

; =============== S U B R O U T I N E =======================================


sub_4301C:

		tst.b	(a2)
		bne.s	loc_4303A
		btst	d6,$2A(a0)
		beq.s	locret_43038
		cmpi.b	#9,$20(a1)
		bne.s	locret_43038
		move.w	$10(a0),$10(a1)
		move.b	#1,(a2)

locret_43038:

		rts
; ---------------------------------------------------------------------------

loc_4303A:
		btst	#1,$2A(a1)
		bne.s	loc_43052
		cmpi.b	#2,$20(a1)
		beq.s	loc_4305E
		cmpi.b	#9,$20(a1)
		beq.s	loc_4305E

loc_43052:
		move.w	#0,$18(a1)
		move.b	#0,(a2)
		rts
; ---------------------------------------------------------------------------

loc_4305E:

		move.w	$10(a0),$10(a1)
		move.w	$1C(a1),d0
		beq.s	loc_43082
		bpl.s	loc_43076
		addi.w	#$40,d0
		bcc.s	loc_4307E
		moveq	#0,d0
		bra.s	loc_4307E
; ---------------------------------------------------------------------------

loc_43076:
		subi.w	#$40,d0
		bcc.s	loc_4307E
		moveq	#0,d0

loc_4307E:

		move.w	d0,$1C(a1)

loc_43082:
		moveq	#8,d0
		add.b	$3E(a1),d0
		btst	#0,$2A(a1)
		bne.s	loc_43092
		neg.w	d0

loc_43092:
		add.w	d0,d5
		rts
; End of function sub_4301C

; ---------------------------------------------------------------------------
Map_LRZDashElevator:include "Levels/LRZ/Misc Object Data/Map - Dash Elevator.asm"

; ---------------------------------------------------------------------------

Obj_LRZSmashingSpikePlatform:

		move.l	#Map_LRZSmashingSpikePlatform,$C(a0)
		move.w	#$43A1,$A(a0)
		ori.b	#4,4(a0)
		move.b	#$40,7(a0)
		move.b	#$20,6(a0)
		move.w	#prio(5),8(a0)
		move.w	$14(a0),$46(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		lsl.w	#3,d0
		move.w	d0,$38(a0)

loc_43122:
		move.l	#loc_43128,(a0)

loc_43128:
		tst.b	$32(a0)
		bne.s	loc_43178
		move.w	$1A(a0),d0
		addi.w	#$40,$1A(a0)
		ext.l	d0
		lsl.l	#8,d0
		add.l	d0,$34(a0)
		move.w	$34(a0),d2
		cmp.w	$38(a0),d2
		blo.w	loc_431E0
		clr.w	$1A(a0)
		move.w	$38(a0),$34(a0)
		move.b	#1,$32(a0)
		move.w	#$1E,$3A(a0)
		move.b	#0,$23(a0)
		tst.b	4(a0)
		bpl.s	loc_431E0
		moveq	#$5F,d0
		jsr	Play_Sound_2.w
		bra.s	loc_431E0
; ---------------------------------------------------------------------------

loc_43178:
		tst.w	$3A(a0)
		beq.s	loc_431AA
		subq.w	#1,$3A(a0)
		moveq	#0,d0
		move.b	$23(a0),d0
		move.b	RawAni_43196(pc,d0.w),$22(a0)
		beq.s	loc_431E0
		addq.b	#1,$23(a0)
		bra.s	loc_431E0
; ---------------------------------------------------------------------------
RawAni_43196:	dc.b	2,   4,	  6,   7,   7,	 7,   7,   6,	6,   5,	  5,   4,   4,	 3,   3,   2,	2,   1,	  1,   0
; ---------------------------------------------------------------------------

loc_431AA:
		move.w	$34(a0),d2
		beq.s	loc_431D4
		subq.w	#1,d2
		move.w	d2,$34(a0)
		addq.b	#8,$22(a0)
		andi.b	#8,$22(a0)
		move.b	(Level_frame_counter+1).w,d0
		andi.b	#$1F,d0
		bne.s	loc_431E0

		tst.b	4(a0)		; NAT: added a missing check
		bpl.s	loc_431E0
		moveq	#$48,d0
		jsr	Play_Sound_2.w
		bra.s	loc_431E0
; ---------------------------------------------------------------------------

loc_431D4:
		move.b	#0,$32(a0)
		move.b	#0,$22(a0)

loc_431E0:

		move.w	$46(a0),d0
		add.w	$34(a0),d0
		move.w	d0,$14(a0)
		moveq	#0,d1
		move.b	7(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.b	$22(a0),d0
		andi.w	#7,d0
		sub.w	d0,d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		swap	d6
		andi.w	#$C,d6
		bne.s	loc_43222
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_43222:
		move.b	d6,d0
		andi.b	#4,d0
		beq.s	loc_43234
		lea	(Player_1).w,a1
		jsr	sub_24280.w

loc_43234:
		andi.b	#8,d6
		beq.s	loc_43244
		lea	(Player_2).w,a1
		jsr	sub_24280.w

loc_43244:
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------
Map_LRZSmashingSpikePlatform:include "Levels/LRZ/Misc Object Data/Map - Smashing Spike Platform.asm"


; ---------------------------------------------------------------------------

Obj_LRZSwingingSpikeBall:

		move.l	#Map_LRZSwingingSpikeBall,$C(a0)
		move.w	#-$5C5F,$A(a0)
		move.b	#4,4(a0)
		move.b	#$10,7(a0)
		move.b	#$10,6(a0)
		move.w	#prio(5),8(a0)
		move.w	$10(a0),$44(a0)
		move.w	$14(a0),$46(a0)
		move.b	#-$66,$28(a0)
		tst.b	(Current_act).w
		beq.s	loc_4354E
		move.l	#Map_LRZSwingingSpikeBall2,$C(a0)
		move.w	#-$5BF3,$A(a0)

loc_4354E:
		jsr	Create_New_Sprite3.w
		bne.w	loc_435CA
		move.l	#loc_435FE,(a1)
		move.l	$C(a0),$C(a1)
		move.w	$A(a0),$A(a1)
		andi.w	#-$6001,$A(a1)
		move.b	4(a0),4(a1)
		move.b	#$50,7(a1)
		move.b	#$50,6(a1)
		move.w	#prio(5),8(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		move.b	$2C(a0),d0
		andi.w	#$F,d0
		bset	#6,4(a1)
		move.w	d0,$16(a1)
		lea	$18(a1),a2
		move.w	$16(a1),d0
		subq.w	#1,d0

loc_435B0:
		move.w	$10(a0),(a2)+
		move.w	$14(a0),(a2)+
		move.w	#1,(a2)+
		dbf	d0,loc_435B0
		move.b	#1,$22(a1)
		move.w	a1,$3C(a0)

loc_435CA:
		moveq	#2,d0
		btst	#0,$2A(a0)
		beq.s	loc_435D6
		neg.w	d0

loc_435D6:
		move.b	d0,$36(a0)
		move.l	#loc_435E0,(a0)

loc_435E0:
		movea.w	$3C(a0),a1
		bsr.w	sub_43604
		move.b	$34(a0),d2
		move.b	$36(a0),d0
		add.b	d0,$34(a0)
		move.w	$44(a0),d0
		jmp	loc_1B666.w
; ---------------------------------------------------------------------------

loc_435FE:
		jmp	Sprite_OnScreen_Test.w

; =============== S U B R O U T I N E =======================================


sub_43604:
		move.b	$34(a0),d0
		jsr	GetSineCosine.w
		move.w	$46(a0),d2
		move.w	$44(a0),d3
		swap	d0
		swap	d1
		asr.l	#4,d0
		asr.l	#4,d1
		move.l	d0,d4
		move.l	d1,d5
		tst.b	$2C(a0)
		bpl.s	loc_4362C
		add.l	d0,d4
		add.l	d1,d5

loc_4362C:
		lea	$18(a1),a2
		move.w	$16(a1),d6
		subq.w	#1,d6

loc_43636:
		movem.l	d4-d5,-(sp)
		swap	d4
		swap	d5
		add.w	d2,d4
		add.w	d3,d5
		move.w	d5,(a2)+
		move.w	d4,(a2)+
		movem.l	(sp)+,d4-d5
		add.l	d0,d4
		add.l	d1,d5
		addq.w	#2,a2
		dbf	d6,loc_43636
		swap	d4
		swap	d5
		add.w	d2,d4
		add.w	d3,d5
		move.w	d5,$10(a0)
		move.w	d4,$14(a0)
		rts
; End of function sub_43604

; ---------------------------------------------------------------------------
Map_LRZSwingingSpikeBall:	include "Levels/LRZ/Misc Object Data/Map - Swinging Spike Ball.asm"
; ---------------------------------------------------------------------------

Obj_LRZLavaFall:

		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	d0,$30(a0)
		move.l	#loc_436A8,(a0)

loc_436A8:
		move.w	(Level_frame_counter).w,d0
		andi.w	#$FF,d0
		cmp.w	$30(a0),d0
		blo.w	loc_43746
		subq.b	#1,$24(a0)
		bpl.w	loc_43746
		move.b	#5,$24(a0)
		jsr	Create_New_Sprite3.w
		bne.w	loc_43746
		move.l	#loc_43764,(a1)
		addq.b	#1,$25(a0)
		cmpi.b	#2,$25(a0)
		blo.s	loc_436EE
		move.b	#0,$25(a0)
		move.l	#loc_4374C,(a1)

loc_436EE:
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		move.l	#Map_LRZLavaFall,$C(a1)
		move.w	#$40D3,$A(a1)
		ori.b	#-$7C,4(a1)
		move.w	#prio(6),8(a1)
		move.b	#$20,7(a1)
		move.b	#$20,6(a1)
		move.b	#-$67,$28(a1)
		bset	#4,$2B(a1)
		move.w	#$800,$1A(a1)
		move.w	#$1C,$2E(a1)
		btst	#0,$2A(a0)
		beq.s	loc_43746
		move.w	#$24,$2E(a1)

loc_43746:

		jmp	Delete_Sprite_If_Not_In_Range.w
; ---------------------------------------------------------------------------

loc_4374C:
		tst.b	4(a0)
		bpl.s	loc_43764
		move.b	(Level_frame_counter+1).w,d0
		andi.b	#$F,d0
		bne.s	loc_43764
		moveq	#-$2B,d0
		jsr	Play_Sound_2.w

loc_43764:


		subq.w	#1,$2E(a0)
		bmi.s	loc_4377C
		jsr	MoveSprite2.w
		jsr	Add_SpriteToCollisionResponseList.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_4377C:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------
Map_LRZLavaFall:include "Levels/LRZ/Misc Object Data/Map - Lava Fall.asm"

; ---------------------------------------------------------------------------

Obj_LRZSpikeBall:

		move.l	#Map_LRZSpikeBall,$C(a0)
		move.w	#$2442,$A(a0)
		move.b	#4,4(a0)
		move.b	#$20,7(a0)
		move.b	#$20,6(a0)
		move.w	#prio(5),8(a0)
		move.b	#$20,$1F(a0)
		move.b	#$20,$1E(a0)
		move.w	$10(a0),$44(a0)
		move.w	$14(a0),$46(a0)
		tst.b	$2C(a0)
		bne.s	loc_437F8
		ori.w	#-$8000,$A(a0)
		move.b	#-$71,$28(a0)
		move.l	#loc_4397E,(a0)
		bra.w	loc_4397E
; ---------------------------------------------------------------------------

loc_437F8:
		move.l	#loc_437FE,(a0)

loc_437FE:
		move.b	$26(a0),d0
		jsr	GetSineCosine.w
		asr.w	#2,d1
		add.w	$44(a0),d1
		move.w	d1,$10(a0)
		move.b	#0,$28(a0)
		andi.w	#$7FFF,$A(a0)
		tst.b	$26(a0)
		bpl.s	loc_43830
		ori.w	#-$8000,$A(a0)
		move.b	#-$71,$28(a0)

loc_43830:
		lea	(Player_1).w,a1
		move.w	$14(a1),d0
		sub.w	$46(a0),d0
		addi.w	#$40,d0
		cmpi.w	#$80,d0
		bhs.s	loc_4385C
		move.w	$10(a1),d0
		sub.w	$44(a0),d0
		bcc.s	loc_4385C
		tst.b	(Debug_On).w
		bne.s	loc_4385C
		move.b	#1,$30(a0)

loc_4385C:

		tst.b	$30(a0)
		beq.s	loc_4387E
		move.b	$2C(a0),d0
		cmp.b	$26(a0),d0
		bne.s	loc_4387E
		move.l	#loc_4389E,(a0)
		move.w	#-$400,$18(a0)
		move.w	#0,$1A(a0)

loc_4387E:

		subq.b	#2,$26(a0)
		tst.b	$30(a0)
		bne.s	loc_43892
		move.w	$44(a0),d0
		jmp	loc_1B666.w
; ---------------------------------------------------------------------------

loc_43892:
		jsr	Add_SpriteToCollisionResponseList.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_4389E:
		btst	#1,$2A(a0)
		bne.s	loc_4390E
		jsr	MoveSprite2.w
		moveq	#-$20,d3
		add.w	$10(a0),d3
		jsr	ObjCheckLeftWallDist_Part2.w
		tst.w	d1
		bpl.s	loc_438CC
		sub.w	d1,$10(a0)
		move.w	#0,$18(a0)
		move.b	#0,$30(a0)

loc_438CC:
		jsr	ObjCheckFloorDist.w
		cmpi.w	#$E,d1
		bgt.s	loc_43906
		add.w	d1,$14(a0)
		move.w	#0,$1A(a0)
		tst.w	$18(a0)
		beq.s	loc_438FA
		move.b	(Level_frame_counter+1).w,d0
		andi.b	#$F,d0
		bne.s	loc_438FA
		moveq	#-$6A,d0
		jsr	Play_Sound_2.w

loc_438FA:

		subi.w	#4,$18(a0)
		bsr.w	sub_439EC
		bra.s	loc_43948
; ---------------------------------------------------------------------------

loc_43906:
		bset	#1,$2A(a0)
		bra.s	loc_43948
; ---------------------------------------------------------------------------

loc_4390E:
		moveq	#-$20,d3
		add.w	$10(a0),d3
		jsr	ObjCheckLeftWallDist_Part2.w
		tst.w	d1
		bpl.s	loc_43928
		sub.w	d1,$10(a0)
		move.w	#0,$18(a0)

loc_43928:
		jsr	MoveSprite.w
		jsr	ObjCheckFloorDist.w
		tst.w	d1
		bpl.s	loc_43948
		add.w	d1,$14(a0)
		bclr	#1,$2A(a0)
		move.w	#0,$1A(a0)

loc_43948:

		subq.b	#1,$24(a0)
		bpl.s	loc_43966
		move.b	#3,$24(a0)
		addq.b	#1,$22(a0)
		cmpi.b	#3,$22(a0)
		blo.s	loc_43966
		move.b	#0,$22(a0)

loc_43966:

		tst.b	$30(a0)
		beq.s	loc_43978
		jsr	Add_SpriteToCollisionResponseList.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_43978:
		jmp	loc_1B662.w
; ---------------------------------------------------------------------------

loc_4397E:

		move.b	$26(a0),d0
		jsr	GetSineCosine.w
		asr.w	#2,d1
		add.w	$44(a0),d1
		move.w	d1,$10(a0)
		btst	#1,$2A(a0)
		bne.s	loc_439A4
		jsr	ObjCheckFloorDist.w
		add.w	d1,$14(a0)

loc_439A4:
		tst.b	4(a0)
		bpl.s	loc_439BC
		move.b	(Level_frame_counter+1).w,d0
		andi.b	#$F,d0
		bne.s	loc_439BC
		moveq	#-$6A,d0
		jsr	Play_Sound_2.w

loc_439BC:

		bsr.w	sub_439EC
		subq.b	#1,$24(a0)
		bpl.s	loc_439DE
		move.b	#3,$24(a0)
		addq.b	#1,$22(a0)
		cmpi.b	#3,$22(a0)
		blo.s	loc_439DE
		move.b	#0,$22(a0)

loc_439DE:

		subq.b	#2,$26(a0)
		move.w	$44(a0),d0
		jmp	loc_1B666.w

; =============== S U B R O U T I N E =======================================


sub_439EC:

		move.w	(Level_frame_counter).w,d0
		andi.w	#3,d0
		bne.s	locret_43A6A

loc_439F6:
		tst.b	4(a0)
		bpl.s	locret_43A6A
		jsr	Create_New_Sprite3.w
		bne.w	locret_43A6A
		move.l	#loc_43A6C,(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		addi.w	#$20,$14(a1)
		move.l	#Map_LRZRockDebris,$C(a1)
		move.w	#-$3F2D,$A(a1)
		ori.b	#-$7C,4(a1)
		move.w	#prio(0),8(a1)
		move.b	#4,7(a1)
		move.b	#4,6(a1)
		jsr	Random_Number.w
		andi.w	#$1FF,d0
		subi.w	#$100,d0
		move.w	d0,$18(a1)
		asr.w	#4,d0
		add.w	d0,$10(a1)
		swap	d0
		andi.w	#$1FF,d0
		addi.w	#-$400,d0

loc_43A66:
		move.w	d0,$1A(a1)

locret_43A6A:
		rts
; End of function sub_439EC

; ---------------------------------------------------------------------------

loc_43A6C:

		tst.b	4(a0)
		bpl.s	loc_43A88
		addq.b	#1,$22(a0)
		andi.b	#3,$22(a0)
		jsr	MoveSprite.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_43A88:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------
Map_LRZSpikeBall:include "Levels/LRZ/Misc Object Data/Map - Spike Ball.asm"

Map_LRZRockDebris:	include "Levels/LRZ/Misc Object Data/Map - Rock Debris.asm"

; ---------------------------------------------------------------------------

Obj_LRZOrbitingSpikeBallHorizontal:

		move.l	#Map_LRZOrbitingSpikeBall,$C(a0)
		move.w	#$240D,$A(a0)
		move.b	#4,4(a0)
		move.w	#prio(5),8(a0)
		move.w	$10(a0),$44(a0)
		move.w	$14(a0),$46(a0)
		bclr	#0,$2C(a0)
		beq.s	loc_43B84
		move.b	#$20,7(a0)
		move.b	#$20,6(a0)
		move.b	#1,$22(a0)
		move.l	#loc_43BDE,(a0)
		bra.w	loc_43BDE
; ---------------------------------------------------------------------------

loc_43B84:
		move.b	#$10,7(a0)
		move.b	#$10,6(a0)
		move.l	#loc_43B96,(a0)

loc_43B96:
		move.b	#0,$28(a0)
		andi.w	#$7FFF,$A(a0)
		move.b	(Level_frame_counter+1).w,d0
		add.b	d0,d0
		btst	#0,$2A(a0)
		beq.s	loc_43BB2
		neg.b	d0

loc_43BB2:
		add.b	$2C(a0),d0
		bpl.s	loc_43BC4
		ori.w	#-$8000,$A(a0)
		move.b	#-$66,$28(a0)

loc_43BC4:
		jsr	GetSineCosine.w
		asr.w	#3,d1
		add.w	$44(a0),d1
		move.w	d1,$10(a0)
		move.w	$44(a0),d0
		jmp	loc_1B666.w
; ---------------------------------------------------------------------------

loc_43BDE:

		move.b	#0,$28(a0)
		andi.w	#$7FFF,$A(a0)
		move.b	(Level_frame_counter+1).w,d0
		add.b	d0,d0
		btst	#0,$2A(a0)
		beq.s	loc_43BFA
		neg.b	d0

loc_43BFA:
		add.b	$2C(a0),d0
		bpl.s	loc_43C0C
		ori.w	#-$8000,$A(a0)
		move.b	#-$71,$28(a0)

loc_43C0C:
		jsr	GetSineCosine.w
		move.w	d1,d0
		asr.w	#1,d1
		add.w	d0,d1
		asr.w	#3,d1
		add.w	$44(a0),d1
		move.w	d1,$10(a0)
		move.w	$44(a0),d0
		jmp	loc_1B666.w
; ---------------------------------------------------------------------------

Obj_LRZOrbitingSpikeBallVertical:

		move.l	#Map_LRZOrbitingSpikeBall,$C(a0)
		move.w	#$240D,$A(a0)
		move.b	#4,4(a0)
		move.w	#prio(5),8(a0)
		move.w	$10(a0),$44(a0)
		move.w	$14(a0),$46(a0)
		bclr	#0,$2C(a0)
		beq.s	loc_43C76
		move.b	#$20,7(a0)
		move.b	#$20,6(a0)
		move.b	#1,$22(a0)
		move.l	#loc_43CD6,(a0)
		bra.w	loc_43CD6
; ---------------------------------------------------------------------------

loc_43C76:
		move.b	#$10,7(a0)
		move.b	#$10,6(a0)
		move.l	#loc_43C88,(a0)

loc_43C88:
		move.b	#0,$28(a0)
		andi.w	#$7FFF,$A(a0)
		move.b	(Level_frame_counter+1).w,d0
		add.b	d0,d0
		btst	#0,$2A(a0)
		beq.s	loc_43CA4
		neg.b	d0

loc_43CA4:
		add.b	$2C(a0),d0
		bpl.s	loc_43CB6
		ori.w	#-$8000,$A(a0)
		move.b	#-$66,$28(a0)

loc_43CB6:
		jsr	GetSineCosine.w
		move.w	d1,d0
		asr.w	#2,d1
		add.w	d0,d1
		asr.w	#3,d1
		add.w	$46(a0),d1
		move.w	d1,$14(a0)
		move.w	$44(a0),d0
		jmp	loc_1B666.w
; ---------------------------------------------------------------------------

loc_43CD6:

		move.b	#0,$28(a0)
		andi.w	#$7FFF,$A(a0)
		move.b	(Level_frame_counter+1).w,d0
		add.b	d0,d0
		btst	#0,$2A(a0)
		beq.s	loc_43CF2
		neg.b	d0

loc_43CF2:
		add.b	$2C(a0),d0
		bpl.s	loc_43D04
		ori.w	#-$8000,$A(a0)
		move.b	#-$71,$28(a0)

loc_43D04:
		jsr	GetSineCosine.w
		asr.w	#2,d1
		move.w	d1,d0
		asr.w	#3,d0
		sub.w	d0,d1
		add.w	$46(a0),d1
		move.w	d1,$14(a0)
		move.w	$44(a0),d0
		jmp	loc_1B666.w
; ---------------------------------------------------------------------------
Map_LRZOrbitingSpikeBall:include "Levels/LRZ/Misc Object Data/Map - Orbiting Spike Ball.asm"

; ---------------------------------------------------------------------------

Obj_LRZFlameThrower:
		tst.b	OptionsBits.w		; NAT: Check if alt layout
		bmi.w	loc_44084		; if so, delete

		move.l	#Map_LRZFlameThrower,$C(a0)
		move.w	#$2090,$A(a0)
		ori.b	#4,4(a0)
		move.b	#$18,7(a0)
		move.b	#$10,6(a0)
		move.w	#prio(5),8(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		bpl.s	loc_43DC4
		andi.w	#$7F,d0
		lsl.w	#2,d0
		move.w	d0,$32(a0)
		move.w	#$78,$30(a0)
		move.b	#7,$22(a0)
		btst	#0,$2A(a0)
		beq.s	loc_43DBA
		bset	#1,4(a0)

loc_43DBA:
		move.l	#loc_43F12,(a0)
		bra.w	loc_43F12
; ---------------------------------------------------------------------------

loc_43DC4:
		lsl.w	#2,d0
		move.w	d0,$32(a0)
		move.w	#$78,$30(a0)
		move.b	#6,$22(a0)
		move.l	#loc_43DDC,(a0)

loc_43DDC:
		tst.b	$2F(a0)
		bne.s	loc_43DF8
		subq.w	#1,$30(a0)
		bpl.s	loc_43E14
		move.w	$32(a0),$30(a0)
		move.b	#1,$2F(a0)
		bra.w	loc_43EF6
; ---------------------------------------------------------------------------

loc_43DF8:
		subq.w	#1,$30(a0)
		bpl.w	loc_43EF6
		move.w	#$78,$30(a0)
		move.b	#0,$2F(a0)
		moveq	#-$3E,d0
		jsr	Play_Sound_2.w

loc_43E14:
		subq.b	#1,$24(a0)
		bpl.s	loc_43E2A
		move.b	#2,$24(a0)
		addq.b	#1,$25(a0)
		andi.b	#1,$25(a0)

loc_43E2A:
		move.b	(Level_frame_counter+1).w,d0
		move.b	d0,d1
		andi.b	#3,d0
		bne.w	loc_43EF6
		andi.b	#$F,d1
		bne.s	loc_43E4E
		cmpi.w	#$1E,$30(a0)
		blo.s	loc_43E4E
		moveq	#-$3E,d0
		jsr	Play_Sound_2.w

loc_43E4E:

		move.b	$26(a0),d0
		jsr	GetSineCosine.w
		asr.w	#4,d0
		move.b	d0,$2E(a0)
		addq.b	#8,$26(a0)
		tst.b	4(a0)
		bpl.w	loc_43EF6
		jsr	Create_New_Sprite3.w
		bne.w	loc_43EF6
		move.l	#loc_44048,(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		addi.w	#$10,$10(a1)
		move.b	4(a0),4(a1)
		move.l	$C(a0),$C(a1)
		move.w	#$240D,$A(a1)
		move.w	#prio(6),8(a1)
		move.b	#$C,7(a1)
		move.b	#$C,6(a1)
		move.b	#-$68,$28(a1)
		bset	#4,$2B(a1)
		move.b	$2E(a0),d0
		jsr	GetSineCosine.w
		asl.w	#2,d1
		asl.w	#2,d0
		move.w	d1,$18(a1)
		move.w	d0,$1A(a1)
		btst	#0,$2A(a0)
		beq.s	loc_43EE4
		neg.w	$18(a1)
		subi.w	#$20,$10(a1)

loc_43EE4:
		move.b	$25(a0),$22(a1)
		move.b	$24(a0),$25(a1)
		move.b	#8,$24(a1)

loc_43EF6:

		move.w	#$23,d1
		move.w	#$10,d2
		move.w	#$11,d3
		move.w	$10(a0),d4

loc_43F06:
		jsr	SolidObjectFull.w
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_43F12:

		tst.b	$2F(a0)
		bne.s	loc_43F2E
		subq.w	#1,$30(a0)
		bpl.s	loc_43F4A
		move.w	$32(a0),$30(a0)
		move.b	#1,$2F(a0)
		bra.w	loc_4402C
; ---------------------------------------------------------------------------

loc_43F2E:
		subq.w	#1,$30(a0)
		bpl.w	loc_4402C
		move.w	#$78,$30(a0)
		move.b	#0,$2F(a0)
		moveq	#-$3E,d0
		jsr	Play_Sound_2.w

loc_43F4A:
		subq.b	#1,$24(a0)
		bpl.s	loc_43F60
		move.b	#2,$24(a0)
		addq.b	#1,$25(a0)
		andi.b	#1,$25(a0)

loc_43F60:
		move.b	(Level_frame_counter+1).w,d0
		move.b	d0,d1
		andi.b	#3,d0
		bne.w	loc_4402C
		andi.b	#$F,d1
		bne.s	loc_43F84
		cmpi.w	#$1E,$30(a0)
		blo.s	loc_43F84
		moveq	#-$3E,d0
		jsr	Play_Sound_2.w

loc_43F84:

		move.b	$26(a0),d0
		jsr	GetSineCosine.w
		asr.w	#4,d0
		move.b	d0,$2E(a0)
		addq.b	#8,$26(a0)
		tst.b	4(a0)
		bpl.w	loc_4402C
		jsr	Create_New_Sprite3.w
		bne.w	loc_4402C
		move.l	#loc_44048,(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		addi.w	#$10,$14(a1)
		move.b	4(a0),4(a1)
		move.l	$C(a0),$C(a1)
		move.w	#$240D,$A(a1)
		move.w	#prio(6),8(a1)
		move.b	#$C,7(a1)
		move.b	#$C,6(a1)
		move.b	#-$68,$28(a1)
		bset	#4,$2B(a1)
		move.b	$2E(a0),d0
		jsr	GetSineCosine.w
		asl.w	#2,d1
		asl.w	#2,d0

loc_44000:
		move.w	d1,$1A(a1)
		move.w	d0,$18(a1)
		btst	#0,$2A(a0)
		beq.s	loc_4401A
		neg.w	$1A(a1)
		subi.w	#$20,$14(a1)

loc_4401A:
		move.b	$25(a0),$22(a1)
		move.b	$24(a0),$25(a1)
		move.b	#8,$24(a1)

loc_4402C:

		move.w	#$1B,d1
		move.w	#$10,d2
		move.w	#$11,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_44048:

		subq.b	#1,$24(a0)
		bpl.s	loc_44060
		move.b	#7,$24(a0)
		addq.b	#2,$22(a0)
		cmpi.b	#6,$22(a0)
		bhs.s	loc_44084

loc_44060:
		subq.b	#1,$25(a0)
		bpl.s	loc_44072
		move.b	#2,$25(a0)
		bchg	#0,$22(a0)

loc_44072:
		jsr	MoveSprite2.w
		jsr	Add_SpriteToCollisionResponseList.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_44084:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------
Map_LRZFlameThrower:include "Levels/LRZ/Misc Object Data/Map - Flamethrower.asm"

; ---------------------------------------------------------------------------

Obj_LRZSolidRock:

		move.l	#Map_LRZSolidRock,$C(a0)
		move.w	#$6090,$A(a0)
		ori.b	#4,4(a0)
		move.b	#$18,7(a0)
		move.b	#$10,6(a0)
		move.w	#prio(4),8(a0)
		move.w	$14(a0),$46(a0)
		move.l	#loc_44176,(a0)
		move.w	#-$60,d0
		tst.b	$2C(a0)
		bpl.s	loc_44132
		move.w	#-$C0,d0

loc_44132:
		move.w	respawn_addr(a0),d1
		beq.s	loc_4415E
		movea.w	d1,a2
		btst	#0,(a2)
		beq.s	loc_4415E
		btst	#6,$2C(a0)
		bne.s	loc_44166

loc_44148:
		neg.w	d0
		move.w	#-$3F6E,$32(a0)
		move.b	#1,$30(a0)
		move.l	#loc_441A6,(a0)
		bra.s	loc_44166
; ---------------------------------------------------------------------------

loc_4415E:

		btst	#6,$2C(a0)
		bne.s	loc_44148

loc_44166:

		btst	#0,$2A(a0)
		beq.s	loc_44170
		neg.w	d0

loc_44170:
		add.w	d0,$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_44176:

		move.b	$2C(a0),d0
		andi.w	#$F,d0
		lea	(Level_trigger_array).w,a3
		btst	#0,(a3,d0.w)
		beq.s	loc_441D6
		move.l	#loc_441D2,(a0)
		moveq	#-$71,d0
		jsr	Play_Sound_2.w
		move.w	respawn_addr(a0),d0
		beq.s	loc_441A4
		movea.w	d0,a2
		bset	#0,(a2)

loc_441A4:
		bra.s	loc_441D2
; ---------------------------------------------------------------------------

loc_441A6:

		move.b	$2C(a0),d0
		andi.w	#$F,d0
		lea	(Level_trigger_array).w,a3
		tst.b	(a3,d0.w)
		bpl.s	loc_441D6
		move.l	#loc_441D2,(a0)
		moveq	#-$71,d0
		jsr	Play_Sound_2.w
		move.w	respawn_addr(a0),d0
		beq.s	loc_441D2
		movea.w	d0,a2
		bclr	#0,(a2)

loc_441D2:


		bsr.w	sub_441F2

loc_441D6:

		move.w	#$23,d1
		move.w	#$10,d2
		move.w	#$11,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		jmp	Sprite_OnScreen_Test.w

; =============== S U B R O U T I N E =======================================


sub_441F2:
		move.w	#$60,d2
		tst.b	$30(a0)
		bne.s	loc_44220
		move.w	$34(a0),d1
		addq.w	#2,d1
		bne.s	loc_4420A
		move.l	#loc_44176,(a0)

loc_4420A:
		move.w	d1,$34(a0)
		add.w	d1,$32(a0)
		cmp.b	$32(a0),d2
		bhi.s	loc_44242
		move.b	#1,$30(a0)
		bra.s	loc_44242
; ---------------------------------------------------------------------------

loc_44220:
		move.w	$34(a0),d1
		subq.w	#2,d1
		bne.s	loc_4422E
		move.l	#loc_441A6,(a0)

loc_4422E:
		move.w	d1,$34(a0)
		add.w	d1,$32(a0)
		cmp.b	$32(a0),d2
		bls.s	loc_44242
		move.b	#0,$30(a0)

loc_44242:

		tst.b	$2C(a0)
		bmi.s	loc_44266
		moveq	#0,d0
		move.b	$32(a0),d0
		subi.w	#$60,d0
		btst	#0,$2A(a0)
		beq.s	loc_4425C
		neg.w	d0

loc_4425C:
		add.w	$46(a0),d0
		move.w	d0,$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_44266:
		moveq	#0,d0
		move.w	$32(a0),d0
		lsr.w	#7,d0
		subi.w	#$C0,d0
		btst	#0,$2A(a0)
		beq.s	loc_4427C
		neg.w	d0

loc_4427C:
		add.w	$46(a0),d0
		move.w	d0,$14(a0)
		rts
; End of function sub_441F2

; ---------------------------------------------------------------------------
Map_LRZSolidRock:include "Levels/LRZ/Misc Object Data/Map - Solid Rock.asm"

; ---------------------------------------------------------------------------

Obj_LRZTurbineSprites:

		move.w	#-$5C53,$A(a0)
		ori.b	#4,4(a0)
		move.w	#prio(4),8(a0)
		tst.b	$2C(a0)
		beq.s	loc_442D8
		move.l	#Map_LRZTurbineSprites2,$C(a0)
		move.b	#4,7(a0)
		move.b	#$30,6(a0)
		move.b	#-$60,$28(a0)
		move.l	#loc_44592,(a0)
		bra.w	loc_44592
; ---------------------------------------------------------------------------

loc_442D8:
		move.l	#Map_LRZTurbineSprites,$C(a0)
		move.b	#$10,7(a0)
		move.b	#$30,6(a0)
		move.l	#loc_442F2,(a0)

loc_442F2:
		lea	$30(a0),a2
		lea	(Player_1).w,a1
		move.w	(Ctrl_1_logical).w,d1
		bsr.s	sub_44338
		addq.w	#1,a2
		lea	(Player_2).w,a1
		move.w	(Ctrl_2_logical).w,d1
		bsr.s	sub_44338
		move.b	(Level_frame_counter+1).w,d0
		lsr.b	#1,d0
		andi.b	#3,d0
		move.b	d0,$22(a0)
		tst.b	4(a0)
		bpl.s	loc_44332
		move.b	(Level_frame_counter+1).w,d0
		andi.b	#$F,d0
		bne.s	loc_44332
		moveq	#-$40,d0
		jsr	Play_Sound_2.w

loc_44332:

		jmp	Sprite_OnScreen_Test.w

; =============== S U B R O U T I N E =======================================


sub_44338:

		tst.b	(a2)
		beq.w	loc_44434
		tst.b	(Debug_On).w
		bne.w	loc_4436E
		cmpi.b	#4,5(a1)
		bhs.w	loc_4436E
		andi.w	#$70,d1
		bne.w	loc_443C4
		bsr.w	sub_4450A
		moveq	#0,d0
		move.b	$22(a1),d0
		move.l	a2,-(sp)
		jsr	(Tails_Carry_LoadPLC).l
		movea.l	(sp)+,a2
		rts
; ---------------------------------------------------------------------------

loc_4436E:

		clr.b	(a2)
		move.b	#$1E,2(a2)
		andi.b	#-4,$2E(a1)
		move.w	#prio(2),8(a1)
		bset	#1,$2A(a1)
		move.b	#1,$40(a1)
		move.b	#$E,$1E(a1)
		move.b	#7,$1F(a1)
		move.b	#2,$20(a1)
		bset	#2,$2A(a1)
		bclr	#4,$2A(a1)
		move.b	#0,$27(a1)
		rts
; ---------------------------------------------------------------------------
byte_443B4:	dc.b  $20, $20,	$20, $30, $40, $50, $60, $60, $60, $A0,	$A0, $B0, $C0, $D0, $E0, $E0
; ---------------------------------------------------------------------------

loc_443C4:
		moveq	#0,d1
		move.b	4(a2),d0
		move.b	d0,d1
		lsr.w	#4,d1
		move.b	byte_443B4(pc,d1.w),d1
		andi.b	#$F,d0
		or.b	d1,d0
		jsr	GetSineCosine.w
		muls.w	#$C,d0
		neg.w	d0
		move.w	d0,$1A(a1)
		move.w	#0,$20(a1)
		tst.w	d0
		bpl.s	loc_443FE
		move.w	#$1000,$20(a1)
		ori.w	#-$8000,$A(a1)

loc_443FE:
		clr.b	(a2)
		move.b	#$14,2(a2)
		andi.b	#-4,$2E(a1)
		bset	#1,$2A(a1)
		clr.b	$40(a1)
		clr.b	$3D(a1)
		move.b	#2,5(a1)
		bclr	#4,$2A(a1)
		move.b	#0,$2F(a1)
		move.b	#0,$27(a1)
		rts
; ---------------------------------------------------------------------------

loc_44434:
		tst.b	2(a2)
		beq.s	loc_44448
		subq.b	#1,2(a2)
		bne.s	locret_44446
		move.w	#prio(2),8(a1)

locret_44446:
		rts
; ---------------------------------------------------------------------------

loc_44448:
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		addi.w	#$10,d0
		cmpi.w	#$20,d0
		bhs.w	locret_44508
		moveq	#$70,d1
		move.w	$14(a1),d0
		sub.w	$14(a0),d0
		addi.w	#$50,d0
		cmpi.w	#$18,d0
		blo.w	loc_4448E
		moveq	#$30,d1
		addi.w	#-$40,d0
		cmpi.w	#$18,d0
		blo.w	loc_4448E
		subi.w	#$40,d0
		cmpi.w	#$18,d0
		bhs.w	locret_44508
		moveq	#-$10,d1

loc_4448E:

		tst.b	(Debug_On).w
		bne.w	locret_44508
		cmpi.b	#4,5(a1)
		bhs.w	locret_44508
		tst.b	$2E(a1)
		bne.w	locret_44508
		cmpi.b	#$30,d1
		bne.s	loc_444B6
		tst.w	$A(a1)
		bpl.w	locret_44508

loc_444B6:
		clr.w	$18(a1)
		clr.w	$1A(a1)
		clr.w	$1C(a1)
		andi.b	#-4,4(a1)
		move.w	$10(a0),$10(a1)
		move.b	(Level_frame_counter+1).w,d0
		andi.b	#7,d0
		subi.b	#4,d0
		add.b	d0,d0
		add.b	d0,d0
		add.b	d0,d1
		move.b	d1,4(a2)
		move.b	#0,$20(a1)
		move.b	#3,$2E(a1)
		move.b	#1,(a2)
		bsr.w	sub_4450A
		moveq	#0,d0
		move.b	$22(a1),d0
		move.l	a2,-(sp)
		jsr	(Tails_Carry_LoadPLC).l
		movea.l	(sp)+,a2

locret_44508:

		rts
; End of function sub_44338


; =============== S U B R O U T I N E =======================================


sub_4450A:

		moveq	#0,d0
		move.b	4(a2),d0
		lsr.b	#3,d0
		move.b	RawAni_44552(pc,d0.w),d1
		move.b	d1,$22(a1)
		andi.w	#$1F,d0
		move.b	byte_44572(pc,d0.w),d1
		ext.w	d1
		add.w	$14(a0),d1
		move.w	d1,$14(a1)
		move.w	#prio(2),8(a1)
		ori.w	#-$8000,$A(a1)
		move.b	4(a2),d0
		bpl.s	loc_4454A
		move.w	#prio(5),8(a1)
		andi.w	#$7FFF,$A(a1)

loc_4454A:
		addq.b	#4,d0
		move.b	d0,4(a2)
		rts
; End of function sub_4450A

; ---------------------------------------------------------------------------
RawAni_44552:	dc.b  $95, $95, $63, $63, $64, $64, $64, $64, $64, $65, $65, $65, $65, $66, $66, $66, $66, $66, $66, $66
		dc.b  $67, $67, $67, $67, $68, $68, $68, $68, $95, $95, $95, $95
byte_44572:	dc.b  $43, $40, $38, $32, $24, $1E, $17, $12,  $E, $EA, $E4, $DC, $D7, $CE, $C6, $C0, $BD, $C0, $C6, $CE
		dc.b  $D7, $DC, $E4, $F0,   0, $10, $17, $1E, $24, $32, $38, $40
; ---------------------------------------------------------------------------

loc_44592:
		move.b	(Level_frame_counter+1).w,d0
		lsr.b	#1,d0
		andi.b	#3,d0
		move.b	d0,$22(a0)
		jmp	loc_1B662.w
; ---------------------------------------------------------------------------
Map_LRZTurbineSprites:	include "Levels/LRZ/Misc Object Data/Map - Turbine.asm"
; ---------------------------------------------------------------------------

Obj_LRZSpikeBallLauncher:
		tst.b	OptionsBits.w		; NAT: Check if alt layout
		bmi.w	loc_44A5A		; if so, delete

		move.l	#Map_LRZSpikeBallLauncher,$C(a0)
		move.w	#$240D,$A(a0)
		ori.b	#4,4(a0)
		move.b	#$10,7(a0)
		move.b	#$10,6(a0)
		move.w	#prio(5),8(a0)
		jsr	Create_New_Sprite3.w
		bne.w	loc_448A2
		move.l	#loc_44954,(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		subi.w	#8,$14(a1)
		move.w	$14(a1),$46(a1)
		move.b	4(a0),4(a1)
		move.l	$C(a0),$C(a1)
		move.w	$A(a0),$A(a1)
		move.w	#prio(5),8(a1)
		move.b	#$10,7(a1)
		move.b	#$10,6(a1)
		move.b	#-$66,$28(a1)
		move.w	a1,$3C(a0)

loc_448A2:
		move.l	#loc_448A8,(a0)

loc_448A8:
		lea	(Ani_LRZSpikeBallLauncher).l,a1
		jsr	Animate_SpriteIrregularDelay.w
		tst.b	5(a0)
		beq.s	loc_448FA
		clr.b	5(a0)
		tst.b	$20(a0)
		bne.s	loc_448D4
		tst.b	4(a0)
		bpl.s	loc_448FA
		moveq	#$53,d0
		jsr	Play_Sound_2.w
		bra.s	loc_448FA
; ---------------------------------------------------------------------------

loc_448D4:
		tst.b	4(a0)
		bpl.s	loc_448E2
		moveq	#$6E,d0
		jsr	Play_Sound_2.w

loc_448E2:
		movea.w	$3C(a0),a1
		move.l	#loc_44916,(a1)
		moveq	#0,d0
		move.b	$2C(a0),d0
		lsl.w	#4,d0
		neg.w	d0
		move.w	d0,$1A(a1)

loc_448FA:

		move.w	#$1B,d1
		move.w	#4,d2
		move.w	#5,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_44916:
		subq.b	#1,$24(a0)
		bpl.s	loc_44934
		move.b	#2,$24(a0)
		addq.b	#1,$22(a0)
		cmpi.b	#3,$22(a0)
		blo.s	loc_44934
		move.b	#0,$22(a0)

loc_44934:

		jsr	MoveSprite.w
		move.w	$46(a0),d0
		cmp.w	$14(a0),d0
		bhs.s	loc_44954
		move.w	d0,$14(a0)
		move.b	#0,$22(a0)
		move.l	#loc_44954,(a0)

loc_44954:

		jmp	loc_1B662.w
; ---------------------------------------------------------------------------
Ani_LRZSpikeBallLauncher:	include "Levels/LRZ/Misc Object Data/Anim - Spike Ball Launcher.asm"

Map_LRZSpikeBallLauncher:include "Levels/LRZ/Misc Object Data/Map - Spike Ball Launcher.asm"

; ---------------------------------------------------------------------------

Obj_LevelIntro_PlayerRun:
		move.w	(Player_1+x_pos).w,d0
		addi.w	#$B0,d0
		move.w	d0,$30(a0)
		move.w	(Player_1+y_pos).w,d0
		move.w	d0,$32(a0)
		move.l	#loc_44A26,(a0)

loc_44A26:
		move.b	#1,(Ctrl_1_locked).w
		move.w	#$800,d0
		move.w	d0,(Ctrl_1_logical).w
		move.b	#1,(Scroll_force_positions).w
		move.w	$30(a0),(Scroll_forced_X_pos).w
		move.w	$32(a0),(Scroll_forced_Y_pos).w
		move.w	(Player_1+x_pos).w,d0
		addi.w	#$10,d0
		cmp.w	$30(a0),d0
		bhs.s	loc_44A56
		rts
; ---------------------------------------------------------------------------

loc_44A56:
		move.b	#0,(Ctrl_1_locked).w
		move.b	#0,(Ctrl_2_locked).w

loc_44A5A:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

Obj_SSZFloatingPlatform:

		move.l	#loc_44AA0,(a0)
		move.b	#4,4(a0)
		move.b	#$11,6(a0)
		move.b	#$20,7(a0)
		move.w	#prio(3),8(a0)
		move.w	#$42D4,$A(a0)
		move.l	#Map_SSZFloatingPlatform,$C(a0)
		move.b	#1,$22(a0)
		move.w	$14(a0),$1A(a0)

loc_44AA0:
		move.w	$2E(a0),d0
		move.b	$2A(a0),d1
		andi.w	#$18,d1
		bne.s	loc_44AB6
		tst.w	d0
		beq.s	loc_44ABE
		subq.w	#1,d0
		bra.s	loc_44ABE
; ---------------------------------------------------------------------------

loc_44AB6:
		cmpi.w	#4,d0
		bhs.s	loc_44ABE
		addq.w	#1,d0

loc_44ABE:

		move.w	d0,$2E(a0)
		add.w	$1A(a0),d0
		move.w	d0,$14(a0)
		moveq	#$2B,d1
		moveq	#$11,d2
		moveq	#$11,d3
		move.w	$10(a0),d4
		jsr	SolidObjectTop.w
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

Obj_SSZCollapsingColumn:

		move.l	#loc_44B30,(a0)
		move.b	#4,4(a0)
		move.b	#1,5(a0)
		move.b	#$21,6(a0)
		move.b	#$10,7(a0)
		move.w	#prio(3),8(a0)
		move.w	#-$1D1C,$A(a0)
		move.l	#Map_SSZFloatingPlatform,$C(a0)
		move.b	#2,$22(a0)
		move.w	$14(a0),$1A(a0)
		jsr	Random_Number.w
		andi.w	#$1FFF,d0
		addi.w	#$800,d0
		move.w	d0,$30(a0)

loc_44B30:
		move.b	$2A(a0),d0
		andi.w	#$18,d0
		beq.s	loc_44B90
		clr.b	5(a0)
		jsr	Create_New_Sprite3.w
		bne.s	loc_44B7E
		lea	word_46618(pc),a2
		move.w	$10(a0),d1
		moveq	#7,d2

loc_44B50:
		move.l	#loc_44BCC,(a1)
		move.w	a0,$2E(a1)
		move.w	(a2)+,d3
		add.w	d1,d3
		move.w	d3,$10(a1)
		move.w	(a2)+,$30(a1)
		move.w	(a2)+,$32(a1)
		move.w	(a2)+,d3
		move.b	d3,$22(a1)
		addq.b	#1,5(a0)
		jsr	(CreateNewSprite4).l
		dbne	d2,loc_44B50

loc_44B7E:
		moveq	#$59,d0
		jsr	Play_Sound_2.w
		clr.b	$22(a0)
		move.l	#loc_44B90,(a0)

loc_44B90:

		tst.b	5(a0)
		beq.s	loc_44B98
		bpl.s	loc_44B9E

loc_44B98:
		move.w	#$7FFF,$10(a0)

loc_44B9E:
		move.l	#$2800,d0
		move.l	#$80,d1
		jsr	Gradual_SwingOffset.w
		add.w	$1A(a0),d0
		move.w	d0,$14(a0)
		moveq	#$1B,d1
		moveq	#$21,d2
		moveq	#$21,d3
		move.w	$10(a0),d4
		jsr	SolidObjectTop.w
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_44BCC:
		move.l	#loc_44BF8,(a0)
		move.b	#-$7C,4(a0)
		move.b	#8,6(a0)
		move.b	#8,7(a0)
		move.w	#prio(4),8(a0)
		move.w	#-$1D1C,$A(a0)
		move.l	#Map_SSZFloatingPlatform,$C(a0)

loc_44BF8:
		movea.w	$2E(a0),a1
		tst.b	4(a0)
		bmi.s	loc_44C14
		tst.w	$32(a0)
		beq.s	loc_44C0E
		bmi.s	loc_44C0E
		subq.b	#1,5(a1)

loc_44C0E:

		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_44C14:
		subq.w	#1,$32(a0)
		bpl.s	loc_44C2C
		move.w	$14(a0),d0
		addi.l	#$3800,$34(a0)
		add.w	$34(a0),d0
		bra.s	loc_44C3A
; ---------------------------------------------------------------------------

loc_44C2C:
		bne.s	loc_44C32
		subq.b	#1,5(a1)

loc_44C32:
		move.w	$14(a1),d0
		add.w	$30(a0),d0

loc_44C3A:
		move.w	d0,$14(a0)
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

Obj_SSZCollapsingBridge:

		move.l	#loc_44C76,(a0)
		bset	#2,4(a0)
		move.b	#$10,6(a0)
		move.b	#$20,7(a0)
		move.w	#prio(3),8(a0)
		move.w	#-$3D0C,$A(a0)
		move.l	#Map_SSZCollapsingBridge,$C(a0)
		bset	#7,$2A(a0)

loc_44C76:
		moveq	#$20,d1
		moveq	#$10,d2
		moveq	#9,d3
		move.w	$10(a0),d4
		jsr	SolidObjectTop.w
		tst.b	$2C(a0)
		bmi.s	loc_44C96
		move.b	$2A(a0),d0
		andi.w	#$18,d0
		bne.s	loc_44C9C

loc_44C96:
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_44C9C:
		lea	(Player_1).w,a1
		btst	#3,d0
		bne.s	loc_44CAA
		lea	(Player_2).w,a1

loc_44CAA:
		moveq	#$18,d1
		moveq	#$10,d2
		move.w	#$102,d3
		move.w	$10(a0),d4
		cmp.w	$10(a1),d4
		scc	$2E(a0)
		bcs.s	loc_44CC6
		neg.w	d1
		neg.w	d2
		ror.w	#8,d3

loc_44CC6:
		add.w	d4,d1
		btst	#0,4(a0)
		beq.s	loc_44CD2
		ror.w	#8,d3

loc_44CD2:
		moveq	#6,d4
		moveq	#3,d5
		jsr	Create_New_Sprite3.w
		bne.s	loc_44D0E

loc_44CDE:
		move.l	#loc_45052,(a1)
		move.b	4(a0),4(a1)
		move.w	d1,$10(a1)
		move.w	$14(a0),$14(a1)
		move.b	d3,$22(a1)
		move.w	d4,$2E(a1)
		sub.w	d2,d1
		ror.w	#8,d3
		addi.w	#6,d4
		jsr	(CreateNewSprite4).l
		dbne	d5,loc_44CDE

loc_44D0E:
		move.l	#loc_44D22,(a0)
		move.w	#6,$30(a0)
		move.w	#$20,$32(a0)
		rts
; ---------------------------------------------------------------------------

loc_44D22:
		subq.w	#1,$30(a0)
		bne.s	loc_44D48
		move.w	#6,$30(a0)
		subq.w	#8,$32(a0)
		bne.s	loc_44D3A
		move.w	#$7FFF,$10(a0)

loc_44D3A:
		moveq	#8,d0
		tst.b	$2E(a0)
		bne.s	loc_44D44
		neg.w	d0

loc_44D44:
		add.w	d0,$10(a0)

loc_44D48:
		move.w	$32(a0),d1
		moveq	#$10,d2
		moveq	#9,d3
		move.w	$10(a0),d4
		jsr	SolidObjectTop.w
		jmp	Delete_Sprite_If_Not_In_Range.w
; ---------------------------------------------------------------------------

Obj_SSZCollapsingBridgeDiagonal:

		move.l	#loc_44D98,(a0)
		ori.b	#$44,4(a0)
		move.b	#$20,6(a0)
		move.b	#$40,7(a0)
		move.w	#prio(3),8(a0)
		move.w	#-$3D0C,$A(a0)
		move.l	#Map_SSZCollapsingBridge,$C(a0)
		move.b	#3,$22(a0)
		bset	#7,$2A(a0)

loc_44D98:
		move.b	$2A(a0),d0
		move.w	d0,-(sp)
		moveq	#$40,d1
		lea	word_46658(pc),a2
		move.w	$10(a0),d4
		jsr	SolidObjectTopSloped2.w
		move.w	(sp)+,d0
		btst	#3,d0
		beq.s	loc_44DCE
		lea	(Player_1).w,a1
		btst	#1,$2A(a1)
		beq.s	loc_44DCE
		tst.b	$40(a1)
		bne.s	loc_44DCE
		bclr	#1,$2A(a1)

loc_44DCE:

		btst	#4,d0
		beq.s	loc_44DEC
		lea	(Player_2).w,a1
		btst	#1,$2A(a1)
		beq.s	loc_44DEC
		tst.b	$40(a1)
		bne.s	loc_44DEC
		bclr	#1,$2A(a1)

loc_44DEC:

		tst.b	$2C(a0)
		bmi.s	loc_44DFC
		move.b	$2A(a0),d0
		andi.w	#$18,d0
		bne.s	loc_44E02

loc_44DFC:
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_44E02:
		lea	(Player_1).w,a1
		btst	#3,d0
		bne.s	loc_44E10
		lea	(Player_2).w,a1

loc_44E10:
		moveq	#$38,d1
		moveq	#$10,d2
		move.w	#$405,d3
		moveq	#-8,d6
		move.w	$10(a0),d4
		cmp.w	$10(a1),d4
		scc	$2E(a0)
		bcs.s	loc_44E30
		neg.w	d1
		neg.w	d2
		ror.w	#8,d3
		neg.l	d6

loc_44E30:
		add.w	d4,d1
		btst	#0,4(a0)
		beq.s	loc_44E3E
		ror.w	#8,d3
		neg.l	d6

loc_44E3E:
		tst.l	d6
		bmi.s	loc_44E44
		addq.l	#8,d6

loc_44E44:
		moveq	#6,d4
		moveq	#7,d5
		swap	d7
		jsr	Create_New_Sprite3.w
		bne.s	loc_44E9C

loc_44E52:
		move.l	#loc_45052,(a1)
		move.b	4(a0),d7
		andi.w	#$BF,d7
		move.b	d7,4(a1)
		move.w	d1,$10(a1)
		move.w	$14(a0),d7
		add.w	d6,d7
		move.w	d7,$14(a1)
		move.b	d3,$22(a1)
		move.w	d4,$2E(a1)
		sub.w	d2,d1
		ror.w	#8,d3
		addi.w	#6,d4
		btst	#0,d5
		bne.s	loc_44E92
		tst.l	d6
		bmi.s	loc_44E90
		subq.w	#8,d6
		bra.s	loc_44E92
; ---------------------------------------------------------------------------

loc_44E90:
		addq.w	#8,d6

loc_44E92:

		jsr	(CreateNewSprite4).l
		dbne	d5,loc_44E52

loc_44E9C:
		swap	d7
		move.l	#loc_44EBA,(a0)
		move.w	#6,$30(a0)
		move.w	#$40,$32(a0)
		move.l	#word_46658,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_44EBA:
		subq.w	#1,$30(a0)
		bne.s	loc_44EF6
		move.w	#6,$30(a0)
		addq.l	#4,$34(a0)
		subq.w	#8,$32(a0)
		bne.s	loc_44ED6
		move.w	#$7FFF,$10(a0)

loc_44ED6:
		moveq	#8,d0
		moveq	#2,d1
		tst.b	$2E(a0)
		bne.s	loc_44EE4
		neg.w	d0
		neg.w	d1

loc_44EE4:
		add.w	d0,$10(a0)
		btst	#0,4(a0)
		beq.s	loc_44EF2
		neg.w	d1

loc_44EF2:
		sub.w	d1,$14(a0)

loc_44EF6:
		move.b	$2A(a0),d0
		move.w	d0,-(sp)
		move.w	$32(a0),d1
		movea.l	$34(a0),a2
		move.w	$10(a0),d4
		jsr	SolidObjectTopSloped2.w
		move.w	(sp)+,d0
		btst	#3,d0
		beq.s	loc_44F2E
		lea	(Player_1).w,a1
		btst	#1,$2A(a1)
		beq.s	loc_44F2E
		tst.b	$40(a1)
		bne.s	loc_44F2E
		bclr	#1,$2A(a1)

loc_44F2E:

		btst	#4,d0
		beq.s	loc_44F4C
		lea	(Player_2).w,a1
		btst	#1,$2A(a1)
		beq.s	loc_44F4C
		tst.b	$40(a1)
		bne.s	loc_44F4C
		bclr	#1,$2A(a1)

loc_44F4C:

		jmp	Delete_Sprite_If_Not_In_Range.w
; ---------------------------------------------------------------------------

Obj_77_2:
		move.b	#$44,4(a0)
		move.b	#$10,6(a0)
		move.b	#$60,7(a0)
		move.w	#prio(3),8(a0)
		move.w	#-$3D0C,$A(a0)
		move.l	#Map_SSZCollapsingBridge,$C(a0)
		move.w	$10(a0),$12(a0)
		move.w	#3,$16(a0)
		bset	#7,$2A(a0)
		move.w	#$C0,$2E(a0)
		lea	loc_44FA2(pc),a1
		tst.b	(Last_star_post_hit).w
		beq.s	loc_44F9E
		lea	loc_4501A(pc),a1

loc_44F9E:
		move.l	a1,(a0)
		jmp	(a1)
; ---------------------------------------------------------------------------

loc_44FA2:
		move.w	$2E(a0),d1
		tst.w	(ScrEvents_6).w
		beq.s	loc_45006
		cmpi.w	#$68,d1
		bne.s	loc_44FBA
		moveq	#-$71,d0
		jsr	Play_Sound_2.w

loc_44FBA:
		subq.w	#2,d1
		move.w	d1,$2E(a0)
		bne.s	loc_45006
		clr.b	(ScrEvents_4+$1).w
		clr.w	(Camera_min_X_pos).w
		move.w	#$19A0,(Camera_max_X_pos).w
		move.w	#-$100,(Camera_min_Y_pos).w
		move.w	#$1000,d0
		move.w	d0,(Camera_max_Y_pos).w
		move.w	d0,(Camera_target_max_Y_pos).w
	;	move.w	#$140,(Saved_X_pos).w
	;	move.w	#$C6C,(Saved_Y_pos).w
		move.b	#1,(Last_star_post_hit).w
	;	jsr	(Save_Level_Data).l
	;	clr.l	(Saved_timer).w
		moveq	#0,d1
		move.l	#loc_4501A,(a0)

loc_45006:

		add.w	$12(a0),d1
		move.w	$10(a0),d4
		move.w	d1,$10(a0)
		bsr.s	sub_45026
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_4501A:

		move.w	$10(a0),d4
		bsr.s	sub_45026
		jmp	Sprite_OnScreen_Test.w

; =============== S U B R O U T I N E =======================================


sub_45026:

		moveq	#$60,d1
		moveq	#$10,d2

loc_4502A:
		moveq	#9,d3
		jsr	SolidObjectTop.w
		lea	$18(a0),a1
		move.w	$10(a0),d0
		subi.w	#$40,d0
		moveq	#2,d1

loc_45040:
		move.w	d0,(a1)+
		move.w	$14(a0),(a1)+
		addq.w	#2,a1
		addi.w	#$40,d0

loc_4504C:
		dbf	d1,loc_45040
		rts
; End of function sub_45026

; ---------------------------------------------------------------------------

loc_45052:

		move.l	#loc_4507E,(a0)
		bset	#7,4(a0)

loc_4505E:
		move.b	#$10,6(a0)
		move.b	#8,7(a0)
		move.w	#prio(4),8(a0)
		move.w	#-$3D0C,$A(a0)
		move.l	#Map_SSZCollapsingBridge,$C(a0)

loc_4507E:
		tst.b	4(a0)
		bmi.s	loc_4508A
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_4508A:
		move.w	$2E(a0),d0
		beq.s	loc_45098
		subq.w	#1,d0
		move.w	d0,$2E(a0)
		bra.s	loc_4509E
; ---------------------------------------------------------------------------

loc_45098:
		jsr	MoveSprite.w

loc_4509E:
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

Obj_SSZBouncyCloud:

		move.l	#loc_450EC,(a0)
		move.b	#4,4(a0)
		move.b	#$10,6(a0)
		move.b	#$20,7(a0)
		move.w	#prio(1),8(a0)
		move.w	#-$1C2A,$A(a0)
		move.l	#Map_SSZBouncyCloud,$C(a0)
		clr.b	$2D(a0)
		move.w	$14(a0),$1A(a0)
		jsr	Random_Number.w
		andi.w	#$FFF,d0
		addi.w	#$C00,d0
		move.w	d0,$30(a0)

loc_450EC:
		move.l	#$1C00,d0
		move.l	#$80,d1
		jsr	Gradual_SwingOffset.w
		add.w	$1A(a0),d0
		move.b	$3E(a0),d1
		move.b	$46(a0),d2
		move.b	d1,d3
		or.b	d2,d3
		beq.s	loc_4511A
		cmp.b	d2,d1
		bhs.s	loc_45114
		exg	d1,d2

loc_45114:
		ext.w	d1
		add.w	d1,d0
		bra.s	loc_45134
; ---------------------------------------------------------------------------

loc_4511A:
		move.b	$39(a0),d1
		move.b	$3F(a0),d2
		move.b	$41(a0),d3
		move.b	$47(a0),d4
		cmp.b	d3,d1
		bhs.s	loc_45130
		exg	d2,d4

loc_45130:
		ext.w	d2
		add.w	d2,d0

loc_45134:
		move.w	d0,$14(a0)
		tst.b	5(a0)
		beq.s	loc_45142
		subq.b	#1,5(a0)

loc_45142:
		move.b	$2D(a0),$20(a0)
		lea	(Player_1).w,a1
		lea	$38(a0),a2
		moveq	#3,d6
		bsr.s	sub_45170
		lea	(Player_2).w,a1
		lea	$40(a0),a2
		moveq	#4,d6
		bsr.s	sub_45170
		lea	Ani_SSZBouncyCloud(pc),a1
		jsr	Animate_Sprite.w
		jmp	Sprite_OnScreen_Test.w

; =============== S U B R O U T I N E =======================================


sub_45170:
		tst.b	(End_Of_Level_Flag).w		; NAT: Check for end-of-level
		bne.w	loc_452D6		; if so, release player

		moveq	#$20,d1
		moveq	#$10,d2
		moveq	#0,d3
		move.w	$10(a0),d4
		jsr	sub_1E2BC.w
		tst.b	(a2)
		bne.s	loc_451C2
		btst	d6,$2A(a0)
		beq.s	locret_451C0
		move.w	$18(a1),2(a2)
		move.w	$1C(a1),4(a2)
		clr.w	$18(a1)
		clr.w	$1C(a1)
		move.b	#1,$20(a0)
		move.b	#1,$2D(a0)
		move.b	5(a0),d0
		bne.s	loc_451B6
		moveq	#7,d0
		move.b	d0,5(a0)

loc_451B6:
		move.b	d0,(a2)
		move.b	(byte_4669F).l,6(a2)

locret_451C0:
		rts
; ---------------------------------------------------------------------------

loc_451C2:
		bmi.w	loc_4527A
		subq.b	#1,(a2)
		beq.s	loc_451DC
		move.b	(a2),d0
		ext.w	d0
		lea	byte_46698(pc),a3
		move.b	(a3,d0.w),6(a2)
		rts
; ---------------------------------------------------------------------------

loc_451DC:
		moveq	#-$76,d0
		jsr	Play_Sound_2.w
		move.w	2(a2),$18(a1)
		move.w	4(a2),$1C(a1)
		move.w	#-$700,$1A(a1)
		bset	#1,$2A(a1)
		bclr	#3,$2A(a1)
		clr.b	$40(a1)
		clr.b	$3D(a1)
		move.b	#2,5(a1)
		clr.b	$20(a1)
		st	(a2)
		moveq	#-$1C,d0
		btst	#0,$2A(a1)
		bne.s	loc_45226
		neg.w	d0
		bclr	#0,(a2)

loc_45226:
		move.b	d0,$26(a1)
		clr.b	$2D(a0)
		clr.b	6(a2)
		move.b	#$26,1(a2)
		lea	word_466C8(pc),a3
		move.w	$10(a1),d1
		jsr	Create_New_Sprite3.w
		bne.s	locret_45278
		moveq	#3,d2

loc_4524A:
		move.l	#loc_452DA,(a1)
		move.w	a0,$2E(a1)
		move.w	(a3)+,d3
		add.w	d1,d3
		move.w	d3,$10(a1)
		move.w	(a3)+,d3
		add.w	$14(a0),d3

loc_45262:
		move.w	d3,$14(a1)
		move.w	(a3)+,$18(a1)
		move.w	(a3)+,$1A(a1)

loc_4526E:
		jsr	(CreateNewSprite4).l
		dbne	d2,loc_4524A

locret_45278:

		rts
; ---------------------------------------------------------------------------

loc_4527A:
		tst.b	$2E(a1)
		bne.s	loc_452D6
		move.b	$2A(a1),d0
		btst	#1,d0
		beq.s	loc_452D6
		andi.w	#$28,d0
		bne.s	loc_452D6
		move.b	1(a2),d0
		ext.w	d0
		lea	byte_466A0(pc),a3
		move.b	(a3,d0.w),7(a2)
		subq.b	#1,d0
		bmi.s	loc_452A8
		move.b	d0,1(a2)

loc_452A8:
		move.b	$26(a1),d0
		move.l	#$60002,d1
		btst	#0,(a2)
		bne.s	loc_452C4
		tst.b	d0
		bmi.s	loc_452BE
		swap	d1

loc_452BE:
		add.b	d1,d0
		bcc.s	loc_452D0
		bra.s	loc_452CE
; ---------------------------------------------------------------------------

loc_452C4:
		tst.b	d0
		bpl.s	loc_452CA
		swap	d1

loc_452CA:
		sub.b	d1,d0
		bcc.s	loc_452D0

loc_452CE:
		moveq	#0,d0

loc_452D0:

		move.b	d0,$26(a1)
		bne.s	locret_452D8

loc_452D6:

		clr.b	(a2)

locret_452D8:
		rts
; End of function sub_45170

; ---------------------------------------------------------------------------

loc_452DA:
		movea.w	$2E(a0),a1
		move.w	$10(a1),d0
		tst.w	$18(a0)
		bpl.s	loc_452F4
		subi.w	#$18,d0
		cmp.w	$10(a0),d0
		bls.s	loc_45304
		bra.s	loc_452FE
; ---------------------------------------------------------------------------

loc_452F4:
		addi.w	#$18,d0
		cmp.w	$10(a0),d0
		bhs.s	loc_45304

loc_452FE:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_45304:

		move.l	#loc_45336,(a0)
		move.b	#4,4(a0)
		move.b	#4,6(a0)
		move.b	#4,7(a0)
		move.w	#prio(1),8(a0)
		move.w	#-$1C2A,$A(a0)
		move.l	#Map_SSZBouncyCloud,$C(a0)
		move.b	#2,$20(a0)

loc_45336:
		lea	Ani_SSZBouncyCloud(pc),a1
		jsr	Animate_SpriteIrregularDelay.w
		tst.b	5(a0)
		beq.s	loc_4534C
		move.l	#Delete_Current_Sprite,(a0)

loc_4534C:
		jsr	MoveSprite2.w
		lea	$18(a0),a1
		bsr.s	sub_45364
		lea	$1A(a0),a1
		bsr.s	sub_45364
		jmp	Draw_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_45364:

		move.w	(a1),d0
		asr.w	#2,d0
		sub.w	d0,(a1)
		rts
; End of function sub_45364

; ---------------------------------------------------------------------------

Obj_SSZElevatorBar:

		move.l	#loc_4539E,(a0)
		move.b	#4,4(a0)
		move.b	#4,6(a0)
		move.b	#$30,7(a0)
		move.w	#prio(3),8(a0)
		move.w	#$4348,$A(a0)
		move.l	#Map_SSZElevatorBar,$C(a0)
		move.w	$14(a0),$1A(a0)

loc_4539E:
		move.l	#$18000,d0
		move.l	#$480,d1
		jsr	Gradual_SwingOffset.w
		add.w	$1A(a0),d0
		move.w	d0,$14(a0)
		lea	(Player_1).w,a1
		lea	$38(a0),a2
		move.w	(Ctrl_1_logical).w,d0
		moveq	#$14,d1
		cmpi.w	#2,(Player_mode).w
		bne.s	loc_453CE
		moveq	#$11,d1

loc_453CE:
		bsr.s	sub_453E6
		lea	(Player_2).w,a1
		lea	$39(a0),a2
		move.w	(Ctrl_2_logical).w,d0
		moveq	#$11,d1
		bsr.s	sub_453E6
		jmp	Sprite_OnScreen_Test.w

; =============== S U B R O U T I N E =======================================


sub_453E6:

		tst.b	(a2)
		bne.w	loc_4548A
		tst.b	2(a2)
		beq.s	loc_45400
		subq.b	#1,2(a2)
		bne.w	locret_45526
		move.w	#prio(3),8(a0)

loc_45400:
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		addi.w	#$28,d0
		cmpi.w	#$50,d0
		bhs.w	locret_45526
		move.w	$14(a1),d0
		sub.w	$14(a0),d0
		cmpi.w	#$18,d0
		bhs.w	locret_45526
		tst.b	$2E(a1)
		bne.w	locret_45526
		cmpi.b	#4,5(a1)
		bhs.w	locret_45526
		tst.b	(Debug_On).w
		bne.w	locret_45526
		moveq	#$4A,d0
		jsr	Play_Sound_2.w
		st	(a2)
		move.w	$14(a0),$14(a1)
		add.w	d1,$14(a1)
		clr.w	$18(a1)
		clr.w	$1C(a1)
		clr.b	$3D(a1)
		move.b	#3,$2E(a1)
		andi.b	#-4,4(a1)
		clr.b	$20(a1)
		move.w	#$E5,d0
		btst	#0,$2A(a1)
		beq.s	loc_4547C
		addq.w	#4,d0

loc_4547C:
		move.b	d0,$22(a1)
		jsr	(Tails_Carry_LoadPLC).l
		bra.w	locret_45526
; ---------------------------------------------------------------------------

loc_4548A:
		move.w	$14(a0),$14(a1)
		add.w	d1,$14(a1)
		cmpi.b	#4,5(a1)
		blo.s	loc_454AA
		clr.b	$2E(a1)
		clr.b	(a2)
		move.b	#$3C,2(a2)

locret_45526:
		rts
; ---------------------------------------------------------------------------

loc_454AA:
		move.w	d0,d1
		andi.b	#$70,d1
		beq.s	locret_45526
		clr.b	$2E(a1)
		clr.b	(a2)
		move.b	#$1E,2(a2)
		move.w	#prio(1),8(a0)
		move.w	#-$200,d1
		move.w	#-$400,d2
		btst	#$A,d0
		bne.s	loc_454EA
		move.w	#prio(3),8(a0)
		neg.w	d1
		btst	#$B,d0
		bne.s	loc_454EA
		moveq	#0,d1
		btst	#9,d0
		beq.s	loc_454EA
		moveq	#0,d2

loc_454EA:

		move.w	d1,$18(a1)
		move.l	$2E(a0),d0
		asr.l	#8,d0
		add.w	d2,d0
		move.w	d0,$1A(a1)
		bset	#1,$2A(a1)
		move.b	#1,$40(a1)
		move.b	#$E,$1E(a1)
		move.b	#7,$1F(a1)
		move.b	#2,$20(a1)
		bset	#2,$2A(a1)
		moveq	#$62,d0
		jmp	Play_Sound_2.w
; End of function sub_453E6

; ---------------------------------------------------------------------------

Obj_SSZHPZTeleporter:

		move.l	#loc_455CC,(a0)
		move.b	#4,4(a0)
		move.b	#$10,6(a0)
		move.b	#$18,7(a0)
		move.w	#prio(3),8(a0)
		move.w	#$35C,$A(a0)
		move.l	#Map_SSZHPZTeleporter,$C(a0)
		move.w	$14(a0),$16(a0)
		move.b	$2C(a0),d0
		bpl.s	loc_45574
		lea	(ScrEvents_Routine2).w,a1
		add.b	d0,d0
		bpl.s	loc_4556A
		addq.w	#2,a1

loc_4556A:
		tst.b	(a1)
		bmi.s	loc_45574
		move.w	#$20,$1A(a0)

loc_45574:

		cmpi.w	#$1701,(Current_zone_and_act).w
		beq.s	loc_455AC
		cmpi.b	#$16,(Current_zone).w
		bne.s	loc_455BA
		jsr	Create_New_Sprite3.w
		bne.s	loc_45596
		move.l	#loc_45B94,(a1)
		move.w	a0,$2E(a1)

loc_45596:
		move.w	#$52E,$A(a0)
		cmpi.w	#3,(Player_mode).w
		bne.s	loc_455B2
		move.b	#$4A,$2C(a0)
		bra.s	loc_455B2
; ---------------------------------------------------------------------------

loc_455AC:
		move.w	#$488,$A(a0)

loc_455B2:

		move.b	#$A,$22(a0)
		bra.s	loc_455CC
; ---------------------------------------------------------------------------

loc_455BA:
		cmpi.w	#$1A00,$10(a0)
		blo.s	loc_455CC
		cmpi.w	#$680,$14(a0)
		blo.w	loc_45A66

loc_455CC:


		cmpi.b	#$16,(Current_zone).w
		bne.s	loc_455F8
		tst.b	4(a0)
		bpl.s	loc_455EE
		tst.b	$38(a0)
		bne.s	loc_455F8
		move.l	#$40C0408,(Normal_palette_line_4+$2).w
		st	(PalCyc_Counters2).w
		bra.s	loc_455F8
; ---------------------------------------------------------------------------

loc_455EE:
		tst.b	$38(a0)
		bne.s	loc_455F8
		clr.b	(PalCyc_Counters2).w

loc_455F8:

		move.w	$16(a0),d0
		add.w	$1A(a0),d0
		move.w	d0,$14(a0)
		jsr	sub_45866(pc)
		tst.b	$2C(a0)
		bne.s	loc_45616
		tst.b	(ScrEvents_4).w
		bne.w	loc_456EE

loc_45616:
		tst.w	$1A(a0)
		bne.s	loc_4562C
		moveq	#$23,d1
		lea	byte_466E8(pc),a2
		move.w	$10(a0),d4
		jsr	SolidObjectTopSloped2.w

loc_4562C:
		lea	(ScrEvents_Routine2).w,a1
		move.b	$2C(a0),d0
		beq.w	loc_456EE
		bpl.s	loc_45660
		add.b	d0,d0
		bpl.s	loc_45640
		addq.w	#2,a1

loc_45640:
		tst.b	(a1)
		bpl.w	loc_456EE
		tst.w	$1A(a0)
		beq.s	loc_45660
		move.w	(Level_frame_counter).w,d0
		andi.w	#3,d0
		bne.w	loc_456EE
		subq.w	#1,$1A(a0)
		bra.w	loc_456EE
; ---------------------------------------------------------------------------

loc_45660:
		lea	(Player_1).w,a2		; NAT: Old and new changes
		lea	$46(a0),a3
		btst	#3,$2A(a0)
		bne.s	.player
		lea	(Player_2).w,a2
		addq.w	#1,a3
		btst	#4,$2A(a0)
		beq.w	loc_456EE

.player		move.w	$10(a2),d0
		sub.w	$10(a0),d0
		addi.w	#$C,d0
		cmpi.w	#$18,d0
		bhs.s	loc_456EE
		tst.b	$2E(a2)
		bne.w	loc_456EE
		cmpi.b	#4,5(a2)
		bhs.w	loc_456EE
		tst.b	(Debug_On).w
		bne.w	loc_456EE
		st	(a3)		; NAT: Set as riding
		clr.l	PlayerSpawn.w	; NAT: Fix HTZ boss sometimes leaving respawn position on

		jsr	Create_New_Sprite3.w
		bne.s	loc_456EE
		move.w	a1,$3C(a0)
		move.l	#Obj_TeleporterBeam,(a1)
		move.w	a0,parent2(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		bsr.s	Obj_Teleporter_SetPl
		move.l	#loc_456F4,(a0)
		move.w	#-$100,$38(a0)
		moveq	#$53,d0
		jsr	Play_Sound_2.w

loc_456EE:
		jmp	Sprite_OnScreen_Test.w

Obj_Teleporter_SetPl:
		clr.w	$18(a2)
		clr.w	$1C(a2)
		move.w	#-1,$1A(a2)
		clr.b	$3D(a2)
		move.b	#1,$2E(a2)
		move.b	#5,$20(a2)
		rts
; ---------------------------------------------------------------------------

loc_456F4:
		jsr	sub_45856(pc)

	; NAT: Check if we should add tails to the object
		lea	(Player_1).w,a2
		lea	$46(a0),a3
		moveq	#3,d0
		tst.b	(a3)			; NAT: Check if added already
		beq.s	.doit			; if not, do it

		lea	(Player_2).w,a2
		addq.w	#1,a3
		moveq	#4,d0
		tst.b	(a3)			; NAT: Check if added already
		bne.s	.notdo			; if yes, skip

.doit		btst	d0,$2A(a0)		; check if walking on this obj
		beq.s	.notdo			; if not, branch

	; check middle collision
		move.w	$10(a2),d0
		sub.w	$10(a0),d0
		addi.w	#$C,d0
		cmpi.w	#$18,d0
		bhs.s	.notdo
		bsr.s	Obj_Teleporter_SetPl	;
		st	(a3)			; set riding

.notdo	;	move.w	$46(a0),a1
		movea.w	$3C(a0),a2
		cmpi.b	#8,$46(a2)
		blt.w	loc_457B8
		beq.w	loc_457A2
		cmpi.b	#$18,$46(a2)
		bhs.s	loc_45744
		btst	#0,(Level_frame_counter+1).w
		beq.w	loc_457B8

		lea	.incy(pc),a3		; NAT: Call this code
		jsr	Obj_Teleport_RunBoth(pc); NAT: Run both players

		btst	#1,(Level_frame_counter+1).w
		beq.w	loc_457B8

		lea	.alignX(pc),a3		; NAT: Call this code
		jsr	Obj_Teleport_RunBoth(pc); NAT: Run both players
		bra.w	loc_457B8

.incy		subq.w	#1,$14(a1)
		rts

.alignX		moveq	#1,d1
		move.w	$10(a1),d0
		cmp.w	$10(a0),d0
		beq.w	loc_457B8
		bcs.s	loc_4573E
		neg.w	d1

loc_4573E:
		add.w	d1,$10(a1)
		rts
; ---------------------------------------------------------------------------

loc_45744:
		move.l	#loc_457BE,(a0)
		move.b	$2C(a0),d0
		cmpi.b	#$16,(Current_zone).w
		beq.s	loc_4575A
		andi.w	#$3F,d0

loc_4575A:
		move.b	d0,$2D(a0)
		moveq	#0,d0
		lea	.setshit(pc),a3		; NAT: Call this code
		jsr	Obj_Teleport_RunBoth(pc); NAT: Run both players

		tst.w	$46(a0)			; check if both players are out
		beq.s	loc_457B8		; if so, branch

		cmpi.b	#$16,(Current_zone).w
		bne.s	loc_4577E
		move.w	#$AA0,(Camera_min_X_pos).w
		bra.s	loc_45790

.setshit	move.b	#3,$2E(a1)
		move.b	d0,$20(a1)
		move.b	d0,$22(a1)
		rts
; ---------------------------------------------------------------------------

loc_4577E:
		move.w	#-$100,(Camera_min_Y_pos).w
		move.w	#$1000,d0
		move.w	d0,(Camera_max_Y_pos).w
		move.w	d0,(Camera_target_max_Y_pos).w

loc_45790:
		clr.b	(ScrEvents_4+$1).w
		moveq	#$73,d0
		jsr	Play_Sound_2.w
		st	(Scroll_lock).w
		bra.s	loc_457B8
; ---------------------------------------------------------------------------

loc_457A2:
		lea	Obj_Teleport_SetShit2(pc),a3; NAT: Call this code
		jsr	Obj_Teleport_RunBoth(pc); NAT: Run both players
		st	(ScrEvents_4).w

loc_457B8:
		jmp	Draw_Sprite.w

Obj_Teleport_SetShit2:
		bclr	#3,$2A(a1)
		bset	#2,$2A(a1)
		move.b	#2,$20(a1)
		rts
; ---------------------------------------------------------------------------

Obj_Teleport_RunBoth:
		lea	(Player_1).w,a1
		lea	$46(a0),a4		; get Sonic stick byte
		tst.b	(a4)+			; NAT: Check if added
		beq.s	.tails			; if not, skip

		cmp.b	#6,routine(a1)		; NAT: Check if not dead
		blo.s	.run			; if not, branch
		clr.b	-1(a4)			; no stick no moar
		bclr	#3,status(a0)		;
		bra.s	.tails
.run		jsr	(a3)			; run code

.tails		lea	(Player_2).w,a1
		tst.b	(a4)			; NAT: Check if added
		beq.s	.rts			; if not, skip

		cmp.b	#6,routine(a1)		; NAT: Check if not dead
		blo.s	.run2			; if not, branch
		clr.b	(a4)			; no stick no moar
		bclr	#4,status(a0)		;
.rts		rts
.run2		jmp	(a3)			; run code
; ---------------------------------------------------------------------------

loc_457BE:
		jsr	sub_45856(pc)
	;	move.w	$46(a0),a1
		tst.b	$2D(a0)
		bne.s	loc_45804

		lea	.fixshit(pc),a3		; NAT: Call this code
		jsr	Obj_Teleport_RunBoth(pc); NAT: Run both players

		clr.l	$2E(a0)
		clr.l	$32(a0)
		clr.b	$36(a0)
		clr.b	(Scroll_lock).w
		movea.w	$3C(a0),a1
		st	5(a1)
		move.l	#loc_4581C,(a0)
.rts		rts

.fixshit	move.b	#1,$2E(a1)
		move.b	#2,$20(a1)
		bset	#2,$2A(a1)
		move.w	$14(a1),$3E(a0)
		rts
; ---------------------------------------------------------------------------

loc_45804:
		lea	Obj_Teleport_MoveUp(pc),a3; NAT: Call this code
		jsr	Obj_Teleport_RunBoth(pc); NAT: Run both players
		subq.b	#1,$2D(a0)
		beq.s	loc_45816
		tst.w	$46(a0)			; check if both players are out
		bne.s	.move			; if not, branch
		clr.b	(Scroll_lock).w
		bra.s	loc_45816

.move		subi.w	#$10,(Camera_Y_pos).w

loc_45816:
		jmp	Draw_Sprite.w

Obj_Teleport_MoveUp:
		subi.w	#$10,$14(a1)
		rts
; ---------------------------------------------------------------------------

loc_4581C:
		jsr	sub_45856(pc)
		move.w	$46(a0),a1
		move.l	#$20000,d0
		move.l	#$800,d1
		jsr	Gradual_SwingOffset.w
		add.w	$3E(a0),d0

		lea	.sety(pc),a3		; NAT: Call this code
		jsr	Obj_Teleport_RunBoth(pc); NAT: Run both players
		tst.l	$2E(a0)
		bmi.s	.rts
		lea	.freeobj(pc),a3		; NAT: Call this code
		jsr	Obj_Teleport_RunBoth(pc); NAT: Run both players

		clr.b	(ScrEvents_4).w
		clr.w	$46(a0)			; NAT: Clear data
		move.l	#loc_455CC,(a0)
.rts		rts

.sety		move.w	d0,$14(a1)
		rts

.freeobj	clr.b	$2E(a1)
		clr.b	$20(a1)
		rts

; =============== S U B R O U T I N E =======================================


sub_45856:

		moveq	#$23,d1
		lea	byte_466E8(pc),a2
		move.w	$10(a0),d4
		jsr	SolidObjectTopSloped2.w
; End of function sub_45856


; =============== S U B R O U T I N E =======================================


sub_45866:

		tst.b	$39(a0)
		beq.s	loc_45872
		subq.b	#1,$39(a0)
		bra.s	locret_458B2
; ---------------------------------------------------------------------------

loc_45872:
		move.b	#3,$39(a0)
		move.w	$3A(a0),d0
		bne.s	loc_45884
		tst.b	$38(a0)
		beq.s	locret_458B2

loc_45884:
		addq.w	#4,d0
		cmpi.w	#$28,d0
		blo.s	loc_4588E
		moveq	#0,d0

loc_4588E:
		move.w	d0,$3A(a0)
		lea	word_4670C(pc),a1
		cmpi.b	#$A,(Current_zone).w
		bne.s	loc_458A6
		move.l	(a1,d0.w),(Normal_palette_line_3+$18).w
		bra.s	locret_458B2
; ---------------------------------------------------------------------------

loc_458A6:
		move.w	2(a1,d0.w),(Normal_palette_line_4+$2).w
		move.w	(a1,d0.w),(Normal_palette_line_4+$4).w

locret_458B2:

		rts
; End of function sub_45866

; ---------------------------------------------------------------------------

Obj_TeleporterBeam:

		move.l	#Obj_TeleporterBeamSpawn,(a0)
		move.b	#$44,4(a0)		; Multisprite mode
		move.b	#-$80,6(a0)
		move.b	#$18,7(a0)
		move.w	#prio(1),8(a0)
		move.w	#-$1CA4,$A(a0)
		move.l	#Map_SSZHPZTeleporter,$C(a0)
		move.w	#1,$16(a0)
		move.w	$14(a0),$44(a0)
		subi.w	#$88,$44(a0)
		move.b	#$10,$47(a0)	; Wait 16 frames
		cmpi.b	#3,(Current_zone).w
		bne.s	loc_45908
		move.w	#$24EE,$A(a0)	; If in CNZ, use this VRAM offset
		bra.s	Obj_TeleporterBeamSpawn
; ---------------------------------------------------------------------------

loc_45908:
		cmpi.b	#$16,(Current_zone).w
		bne.s	Obj_TeleporterBeamSpawn
		move.w	#$652E,$A(a0)	; If in HPZ, use this VRAM offset

Obj_TeleporterBeamSpawn:


		tst.b	$47(a0)
		beq.s	loc_45922
		subq.b	#1,$47(a0)
		bra.s	locret_45990
; ---------------------------------------------------------------------------

loc_45922:
		btst	#0,(Level_frame_counter+1).w
		beq.s	locret_45990		; Do a flickering effect
		lea	$18(a0),a1			; Sprite attribute table to a1
		move.w	$14(a0),d0
		move.w	$16(a0),d1
		subq.w	#1,d1

loc_45938:
		move.w	$10(a0),(a1)	; Same X coordinate for all sprites
		move.w	d0,2(a1)		; Different Y coordinate offset from base
		tst.w	d1
		bne.s	loc_45960
		eori.b	#-1,$46(a0)		; If the last listed sprite
		beq.s	loc_45954
		move.b	#1,5(a1)		; Use mapping 1 on the first frame
		bra.s	loc_4596C
; ---------------------------------------------------------------------------

loc_45954:
		move.b	#2,5(a1)		; Mapping 2 on the second frame + add new sprite
		addq.w	#1,$16(a0)
		bra.s	loc_4596C
; ---------------------------------------------------------------------------

loc_45960:
		move.b	#2,5(a1)
		subi.w	#$20,d0
		addq.w	#6,a1

loc_4596C:

		dbf	d1,loc_45938
		cmpi.w	#7,$16(a0)
		blo.s	loc_4598A
		tst.b	$46(a0)			; When seven sprites have been made, test $46
		bne.s	loc_4598A
		move.l	#Obj_TeleporterBeamWait,(a0)	; When last sprite uses mapping frame 2, go to next phase
		move.b	#$10,$47(a0)

loc_4598A:

		jsr	Draw_Sprite.w

locret_45990:

		rts
; ---------------------------------------------------------------------------

Obj_TeleporterBeamWait:
		subq.b	#1,$47(a0)
		beq.s	loc_459A8
		btst	#0,(Level_frame_counter+1).w
		beq.s	locret_459A6
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

locret_459A6:
		rts
; ---------------------------------------------------------------------------

loc_459A8:
		move.l	#Obj_TeleporterBeamExpand,(a0)
		move.w	#2,$16(a0)			; Use two large sprites for the beam

Obj_TeleporterBeamExpand:

		btst	#0,(Level_frame_counter+1).w
		beq.w	locret_45A64
		move.w	$44(a0),d0
		move.w	d0,d1
		sub.w	(Camera_Y_pos).w,d1
		cmpi.w	#$68,d1
		ble.s	loc_459D6
		move.w	(Camera_Y_pos).w,d0
		addi.w	#$68,d0			; Ensure that object base Y is always centered or above the screen

loc_459D6:
		move.w	d0,$14(a0)
		move.w	$10(a0),d1
		moveq	#0,d2
		move.b	$46(a0),d2		; $46 should be 0 starting out
		move.w	d2,d3
		cmpi.w	#$12,d2			; Maximum of $12
		blo.s	loc_459EE
		moveq	#$12,d2

loc_459EE:
		addq.w	#6,d2
		lsl.w	#3,d3
		lea	word_46734(pc),a1		; Use if in SSZ or HPZ
		cmpi.b	#$A,(Current_zone).w
		beq.s	loc_45A0A
		cmpi.b	#$16,(Current_zone).w
		beq.s	loc_45A0A
		lea	word_467FC(pc),a1		; Use if anywhere else

loc_45A0A:

		adda.w	d3,a1
		lea	$18(a0),a2
		move.w	d1,(a2)
		sub.w	d2,(a2)+
		move.w	(a1)+,(a2)
		add.w	d0,(a2)+
		move.w	(a1)+,(a2)+
		move.w	d1,(a2)
		add.w	d2,(a2)+
		move.w	(a1)+,(a2)
		add.w	d0,(a2)+
		move.w	(a1)+,(a2)+
		tst.b	5(a0)
		beq.s	loc_45A4A
		subq.b	#1,$46(a0)		; Contract beam
		bpl.s	loc_45A5E		; Branch if beam is still in effect
		move.b	#9,$22(a0)		; Change main mapping
		clr.w	$16(a0)			; No more sprites
		move.l	#Delete_Current_Sprite,(a0)		; Delete object
		movea.w	parent2(a0),a1
		clr.b	$38(a1)			; Set flag to parent indicating completion
		bra.s	loc_45A5E
; ---------------------------------------------------------------------------

loc_45A4A:
		btst	#1,(Level_frame_counter+1).w
		beq.s	loc_45A5E
		cmpi.b	#$18,$46(a0)
		bhs.s	loc_45A5E
		addq.b	#1,$46(a0)		; Expand beam

loc_45A5E:

		jsr	Draw_Sprite.w

locret_45A64:
		rts
; ---------------------------------------------------------------------------

loc_45A66:
		move.l	#loc_45A72,(a0)
		addi.w	#$8000,$A(a0)

loc_45A72:
		tst.w	$32(a0)
		beq.s	loc_45A84
		subq.w	#1,$32(a0)
		bne.s	loc_45AD0
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_45A84:
		tst.w	$2E(a0)
		bne.s	loc_45AB0
		move.w	(Camera_Y_pos).w,d0
		cmp.w	(Camera_max_Y_pos).w,d0
		bne.s	loc_45AD0
		jsr	Create_New_Sprite.w
		bne.s	loc_45AAE
		move.l	#Obj_A3_2,(a1)
		move.w	a1,(__u_FAA4).w
		move.w	a1,$30(a0)
		st	$2E(a0)

loc_45AAE:
		bra.s	loc_45AD0
; ---------------------------------------------------------------------------

loc_45AB0:
		movea.w	$30(a0),a1
		move.w	$10(a1),d0
		cmp.w	$10(a0),d0
		bhi.s	loc_45AD0
		move.w	#$20,$32(a0)
		lea	Child6_CreateBossExplosion.w,a2
		jsr	CreateChild1_Normal.w

loc_45AD0:

		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_45AD6:
		jsr	sub_45866(pc)
		tst.b	5(a0)
		beq.s	loc_45B16
		jsr	Create_New_Sprite3.w
		bne.s	loc_45B16
		move.w	a1,$3C(a0)
		move.l	#Obj_TeleporterBeam,(a1)
		move.w	a0,parent2(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		move.l	#loc_45B1C,(a0)
		move.w	#-$100,$38(a0)
		moveq	#$53,d0
		jsr	Play_Sound_2.w

loc_45B16:

		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_45B1C:
		jsr	sub_45866(pc)
		movea.w	(__u_FAA4).w,a1
		movea.w	$3C(a0),a2
		cmpi.b	#8,$46(a2)
		blt.w	loc_45B84
		beq.w	loc_45B7E
		cmpi.b	#$18,$46(a2)
		bhs.s	loc_45B6C

loc_45B3E:
		btst	#0,(Level_frame_counter+1).w
		beq.w	loc_45B84
		subq.w	#1,$14(a1)
		btst	#1,(Level_frame_counter+1).w

loc_45B52:
		beq.w	loc_45B84
		moveq	#1,d1
		move.w	$10(a1),d0
		cmp.w	$10(a0),d0
		beq.s	loc_45B84
		bcs.s	loc_45B66
		neg.w	d1

loc_45B66:
		add.w	d1,$10(a1)
		bra.s	loc_45B84
; ---------------------------------------------------------------------------

loc_45B6C:
		clr.l	(a1)
		moveq	#$73,d0
		jsr	Play_Sound_2.w
		move.l	#loc_45B8A,(a0)
		bra.s	loc_45B84
; ---------------------------------------------------------------------------

loc_45B7E:
		bset	#7,(__u_FAB8).w

loc_45B84:

		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_45B8A:
		jsr	sub_45866(pc)
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_45B94:
		cmpi.w	#3,(Player_mode).w
		bne.s	loc_45BC8
		cmpi.w	#$240,(Camera_Y_pos).w
		bhs.s	locret_45BF2
		cmpi.w	#$B00,(Player_1+x_pos).w
		blo.s	locret_45BF2
		moveq	#-$1F,d0
		jsr	Play_Sound.w
		move.w	#$A01,d0
		jmp	StartNewLevel.w
; ---------------------------------------------------------------------------

loc_45BC8:
		movea.w	$2E(a0),a1
		cmpi.w	#$1000,$10(a1)
		bhs.s	loc_45BDA
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_45BDA:
		move.l	#$40C0408,(Normal_palette_line_4+$2).w
		st	(PalCyc_Counters2).w
		move.l	#loc_45AD6,(a1)
		move.l	#loc_45BF4,(a0)

locret_45BF2:

		rts
; ---------------------------------------------------------------------------

loc_45BF4:
		move.w	#$1600,d0
		cmp.w	(Camera_X_pos).w,d0
		blo.s	loc_45C0C
		cmp.w	(Camera_max_X_pos).w,d0
		beq.s	loc_45C0C
		move.w	d0,(Camera_max_X_pos).w
		clr.w	(Camera_min_Y_pos).w

loc_45C0C:

		lea	(Player_1).w,a1
		lea	(Ctrl_1_logical).w,a2
		lea	(Ctrl_1_locked).w,a3
		lea	$30(a0),a4
		lea	1(a4),a5
		moveq	#0,d6
		bsr.s	sub_45C8E
		tst.w	(Player_mode).w
		bne.s	loc_45C42
		lea	(Player_2).w,a1
		lea	(Ctrl_2_logical).w,a2
		lea	(Ctrl_2_locked).w,a3
		lea	$31(a0),a4
		lea	-1(a4),a5
		moveq	#1,d6
		bsr.s	sub_45C8E

loc_45C42:
		move.b	$2C(a0),d0
		beq.s	loc_45C72
		subq.b	#1,d0
		bne.s	loc_45C60
		subq.b	#1,$2D(a0)
		bne.s	loc_45C72
		bset	#6,(__u_FAB8).w
		move.w	#$23C,$2C(a0)
		bra.s	loc_45C72
; ---------------------------------------------------------------------------

loc_45C60:
		subq.b	#1,$2D(a0)
		bne.s	loc_45C72
		movea.w	$2E(a0),a1
		st	5(a1)
		clr.w	$2C(a0)

loc_45C72:

		tst.b	5(a0)
		beq.s	locret_45C8C
		subq.w	#1,(Camera_X_pos).w
		btst	#0,5(a0)
		beq.s	loc_45C88
		subq.w	#1,(Camera_Y_pos).w

loc_45C88:
		subq.b	#1,5(a0)

locret_45C8C:
		rts

; =============== S U B R O U T I N E =======================================


sub_45C8E:

		move.b	(a4),d0
		bmi.w	locret_45DAC
		bne.s	loc_45CC0
		move.w	#$1628,d0
		tst.w	d6
		beq.s	loc_45CA2
		addi.w	#$10,d0

loc_45CA2:
		cmp.w	$10(a1),d0
		blo.w	locret_45DAC
		move.w	d0,$10(a1)
		clr.w	$18(a1)
		clr.w	$1C(a1)
		clr.w	(a2)
		st	(a3)
		addq.b	#1,(a4)
		bra.w	locret_45DAC
; ---------------------------------------------------------------------------

loc_45CC0:
		subq.b	#1,d0
		bne.s	loc_45CE4
		btst	#1,$2A(a1)
		bne.w	locret_45DAC
		move.b	#-$60,2(a4)
		tst.w	d6
		beq.s	loc_45CDE
		move.b	#-$24,2(a4)

loc_45CDE:
		addq.b	#1,(a4)
		bra.w	locret_45DAC
; ---------------------------------------------------------------------------

loc_45CE4:
		subq.b	#1,d0
		bne.s	loc_45D0C
		tst.w	(Player_mode).w
		bne.s	loc_45CF6
		tst.b	2(a5)
		beq.w	locret_45DAC

loc_45CF6:
		move.w	#$13C,$2C(a0)
		move.b	#$48,5(a0)
		st	(Scroll_lock).w
		addq.b	#1,(a4)
		bra.w	locret_45DAC
; ---------------------------------------------------------------------------

loc_45D0C:
		subq.b	#1,d0
		bne.s	loc_45D2E
		tst.w	$2C(a0)
		bne.w	locret_45DAC
		subq.b	#1,2(a4)
		bne.w	locret_45DAC
		move.w	#-$100,$18(a1)
		move.w	#$2424,(a2)
		addq.b	#1,(a4)
		bra.s	locret_45DAC
; ---------------------------------------------------------------------------

loc_45D2E:
		subq.b	#1,d0
		bne.s	loc_45D8A
		move.w	#$15C0,d0
		cmp.w	$10(a1),d0
		blo.s	loc_45D84
		move.w	d0,$10(a1)
		subi.w	#$80,$14(a1)
		clr.w	$18(a1)
		clr.w	$1C(a1)
		move.b	#3,$2E(a1)
		clr.b	$20(a1)
		clr.b	$22(a1)
		clr.w	(a2)
		moveq	#$73,d0
		jsr	Play_Sound_2.w
		tst.w	d6
		beq.s	loc_45D6E
		st	(a4)
		rts
; ---------------------------------------------------------------------------

loc_45D6E:
		move.b	#$3C,2(a4)
		tst.w	(Player_mode).w
		bne.s	loc_45D80
		move.b	#$78,2(a4)

loc_45D80:
		addq.b	#1,(a4)
		bra.s	locret_45DAC
; ---------------------------------------------------------------------------

loc_45D84:
		move.w	#$2404,(a2)
		bra.s	locret_45DAC
; ---------------------------------------------------------------------------

loc_45D8A:
		subq.b	#1,2(a4)
		bne.s	locret_45DAC
		moveq	#-$1F,d0
		jsr	Play_Sound.w
		move.w	#$A00,d0
		jmp	StartNewLevel.w
; ---------------------------------------------------------------------------

locret_45DAC:

		rts
; End of function sub_45C8E

; ---------------------------------------------------------------------------

Obj_SSZRotatingPlatform:

		move.l	#loc_45DFE,(a0)
		move.b	#4,4(a0)
		move.b	#$20,6(a0)
		move.b	#$C,7(a0)
		move.w	#prio(2),8(a0)
		move.w	#$437E,$A(a0)
		move.l	#Map_SSZRotatingPlatform,$C(a0)
		jsr	Create_New_Sprite3.w
		bne.s	loc_45DFE
		move.w	a1,$32(a0)
		move.l	#loc_45F10,(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		move.b	$2C(a0),$2C(a1)

loc_45DFE:

		move.w	$10(a0),d0
		andi.w	#-$80,d0
		sub.w	(Camera_X_pos_coarse_back).w,d0
		cmpi.w	#$280,d0
		bls.s	loc_45E2E
		move.w	$32(a0),d0
		beq.s	loc_45E1C
		movea.w	d0,a1
		st	5(a1)

loc_45E1C:
		move.w	respawn_addr(a0),d0
		beq.s	loc_45E28
		movea.w	d0,a1
		bclr	#7,(a1)

loc_45E28:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_45E2E:
		lea	Ani_SSZRotatingPlatform(pc),a1
		jsr	Animate_Sprite.w
		moveq	#$10,d1
		moveq	#$21,d2
		moveq	#$21,d3
		move.w	$10(a0),d4
		jsr	SolidObjectTop.w
		lea	(Player_1).w,a1
		lea	(Ctrl_1_logical).w,a2
		lea	$2E(a0),a3
		moveq	#3,d6
		bsr.s	sub_45E6E
		lea	(Player_2).w,a1
		lea	(Ctrl_2_logical).w,a2
		lea	$30(a0),a3
		moveq	#4,d6
		bsr.s	sub_45E6E
		jmp	Draw_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_45E6E:
		cmp.b	#4,5(a1)		; NAT: Check if player died or hurt
		bhs.s	loc_45E8C		; if yes, branch

		tst.b	(a3)
		bne.s	loc_45E82
		btst	d6,$2A(a0)
		beq.s	.rts
		move.w	#$100,(a3)
.rts		rts
; ---------------------------------------------------------------------------

loc_45E82:
		tst.b	(a3)
		bmi.s	loc_45E90
		btst	d6,$2A(a0)
		bne.s	loc_45E90

loc_45E8C:
		clr.b	(a3)
		rts
; ---------------------------------------------------------------------------

loc_45E90:

		st	(a3)
		clr.w	$18(a1)
		clr.w	$1C(a1)
		clr.b	$3D(a1)
		clr.b	$20(a1)
		bclr	#2,$2A(a1)
		move.b	#3,$2E(a1)
		move.w	(a2),d0
		andi.w	#$70,d0
		beq.s	loc_45EEE
		clr.b	(a3)
		move.w	#-$680,$1A(a1)
		clr.b	$2E(a1)
		bset	#2,$2A(a1)
		bset	#1,$2A(a1)

loc_45ECE:
		move.b	#1,$40(a1)
		move.b	#2,$20(a1)
		move.b	#$E,$1E(a1)
		move.b	#7,$1F(a1)
		moveq	#$62,d0
		jmp	Play_Sound_2.w
; ---------------------------------------------------------------------------

loc_45EEE:
		moveq	#1,d1
		move.w	$10(a1),d0
		cmp.w	$10(a0),d0
		beq.s	loc_45F02
		bmi.s	loc_45EFE
		neg.w	d1

loc_45EFE:
		add.w	d1,$10(a1)

loc_45F02:
		addq.b	#2,1(a3)
		move.b	1(a3),d0
		jmp	loc_460A6(pc)
; ---------------------------------------------------------------------------

locret_45F0E:

		rts
; ---------------------------------------------------------------------------

loc_45F10:
		move.l	#loc_45F2E,(a0)
		addi.w	#$30,$14(a0)
		moveq	#$60,d0
		btst	#0,$2C(a0)
		beq.s	loc_45F2A
		move.w	#$A0,d0

loc_45F2A:
		move.b	d0,7(a0)

loc_45F2E:
		tst.b	5(a0)
		beq.s	loc_45F3A
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_45F3A:
		moveq	#$B,d1
		add.b	7(a0),d1
		moveq	#$11,d2
		moveq	#$11,d3
		move.w	$10(a0),d4
		jsr	SolidObjectTop.w
		lea	(Player_1).w,a1
		lea	(Ctrl_1_logical).w,a2
		lea	$2E(a0),a3
		lea	$34(a0),a4
		moveq	#3,d6
		bsr.s	loc_45F74
		lea	(Player_2).w,a1
		lea	(Ctrl_2_logical).w,a2
		lea	$34(a0),a3
		lea	$2E(a0),a4
		moveq	#4,d6

loc_45F74:
		cmp.b	#6,5(a1)
		bhs.s	loc_45FD6.clr
		tst.b	(a3)
		bne.s	loc_45FD6
		btst	d6,$2A(a0)
		bne.s	loc_45FB8
		tst.b	1(a3)
		beq.s	locret_45FB6
		move.w	$14(a0),d0
		subi.w	#$64,d0
		cmp.w	$14(a1),d0
		bhs.s	loc_45FAC
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		moveq	#0,d1
		move.b	7(a0),d1
		addi.w	#$B,d1
		add.w	d1,d0
		add.w	d1,d1
		cmp.w	d1,d0
		blo.s	locret_45FB6

loc_45FAC:
		clr.b	1(a3)
		move.w	#prio(2),8(a1)

locret_45FB6:

		rts
; ---------------------------------------------------------------------------

loc_45FB8:
		move.w	#$1FF,(a3)
		moveq	#0,d1
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		bpl.s	loc_45FCC
		neg.w	d0
		moveq	#-$80,d1

loc_45FCC:
		move.w	d0,4(a3)
		move.b	d1,2(a3)
		rts
; ---------------------------------------------------------------------------

loc_45FD6:
		tst.b	(a3)
		bmi.s	loc_45FE4
		btst	d6,$2A(a0)
		bne.s	loc_45FE4
.clr		clr.b	(a3)
		rts
; ---------------------------------------------------------------------------

loc_45FE4:
		st	(a3)
		clr.w	$18(a1)
		clr.w	$1C(a1)
		clr.b	$3D(a1)
		clr.b	$20(a1)
		bclr	#2,$2A(a1)
		move.b	#3,$2E(a1)
		move.w	(a2),d0
		andi.w	#$70,d0
		beq.s	loc_46042
		clr.b	(a3)
		move.w	#-$680,$1A(a1)
		clr.b	$2E(a1)
		bset	#2,$2A(a1)
		bset	#1,$2A(a1)
		move.b	#1,$40(a1)
		move.b	#2,$20(a1)
		move.b	#$E,$1E(a1)
		move.b	#7,$1F(a1)
		moveq	#$62,d0
		jmp	Play_Sound_2.w
; ---------------------------------------------------------------------------

loc_46042:
		addq.b	#2,2(a3)
		cmpi.w	#$14,4(a3)
		bhs.s	loc_46052
		addq.w	#1,4(a3)

loc_46052:
		move.b	2(a3),d0
		cmpi.b	#-$80,d0
		blo.s	loc_46074
		move.w	#prio(3),d1
		tst.b	(a4)
		beq.s	loc_4608A
		move.w	4(a4),d2
		cmp.w	4(a3),d2
		bhs.s	loc_4608A
		move.w	#prio(4),d1
		bra.s	loc_4608A
; ---------------------------------------------------------------------------

loc_46074:
		move.w	#prio(2),d1
		tst.b	(a4)
		beq.s	loc_4608A
		move.w	4(a4),d2
		cmp.w	4(a3),d2
		bhs.s	loc_4608A
		move.w	#prio(1),d1

loc_4608A:
		move.w	d1,8(a1)
		jsr	GetSineCosine.w
		muls.w	4(a3),d1
		asr.l	#8,d1
		add.w	$10(a0),d1
		move.w	d1,$10(a1)
		move.b	2(a3),d0

loc_460A6:
		addi.w	#$A,d0
		andi.w	#$FF,d0
		move.w	d0,d1
		add.w	d0,d0
		add.w	d1,d0
		lsr.w	#5,d0
		andi.w	#-2,d0
		lea	byte_468C4(pc),a2
		adda.w	d0,a2
		move.b	(a2)+,d0
		andi.b	#-4,4(a1)
		or.b	d0,4(a1)
		move.b	(a2),d0
		move.b	d0,$22(a1)
		jmp	(Tails_Carry_LoadPLC).l
; ---------------------------------------------------------------------------

Obj_SSZSwingingCarrier:
		tst.b	OptionsBits.w			; NAT: Check if alternate layout
		bmi.w	loc_4616C			; if so, just delete

		move.l	#loc_46142,(a0)
		move.b	#4,4(a0)
		move.b	#8,6(a0)
		move.w	#prio(3),8(a0)
		move.w	#$4348,$A(a0)
		move.l	#Map_SSZElevatorBar,$C(a0)
		moveq	#$30,d0
		moveq	#1,d1
		tst.b	$2C(a0)
		bpl.s	loc_4610C
		moveq	#8,d0
		moveq	#4,d1

loc_4610C:
		move.b	d0,7(a0)
		move.b	d1,$22(a0)
		jsr	Create_New_Sprite3.w
		bne.s	loc_46142
		move.w	a1,$38(a0)
		move.l	#loc_461A8,(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		move.b	$2A(a0),$2A(a1)
		move.b	$2C(a0),$2C(a1)
		move.w	a0,parent2(a1)

loc_46142:

		move.w	$10(a0),d0
		andi.w	#-$80,d0
		sub.w	(Camera_X_pos_coarse_back).w,d0
		cmpi.w	#$280,d0
		bls.s	loc_46172
		move.w	$38(a0),d0
		beq.s	loc_46160
		movea.w	d0,a1
		st	5(a1)

loc_46160:
		move.w	respawn_addr(a0),d0
		beq.s	loc_4616C
		movea.w	d0,a1
		bclr	#7,(a1)

loc_4616C:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_46172:
		tst.b	$2C(a0)
		bmi.s	loc_46192
		move.l	#$20000,d0
		move.l	#$821,d1
		jsr	Gradual_SwingOffset.w
		addi.w	#$41,d0
		move.w	d0,$20(a0)
		bra.s	loc_461A2
; ---------------------------------------------------------------------------

loc_46192:
		moveq	#1,d0
		btst	#0,$2A(a0)
		beq.s	loc_4619E
		neg.w	d0

loc_4619E:
		add.w	d0,$20(a0)

loc_461A2:
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_461A8:
		move.l	#loc_461FE,(a0)
		move.b	#$44,4(a0)
		move.b	#$68,6(a0)
		move.b	#$68,7(a0)
		move.w	#$6348,$A(a0)
		move.l	#Map_SSZElevatorBar,$C(a0)
		move.b	$2C(a0),d0
		andi.w	#3,d0
		addq.w	#6,d0
		move.w	d0,$16(a0)
		jsr	Create_New_Sprite3.w
		bne.s	loc_461FE
		move.w	a1,$12(a0)
		move.l	#loc_46284,(a1)
		move.b	$2A(a0),$2A(a1)
		move.b	$2C(a0),$2C(a1)
		move.w	a0,$2E(a1)

loc_461FE:

		tst.b	5(a0)
		beq.s	loc_46216
		move.w	$12(a0),d0
		beq.s	loc_46210
		movea.w	d0,a1
		st	5(a1)

loc_46210:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_46216:
		movea.w	parent2(a0),a1
		move.w	#$180,d1
		move.w	$20(a1),d0
		subi.w	#$40,d0
		andi.w	#$FF,d0
		cmpi.w	#$80,d0
		blo.s	loc_46234
		move.w	#$100,d1

loc_46234:
		move.w	d1,8(a0)
		move.w	$20(a1),d0
		jsr	GetSineCosine.w
		swap	d1
		clr.w	d1
		asr.l	#4,d1
		swap	d0
		clr.w	d0
		asr.l	#4,d0
		move.l	$10(a0),d3
		move.l	$14(a0),d2
		clr.w	d2
		move.w	$16(a0),d4
		subq.w	#1,d4
		lea	$18(a0),a1

loc_46262:
		add.l	d1,d3
		add.l	d0,d2
		swap	d3
		swap	d2
		move.w	d3,(a1)+
		move.w	d2,(a1)+
		move.b	#2,1(a1)
		swap	d3
		swap	d2
		addq.w	#2,a1
		dbf	d4,loc_46262
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_46284:
		move.l	#loc_462B6,(a0)
		move.b	#4,4(a0)
		move.b	#$C,6(a0)
		move.b	#$18,7(a0)
		move.w	#prio(1),8(a0)
		move.w	#$6348,$A(a0)
		move.l	#Map_SSZElevatorBar,$C(a0)
		move.b	#3,$22(a0)

loc_462B6:
		tst.b	5(a0)
		beq.s	loc_462C2
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_462C2:
		movea.w	$2E(a0),a1
		move.w	$16(a1),d0
		subq.w	#1,d0
		add.w	d0,d0
		move.w	d0,d1
		add.w	d0,d0
		add.w	d1,d0
		move.w	$18(a1,d0.w),$10(a0)
		move.w	$1A(a1,d0.w),d0
		addi.w	#$C,d0
		move.w	d0,$14(a0)
		moveq	#$23,d1
		moveq	#8,d2
		moveq	#8,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		swap	d6
		move.w	d6,-(sp)
		lea	(Player_1).w,a1
		lea	(Ctrl_1_logical).w,a2
		lea	$30(a0),a3
		moveq	#3,d5
		bsr.s	sub_46324
		move.w	(sp)+,d6
		lsr.w	#1,d6
		lea	(Player_2).w,a1
		lea	(Ctrl_2_logical).w,a2
		lea	$32(a0),a3
		moveq	#4,d5
		bsr.s	sub_46324
		jmp	Draw_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_46324:
		cmpi.b	#4,5(a1)
		bhs.w	loc_463FC.release
		tst.b	(a3)
		bne.s	loc_4639A
		tst.b	$2E(a1)
		bne.s	locret_46348
		btst	d5,$2A(a0)
		bne.s	loc_4634A
		andi.w	#5,d6
		beq.s	locret_46348
		jsr	sub_24280.w

locret_46348:

		rts
; ---------------------------------------------------------------------------

loc_4634A:
		moveq	#$3C,d0
		jsr	Play_Sound_2.w
		st	(a3)
		move.b	#1,$2E(a1)
		clr.w	$1A(a1)
		clr.w	$18(a1)
		clr.w	$1C(a1)
		clr.b	$3D(a1)
		bset	#2,$2A(a1)
		move.b	#2,$20(a1)
		move.b	#$E,$1E(a1)
		move.b	#7,$1F(a1)
		tst.b	$2C(a0)
		bpl.s	loc_4639A
		move.b	$2A(a0),d0
		andi.w	#1,d0
		andi.b	#-2,$2A(a1)
		or.b	d0,$2A(a1)

loc_4639A:

		move.w	$10(a0),$10(a1)
		move.w	$14(a0),d0
		subi.w	#$C,d0
		move.w	d0,$14(a1)
		tst.b	$2C(a0)
		bpl.s	loc_463FC
		movem.l	d5/a1-a3,-(sp)
		jsr	(SonicOnObjHitFloor).l
		movem.l	(sp)+,d5/a1-a3
		tst.w	d1
		bpl.s	loc_463FC
		add.w	d1,$14(a1)
		cmpi.w	#-$10,d1
		bgt.s	loc_463FC
		clr.b	(a3)
		bclr	d5,$2A(a0)
		clr.b	$2E(a1)
		bclr	#3,$2A(a1)
		move.w	#$800,d0
		btst	#0,$2A(a0)
		beq.s	loc_463EC
		neg.w	d0

loc_463EC:
		move.w	d0,$18(a1)
		move.w	d0,$1C(a1)
		moveq	#-$4A,d0
		jmp	Play_Sound_2.w
; ---------------------------------------------------------------------------

loc_463FC:

		move.w	(a2),d0
		andi.w	#$70,d0
		beq.s	locret_46424
		moveq	#$62,d0
		jsr	Play_Sound_2.w
		move.w	#-$680,$1A(a1)
		clr.b	$2E(a1)
		bset	#1,$2A(a1)
		move.b	#1,$40(a1)

.release	clr.b	(a3)

locret_46424:
		rts
; End of function sub_46324

; ---------------------------------------------------------------------------

Obj_SSZRetractingSpring:

		move.l	#loc_46452,(a0)
		bset	#2,4(a0)
		move.b	#$10,6(a0)
		move.b	#$18,7(a0)
		move.w	#prio(3),8(a0)
		move.w	#$3A2,$A(a0)
		move.l	#Map_SSZRetractingSpring,$C(a0)

loc_46452:
		btst	#0,(Level_frame_counter+1).w
		beq.s	loc_464C6
		moveq	#0,d0
		move.w	$14(a0),d2
		addi.w	#$10,d2
		move.w	d2,d1
		subi.w	#$60,d1
		move.w	$10(a0),d3
		move.w	d3,d4
		subi.w	#$60,d3
		btst	#0,$2A(a0)
		beq.s	loc_46482
		addi.w	#$C0,d3
		exg	d3,d4

loc_46482:
		lea	(Player_1).w,a1
		jsr	sub_46514(pc)
		lea	(Player_2).w,a1
		jsr	sub_46514(pc)
		move.b	$22(a0),d1
		tst.w	d0
		bne.s	loc_464AE
		tst.b	d1
		beq.s	loc_464C2
		clr.l	$2E(a0)
		subq.b	#1,d1
		cmpi.b	#3,d1
		blo.s	loc_464C2
		moveq	#2,d1
		bra.s	loc_464C2
; ---------------------------------------------------------------------------

loc_464AE:
		cmpi.b	#3,d1
		bhs.s	loc_464C2
		tst.b	d1
		bne.s	loc_464C0
		moveq	#-$66,d0
		jsr	Play_Sound_2.w

loc_464C0:
		addq.b	#1,d1

loc_464C2:

		move.b	d1,$22(a0)

loc_464C6:
		move.w	$10(a0),$12(a0)
		cmpi.b	#2,$22(a0)
		bhs.s	loc_464DA
		move.w	#$7FFF,$10(a0)

loc_464DA:
		moveq	#$23,d1
		moveq	#$10,d2
		lea	byte_468DC(pc),a2
		move.w	$10(a0),d4
		jsr	sub_1DD0E.w
		move.w	$12(a0),$10(a0)
		swap	d6
		move.w	d6,-(sp)
		lea	(Player_1).w,a1
		lea	$2E(a0),a2
		bsr.s	sub_46536
		move.w	(sp)+,d6
		lsr.w	#1,d6
		lea	(Player_2).w,a1
		lea	$30(a0),a2
		bsr.s	sub_46536
		jmp	Sprite_OnScreen_Test.w

; =============== S U B R O U T I N E =======================================


sub_46514:

		tst.b	$2E(a1)
		bne.s	locret_46534
		cmp.w	$14(a1),d1
		bhi.s	locret_46534
		cmp.w	$14(a1),d2
		blo.s	locret_46534
		cmp.w	$10(a1),d3
		bhi.s	locret_46534
		cmp.w	$10(a1),d4
		blo.s	locret_46534
		addq.w	#1,d0

locret_46534:
		rts
; End of function sub_46514


; =============== S U B R O U T I N E =======================================


sub_46536:

		move.b	(a2),d0
		bne.s	loc_4656E
		lsr.w	#1,d6
		bcc.w	locret_465D4
		moveq	#8,d1
		move.w	$10(a1),d2
		sub.w	$10(a0),d2
		bmi.s	loc_46556
		btst	#0,$2A(a0)
		bne.s	loc_46560
		bra.s	locret_465D4
; ---------------------------------------------------------------------------

loc_46556:
		btst	#0,$2A(a0)
		bne.s	locret_465D4
		neg.w	d1

loc_46560:
		sub.w	d1,$10(a1)
		move.b	#4,$22(a0)
		addq.b	#1,(a2)
		bra.s	locret_465D4
; ---------------------------------------------------------------------------

loc_4656E:
		subq.b	#1,d0
		bne.s	loc_465B2
		move.w	#$C00,d1
		move.b	$2A(a0),d2
		andi.w	#1,d2
		eori.w	#1,d2
		beq.s	loc_46586
		neg.w	d1

loc_46586:
		move.w	d1,$1C(a1)
		move.w	d1,$18(a1)
		andi.b	#-2,$2A(a1)
		or.b	d2,$2A(a1)
		andi.b	#-2,4(a1)
		or.b	d2,4(a1)
		move.b	#3,$22(a0)
		addq.b	#1,(a2)
		moveq	#-$4F,d0
		jmp	Play_Sound_2.w
; ---------------------------------------------------------------------------

loc_465B2:
		subq.b	#1,d0
		bne.s	loc_465C6
		move.b	#5,$22(a0)
		move.b	#8,1(a2)
		addq.b	#1,(a2)
		bra.s	locret_465D4
; ---------------------------------------------------------------------------

loc_465C6:
		subq.b	#1,1(a2)
		bne.s	locret_465D4
		move.b	#3,$22(a0)
		clr.w	(a2)

locret_465D4:

		rts
; ---------------------------------------------------------------------------
word_46618:	dc.w  $FFF8, $FFE8,   $32,     3
		dc.w	  8, $FFE8,   $31,     4
		dc.w  $FFF8, $FFF8,   $29,     3
		dc.w	  8, $FFF8,   $2E,     4
		dc.w  $FFF8,	 8,   $22,     3
		dc.w	  8,	 8,   $19,     4
		dc.w  $FFF8,   $18,	1,     5
		dc.w	  8,   $18,    $E,     6
word_46658:	dc.w $FAFA

		dc.w $FBFB
		dc.w $FCFC
		dc.w $FDFD
		dc.w $FEFE
		dc.w $FFFF
		dc.w 0
		dc.w $101
		dc.w $202
		dc.w $303
		dc.w $404
		dc.w $505
		dc.w $606
		dc.w $707
		dc.w $808
		dc.w $909
		dc.w $A0A
		dc.w $B0B
		dc.w $C0C
		dc.w $D0D
		dc.w $E0E
		dc.w $F0F
		dc.w $1010
		dc.w $1111
		dc.w $1212
		dc.w $1313
		dc.w $1414
		dc.w $1515
		dc.w $1616
		dc.w $1717
		dc.w $1818
		dc.w $1919
byte_46698:	dc.b 0
		dc.b  $A ;
		dc.b $12 ;
		dc.b $16 ;
		dc.b $17 ;
		dc.b $16 ;
		dc.b $12 ;
byte_4669F:	dc.b $A
byte_466A0:	dc.b	0, $FF,	$FF,   0,   1,	 2,   2,   1
		dc.b	0, $FD,	$FC, $FC, $FD,	 0,   4,   6
		dc.b	6,   4,	  0, $FB, $F8, $F7, $F8, $FB
		dc.b	0,   6,	 $A,  $C,  $C,	$A,   6,   0
		dc.b  $F9, $F4,	$F1, $F0, $F1, $F4, $F9,   0
word_466C8:	dc.w $FFF4
		dc.w $FFF0
		dc.w $FD40
		dc.w $FC00
		dc.w $C
		dc.w $FFF0
		dc.w $2C0
		dc.w $FC00
		dc.w $FFF0
		dc.w $FFF4
		dc.w $FB00
		dc.w $FE00
		dc.w $10
		dc.w $FFF4
		dc.w $500
		dc.w $FE00
byte_466E8:	dc.b    9,   9,   9,   9,   9,   9,   9,   9,   9,   9,   9,   9,  $B,  $D,  $F, $11, $11, $11, $11, $11
		dc.b  $11,  $F,  $D,  $B,   9,   9,   9,   9,   9,   9,   9,   9,   9,   9,   9,   9
word_4670C:	dc.w   $408,  $40C
		dc.w   $60A,  $60C
		dc.w   $80C,  $80E
		dc.w   $A0E,  $C0E
		dc.w   $C0E,  $E0E
		dc.w   $E0E,  $E0E
		dc.w   $C0E,  $E0E
		dc.w   $A0E,  $C0E
		dc.w   $80C,  $80E
		dc.w   $60A,  $60C
word_46734:	dc.w  $FFFA,	 3,    $FFFA,	 4
		dc.w  $FFFA,	 3,    $FFFA,	 4
		dc.w  $FFFB,	 3,    $FFFB,	 4
		dc.w  $FFFC,	 3,    $FFFC,	 6
		dc.w  $FFFE,	 3,    $FFFE,	 6
		dc.w	  0,	 3,    	  0,	 6
		dc.w	  0,	 3,    	  0,	 6
		dc.w	  0,	 5,    	  0,	 6
		dc.w	  0,	 5,    0,	 6
		dc.w	  0,	 5,    0,	 6
		dc.w	  0,	 5,    0,	 6
		dc.w	  0,	 5,    0,	 8
		dc.w	  0,	 5,    0,	 8
		dc.w	  0,	 5,    0,	 8
		dc.w	  0,	 5,    0,	 8
		dc.w	  0,	 7,    0,	 8
		dc.w	  0,	 7,    0,	 8
		dc.w	  0,	 7,    0,	 8
		dc.w	  0,	 7,    0,	 8
		dc.w	  0,	 7,    0,	 8
		dc.w	  0,	 7,    0,	 8
		dc.w	  0,	 7,    0,	 8
		dc.w	  0,	 7,    0,	 8
		dc.w	  0,	 7,    0,	 8
		dc.w	  0,	 7,    0,	 8
word_467FC:	dc.w	  0,	 3,	0,     4
		dc.w	  0,	 3,	0,     4
		dc.w	  0,	 3,	0,     4
		dc.w	  0,	 3,	0,     6
		dc.w	  0,	 3,	0,     6
		dc.w	  0,	 3,	0,     6
		dc.w	  0,	 3,	0,     6
		dc.w	  0,	 5,	0,     6
		dc.w	  0,	 5,	0,     6
		dc.w	  0,	 5,	0,     6
		dc.w	  0,	 5,	0,     6
		dc.w	  0,	 5,	0,     8
		dc.w	  0,	 5,	0,     8
		dc.w	  0,	 5,	0,     8
		dc.w	  0,	 5,	0,     8
		dc.w	  0,	 7,	0,     8
		dc.w	  0,	 7,	0,     8
		dc.w	  0,	 7,	0,     8
		dc.w	  0,	 7,	0,     8
		dc.w	  0,	 7,	0,     8
		dc.w	  0,	 7,	0,     8
		dc.w	  0,	 7,	0,     8
		dc.w	  0,	 7,	0,     8
		dc.w	  0,	 7,	0,     8
		dc.w	  0,	 7,	0,     8
byte_468C4:	dc.b	1, $55
		dc.b	0, $59
		dc.b	0, $5A
		dc.b	0, $5B
		dc.b	1, $5A
		dc.b	1, $59
		dc.b	0, $55
		dc.b	0, $56
		dc.b	0, $57
		dc.b	0, $58
		dc.b	1, $57
		dc.b	1, $56
byte_468DC:	dc.b  $11, $11, $11, $11, $11, $11, $11, $11, $11, $11, $11, $11, $11, $11, $11, $11, $11, $10, $10,  $F
		dc.b   $E,  $D,  $C,  $B,   9,   7,   5,   2, $FF, $FB, $F4, $F4, $F4, $F4, $F4, $F4
Map_SSZFloatingPlatform:include "Levels/SSZ/Misc Object Data/Map - Floating Platform.asm"

Map_SSZCollapsingBridge:include "Levels/SSZ/Misc Object Data/Map - Collapsing Bridge.asm"

Map_SSZBouncyCloud:include "Levels/SSZ/Misc Object Data/Map - Bouncy Cloud.asm"

Ani_SSZBouncyCloud:	include "Levels/SSZ/Misc Object Data/Anim - Bouncy Cloud.asm"

Map_SSZElevatorBar:include "Levels/SSZ/Misc Object Data/Map - Elevator Bar.asm"

Map_SSZHPZTeleporter:include "Levels/SSZ/Misc Object Data/Map - (&HPZ) Teleporter.asm"

Map_SSZRotatingPlatform:include "Levels/SSZ/Misc Object Data/Map - Rotating Platform.asm"

Ani_SSZRotatingPlatform:	include "Levels/SSZ/Misc Object Data/Anim - Rotating Platform.asm"

Map_SSZRetractingSpring:include "Levels/SSZ/Misc Object Data/Map - Retracting Spring.asm"

; ---------------------------------------------------------------------------

Obj_TiltingBridge:
		move.w	$10(a0),d2
		move.w	d2,$44(a0)
		subi.w	#$70,d2
		moveq	#7,d1
		movea.l	a0,a1
		moveq	#1,d4
		bra.s	loc_46DBC
; ---------------------------------------------------------------------------

loc_46DB2:
		jsr	Create_New_Sprite3.w
		bne.w	loc_46E16

loc_46DBC:
		move.l	#loc_46E4C,(a1)
		move.w	d2,$10(a1)
		move.w	$14(a0),$14(a1)
		move.w	$44(a0),$44(a1)
		move.w	$14(a0),$46(a1)
		move.l	#Map_TiltingBridge,$C(a1)
		move.w	#$234D,$A(a1)
		ori.b	#4,4(a1)
		move.b	#$10,7(a1)
		move.b	#$10,6(a1)
		move.w	#prio(5),8(a1)
		bset	#7,$2A(a1)
		move.w	a0,$3E(a1)
		move.w	d4,$38(a1)
		addq.w	#1,d4
		addi.w	#$20,d2
		dbf	d1,loc_46DB2

loc_46E16:
		move.l	#loc_46E1C,(a0)

loc_46E1C:
		move.w	$34(a0),$30(a0)
		move.w	$36(a0),$32(a0)
		move.w	#0,$34(a0)
		move.w	#0,$36(a0)
		move.w	$14(a0),d0
		sub.w	$46(a0),d0
		bpl.s	loc_46E40
		neg.w	d0

loc_46E40:
		cmpi.w	#$70,d0
		blo.s	loc_46E4C
		move.b	#1,$2E(a0)

loc_46E4C:
		tst.b	(End_Of_Level_Flag).w			; NAT: check if title card is showing
		bne.w	loc_46EB8			; if yes, wait
		lea	$38(a0),a4		; NAT: Space optimization
		movea.w	$3E(a0),a1
		move.w	$30(a1),d0
		beq.s	loc_46E68
		lsl.w	#3,d0
		add.w	(a4),d0
		subi.w	#9,d0
		move.b	byte_46ED8(pc,d0.w),d0
		ext.w	d0
		add.w	d0,d0

loc_46E68:
		move.w	$32(a1),d1
		beq.s	loc_46E80
		lsl.w	#3,d1
		add.w	(a4),d1
		subi.w	#9,d1
		move.b	byte_46ED8(pc,d1.w),d1
		ext.w	d1
		add.w	d1,d1

loc_46E80:
		add.w	d1,d0
		ext.l	d0
		add.l	d0,$3A(a0)
		move.l	$3A(a0),d0
		add.l	d0,$14(a0)
		btst	#3,$2A(a0)
		beq.s	loc_46E9E
		move.w	(a4),$34(a1)

loc_46E9E:
		btst	#4,$2A(a0)
		beq.s	loc_46EAC
		move.w	(a4),$36(a1)

loc_46EAC:
		tst.b	$2E(a1)
		beq.s	loc_46EB8
		move.l	#loc_46F18,(a0)

loc_46EB8:
		moveq	#$1B,d1
		moveq	#$10,d2
		moveq	#$11,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		move.w	$44(a0),d0
		jmp	Sprite_OnScreen_Test2.w
; ---------------------------------------------------------------------------
byte_46ED8:	dc.b  $70, $50, $30, $10, $F0, $D0, $B0, $90, $54, $3C, $24,  $C, $F4, $DC, $C4, $AC, $38, $28, $18,   8
		dc.b  $F8, $E8, $D8, $C8, $1C, $14,  $C,   4, $FC, $F4, $EC, $E4, $E4, $EC, $F4, $FC,   4,  $C, $14, $1C
		dc.b  $C8, $D8, $E8, $F8,   8, $18, $28, $38, $AC, $C4, $DC, $F4,  $C, $24, $3C, $54, $90, $B0, $D0, $F0
		dc.b  $10, $30, $50, $70
; ---------------------------------------------------------------------------

loc_46F18:
		move.l	$3A(a0),d0
		asl.l	#2,d0
		move.l	d0,$3A(a0)
		move.l	#loc_46F28,(a0)

loc_46F28:
		tst.b	(End_Of_Level_Flag).w			; NAT: check if title card is showing
		bne.s	loc_46F54.solid			; if yes, wait
		move.l	#$1000,d0
		add.l	d0,$3A(a0)
		move.l	$3A(a0),d0
		add.l	d0,$14(a0)
		move.w	(Camera_max_Y_pos).w,d0
		addi.w	#$110,d0
		cmp.w	$14(a0),d0
		bgt.s	loc_46F54
		move.w	#$7F00,$10(a0)
		move.w	#$7F00,$44(a0)

loc_46F54:

.solid		moveq	#$1B,d1
		move.w	#$10,d2
		move.w	#$11,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		jsr	CheckPlayerReleaseFromObj.w
		move.w	$44(a0),d0
		jmp	Sprite_OnScreen_Test2.w
; ---------------------------------------------------------------------------
Map_TiltingBridge:include "Levels/DEZ/Misc Object Data/Map - Tilting Bridge.asm"

; ---------------------------------------------------------------------------

Obj_DEZHangCarrier:
		move.l	#Map_DEZHangCarrier,$C(a0)
		move.w	#$235D,$A(a0)
		ori.b	#4,4(a0)
		move.b	#$18,7(a0)
		move.b	#$14,6(a0)
		move.b	#$14,$1E(a0)
		move.w	#prio(1),8(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		lsl.w	#2,d0
		move.w	d0,$34(a0)
		move.l	#loc_46FC2,(a0)

loc_46FC2:
		tst.w	$30(a0)
		beq.s	loc_46FCE
		move.l	#loc_46FF2,(a0)

loc_46FCE:

		lea	$30(a0),a2
		lea	(Player_1).w,a1
		move.w	(Ctrl_1_logical).w,d0
		bsr.w	sub_4703E
		lea	(Player_2).w,a1
		addq.w	#1,a2
		move.w	(Ctrl_2_logical).w,d0
		bsr.w	sub_4703E
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_46FF2:
		jsr	MoveSprite2.w
		subi.w	#8,$1A(a0)
		jsr	ObjCheckCeilingDist.w
		tst.w	d1
		bpl.s	loc_4702A
		sub.w	d1,$14(a0)
		move.w	#0,$1A(a0)
		move.w	#$200,$18(a0)
		btst	#0,$2A(a0)
		beq.s	loc_47024
		neg.w	$18(a0)

loc_47024:
		move.l	#loc_4702C,(a0)

loc_4702A:
		bra.s	loc_46FCE
; ---------------------------------------------------------------------------

loc_4702C:
		tst.w	$34(a0)
		beq.s	loc_46FCE
		subq.w	#1,$34(a0)
		jsr	MoveSprite2.w
		bra.s	loc_46FCE

; =============== S U B R O U T I N E =======================================


sub_4703E:

		tst.b	(a2)
		beq.w	loc_470F8
		tst.b	4(a1)
		bpl.s	loc_470C4
		cmpi.b	#4,5(a1)
		bhs.s	loc_470C4
		andi.b	#$70,d0
		beq.w	loc_470D2
		clr.b	$2E(a1)
		clr.b	(a2)
		move.b	#$12,2(a2)
		andi.w	#$F00,d0
		beq.w	loc_47074
		move.b	#$3C,2(a2)

loc_47074:
		btst	#$A,d0
		beq.s	loc_47080
		move.w	#-$200,$18(a1)

loc_47080:
		btst	#$B,d0
		beq.s	loc_4708C
		move.w	#$200,$18(a1)

loc_4708C:
		move.w	#-$380,$1A(a1)
		bset	#1,$2A(a1)
		move.b	#1,$40(a1)
		move.b	#$E,$1E(a1)
		move.b	#7,$1F(a1)
		move.b	#2,$20(a1)
		bset	#2,$2A(a1)
		bclr	#4,$2A(a1)
		move.b	#0,$27(a1)
		rts
; ---------------------------------------------------------------------------

loc_470C4:

		clr.b	$2E(a1)
		clr.b	(a2)
		move.b	#$3C,2(a2)
		rts
; ---------------------------------------------------------------------------

loc_470D2:
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		addi.w	#$28,$14(a1)
		move.b	(Level_frame_counter+1).w,d0
		andi.b	#$F,d0
		bne.s	locret_470F6
		moveq	#-$30,d0
		jmp	Play_Sound_2.w
; ---------------------------------------------------------------------------

loc_470F8:
		tst.b	2(a2)
		beq.s	loc_47104
		subq.b	#1,2(a2)

locret_4717C:
locret_470F6:
		rts
; ---------------------------------------------------------------------------

loc_47104:
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		addi.w	#$10,d0
		cmpi.w	#$20,d0
		bhs.s	locret_4717C
		move.w	$14(a1),d1
		sub.w	$14(a0),d1
		subi.w	#$28,d1
		cmpi.w	#$18,d1
		bhs.s	locret_4717C
		tst.b	$2E(a1)
		bmi.s	locret_4717C
		cmpi.b	#4,5(a1)
		bhs.s	locret_4717C
		tst.b	(Debug_On).w
		bne.s	locret_4717C
		clr.w	$18(a1)
		clr.w	$1A(a1)
		clr.w	$1C(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		addi.w	#$28,$14(a1)
		move.b	#$14,$20(a1)
		bclr	#1,$2A(a1)
		move.b	#1,$2E(a1)

loc_47170:
		move.b	#1,(a2)
		moveq	#$5B,d0
		jmp	Play_Sound_2.w

; ---------------------------------------------------------------------------
Map_DEZHangCarrier:include "Levels/DEZ/Misc Object Data/Map - Hang Carrier.asm"

; ---------------------------------------------------------------------------

Obj_DEZTorpedoLauncher:

		move.l	#Map_TorpedoLauncher,$C(a0)
		move.w	#$373,$A(a0)
		ori.b	#4,4(a0)
		move.b	#8,7(a0)
		move.b	#$10,6(a0)
		move.w	#prio(5),8(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		lsl.w	#2,d0
		move.w	d0,$2E(a0)
		move.w	d0,$30(a0)
		move.l	#loc_471D6,(a0)

loc_471D6:

		tst.b	4(a0)
		bpl.w	loc_47266
		subq.w	#1,$2E(a0)
		bpl.w	loc_47266
		move.w	$30(a0),$2E(a0)
		jsr	Create_New_Sprite3.w
		bne.w	loc_47252
		move.l	#loc_4728A,(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		move.b	4(a0),4(a1)
		move.l	$C(a0),$C(a1)
		move.w	#$2373,$A(a1)
		move.w	#prio(6),8(a1)
		move.b	#8,7(a1)

loc_47226:
		move.b	#8,6(a1)
		move.b	#-$65,$28(a1)
		move.b	#9,$22(a1)

loc_47238:
		move.w	#$400,$18(a1)
		btst	#0,$2A(a0)
		bne.s	loc_4724A
		neg.w	$18(a1)

loc_4724A:
		moveq	#$7C,d0
		jsr	Play_Sound_2.w

loc_47252:
		move.l	#loc_4726C,(a0)
		move.b	#8,$22(a0)
		move.b	#$1F,$24(a0)
		bra.s	loc_4726C
; ---------------------------------------------------------------------------

loc_47266:

		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_4726C:

		subq.b	#1,$24(a0)
		bpl.s	loc_47284
		move.b	#7,$24(a0)
		subq.b	#1,$22(a0)
		bne.s	loc_47284
		move.l	#loc_471D6,(a0)

loc_47284:

		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_4728A:
		tst.b	4(a0)
		bpl.s	loc_472A2
		jsr	MoveSprite2.w
		jsr	Add_SpriteToCollisionResponseList.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_472A2:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------
Map_TorpedoLauncher:include "Levels/DEZ/Misc Object Data/Map - Torpedo Launcher.asm"

; ---------------------------------------------------------------------------

Obj_DEZLiftPad:

		move.l	#Map_DEZLiftPad,$C(a0)
		move.w	#$2302,$A(a0)
		ori.b	#4,4(a0)
		move.b	#$20,7(a0)
		move.b	#$10,6(a0)
		move.w	#prio(5),8(a0)
		move.w	$10(a0),$44(a0)
		move.w	$14(a0),$46(a0)
		jsr	Create_New_Sprite3.w
		bne.w	loc_47422
		move.l	#Draw_Sprite,(a1)
		move.l	$C(a0),$C(a1)
		move.w	$A(a0),$A(a1)
		move.b	4(a0),4(a1)
		move.b	#$60,7(a1)
		move.b	#$60,6(a1)
		move.w	#prio(5),8(a1)
		move.w	$10(a0),d2
		move.w	d2,$10(a1)
		move.w	$14(a0),d3
		move.w	d3,$14(a1)
		bset	#6,4(a1)
		lea	$18(a1),a2
		move.b	$2C(a0),d1
		andi.w	#$F,d1
		move.w	d1,$16(a1)
		subq.w	#1,d1

loc_47406:
		move.w	d2,(a2)+
		move.w	d3,(a2)+
		move.w	#1,(a2)+
		dbf	d1,loc_47406
		move.b	#2,$1D(a1)
		move.b	#1,$22(a1)
		move.w	a1,$3E(a0)

loc_47422:
		move.w	#0,$26(a0)
		move.w	#0,$32(a0)
		move.b	#-1,$36(a0)
		andi.b	#-$10,$2C(a0)
		move.l	#loc_47440,(a0)

loc_47440:
		move.w	$10(a0),-(sp)
		bsr.w	sub_4748E
		move.w	#$18,d1
		move.w	#9,d3
		move.w	(sp)+,d4
		jsr	SolidObjectTop.w
		move.w	$44(a0),d0
		andi.w	#-$80,d0
		sub.w	(Camera_X_pos_coarse_back).w,d0
		cmpi.w	#$280,d0
		bhi.s	loc_47472
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_47472:
		move.w	respawn_addr(a0),d0
		beq.s	loc_4747E
		movea.w	d0,a2
		bclr	#7,(a2)

loc_4747E:
		movea.w	$3E(a0),a1
		jsr	Delete_Referenced_Sprite.w
		jmp	Delete_Current_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_4748E:
		moveq	#0,d0
		moveq	#0,d1
		bsr.w	sub_4757A
		cmp.b	$36(a0),d0
		beq.w	locret_47578
		move.b	d0,$36(a0)
		btst	#4,$2C(a0)
		beq.s	loc_474BC
		neg.w	d0
		btst	#5,$2C(a0)
		beq.s	loc_474CA
		neg.w	d0
		addi.w	#$C0,d0
		bra.s	loc_474CA
; ---------------------------------------------------------------------------

loc_474BC:
		btst	#5,$2C(a0)
		beq.s	loc_474CA
		neg.w	d0
		addi.w	#$40,d0

loc_474CA:

		addi.w	#$80,d0
		btst	#0,$2A(a0)
		beq.s	loc_474DC
		neg.w	d0
		addi.w	#$80,d0

loc_474DC:
		jsr	GetSineCosine.w
		move.w	$46(a0),d2
		move.w	$44(a0),d3
		moveq	#0,d6
		movea.w	$3E(a0),a1
		move.w	$16(a1),d6
		subq.w	#2,d6
		bcs.w	locret_47578
		swap	d0
		swap	d1
		asr.l	#4,d0
		asr.l	#4,d1
		move.l	d0,d4
		move.l	d1,d5
		lea	$1E(a1),a2

loc_4750A:
		movem.l	d4-d5,-(sp)
		swap	d4
		swap	d5
		add.w	d2,d4
		add.w	d3,d5
		move.w	d5,(a2)+
		move.w	d4,(a2)+
		movem.l	(sp)+,d4-d5
		add.l	d0,d4
		add.l	d1,d5
		addq.w	#2,a2
		dbf	d6,loc_4750A
		movem.l	d4-d5,-(sp)
		swap	d4
		swap	d5
		add.w	d2,d4
		add.w	d3,d5
		move.w	$24(a1),d2
		move.w	$26(a1),d3
		move.w	d5,$24(a1)
		move.w	d4,$26(a1)
		move.w	d2,$10(a1)
		move.w	d3,$14(a1)
		movem.l	(sp)+,d4-d5
		add.l	d0,d4
		add.l	d1,d5
		swap	d4
		swap	d5
		add.w	$46(a0),d4
		add.w	$44(a0),d5
		move.w	d4,$14(a0)
		subi.w	#$20,d5
		btst	#0,$2A(a0)
		beq.s	loc_47574
		addi.w	#$40,d5

loc_47574:
		move.w	d5,$10(a0)

locret_47578:

		rts
; End of function sub_4748E


; =============== S U B R O U T I N E =======================================


sub_4757A:
		tst.w	$34(a0)
		beq.s	loc_47592
		btst	#4,$2A(a0)
		bne.w	loc_4760E
		btst	#3,$2A(a0)
		bne.w	loc_4760E
		subq.w	#1,$34(a0)
		bra.w	loc_4760E
; ---------------------------------------------------------------------------

loc_47592:
		tst.b	$31(a0)
		bne.s	loc_475B6
		btst	#4,$2A(a0)
		bne.s	.a
		btst	#3,$2A(a0)
		beq.s	loc_4760E
		tst.b	(Debug_On).w
		bne.w	loc_4760E
.a		move.b	#1,$31(a0)
		moveq	#-$5D,d0
		jsr	Play_Sound_2.w

loc_475B6:
		tst.b	$30(a0)
		bne.s	loc_475E6
		move.w	$32(a0),d0
		addi.w	#8,d0
		move.w	d0,$32(a0)
		add.w	d0,$26(a0)
		tst.w	d0
		bne.s	loc_475D6
		move.b	#0,$31(a0)

loc_475D6:
		cmpi.b	#$20,$26(a0)
		blo.s	loc_4760E
		move.b	#1,$30(a0)
		bra.s	loc_4760E
; ---------------------------------------------------------------------------

loc_475E6:
		move.w	$32(a0),d0
		subi.w	#8,d0
		move.w	d0,$32(a0)
		add.w	d0,$26(a0)
		tst.w	d0
		bne.s	loc_47600
		move.w	#$1E,$34(a0)

loc_47600:
		cmpi.b	#$20,$26(a0)
		bhs.s	loc_4760E
		move.b	#0,$30(a0)

loc_4760E:

		move.b	$26(a0),d0
		rts
; End of function sub_4757A

; ---------------------------------------------------------------------------
Map_DEZLiftPad:	include "Levels/DEZ/Misc Object Data/Map - Lift Pad.asm"

; ---------------------------------------------------------------------------

Obj_DEZStaircase:

		ori.b	#4,4(a0)
		move.b	$2C(a0),d0
		andi.w	#7,d0
		cmpi.w	#4,d0
		blo.s	loc_47658
		bchg	#0,4(a0)

loc_47658:
		btst	#1,4(a0)
		beq.s	loc_47666
		bchg	#0,4(a0)

loc_47666:
		moveq	#$34,d3
		moveq	#2,d4
		btst	#0,$2A(a0)
		beq.s	loc_47676
		moveq	#$3A,d3
		moveq	#-2,d4

loc_47676:
		move.w	$10(a0),d2
		movea.l	a0,a1
		moveq	#3,d1
		bra.s	loc_47690
; ---------------------------------------------------------------------------

loc_47680:
		jsr	Create_New_Sprite3.w
		bne.w	loc_476E4
		move.l	#loc_476FE,(a1)

loc_47690:
		move.l	#Map_TiltingBridge,$C(a1)
		move.w	#$2480,$A(a1)
		move.b	4(a0),4(a1)
		move.w	#prio(3),8(a1)
		move.b	#$10,7(a1)
		move.b	#$10,6(a1)
		move.b	$2C(a0),$2C(a1)
		move.w	d2,$10(a1)
		move.w	$14(a0),$14(a1)
		move.w	$10(a0),$44(a1)
		move.w	$14(a1),$46(a1)
		addi.w	#$20,d2
		move.b	d3,$33(a1)
		move.w	a0,$3E(a1)
		add.b	d4,d3
		dbf	d1,loc_47680

loc_476E4:
		move.l	#loc_476EA,(a0)

loc_476EA:
		tst.b	(End_Of_Level_Flag).w		; NAT: Check for end-of-level
		bne.s	loc_476FE.skip		; if yes, skip
		moveq	#0,d0
		move.b	$2C(a0),d0
		andi.w	#7,d0
		add.w	d0,d0
		move.w	off_4773A(pc,d0.w),d1
		jsr	off_4773A(pc,d1.w)

loc_476FE:
		movea.w	$3E(a0),a2
		moveq	#0,d0
		move.b	$33(a0),d0
		move.w	(a2,d0.w),d0
		add.w	$46(a0),d0
		move.w	d0,$14(a0)

.skip		moveq	#$1B,d1
		moveq	#$10,d2
		moveq	#$11,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		swap	d6
		or.b	d6,$32(a2)
		move.w	$44(a0),d0
		jmp	Sprite_OnScreen_Test2.w
; ---------------------------------------------------------------------------
off_4773A:	dc.w loc_4774A-off_4773A

		dc.w loc_477C2-off_4773A
		dc.w loc_47774-off_4773A
		dc.w loc_477C2-off_4773A
		dc.w loc_4774A-off_4773A
		dc.w loc_477EC-off_4773A
		dc.w loc_47774-off_4773A
		dc.w loc_477EC-off_4773A
; ---------------------------------------------------------------------------

loc_4774A:
		tst.w	$30(a0)
		bne.s	loc_47762
		move.b	$32(a0),d0
		andi.b	#$30,d0
		beq.s	locret_47760
		move.w	#$1E,$30(a0)

locret_47760:

		rts
; ---------------------------------------------------------------------------

loc_47762:
		subq.w	#1,$30(a0)
		bne.s	locret_47760
		addq.b	#1,$2C(a0)
		moveq	#-$40,d0
		jmp	Play_Sound_2.w
; ---------------------------------------------------------------------------

loc_47774:
		tst.w	$30(a0)
		bne.s	loc_4778C
		move.b	$32(a0),d0
		andi.b	#$C,d0
		beq.s	locret_4778A
		move.w	#$3C,$30(a0)

locret_4778A:
		rts
; ---------------------------------------------------------------------------

loc_4778C:
		subq.w	#1,$30(a0)
		bne.s	loc_4779E
		addq.b	#1,$2C(a0)
		moveq	#-$40,d0
		jmp	Play_Sound_2.w
; ---------------------------------------------------------------------------

loc_4779E:
		lea	$34(a0),a1
		move.w	$30(a0),d0
		lsr.b	#2,d0
		andi.b	#1,d0
		move.w	d0,(a1)+
		eori.b	#1,d0
		move.w	d0,(a1)+
		eori.b	#1,d0
		move.w	d0,(a1)+
		eori.b	#1,d0
		move.w	d0,(a1)+
		rts
; ---------------------------------------------------------------------------

loc_477C2:
		lea	$34(a0),a1
		cmpi.w	#$80,(a1)
		beq.s	locret_477EA
		addq.w	#1,(a1)
		moveq	#0,d1
		move.w	(a1)+,d1
		swap	d1
		lsr.l	#1,d1
		move.l	d1,d2
		lsr.l	#1,d1
		move.l	d1,d3
		add.l	d2,d3
		swap	d1
		swap	d2
		swap	d3
		move.w	d3,(a1)+
		move.w	d2,(a1)+
		move.w	d1,(a1)+

locret_477EA:
		rts
; ---------------------------------------------------------------------------

loc_477EC:
		lea	$34(a0),a1
		cmpi.w	#-$80,(a1)
		beq.s	locret_47814
		subq.w	#1,(a1)
		moveq	#0,d1
		move.w	(a1)+,d1
		swap	d1
		asr.l	#1,d1
		move.l	d1,d2
		asr.l	#1,d1
		move.l	d1,d3
		add.l	d2,d3
		swap	d1
		swap	d2
		swap	d3
		move.w	d3,(a1)+
		move.w	d2,(a1)+
		move.w	d1,(a1)+

locret_47814:
		rts
; ---------------------------------------------------------------------------

Obj_50_2:
		move.b	$2C(a0),d0
		andi.w	#$7F,d0
		lsl.w	#3,d0
		move.w	d0,$32(a0)
		add.w	d0,d0
		move.w	d0,$34(a0)
		move.w	#2,$30(a0)
		btst	#0,$2A(a0)
		beq.s	loc_4783C
		neg.w	$30(a0)

loc_4783C:
		move.l	#loc_47842,(a0)

loc_47842:
		lea	(Player_1).w,a1
		bsr.s	sub_47854
		lea	(Player_2).w,a1
		bsr.s	sub_47854
		jmp	Delete_Sprite_If_Not_In_Range.w

; =============== S U B R O U T I N E =======================================


sub_47854:

		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		add.w	$32(a0),d0
		cmp.w	$34(a0),d0
		bhs.s	locret_47890
		move.w	$14(a1),d1
		sub.w	$14(a0),d1
		addi.w	#$30,d1
		cmpi.w	#$60,d1
		bhs.s	locret_47890
		btst	#1,$2A(a1)
		bne.s	locret_47890
		move.w	$30(a0),d0
		subi.w	#$30,d1
		bcs.s	loc_4788C
		neg.w	d0

loc_4788C:
		add.w	d0,$10(a1)

locret_47890:

		rts
; End of function sub_47854

; ---------------------------------------------------------------------------

Obj_DEZLightning:

		move.l	#Map_DEZLightning,$C(a0)
		move.w	#$379,$A(a0)
		ori.b	#4,4(a0)
		move.b	#8,7(a0)
		move.b	#$18,6(a0)
		move.w	#prio(5),8(a0)
		move.b	#-$61,$28(a0)

loc_478BE:
		tst.b	4(a0)
		bpl.s	loc_478CC
		moveq	#$79,d0
		jsr	Play_Sound_2.w

loc_478CC:
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	d0,$30(a0)
		move.w	#1,$20(a0)
		move.l	#loc_478E2,(a0)

loc_478E2:
		lea	(Ani_DEZLightning).l,a1
		jsr	Animate_Sprite.w
		tst.b	5(a0)
		beq.s	loc_47906
		move.b	#0,5(a0)
		move.b	#0,$22(a0)
		move.l	#loc_4791A,(a0)

loc_47906:
		cmpi.b	#3,$22(a0)
		bne.s	loc_47914
		jmp	loc_1B662.w
; ---------------------------------------------------------------------------

loc_47914:
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_4791A:
		subq.w	#1,$30(a0)
		bmi.s	loc_478BE
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------
Ani_DEZLightning:	include "Levels/DEZ/Misc Object Data/Anim - Lightning.asm"

Map_DEZLightning:include "Levels/DEZ/Misc Object Data/Map - Lightning.asm"

; ---------------------------------------------------------------------------

Obj_DEZConveyorPad:

		move.l	#Map_DEZConveyorPad,$C(a0)
		move.w	#$2408,$A(a0)
		ori.b	#4,4(a0)
		move.b	#$40,7(a0)
		move.b	#$10,6(a0)
		move.b	#$3F,$1F(a0)
		move.b	#$F,$1E(a0)
		move.w	#prio(5),8(a0)
		move.b	#2,$20(a0)
		move.b	$2A(a0),d0
		andi.b	#1,d0
		move.b	d0,$31(a0)
		andi.b	#-2,$2A(a0)
		move.w	#1,$34(a0)
		move.b	$2C(a0),d0
		andi.w	#$7F,d0
		beq.s	loc_479EA
		lsl.w	#3,d0
		move.w	d0,$32(a0)
		tst.b	$2C(a0)
		bpl.s	loc_479D0
		neg.w	$34(a0)

loc_479D0:
		move.l	#Map_DEZConveyorPad2,$C(a0)
		move.b	#-$80,7(a0)
		bset	#6,4(a0)
		move.w	#0,$16(a0)

loc_479EA:
		move.l	#loc_479F0,(a0)

loc_479F0:
		move.b	$2A(a0),d0
		andi.b	#$18,d0
		beq.s	loc_47A12
		move.b	$31(a0),$20(a0)
		move.l	#loc_47A14,(a0)
		tst.b	$2C(a0)
		bne.s	loc_47A12
		move.l	#loc_47AB4,(a0)

loc_47A12:

		bra.s	loc_47A58
; ---------------------------------------------------------------------------

loc_47A14:
		tst.b	(End_Of_Level_Flag).w		; NAT: Check for end-of-level
		bne.s	loc_47A3C		; if yes, skip
		tst.w	$32(a0)
		beq.s	loc_47A38
		subq.w	#1,$32(a0)
		move.w	$34(a0),d0
		add.w	d0,$14(a0)
		move.b	(Level_frame_counter+1).w,d0
		andi.b	#$F,d0
		bne.s	loc_47A38
		moveq	#-$29,d0
		jsr	Play_Sound_2.w

loc_47A38:
		bsr.w	sub_47A88

loc_47A3C:
		move.b	$2A(a0),d0
		move.b	$30(a0),d1
		move.b	d0,$30(a0)
		eor.b	d0,d1
		and.b	d0,d1
		andi.b	#$18,d1
		beq.s	loc_47A58
		bchg	#0,$20(a0)

loc_47A58:

		lea	(Ani_DEZConveyorPad).l,a1
		jsr	Animate_Sprite.w
		moveq	#0,d1
		move.b	7(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		jmp	Sprite_OnScreen_Test.w

; =============== S U B R O U T I N E =======================================


sub_47A88:
		lea	(Player_1).w,a1
		moveq	#3,d6
		bsr.s	sub_47A96
		lea	(Player_2).w,a1
		moveq	#4,d6


; =============== S U B R O U T I N E =======================================


sub_47A96:
		btst	d6,$2A(a0)
		beq.s	locret_47AB2
		moveq	#2,d0
		tst.b	$20(a0)
		beq.s	loc_47AA6
		neg.w	d0

loc_47AA6:
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_47AAE
		neg.w	d0

loc_47AAE:
		add.w	d0,$10(a1)

locret_47AB2:
		rts
; End of function sub_47A96

; ---------------------------------------------------------------------------

loc_47AB4:
		move.w	$10(a0),-(sp)
		bsr.w	sub_47B58
		moveq	#1,d0
		tst.b	$20(a0)
		beq.s	loc_47AC6
		neg.w	d0

loc_47AC6:
		add.w	d0,$10(a0)
		moveq	#-$40,d3
		jsr	ObjCheckLeftWallDist.w
		tst.w	d1
		bpl.s	loc_47AE0
		sub.w	d1,$10(a0)
		bchg	#0,$20(a0)

loc_47AE0:
		moveq	#$40,d3
		jsr	ObjCheckRightWallDist.w
		tst.w	d1
		bpl.s	loc_47AF6
		add.w	d1,$10(a0)
		bchg	#0,$20(a0)

loc_47AF6:
		move.b	$2A(a0),d0
		move.b	$30(a0),d1
		move.b	d0,$30(a0)
		eor.b	d0,d1
		and.b	d0,d1
		andi.b	#$18,d1
		beq.s	loc_47B12
		bchg	#0,$20(a0)

loc_47B12:
		move.w	(sp)+,d4
		lea	(Ani_DEZConveyorPad).l,a1
		jsr	Animate_Sprite.w
		moveq	#0,d1
		move.b	7(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		jsr	SolidObjectFull.w
		tst.b	4(a0)
		bpl.s	loc_47B52
		move.b	(Level_frame_counter+1).w,d0
		andi.b	#$F,d0
		bne.s	loc_47B52
		moveq	#-$29,d0
		jsr	Play_Sound_2.w

loc_47B52:

		jmp	Sprite_OnScreen_Test.w

; =============== S U B R O U T I N E =======================================


sub_47B58:
		move.w	$36(a0),d0
		bne.s	loc_47B7C
		move.w	$34(a0),d0
		add.w	d0,$14(a0)
		jsr	ObjCheckFloorDist.w
		tst.w	d1
		bpl.s	locret_47B7A
		add.w	d1,$14(a0)
		move.w	#1,$36(a0)

locret_47B7A:
		rts
; ---------------------------------------------------------------------------

loc_47B7C:
		subq.w	#1,d0
		bne.s	loc_47BBA
		move.w	$10(a0),d3
		subi.w	#$30,d3
		jsr	ObjCheckFloorDist2.w
		move.w	d1,-(sp)
		move.w	$10(a0),d3
		addi.w	#$30,d3
		jsr	ObjCheckFloorDist2.w
		move.w	(sp)+,d0
		cmp.w	d0,d1
		ble.s	loc_47BA6
		move.w	d0,d1

loc_47BA6:
		cmpi.w	#$E,d1
		bgt.s	loc_47BB2
		add.w	d1,$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_47BB2:
		move.w	#2,$36(a0)
		rts
; ---------------------------------------------------------------------------

loc_47BBA:
		jsr	MoveSprite.w
		move.w	(Camera_max_Y_pos).w,d0
		addi.w	#$120,d0
		cmp.w	$14(a0),d0
		bgt.s	loc_47BD8
		move.w	#$7F00,d4
		move.w	d4,$10(a0)
		rts
; ---------------------------------------------------------------------------

loc_47BD8:
		jsr	ObjCheckFloorDist.w
		tst.w	d1
		bpl.s	locret_47BF2
		add.w	d1,$14(a0)
		move.w	#0,$1A(a0)
		move.w	#1,$36(a0)

locret_47BF2:
		rts
; End of function sub_47B58

; ---------------------------------------------------------------------------
Ani_DEZConveyorPad:	include "Levels/DEZ/Misc Object Data/Anim - Conveyor Pad.asm"

Map_DEZConveyorPad:	include "Levels/DEZ/Misc Object Data/Map - Conveyor Pad.asm"
word_47DD6:	dc.w $7F
		dc.w $FF
		dc.w $1FF
		dc.w $3FF

; =============== S U B R O U T I N E =======================================


sub_47DDE:

		move.w	#$23FF,$A(a0)
		ori.b	#4,4(a0)
		move.w	#prio(6),8(a0)
		move.b	$2C(a0),d0
		move.b	d0,d1
		andi.w	#$C,d0
		lsr.w	#1,d0
		move.w	word_47DD6(pc,d0.w),d0
		move.w	d0,$32(a0)
		addq.w	#1,d0
		lsr.w	#4,d0
		andi.w	#$F0,d1
		lsr.w	#4,d1
		mulu.w	d1,d0
		move.w	d0,$30(a0)
		move.b	$2C(a0),d1
		andi.b	#3,d1
		addq.b	#2,d1
		lsl.w	#5,d1
		move.w	(Level_frame_counter).w,d0
		add.w	$30(a0),d0
		and.w	$32(a0),d0
		rts
; End of function sub_47DDE

; ---------------------------------------------------------------------------

Obj_DEZEnergyBridge:

		move.l	#Map_DEZEnergyBridge,$C(a0)
		move.b	#$40,7(a0)
		move.b	#8,6(a0)
		bset	#7,$2A(a0)
		bsr.s	sub_47DDE
		sub.w	d1,d0
		bcc.s	loc_47E5C
		neg.w	d0
		move.w	d0,$34(a0)
		move.l	#loc_47E8C,(a0)
		bra.s	loc_47E8C
; ---------------------------------------------------------------------------

loc_47E5C:
		move.l	#loc_47E62,(a0)

loc_47E62:

		move.w	(Level_frame_counter).w,d0
		add.w	$30(a0),d0
		and.w	$32(a0),d0
		beq.s	loc_47E76
		jmp	Delete_Sprite_If_Not_In_Range.w
; ---------------------------------------------------------------------------

loc_47E76:
		move.b	$2C(a0),d0
		andi.b	#3,d0
		addq.b	#2,d0
		lsl.w	#5,d0
		move.w	d0,$34(a0)
		move.l	#loc_47E8C,(a0)

loc_47E8C:

		subq.w	#1,$34(a0)
		bne.s	loc_47EAA
		lea	(Player_1).w,a1
		moveq	#3,d6
		bsr.s	sub_47EE8
		lea	(Player_2).w,a1
		moveq	#4,d6
		bsr.s	sub_47EE8
		move.l	#loc_47E62,(a0)
		bra.s	loc_47EBE
; ---------------------------------------------------------------------------

loc_47EAA:
		moveq	#0,d1
		move.b	7(a0),d1
		move.w	#9,d3
		move.w	$10(a0),d4
		jsr	SolidObjectTop.w

loc_47EBE:
		move.b	(Level_frame_counter+1).w,d0
		andi.b	#3,d0
		move.b	d0,$22(a0)
		tst.b	4(a0)
		bpl.s	loc_47EE2
		move.b	(Level_frame_counter+1).w,d0
		andi.b	#7,d0
		bne.s	loc_47EE2
		moveq	#-$58,d0
		jsr	Play_Sound_2.w

loc_47EE2:

		jmp	Sprite_OnScreen_Test.w

; =============== S U B R O U T I N E =======================================


sub_47EE8:

		bclr	d6,$2A(a0)
		beq.s	locret_47EFA
		bclr	#3,$2A(a1)
		bset	#1,$2A(a1)

locret_47EFA:
		rts
; End of function sub_47EE8

; ---------------------------------------------------------------------------

Obj_56_2:
		move.l	#Map_DEZEnergyBridgeCurved,$C(a0)
		move.b	#$50,7(a0)
		move.b	#$30,6(a0)
		bsr.w	sub_47DDE
		sub.w	d1,d0
		bcc.s	loc_47F26
		neg.w	d0
		move.w	d0,$34(a0)
		move.l	#loc_47F56,(a0)
		bra.s	loc_47F56
; ---------------------------------------------------------------------------

loc_47F26:
		move.l	#loc_47F2C,(a0)

loc_47F2C:

		move.w	(Level_frame_counter).w,d0
		add.w	$30(a0),d0
		and.w	$32(a0),d0
		beq.s	loc_47F40
		jmp	Delete_Sprite_If_Not_In_Range.w
; ---------------------------------------------------------------------------

loc_47F40:
		move.b	$2C(a0),d0
		andi.b	#3,d0
		addq.b	#2,d0
		lsl.w	#5,d0
		move.w	d0,$34(a0)
		move.l	#loc_47F56,(a0)

loc_47F56:

		subq.w	#1,$34(a0)
		bne.s	loc_47F62
		move.l	#loc_47F2C,(a0)

loc_47F62:
		lea	(Player_1).w,a1
		moveq	#3,d6
		bsr.s	sub_47F9C
		lea	(Player_2).w,a1
		moveq	#4,d6
		bsr.s	sub_47F9C
		move.b	(Level_frame_counter+1).w,d0
		andi.b	#3,d0
		move.b	d0,$22(a0)
		tst.b	4(a0)
		bpl.s	loc_47F96
		move.b	(Level_frame_counter+1).w,d0
		andi.b	#7,d0
		bne.s	loc_47F96
		moveq	#-$58,d0
		jsr	Play_Sound_2.w

loc_47F96:

		jmp	Sprite_OnScreen_Test.w

; =============== S U B R O U T I N E =======================================


sub_47F9C:

		tst.w	$34(a0)
		beq.s	loc_47FD8
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		addi.w	#$50,d0
		cmpi.w	#$A0,d0
		bhs.s	loc_47FD8
		move.w	$14(a1),d0
		sub.w	$14(a0),d0
		addi.w	#$30,d0
		cmpi.w	#$60,d0
		bhs.s	loc_47FD8
		bset	d6,$2A(a0)
		move.b	#$E,$46(a1)
		move.b	#$F,$47(a1)
		rts
; ---------------------------------------------------------------------------

loc_47FD8:

		bclr	d6,$2A(a0)
		beq.s	locret_47FF6
		tst.w	$34(a0)
		bne.s	loc_47FEA
		bset	#1,$2A(a1)

loc_47FEA:
		move.b	#$C,$46(a1)
		move.b	#$D,$47(a1)

locret_47FF6:
		rts
; End of function sub_47F9C

; ---------------------------------------------------------------------------
Map_DEZEnergyBridge:include "Levels/DEZ/Misc Object Data/Map - Energy Bridge.asm"

Map_DEZEnergyBridgeCurved:	include "Levels/DEZ/Misc Object Data/Map - Energy Bridge Curved.asm"

; ---------------------------------------------------------------------------

Obj_DEZRetractingSpring:
		move.l	#Map_DEZRetractingSpring,$C(a0)
		move.w	#$2332,$A(a0)
		ori.b	#4,4(a0)
		move.w	#prio(5),8(a0)
		move.b	#$10,7(a0)
		move.b	#$20,6(a0)
		move.w	$10(a0),$44(a0)
		move.w	#$20,$32(a0)
		move.b	$2C(a0),d0
		andi.w	#2,d0
		move.w	word_4808A(pc,d0.w),$30(a0)
		move.l	#loc_480D4,(a0)

loc_480D4:
		move.w	Player_1+y_pos.w,d0
		cmp.b	#2,BoxWinner.w		; NAT: Fix for tails
		bne.s	.nottails
		move.w	Player_2+y_pos.w,d0
.nottails	sub.w	$14(a0),d0
		bcs.s	loc_48102

loc_480DE:
		cmpi.w	#$20,d0
		blt.s	loc_48124
		move.w	$32(a0),d1
		cmp.w	$34(a0),d1
		beq.s	loc_48124
		tst.w	$34(a0)
		bne.s	loc_480FC
		moveq	#-$66,d0
		jsr	Play_Sound_2.w

loc_480FC:
		addq.w	#8,$34(a0)
		bra.s	loc_48124
; ---------------------------------------------------------------------------

loc_48102:
		cmpi.w	#-$20,d0
		bge.s	loc_48124
		tst.w	$34(a0)
		beq.s	loc_48124
		move.w	$32(a0),d1
		cmp.w	$34(a0),d1
		bne.s	loc_48120
		moveq	#-$66,d0
		jsr	Play_Sound_2.w

loc_48120:
		subq.w	#8,$34(a0)

loc_48124:

		move.w	$34(a0),d0
		btst	#0,$2A(a0)
		bne.s	loc_48132
		neg.w	d0

loc_48132:
		btst	#1,$2A(a0)
		beq.s	loc_4813C
		neg.w	d0

loc_4813C:
		add.w	$44(a0),d0

loc_48140:
		move.w	d0,$10(a0)
		moveq	#0,d1
		move.b	7(a0),d1
		moveq	#9,d3
		move.w	$10(a0),d4
		lea	(Player_1).w,a1
		moveq	#3,d6

loc_48156:
		movem.l	d1-d4,-(sp)
		jsr	sub_1E2BC.w
		btst	#3,$2A(a0)
		beq.s	loc_4816E
		jsr	(sub_22F98).l

loc_4816E:
		movem.l	(sp)+,d1-d4
		lea	(Player_2).w,a1
		moveq	#4,d6
		jsr	sub_1E2BC.w
		btst	#4,$2A(a0)
		beq.s	loc_4818C
		jsr	(sub_22F98).l

loc_4818C:
		lea	(Ani_DEZRetractingSpring).l,a1
		jsr	Animate_Sprite.w
		move.w	$44(a0),d0
		jmp	Sprite_OnScreen_Test2.w
; ---------------------------------------------------------------------------
Ani_DEZRetractingSpring:	include "Levels/DEZ/Misc Object Data/Anim - Retracting Spring.asm"

Map_DEZRetractingSpring:include "Levels/DEZ/Misc Object Data/Map - Retracting Spring.asm"

; ---------------------------------------------------------------------------

Obj_DEZTunnelLauncher:

		move.l	#Map_DEZTunnelLauncher,$C(a0)
		move.w	#$385,$A(a0)
		ori.b	#4,4(a0)
		andi.b	#-2,4(a0)
		move.b	#$48,7(a0)
		move.b	#$50,6(a0)
		move.w	#prio(1),8(a0)
		bset	#6,4(a0)
		lea	$18(a0),a2
		move.w	#1,$16(a0)
		move.w	$10(a0),d2
		addi.w	#$38,d2
		btst	#0,$2A(a0)
		beq.s	loc_48242
		subi.w	#$70,d2

loc_48242:
		move.w	d2,(a2)+
		move.w	$14(a0),d3
		subi.w	#$2C,d3
		btst	#1,$2A(a0)
		beq.s	loc_4825E
		addi.w	#$58,d3
		bset	#0,4(a0)

loc_4825E:
		move.w	d3,(a2)+
		move.w	#0,(a2)+
		move.b	#0,$22(a0)
		move.l	#loc_48270,(a0)

loc_48270:

		lea	$30(a0),a4

loc_48274:
		lea	(Player_1).w,a1
		bsr.w	sub_48370

loc_4827C:
		lea	$38(a0),a4
		lea	(Player_2).w,a1
		bsr.w	sub_48370
		tst.w	$2E(a0)
		beq.w	loc_48316
		subq.b	#1,$2E(a0)
		bne.s	loc_482F4
		move.b	#$3C,$2E(a0)
		tst.b	$2F(a0)
		beq.s	loc_482F4
		subq.b	#1,$2F(a0)
		moveq	#-$53,d0
		cmpi.b	#7,$2F(a0)
		beq.s	loc_482B2
		moveq	#-$59,d0

loc_482B2:
		jsr	Play_Sound_2.w
		cmpi.b	#7,$2F(a0)
		bne.s	loc_482F4
		jsr	Create_New_Sprite3.w
		bne.w	loc_482EE
		move.l	#loc_484B0,(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		move.b	$2C(a0),$2C(a1)
		move.b	$30(a0),$30(a1)
		move.b	$38(a0),$38(a1)

loc_482EE:
		move.l	#loc_4831C,(a0)

loc_482F4:

		subq.b	#1,$22(a0)
		bne.s	loc_48300
		move.b	#2,$22(a0)

loc_48300:
		move.b	#0,$1D(a0)
		move.b	$2E(a0),d0
		andi.b	#1,d0
		beq.s	loc_48316

loc_48310:
		move.b	$2F(a0),$1D(a0)

loc_48316:

		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_4831C:
		subq.b	#1,$2E(a0)
		bne.s	loc_48348
		move.w	#0,$2E(a0)
		move.b	#0,$22(a0)
		move.b	#0,$1D(a0)
		move.b	#0,$30(a0)
		move.b	#0,$38(a0)
		move.l	#loc_48270,(a0)
		bra.s	loc_4836A
; ---------------------------------------------------------------------------

loc_48348:
		move.b	#0,$1D(a0)
		move.b	$2E(a0),d0
		andi.b	#1,d0
		beq.s	loc_4835E
		move.b	$2F(a0),$1D(a0)

loc_4835E:
		cmpi.b	#6,$22(a0)
		beq.s	loc_4836A
		addq.b	#1,$22(a0)

loc_4836A:

		jmp	Sprite_OnScreen_Test.w

; =============== S U B R O U T I N E =======================================


sub_48370:

		move.w	$10(a1),d0

loc_48374:
		sub.w	$10(a0),d0
		addq.w	#8,d0
		cmpi.w	#$10,d0
		bhs.w	locret_48422
		move.w	$14(a1),d0
		sub.w	$14(a0),d0
		addi.w	#$10,d0
		cmpi.w	#$20,d0
		bhs.w	locret_48422
		btst	#1,$2A(a1)
		bne.w	locret_48422
		tst.b	$2E(a1)
		bne.s	locret_48422
		move.w	$10(a0),$10(a1)
		move.b	$2A(a0),d0
		andi.b	#1,d0
		andi.b	#-2,$2A(a1)
		or.b	d0,$2A(a1)
		move.l	a0,-(sp)
		movea.l	a1,a0
		jsr	(Player_TouchFloor).l
		movea.l	(sp)+,a0
		move.b	#-$7F,$2E(a1)
		move.b	#9,$20(a1)
		move.b	#2,(a4)
		tst.b	$2F(a0)
		bne.s	locret_48422
		moveq	#-$5A,d0
		jsr	Play_Sound_2.w
	;	cmpa.w	#Player_1,a1
	;	bne.s	loc_48410
		move.w	#$3C0A,$2E(a0)
		move.b	#$A,$1D(a0)
		moveq	#-$59,d0
		jsr	Play_Sound_2.w
		tst.b	$22(a0)
		bne.s	locret_4840E
		move.b	#7,$22(a0)

locret_4840E:
		rts
; ---------------------------------------------------------------------------

loc_48410:
		move.w	#$3C00,$2E(a0)
		tst.b	$22(a0)
		bne.s	locret_48422
		move.b	#7,$22(a0)

locret_48422:

		rts
; End of function sub_48370

; ---------------------------------------------------------------------------
Map_DEZTunnelLauncher:include "Levels/DEZ/Misc Object Data/Map - Tunnel Launcher.asm"

; ---------------------------------------------------------------------------

loc_484B0:
		move.b	#$A,$31(a0)
		move.b	#$A,$39(a0)
		jsr	Create_New_Sprite3.w
		bne.w	loc_484E2
		move.l	#loc_487E4,(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		move.w	a1,$2E(a0)
		move.b	#2,$40(a0)

loc_484E2:
		move.l	#loc_484E8,(a0)

loc_484E8:
		lea	(Player_1).w,a1
		lea	$30(a0),a4
		bsr.s	sub_48518
		lea	(Player_2).w,a1
		lea	$38(a0),a4
		bsr.s	sub_48518
		movea.w	$2E(a0),a1
		lea	$40(a0),a4
		bsr.s	sub_48518

		tst.b	$30(a0)
		bne.s	.kkk
		tst.b	$38(a0)
		bne.s	.kkk
		clr.b	$2E(a1)
		jmp	Delete_Current_Sprite.w

.kkk		move.b	$30(a0),d0
		add.b	$38(a0),d0
		beq.s	loc_48512
		rts
; ---------------------------------------------------------------------------

loc_48512:
		jmp	Delete_Sprite_If_Not_In_Range.w

; =============== S U B R O U T I N E =======================================


sub_48518:
		cmp.b	#6,5(a1)		; NAT: stuff?
		blo.s	.k
		clr.b	(a4)

.k		moveq	#0,d0
		move.b	(a4),d0
		move.w	off_48524(pc,d0.w),d0
		jmp	off_48524(pc,d0.w)
; End of function sub_48518

; ---------------------------------------------------------------------------
off_48524:	dc.w locret_48532-off_48524

		dc.w loc_48534-off_48524
		dc.w loc_48592-off_48524
		dc.w loc_4865E-off_48524
		dc.w loc_4866E-off_48524
		dc.w loc_486C4-off_48524
		dc.w loc_486D0-off_48524
; ---------------------------------------------------------------------------

locret_48532:
		rts
; ---------------------------------------------------------------------------

loc_48534:
		subq.b	#1,1(a4)
		bpl.s	locret_48590
		addq.b	#2,(a4)
		move.b	#2,$20(a1)
		clr.b	$40(a1)
		move.b	#-$7F,$2E(a1)
		move.w	#$800,$1C(a1)
		move.w	#0,$18(a1)
		move.w	#0,$1A(a1)
		move.w	#0,$26(a1)
		bset	#1,$2A(a1)
		bsr.w	sub_4872C
		cmpi.l	#loc_487E4,(a1)
		beq.s	locret_48590
		cmpi.l	#loc_487F0,(a1)
		beq.s	locret_48590
		move.b	#-$6A,$22(a1)
		moveq	#0,d0
		move.b	$22(a1),d0
		jmp	(Tails_Carry_LoadPLC).l
; ---------------------------------------------------------------------------

locret_48590:

		rts
; ---------------------------------------------------------------------------

loc_48592:
		subq.b	#1,1(a4)
		bhi.w	loc_48638
		movea.l	4(a4),a2
		move.w	(a2)+,d4
		move.w	d4,$10(a1)
		move.w	(a2)+,d5
		move.w	d5,$14(a1)
		move.l	a2,4(a4)

loc_485AE:

		subq.b	#1,2(a4)
		beq.s	loc_48630
		tst.b	(a2)
		bpl.s	loc_48624
		move.b	(a2)+,d4
		andi.w	#$7F,d4
		cmpi.l	#loc_487F0,(a1)
		bne.s	loc_485D0
		moveq	#0,d0
		move.b	word_48620(pc,d4.w),d0
		move.w	d0,$30(a1)

loc_485D0:
		add.b	d4,d4
		move.w	word_48618(pc,d4.w),d2
		addq.b	#2,d4
		add.b	d4,(a4)
		move.b	(a2)+,1(a4)
		move.b	(a2)+,d0
		move.b	d0,3(a4)
		addi.b	#$20,d0
		andi.b	#-$40,d0
		jsr	GetSineCosine.w
		muls.w	d2,d0
		muls.w	d2,d1
		asr.l	#8,d0
		asr.l	#8,d1
		add.w	$10(a1),d0
		move.w	d0,$12(a1)
		add.w	$14(a1),d1
		move.w	d1,$16(a1)
		cmpi.b	#$A,(a4)
		blo.s	locret_48616
		move.w	$14(a1),$16(a1)

locret_48616:
		rts
; ---------------------------------------------------------------------------
word_48618:	dc.w $FF80
		dc.w $FFC0
		dc.w $FF80
		dc.w $FF80
word_48620:	dc.w $100
		dc.w $101
; ---------------------------------------------------------------------------

loc_48624:
		move.w	(a2)+,d4
		move.w	(a2)+,d5
		move.w	#$C00,d2
		bra.w	loc_48762
; ---------------------------------------------------------------------------

loc_48630:
		clr.b	$2E(a1)
		clr.b	(a4)
		rts
; ---------------------------------------------------------------------------

loc_48638:
		move.l	$10(a1),d2
		move.l	$14(a1),d3
		move.w	$18(a1),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d2
		move.w	$1A(a1),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d3
		move.l	d2,$10(a1)
		move.l	d3,$14(a1)
		rts
; ---------------------------------------------------------------------------

loc_4865E:
		move.b	3(a4),d0
		jsr	GetSineCosine.w
		asr.w	#1,d0
		asr.w	#1,d1
		bra.s	loc_4867C
; ---------------------------------------------------------------------------

loc_4866E:
		move.b	3(a4),d0
		jsr	GetSineCosine.w
		asr.w	#2,d0
		asr.w	#2,d1

loc_4867C:
		add.w	$12(a1),d0
		move.w	d0,d2
		sub.w	$10(a1),d2
		move.w	d0,$10(a1)
		asl.w	#8,d2
		move.w	d2,$18(a1)
		add.w	$16(a1),d1
		move.w	d1,d2
		sub.w	$14(a1),d2
		move.w	d1,$14(a1)
		asl.w	#8,d2
		move.w	d2,$1A(a1)
		movea.l	4(a4),a2
		move.w	(a2)+,d4
		move.w	(a2)+,d5
		cmp.b	3(a4),d5
		bne.s	loc_486BE
		move.b	#4,(a4)
		move.l	a2,4(a4)
		bra.w	loc_485AE
; ---------------------------------------------------------------------------

loc_486BE:
		add.b	d4,3(a4)
		rts
; ---------------------------------------------------------------------------

loc_486C4:
		addq.w	#3,$14(a1)
		move.w	#$300,$1A(a1)
		bra.s	loc_486DA
; ---------------------------------------------------------------------------

loc_486D0:
		subq.w	#3,$14(a1)
		move.w	#-$300,$1A(a1)

loc_486DA:
		move.b	#-1,$26(a1)
		move.b	3(a4),d0
		move.b	d0,$27(a1)
		jsr	GetSineCosine.w
		asr.w	#1,d0
		asr.w	#2,d1
		add.w	$12(a1),d0
		move.w	d0,d2
		sub.w	$10(a1),d2
		move.w	d0,$10(a1)
		asl.w	#8,d2
		move.w	d2,$18(a1)
		movea.l	4(a4),a2
		move.w	(a2)+,d4
		move.w	(a2)+,d5
		cmp.b	3(a4),d5
		bne.s	loc_48726
		move.b	#4,(a4)
		move.w	#0,$26(a1)
		move.l	a2,4(a4)
		bra.w	loc_485AE
; ---------------------------------------------------------------------------

loc_48726:
		add.b	d4,3(a4)
		rts

; =============== S U B R O U T I N E =======================================


sub_4872C:
		move.b	$2C(a0),d0
		andi.w	#$1F,d0
		add.w	d0,d0
		add.w	d0,d0

Load_DEZ_Light_Tunnel_Player_Path_Data:
		lea	(DEZTunnelPaths).l,a2
		movea.l	(a2,d0.w),a2
		move.w	(a2)+,d0
		subq.b	#1,d0
		move.b	d0,2(a4)
		move.w	(a2)+,d4
		move.w	d4,$10(a1)
		move.w	(a2)+,d5
		move.w	d5,$14(a1)
		move.l	a2,4(a4)
		move.w	(a2)+,d4
		move.w	(a2)+,d5
		move.w	#$C00,d2

loc_48762:
		moveq	#0,d0
		move.w	d2,d3
		move.w	d4,d0
		sub.w	$10(a1),d0
		bge.s	loc_48772
		neg.w	d0
		neg.w	d2

loc_48772:
		moveq	#0,d1
		move.w	d5,d1
		sub.w	$14(a1),d1
		bge.s	loc_48780
		neg.w	d1
		neg.w	d3

loc_48780:
		cmp.w	d0,d1
		blo.s	loc_487B4
		moveq	#0,d1
		move.w	d5,d1
		sub.w	$14(a1),d1
		swap	d1
		divs.w	d3,d1
		moveq	#0,d0
		move.w	d4,d0
		sub.w	$10(a1),d0
		beq.s	loc_4879E
		swap	d0
		divs.w	d1,d0


loc_4879E:
		move.w	d0,$18(a1)
		move.w	d3,$1A(a1)
		tst.w	d1
		bpl.s	loc_487AC
		neg.w	d1

loc_487AC:
		lsr.w	#8,d1
		move.b	d1,1(a4)
		rts
; ---------------------------------------------------------------------------

loc_487B4:
		moveq	#0,d0
		move.w	d4,d0
		sub.w	$10(a1),d0
		swap	d0
		divs.w	d2,d0
		moveq	#0,d1
		move.w	d5,d1
		sub.w	$14(a1),d1
		beq.s	loc_487CE
		swap	d1
		divs.w	d0,d1

loc_487CE:
		move.w	d1,$1A(a1)
		move.w	d2,$18(a1)
		tst.w	d0
		bpl.s	loc_487DC
		neg.w	d0

loc_487DC:
		lsr.w	#8,d0
		move.b	d0,1(a4)
		rts
; End of function sub_4872C

; ---------------------------------------------------------------------------

loc_487E4:

		move.w	#7,$30(a0)
		move.l	#loc_487F0,(a0)

loc_487F0:

		subq.w	#1,$30(a0)
		bpl.w	loc_48896
		move.w	#1,$30(a0)
		jsr	Create_New_Sprite3.w
		bne.w	loc_4888E
		move.l	#loc_488A4,(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		move.l	#Map_DEZTransRings,$C(a1)
		move.w	#$2385,$A(a1)
		ori.b	#4,4(a1)
		move.b	#$10,7(a1)
		move.b	#$10,6(a1)
		move.w	#prio(1),8(a1)
		cmpi.b	#-1,$26(a0)
		bne.s	loc_48874
		move.b	$27(a0),d1
		move.w	#prio(0),8(a1)
		move.b	d1,d0
		add.b	d0,d0
		bpl.s	loc_48864
		bset	#0,$2A(a1)
		move.w	#prio(1),8(a1)

loc_48864:
		addq.b	#8,d1
		lsr.b	#4,d1
		andi.b	#7,d1
		addq.b	#8,d1
		move.b	d1,$20(a1)
		bra.s	loc_4888E
; ---------------------------------------------------------------------------

loc_48874:
		move.w	$18(a0),d1
		move.w	$1A(a0),d2
		jsr	GetArcTan.w
		addq.b	#8,d0
		lsr.b	#4,d0
		andi.b	#7,d0
		move.b	d0,$20(a1)

loc_4888E:

		moveq	#-$36,d0
		jsr	Play_Sound_2.w

loc_48896:
		tst.b	$2E(a0)
		beq.s	loc_4889E
		rts
; ---------------------------------------------------------------------------

loc_4889E:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_488A4:
		lea	(Ani_DEZTransRings).l,a1
		jsr	Animate_Sprite.w
		tst.b	5(a0)
		beq.s	loc_488BC
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_488BC:
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
Ani_DEZTransRings:	include "Levels/DEZ/Misc Object Data/Anim - Transporter Rings.asm"

Map_DEZTransRings:	include "Levels/DEZ/Misc Object Data/Map - Transporter Rings.asm"

; ---------------------------------------------------------------------------

Obj_DEZGravitySwitch:

		move.l	#Map_DEZGravitySwitch,$C(a0)
		move.w	#$2490,$A(a0)
		ori.b	#4,4(a0)
		move.b	#$10,7(a0)
		move.b	#8,6(a0)
		move.w	#prio(5),8(a0)
		move.l	#loc_48AD6,(a0)

loc_48AD6:

		move.w	#$1B,d1
		move.w	#8,d2
		move.w	#9,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		swap	d6
		move.w	d6,d0
		andi.w	#$3C,d0
		beq.w	loc_48B3A
		move.b	#1,$22(a0)
		move.l	#loc_48B7E,(a0)
		move.w	#3,$30(a0)
		moveq	#8,d0
		btst	#1,4(a0)
		beq.s	loc_48B16
		neg.w	d0

loc_48B16:
		add.w	d0,$14(a0)
		lea	(Player_1).w,a1
		move.w	d6,d2
		move.w	#$14,d3
		bsr.s	sub_48B40
		lea	(Player_2).w,a1
		move.w	d6,d2
		move.w	#$14,d3
		bsr.s	sub_48B40
		moveq	#$73,d0
		jsr	Play_Sound_2.w

loc_48B3A:
		jmp	Sprite_OnScreen_Test.w

; =============== S U B R O U T I N E =======================================


sub_48B40:

		tst.b	$2E(a1)
		bne.s	locret_48B7C
		moveq	#0,d1
		move.b	d1,$20(a1)
		move.b	d1,$2D(a1)
		move.b	d1,$2F(a1)
		move.b	d1,$40(a1)
		move.b	d1,$3D(a1)
		move.w	d1,$1C(a1)
		move.w	d1,$18(a1)
		move.w	d1,$1A(a1)
		bset	#1,$2A(a1)
		bclr	#3,$2A(a1)
		and.w	d3,d2
		beq.s	locret_48B7C
		add.w	d0,$14(a1)

locret_48B7C:

		rts
; End of function sub_48B40

; ---------------------------------------------------------------------------

loc_48B7E:
		subq.w	#1,$30(a0)
		bpl.s	loc_48B96
		move.w	#$13,$30(a0)
		eori.b	#1,(Reverse_gravity_flag).w
		move.l	#loc_48B9C,(a0)

loc_48B96:
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_48B9C:
		move.w	#$1B,d1
		move.w	#8,d2
		move.w	#9,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		btst	#3,$2A(a0)
		beq.s	loc_48BC2
		move.w	#0,$30(a0)
		bra.s	loc_48BE4
; ---------------------------------------------------------------------------

loc_48BC2:
		subq.w	#1,$30(a0)
		bpl.s	loc_48BE4
		move.b	#0,$22(a0)
		moveq	#8,d0
		btst	#1,4(a0)
		beq.s	loc_48BDA
		neg.w	d0

loc_48BDA:
		sub.w	d0,$14(a0)
		move.l	#loc_48AD6,(a0)

loc_48BE4:

		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------
Map_DEZGravitySwitch:include "Levels/DEZ/Misc Object Data/Map - Gravity Switch.asm"

; ---------------------------------------------------------------------------

Obj_59_2:

		lea	(Player_1).w,a1
		lea	$30(a0),a4
		lea	$3A(a0),a2		; NAT: Used later...
		lea	Player_2.w,a3
		bsr.s	sub_48C30

		lea	(Player_2).w,a1
		lea	$3A(a0),a4
		lea	$30(a0),a2		; NAT: Used later...
		lea	Player_1.w,a3
		bsr.s	sub_48C30
		jmp	Delete_Sprite_If_Not_In_Range.w

; =============== S U B R O U T I N E =======================================


sub_48C30:

		moveq	#0,d0
		move.b	(a4),d0
		move.w	off_48C3C(pc,d0.w),d0
		jmp	off_48C3C(pc,d0.w)
; End of function sub_48C30

; ---------------------------------------------------------------------------
off_48C3C:	dc.w loc_48C44-off_48C3C

		dc.w loc_48D2C-off_48C3C
		dc.w loc_48DCA-off_48C3C
		dc.w loc_48E94-off_48C3C
; ---------------------------------------------------------------------------

loc_48C44:
		cmp.b	#4,$30(a0)		; NAT: Spawning fix
		bhs.w	locret_48D2A
		cmp.b	#4,$3A(a0)
		bhs.w	locret_48D2A
		tst.b	(Debug_On).w
		bne.w	locret_48D2A
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		addq.w	#3,d0
		btst	#0,$2A(a0)
		beq.s	loc_48C62
		addi.w	#$A,d0

loc_48C62:
		cmpi.w	#$10,d0
		bhs.w	locret_48D2A
		move.w	$14(a1),d1
		sub.w	$14(a0),d1
		addi.w	#$20,d1
		cmpi.w	#$40,d1
		bhs.w	locret_48D2A
		tst.b	$2E(a1)
		bne.w	locret_48D2A
		btst	#1,$2A(a1)
		bne.w	locret_48D2A
		btst	#0,(__u_FAB8).w
		bne.w	locret_48D2A
		movea.w	$42(a1),a3
		cmpi.l	#Obj_59_2,(a3)
		bne.s	loc_48CB0
		move.w	a4,d0
		sub.w	a0,d0
		tst.b	(a3,d0.w)
		bne.w	locret_48D2A

loc_48CB0:
		move.w	a0,$42(a1)
		addq.b	#2,(a4)
		move.b	#-$7D,$2E(a1)
		move.b	#0,$20(a1)
		move.w	#0,$1C(a1)
		move.w	#0,$18(a1)
		move.w	#0,$1A(a1)
		bclr	#5,$2A(a1)
		bset	#1,$2A(a1)
		move.w	$10(a0),$10(a1)
		bclr	#2,$2A(a1)
		beq.s	loc_48D10
		move.b	$1E(a1),d0
		move.b	$44(a1),$1E(a1)
		move.b	$45(a1),$1F(a1)
		sub.b	$44(a1),d0
		ext.w	d0
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_48D0C
		neg.w	d0

loc_48D0C:
		add.w	d0,$14(a1)

loc_48D10:
		clr.b	1(a4)
		clr.w	2(a4)
		btst	#0,$2A(a1)
		beq.s	loc_48D26
		move.b	#6,2(a4)

loc_48D26:
		clr.w	4(a4)
		tst.b	(a2)		; NAT: Check if other player is on teleporter
		beq.s	locret_48D2A	; if not, branch
		cmp.w	#8*17,4(a2)	; check if we are 17 frames late
		bhi.s	locret_48D2A	; branch if more
		move.l	(a2),(a4)	; copy to other pls
		move.l	4(a2),4(a4)	; coolcool

locret_48D2A:

		rts
; ---------------------------------------------------------------------------

loc_48D2C:
		addq.w	#8,4(a4)
		cmpi.w	#$300,4(a4)
		bne.s	loc_48D66
		move.b	$2C(a0),d0
		andi.w	#$7F,d0
		move.w	d0,6(a4)
		lsr.w	#1,d0
		move.w	d0,8(a4)
		move.w	#$1000,d1
		btst	#1,$2A(a0)
		bne.s	loc_48D58
		neg.w	d1

loc_48D58:
		move.w	d1,$1A(a1)
		addq.b	#2,(a4)
		moveq	#-$61,d0
		jsr	Play_Sound_2.w

loc_48D66:

		move.w	2(a4),d0
		add.w	4(a4),d0
		cmpi.w	#$C00,d0
		blo.s	loc_48D78
		subi.w	#$C00,d0

loc_48D78:
		move.w	d0,2(a4)
		moveq	#0,d0
		move.b	2(a4),d0
		move.b	RawAni_48DB2(pc,d0.w),$22(a1)
		andi.b	#-4,4(a1)
		move.b	byte_48DBE(pc,d0.w),d0
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_48D9C
		ori.b	#2,d0

loc_48D9C:
		or.b	d0,4(a1)
		moveq	#0,d0
		move.b	$22(a1),d0
		move.l	a2,-(sp)
		jsr	(Tails_Carry_LoadPLC).l
		movea.l	(sp)+,a2
		rts
; ---------------------------------------------------------------------------
RawAni_48DB2:	dc.b  $55, $59,	$5A, $5B, $5A, $59, $55, $56, $57, $58,	$57, $56
byte_48DBE:	dc.b	0,   1,	  1,   0,   0,	 0,   1,   1,	1,   0,	  0,   0
; ---------------------------------------------------------------------------

loc_48DCA:
		move.w	6(a4),d1
		move.w	8(a4),d2
		cmp.w	d2,d1
		bne.s	loc_48DF6
		cmp.b	#2,BoxWinner.w		; NAT: Check if tails wins
		beq.s	.tails
		cmpa.w	#Player_1,a1
		bne.s	loc_48DF6		; NAT: Fix for tails
		beq.s	.cont

.tails		cmpa.w	#Player_2,a1
		bne.s	loc_48DF6		; NAT: Fix for tails
.cont		move.b	$2C(a0),d0
		rol.b	#1,d0
		andi.b	#1,d0
		cmp.b	(Reverse_gravity_flag).w,d0
		bne.s	loc_48DF2
		move.b	#1,1(a4)

loc_48DF2:
		move.b	d0,(Reverse_gravity_flag).w

loc_48DF6:

		move.b	#0,$34(a1)
		cmpi.w	#5,d1

loc_48E00:
		bcs.s	loc_48E10
		add.w	d2,d2
		subq.w	#5,d2
		cmp.w	d2,d1
		bhs.s	loc_48E10
		move.b	#1,$34(a1)

loc_48E10:

		subq.w	#1,6(a4)
		bmi.s	loc_48E2C
		move.l	$14(a1),d3
		move.w	$1A(a1),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d3
		move.l	d3,$14(a1)
		bra.w	loc_48D66
; ---------------------------------------------------------------------------

loc_48E2C:
		addq.b	#2,(a4)
		clr.b	$2E(a1)
		move.w	#0,$1A(a1)
		moveq	#9,d0
		cmpi.b	#1,$38(a1)
		bne.s	loc_48E44
		moveq	#$11,d0

loc_48E44:
		tst.b	$2C(a0)
		bpl.s	loc_48E6A
		neg.w	d0
		btst	#1,$2A(a0)
		beq.s	loc_48E88
		moveq	#7,d0
		cmpi.b	#1,$38(a1)
		bne.s	loc_48E60
		subq.w	#8,d0

loc_48E60:
		tst.b	1(a4)
		beq.s	loc_48E8E
		moveq	#$10,d0
		bra.s	loc_48E8E
; ---------------------------------------------------------------------------

loc_48E6A:
		btst	#1,$2A(a0)
		bne.s	loc_48E88
		moveq	#-7,d0
		cmpi.b	#1,$38(a1)
		bne.s	loc_48E7E
		addq.w	#8,d0

loc_48E7E:
		tst.b	1(a4)
		beq.s	loc_48E8E
		moveq	#-$10,d0
		bra.s	loc_48E8E
; ---------------------------------------------------------------------------

loc_48E88:

		tst.b	1(a4)
		bne.s	locret_48E92

loc_48E8E:

		add.w	d0,$14(a1)

locret_48E92:
		rts
; ---------------------------------------------------------------------------

loc_48E94:
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		addi.w	#$10,d0
		cmpi.w	#$20,d0
		blo.s	locret_48EAC
		clr.w	$42(a1)
		clr.b	(a4)

locret_48EAC:
		rts
; ---------------------------------------------------------------------------

Obj_5A_2:
		move.b	$2C(a0),d0
		bpl.s	loc_48EC8
		andi.w	#$3F,d0
		lsl.w	#3,d0
		move.w	d0,$30(a0)
		move.l	#loc_4906A,(a0)
		bra.w	loc_4906A
; ---------------------------------------------------------------------------

loc_48EC8:
		andi.w	#$3F,d0
		lsl.w	#3,d0
		move.w	d0,$30(a0)
		move.w	#$20,d0
		btst	#6,$2C(a0)
		beq.s	loc_48EE2
		move.w	#$60,d0

loc_48EE2:
		move.w	d0,$32(a0)
		move.l	#loc_48EEC,(a0)

loc_48EEC:
		move.w	$30(a0),d4
		move.w	d4,d5
		add.w	d5,d5
		lea	(Player_1).w,a1
		lea	(__u_F7B0).w,a2
		moveq	#3,d6
		bsr.s	sub_48F12
		lea	(Player_2).w,a1
		lea	(__u_F7B0+$1).w,a2
		moveq	#4,d6			; NAT: FUCK SANIC TEEM
		bsr.s	sub_48F12
		jmp	Delete_Sprite_If_Not_In_Range.w

; =============== S U B R O U T I N E =======================================


sub_48F12:

		btst	d6,$2A(a0)
		bne.w	loc_48FA4
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		add.w	d4,d0
		cmp.w	d5,d0
		bhs.w	locret_48F8E
		move.w	$14(a1),d1
		sub.w	$14(a0),d1
		move.w	$32(a0),d0
		add.w	d0,d1
		add.w	d0,d0
		cmp.w	d0,d1
		bhs.w	locret_48F8E
		cmpi.b	#6,5(a1)
		bhs.s	locret_48F8E
		tst.b	(Debug_On).w
		bne.s	locret_48F8E
		move.w	d1,-(sp)
		jsr	RideObject_SetRide.w
		move.w	(sp)+,d1
		lsr.w	#3,d1
		btst	#6,$2C(a0)
		beq.s	loc_48F6A
		lsr.w	#1,d1
		move.b	byte_48F98(pc,d1.w),d1
		bra.s	loc_48F6E
; ---------------------------------------------------------------------------

loc_48F6A:
		move.b	byte_48F90(pc,d1.w),d1

loc_48F6E:
		move.b	d1,(a2)
		move.b	#0,2(a2)
		move.b	#-$80,$2D(a1)
		move.w	#1,$20(a1)
		tst.w	$1C(a1)
		bne.s	locret_48F8E
		move.w	#1,$1C(a1)

locret_48F8E:

		rts
; ---------------------------------------------------------------------------
byte_48F90:	dc.b  $80, $80,	$80, $40, $40,	 0,   0,   0
byte_48F98:	dc.b  $80, $80,	$70, $60, $50, $40, $40, $30, $20, $10,	  0,   0
; ---------------------------------------------------------------------------

loc_48FA4:
		btst	#1,$2A(a1)
		bne.s	loc_48FF6
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		add.w	d4,d0
		cmp.w	d5,d0
		blo.s	loc_48FFE

loc_48FBA:
		bclr	#3,$2A(a1)
		bclr	d6,$2A(a0)
		move.b	#0,$30(a1)
		move.b	#4,$31(a1)
		bset	#1,$2A(a1)
		tst.b	(Reverse_gravity_flag).w
		beq.s	locret_48FF4
		move.b	$27(a1),d0
		addi.b	#$40,d0
		neg.b	d0
		subi.b	#$40,d0
		move.b	d0,$27(a1)
		eori.b	#2,4(a1)

locret_48FF4:
		rts
; ---------------------------------------------------------------------------

loc_48FF6:
		move.w	#0,$1A(a1)
		bra.s	loc_48FBA
; ---------------------------------------------------------------------------

loc_48FFE:
		btst	#3,$2A(a1)
		beq.s	locret_48F8E
		move.b	(a2),d0
		jsr	GetSineCosine.w
		moveq	#8,d3
		move.w	#$1000,d0
		btst	#6,$2C(a0)
		beq.s	loc_49022
		move.w	#$5000,d0
		moveq	#4,d3

loc_49022:
		muls.w	d0,d1
		swap	d1
		move.w	$14(a0),d2
		add.w	d1,d2
		move.w	d2,$14(a1)
		move.b	(a2),d0
		move.b	d0,$27(a1)
		add.b	d3,(a2)
		tst.w	$1C(a1)
		bne.s	loc_4904A
		move.w	#1,$1C(a1)
		move.w	#1,$20(a1)

loc_4904A:
		tst.b	(Reverse_gravity_flag).w
		beq.s	loc_49056
		eori.b	#2,4(a1)

loc_49056:
		move.b	(Level_frame_counter+1).w,d0
		andi.b	#$F,d0
		bne.s	locret_49068
		moveq	#-$3D,d0
		jmp	Play_Sound_2.w

locret_49068:
		rts
; End of function sub_48F12

; ---------------------------------------------------------------------------

loc_4906A:

		move.w	$30(a0),d4
		move.w	d4,d5
		add.w	d5,d5
		lea	(Player_1).w,a1
		lea	(__u_F7B0).w,a2
		moveq	#3,d6
		bsr.s	sub_49090
		lea	(Player_2).w,a1
		lea	(__u_F7B0+$1).w,a2
		moveq	#4,d6			; NAT: FUCK SANIC TEEM
		bsr.s	sub_49090
		jmp	Delete_Sprite_If_Not_In_Range.w

; =============== S U B R O U T I N E =======================================


sub_49090:
		btst	d6,$2A(a0)
		bne.w	loc_49142
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		addi.w	#$20,d0
		cmpi.w	#$40,d0
		bhs.w	locret_49140
		move.w	$14(a1),d1
		sub.w	$14(a0),d1
		add.w	d4,d1
		cmp.w	d5,d1
		bhs.w	locret_49140
		cmpi.b	#6,5(a1)
		bhs.w	locret_49140
		tst.b	(Debug_On).w
		bne.w	locret_49140
		tst.b	$2E(a1)
		bmi.w	locret_49140
		move.w	d0,-(sp)
		jsr	(sub_33C34).l
		move.w	(sp)+,d1
		move.b	#-$40,$26(a1)
		bclr	#0,4(a1)
		bclr	#0,$2A(a1)
		move.b	#0,(a2)
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		bcc.s	loc_49102
		move.b	#-$80,(a2)

loc_49102:
		move.w	$1A(a1),$1C(a1)
		neg.w	$1C(a1)
		move.w	$14(a1),d0
		sub.w	$14(a0),d0
		bcc.s	loc_49120
		move.b	#$40,$26(a1)
		neg.w	$1C(a1)

loc_49120:
		bset	#6,$2E(a1)
		bset	#1,$2E(a1)
		move.w	#1,$20(a1)
		move.b	#0,$27(a1)
		move.b	#0,2(a2)
; ---------------------------------------------------------------------------

loc_49142:
		cmpi.b	#6,5(a1)		; NAT: check if ded
		bhs.s	.dedderooni		; if so, bra mmm
		move.w	$14(a1),d1
		sub.w	$14(a0),d1
		add.w	d4,d1
		cmp.w	d5,d1
		blo.s	loc_4917A

.dedderooni	move.b	#0,$2E(a1)
		bclr	#3,$2A(a1)
		bclr	d6,$2A(a0)
		move.b	#1,$27(a1)
		move.b	#0,$30(a1)
		move.b	#4,$31(a1)
		bset	#1,$2A(a1)

locret_49140:
		rts
; ---------------------------------------------------------------------------

loc_4917A:
		btst	#3,$2A(a1)
		beq.s	locret_49140
		bclr	#1,4(a1)
		tst.w	$1A(a1)
		bmi.s	loc_49194
		bset	#1,4(a1)

loc_49194:
		move.b	(a2),d0
		jsr	GetSineCosine.w
		muls.w	#$1000,d1
		swap	d1
		move.w	$10(a0),d2
		add.w	d1,d2
		move.w	d2,$10(a1)
		moveq	#0,d2
		move.b	(a2),d2
		addq.b	#8,(a2)
		divu.w	#$B,d2
		move.b	RawAni_491DA(pc,d2.w),$22(a1)
		move.b	(Level_frame_counter+1).w,d0
		andi.b	#$F,d0
		bne.s	loc_491CE
		moveq	#-$3D,d0
		jsr	Play_Sound_2.w

loc_491CE:
		moveq	#0,d0
		move.b	$22(a1),d0
		jmp	(Tails_Carry_LoadPLC).l
; End of function sub_49090

; ---------------------------------------------------------------------------
RawAni_491DA:	dc.b  $6D, $6D, $6E, $6E, $6F, $6F, $70, $70, $71, $71, $72, $72, $73, $73, $74, $74, $75, $75, $76, $76
		dc.b  $77, $77, $6C, $6C, $6D, $6D
; ---------------------------------------------------------------------------

Obj_5B_2:
		move.w	#$20,$30(a0)
		move.w	$10(a0),d1
		lea	(Player_1).w,a1
		cmp.w	$10(a1),d1
		bhs.s	loc_4920E
		move.b	#1,$32(a0)

loc_4920E:
		move.l	#loc_49214,(a0)

loc_49214:
		move.w	$10(a0),d1
		lea	$32(a0),a2
		lea	(Player_1).w,a1
		cmp.b	#2,BoxWinner.w
		bne.s	.notails
		lea	(Player_2).w,a1		; NAT: Fix tails
.notails	bsr.s	sub_49228
		jmp	Delete_Sprite_If_Not_In_Range.w

; =============== S U B R O U T I N E =======================================


sub_49228:
		tst.b	(a2)+
		bne.w	loc_49270
		cmp.w	$10(a1),d1
		bhi.s	locret_4926E
		move.b	#1,-1(a2)
		move.w	$14(a0),d2
		move.w	d2,d3
		move.w	$30(a0),d4
		sub.w	d4,d2
		add.w	d4,d3
		move.w	$14(a1),d4
		cmp.w	d2,d4
		blt.s	locret_4926E
		cmp.w	d3,d4
		bge.s	locret_4926E
		tst.b	(Debug_On).w
		bne.s	locret_4926E
		move.b	#0,(Reverse_gravity_flag).w
		btst	#0,4(a0)
		bne.s	locret_4926E
		move.b	#1,(Reverse_gravity_flag).w

locret_4926E:
		rts
; ---------------------------------------------------------------------------

loc_49270:
		cmp.w	$10(a1),d1
		bls.s	locret_4926E
		move.b	#0,-1(a2)
		move.w	$14(a0),d2
		move.w	d2,d3
		move.w	$30(a0),d4
		sub.w	d4,d2
		add.w	d4,d3
		move.w	$14(a1),d4
		cmp.w	d2,d4
		blt.s	locret_4926E
		cmp.w	d3,d4
		bge.s	locret_4926E
		tst.b	(Debug_On).w
		bne.s	locret_4926E
		move.b	#0,(Reverse_gravity_flag).w
		btst	#0,4(a0)
		beq.s	locret_4926E
		move.b	#1,(Reverse_gravity_flag).w
		rts
; End of function sub_49228

; ---------------------------------------------------------------------------

Obj_5C_2:
		lea	$30(a0),a2
		lea	(Player_1).w,a1
		move.w	(Ctrl_1_logical).w,d1
		bsr.s	sub_492D4
		lea	$32(a0),a2
		lea	(Player_2).w,a1
		move.w	(Ctrl_2_logical).w,d1
		bsr.s	sub_492D4
		jmp	Delete_Sprite_If_Not_In_Range.w

; =============== S U B R O U T I N E =======================================


sub_492D4:

		move.b	(a2),d0
		bne.s	loc_49348
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		addi.w	#$20,d0
		cmpi.w	#$40,d0
		bhs.s	locret_49346
		move.w	$14(a1),d1
		sub.w	$14(a0),d1
		addi.w	#$20,d1
		cmpi.w	#$40,d1
		bhs.s	locret_49346
		btst	#3,$2A(a1)
		bne.s	locret_49346
		cmpi.b	#6,5(a1)
		bhs.s	locret_49346
		tst.b	(Debug_On).w
		bne.s	locret_49346
		bset	#1,$2A(a1)
		move.w	#0,$18(a1)
		move.w	#0,$1A(a1)
		move.w	#0,$1C(a1)
		move.w	#0,$26(a1)
		andi.b	#-4,4(a1)
		move.w	#1,$20(a1)
		move.b	#-$7D,$2E(a1)
		move.b	#1,(a2)

locret_49346:

		rts
; ---------------------------------------------------------------------------

loc_49348:
		cmpi.b	#7,d0
		bhs.w	loc_493F2
		moveq	#8,d1
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		bpl.s	loc_49360
		neg.w	d0
		neg.w	d1

loc_49360:
		cmpi.w	#8,d0
		bhs.s	loc_49372
		move.w	$10(a0),$10(a1)
		moveq	#0,d1
		bset	#1,(a2)

loc_49372:
		sub.w	d1,$10(a1)
		moveq	#8,d1
		move.w	$14(a1),d0
		sub.w	$14(a0),d0
		bpl.s	loc_49386
		neg.w	d0
		neg.w	d1

loc_49386:
		cmpi.w	#8,d0
		bhs.s	loc_49398
		move.w	$14(a0),$14(a1)
		moveq	#0,d1
		bset	#2,(a2)

loc_49398:
		sub.w	d1,$14(a1)

loc_4939C:

		move.b	(Level_frame_counter+1).w,d0
		andi.b	#$F,d0
		bne.s	loc_493AE
		moveq	#-$3D,d0
		jsr	Play_Sound_2.w

loc_493AE:
		moveq	#0,d2
		move.b	1(a2),d2
		addq.b	#1,1(a2)
		cmpi.b	#$60,1(a2)
		blo.s	loc_493C6
		move.b	#0,1(a2)

loc_493C6:
		lsr.w	#2,d2
		move.b	RawAni_493DA(pc,d2.w),$22(a1)
		moveq	#0,d0
		move.b	$22(a1),d0
		jmp	(Tails_Carry_LoadPLC).l
; ---------------------------------------------------------------------------
RawAni_493DA:	dc.b  $34, $35, $36, $37, $38, $39, $3A, $3B, $3C, $31, $32, $33, $76, $77, $6C, $6D, $6E, $6F, $70, $71
		dc.b  $72, $73, $74, $75
; ---------------------------------------------------------------------------

loc_493F2:
		cmpi.b	#8,d0
		beq.s	loc_49430
		and.b	$2C(a0),d1
		beq.s	loc_4939C
		move.b	#8,(a2)
		lea	(loc_4941C).l,a3

		btst	#4,$2B(a1)		; NAT: Check for speed shoes
		beq.s	loc_49408		; if not, branch
		lea	loc_4941C.a,a3

loc_49408:
		addq.w	#4,a3
		lsr.b	#1,d1
		bcc.s	loc_49408
		move.w	(a3)+,$18(a1)
		move.w	(a3)+,$1A(a1)
		clr.b	$2E(a1)

loc_4941C:
		bra.w	loc_4939C
; ---------------------------------------------------------------------------
	dc.w 0, -$C00
	dc.w 0, $C00
	dc.w -$C00, 0
.a	dc.W $C00, 0

	dc.w 0, -$E00
	dc.w 0, $E00
	dc.w -$C00, 0
	dc.W $C00, 0
; ---------------------------------------------------------------------------

loc_49430:
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		addi.w	#$20,d0
		cmpi.w	#$40,d0
		bhs.s	loc_49456
		move.w	$14(a1),d1
		sub.w	$14(a0),d1
		addi.w	#$20,d1
		cmpi.w	#$40,d1
		blo.w	loc_4939C

loc_49456:
		clr.w	(a2)
		rts

; ---------------------------------------------------------------------------

Obj_DEZHoverMachine:

		move.l	#Map_DEZHoverMachine,$C(a0)
		move.w	#$230D,$A(a0)
		ori.b	#4,4(a0)
		move.b	#$10,7(a0)
		move.b	#$10,6(a0)
		move.w	#prio(5),8(a0)
		jsr	Create_New_Sprite3.w
		bne.w	loc_494D4
		move.l	#loc_494EA,(a1)
		move.l	$C(a0),$C(a1)
		move.w	$A(a0),$A(a1)
		move.b	4(a0),4(a1)
		move.b	#$10,7(a1)
		move.b	#$10,6(a1)
		move.w	#prio(5),8(a1)
		move.b	#2,$22(a1)
		move.w	$10(a0),d2
		move.w	d2,$44(a1)
		addi.w	#$20,d2
		move.w	d2,$10(a1)
		move.w	$14(a0),d3
		move.w	d3,$14(a1)

loc_494D4:
		move.l	#loc_494DA,(a0)

loc_494DA:
		addq.b	#1,$22(a0)
		andi.b	#1,$22(a0)
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_494EA:
		move.w	#prio(4),8(a0)
		move.b	$26(a0),d0
		bpl.s	loc_494FC
		move.w	#prio(6),8(a0)

loc_494FC:
		addq.b	#2,$26(a0)
		jsr	GetSineCosine.w
		asr.w	#3,d1
		add.w	$44(a0),d1
		move.w	d1,$10(a0)
		lea	(Player_1).w,a1
		bsr.w	sub_4952A
		lea	(Player_2).w,a1
		bsr.w	sub_4952A
		move.w	$44(a0),d0
		jmp	Sprite_OnScreen_Test2.w

; =============== S U B R O U T I N E =======================================


sub_4952A:

		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		addi.w	#$40,d0
		cmpi.w	#$80,d0
		bhs.w	locret_495D6
		jsr	GetSineCosine.w
		asr.w	#2,d0
		addi.w	#$20,d0
		move.w	d0,d2
		addi.w	#$20,d2
		moveq	#0,d1
		add.w	$14(a1),d1
		sub.w	$14(a0),d1
		add.w	d0,d1
		cmp.w	d2,d1
		bhs.s	locret_495D6
		cmpi.b	#4,5(a1)
		bhs.w	locret_495D6
		tst.b	$2E(a1)
		bne.s	locret_495D6
		sub.w	d0,d1
		bcs.s	loc_49578
		not.w	d1
		add.w	d1,d1

loc_49578:
		add.w	d0,d1
		neg.w	d1
		asr.w	#4,d1
		add.w	d1,$14(a1)
		bset	#1,$2A(a1)
		bclr	#4,$2A(a1)
		move.w	#0,$1A(a1)
		move.b	#0,$2F(a1)
		move.b	#0,$40(a1)
		move.w	#1,$1C(a1)
		move.b	(Level_frame_counter+1).w,d0
		andi.b	#$F,d0
		bne.s	loc_495B8
		moveq	#-$27,d0
		jsr	Play_Sound_2.w

loc_495B8:
		tst.b	$27(a1)
		bne.s	locret_495D6
		move.b	#1,$27(a1)
		move.b	#0,$20(a1)
		move.b	#$7F,$30(a1)
		move.b	#8,$31(a1)

locret_495D6:

		rts
; End of function sub_4952A

; ---------------------------------------------------------------------------
Map_DEZHoverMachine:include "Levels/DEZ/Misc Object Data/Map - Hover Machine.asm"

; ---------------------------------------------------------------------------

Obj_5F_2:
		lea	$30(a0),a2
		lea	(Player_1).w,a1
		move.w	(Ctrl_1_logical).w,d4
		bsr.s	sub_4964A
		lea	$31(a0),a2
		lea	(Player_2).w,a1
		move.w	(Ctrl_2_logical).w,d4
		bsr.s	sub_4964A

		cmp.w	#$FFFF,$30(a0)			; NAT: Check if both are being fancy
		bne.s	.nofancy			; if not, branch
		move.b	#$7F,BossHitMode.w		; NAT: Prevent death

		lea	Player_1+x_pos.w,a1		; get p1 x-pos to a1
		lea	Player_2+x_pos.w,a2		; get p2 x-pos to a2
		cmp.b	#2,BoxWinner.w			; check if tails winrar
		bne.s	.wingot				; branch if not
		exg	a1,a2				; swap the address registers

.wingot		move.w	(a1),d0				; get player x-pos
		sub.w	(a2),d0				; sub other player x-pos
		bpl.s	.abs				; branch if positive
		neg.w	d0				; negate difference

.abs		cmp.w	#$140,d0			; check if difference is small
		ble.s	.nofancy			; if so, branch
		move.w	CamFollow_Y.w,Scroll_forced_Y_pos.w; copy camera y-pos
		st	Scroll_force_positions.w	; enable custom camera pos

		move.w	(a1),d0				; get player x-pos to d0
		sub.w	#$90,d0				; get near the end of the screen
		move.w	d0,Scroll_forced_X_pos.w		; set as the camera pos

.nofancy	move.w	$10(a0),d0
		addi.w	#$400,d0
		andi.w	#-$80,d0
		sub.w	(Camera_X_pos_coarse_back).w,d0
		cmpi.w	#$680,d0
		bhi.s	loc_49638
		rts
; ---------------------------------------------------------------------------

loc_49638:
		move.w	respawn_addr(a0),d0
		beq.s	loc_49644
		movea.w	d0,a2
		bclr	#7,(a2)

loc_49644:
		jmp	Delete_Current_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_4964A:
		tst.b	(a2)
		bne.s	loc_496A8
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		cmpi.w	#$500,d0
		bhs.s	locret_496A6
		move.w	$14(a1),d0
		sub.w	$14(a0),d0
		addi.w	#$140,d0
		cmpi.w	#$280,d0
		bhs.s	locret_496A6
		tst.b	(Debug_On).w
		bne.s	locret_496A6
		move.b	#1,$27(a1)
		clr.b	$20(a1)
		st.b	$30(a1)
		move.b	#4,$31(a1)
		bclr	#4,$2A(a1)
		clr.b	$40(a1)
		bset	#1,$2A(a1)
		move.b	#1,$2E(a1)
		st.b	(a2)

locret_496A6:

		rts
; ---------------------------------------------------------------------------

loc_496A8:
		tst.b	(Debug_On).w
		bne.s	loc_496BC
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		cmpi.w	#$500,d0
		blo.s	loc_496C8

loc_496BC:
		clr.b	$2E(a1)
		clr.b	(a2)
		clr.b	BossHitMode.w			; NAT: allow death
		rts
; ---------------------------------------------------------------------------

loc_496C8:
		addi.w	#$38,$18(a1)
		move.w	#$600,d6
		move.w	#$18,d5
		move.w	$1A(a1),d0
		btst	#8,d4
		beq.s	loc_496F2
		sub.w	d5,d0
		move.w	d6,d1
		neg.w	d1
		cmp.w	d1,d0
		bgt.s	loc_496F2
		add.w	d5,d0
		cmp.w	d1,d0
		ble.s	loc_496F2
		move.w	d1,d0

loc_496F2:

		btst	#9,d4
		beq.s	loc_49706
		add.w	d5,d0
		cmp.w	d6,d0
		blt.s	loc_49706
		sub.w	d5,d0
		cmp.w	d6,d0
		bge.s	loc_49706
		move.w	d6,d0

loc_49706:

		move.w	d0,$1A(a1)
		move.w	$1A(a1),d0
		move.w	d0,d1
		asr.w	#5,d1
		beq.s	loc_49730
		bmi.s	loc_49724
		sub.w	d1,d0
		bcc.s	loc_4971E
		move.w	#0,d0

loc_4971E:
		move.w	d0,$1A(a1)
		bra.s	loc_49730
; ---------------------------------------------------------------------------

loc_49724:
		sub.w	d1,d0
		bcs.s	loc_4972C
		move.w	#0,d0

loc_4972C:
		move.w	d0,$1A(a1)

loc_49730:

		movem.l	d0-a6,-(sp)
		movea.l	a1,a0
		jsr	MoveSprite2.w
		jsr	(Player_JumpAngle).l
		jsr	(SonicKnux_DoLevelCollision).l
		movem.l	(sp)+,d0-a6
		bset	#1,$2A(a1)
		move.b	(Level_frame_counter+1).w,d0
		andi.b	#$F,d0
		bne.s	locret_49764
		moveq	#-$2C,d0
		jmp	Play_Sound_2.w

locret_49764:
		rts

; ---------------------------------------------------------------------------

Obj_DEZBumperWall:

		move.l	#Map_DEZBumperWall,$C(a0)
		move.w	#$232D,$A(a0)
		ori.b	#4,4(a0)
		move.b	#$C,7(a0)
		move.b	#$20,6(a0)
		move.w	#prio(5),8(a0)
		move.b	$2C(a0),d0
		beq.s	loc_497A6
		bmi.s	loc_497AE
		move.b	#8,7(a0)
		move.b	d0,6(a0)
		move.l	#loc_49804,(a0)
		bra.s	loc_49804
; ---------------------------------------------------------------------------

loc_497A6:
		move.l	#loc_497C2,(a0)
		bra.s	loc_497C2
; ---------------------------------------------------------------------------

loc_497AE:
		move.l	#loc_497B4,(a0)

loc_497B4:
		cmpi.b	#$3F,(Pollen_Counter).w
		bne.s	loc_497C2
		move.w	#$7F00,$10(a0)

loc_497C2:


		move.w	#$17,d1
		move.w	#$20,d2
		move.w	#$21,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull2.w
		swap	d6
		andi.w	#3,d6
		beq.s	loc_497FE
		move.w	d6,d0
		andi.w	#1,d0
		beq.s	loc_497F0
		lea	(Player_1).w,a1
		moveq	#5,d5
		bsr.s	sub_49848

loc_497F0:
		andi.w	#2,d6
		beq.s	loc_497FE
		lea	(Player_2).w,a1
		moveq	#6,d5
		bsr.s	sub_49848

loc_497FE:

		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_49804:

		move.w	#$13,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull2.w
		swap	d6
		andi.w	#3,d6
		beq.s	loc_49842
		move.w	d6,d0
		andi.w	#1,d0
		beq.s	loc_49834
		lea	(Player_1).w,a1
		moveq	#5,d5
		bsr.s	sub_49848

loc_49834:
		andi.w	#2,d6
		beq.s	loc_49842
		lea	(Player_2).w,a1
		moveq	#6,d5
		bsr.s	sub_49848

loc_49842:

		jmp	Delete_Sprite_If_Not_In_Range.w

; =============== S U B R O U T I N E =======================================


sub_49848:

		moveq	#-$56,d0
		jsr	Play_Sound_2.w

loc_49850:
		bclr	#0,$2A(a1)
		move.w	#$C00,$18(a1)
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		bcc.s	loc_49870
		bset	#0,$2A(a1)
		neg.w	$18(a1)

loc_49870:
		bclr	d5,$2A(a0)
		bset	#1,$2A(a1)
		bclr	#5,$2A(a1)
		move.b	#0,$2F(a1)
		bclr	#4,$2A(a1)
		clr.b	$40(a1)
		move.w	#1,$1C(a1)
		tst.b	$27(a1)
		bne.s	loc_498A2
		move.b	#1,$27(a1)

loc_498A2:
		move.b	#0,$20(a1)
		move.b	#-1,$30(a1)
		move.b	#4,$31(a1)
		btst	#0,$2A(a1)
		beq.s	locret_498C0
		neg.w	$1C(a1)

locret_498C0:
		rts
; End of function sub_49848

; ---------------------------------------------------------------------------
Map_DEZBumperWall:include "Levels/DEZ/Misc Object Data/Map - Bumper Wall.asm"

; ---------------------------------------------------------------------------

Obj_DEZGravityPuzzle:

		move.l	#Map_DEZGravityPuzzle,$C(a0)
		move.w	#$232D,$A(a0)
		ori.b	#4,4(a0)
		move.b	#$20,7(a0)
		move.b	#$30,6(a0)
		move.w	#prio(5),8(a0)
		move.w	$14(a0),$46(a0)
		jsr	Create_New_Sprite3.w
		bne.w	loc_49980
		move.l	#Sprite_OnScreen_Test,(a1)
		move.l	$C(a0),$C(a1)
		move.w	$A(a0),$A(a1)
		move.b	4(a0),4(a1)
		move.b	#$20,7(a1)
		move.b	#$30,6(a1)
		move.w	#prio(4),8(a1)
		bset	#6,4(a1)
		move.w	$10(a0),d2
		move.w	d2,$10(a1)
		move.w	$14(a0),d3
		move.w	d3,$14(a1)
		move.b	(Pollen_Counter).w,d4
		lea	$18(a1),a2
		lea	byte_49A5A(pc),a3
		moveq	#6,d1
		move.w	d1,$16(a1)
		subq.w	#1,d1

loc_4995C:
		move.b	(a3)+,d0
		ext.w	d0
		add.w	d2,d0
		move.w	d0,(a2)+
		move.b	(a3)+,d0
		ext.w	d0
		add.w	d3,d0
		move.w	d0,(a2)+
		addq.w	#1,a2
		move.b	(a3)+,(a2)+
		lsr.b	#1,d4
		bcc.s	loc_49978
		subq.b	#2,-1(a2)

loc_49978:
		dbf	d1,loc_4995C
		move.w	a1,$3E(a0)

loc_49980:
		move.l	#loc_49986,(a0)

loc_49986:
		move.b	$26(a0),d0
		addq.b	#1,$26(a0)
		jsr	GetSineCosine.w
		asr.w	#2,d0
		add.w	$46(a0),d0
		move.w	d0,$14(a0)
		movea.w	$3E(a0),a2
		lea	$1A(a2),a3
		lea	byte_49A5B(pc),a4
		moveq	#5,d1

loc_499AC:
		move.b	(a4),d2
		ext.w	d2
		add.w	d0,d2
		move.w	d2,(a3)+
		addq.w	#4,a3
		addq.w	#3,a4
		dbf	d1,loc_499AC
		move.w	#$23,d1
		move.w	#$30,d2
		move.w	#$31,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull2.w
		swap	d6
		andi.w	#3,d6
		beq.s	loc_499FC
		move.w	d6,d0
		andi.w	#1,d0
		beq.s	loc_499EC
		lea	(Player_1).w,a1
		bsr.s	sub_49A0E
		moveq	#5,d5
		bsr.s	sub_49A02

loc_499EC:
		andi.w	#2,d6
		beq.s	loc_499FC
		bsr.s	sub_49A0E
		lea	(Player_2).w,a1
		moveq	#6,d5
		bsr.s	sub_49A02

loc_499FC:

		jmp	Sprite_OnScreen_Test.w

; =============== S U B R O U T I N E =======================================


sub_49A02:

		moveq	#$74,d0
		jsr	Play_Sound_2.w
		bra.w	loc_49850
; End of function sub_49A02


; =============== S U B R O U T I N E =======================================


sub_49A0E:

		moveq	#0,d1
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		bcs.s	loc_49A1C
		moveq	#3,d1

loc_49A1C:
		move.w	$14(a1),d0
		sub.w	$14(a0),d0
		addi.w	#$30,d0
		bpl.s	loc_49A2C
		moveq	#0,d0

loc_49A2C:
		cmpi.w	#$60,d0
		blo.s	loc_49A34
		moveq	#$40,d0

loc_49A34:
		lsr.w	#5,d0
		add.w	d1,d0
		bset	d0,(Pollen_Counter).w
		movea.w	$3E(a0),a2
		move.w	d0,d1
		add.w	d0,d0
		add.w	d1,d0
		add.w	d0,d0
		addi.w	#$1D,d0
		cmpi.b	#3,(a2,d0.w)
		blo.s	locret_49A58
		subq.b	#2,(a2,d0.w)

locret_49A58:
		rts
; End of function sub_49A0E

; ---------------------------------------------------------------------------
byte_49A5A:	dc.b $E4
byte_49A5B:	dc.b $E0
		dc.b 3
		dc.b $E4
		dc.b 0
		dc.b 3
		dc.b $E4
		dc.b $20
		dc.b 3
		dc.b $1C
		dc.b $E0
		dc.b 4
		dc.b $1C
		dc.b 0
		dc.b 4
		dc.b $1C
		dc.b $20
		dc.b 4
Map_DEZGravityPuzzle:include "Levels/DEZ/Misc Object Data/Map - Gravity Puzzle.asm"

; ---------------------------------------------------------------------------

Obj_PachinkoTriangleBumper:

; =============== S U B R O U T I N E =======================================


sub_49B76:

		moveq	#-$56,d0
		jsr	Play_Sound_2.w
		bclr	#0,$2A(a1)
		move.w	#$800,$18(a1)
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		bcc.s	loc_49B9E
		bset	#0,$2A(a1)
		neg.w	$18(a1)

loc_49B9E:
		bclr	d5,$2A(a0)
		bset	#1,$2A(a1)
		bclr	#5,$2A(a1)
		move.b	#0,$2F(a1)
		bclr	#4,$2A(a1)
		clr.b	$40(a1)
		move.w	#1,$1C(a1)
		tst.b	$27(a1)
		bne.s	loc_49BD0
		move.b	#1,$27(a1)

loc_49BD0:
		move.b	#0,$20(a1)
		move.b	#-1,$30(a1)
		move.b	#4,$31(a1)
		btst	#0,$2A(a1)
		beq.s	loc_49BEE
		neg.w	$1C(a1)

loc_49BEE:
		move.b	#1,$20(a0)
		rts
; End of function sub_49B76

; ---------------------------------------------------------------------------
Ani_PachinkoTriangleBumper:;	include "Levels/Pachinko/Misc Object Data/Anim - Triangle Bumper.asm"

Map_PachinkoTriangleBumper:;include "Levels/Pachinko/Misc Object Data/Map - Triangle Bumper.asm"


; ---------------------------------------------------------------------------

Obj_PachinkoFlipper:
Obj_PachinkoEnergyTrap:
Obj_PachinkoInvisibleUnknown:
Obj_Pachinko_Platform:
Obj_PachinkoItemOrb:
Obj_GumballItem:
Obj_EC_1:
; ---------------------------------------------------------------------------

Obj_LRZChainedPlatforms:

		move.b	$2C(a0),d0
		bmi.w	loc_4A6F4
		move.l	#Map_LRZChainedPlatforms,$C(a0)
		move.w	#$240D,$A(a0)
		ori.b	#4,4(a0)
		move.b	#$18,7(a0)
		move.b	#$18,6(a0)
		move.w	#prio(4),8(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	d0,d1
		lsr.w	#3,d0
		andi.w	#$1E,d0
		lea	off_4A890(pc),a2
		adda.w	(a2,d0.w),a2
		move.w	(a2)+,$3C(a0)
		move.l	a2,$40(a0)
		andi.w	#$F,d1
		lsl.w	#2,d1
		move.b	d1,$3C(a0)
		move.b	#4,$3E(a0)
		btst	#0,$2A(a0)
		beq.s	loc_4A6CE
		neg.b	$3E(a0)
		moveq	#0,d1
		move.b	$3C(a0),d1
		add.b	$3E(a0),d1
		cmp.b	$3D(a0),d1
		blo.s	loc_4A6CA
		move.b	d1,d0
		moveq	#0,d1
		tst.b	d0
		bpl.s	loc_4A6CA
		move.b	$3D(a0),d1
		subq.b	#4,d1

loc_4A6CA:

		move.b	d1,$3C(a0)

loc_4A6CE:
		move.w	(a2,d1.w),d0
		add.w	$34(a0),d0
		move.w	d0,$38(a0)
		move.w	2(a2,d1.w),d0
		add.w	$36(a0),d0
		move.w	d0,$3A(a0)
		bsr.w	sub_4A818
		move.l	#loc_4A74A,(a0)
		bra.w	loc_4A74A
; ---------------------------------------------------------------------------

loc_4A6F4:
		andi.w	#$7F,d0
		add.w	d0,d0
		lea	(off_4A914).l,a2
		adda.w	(a2,d0.w),a2
		move.w	(a2)+,d1
		movea.l	a0,a1
		move.w	$10(a0),d2
		move.w	$14(a0),d3
		bra.s	loc_4A71A
; ---------------------------------------------------------------------------

loc_4A712:
		jsr	Create_New_Sprite.w
		bne.s	loc_4A744

loc_4A71A:
		move.l	#Obj_LRZChainedPlatforms,(a1)
		move.w	(a2)+,d0
		add.w	d2,d0
		move.w	d0,$10(a1)
		move.w	(a2)+,d0
		add.w	d3,d0
		move.w	d0,$14(a1)
		move.w	d2,$34(a1)
		move.w	d3,$36(a1)
		move.w	(a2)+,d0
		move.b	d0,$2C(a1)
		move.b	$2A(a0),$2A(a1)

loc_4A744:
		dbf	d1,loc_4A712
		rts
; ---------------------------------------------------------------------------

loc_4A74A:

		move.w	$10(a0),-(sp)
		bsr.w	sub_4A7BA
		moveq	#0,d1
		move.b	7(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	(sp)+,d4
		jsr	SolidObjectFull.w
		swap	d6
		andi.w	#$C,d6
		beq.s	loc_4A798
		move.b	d6,d0
		andi.b	#4,d0
		beq.s	loc_4A788
		lea	(Player_1).w,a1
		jsr	sub_24280.w

loc_4A788:
		andi.b	#8,d6
		beq.s	loc_4A798
		lea	(Player_2).w,a1
		jsr	sub_24280.w

loc_4A798:

		tst.b	4(a0)
		bpl.s	loc_4A7B0
		move.b	(Level_frame_counter+1).w,d0
		andi.b	#$F,d0
		bne.s	loc_4A7B0
		moveq	#-$6C,d0
		jsr	Play_Sound_2.w

loc_4A7B0:

		move.w	$34(a0),d0
		jmp	Sprite_OnScreen_Test2.w

; =============== S U B R O U T I N E =======================================


sub_4A7BA:
		move.w	$10(a0),d0
		cmp.w	$38(a0),d0
		bne.s	loc_4A810
		move.w	$14(a0),d0
		cmp.w	$3A(a0),d0
		bne.s	loc_4A810
		moveq	#0,d1
		move.b	$3C(a0),d1
		add.b	$3E(a0),d1
		cmp.b	$3D(a0),d1
		blo.s	loc_4A7EC
		move.b	d1,d0
		moveq	#0,d1
		tst.b	d0
		bpl.s	loc_4A7EC
		move.b	$3D(a0),d1
		subq.b	#4,d1

loc_4A7EC:

		move.b	d1,$3C(a0)
		movea.l	$40(a0),a1
		move.w	(a1,d1.w),d0
		add.w	$34(a0),d0
		move.w	d0,$38(a0)
		move.w	2(a1,d1.w),d0
		add.w	$36(a0),d0
		move.w	d0,$3A(a0)
		bsr.w	sub_4A818

loc_4A810:

		jsr	MoveSprite2.w
		rts
; End of function sub_4A7BA


; =============== S U B R O U T I N E =======================================


sub_4A818:

		moveq	#0,d0
		move.w	#-$100,d2
		move.w	$10(a0),d0
		sub.w	$38(a0),d0
		bcc.s	loc_4A82C
		neg.w	d0
		neg.w	d2

loc_4A82C:
		moveq	#0,d1
		move.w	#-$100,d3
		move.w	$14(a0),d1
		sub.w	$3A(a0),d1
		bcc.s	loc_4A840
		neg.w	d1
		neg.w	d3

loc_4A840:
		cmp.w	d0,d1
		blo.s	loc_4A86A
		move.w	$10(a0),d0
		sub.w	$38(a0),d0
		beq.s	loc_4A856
		ext.l	d0
		asl.l	#8,d0
		divs.w	d1,d0
		neg.w	d0

loc_4A856:
		move.w	d0,$18(a0)
		move.w	d3,$1A(a0)
		swap	d0
		move.w	d0,$12(a0)
		clr.w	$16(a0)
		rts
; ---------------------------------------------------------------------------

loc_4A86A:
		move.w	$14(a0),d1
		sub.w	$3A(a0),d1
		beq.s	loc_4A87C
		ext.l	d1
		asl.l	#8,d1
		divs.w	d0,d1
		neg.w	d1

loc_4A87C:
		move.w	d1,$1A(a0)
		move.w	d2,$18(a0)
		swap	d1
		move.w	d1,$16(a0)
		clr.w	$12(a0)
		rts
; End of function sub_4A818

; ---------------------------------------------------------------------------
off_4A890:	dc.w word_4A896-off_4A890

		dc.w word_4A8C0-off_4A890
		dc.w word_4A8EA-off_4A890
word_4A896:	dc.w	$28,	 0,	0, $FFEA,    $A, $FFE0,	  $20, $FFE0,	$C0, $FFEA,   $D6,     0,   $E0,   $16,	  $D6,	 $20

		dc.w	$C0,   $20,   $20,   $16,    $A
word_4A8C0:	dc.w	$28,	 0,	0, $FFEA,    $A, $FFE0,	  $20, $FFE0,  $140, $FFEA,  $156,     0,  $160,   $16,	 $156,	 $20

		dc.w   $140,   $20,   $20,   $16,    $A
word_4A8EA:	dc.w	$28,	 0,	0, $FFEA,    $A, $FFE0,	  $20, $FFE0,  $1C0, $FFEA,  $1D6,     0,  $1E0,   $16,	 $1D6,	 $20

		dc.w   $1C0,   $20,   $20,   $16,    $A
off_4A914:	dc.w word_4A91A-off_4A914

		dc.w word_4A934-off_4A914
		dc.w word_4A94E-off_4A914
word_4A91A:	dc.w	  3,	 0,	0,     1, $FFE0,   $70,	    3,	   0,	$E0,	 6,   $20,   $70,     8

word_4A934:	dc.w	  3,	 0,	0,   $11, $FFE0,   $B0,	  $13,	   0,  $160,   $16,   $20,   $B0,   $18

word_4A94E:	dc.w	  7,	 0,	0,   $21, $FFE0,   $72,	  $23, $FFE0,	$F0,   $23, $FFE0,  $16E,   $23,     0,	 $1E0,	 $26

		dc.w	$20,  $16E,   $28,   $20,   $F0,   $28,	  $20,	 $72,	$28
Map_LRZChainedPlatforms:include "Levels/LRZ/Misc Object Data/Map - Chained Platforms.asm"

; ---------------------------------------------------------------------------

Obj_SOZRapelWire:
		tst.b	OptionsBits.w		; NAT: Check if alt layouts
		bmi.w	loc_4AD74		; if so, just delete m8
		movea.l	a0,a1
		move.l	#loc_4AA80,(a1)
		bsr.w	sub_4AA46
		move.b	#$20,$22(a1)
		move.w	$10(a0),d2
		move.w	$14(a0),d3
		move.w	d2,$3E(a0)
		move.w	d3,$40(a0)
		move.b	$2C(a0),d1
		andi.b	#$F,d1
		move.b	d1,$36(a0)
		move.w	#$30,$32(a0)
		moveq	#$F,d1
		addq.w	#1,d1
		jsr	Create_New_Sprite3.w
		bne.w	loc_4AA44
		move.w	a1,$44(a0)
		move.l	#loc_4AD7A,(a1)
		move.w	a0,$42(a1)
		bra.s	loc_4AA16
; ---------------------------------------------------------------------------

loc_4A9FA:
		jsr	Create_New_Sprite3.w
		bne.w	loc_4AA44
		move.l	#loc_4AE50,(a1)
		move.w	a2,$42(a1)
		move.w	a1,$44(a2)
		move.w	a0,$46(a1)

loc_4AA16:
		movea.l	a1,a2
		bsr.s	sub_4AA46
		move.w	d2,$10(a1)
		move.w	d3,$14(a1)
		addi.w	#$10,d3
		addq.w	#1,$34(a0)
		move.w	$34(a0),$34(a1)
		dbf	d1,loc_4A9FA
		move.l	#loc_4AF0A,(a1)
		move.b	#$21,$22(a1)
		move.w	a1,$46(a0)

loc_4AA44:

		bra.s	loc_4AA80

; =============== S U B R O U T I N E =======================================


sub_4AA46:

		move.b	#4,4(a1)
		move.b	#$10,7(a1)
		move.b	#$10,6(a1)
		move.w	#prio(5),8(a1)
		move.l	#Map_SOZRapelWire,$C(a1)
		move.w	#$4411,$A(a1)
		move.b	$2A(a0),$2A(a1)
		move.w	$10(a0),$3E(a1)
		move.w	$14(a0),$40(a1)
		rts
; End of function sub_4AA46

; ---------------------------------------------------------------------------

loc_4AA80:

		movea.w	$46(a0),a1
		tst.w	$38(a1)
		beq.s	loc_4AA90
		move.l	#loc_4AA94,(a0)

loc_4AA90:
		bra.w	loc_4AD32
; ---------------------------------------------------------------------------

loc_4AA94:
		movea.w	$46(a0),a1
		tst.w	$38(a1)
		bne.s	loc_4AAA4
		move.l	#loc_4ACC6,(a0)

loc_4AAA4:
		addq.w	#2,$32(a0)
		cmpi.w	#$C0,$32(a0)
		bne.s	loc_4AAC4
		moveq	#$4C,d0
		jsr	Play_Sound_2.w
		move.l	#loc_4AAC8,(a0)
		move.w	#1,$2E(a0)

loc_4AAC4:
		bra.w	loc_4AD32
; ---------------------------------------------------------------------------

loc_4AAC8:

		movea.w	$46(a0),a1
		tst.w	$38(a1)
		bne.s	loc_4AAD8
		move.l	#loc_4ACC6,(a0)

loc_4AAD8:
		move.w	(Ctrl_1_logical).w,d0		; NAT: Fixing Tails I guess?
		tst.b	$38(a1)				; Old!!!
		bne.s	.chk2p
		move.w	(Ctrl_2_logical).w,d0
		bra.s	.ok

.chk2p		tst.b	$39(a1)
		beq.s	.ok
		or.w	(Ctrl_2_logical).w,d0

.ok		btst	#9,d0				; NAT: Check for down button
		bne.w	loc_4AB6A			; if so, ignore
		andi.w	#$70,d0
		beq.w	loc_4AB6A
		moveq	#$62,d0
		jsr	Play_Sound_2.w
		move.b	$2C(a0),d1
		andi.w	#$F0,d1
		bne.s	loc_4AB16
		move.l	#loc_4AB6E,(a0)
		move.w	#$3F,$30(a0)
		clr.b	$26(a0)
		subq.b	#1,$36(a0)
		bne.s	loc_4AB6A
		move.l	#loc_4AB9E,(a0)
		bra.s	loc_4AB6A
; ---------------------------------------------------------------------------

loc_4AB16:
		lsl.w	#1,d1
		subi.w	#6,d1
		subq.w	#1,d1
		move.w	d1,$30(a0)
		move.l	#loc_4ABD8,(a0)
		move.b	#-$80,$26(a0)
		move.b	#-$80,$37(a0)
		move.w	#$400,$18(a0)
		btst	#0,$2A(a0)
		bne.s	loc_4AB4C
		neg.w	$18(a0)
		move.b	#0,$37(a0)

loc_4AB4C:
		bchg	#0,$2A(a0)
		move.w	#3,$2E(a0)
		move.w	#6,$3C(a0)
		subq.b	#1,$36(a0)
		bne.s	loc_4AB6A
		move.l	#loc_4AC3A,(a0)

loc_4AB6A:

		bra.w	loc_4AD32
; ---------------------------------------------------------------------------

loc_4AB6E:
		movea.w	$46(a0),a1
		tst.w	$38(a1)
		bne.s	loc_4AB7E
		move.l	#loc_4ACC6,(a0)

loc_4AB7E:
		addq.b	#2,$26(a0)
		addq.w	#2,$32(a0)
		subq.w	#1,$30(a0)
		bpl.s	loc_4AB9A
		moveq	#$4C,d0
		jsr	Play_Sound_2.w
		move.l	#loc_4AAC8,(a0)

loc_4AB9A:
		bra.w	loc_4AD32
; ---------------------------------------------------------------------------

loc_4AB9E:
		move.w	#2,$2E(a0)
		move.l	#loc_4ABAA,(a0)

loc_4ABAA:
		movea.w	$46(a0),a1
		tst.w	$38(a1)
		bne.s	loc_4ABBA
		move.l	#loc_4ACC6,(a0)

loc_4ABBA:
		addq.b	#2,$26(a0)
		addq.w	#2,$32(a0)
		subq.w	#1,$30(a0)
		bpl.s	loc_4ABD4
		move.b	$26(a0),$27(a0)
		move.l	#loc_4AC98,(a0)

loc_4ABD4:
		bra.w	loc_4AD32
; ---------------------------------------------------------------------------

loc_4ABD8:
		jsr	MoveSprite2.w
		movea.w	$46(a0),a1
		tst.w	$38(a1)
		bne.s	loc_4ABEE
		move.l	#loc_4ACC6,(a0)

loc_4ABEE:
		cmpi.w	#$1A,$30(a0)
		blo.s	loc_4AC02
		bne.s	loc_4ABFE
		move.w	#1,$2E(a0)

loc_4ABFE:
		addq.b	#4,$37(a0)

loc_4AC02:
		addq.b	#2,$26(a0)
		addq.w	#1,$32(a0)
		subq.w	#1,$30(a0)
		bpl.s	loc_4AC24
		move.w	#0,$18(a0)
		moveq	#$4C,d0
		jsr	Play_Sound_2.w
		move.l	#loc_4AAC8,(a0)

loc_4AC24:
		tst.w	$3C(a0)
		beq.s	loc_4AC36
		subq.w	#1,$3C(a0)
		addq.w	#1,$32(a0)
		addq.b	#2,$26(a0)

loc_4AC36:
		bra.w	loc_4AD32
; ---------------------------------------------------------------------------

loc_4AC3A:
		jsr	MoveSprite2.w
		movea.w	$46(a0),a1
		tst.w	$38(a1)
		bne.s	loc_4AC50
		move.l	#loc_4ACC6,(a0)

loc_4AC50:
		cmpi.w	#$1A,$30(a0)
		blo.s	loc_4AC5C
		addq.b	#4,$37(a0)

loc_4AC5C:
		addq.b	#2,$26(a0)
		addq.w	#1,$32(a0)
		subq.w	#1,$30(a0)
		bpl.s	loc_4AC82
		move.w	#0,$18(a0)
		move.w	#2,$2E(a0)
		move.b	$26(a0),$27(a0)
		move.l	#loc_4AC98,(a0)

loc_4AC82:
		tst.w	$3C(a0)
		beq.s	loc_4AC94
		subq.w	#1,$3C(a0)
		addq.w	#1,$32(a0)
		addq.b	#2,$26(a0)

loc_4AC94:
		bra.w	loc_4AD32
; ---------------------------------------------------------------------------

loc_4AC98:

		movea.w	$46(a0),a1
		tst.w	$38(a1)
		bne.s	loc_4ACA8
		move.l	#loc_4ACC6,(a0)

loc_4ACA8:
		addq.b	#2,$27(a0)
		cmpi.b	#-4,$27(a0)
		bhs.s	loc_4ACBC
		cmpi.b	#-$7A,$27(a0)
		bhs.s	loc_4ACC2

loc_4ACBC:
		move.b	$27(a0),$26(a0)

loc_4ACC2:
		bra.w	loc_4AD32
; ---------------------------------------------------------------------------

loc_4ACC6:
		tst.b	$26(a0)
		beq.s	loc_4AD02
		cmpi.b	#-$7A,$27(a0)
		bhs.s	loc_4ACF6
		addq.b	#2,$26(a0)
		cmpi.b	#-$80,$26(a0)
		blo.s	loc_4ACEE
		cmpi.b	#-4,$26(a0)
		bhs.s	loc_4ACEE
		move.b	#0,$26(a0)

loc_4ACEE:

		move.b	#0,$27(a0)
		bra.s	loc_4AD02
; ---------------------------------------------------------------------------

loc_4ACF6:
		move.b	#-4,$26(a0)
		addq.b	#2,$27(a0)
		bmi.s	loc_4AD32

loc_4AD02:
		subq.w	#4,$32(a0)
		cmpi.w	#$30,$32(a0)
		bhi.s	loc_4AD32
		move.w	#$30,$32(a0)
		clr.w	$2E(a0)
		move.b	$2C(a0),d1
		andi.b	#$F,d1
		move.b	d1,$36(a0)
		move.l	#loc_4AA80,(a0)

		move.w	$3E(a0),d0
		move.w	d0,$10(a0)		; NAT: Reset x-pos
		bset	#0,$2A(a0)		; reset stats
		clr.w	$26(a0)			; NAT: Clear angle
		bra.s	loc_4AD36
; ---------------------------------------------------------------------------

loc_4AD32:

		move.w	$10(a0),d0

loc_4AD36:
		andi.w	#-$80,d0
		sub.w	(Camera_X_pos_coarse_back).w,d0
		cmpi.w	#$280,d0
		bhi.s	loc_4AD4C
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_4AD4C:
		move.w	$34(a0),d2
		subq.w	#1,d2
		bcs.s	loc_4AD68
		movea.w	$44(a0),a2

loc_4AD58:
		movea.l	a2,a1
		movea.w	$44(a1),a2
		jsr	Delete_Referenced_Sprite.w
		dbf	d2,loc_4AD58

loc_4AD68:
		move.w	respawn_addr(a0),d0
		beq.s	loc_4AD74
		movea.w	d0,a2
		bclr	#7,(a2)

loc_4AD74:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_4AD7A:
		movea.w	$42(a0),a1
		move.w	$26(a1),$26(a0)
		move.w	$32(a1),$32(a0)
		move.b	$26(a0),d0
		btst	#0,$2A(a1)
		bne.s	loc_4AD9A
		addi.b	#-$80,d0

loc_4AD9A:
		jsr	(sub_A230).l
		muls.w	#$20,d0
		move.w	$32(a0),d2
		divs.w	d2,d0
		move.w	d0,$18(a0)
		move.w	d0,d1
		asr.w	#4,d1
		jsr	GetArcTan.w
		jsr	(sub_A230).l
		asr.w	#2,d0
		move.w	d0,$1A(a0)
		moveq	#0,d0
		moveq	#0,d1
		move.w	d2,d4
		move.w	d2,d5
		neg.w	d5
		andi.w	#$F,d5
		move.w	$18(a0),d2
		ext.l	d2
		lsl.l	#4,d2
		move.w	$1A(a0),d3
		ext.l	d3
		lsl.l	#4,d3
		subq.w	#1,d5
		bcs.s	loc_4ADF2
		addi.w	#$10,d4

loc_4ADEA:
		sub.l	d2,d0
		sub.l	d3,d1
		dbf	d5,loc_4ADEA

loc_4ADF2:
		lsl.l	#4,d2
		lsl.l	#4,d3
		lsr.w	#4,d4
		subi.w	#$10,d4
		bcc.s	loc_4AE04
		neg.w	d4
		neg.l	d2
		neg.l	d3

loc_4AE04:
		subq.w	#1,d4
		bcs.s	loc_4AE10

loc_4AE08:
		add.l	d2,d0
		add.l	d3,d1
		dbf	d4,loc_4AE08

loc_4AE10:
		add.l	$10(a1),d0
		move.l	d0,$10(a0)
		add.l	$14(a1),d1
		move.l	d1,$14(a0)
		move.w	$18(a0),d1
		move.w	$1A(a0),d2
		jsr	GetArcTan.w
		addi.b	#-$40,d0
		addq.b	#4,d0
		lsr.b	#3,d0
		move.b	d0,$22(a0)
		move.w	$14(a0),d0
		addi.w	#$10,d0
		cmp.w	$40(a0),d0
		ble.s	locret_4AE4E
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

locret_4AE4E:
		rts
; ---------------------------------------------------------------------------

loc_4AE50:
		movea.w	$42(a0),a1
		move.b	$22(a1),$22(a0)
		bsr.w	sub_4AEE0
		cmpi.w	#$D,$34(a0)
		bne.s	loc_4AE7C
		movea.w	$46(a0),a2
		cmpi.w	#2,$2E(a2)
		bne.s	loc_4AE7C
		cmpi.b	#-$7A,$27(a2)
		blo.s	loc_4AE7C
		bsr.s	sub_4AE92

loc_4AE7C:

		move.w	$14(a0),d0
		addi.w	#$10,d0
		cmp.w	$40(a0),d0
		ble.s	locret_4AE90
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

locret_4AE90:
		rts

; =============== S U B R O U T I N E =======================================


sub_4AE92:
		move.b	$27(a2),d0
		btst	#0,$2A(a2)
		beq.s	loc_4AEA2
		addi.b	#-$80,d0

loc_4AEA2:
		jsr	GetSineCosine.w
		muls.w	#$3C,d0
		asr.w	#8,d0
		addi.w	#$40,d0
		jsr	(sub_A230).l
		asr.w	#2,d1
		move.w	d1,$18(a0)
		asr.w	#2,d0
		move.w	d0,$1A(a0)
		move.w	$18(a0),d1
		move.w	$1A(a0),d2
		jsr	GetArcTan.w
		addi.b	#-$40,d0
		addq.b	#4,d0
		lsr.b	#3,d0
		move.b	d0,$22(a0)
		rts
; End of function sub_4AE92


; =============== S U B R O U T I N E =======================================


sub_4AEE0:

		move.w	$18(a1),d0
		move.w	d0,$18(a0)
		ext.l	d0
		lsl.l	#8,d0
		add.l	$10(a1),d0
		move.l	d0,$10(a0)
		move.w	$1A(a1),d1
		move.w	d1,$1A(a0)
		ext.l	d1
		lsl.l	#8,d1
		add.l	$14(a1),d1
		move.l	d1,$14(a0)
		rts
; End of function sub_4AEE0

; ---------------------------------------------------------------------------

loc_4AF0A:
		move.w	$10(a0),d4
		move.w	$14(a0),d5
		movea.w	$42(a0),a1
		bsr.w	sub_4AEE0
		cmp.w	$10(a0),d4
		beq.s	loc_4AF24
		move.w	d4,$3E(a0)

loc_4AF24:
		cmp.w	$14(a0),d5
		beq.s	loc_4AF2E
		move.w	d5,$40(a0)

loc_4AF2E:
		movea.w	$46(a0),a3
		lea	$38(a0),a2
		lea	(Player_1).w,a1
		move.w	(Ctrl_1_logical).w,d0
		bsr.s	sub_4AF80
		lea	(Player_2).w,a1
		addq.w	#1,a2
		move.w	(Ctrl_2_logical).w,d0
		bsr.s	sub_4AF80
		move.b	#$21,$22(a0)
		cmpi.w	#3,$2E(a3)
		bne.s	loc_4AF6A
		moveq	#0,d0
		move.b	$37(a3),d0
		addq.b	#4,d0
		lsr.w	#4,d0
		move.b	RawAni_4AF70(pc,d0.w),$22(a0)

loc_4AF6A:
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
RawAni_4AF70:	dc.b  $24, $25,	$26, $26, $21, $22, $22, $23, $24, $25,	$26, $26, $21, $22, $22, $23

; =============== S U B R O U T I N E =======================================


sub_4AF80:
		tst.b	(a2)
		beq.w	loc_4B130
		bmi.w	loc_4B02A
		tst.b	4(a1)
		bpl.w	loc_4B03C
		cmpi.b	#4,5(a1)
		bhs.w	loc_4B03C

		tst.b	(Debug_On).w
		bne.w	loc_4B03C
		btst	#9,d0			; check if down held
		bne.s	.jp			; if so, chk jump
		cmpi.w	#2,$2E(a3)
		bne.w	loc_4B04A
.jp		andi.b	#$70,d0
		beq.w	loc_4B04A

		clr.b	$2E(a1)
		clr.b	(a2)
		move.w	$10(a0),d1
		sub.w	$3E(a0),d1
		asl.w	#8,d1
		move.w	d1,$18(a1)
		move.w	$14(a0),d1
		sub.w	$40(a0),d1
		asl.w	#8,d1
		move.w	d1,$1A(a1)
		move.b	#$3C,2(a2)
		btst	#$A,d0
		beq.s	loc_4AFEA
		move.w	#-$200,$18(a1)

loc_4AFEA:
		btst	#$B,d0
		beq.s	loc_4AFF6
		move.w	#$200,$18(a1)

loc_4AFF6:
		addi.w	#-$380,$1A(a1)
		bset	#1,$2A(a1)
		move.b	#1,$40(a1)
		move.b	#$E,$1E(a1)
		move.b	#7,$1F(a1)
		move.b	#2,$20(a1)
		bset	#2,$2A(a1)
		moveq	#$62,d0
		jmp	Play_Sound_2.w
; ---------------------------------------------------------------------------

loc_4B02A:
		move.w	#$300,$18(a1)
		move.w	#$200,$1A(a1)

loc_4B036:
		bset	#1,$2A(a1)

loc_4B03C:

		clr.b	$2E(a1)
		clr.b	(a2)

loc_4B042:
		move.b	#$3C,2(a2)
		rts
; ---------------------------------------------------------------------------

loc_4B04A:

		move.w	$10(a0),$10(a1)

loc_4B050:
		move.w	$14(a0),$14(a1)
		addi.w	#$14,$14(a1)
		move.w	$2E(a3),d0
		bne.s	loc_4B070
		move.b	#$14,$20(a1)
		move.b	#-$6E,$22(a1)
		bra.s	loc_4B08E
; ---------------------------------------------------------------------------

loc_4B070:
		cmpi.w	#1,d0
		bne.s	loc_4B0B0
		move.b	#$14,$20(a1)
		moveq	#0,d0
		move.b	$26(a3),d0
		add.b	d0,d0
		addq.b	#8,d0
		lsr.w	#4,d0
		move.b	RawAni_4B0A0(pc,d0.w),$22(a1)

loc_4B08E:

		moveq	#0,d0
		move.b	$22(a1),d0
		move.l	a2,-(sp)
		jsr	(Tails_Carry_LoadPLC).l
		movea.l	(sp)+,a2
		rts
; ---------------------------------------------------------------------------
RawAni_4B0A0:	dc.b  $93, $92,	$92, $92, $91, $91, $90, $90, $90, $90,	$90, $91, $91, $92, $92, $92
; ---------------------------------------------------------------------------

loc_4B0B0:
		cmpi.w	#2,d0
		bne.s	loc_4B0DE
		move.b	#$14,$20(a1)
		moveq	#0,d0
		move.b	$26(a3),d0
		addq.b	#8,d0
		lsr.w	#4,d0

loc_4B0C6:
		move.b	RawAni_4B0CE(pc,d0.w),$22(a1)
		bra.s	loc_4B08E
; ---------------------------------------------------------------------------
RawAni_4B0CE:
		dc.b  $90, $90,	$90, $90, $90, $90, $90, $90, $91, $92,	$92, $92, $92, $92, $92, $91
; ---------------------------------------------------------------------------

loc_4B0DE:
		move.b	#0,$20(a1)
		moveq	#0,d0
		move.b	$37(a3),d0
		addq.b	#4,d0
		lsr.w	#4,d0

loc_4B0EE:
		move.b	RawAni_4B110(pc,d0.w),$22(a1)
		move.b	byte_4B120(pc,d0.w),d0
		andi.b	#-4,4(a1)
		or.b	d0,4(a1)
		andi.b	#-4,$2A(a1)

loc_4B108:
		or.b	d0,$2A(a1)
		bra.w	loc_4B08E
; ---------------------------------------------------------------------------
RawAni_4B110:
		dc.b  $E4, $E5,	$E6, $E6, $E7, $E6, $E6, $E5, $E4, $E8,	$E9, $E9, $EA, $E9, $E9, $E8
byte_4B120:	dc.b	0,   0,	  0,   0,   0,	 1,   1,   1,	1,   0,	  0,   0,   0,	 1,   1,   1
; ---------------------------------------------------------------------------

loc_4B130:
		tst.b	2(a2)
		beq.s	loc_4B13E
		subq.b	#1,2(a2)
		bne.w	locret_4B1CE

loc_4B13E:
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		addi.w	#$10,d0
		cmpi.w	#$20,d0
		bhs.w	locret_4B1CE
		move.w	$14(a1),d1
		sub.w	$14(a0),d1
		cmpi.w	#$18,d1
		bhs.w	locret_4B1CE
		tst.b	$2E(a1)
		bne.s	locret_4B1CE
		cmpi.b	#4,5(a1)
		bhs.s	locret_4B1CE
		tst.b	(Debug_On).w
		bne.s	locret_4B1CE
		clr.w	$18(a1)
		clr.w	$1A(a1)
		clr.w	$1C(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		addi.w	#$14,$14(a1)
		move.b	#$14,$20(a1)
		move.b	#0,$3D(a1)
		move.b	#3,$2E(a1)
		andi.b	#-4,4(a1)
		move.b	$2A(a3),d0
		andi.b	#1,d0
		or.b	d0,4(a1)
		andi.b	#-4,$2A(a1)
		or.b	d0,$2A(a1)
		move.b	#1,(a2)
		moveq	#$4A,d0
		jsr	Play_Sound_2.w

locret_4B1CE:

		rts
; End of function sub_4AF80

; ---------------------------------------------------------------------------
Map_SOZRapelWire:include "Levels/SOZ/Misc Object Data/Map - Rapel Wire.asm"
; =============== S U B R O U T I N E =======================================

Obj_CutsceneKnuckles:
		move.w	a0,(__u_FAA4).w
		moveq	#0,d0
		move.b	$2C(a0),d0
		movea.l	off_61D5E(pc,d0.w),a1
		move.l	a1,(a0)
		jmp	(a1)
; ---------------------------------------------------------------------------
off_61D5E:	dc.l loc_61D92
		dc.l loc_61F98
		dc.l loc_62112
		dc.l loc_6229E
		dc.l loc_624DE	; $10
		dc.l loc_62640
		dc.l loc_628AA
		dc.l loc_62B3A
		dc.l loc_630E0	; $20
		dc.l loc_63A6A
		dc.l loc_63CFC
		dc.l loc_656DA
		dc.l CutsceneKnux_SKIntro
; ---------------------------------------------------------------------------

loc_61D92:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_61DB0(pc,d0.w),d1
		jsr	off_61DB0(pc,d1.w)
		lea	DPLCPtr_6666A(pc),a2
		jsr	Perform_DPLC.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
off_61DB0:	dc.w loc_61DBE-off_61DB0

		dc.w loc_61DF4-off_61DB0
		dc.w loc_61E24-off_61DB0
		dc.w loc_61E64-off_61DB0
		dc.w loc_61E96-off_61DB0
		dc.w loc_61EE0-off_61DB0
		dc.w loc_61F10-off_61DB0
; ---------------------------------------------------------------------------

loc_61DBE:
		lea	ObjDat4_663BA(pc),a1
		jsr	SetUp_ObjAttributesSlotted.w
		bclr	#7,$A(a0)
		move.b	#$13,$1E(a0)
		move.b	#8,$22(a0)
		move.w	#$1400,$10(a0)
		move.w	#$440,$14(a0)
		bsr.w	sub_65DD6
		lea	ChildObjDat_6659A(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_61DF4:
		movea.w	$46(a0),a1
		btst	#7,$2A(a1)
		bne.s	loc_61E02
		rts
; ---------------------------------------------------------------------------

loc_61E02:
		move.b	#4,5(a0)
		bset	#7,$2A(a0)
		move.w	#-$600,$1A(a0)
		move.w	#$80,$18(a0)
		lea	Pal_CutsceneKnux1.w,a1
		jmp	PalLoad_Line1.w
; ---------------------------------------------------------------------------

loc_61E24:
		lea	word_666AF(pc),a1
		jsr	Animate_RawNoSST.w
		jsr	MoveSprite.w
		tst.l	d0
		bmi.s	locret_61E42
		jsr	ObjCheckFloorDist.w
		tst.w	d1
		bmi.s	loc_61E44

locret_61E42:
		rts
; ---------------------------------------------------------------------------

loc_61E44:
		move.b	#6,5(a0)
		add.w	d1,$14(a0)
		move.b	#$16,$22(a0)
		move.w	#$7F,$2E(a0)
		move.l	#loc_61E6A,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_61E64:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_61E6A:
		move.b	#8,5(a0)
		bchg	#0,4(a0)
		move.l	#word_666A9,$30(a0)
		move.w	#-$600,$18(a0)
		clr.w	$1A(a0)
		move.w	#$29,$2E(a0)
		move.l	#loc_61EA8,$34(a0)

loc_61E96:
		jsr	Animate_Raw.w
		jsr	MoveSprite2.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_61EA8:
		neg.w	$18(a0)
		bchg	#0,4(a0)
		move.w	#$29,$2E(a0)
		move.l	#loc_61EC2,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_61EC2:
		move.b	#$A,5(a0)
		move.b	#$16,$22(a0)
		move.w	#$3F,$2E(a0)
		move.l	#loc_61EEC,$34(a0)
		bra.w	loc_62056
; ---------------------------------------------------------------------------

loc_61EE0:
		jsr	Animate_Raw.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_61EEC:
		move.b	#$C,5(a0)
		move.l	#word_666A9,$30(a0)
		move.w	#$600,$18(a0)
		jsr	Create_New_Sprite.w
		bne.s	locret_61F0E
		move.l	#Obj_Song_Fade_ToLevelMusic,(a1)

locret_61F0E:
		rts
; ---------------------------------------------------------------------------

loc_61F10:
		tst.b	4(a0)
		bpl.s	loc_61F22
		jsr	Animate_Raw.w
		jmp	MoveSprite2.w
; ---------------------------------------------------------------------------

loc_61F22:
		clr.b	(PalCyc_Counters2).w
		clr.b	(Ctrl_1_locked).w
		jsr	(AfterBoss_Cleanup).l
		jsr	Remove_From_TrackingSlot.w
		jsr	Create_New_Sprite.w
		bne.s	loc_61F44
		move.l	#Obj_TitleCard,(a1)

loc_61F44:
		move.b	#-$6F,(Level_started_flag).w
		move.b	#-$80,(Update_HUD_timer).w
		clr.l	(Timer).w
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------

loc_61F60:
		lea	ObjDat3_66432(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_61F70,(a0)

loc_61F70:
		movea.w	$46(a0),a1
		btst	#7,$2A(a1)
		bne.s	loc_61F82
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_61F82:
		lea	(word_2A8B0).l,a4
		addq.b	#1,$22(a0)
		move.l	#loc_2A5F8,(a0)
		jmp	(sub_216B0).l
; ---------------------------------------------------------------------------

loc_61F98:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_61FB6(pc,d0.w),d1
		jsr	off_61FB6(pc,d1.w)
		lea	DPLCPtr_6666A(pc),a2
		jsr	Perform_DPLC.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
off_61FB6:	dc.w loc_61FC2-off_61FB6

		dc.w loc_62014-off_61FB6
		dc.w loc_62022-off_61FB6
		dc.w loc_6206E-off_61FB6
		dc.w loc_620AA-off_61FB6
		dc.w loc_620E4-off_61FB6
; ---------------------------------------------------------------------------

loc_61FC2:
		lea	ObjDat4_663BA(pc),a1
		jsr	SetUp_ObjAttributesSlotted.w
		move.w	#$4B8E,$10(a0)
		move.w	#$17D,$14(a0)
		bset	#0,4(a0)
		bsr.w	sub_65DD6
		move.w	#$77,$2E(a0)
		move.l	#loc_6201A,$34(a0)
		lea	Pal_CutsceneKnux1.w,a1
		jsr	PalLoad_Line1.w
		lea	ChildObjDat_6655A(pc),a2
		jsr	CreateChild6_Simple.w
		bne.s	locret_62012
		move.w	#$4B08,$10(a1)
		move.w	#$178,$14(a1)

locret_62012:
		rts
; ---------------------------------------------------------------------------

loc_62014:

		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_6201A:
		move.b	#4,5(a0)
		rts
; ---------------------------------------------------------------------------

loc_62022:
		move.w	$10(a0),d0
		subq.w	#2,d0
		cmpi.w	#$4B3C,d0
		blo.s	loc_6203C
		move.w	d0,$10(a0)
		lea	byte_6669F(pc),a1
		jmp	Animate_RawNoSST.w
; ---------------------------------------------------------------------------

loc_6203C:
		move.b	#6,5(a0)
		bclr	#0,4(a0)
		move.w	#$5F,$2E(a0)
		move.l	#loc_6207A,$34(a0)

loc_62056:

		move.l	#word_666B9,$30(a0)
		clr.b	$24(a0)
		clr.b	$23(a0)
		move.b	#$1C,$22(a0)

locret_6206C:

		rts
; ---------------------------------------------------------------------------

loc_6206E:
		jsr	Animate_Raw.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_6207A:
		move.b	#8,5(a0)

loc_62080:

		move.w	#-$100,$18(a0)
		move.w	#-$400,$1A(a0)

loc_6208C:

		move.l	#word_666AF,$30(a0)
		clr.b	$24(a0)
		clr.b	$23(a0)
		move.b	#8,$22(a0)
		move.b	#$13,$1E(a0)
		rts
; ---------------------------------------------------------------------------

loc_620AA:

		jsr	Animate_Raw.w
		jsr	MoveSprite.w
		tst.w	$1A(a0)
		bmi.s	locret_620D6
		jsr	ObjCheckFloorDist.w
		tst.w	d1
		bpl.s	locret_620D6
		bset	#2,$38(a0)
		bne.s	loc_620D8
		neg.w	$18(a0)
		neg.w	$1A(a0)

locret_620D6:

		rts
; ---------------------------------------------------------------------------

loc_620D8:
		addq.b	#2,5(a0)
		add.w	d1,$14(a0)
		bra.w	loc_62056
; ---------------------------------------------------------------------------

loc_620E4:
		jmp	Animate_Raw.w
; ---------------------------------------------------------------------------

loc_620EA:
		movea.w	$46(a0),a1
		btst	#7,$2A(a1)
		bne.w	loc_62158
		move.b	#8,7(a0)
		moveq	#$13,d1
		move.w	#$20,d2
		move.w	#$40,d3
		move.w	$10(a0),d4
		jmp	SolidObjectFull2.w
; ---------------------------------------------------------------------------

loc_62112:
;		cmpi.b	#2,(Player_1+character_id).w
;		beq.s	loc_62158
		lea	word_62150(pc),a1
		jsr	(Check_CameraInRange).l
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_62142(pc,d0.w),d1
		jsr	off_62142(pc,d1.w)
		lea	DPLCPtr_6666A(pc),a2
		jsr	Perform_DPLC.w
		jmp	Sprite_CheckDeleteTouchSlotted.w
; ---------------------------------------------------------------------------
off_62142:	dc.w loc_6215E-off_62142

		dc.w loc_62194-off_62142
		dc.w loc_62014-off_62142
		dc.w loc_62200-off_62142
		dc.w loc_62014-off_62142
		dc.w loc_620AA-off_62142
		dc.w loc_62242-off_62142
word_62150:	dc.w $540
		dc.w $600
		dc.w $3900
		dc.w $3940
; ---------------------------------------------------------------------------

loc_62158:
Obj_86:
Obj_87:
Obj_SSEntryFlash:
Obj_SSEntryRing:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_6215E:
		lea	ObjDat4_663BA(pc),a1
		jsr	SetUp_ObjAttributesSlotted.w
		move.w	(Camera_min_Y_pos).w,(__u_FA96).w
		move.w	(Camera_max_X_pos).w,(__u_FA92).w
		move.w	#$3940,(Camera_max_X_pos).w
		lea	ChildObjDat_665A2(pc),a2
		jsr	CreateChild1_Normal.w
		bne.s	loc_6218C
		move.b	#2,$2C(a1)

loc_6218C:
		addi.w	#$9E,$10(a0)
		rts
; ---------------------------------------------------------------------------

loc_62194:
		lea	(Player_1).w,a1
		cmpi.w	#$3990,$10(a1)
		blo.s	loc_621AE
		tst.b	$2E(a1)
		bne.s	loc_621AE
		btst	#3,$2A(a1)
		bne.s	loc_621BC

loc_621AE:

		move.w	(Camera_Y_pos).w,(Camera_min_Y_pos).w
		move.w	(Camera_X_pos).w,(Camera_min_X_pos).w
		rts
; ---------------------------------------------------------------------------

loc_621BC:
		move.b	#4,5(a0)
		bsr.w	sub_65DD6
		move.w	#$B3,$2E(a0)
		move.l	#loc_621D6,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_621D6:
		move.b	#6,5(a0)
		bset	#0,4(a0)
		move.w	#$1F,$2E(a0)
		move.l	#loc_62216,$34(a0)
		move.w	#$5C0,(Camera_min_Y_pos).w
		lea	Pal_CutsceneKnux1.w,a1
		jmp	PalLoad_Line1.w
; ---------------------------------------------------------------------------

loc_62200:
		subq.w	#4,$10(a0)
		lea	(byte_6669F).l,a1
		jsr	Animate_RawNoSST.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_62216:
		move.b	#8,5(a0)
		move.b	#$20,$22(a0)
		move.w	#$3F,$2E(a0)
		move.l	#loc_62232,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_62232:
		move.b	#$A,5(a0)
		bchg	#0,4(a0)
		bra.w	loc_62080
; ---------------------------------------------------------------------------

loc_62242:
		jsr	Animate_Raw.w
		tst.b	4(a0)
		bmi.w	locret_6206C
		lea	(Pal_HCZ2).l,a1
		jsr	PalLoad_Line1.w
		lea	ChildObjDat_62280(pc),a2
		jsr	CreateChild1_Normal.w
		jsr	Create_New_Sprite.w
		bne.s	loc_62274
		move.l	#Obj_Song_Fade_ToLevelMusic,(a1)

loc_62274:
		jsr	Remove_From_TrackingSlot.w
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------
ChildObjDat_62280:dc.w 1
		dc.l Obj_DecLevStartYGradual
		dc.b 0
		dc.b 0
		dc.l Obj_IncLevEndXGradual
		dc.b 0
		dc.b 0
word_6228E:	dc.w $176
		dc.w $300
		dc.w $1C00
		dc.w $1E00
word_62296:	dc.w $280
		dc.w $280
		dc.w $1D00
		dc.w $1D00
; ---------------------------------------------------------------------------

loc_6229E:
		cmpi.b	#2,(Player_1+character_id).w
		beq.w	loc_62158
		lea	word_6228E(pc),a1
		jsr	(Check_CameraInRange).l
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_622D0(pc,d0.w),d1
		jsr	off_622D0(pc,d1.w)
		lea	DPLCPtr_6666A(pc),a2
		jsr	Perform_DPLC.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
off_622D0:	dc.w loc_622E4-off_622D0

		dc.w loc_62332-off_622D0
		dc.w loc_62354-off_622D0
		dc.w loc_6237C-off_622D0
		dc.w loc_62354-off_622D0
		dc.w loc_623FE-off_622D0
		dc.w loc_62446-off_622D0
		dc.w loc_625D0-off_622D0
		dc.w $1B00
		dc.w $1D00
; ---------------------------------------------------------------------------

loc_622E4:
		lea	ObjDat4_663BA(pc),a1
		jsr	SetUp_ObjAttributesSlotted.w
		move.l	#word_666BF,$30(a0)
		move.l	#loc_6233E,$34(a0)
		lea	word_62296(pc),a1
		move.b	#Mus_KnuxS3,$26(a0)		; NAT: S3 Variant
		jsr	loc_85D70.w
		moveq	#-$1F,d0			; NAT: fadeout
		jsr	Play_Sound.w
		lea	(Normal_palette_line_2).w,a1
		lea	(Target_palette_line_2).w,a2
		moveq	#7,d6

loc_62318:
		move.l	(a1)+,(a2)+
		dbf	d6,loc_62318
		lea	Pal_CutsceneKnux1.w,a1
		jsr	PalLoad_Line1.w
		lea	ChildObjDat_66560(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_62332:
		jsr	Animate_Raw.w
		jmp	loc_85CA4.w
; ---------------------------------------------------------------------------

loc_6233E:
		move.b	#4,5(a0)
		move.w	#$3F,$2E(a0)
		move.l	#loc_62360,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_62354:

		jsr	Animate_Raw.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_62360:
		move.b	#6,5(a0)
		bset	#0,4(a0)
		move.w	#-$600,$1A(a0)
		move.w	#$140,$18(a0)
		bra.w	loc_6208C
; ---------------------------------------------------------------------------

loc_6237C:
		jsr	Animate_Raw.w
		jsr	MoveSprite.w
		tst.w	$1A(a0)
		bmi.s	locret_623B6
		jsr	ObjCheckFloorDist.w
		tst.w	d1
		bpl.s	locret_623B6
		moveq	#0,d0
		move.b	$39(a0),d0
		cmpi.b	#8,d0
		bhs.s	loc_623B8
		move.l	word_623DA(pc,d0.w),$18(a0)
		addq.b	#4,d0
		move.b	d0,$39(a0)
		bchg	#0,4(a0)

locret_623B6:

		rts
; ---------------------------------------------------------------------------

loc_623B8:
		move.b	#8,5(a0)
		bclr	#0,4(a0)
		add.w	d1,$14(a0)
		move.w	#$3F,$2E(a0)
		move.l	#loc_623E2,$34(a0)
		bra.w	loc_62056
; ---------------------------------------------------------------------------
word_623DA:	dc.w  $FF00, $FC00
		dc.w   $100, $FC00
; ---------------------------------------------------------------------------

loc_623E2:
		move.b	#$A,5(a0)
		bset	#0,4(a0)
		move.w	#-$600,$1A(a0)
		move.w	#$400,$18(a0)
		bra.w	loc_6208C
; ---------------------------------------------------------------------------

loc_623FE:
		jsr	Animate_Raw.w
		jsr	MoveSprite.w
		tst.b	4(a0)
		bmi.w	locret_6206C
		lea	ChildObjDat_66568(pc),a2
		jsr	CreateChild1_Normal.w
		move.w	(__u_FA98).w,(Camera_target_max_Y_pos).w

loc_62422:

		lea	(Target_palette_line_2).w,a1
		lea	(Normal_palette_line_2).w,a2
		moveq	#7,d6

loc_6242C:
		move.l	(a1)+,(a2)+
		dbf	d6,loc_6242C
		lea	(PLC_83D48).l,a1
		jsr	Load_PLC_Raw.w
		jsr	Create_New_Sprite.w
		bne.s	loc_6244C

loc_62446:
		move.l	#Obj_Song_Fade_ToLevelMusic,(a1)

loc_6244C:
		jsr	Remove_From_TrackingSlot.w
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------

loc_62458:
		movea.w	$46(a0),a1
		btst	#7,$2A(a1)
		bne.w	loc_62158
		move.b	#8,7(a0)
		moveq	#$13,d1
		move.w	#$100,d2
		move.w	#$200,d3
		move.w	$10(a0),d4
		jmp	SolidObjectFull2.w
; ---------------------------------------------------------------------------

loc_62480:

		subq.w	#1,$2E(a0)
		bpl.s	locret_624BA
		moveq	#0,d0
		move.b	$39(a0),d0
		cmpi.b	#6,d0
		bhs.s	loc_624BC
		addq.b	#1,$39(a0)
		add.w	d0,d0
		move.w	word_624D0(pc,d0.w),$2E(a0)
		moveq	#0,d1
		btst	#1,d0
		beq.s	loc_624A8
		moveq	#$40,d1

loc_624A8:
		lea	Pal_CNZFlash(pc),a1
		adda.w	d1,a1

; =============== S U B R O U T I N E =======================================


sub_624AE:
		lea	(Normal_palette_line_3).w,a2
		moveq	#$F,d0

loc_624B4:
		move.l	(a1)+,(a2)+
		dbf	d0,loc_624B4

locret_624BA:
		rts
; End of function sub_624AE

; ---------------------------------------------------------------------------

loc_624BC:
		tst.b	$2C(a0)
		beq.s	loc_624CA
		lea	(Pal_CNZ+$20).l,a1
		bsr.s	sub_624AE

loc_624CA:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------
word_624D0:	dc.w 8
		dc.w 4
		dc.w 3
		dc.w 2
		dc.w 4
		dc.w 8
		dc.w 8
; ---------------------------------------------------------------------------

loc_624DE:
		tst.l	$42(a0)			; NAT1: Check if objects exist
		beq.s	.create			; NAT1: If not, create
		cmp.w	#$300,Camera_Y_Pos.w	; NAT1: check if player is out of range
		bge.s	.create			; NAT1: if not, check if objects need to be created
		jmp	Delete_Current_Sprite.w	; NAT1: Delete sprite

.create		move.w	$44(a0),d0		; NAT1: get object 1
		and.w	#$FFFE,d0		; NAT1: make sure we wont get an error
		move.w	d0,a1			; NAT1: copy to a1
		cmp.w	#$828,$14(a1)		; NAT1: Check if it is in the correct position
		beq.s	.obj2			; NAT1: If so, do not load another one

		jsr	Create_New_Sprite.w
		bne.s	.done
		move.l	#Obj_48_1,(a1)
		move.w	#$4740,$10(a1)
		move.w	#$828,$14(a1)
		move.b	#$4C,$2C(a1)
		move.w	a1,$44(a0)

.obj2		move.w	$42(a0),d0		; NAT1: get object 2
		and.w	#$FFFE,d0		; NAT1: make sure we wont get an error
		move.w	d0,a1			; NAT1: copy to a1
		cmp.w	#$A28,$14(a1)		; NAT1: Check if it is in the correct position
		beq.s	.done			; NAT1: If so, do not load another one

		jsr	Create_New_Sprite.w
		bne.s	.done
		move.l	#Obj_48_1,(a1)
		move.w	#$4740,$10(a1)
		move.w	#$A28,$14(a1)
		move.b	#$20,$2C(a1)
		move.w	a1,$42(a0)
.done		rts

		lea	word_62520(pc),a1
		jsr	(Check_CameraInRange).l
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_62510(pc,d0.w),d1
		jsr	off_62510(pc,d1.w)
		lea	DPLCPtr_6666A(pc),a2
		jsr	Perform_DPLC.w
		jmp	Sprite_CheckDeleteTouchSlotted.w
; ---------------------------------------------------------------------------
off_62510:	dc.w loc_62528-off_62510

		dc.w loc_6254E-off_62510
		dc.w loc_6256C-off_62510
		dc.w loc_62014-off_62510
		dc.w loc_620AA-off_62510
		dc.w loc_625BE-off_62510
		dc.w loc_625E2-off_62510
		dc.w loc_6261A-off_62510
word_62520:	dc.w $720
		dc.w $A00
		dc.w $45C0
		dc.w $46E0
; ---------------------------------------------------------------------------

loc_62528:
		lea	ObjDat4_663BA(pc),a1
		jsr	SetUp_ObjAttributesSlotted.w
		clr.w	(Ctrl_1_logical).w
		st	(Ctrl_1_locked).w
		move.b	#-$80,(Player_1+$2E).w
		bsr.w	sub_65DD6
		lea	Pal_CutsceneKnux1.w,a1
		jmp	PalLoad_Line1.w
; ---------------------------------------------------------------------------

loc_6254E:
		lea	(Player_1).w,a1
		cmpi.w	#$4728,$10(a1)
		blo.s	locret_62562
		btst	#1,$2A(a1)
		bne.s	loc_62564

locret_62562:
		rts
; ---------------------------------------------------------------------------

loc_62564:
		move.b	#4,5(a0)
		rts
; ---------------------------------------------------------------------------

loc_6256C:
		move.w	#$808,(Ctrl_1_logical).w
		cmpi.w	#$4760,(Player_1+x_pos).w
		bhs.s	loc_6257C
		rts
; ---------------------------------------------------------------------------

loc_6257C:
		move.b	#6,5(a0)
		clr.w	(Ctrl_1_logical).w
		lea	(Player_1).w,a1
		clr.w	$18(a1)
		clr.w	$1A(a1)
		clr.w	$1C(a1)
		move.w	#$1F,$2E(a0)
		move.l	#loc_625A6,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_625A6:
		move.b	#8,5(a0)
		move.w	#$7F,$2E(a0)
		move.l	#loc_625CA,$34(a0)
		bra.w	loc_62080
; ---------------------------------------------------------------------------

loc_625BE:
		jsr	Animate_Raw.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_625CA:
		move.b	#$C,5(a0)

loc_625D0:
		clr.b	$23(a0)
		clr.b	$24(a0)
		move.l	#byte_6669F,$30(a0)
		rts
; ---------------------------------------------------------------------------

loc_625E2:
		addq.w	#4,$10(a0)
		jsr	Animate_Raw.w
		tst.b	4(a0)
		bmi.w	locret_6206C
		move.b	#$E,5(a0)
		clr.b	(Player_1+$2E).w
		lea	(Pal_CNZ).l,a1
		jsr	PalLoad_Line1.w
		jsr	Create_New_Sprite.w
		bne.s	locret_62618
		move.l	#Obj_Song_Fade_ToLevelMusic,(a1)

locret_62618:
		rts
; ---------------------------------------------------------------------------

loc_6261A:
		move.w	#$404,(Ctrl_1_logical).w
		move.w	(Camera_Y_pos).w,d0
		addi.w	#$160,d0
		cmp.w	$14(a0),d0
		blo.s	loc_62630
		rts
; ---------------------------------------------------------------------------

loc_62630:
		clr.b	(Ctrl_1_locked).w
		jsr	Remove_From_TrackingSlot.w
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------

loc_62640:
		cmpi.b	#2,(Player_1+character_id).w
		beq.w	loc_62158
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_62668(pc,d0.w),d1
		jsr	off_62668(pc,d1.w)
		lea	DPLCPtr_6666A(pc),a2
		jsr	Perform_DPLC.w
		jmp	Sprite_CheckDeleteTouchSlotted.w
; ---------------------------------------------------------------------------
off_62668:	dc.w loc_62678-off_62668

		dc.w loc_626B2-off_62668
		dc.w loc_62014-off_62668
		dc.w loc_626EE-off_62668
		dc.w loc_62014-off_62668
		dc.w loc_62354-off_62668
		dc.w loc_62354-off_62668
		dc.w loc_62778-off_62668
; ---------------------------------------------------------------------------

loc_62678:
		move.w	Player_2+x_pos.w,d0	; NAT: Tails
		cmp.w	$10(a0),d0
		blo.s	.kkk

		move.w	Player_1+x_pos.w,d0
		cmp.w	$10(a0),d0
		bhs.s	loc_626AC

.kkk		lea	ObjDat4_663BA(pc),a1
		jsr	SetUp_ObjAttributesSlotted.w
		move.b	#$16,$22(a0)
		move.w	#$A0,(Camera_min_Y_pos).w
		lea	Pal_CutsceneKnux1.w,a1
		jsr	PalLoad_Line1.w
		lea	ChildObjDat_6657C(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_626AC:
		jmp	Go_Delete_SpriteSlotted2.w
; ---------------------------------------------------------------------------

loc_626B2:
		btst	#3,$38(a0)
		bne.s	loc_626BC
		rts
; ---------------------------------------------------------------------------

loc_626BC:
		move.b	#4,5(a0)
		bsr.w	sub_65DD6
		move.w	#$3B,$2E(a0)
		move.l	#loc_626D6,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_626D6:
		move.b	#6,5(a0)
		move.l	#byte_666C3,$30(a0)
		move.l	#loc_626F4,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_626EE:
		jmp	Animate_RawMultiDelay.w
; ---------------------------------------------------------------------------

loc_626F4:
		move.b	#8,5(a0)
		move.w	#$F,$2E(a0)
		move.l	#loc_62726,$34(a0)
		moveq	#$51,d0
		jsr	Play_Sound_2.w
		lea	ChildObjDat_66584(pc),a2
		jsr	CreateChild1_Normal.w
		lea	PLC_83D64.w,a1
		jmp	Load_PLC_Raw.w
; ---------------------------------------------------------------------------

loc_62726:
		move.b	#$A,5(a0)
		move.w	#$7F,$2E(a0)
		move.l	#loc_6273E,$34(a0)
		bra.w	loc_62056
; ---------------------------------------------------------------------------

loc_6273E:
		move.b	#$C,5(a0)
		st	(ScrShake_Value).w
		move.w	#$5F,$2E(a0)
		move.l	#loc_62760,$34(a0)
		lea	ChildObjDat_6658C(pc),a2
		jmp	CreateChild6_Simple.w
; ---------------------------------------------------------------------------

loc_62760:
		move.b	#$E,5(a0)
		move.l	#byte_6669F,$30(a0)
		clr.b	$24(a0)
		clr.b	$23(a0)
		rts
; ---------------------------------------------------------------------------

loc_62778:
		tst.b	4(a0)
		bpl.w	loc_6278A
		addq.w	#2,$10(a0)
		jmp	Animate_Raw.w
; ---------------------------------------------------------------------------

loc_6278A:
		clr.b	(__u_FAA9).w
		clr.b	(Player_1+$2E).w
		clr.b	(Player_2+$2E).w
		move.w	#$3B60,(__u_FA92).w
		lea	Child6_IncLevX.w,a2
		jsr	CreateChild6_Simple.w
		move.w	#$148,(Camera_target_max_Y_pos).w
		jsr	Remove_From_TrackingSlot.w
		lea	(Pal_LBZ1).l,a1
		jsr	PalLoad_Line1.w
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------

loc_627C6:
		movea.w	$46(a0),a1
		btst	#7,$2A(a1)
		bne.w	loc_62158
		lea	word_62822(pc),a1
		jsr	Check_PlayerInRange.w

		movea.w	$46(a0),a2
		tst.w	d0
		beq.s	loc_627F4
		bset	#3,$38(a2)
		bsr.w	sub_62800

loc_627F4:
		swap	d0
		tst.w	d0
		beq.s	locret_627FE
		bset	#3,$38(a2)		; NAT: Holy shit

; =============== S U B R O U T I N E =======================================


sub_62800:

		st	(__u_FAA9).w
		movea.w	d0,a1
		cmpi.b	#6,5(a1)
		bhs.s	locret_627FE
		move.b	#-$7F,$2E(a1)
		bclr	#0,4(a1)
		bclr	#0,$2A(a1)

locret_627FE:
		rts
; End of function sub_62800

; ---------------------------------------------------------------------------
word_62822:	dc.w  $FFC0,   $80, $FFD0,   $60
; ---------------------------------------------------------------------------

loc_6282A:
		lea	ObjDat3_6640E(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_6284E,(a0)
		move.w	#-$200,$18(a0)
		move.w	#-$400,$1A(a0)
		moveq	#$51,d0
		jsr	Play_Sound_2.w

loc_6284E:
		jsr	MoveSprite_LightGravity.w
		jmp	Sprite_CheckDeleteXY.w
; ---------------------------------------------------------------------------

loc_6285A:
		move.l	#loc_628A0,(a0)
		move.l	#Obj_BossExpControl1,$34(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		add.w	d0,d0
		lea	word_62890(pc,d0.w),a1
		move.w	(a1)+,$10(a0)
		move.w	(a1)+,$14(a0)
		move.b	#$20,$39(a0)
		move.b	#$20,$3A(a0)
		move.b	#$20,$3B(a0)
		rts
; ---------------------------------------------------------------------------
word_62890:	dc.w  $3BC0,  $1A0
		dc.w  $3B80,  $1A0
		dc.w  $3B40,  $1A0
		dc.w  $3B00,  $1A0
; ---------------------------------------------------------------------------

loc_628A0:
		subq.w	#4,$14(a0)
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_628AA:
		cmpi.b	#2,(Player_1+character_id).w
		beq.w	loc_62158
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_628D2(pc,d0.w),d1
		jsr	off_628D2(pc,d1.w)
		lea	DPLCPtr_6666A(pc),a2
		jsr	Perform_DPLC.w
		jmp	Sprite_CheckDeleteTouchSlotted.w
; ---------------------------------------------------------------------------
off_628D2:	dc.w loc_628E0-off_628D2

		dc.w loc_6290E-off_628D2
		dc.w loc_62928-off_628D2
		dc.w loc_62942-off_628D2
		dc.w loc_62964-off_628D2
		dc.w loc_629A8-off_628D2
		dc.w loc_629C0-off_628D2
; ---------------------------------------------------------------------------

loc_628E0:
		lea	ObjDat4_663BA(pc),a1
		jsr	SetUp_ObjAttributesSlotted.w
		bset	#0,4(a0)
		move.b	#$20,$22(a0)
		bsr.w	sub_65DD6
		lea	Pal_CutsceneKnux1.w,a1
		jsr	PalLoad_Line1.w
		lea	ChildObjDat_66592(pc),a2
		jmp	CreateChild3_NormalRepeated.w
; ---------------------------------------------------------------------------

loc_6290E:
		btst	#1,$38(a0)
		bne.s	loc_62918
		rts
; ---------------------------------------------------------------------------

loc_62918:
		move.b	#4,5(a0)
		move.l	#loc_62932,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_62928:
		lea	byte_666D2(pc),a1
		jmp	Animate_RawNoSSTMultiDelay.w
; ---------------------------------------------------------------------------

loc_62932:
		move.b	#6,5(a0)
		bclr	#0,4(a0)
		bra.w	loc_62056
; ---------------------------------------------------------------------------

loc_62942:
		tst.b	(ScrShake_Value).w
		beq.s	loc_6295E
		move.b	#8,5(a0)
		move.l	#byte_6669A,$30(a0)
		clr.b	$24(a0)
		clr.b	$23(a0)

loc_6295E:
		jmp	Animate_Raw.w
; ---------------------------------------------------------------------------

loc_62964:
		btst	#3,$38(a0)
		bne.s	loc_6297A
		move.w	(ScrEvents_C).w,d0
		add.w	d0,$14(a0)
		jmp	Animate_Raw.w
; ---------------------------------------------------------------------------

loc_6297A:
		move.b	#$A,5(a0)
		bset	#0,4(a0)
		move.b	#9,$22(a0)
		move.w	#$200,$18(a0)
		move.w	#-$100,$1A(a0)
		jsr	Create_New_Sprite.w
		bne.s	locret_629A6
		move.l	#Obj_Song_Fade_ToLevelMusic,(a1)

locret_629A6:
		rts
; ---------------------------------------------------------------------------

loc_629A8:
		move.w	$14(a0),d0
		cmp.w	(Water_level).w,d0
		blo.s	loc_629C0
		moveq	#$39,d0
		jsr	Play_Sound_2.w
		move.b	#$C,5(a0)

loc_629C0:

		move.w	(ScrEvents_C).w,d0
		add.w	d0,$14(a0)
		jmp	MoveSprite_LightGravity.w
; ---------------------------------------------------------------------------

loc_629CE:
		lea	ObjDat3_6641A(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_62A0A,(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		add.w	d0,d0
		move.l	dword_629FA(pc,d0.w),$3E(a0)
		lsl.w	#3,d0
		add.w	d0,$14(a0)
		move.w	$10(a0),$3A(a0)
		rts
; ---------------------------------------------------------------------------
dword_629FA:	dc.l $1000010
		dc.l $C0000C
		dc.l $800008
		dc.l $400004
; ---------------------------------------------------------------------------

loc_62A0A:
		tst.b	(ScrShake_Value).w
		beq.s	loc_62A22
		move.l	#loc_62A28,(a0)
		move.w	$3E(a0),$18(a0)
		move.b	#6,$39(a0)

loc_62A22:
		jmp	Sprite_CheckDeleteXY.w
; ---------------------------------------------------------------------------

loc_62A28:
		move.w	(ScrEvents_C).w,d0
		add.w	d0,$14(a0)
		move.w	$10(a0),d0
		move.w	$40(a0),d1
		cmp.w	$3A(a0),d0
		scs	d2
		bcs.s	loc_62A42
		neg.w	d1

loc_62A42:
		add.w	d1,$18(a0)
		cmp.b	$3C(a0),d2
		beq.s	loc_62A82
		move.b	d2,$3C(a0)
		cmpi.b	#3,$39(a0)
		bne.s	loc_62A6C
		moveq	#0,d0
		move.b	$2C(a0),d0
		add.w	d0,d0
		move.l	dword_62A9E(pc,d0.w),$3E(a0)
		move.w	$3E(a0),$18(a0)

loc_62A6C:
		subq.b	#1,$39(a0)
		bne.s	loc_62A82
		move.l	#loc_62AAE,(a0)
		movea.w	$46(a0),a1
		bset	#3,$38(a1)

loc_62A82:

		jsr	MoveSprite2.w
		tst.b	$2C(a0)
		bne.s	loc_62A98
		movea.w	$46(a0),a1
		move.w	$10(a0),$10(a1)

loc_62A98:
		jmp	Sprite_CheckDeleteXY.w
; ---------------------------------------------------------------------------
dword_62A9E:	dc.l $2000020
		dc.l $1800018
		dc.l $1000010
		dc.l $800008
; ---------------------------------------------------------------------------

loc_62AAE:
		move.w	(ScrEvents_C).w,d0
		add.w	d0,$14(a0)
		jsr	MoveSprite_LightGravity.w
		jmp	Sprite_CheckDeleteXY.w
; ---------------------------------------------------------------------------

Obj_C8_1:
		lea	ObjDat3_66426(pc),a1
		jsr	SetUp_ObjAttributes.w
		bclr	#1,4(a0)
		beq.s	loc_62ADA
		bset	#7,$A(a0)

loc_62ADA:
		bclr	#0,4(a0)
		beq.s	loc_62AE8
		move.w	#prio(0),8(a0)

loc_62AE8:
		move.l	#loc_62AEE,(a0)

loc_62AEE:
		move.w	(ScrEvents_C).w,d0
		add.w	d0,$14(a0)
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------
Map_LBZKnuxPillar:	include "Levels/LBZ/Misc Object Data/Map - Knuckles Pillar.asm"

; ---------------------------------------------------------------------------

loc_62B3A:

		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_62B58(pc,d0.w),d1
		jsr	off_62B58(pc,d1.w)
		lea	DPLCPtr_6666A(pc),a2
		jsr	Perform_DPLC.w
		jmp	Sprite_CheckDeleteTouchSlotted.w
; ---------------------------------------------------------------------------
off_62B58:	dc.w loc_62B68-off_62B58

		dc.w loc_62BB2-off_62B58
		dc.w loc_62BC0-off_62B58
		dc.w loc_62BE4-off_62B58
		dc.w loc_62BF4-off_62B58
		dc.w loc_62C42-off_62B58
		dc.w loc_62C42-off_62B58
		dc.w loc_62C90-off_62B58
; ---------------------------------------------------------------------------

loc_62B68:
		lea	ObjDat4_663BA(pc),a1
		jsr	SetUp_ObjAttributesSlotted.w
		bclr	#7,$A(a0)
		move.w	#$77,$2E(a0)
		move.l	#byte_6669F,$30(a0)
		move.w	#$2B0,$10(a0)
		move.w	#$66C,$14(a0)
		move.w	#$200,$18(a0)
		lea	(Normal_palette_line_2).w,a1
		lea	(Target_palette_line_2).w,a2
		moveq	#7,d6

loc_62BA2:
		move.l	(a1)+,(a2)+
		dbf	d6,loc_62BA2
		lea	Pal_CutsceneKnux1.w,a1
		jmp	PalLoad_Line1.w
; ---------------------------------------------------------------------------

loc_62BB2:
		subq.w	#1,$2E(a0)
		bpl.s	locret_62BBE
		move.b	#4,5(a0)

locret_62BBE:
		rts
; ---------------------------------------------------------------------------

loc_62BC0:
		cmpi.w	#$360,$10(a0)
		bhs.s	loc_62BD4
		jsr	Animate_Raw.w
		jmp	MoveSprite2.w
; ---------------------------------------------------------------------------

loc_62BD4:
		move.b	#6,5(a0)
		lea	ChildObjDat_665B0(pc),a2
		jsr	CreateChild6_Simple.w

loc_62BE4:
		btst	#3,$38(a0)
		bne.s	loc_62BEE
		rts
; ---------------------------------------------------------------------------

loc_62BEE:
		move.b	#8,5(a0)

loc_62BF4:
		jsr	Animate_Raw.w
		jsr	MoveSprite2.w
		movea.w	$46(a0),a1
		move.w	$10(a1),d0
		subi.w	#$28,d0
		cmp.w	$10(a0),d0
		bls.s	loc_62C14
		rts
; ---------------------------------------------------------------------------

loc_62C14:
		move.w	d0,$10(a0)
		move.b	#$A,5(a0)
		move.b	#$17,$1E(a0)
		move.w	#$100,$18(a0)
		move.w	#-$400,$1A(a0)
		move.l	#loc_62C5A,$34(a0)
		lea	word_666AF(pc),a1
		jsr	Set_Raw_Animation.w

loc_62C42:
		jsr	Animate_Raw.w
		jsr	MoveSprite.w
		jsr	ObjHitFloor_DoRoutine.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_62C5A:
		move.b	#$C,5(a0)
		move.b	#$13,$1E(a0)
		move.w	#-$300,$1A(a0)
		move.l	#loc_62C76,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_62C76:
		move.b	#$E,5(a0)
		move.w	#$200,$18(a0)
		clr.w	$1A(a0)
		lea	byte_6669F(pc),a1
		jmp	Set_Raw_Animation.w
; ---------------------------------------------------------------------------

loc_62C90:
		tst.b	4(a0)
		bpl.w	loc_62422
		jsr	Animate_Raw.w
		jmp	MoveSprite2.w
; ---------------------------------------------------------------------------

Obj_A8_2:
		cmpi.b	#2,(Player_1+character_id).w
		beq.w	loc_62158
		tst.b	(Last_star_post_hit).w
		bne.w	loc_62158
		tst.w	(SK_alone_flag).w
		bne.w	loc_62158
		lea	(Player_1).w,a1
		moveq	#0,d0
		move.b	(__u_FAB8).w,d0
		move.w	off_62CD0(pc,d0.w),d0
		jmp	off_62CD0(pc,d0.w)
; ---------------------------------------------------------------------------
off_62CD0:	dc.w loc_62CDE-off_62CD0

		dc.w loc_62CF8-off_62CD0
		dc.w loc_62D2C-off_62CD0
		dc.w loc_62D42-off_62CD0
		dc.w loc_62D5A-off_62CD0
		dc.w locret_62D6E-off_62CD0
		dc.w loc_62D70-off_62CD0
; ---------------------------------------------------------------------------

loc_62CDE:
		move.b	#2,(__u_FAB8).w
		tst.l	(Player_2).w
		beq.s	loc_62CF8
		jsr	Create_New_Sprite.w
		bne.s	loc_62CF8
		move.l	#loc_62DAC,(a1)

loc_62CF8:


		move.w	#$389,d0
		cmp.w	$10(a1),d0
		bls.s	loc_62D04
		rts
; ---------------------------------------------------------------------------

loc_62D04:
		move.w	d0,$10(a1)
		move.b	#4,(__u_FAB8).w
		bclr	#0,4(a1)
		bclr	#0,$2A(a1)
		st	(Ctrl_1_locked).w
		clr.w	(Ctrl_1_logical).w
		jsr	Stop_Object.w
		bra.w	sub_65DD6
; ---------------------------------------------------------------------------

loc_62D2C:
		btst	#1,$2A(a1)
		beq.s	loc_62D36
		rts
; ---------------------------------------------------------------------------

loc_62D36:
		move.b	#6,(__u_FAB8).w
		move.w	#$20,$2E(a0)

loc_62D42:
		subq.w	#1,$2E(a0)
		bmi.s	loc_62D4A
		rts
; ---------------------------------------------------------------------------

loc_62D4A:
		move.b	#8,(__u_FAB8).w
		st	(Scroll_lock).w
		move.w	#$202,(Ctrl_1_logical).w

loc_62D5A:
		addq.w	#2,(Camera_Y_pos).w
		cmpi.w	#$5B0,(Camera_Y_pos).w
		bhs.s	loc_62D68
		rts
; ---------------------------------------------------------------------------

loc_62D68:
		move.b	#$A,(__u_FAB8).w

locret_62D6E:
		rts
; ---------------------------------------------------------------------------

loc_62D70:
		clr.b	(__u_FAB8).w
		clr.b	(Ctrl_1_locked).w
		clr.b	(Ctrl_2_locked).w
		clr.b	(Scroll_lock).w
		clr.w	(Ctrl_1_logical).w
		clr.w	(Ctrl_2_logical).w
		move.b	#5,(Player_2+anim).w
		move.b	#1,(Last_star_post_hit).w
	;	move.w	#$190,(Saved_X_pos).w
	;	move.w	#$56C,(Saved_Y_pos).w
	;	jsr	(Save_Level_Data).l
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------

loc_62DAC:

		lea	(Player_2).w,a1
		cmpi.b	#4,(__u_FAB8).w
		bhs.s	loc_62DC4
		move.w	#$371,d0
		cmp.w	$10(a1),d0
		bls.s	loc_62DC4
		rts
; ---------------------------------------------------------------------------

loc_62DC4:

		move.w	d0,$10(a0)
		move.l	#loc_62DDC,(a0)
		st	(Ctrl_2_locked).w
		clr.w	(Ctrl_2_logical).w
		jsr	Stop_Object.w

loc_62DDC:
		lea	(Player_2).w,a1
		move.b	(__u_FAB8).w,d0
		beq.s	loc_62E1A
		cmpi.b	#4,(__u_FAB8).w
		blo.s	loc_62E04
		move.w	#$371,d0
		cmp.w	$10(a1),d0
		bhi.s	locret_62E18
		move.b	#8,$20(a1)
		jmp	Stop_Object.w
; ---------------------------------------------------------------------------

loc_62E04:
		tst.b	4(a1)
		bmi.s	locret_62E18
		move.l	#loc_62DAC,(a0)
		clr.b	(Ctrl_2_locked).w
		clr.w	(Ctrl_2_logical).w

locret_62E18:

		rts
; ---------------------------------------------------------------------------

loc_62E1A:
		clr.b	(Ctrl_2_locked).w
		clr.w	(Ctrl_2_logical).w
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

Obj_A9_2:
		lea	ObjDat3_6644A(pc),a1
		jsr	SetUp_ObjAttributes.w
		lea	ChildObjDat_665B6(pc),a2
		jsr	CreateChild6_Simple.w
		move.l	#loc_62F0A,(a0)
		tst.b	(Last_star_post_hit).w
		bne.s	loc_62E56
		cmpi.b	#2,(Player_1+character_id).w
		beq.s	loc_62E56
		move.l	#loc_62E5C,(a0)

loc_62E56:

		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_62E5C:
		cmpi.b	#$A,(__u_FAB8).w
		bhs.s	loc_62E6A
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_62E6A:
		move.l	#loc_62E92,(a0)
		lea	(ArtKosM_MHZKnuxPeer).l,a1
		move.w	#-$6000,d2
		jsr	Queue_Kos_Module.w
		lea	ChildObjDat_665AA(pc),a2
		jsr	CreateChild6_Simple.w
		bne.s	loc_62E92
		move.b	#$1C,$2C(a1)

loc_62E92:

		move.w	(__u_FAA4).w,d0
		beq.s	loc_62ECA
		movea.w	d0,a1
		lea	word_65C48(pc),a2
		jsr	(Check_InMyRange).l
		beq.s	loc_62ECA
		move.l	#loc_62ED0,(a0)
		move.w	#1,$2E(a0)
		move.b	#1,$22(a0)
		bset	#1,$38(a0)
		st	(__u_FAA9).w
		moveq	#$5B,d0
		jsr	Play_Sound_2.w

loc_62ECA:

		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_62ED0:
		bclr	#1,$38(a0)
		subq.w	#1,$2E(a0)
		bpl.s	loc_62EF6
		move.l	#Wait_Draw,(a0)
		move.w	#$5F,$2E(a0)
		move.l	#loc_62EFC,$34(a0)
		move.b	#0,$22(a0)

loc_62EF6:
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_62EFC:
		move.b	#$C,(__u_FAB8).w
		move.l	#loc_62F0A,(a0)
		rts
; ---------------------------------------------------------------------------

loc_62F0A:

		bsr.w	sub_65DEC
		move.b	$2A(a0),d1
		andi.b	#$18,d1
		beq.s	loc_62F46
		move.l	#loc_62F4C,(a0)
		move.b	#1,$22(a0)
		moveq	#$5B,d0
		jsr	Play_Sound_2.w
		btst	#2,$38(a0)
		bne.s	loc_62F46
		bset	#1,$38(a0)
		not.b	(__u_FAA9).w

loc_62F46:

		jmp	Sprite_CheckDelete.w
; ---------------------------------------------------------------------------

loc_62F4C:
		bclr	#1,$38(a0)
		bsr.w	sub_65DEC
		move.b	$2A(a0),d0
		andi.b	#$18,d0
		bne.s	loc_62F6C
		move.l	#loc_62F0A,(a0)
		move.b	#0,$22(a0)

loc_62F6C:
		jmp	Sprite_CheckDelete.w
; ---------------------------------------------------------------------------

loc_62F72:
		lea	ObjDat3_6643E(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_62FA2,(a0)
		move.w	#$374,$10(a0)
		move.w	#$66C,$14(a0)
		move.w	#$200,$18(a0)
		move.w	#7,$2E(a0)
		move.l	#loc_62FB4,$34(a0)

loc_62FA2:

		jsr	MoveSprite2.w
		jsr	Obj_Wait.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_62FB4:
		move.l	#loc_62FCA,(a0)
		move.l	#loc_62FDA,$34(a0)
		bset	#7,$A(a0)
		rts
; ---------------------------------------------------------------------------

loc_62FCA:
		lea	byte_666E1(pc),a1
		jsr	Animate_RawNoSSTMultiDelay.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_62FDA:
		move.l	#loc_62FA2,(a0)
		move.w	#-$400,$18(a0)
		move.w	#$F,$2E(a0)
		move.l	#loc_62FFC,$34(a0)
		bclr	#7,$A(a0)
		rts
; ---------------------------------------------------------------------------

loc_62FFC:
		movea.w	$46(a0),a1
		bset	#3,$38(a1)
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------

loc_6300C:
		lea	ObjDat3_66462(pc),a1
		jsr	SetUp_ObjAttributes.w
		movea.w	$46(a0),a1
		move.w	a0,$44(a1)
		move.l	#loc_6303C,(a0)
		move.w	#$390,$10(a0)
		move.w	#$620,$14(a0)
		tst.b	(__u_FAA9).w
		beq.s	loc_6303C
		addi.w	#$40,$14(a0)

loc_6303C:

		movea.w	$46(a0),a1
		btst	#1,$38(a1)
		bne.s	loc_63078
		jsr	(sub_65E4C).l
		lea	(Player_1).w,a1
		jsr	Find_OtherObject.w
		tst.b	(__u_FAA9).w
		beq.s	loc_6306E
		tst.w	d0
		bne.s	loc_6306E
		cmpi.w	#$40,d2
		bhs.s	loc_6306E
		cmpi.w	#$60,d3
		blo.s	loc_63074

loc_6306E:

		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_63074:
		clr.b	(__u_FAA9).w

loc_63078:
		move.l	#loc_630A6,(a0)
		movea.w	$46(a0),a1
		bset	#2,$38(a1)
		move.w	#$100,d0
		tst.b	(__u_FAA9).w
		bne.s	loc_63094
		neg.w	d0

loc_63094:
		move.w	d0,$1A(a0)
		move.w	#$3F,$2E(a0)
		move.l	#loc_630BE,$34(a0)

loc_630A6:
		jsr	MoveSprite2.w
		jsr	(sub_65E4C).l
		jsr	Obj_Wait.w
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_630BE:
		move.l	#loc_6303C,(a0)
		movea.w	$46(a0),a1
		bclr	#2,$38(a1)
		rts
; ---------------------------------------------------------------------------
word_630D0:	dc.w   $648,  $848
		dc.w   $2D0,  $4D0
		dc.w   $748,  $748
word_630DC:	dc.w   $3C0,  $3C0	; NAT: Adjusted by -10px
; ---------------------------------------------------------------------------

loc_630E0:
		cmpi.b	#7,(Last_star_post_hit).w
		bhs.w	loc_62158
		lea	word_630D0(pc),a1
		jsr	(Check_CameraInRange).l
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_6312A(pc,d0.w),d1
		jsr	off_6312A(pc,d1.w)
		lea	DPLCPtr_66672(pc),a2
		jsr	Perform_DPLC.w
		jmp	Sprite_CheckDeleteTouchSlotted.w
; ---------------------------------------------------------------------------
off_6312A:	dc.w loc_63134-off_6312A

		dc.w loc_63170-off_6312A
		dc.w loc_631A4-off_6312A
		dc.w loc_63220-off_6312A
		dc.w loc_632AE-off_6312A
; ---------------------------------------------------------------------------

loc_63134:
		lea	ObjDat4_663CC(pc),a1
		jsr	SetUp_ObjAttributesSlotted.w
		move.l	#loc_63182,$34(a0)
		move.w	(Camera_min_X_pos).w,(__u_FA94).w
		move.w	(word_630DC).l,(__u_FAB4).w
		bsr.w	sub_65DD6
		st	(ScrEvents_D).w
		lea	Pal_CutsceneKnux1.w,a1
		jsr	PalLoad_Line1.w
		lea	ChildObjDat_665BC(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_63170:
		move.w	(Camera_X_pos).w,d0
		move.w	(__u_FAB4).w,d1
		cmp.w	d1,d0
		bhs.s	loc_63182
		move.w	d0,(Camera_min_X_pos).w
		rts
; ---------------------------------------------------------------------------

loc_63182:

		move.w	d1,(Camera_min_X_pos).w
		move.b	#4,5(a0)
		move.w	#$3B,$2E(a0)
		st	(Ctrl_1_locked).w
		st	(Ctrl_2_locked).w
		clr.w	(Ctrl_1_logical).w
		clr.w	(Ctrl_2_logical).w
		rts
; ---------------------------------------------------------------------------

loc_631A4:
		subi.w	#1,$2E(a0)
		bmi.s	loc_631E0
		moveq	#0,d0
		lea	(Player_1).w,a1
		btst	#1,$2A(a1)
		bne.s	loc_631BE
		bset	#0,d0

loc_631BE:
		lea	(Player_2).w,a2
		tst.l	(a2)
		beq.s	loc_631D4
		tst.b	4(a2)
		bpl.s	loc_631D4
		btst	#1,$2A(a2)
		bne.s	loc_631D8

loc_631D4:

		bset	#1,d0

loc_631D8:
		cmpi.b	#3,d0
		beq.s	loc_631E0

locret_631DE:
		rts
; ---------------------------------------------------------------------------

loc_631E0:

		move.b	#6,5(a0)
		move.l	#loc_63280,$34(a0)
		move.w	#$10,$3E(a0)
		clr.w	$2E(a0)
		move.b	#1,$39(a0)
		lea	(Player_1).w,a1
		bsr.w	sub_6320E
		lea	(Player_2).w,a1
		tst.l	(a1)
		beq.s	locret_631DE

; =============== S U B R O U T I N E =======================================


sub_6320E:
		move.b	#-$7F,$2E(a1)
		move.b	#5,$20(a1)
		jmp	Stop_Object.w
; End of function sub_6320E

; ---------------------------------------------------------------------------

loc_63220:
		bsr.w	sub_65E62
		cmpi.b	#8,$23(a0)
		blo.s	loc_63238
		moveq	#-$26,d0
		jsr	sub_85E52.w
		bsr.w	sub_65EB4

loc_63238:
		lea	byte_666F6(pc),a1
		jsr	Animate_RawNoSSTMultiDelay.w
		beq.s	locret_6327E
		cmpi.b	#$C,$23(a0)
		bne.s	loc_63266
		lea	(Player_1).w,a1
		move.b	#$14,$20(a1)
		lea	(Player_2).w,a1
		tst.b	4(a1)
		bpl.s	loc_63266
		move.b	#$14,$20(a1)

loc_63266:

		cmpi.b	#2,$22(a0)
		bne.s	locret_6327E
		addq.b	#1,$39(a0)
		subq.w	#4,$3E(a0)
		moveq	#$5B,d0
		jmp	Play_Sound_2.w

locret_6327E:

		rts
; ---------------------------------------------------------------------------

loc_63280:
		move.b	#8,5(a0)
		jsr	Create_New_Sprite.w
		bne.s	loc_63294
		move.l	#loc_6338E,(a1)

loc_63294:
		tst.b	(Player_2+$4).w
		bpl.s	loc_632AE
		jsr	Create_New_Sprite.w
		bne.s	loc_632AE
		move.l	#loc_6338E,(a1)
		move.b	#2,$2C(a1)

loc_632AE:

		tst.b	4(a0)
		bpl.w	loc_62422
		bra.w	sub_65EB4
; ---------------------------------------------------------------------------

loc_632CA:
		lea	ObjDat3_66456(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_63308,(a0)
		cmpi.b	#2,(Player_1+character_id).w
		bne.s	loc_632F8
		move.l	#Sprite_OnScreen_Test,(a0)
		move.w	#-$7AD8,$A(a0)
		movea.w	$46(a0),a1
		move.w	$48(a1),$48(a0)

loc_632F8:
		lea	(ArtKosM_MHZKnuxSwitch).l,a1
		move.w	#-$5B00,d2
		jmp	Queue_Kos_Module.w
; ---------------------------------------------------------------------------

loc_63308:
		movea.w	$46(a0),a1
		clr.b	$22(a0)
		cmpi.b	#2,$22(a1)
		bne.s	loc_6331E
		move.b	#1,$22(a0)

loc_6331E:
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_63324:
		lea	ObjDat3_6646E(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_63372,(a0)
		jsr	Random_Number.w
		andi.w	#$1FF,d0
		cmpi.w	#$140,d0
		blo.s	loc_6334A
		andi.w	#$3F,d0
		lsl.w	#2,d0

loc_6334A:
		move.w	(Camera_X_pos_copy).w,d1
		add.w	d0,d1
		move.w	d1,$10(a0)
		move.w	(Camera_Y_pos_copy).w,d1
		addi.w	#$E8,d1
		move.w	d1,$14(a0)
		moveq	#0,d1
		movea.w	$46(a0),a1
		move.b	$39(a1),d1
		add.w	d1,d1
		neg.w	d1
		move.w	d1,$1A(a0)

loc_63372:
		move.w	$1A(a0),d0
		add.w	d0,$14(a0)
		move.w	(Camera_Y_pos).w,d0
		subq.w	#8,d0
		cmp.w	$14(a0),d0
		bhs.w	loc_62158
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_6338E:

		lea	(Player_1).w,a1
		tst.b	$2C(a0)
		beq.s	loc_6339C
		lea	(Player_2).w,a1

loc_6339C:
		move.l	#loc_633D6,(a0)
		move.w	a1,$44(a0)
		move.w	#-$1000,$1A(a0)
		move.w	$10(a1),$10(a0)
		move.w	$14(a1),$14(a0)
		move.b	#-$7F,$2E(a1)
		move.b	#$F,$20(a1)
		bclr	#1,4(a1)
		bset	#7,$A(a1)
		st	(Fast_V_scroll_flag).w
		rts
; ---------------------------------------------------------------------------

loc_633D6:
		moveq	#-$26,d0
		jsr	sub_85E52.w
		jsr	MoveSprite_LightGravity.w
		movea.w	$44(a0),a1
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		tst.w	$1A(a0)
		bmi.w	locret_6206C
		clr.b	(Ctrl_1_locked).w
		clr.b	(Ctrl_2_locked).w
		clr.w	(Ctrl_1_logical).w
		clr.w	(Ctrl_2_logical).w
		clr.b	$2E(a1)
		bclr	#7,$A(a1)
		clr.b	$20(a1)
		move.w	#$10,$1C(a1)
		clr.b	(Fast_V_scroll_flag).w
		clr.b	(ScrEvents_D).w
		move.b	#7,(Last_star_post_hit).w
	;	move.w	#$52A,(Saved_X_pos).w
	;	move.w	#$5AC,(Saved_Y_pos).w
	;	jsr	(Save_Level_Data).l
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------
	include "General/Boss Routines.asm"; Extra code in middle of nowhere.
; ---------------------------------------------------------------------------

CutsceneKnux_SKIntro:
		cmpi.b	#2,(Player_1+character_id).w
		bne.w	loc_62158
		tst.b	(Last_star_post_hit).w
		bne.w	loc_62158
		tst.w	(SK_alone_flag).w
		beq.w	loc_62158
		move.l	#loc_63466,(a0)

loc_63466:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_63486(pc,d0.w),d1
		jsr	off_63486(pc,d1.w)
		move.w	$42(a0),d0
		move.w	off_63494(pc,d0.w),d0
		jsr	off_63494(pc,d0.w)
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
off_63486:	dc.w loc_634CA-off_63486

		dc.w loc_63526-off_63486
		dc.w loc_63562-off_63486
		dc.w loc_6358E-off_63486
		dc.w loc_635C8-off_63486
		dc.w loc_635F6-off_63486
		dc.w loc_63620-off_63486
off_63494:	dc.w loc_6349A-off_63494

		dc.w loc_634AC-off_63494
		dc.w loc_634B8-off_63494
; ---------------------------------------------------------------------------

loc_6349A:
		move.l	#Map_KnuxIntroLay,$C(a0)
		lea	DPLCPtr_6667A(pc),a2
		jmp	Perform_DPLC.w
; ---------------------------------------------------------------------------

loc_634AC:
		move.l	#Map_Knuckles,$C(a0)
		bra.w	Knuckles_Load_PLC_6618A
; ---------------------------------------------------------------------------

loc_634B8:
		move.l	#Map_HPZKnucklesGrab,$C(a0)
		lea	DPLCPtr_66682(pc),a2
		jmp	Perform_DPLC.w
; ---------------------------------------------------------------------------

loc_634CA:
		lea	ObjDat4_663DE(pc),a1
		jsr	SetUp_ObjAttributesSlotted.w
		move.w	#$EF,$2E(a0)
		move.b	#-$7D,(Player_1+$2E).w
		move.w	#$560,(Camera_X_pos).w
		move.w	#$948,(Camera_Y_pos).w
		st	(Scroll_lock).w
		move.l	(V_int_run_count).w,(RNG_seed).w
		clr.b	(Level_started_flag).w
		jsr	Create_New_Sprite.w
		bne.s	loc_63508
		move.l	#loc_63682,(a1)

loc_63508:
		lea	ChildObjDat_66656(pc),a2
		jsr	CreateChild6_Simple.w
		lea	(Pal_SKIntroBomb).l,a1
		lea	(Target_palette_line_2).w,a2
		moveq	#7,d6

loc_6351E:
		move.l	(a1)+,(a2)+
		dbf	d6,loc_6351E
		rts
; ---------------------------------------------------------------------------

loc_63526:
		btst	#0,(__u_FAB8).w
		bne.s	loc_6354C
		subq.w	#1,$2E(a0)
		bne.s	loc_63542
		jsr	Create_New_Sprite.w
		bne.s	loc_63542
		move.l	#loc_63790,(a1)

loc_63542:

		lea	byte_668C3(pc),a1
		jmp	Animate_RawNoSST.w
; ---------------------------------------------------------------------------

loc_6354C:
		move.b	#4,5(a0)
		move.b	#4,$22(a0)
		lea	byte_668C7(pc),a1
		jmp	Set_Raw_Animation.w
; ---------------------------------------------------------------------------

loc_63562:
		btst	#1,(__u_FAB8).w
		bne.s	loc_63570
		jmp	Animate_RawMultiDelay.w
; ---------------------------------------------------------------------------

loc_63570:
		move.b	#6,5(a0)
		move.w	#2,$42(a0)
		move.b	#-$73,$22(a0)
		move.w	#-$100,$18(a0)
		move.w	#-$100,$1A(a0)

loc_6358E:
		btst	#2,(__u_FAB8).w
		bne.s	loc_635A2
		addi.w	#8,$1A(a0)
		jmp	MoveSprite2.w
; ---------------------------------------------------------------------------

loc_635A2:
		move.b	#8,5(a0)
		move.w	#4,$42(a0)
		move.b	#3,$22(a0)
		subq.w	#8,$14(a0)
		move.b	#$13,$1E(a0)
		move.w	#-$100,$18(a0)
		clr.w	$1A(a0)

loc_635C8:
		jsr	MoveSprite_LightGravity.w
		jsr	ObjCheckFloorDist.w
		tst.w	d1
		bpl.w	locret_6206C
		add.w	d1,$14(a0)
		move.b	#$A,5(a0)
		move.l	#loc_635FC,$34(a0)
		lea	byte_668D0(pc),a1
		jmp	Set_Raw_Animation.w
; ---------------------------------------------------------------------------

loc_635F6:
		jmp	Animate_RawMultiDelay.w
; ---------------------------------------------------------------------------

loc_635FC:
		move.b	#$C,5(a0)
		move.w	#2,$42(a0)
		move.b	#7,$22(a0)
		clr.w	$18(a0)
		clr.w	$1A(a0)
		lea	byte_6682F(pc),a1
		jmp	Set_Raw_Animation.w
; ---------------------------------------------------------------------------

loc_63620:
		move.w	$18(a0),d0
		addi.w	#$C,d0
		cmpi.w	#$400,d0
		bhi.s	loc_63632
		move.w	d0,$18(a0)

loc_63632:
		jsr	MoveSprite2.w
		jsr	Animate_RawCheckResult.w
		move.w	(Camera_X_pos).w,d0
		addi.w	#$180,d0
		cmp.w	$10(a0),d0
		bhs.w	locret_6206C

loc_6364E:

		move.b	#1,(Last_star_post_hit).w
	;	move.w	#$6F4,(Saved_X_pos).w
	;	move.w	#$9EC,(Saved_Y_pos).w
	;	jsr	(Save_Level_Data).l
	;	clr.l	(Saved_timer).w
		move.w	#$700,d0
		move.w	d0,(Current_zone_and_act).w
		move.w	d0,(Apparent_zone_and_act).w
		st	(Restart_level_flag).w
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------

loc_63682:
		btst	#7,(Ctrl_1_pressed).w
		bne.s	loc_6364E
		btst	#7,(Ctrl_2_pressed).w
		bne.s	loc_6364E
		rts
; ---------------------------------------------------------------------------

loc_63694:
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	word_636F4(pc,d0.w),$10(a0)
		move.w	#$9F4,$14(a0)
		moveq	#0,d1
		cmpi.w	#8,d0
		blo.s	loc_636B0
		moveq	#4,d1

loc_636B0:
		move.l	word_63704(pc,d1.w),$3A(a0)
		lea	off_6370C(pc),a1
		move.b	#$C,$1E(a0)
		andi.w	#2,d0
		beq.s	loc_636D0
		adda.w	#$A,a1
		move.b	#$A,$1E(a0)

loc_636D0:
		move.l	(a1)+,(a0)
		move.l	(a1)+,$C(a0)
		move.w	(a1)+,$A(a0)
		bset	#2,4(a0)
		move.w	#prio(4),8(a0)
		move.b	#$10,7(a0)
		move.b	#$10,6(a0)
		rts
; ---------------------------------------------------------------------------
word_636F4:	dc.w $5F0
		dc.w $600
		dc.w $610
		dc.w $620
		dc.w $660
		dc.w $670
		dc.w $680
		dc.w $690
word_63704:	dc.w $5E8
		dc.w $628
		dc.w $658
		dc.w $698
off_6370C:	dc.l loc_63720
		dc.l Map_Animals2
		dc.w $580
		dc.l loc_63750
		dc.l Map_Animals1
		dc.w $592
; ---------------------------------------------------------------------------

loc_63720:
		jsr	MoveSprite.w
		move.b	#1,$22(a0)
		tst.w	$1A(a0)
		bmi.s	loc_6374A
		move.b	#0,$22(a0)
		jsr	ObjCheckFloorDist.w
		tst.w	d1
		bpl.s	loc_6374A
		add.w	d1,$14(a0)
		bsr.w	sub_65E02

loc_6374A:

		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_63750:
		jsr	MoveSprite2.w
		addi.w	#$18,$1A(a0)
		tst.w	$1A(a0)
		bmi.s	loc_63774
		jsr	ObjCheckFloorDist.w
		tst.w	d1
		bpl.s	loc_63774
		add.w	d1,$14(a0)
		bsr.w	sub_65E02

loc_63774:

		subq.b	#1,$24(a0)
		bpl.s	loc_6378A
		move.b	#1,$24(a0)
		addq.b	#1,$22(a0)
		andi.b	#1,$22(a0)

loc_6378A:
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_63790:
		lea	ObjDat3_66486(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_637EC,(a0)
		move.b	#$10,$1E(a0)
		move.w	(Camera_X_pos).w,d0
		addi.w	#$A0,d0
		move.w	d0,$10(a0)
		move.w	(Camera_Y_pos).w,d0
		subi.w	#$40,d0
		move.w	d0,$14(a0)
		moveq	#$51,d0
		jsr	Play_Sound_2.w
		lea	ChildObjDat_6665C(pc),a2
		jsr	CreateChild1_Normal.w
		lea	PLC_83D64.w,a1
		jsr	Load_PLC_Raw.w
		lea	(ArtKosM_KnuxIntroBomb).l,a1
		move.w	#-$5A40,d2
		jmp	Queue_Kos_Module.w
; ---------------------------------------------------------------------------

loc_637EC:
		jsr	MoveSprite.w
		tst.b	4(a0)
		bpl.s	loc_63840
		tst.w	$1A(a0)
		bmi.s	loc_63840
		jsr	ObjCheckFloorDist.w
		tst.w	d1
		bpl.s	loc_63840
		add.w	d1,$14(a0)
		bset	#0,(__u_FAB8).w
		moveq	#$5D,d0
		jsr	Play_Sound_2.w
		move.w	$1A(a0),d0
		asr.w	#2,d0
		neg.w	d0
		move.w	d0,$1A(a0)
		cmpi.w	#-$100,d0
		blt.s	loc_63840
		move.l	#loc_63846,(a0)
		move.w	#$77,$2E(a0)
		moveq	#-$1F,d0
		jmp	Play_Sound.w

loc_63840:

		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_63846:
		subq.w	#1,$2E(a0)
		bpl.s	loc_6389C
		move.l	#loc_638A2,(a0)
		bset	#7,$2A(a0)
		bset	#1,(__u_FAB8).w
		moveq	#$4E,d0
		jsr	Play_Sound_2.w
		lea	(Normal_palette).w,a1
		lea	(Target_palette).w,a2
		moveq	#7,d6

loc_63870:
		move.l	(a1)+,(a2)+
		dbf	d6,loc_63870
		jsr	Create_New_Sprite.w
		bne.s	loc_6389C
		move.w	a1,$44(a0)
		move.l	#loc_85E64,(a1)
		move.w	#7,$3A(a1)
		st	$2C(a1)
		lea	ChildObjDat_66650(pc),a2
		jsr	CreateChild6_Simple.w

loc_6389C:

		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_638A2:
		movea.w	$44(a0),a1
		btst	#5,$38(a1)
		beq.w	locret_6206C
		bset	#2,(__u_FAB8).w
		jsr	Create_New_Sprite.w
		bne.s	loc_638C4
		move.l	#loc_639C8,(a1)

loc_638C4:
		lea	(Pal_SSZ1).l,a1
		lea	(Target_palette_line_2).w,a2
		moveq	#7,d6

loc_638D0:
		move.l	(a1)+,(a2)+
		dbf	d6,loc_638D0
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------

loc_638DC:
		move.l	#loc_638EC,(a0)
		lea	word_66492(pc),a1
		jmp	SetUp_ObjAttributes3.w
; ---------------------------------------------------------------------------

loc_638EC:
		lea	byte_66905(pc),a1
		jsr	Animate_RawNoSST.w
		jsr	Refresh_ChildPosition.w
		move.b	(V_int_run_count+3).w,d0
		andi.b	#7,d0
		bne.s	loc_63910
		lea	ChildObjDat_66664(pc),a2
		jsr	CreateChild6_Simple.w

loc_63910:
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_63916:
		lea	word_66498(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_63946,(a0)
		move.l	#Go_Delete_Sprite,$34(a0)
		jsr	Random_Number.w
		andi.w	#$7F,d0
		subi.w	#$3F,d0
		move.w	d0,$18(a0)
		move.w	#-$100,$1A(a0)

loc_63946:
		jsr	MoveSprite2.w
		lea	byte_6690B(pc),a1
		jsr	Animate_RawNoSST.w
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_6395C:
		lea	(ObjDat_BossExplosion1).l,a1
		jsr	SetUp_ObjAttributes.w
		move.l	#Go_Delete_Sprite,$34(a0)
		moveq	#-$4C,d0
		jsr	Play_Sound_2.w
		moveq	#0,d0
		move.b	$2C(a0),d0
		lea	byte_639A2(pc,d0.w),a1
		lsr.w	#1,d0
		move.w	d0,$2E(a0)
		move.b	(a1)+,d0
		ext.w	d0
		add.w	d0,$10(a0)
		move.b	(a1)+,d0
		ext.w	d0
		add.w	d0,$14(a0)
		lea	(loc_639B6).l,a1
		move.l	a1,(a0)
		jmp	(a1)
; ---------------------------------------------------------------------------
byte_639A2:	dc.b 0
		dc.b 0
		dc.b 8
		dc.b $F8
		dc.b $FA
		dc.b $F4
		dc.b $F6
		dc.b 4
		dc.b 8
		dc.b $A
		dc.b 0
		dc.b $18
		dc.b 8
		dc.b $E8
		dc.b $F4
		dc.b $E0
		dc.b $EA
		dc.b $FC
		dc.b $18
		dc.b 0
; ---------------------------------------------------------------------------

loc_639B6:
		subq.w	#1,$2E(a0)
		bpl.w	locret_6206C
		lea	(Obj_BossExplosionAnim).l,a1
		move.l	a1,(a0)
		jmp	(a1)
; ---------------------------------------------------------------------------

loc_639C8:
		lea	(ObjDat3_919A6).l,a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_63A16,(a0)
		move.w	(Camera_X_pos).w,d0
		addi.w	#$110,d0
		move.w	d0,$10(a0)
		move.w	(Camera_Y_pos).w,d0
		subi.w	#$60,d0
		move.w	d0,$14(a0)
		moveq	#Mus_Boss,d0
		jsr	Play_Sound.w
		lea	(ChildObjDat_919D0).l,a2
		jsr	CreateChild1_Normal.w
		lea	(ArtKosM_EggRoboBadnik).l,a1
		move.w	#-$6000,d2
		jmp	Queue_Kos_Module.w
; ---------------------------------------------------------------------------

loc_63A16:
		addq.w	#1,$14(a0)
		move.w	(Camera_Y_pos).w,d0
		addi.w	#$40,d0
		cmp.w	$14(a0),d0
		bge.s	loc_63A3A
		move.l	#loc_63A46,(a0)
		move.w	#$7F,$2E(a0)
		jsr	Swing_Setup1.w

loc_63A3A:
		jsr	(sub_91988).l
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_63A46:
		subq.w	#1,$2E(a0)
		bne.s	loc_63A52
		move.w	#$400,$18(a0)

loc_63A52:
		jsr	Swing_UpAndDown.w
		jsr	MoveSprite2.w
		jsr	(sub_91988).l
		jmp	Sprite_CheckDelete.w
; ---------------------------------------------------------------------------

loc_63A6A:
		cmpi.b	#2,(Player_1+character_id).w
		beq.w	loc_62158
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_63A8C(pc,d0.w),d1
		jsr	off_63A8C(pc,d1.w)
		bsr.w	Knuckles_Load_PLC_661E0
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
off_63A8C:	dc.w loc_63A96-off_63A8C

		dc.w loc_63ACA-off_63A8C
		dc.w loc_63AE8-off_63A8C
		dc.w loc_63B10-off_63A8C
		dc.w locret_63B20-off_63A8C
; ---------------------------------------------------------------------------

loc_63A96:
		lea	ObjDat4_663BA(pc),a1
		jsr	SetUp_ObjAttributesSlotted.w
		bset	#0,4(a0)
		move.l	#Map_Knuckles,$C(a0)
		move.b	#$56,$22(a0)
		move.w	#$3A38,$10(a0)
		move.w	#$EC,$14(a0)
		lea	Pal_CutsceneKnux1.w,a1
		jmp	PalLoad_Line1.w
; ---------------------------------------------------------------------------

loc_63ACA:
		btst	#1,(__u_FAB8).w
		beq.w	locret_6206C
		move.b	#4,5(a0)
		move.b	#-$22,$22(a0)
		move.l	#loc_63AF2,$34(a0)

loc_63AE8:
		lea	word_66891(pc),a1
		jmp	Animate_Raw2NoSSTMultiDelay.w
; ---------------------------------------------------------------------------

loc_63AF2:
		move.b	#6,5(a0)
		bset	#2,(__u_FAB8).w
		move.l	#loc_63B1A,$34(a0)
		lea	word_668A7(pc),a1
		jmp	Set_Raw_Animation.w
; ---------------------------------------------------------------------------

loc_63B10:
		lea	word_668A7(pc),a1
		jmp	Animate_Raw2NoSSTMultiDelay.w
; ---------------------------------------------------------------------------

loc_63B1A:
		move.b	#8,5(a0)

locret_63B20:
		rts

; ---------------------------------------------------------------------------
word_63CEC:	dc.w $180
		dc.w $480
		dc.w $FE0
		dc.w $11E0
		dc.w $380
		dc.w $380
		dc.w $10E0
		dc.w $10E0
; ---------------------------------------------------------------------------

loc_63CFC:
		st	MonContPos.w		; NAT: Move contents offscreen
		st	BossHitMode.w		; NAT: Enable hit mode
		clr.w	BossHitsP1.w		; clear hits count

		movea.l	a0,a1
		move.l	#loc_63D1A,(a1)
		lea	(Dynamic_object_RAM+$D02).w,a2
		move.w	a2,(__u_FAA4).w
		moveq	#$24,d0

loc_63D0E:
		move.w	(a1)+,(a2)+
		dbf	d0,loc_63D0E
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_63D1A:
	;	cmpi.b	#2,(Player_1+character_id).w
	;	beq.w	loc_62158
		lea	word_63CEC(pc),a1
		jsr	(Check_CameraInRange).l
		jsr	sub_85D6A.w
		jsr	Create_New_Sprite.w
		bne.s	loc_63D5C
		move.l	#loc_85CA4,(a1)
		move.l	#loc_63DD4,$34(a1)
		move.b	#Mus_Knux,$26(a1)
		move.w	#$78,$2E(a1)
		move.b	$27(a0),$27(a1)

loc_63D5C:
		move.w	#$42C,PlayerSpawn+2.w		; NAT: Set respawn y-pos
		move.l	#loc_63DE0,(a0)
		move.l	#Map_Knuckles,$C(a0)
		move.w	#$24DA,$A(a0)
		move.w	#prio(2),8(a0)
		move.b	#$18,7(a0)
		move.b	#$18,6(a0)
		move.b	#$13,$1E(a0)
		move.b	#9,$1F(a0)
		move.b	#4,4(a0)
		bset	#0,4(a0)
		move.b	#-$28,$22(a0)
		move.b	#8,$29(a0)
		move.l	#word_66771,$30(a0)
		clr.w	$44(a0)
		lea	(Normal_palette_line_2).w,a1
		lea	(Target_palette_line_2).w,a2
		moveq	#7,d6

loc_63DBC:
		move.l	(a1)+,(a2)+
		dbf	d6,loc_63DBC
		lea	Pal_CutsceneKnux1.w,a1
		jsr	PalLoad_Line1.w

loc_63DCC:
		move.w	#$88,(Normal_palette_line_2+$C).w
		rts
; ---------------------------------------------------------------------------

loc_63DD4:
		bset	#0,(__u_FAB8).w
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------

loc_63DE0:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_63E1E(pc,d0.w),d1
		jsr	off_63E1E(pc,d1.w)
		move.w	$44(a0),d0
		move.w	off_63E00(pc,d0.w),d0
		jsr	off_63E00(pc,d0.w)

		move.w	#$10F0,PlayerSpawn.w		; NAT: Set left spawn
		cmp.w	#$1178,x_pos(a0)		; check if boss is beyond middle
		bhs.s	.gotit				; yes? branch
		move.w	#$1200,PlayerSpawn.w		; set right spawn
.gotit		jmp	Draw_Sprite.w

; ---------------------------------------------------------------------------
off_63E00:	dc.w loc_63E06-off_63E00
		dc.w loc_63E0A-off_63E00
		dc.w loc_63E14-off_63E00
; ---------------------------------------------------------------------------

loc_63E06:
		bra.w	Knuckles_Load_PLC_661E0
; ---------------------------------------------------------------------------

loc_63E0A:
		lea	DPLCPtr_66682(pc),a2
		jmp	Perform_DPLC.w
; ---------------------------------------------------------------------------

loc_63E14:
		lea	DPLCPtr_6668A(pc),a2
		jmp	Perform_DPLC.w
; ---------------------------------------------------------------------------
off_63E1E:	dc.w loc_63E7C-off_63E1E	; 0
		dc.w loc_63EDA-off_63E1E
		dc.w loc_63F3C-off_63E1E
		dc.w loc_63FD8-off_63E1E
		dc.w loc_64016-off_63E1E	; 8
		dc.w loc_6403A-off_63E1E
		dc.w loc_64090-off_63E1E
		dc.w loc_64102-off_63E1E
		dc.w loc_6414C-off_63E1E	; $10
		dc.w loc_64184-off_63E1E
		dc.w loc_641EC-off_63E1E
		dc.w loc_64258-off_63E1E	; hurt
		dc.w loc_642F0-off_63E1E	; $18
		dc.w loc_64350-off_63E1E
		dc.w loc_6438A-off_63E1E
		dc.w loc_643BE-off_63E1E
		dc.w loc_643EA-off_63E1E	; $20
		dc.w loc_64422-off_63E1E
		dc.w loc_64460-off_63E1E
		dc.w loc_6451E-off_63E1E
		dc.w loc_64574-off_63E1E
		dc.w loc_64594-off_63E1E
		dc.w loc_645D4-off_63E1E
		dc.w loc_64610-off_63E1E
		dc.w loc_64668-off_63E1E
		dc.w loc_64692-off_63E1E
		dc.w loc_646F6-off_63E1E
		dc.w loc_64758-off_63E1E
		dc.w loc_647C6-off_63E1E
		dc.w loc_6480A-off_63E1E
		dc.w loc_64846-off_63E1E
		dc.w loc_6487C-off_63E1E
		dc.w loc_648B2-off_63E1E
		dc.w loc_648E2-off_63E1E
		dc.w loc_648F2-off_63E1E
		dc.w loc_64952-off_63E1E
		dc.w loc_64984-off_63E1E
		dc.w loc_649AE-off_63E1E
		dc.w loc_649D6-off_63E1E
		dc.w loc_64A00-off_63E1E
		dc.w loc_64A36-off_63E1E
		dc.w loc_64A6E-off_63E1E
		dc.w loc_64AC0-off_63E1E
		dc.w loc_64B10-off_63E1E
		dc.w loc_64B6A-off_63E1E
		dc.w loc_64BB8-off_63E1E
		dc.w loc_64BFA-off_63E1E
; ---------------------------------------------------------------------------

loc_63E7C:
		jsr	Animate_Raw2MultiDelay.w
		tst.w	d2
		bpl.s	loc_63EA0
		btst	#0,(__u_FAB8).w
		beq.s	loc_63EA0
		move.b	$39(a0),d0
		addq.b	#1,d0
		cmpi.b	#2,d0
		bhs.w	loc_641C4
		move.b	d0,$39(a0)

loc_63EA0:
		jsr	Find_SonicTails.w
		bsr.w	sub_66094
		cmpi.w	#$40,d3
		bhs.w	locret_6206C
		cmpi.w	#$30,d2
		bhs.w	locret_6206C
		bra.w	loc_63F20
; ---------------------------------------------------------------------------

loc_63EBE:
		move.b	#0,5(a0)
		clr.b	$39(a0)
		clr.w	$18(a0)
		clr.w	$1A(a0)
		lea	word_66771(pc),a1
		jmp	Set_Raw_Animation.w
; ---------------------------------------------------------------------------

loc_63EDA:
		jsr	Animate_RawCheckResult.w
		jsr	Find_SonicTails.w
		bsr.w	sub_66094
		cmpi.w	#$10,d3
		bhs.s	loc_63F00
		cmpi.w	#$20,d2
		bhs.s	loc_63F00
		cmpi.b	#2,$20(a1)
		bne.w	loc_63FF8

loc_63F00:
		subq.w	#1,$2E(a0)
		bmi.w	loc_64066
		lea	off_63F10(pc),a3
		bra.w	Knux_CheckReaction
; ---------------------------------------------------------------------------
off_63F10:	dc.l Knux_React_Slide
		dc.l loc_63FF8
		dc.l Knux_React_GetHurt
		dc.l Knux_React_HurtPlayer
; ---------------------------------------------------------------------------

loc_63F20:
		move.b	#2,5(a0)
		move.b	#-$26,$22(a0)
		move.w	#$77,$2E(a0)
		lea	byte_667AD(pc),a1
		jmp	Set_Raw_Animation.w
; ---------------------------------------------------------------------------

loc_63F3C:
		jsr	(sub_6615A).l
		move.w	$18(a0),d0
		beq.s	loc_63F58
		move.w	$40(a0),d1
		add.w	d1,d0
		move.w	d0,$18(a0)
		jsr	MoveSprite2.w

loc_63F58:
		jsr	Animate_Raw2MultiDelay.w
		bmi.w	locret_6206C
		lea	off_63F6A(pc),a3
		bra.w	Knux_CheckReaction
; ---------------------------------------------------------------------------
off_63F6A:	dc.l Knux_React_Slide
		dc.l Knux_React_HurtPlayer
		dc.l Knux_React_GetHurt
		dc.l Knux_React_HurtPlayer
; ---------------------------------------------------------------------------

Knux_React_Slide:
		move.b	#4,5(a0)
		move.l	#loc_63EBE,$34(a0)
		move.w	#$2C0,d3
		move.w	#-$20,d4
		btst	#0,4(a0)
		bne.s	loc_63F9C
		neg.w	d3
		neg.w	d4

loc_63F9C:
		move.w	d3,$18(a0)
		move.w	d4,$40(a0)
		move.w	$18(a1),d0
		move.w	#$100,d1
		move.w	#-$100,d2
		cmp.w	d2,d0
		blt.s	loc_63FC0
		cmp.w	d1,d0
		bge.s	loc_63FC0
		tst.w	d0
		bpl.s	loc_63FBE
		move.w	d2,d1

loc_63FBE:
		move.w	d1,d0

loc_63FC0:

		neg.w	d0
		move.w	d0,$18(a1)
		neg.w	$1A(a1)
		neg.w	$1C(a1)

loc_63FCE:
		lea	word_667B4(pc),a1
		jmp	Set_Raw_Animation.w
; ---------------------------------------------------------------------------

loc_63FD8:
		subq.w	#1,$2E(a0)
		bmi.w	loc_63EBE
		lea	off_63FE8(pc),a3
		bra.w	Knux_CheckReaction
; ---------------------------------------------------------------------------
off_63FE8:	dc.l Knux_React_HurtPlayer
		dc.l Knux_React_HurtPlayer
		dc.l Knux_React_GetHurt
		dc.l Knux_React_HurtPlayer
; ---------------------------------------------------------------------------

loc_63FF8:
		tst.b	$34(a1)
		bne.w	locret_6206C
		move.b	#6,5(a0)

loc_64006:
		move.b	#-$22,$22(a0)
		move.w	#7,$2E(a0)
		bra.w	loc_660AE
; ---------------------------------------------------------------------------

loc_64016:
		jmp	Animate_RawCheckResult.w
; ---------------------------------------------------------------------------

loc_6401C:
		move.b	#$A,5(a0)
		move.w	#-$600,$1A(a0)
		moveq	#$62,d0
		jsr	Play_Sound_2.w
		lea	byte_667C1(pc),a1
		jmp	Set_Raw_Animation.w
; ---------------------------------------------------------------------------

loc_6403A:
		jsr	Animate_RawCheckResult.w
		jsr	MoveSprite.w
		tst.w	$1A(a0)
		bpl.w	loc_640DC
		lea	off_64056(pc),a3
		bra.w	Knux_CheckReaction
; ---------------------------------------------------------------------------
off_64056:	dc.l Knux_React_HurtPlayer

		dc.l Knux_React_HurtPlayer
		dc.l Knux_React_HurtPlayer
		dc.l Knux_React_HurtPlayer
; ---------------------------------------------------------------------------

loc_64066:

		move.b	#8,5(a0)
		jsr	Find_SonicTails.w
		bsr.w	sub_66094
		clr.w	$18(a0)
		clr.w	$1A(a0)
		move.l	#loc_6401C,$34(a0)
		lea	byte_667CC(pc),a1
		jmp	Set_Raw_Animation.w
; ---------------------------------------------------------------------------

loc_64090:
		jsr	(sub_6615A).l
		jsr	MoveSprite2.w
		tst.w	$18(a0)
		beq.w	loc_64132
		jsr	Find_SonicTails.w
		cmpi.w	#$30,d2
		blo.s	loc_640C4
		btst	#0,4(a0)
		sne	d4
		tst.w	d0
		beq.s	loc_640BE
		not.b	d4

loc_640BE:
		tst.b	d4
		beq.w	loc_64132

loc_640C4:
		lea	off_640CC(pc),a3
		bra.w	Knux_CheckReaction
; ---------------------------------------------------------------------------
off_640CC:	dc.l Knux_React_HurtPlayer
		dc.l Knux_React_HurtPlayer
		dc.l Knux_React_GetHurt
		dc.l Knux_React_HurtPlayer
; ---------------------------------------------------------------------------

loc_640DC:
		move.b	#$C,5(a0)
		move.b	#-$40,$22(a0)
		move.w	#$400,d0
		btst	#0,4(a0)
		beq.s	loc_640F6
		neg.w	d0

loc_640F6:
		move.w	d0,$18(a0)
		move.w	#$80,$1A(a0)
		rts
; ---------------------------------------------------------------------------

loc_64102:
		jsr	Animate_Raw2MultiDelay.w
		jsr	MoveSprite.w
		jsr	ObjCheckFloorDist.w
		tst.w	d1
		bmi.w	loc_64164
		lea	off_64122(pc),a3
		bra.w	Knux_CheckReaction
; ---------------------------------------------------------------------------
off_64122:	dc.l Knux_React_GetHurt
		dc.l Knux_React_HurtPlayer
		dc.l Knux_React_GetHurt
		dc.l Knux_React_HurtPlayer
; ---------------------------------------------------------------------------

loc_64132:
		move.b	#$E,5(a0)
		bchg	#0,4(a0)
		clr.w	$18(a0)
		lea	word_667D4(pc),a1
		jmp	Set_Raw_Animation.w
; ---------------------------------------------------------------------------

loc_6414C:
		jsr	Animate_RawCheckResult.w
		jsr	Find_SonicTails.w
		bsr.w	sub_66094
		lea	off_63F10(pc),a3
		bra.w	Knux_CheckReaction
; ---------------------------------------------------------------------------

loc_64164:
		add.w	d1,$14(a0)
		move.b	#$10,5(a0)
		clr.w	$1A(a0)
		move.l	#loc_63EBE,$34(a0)
		lea	byte_667E0(pc),a1
		jmp	Set_Raw_Animation.w
; ---------------------------------------------------------------------------

loc_64184:
		move.b	(V_int_run_count+3).w,d0
		andi.b	#$F,d0
		bne.s	loc_64196
		moveq	#$3C,d0
		jsr	Play_Sound_2.w

loc_64196:
		jsr	Animate_RawCheckResult.w
		subq.w	#1,$2E(a0)
		bmi.w	loc_64222
		cmpi.w	#$2B,$2E(a0)
		bne.s	loc_641BC
		bclr	#0,$38(a0)
		lea	ChildObjDat_665FC(pc),a2
		jsr	CreateChild6_Simple.w

loc_641BC:
		lea	off_64056(pc),a3
		bra.w	Knux_CheckReaction
; ---------------------------------------------------------------------------

loc_641C4:
		move.b	#$12,5(a0)
		jsr	Find_SonicTails.w
		bsr.w	sub_66094
		clr.w	$18(a0)
		clr.w	$1A(a0)
		move.w	#$3B,$2E(a0)
		lea	byte_667F5(pc),a1
		jmp	Set_Raw_Animation.w
; ---------------------------------------------------------------------------

loc_641EC:
		jsr	Animate_RawCheckResult.w
		jsr	(sub_6615A).l
		tst.w	$18(a0)
		bne.s	loc_6420C
		bchg	#0,4(a0)
		subq.w	#4,$14(a0)
		bra.w	loc_63EBE
; ---------------------------------------------------------------------------

loc_6420C:
		move.w	$40(a0),d0
		add.w	d0,$18(a0)
		jsr	MoveSprite2.w
		lea	off_64056(pc),a3
		bra.w	Knux_CheckReaction
; ---------------------------------------------------------------------------

loc_64222:
		move.b	#$14,5(a0)
		bset	#0,$38(a0)
		move.w	#$800,d0
		move.w	#-$10,d1
		btst	#0,4(a0)
		beq.s	loc_64242
		neg.w	d0
		neg.w	d1

loc_64242:
		move.w	d0,$18(a0)
		move.w	d1,$40(a0)
		addq.w	#4,$14(a0)
		lea	byte_667C1(pc),a1
		jmp	Set_Raw_Animation.w
; ---------------------------------------------------------------------------

loc_64258:
		jsr	Animate_RawCheckResult.w
		jsr	(sub_6615A).l
		jsr	MoveSprite.w
		tst.w	$1A(a0)
		bmi.w	locret_6206C
		jsr	ObjCheckFloorDist.w
		tst.w	d1
		bpl.w	locret_6206C
		add.w	d1,$14(a0)
		move.w	(Camera_X_pos).w,d0
		addi.w	#$A0,d0
		sub.w	$10(a0),d0
		bpl.s	loc_64292
		neg.w	d0

loc_64292:
		cmpi.w	#$60,d0
		blo.w	loc_641C4
		bra.w	loc_64066
; ---------------------------------------------------------------------------

Knux_React_GetHurt:
		lea	BossHitsP1.w,a2			; NAT: get score
		cmp.w	#Player_1,a1			; check if sanic
		beq.s	.sanic				; if so, branch
		addq.w	#1,a2				; inc to tails
.sanic		addq.b	#1,(a2)				; add score

		bset	#0,$38(a0)
		moveq	#$5D,d0
		jsr	Play_Sound_2.w
		move.w	#$300,d3
		move.w	$10(a1),d1
		sub.w	$10(a0),d1
		bcs.s	loc_642BC
		neg.w	d3

loc_642BC:
		move.w	d3,$18(a0)
		move.w	#-$300,$1A(a0)
		subq.b	#1,$29(a0)
		beq.s	loc_64310
		move.b	#$16,5(a0)
		move.w	#0,$44(a0)
		move.l	#Map_Knuckles,$C(a0)
		move.b	#-$73,$22(a0)
		lea	byte_667BC(pc),a1
		jmp	Set_Raw_Animation.w
; ---------------------------------------------------------------------------

loc_642F0:
		jsr	(sub_6615A).l
		jsr	MoveSprite.w
		tst.w	$1A(a0)
		bmi.w	locret_6206C
		jsr	ObjCheckFloorDist.w
		tst.w	d1
		bmi.s	loc_64356
		rts
; ---------------------------------------------------------------------------

loc_64310:
		move.b	#$18,5(a0)
		clr.b	(Update_HUD_timer).w
		move.w	#2,$44(a0)
		move.l	#Map_HPZKnucklesGrab,$C(a0)
		move.b	#2,$22(a0)
		bset	#4,$38(a0)
		move.b	#$14,(Level_music+$1).w
		jsr	Create_New_Sprite.w
		bne.s	locret_6434E
		move.l	#Obj_Song_Fade_Transition,(a1)
		move.b	#Mus_LRZ2,$2C(a1)

locret_6434E:
		rts
; ---------------------------------------------------------------------------

loc_64350:
		jmp	Animate_Raw2MultiDelay.w
; ---------------------------------------------------------------------------

loc_64356:
		add.w	d1,$14(a0)
		move.b	#$1A,5(a0)
		move.l	#loc_643A4,$34(a0)
		moveq	#-$70,d0
		jsr	Play_Sound_2.w
		lea	byte_6680A(pc),a1
		jsr	Set_Raw_Animation.w
		lea	(ArtKosM_HPZKnuxDizzy).l,a1
		move.w	#-$6000,d2
		jmp	Queue_Kos_Module.w
; ---------------------------------------------------------------------------

loc_643A4:
		move.b	#$1C,5(a0)
		move.w	#$7F,$2E(a0)
	;	st	(ScrShake_Value).w
	;	lea	ChildObjDat_66602(pc),a2
	;	jsr	CreateChild6_Simple.w
		rts
; ---------------------------------------------------------------------------

loc_6438A:
;		move.b	(V_int_run_count+3).w,d0
;		andi.b	#$1F,d0
;		bne.s	loc_6439C
;		moveq	#$59,d0
;		jsr	Play_Sound_2.w

loc_6439C:
		subq.w	#1,$2E(a0)
		bpl.s	locret_643E8

loc_643C6:
		move.b	#$1E,5(a0)
		move.b	#6,$22(a0)
		move.w	#$F,$2E(a0)
		lea	ChildObjDat_66644(pc),a2
		jsr	CreateChild6_Simple.w
		bne.s	locret_643E8
		st	$2C(a1)

locret_643E8:
		rts
; ---------------------------------------------------------------------------

loc_643BE:
		subq.w	#1,$2E(a0)
		bpl.s	locret_643E8

loc_643F2:
		move.b	#$20,5(a0)
		move.w	#0,$44(a0)
		move.l	#Map_Knuckles,$C(a0)
		move.b	#$56,$22(a0)
		bclr	#0,4(a0)
		move.w	#7,$2E(a0)
		clr.w	$18(a0)
		clr.w	$1A(a0)
		rts
; ---------------------------------------------------------------------------

loc_64422:
		jsr	Animate_RawCheckResult.w
		move.w	$18(a0),d0
		addi.w	#$10,d0
		cmpi.w	#$400,d0
		bhs.s	loc_6443A
		move.w	d0,$18(a0)

loc_6443A:
		jsr	MoveSprite2.w
		move.w	(Camera_X_pos).w,d0
		addi.w	#$180,d0
		cmp.w	$10(a0),d0
		blo.s	loc_64472
; ---------------------------------------------------------------------------

loc_64460:
		rts		; NAT: NO MORE
	;	jsr	Animate_RawCheckResult.w
	;	btst	#0,(__u_FAB8).w
	;	bne.w	loc_6453C
	;	rts
; ---------------------------------------------------------------------------

loc_643EA:
		subq.w	#1,$2E(a0)
		bpl.s	loc_64472.rts

loc_64450:
		move.b	#$22,5(a0)
		lea	byte_66824(pc),a1
		jmp	Set_Raw_Animation.w
; ---------------------------------------------------------------------------

loc_64472:
		move.b	#$24,5(a0)
		jsr	Create_New_Sprite.w		; NAT: Get end of level flagpole
		bne.s	.rts
		move.l	#Obj_EndSignControl_HitHUD,(a1)
		move.w	#$1180,x_pos(a1)
		move.w	y_pos(a0),y_pos(a1)
.rts		rts

		move.w	#2,$44(a0)
		move.l	#Map_HPZKnucklesGrab,$C(a0)
		move.b	#$A,$22(a0)
		lea	byte_6687B(pc),a1
		jsr	Set_Raw_Animation.w
		bset	#7,$A(a0)
		move.w	#$1620,$10(a0)
		move.w	#$3AC,$14(a0)
		clr.b	(__u_FAB8).w
		clr.w	(ScrShake_Value).w
		jsr	Create_New_Sprite.w
		bne.s	loc_644BE
		move.l	#loc_64C70,(a1)

loc_644BE:
		jsr	Create_New_Sprite.w
		bne.s	loc_644CC
		move.l	#loc_64E88,(a1)

loc_644CC:
		jsr	Create_New_Sprite.w
		bne.s	loc_644DA
		move.l	#Obj_IncLevEndXGradual,(a1)


loc_644DA:
		jsr	Create_New_Sprite.w
		bne.s	loc_644E8
		move.l	#Obj_DecLevStartYGradual,(a1)

loc_644E8:
		move.w	(__u_FA98).w,(Camera_target_max_Y_pos).w
		jsr	Create_New_Sprite.w
		bne.s	loc_644FC
		move.l	#Obj_IncLevEndYGradual,(a1)

loc_644FC:
		lea	(ArtKosM_KnuxFinalBossCrane).l,a1
		move.w	#-$6B20,d2
		jsr	Queue_Kos_Module.w
		lea	PLC_64516(pc),a1
		jmp	Load_PLC_Raw.w
; ---------------------------------------------------------------------------
PLC_64516:	dc.w 0
		dc.l ArtNem_RobotnikShip
		dc.w $A5C0
; ---------------------------------------------------------------------------

loc_6451E:
		jsr	Animate_RawCheckResult.w
		jsr	MoveSprite.w
		tst.w	$1A(a0)
		bmi.s	locret_6453A
		jsr	ObjCheckFloorDist.w
		tst.w	d1
		bmi.s	loc_6457C

locret_6453A:
		rts
; ---------------------------------------------------------------------------

loc_6453C:
		move.b	#$26,5(a0)
		move.w	#0,$44(a0)
		move.l	#Map_Knuckles,$C(a0)
		move.b	#-$66,$22(a0)
		move.w	#$C0,$18(a0)
		move.w	#-$600,$1A(a0)
		moveq	#$62,d0
		jsr	Play_Sound_2.w
		lea	byte_667C1(pc),a1
		jmp	Set_Raw_Animation.w
; ---------------------------------------------------------------------------

loc_6457C:
		add.w	d1,$14(a0)
		move.b	#$28,5(a0)
		move.b	#-$2A,$22(a0)
		move.w	#8,$2E(a0)
		rts
; ---------------------------------------------------------------------------

loc_64594:
		jsr	Animate_RawCheckResult.w
		jsr	MoveSprite.w
		tst.w	$1A(a0)
		bmi.s	locret_645AE
		cmpi.w	#$339,$14(a0)
		bhs.s	loc_645E0

locret_645AE:
		rts
; ---------------------------------------------------------------------------

loc_64574:
		subq.w	#1,$2E(a0)
		bpl.s	locret_645AE

loc_645B0:
		move.b	#$2A,5(a0)
		move.w	#-$C0,$18(a0)
		move.w	#-$500,$1A(a0)
		moveq	#$62,d0
		jsr	Play_Sound_2.w
		lea	byte_667C1(pc),a1
		jmp	Set_Raw_Animation.w
; ---------------------------------------------------------------------------

loc_645D4:
		subq.w	#1,$2E(a0)
		bmi.s	loc_6463C
		jmp	Animate_RawCheckResult.w
; ---------------------------------------------------------------------------

loc_645E0:
		move.b	#$2C,5(a0)
		move.w	#$339,$14(a0)
		move.w	#2,$44(a0)
		move.l	#Map_HPZKnucklesGrab,$C(a0)
		move.b	#$A,$22(a0)
		move.w	#$7F,$2E(a0)
		lea	byte_66880(pc),a1
		jmp	Set_Raw_Animation.w
; ---------------------------------------------------------------------------

loc_64610:
		jsr	Animate_RawCheckResult.w
		move.w	$18(a0),d0
		addi.w	#$C,d0
		cmpi.w	#$300,d0
		bls.s	loc_64628
		move.w	#$300,d0

loc_64628:
		move.w	d0,$18(a0)
		jsr	MoveSprite2.w
		cmpi.w	#$1660,$10(a0)
		bhs.s	loc_64670
		rts
; ---------------------------------------------------------------------------

loc_6463C:
		move.b	#$2E,5(a0)
		move.w	#0,$44(a0)
		move.l	#Map_Knuckles,$C(a0)
		move.b	#7,$22(a0)
		clr.w	$18(a0)
		clr.w	$1A(a0)
		lea	byte_6682F(pc),a1
		jmp	Set_Raw_Animation.w
; ---------------------------------------------------------------------------

loc_64670:
		move.b	#$30,5(a0)
		move.w	#2,$44(a0)
		move.l	#Map_HPZKnucklesGrab,$C(a0)
		move.b	#$D,$22(a0)
		move.w	#$1D,$2E(a0)
		rts
; ---------------------------------------------------------------------------

loc_64692:
		jsr	Animate_RawCheckResult.w
		jsr	MoveSprite.w
		movea.w	(__u_FAAE).w,a1
		lea	word_646B0(pc),a2
		jsr	(Check_InTheirRange).l
		bne.s	loc_6471A
		rts
; ---------------------------------------------------------------------------
word_646B0:	dc.w  $FFE0,   $40, $FFE0,   $40
; ---------------------------------------------------------------------------

loc_64668:
		subq.w	#1,$2E(a0)
		bpl.s	locret_64710

loc_646B8:
		move.b	#$32,5(a0)
		bset	#1,(__u_FAB8).w
		move.w	#0,$44(a0)
		move.l	#Map_Knuckles,$C(a0)
		move.b	#-$66,$22(a0)
		move.w	#$300,$18(a0)
		move.w	#-$500,$1A(a0)
		moveq	#$62,d0
		jsr	Play_Sound_2.w
		lea	byte_667C1(pc),a1
		jmp	Set_Raw_Animation.w
; ---------------------------------------------------------------------------

loc_646F6:
		jsr	Animate_RawCheckResult.w
		jsr	MoveSprite.w
		tst.w	$1A(a0)
		bmi.s	locret_64710
		cmpi.w	#$3AB,$14(a0)
		bhs.s	loc_6478E

locret_64710:
		rts
; ---------------------------------------------------------------------------

loc_6471A:
		bset	#6,$2A(a1)
		move.b	#$34,5(a0)
		move.w	#0,$44(a0)
		move.l	#Map_Knuckles,$C(a0)
		move.b	#-$66,$22(a0)
		move.w	#-$200,$18(a0)
		move.w	#-$200,$1A(a0)
		moveq	#$62,d0
		jsr	Play_Sound_2.w
		lea	byte_667C1(pc),a1
		jmp	Set_Raw_Animation.w
; ---------------------------------------------------------------------------

loc_64758:
		jsr	Animate_RawCheckResult.w
		move.w	$18(a0),d0
		addi.w	#$C,d0
		cmpi.w	#$300,d0
		bls.s	loc_64770
		move.w	#$300,d0

loc_64770:
		move.w	d0,$18(a0)
		jsr	MoveSprite2.w
		movea.w	(__u_FABA).w,a1
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		cmpi.w	#$30,d0
		blo.s	loc_647EC
		rts
; ---------------------------------------------------------------------------

loc_6478E:
		move.w	#$3AB,$14(a0)
		move.b	#$36,5(a0)
		bclr	#7,$A(a0)
		move.w	#0,$44(a0)
		move.l	#Map_Knuckles,$C(a0)
		move.b	#7,$22(a0)
		clr.w	$18(a0)
		clr.w	$1A(a0)
		lea	byte_6682F(pc),a1
		jmp	Set_Raw_Animation.w
; ---------------------------------------------------------------------------

loc_647C6:
		jsr	Animate_RawCheckResult.w
		jsr	MoveSprite.w
		movea.w	(__u_FABA).w,a1
		lea	word_647E4(pc),a2
		jsr	(Check_InTheirRange).l
		bne.s	loc_6482A
		rts
; ---------------------------------------------------------------------------
word_647E4:	dc.w  $FFF0,   $60,	0,   $10
; ---------------------------------------------------------------------------

loc_647EC:
		move.b	#$38,5(a0)
		move.w	#-$600,$1A(a0)
		moveq	#$62,d0
		jsr	Play_Sound_2.w
		lea	byte_667C1(pc),a1
		jmp	Set_Raw_Animation.w
; ---------------------------------------------------------------------------

loc_6480A:
		btst	#4,(__u_FAB8).w
		bne.s	loc_6486E

loc_64812:

		movea.w	(__u_FABA).w,a1
		move.w	$10(a1),d0
		subi.w	#$C,d0
		move.w	d0,$10(a0)
		move.w	$14(a1),$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_6482A:
		move.b	#$3A,5(a0)
		move.w	#2,$44(a0)
		move.l	#Map_HPZKnucklesGrab,$C(a0)
		move.b	#0,$22(a0)
		bra.s	loc_64812
; ---------------------------------------------------------------------------

loc_64846:
		subq.w	#1,$2E(a0)
		bmi.s	loc_6489E
		moveq	#0,d0
		move.b	(V_int_run_count+3).w,d1
		btst	#0,d1
		beq.s	loc_6485A
		moveq	#1,d0

loc_6485A:
		move.b	d0,$22(a0)
		andi.b	#3,d1
		beq.s	loc_6486C
		moveq	#$78,d0
		jsr	Play_Sound_2.w

loc_6486C:
		bra.s	loc_64812
; ---------------------------------------------------------------------------

loc_6486E:
		move.b	#$3C,5(a0)
		move.w	#$3B,$2E(a0)
		bra.s	loc_64812
; ---------------------------------------------------------------------------

loc_6487C:
		moveq	#0,d0
		btst	#0,(V_int_run_count+3).w
		beq.s	loc_64888
		moveq	#1,d0

loc_64888:
		move.b	d0,$22(a0)
		jsr	MoveSprite_LightGravity.w
		jsr	ObjCheckFloorDist.w
		tst.w	d1
		bmi.s	loc_648B8
		rts
; ---------------------------------------------------------------------------

loc_6489E:
		move.b	#$3E,5(a0)
		move.w	#-$100,$18(a0)
		move.w	#-$100,$1A(a0)
		rts
; ---------------------------------------------------------------------------

loc_648B2:
		jmp	Animate_Raw2MultiDelay.w
; ---------------------------------------------------------------------------

loc_648B8:
		add.w	d1,$14(a0)
		move.b	#$40,5(a0)
		bset	#5,(__u_FAB8).w
		clr.w	$18(a0)
		clr.w	$1A(a0)
		move.l	#loc_648EA,$34(a0)
		lea	byte_667E7(pc),a1
		jmp	Set_Raw_Animation.w
; ---------------------------------------------------------------------------

loc_648EA:
		move.b	#$42,5(a0)
.rts		rts
; ---------------------------------------------------------------------------
loc_648E2:
		tst.b	(__u_FAAC).w
		beq.s	loc_648EA.rts

loc_648FA:
		move.b	#$44,5(a0)
		move.w	#$10,$2E(a0)
		clr.b	(Scroll_lock).w
		move.w	#$5C0,d0
		move.w	d0,(Camera_target_max_Y_pos).w
		move.w	d0,(__u_FA98).w
		moveq	#-$34,d0
		jsr	Play_Sound_2.w
		jsr	Create_New_Sprite.w
		bne.s	loc_6492C
		move.l	#Obj_IncLevEndYGradual,(a1)

loc_6492C:
		bsr.w	loc_64930
loc_64930:
		lea	Child6_CreateBossExplosion.w,a2
		jsr	CreateChild6_Simple.w
		bne.s	locret_64950
		move.b	#$14,$2C(a1)
		move.w	#$1880,$10(a1)
		move.w	#$3D0,$14(a1)

locret_64950:
		rts
; ---------------------------------------------------------------------------

loc_64952:
		jsr	MoveSprite.w
		jsr	ObjCheckFloorDist.w
		tst.w	d1
		bmi.s	loc_6498A
		rts
; ---------------------------------------------------------------------------

loc_648F2:
		subq.w	#1,$2E(a0)
		bpl.s	locret_64950

loc_64964:
		move.b	#$46,5(a0)
		move.b	#2,$22(a0)
		st	(ScrEvents_1).w
		move.w	#$14,(ScrShake_Value).w
		lea	ChildObjDat_6663E(pc),a2
		jmp	CreateChild6_Simple.w
; ---------------------------------------------------------------------------

loc_64984:
		jmp	Animate_Raw2MultiDelay.w
; ---------------------------------------------------------------------------

loc_6498A:
		add.w	d1,$14(a0)
		move.b	#$48,5(a0)
		clr.w	$18(a0)
		clr.w	$1A(a0)
		move.l	#loc_649B4,$34(a0)
		lea	byte_6680A(pc),a1
		jmp	Set_Raw_Animation.w
; ---------------------------------------------------------------------------

loc_649AE:
		jmp	Animate_Raw2MultiDelay.w
; ---------------------------------------------------------------------------

loc_649B4:
		move.b	#$4A,5(a0)
		move.l	#loc_649DE,$34(a0)
		lea	byte_6684F(pc),a1
		jsr	Set_Raw_Animation.w
		lea	ChildObjDat_66644(pc),a2
		jmp	CreateChild6_Simple.w
; ---------------------------------------------------------------------------

loc_649D6:
		subq.w	#1,$2E(a0)
		bmi.s	loc_64A1C
		rts
; ---------------------------------------------------------------------------

loc_649DE:
		move.b	#$4C,5(a0)
		move.w	#0,$44(a0)
		move.l	#Map_Knuckles,$C(a0)
		move.b	#$56,$22(a0)
		move.w	#7,$2E(a0)
		rts
; ---------------------------------------------------------------------------

loc_64A00:
		jsr	Animate_RawCheckResult.w
		subi.w	#$C,$18(a0)
		jsr	MoveSprite2.w
		cmpi.w	#$1810,$10(a0)
		bls.s	loc_64A3C
		rts
; ---------------------------------------------------------------------------

loc_64A1C:
		move.b	#$4E,5(a0)
		bset	#0,4(a0)
		clr.w	$18(a0)
		lea	byte_6682F(pc),a1
		jmp	Set_Raw_Animation.w
; ---------------------------------------------------------------------------

loc_64A36:
		jmp	Animate_Raw2MultiDelay.w
; ---------------------------------------------------------------------------

loc_64A3C:
		move.b	#$50,5(a0)
		bclr	#0,4(a0)
		move.w	#2,$44(a0)
		move.l	#Map_HPZKnucklesGrab,$C(a0)
		move.b	#$E,$22(a0)
		move.l	#loc_64A8E,$34(a0)
		lea	word_668AF(pc),a1
		jmp	Set_Raw_Animation.w
; ---------------------------------------------------------------------------

loc_64A6E:
		jsr	Animate_Raw2MultiDelay.w
		beq.s	locret_64A8C
		cmpi.b	#6,$23(a0)
		bne.w	locret_64A8C
		st	(__u_FAA2).w
		moveq	#$59,d0
		jsr	Play_Sound_2.w

locret_64A8C:

		rts
; ---------------------------------------------------------------------------

loc_64A8E:
		move.b	#$52,5(a0)
		bset	#0,4(a0)
		move.l	#loc_64AE2,$34(a0)
		move.w	#0,$44(a0)
		move.l	#Map_Knuckles,$C(a0)
		move.b	#$56,$22(a0)
		lea	byte_66885(pc),a1
		jmp	Set_Raw_Animation.w
; ---------------------------------------------------------------------------

loc_64AC0:
		jsr	Animate_RawCheckResult.w
		subi.w	#$C,$18(a0)
		jsr	MoveSprite2.w
		move.w	(Camera_X_pos).w,d0
		subi.w	#$40,d0
		cmp.w	$10(a0),d0
		bhs.s	loc_64B22
		rts
; ---------------------------------------------------------------------------

loc_64AE2:
		move.b	#$54,5(a0)
		bset	#0,4(a0)
		move.w	#0,$44(a0)
		move.l	#Map_Knuckles,$C(a0)
		move.b	#7,$22(a0)
		clr.w	$18(a0)
		lea	byte_6682F(pc),a1
		jmp	Set_Raw_Animation.w
; ---------------------------------------------------------------------------

loc_64B10:
		jsr	Animate_RawMultiDelay.w
		btst	#6,(__u_FAB8).w
		bne.w	loc_64B80
		rts
; ---------------------------------------------------------------------------

loc_64B22:
		move.b	#$56,5(a0)
		move.w	#4,$44(a0)
		move.l	#Map_SSZKnucklesTired,$C(a0)
		clr.b	$22(a0)
		bclr	#0,4(a0)
		move.w	#$161C,$10(a0)
		move.w	#$62C,$14(a0)
		move.w	#$1520,(__u_FA94).w
		jsr	Create_New_Sprite.w
		bne.s	loc_64B60
		move.l	#Obj_DecLevStartXGradual,(a1)

loc_64B60:
		lea	byte_6671F(pc),a1
		jmp	Set_Raw_Animation.w
; ---------------------------------------------------------------------------

loc_64B6A:
		jsr	Animate_RawCheckResult.w
		jsr	MoveSprite.w
		cmpi.w	#$15C0,$10(a0)
		bls.s	loc_64BC6
		rts
; ---------------------------------------------------------------------------

loc_64B80:
		move.b	#$58,5(a0)
		move.w	#0,$44(a0)
		move.l	#Map_Knuckles,$C(a0)
		move.b	#-$66,$22(a0)
		move.w	#-$1E0,$18(a0)
		move.w	#-$600,$1A(a0)
		moveq	#$62,d0
		jsr	Play_Sound_2.w
		lea	byte_667C1(pc),a1
		jmp	Set_Raw_Animation.w
; ---------------------------------------------------------------------------

loc_64BB8:
		btst	#7,(__u_FAB8).w
		bne.s	loc_64C00
		jmp	Animate_RawMultiDelay.w
; ---------------------------------------------------------------------------

loc_64BC6:
		move.b	#$5A,5(a0)
		move.w	#$15C0,$10(a0)
		move.w	#$600,$14(a0)
		move.w	#4,$44(a0)
		move.l	#Map_SSZKnucklesTired,$C(a0)
		clr.b	$22(a0)
		bclr	#0,4(a0)
		lea	byte_6671F(pc),a1
		jmp	Set_Raw_Animation.w
; ---------------------------------------------------------------------------

loc_64BFA:
		jmp	Animate_RawCheckResult.w
; ---------------------------------------------------------------------------

loc_64C00:
		move.b	#$5C,5(a0)
		move.w	#0,$44(a0)
		move.l	#Map_Knuckles,$C(a0)
		move.b	#-$66,$22(a0)
		lea	byte_667C1(pc),a1
		jmp	Set_Raw_Animation.w
; ---------------------------------------------------------------------------

loc_64C24:
		lea	ObjDat3_664E2(pc),a1
		jsr	SetUp_ObjAttributes.w
		movea.w	$46(a0),a1
		btst	#0,$38(a1)
		bne.w	loc_62158
		move.w	$10(a1),$10(a0)
		move.w	$14(a1),$14(a0)
		bclr	#0,4(a0)
		btst	#0,4(a1)
		beq.s	loc_64C5C
		bset	#0,4(a0)

loc_64C5C:
		lea	byte_6683A(pc),a1
		jsr	Animate_RawNoSST.w
		bsr.w	sub_66236
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_64C70:
		lea	(Player_1).w,a1
		cmpi.w	#$14D0,$10(a1)
		blo.s	locret_64CA4
		move.l	#loc_64CA6,(a0)
		jsr	Stop_Object.w
		st	(Ctrl_1_locked).w
		clr.w	(Ctrl_1_logical).w
		jsr	Create_New_Sprite.w
		bne.s	loc_64C9E
		move.l	#loc_863C0,(a1)

loc_64C9E:
		move.w	#$300,(Camera_target_max_Y_pos).w

locret_64CA4:
		rts
; ---------------------------------------------------------------------------

loc_64CA6:
		lea	(Player_1).w,a1
		btst	#1,$2A(a1)
		bne.w	locret_6206C
		move.w	#$808,(Ctrl_1_logical).w
		cmpi.w	#$15A8,$10(a1)
		blo.w	locret_6206C
		move.l	#loc_64D1A,(a0)
		st	(Scroll_lock).w
		jsr	Create_New_Sprite.w		; disabled you bastard
		bne.s	loc_64CE2
		move.l	#Obj_Song_Fade_Transition,(a1)
		move.b	#Mus_Minib_SK,$2C(a1)

		cmp.b	#7,Current_zone.w
		bhs.s	loc_64CE2

		cmp.b	#4,Current_zone.w
		beq.s	loc_64CE2
		move.b	#Mus_Minib_S3,$2C(a1)		; NAT: S3 variant

loc_64CE2:
		lea	(Player_1).w,a1
		clr.b	(Ctrl_1_locked).w
		move.b	#-$7D,$2E(a1)
		move.b	#-$3C,$22(a1)
		cmpi.b	#1,$38(a1)
		bne.s	loc_64D04
		move.b	#-$50,$22(a1)

loc_64D04:
		move.b	#7,$20(a1)
		clr.w	(Ctrl_1_logical).w
		jsr	Stop_Object.w
		jmp	Player_Load_PLC.w
; ---------------------------------------------------------------------------

loc_64D1A:
		move.w	(Camera_X_pos).w,d0
		addq.w	#2,d0
		move.w	d0,(Camera_X_pos).w
		cmpi.w	#$1580,d0
		blo.s	locret_64D36
		move.l	#loc_64D38,(a0)
		bset	#0,(__u_FAB8).w

locret_64D36:
		rts
; ---------------------------------------------------------------------------

loc_64D38:
		btst	#1,(__u_FAB8).w
		beq.s	locret_64D5A
		move.l	#loc_64D5C,(a0)
		lea	(Player_1).w,a1
		move.b	#0,$2E(a1)
		st	(Ctrl_1_locked).w
		move.w	#$808,(Ctrl_1_logical).w

locret_64D5A:
		rts
; ---------------------------------------------------------------------------

loc_64D5C:
		lea	(Player_1).w,a1
		move.w	$18(a1),d0
		cmpi.w	#$300,d0
		bls.s	loc_64D6E
		move.w	#$300,d0

loc_64D6E:
		move.w	d0,$18(a1)
		move.w	d0,$1C(a1)
		ext.l	d0
		lsl.l	#8,d0
		add.l	d0,(Camera_X_pos).w
		move.w	#$17D0,d0
		cmp.w	(Camera_X_pos).w,d0
		bhi.s	locret_64DA8
		move.l	#loc_64DAA,(a0)
		move.w	d0,(Camera_X_pos).w
		move.w	d0,(Camera_min_X_pos).w
		move.w	d0,(Camera_max_X_pos).w
		move.w	(Camera_max_Y_pos).w,(Camera_min_Y_pos).w
		clr.b	(Ctrl_1_locked).w
		clr.b	(Ctrl_2_locked).w

locret_64DA8:
		rts
; ---------------------------------------------------------------------------

loc_64DAA:
		btst	#5,(__u_FAB8).w
		beq.s	locret_64DCA
		move.l	#loc_64DCC,(a0)
		st	(Ctrl_1_locked).w
		jsr	Create_New_Sprite.w
		bne.s	locret_64DCA
		move.l	#loc_863C0,(a1)

locret_64DCA:

		rts
; ---------------------------------------------------------------------------

loc_64DCC:
		lea	(Player_1).w,a1
		btst	#1,$2A(a1)
		bne.s	locret_64DDE
		move.l	#loc_64DE0,(a0)

locret_64DDE:
		rts
; ---------------------------------------------------------------------------

loc_64DE0:
		lea	(Player_1).w,a1
		move.w	#$808,d0
		move.w	$10(a1),d1
		subi.w	#$1892,d1
		bcs.s	loc_64DF6
		move.w	#$404,d0

loc_64DF6:
		move.w	d0,(Ctrl_1_logical).w
		tst.w	d1
		bpl.s	loc_64E00
		neg.w	d1

loc_64E00:
		cmpi.w	#4,d1
		bhi.w	locret_6206C
		move.l	#loc_64E28,(a0)
		move.w	#$3F,$2E(a0)
		st	(__u_FAAC).w
		clr.w	(Ctrl_1_logical).w
		jsr	Stop_Object.w
		jmp	Player_Load_PLC.w
; ---------------------------------------------------------------------------

loc_64E28:
		subq.w	#1,$2E(a0)
		bpl.s	locret_64E44
		move.l	#loc_64E46,(a0)
		lea	(Player_1).w,a1
		bset	#0,4(a1)
		bset	#0,$2A(a1)

locret_64E44:
		rts
; ---------------------------------------------------------------------------

loc_64E46:
		lea	(Player_1).w,a1
		cmpi.w	#$580,$14(a1)
		blo.s	locret_64E6A
		btst	#1,$2A(a1)
		bne.s	locret_64E6A
		move.l	#loc_64E6C,(a0)
		clr.b	(Ctrl_1_locked).w
		move.w	#$5C0,(Camera_min_Y_pos).w

locret_64E6A:

		rts
; ---------------------------------------------------------------------------

loc_64E6C:
		lea	(Player_1).w,a1
		cmpi.w	#$1660,$10(a1)
		bhs.w	locret_6206C
		move.l	#locret_64E86,(a0)
		clr.b	(Ctrl_2_locked).w
		rts
; ---------------------------------------------------------------------------

locret_64E86:
		rts
; ---------------------------------------------------------------------------

loc_64E88:
		lea	ObjDat3_664EE(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.w	a0,(__u_FAAE).w
		move.l	#loc_64EC4,(a0)
		bset	#0,4(a0)
		move.w	#$1640,$10(a0)
		move.w	#$2D0,$14(a0)
		lea	(Child1_MakeRoboHead4).l,a2
		jsr	CreateChild1_Normal.w
		lea	ChildObjDat_66608(pc),a2
		jsr	CreateChild1_Normal.w

loc_64EC4:
		btst	#2,$38(a0)
		beq.s	loc_64EEC
		move.l	#loc_64EF2,(a0)
		move.w	#$100,$18(a0)
		move.w	#$180,$1A(a0)
		move.w	#$40,$2E(a0)
		move.l	#loc_64F04,$34(a0)

loc_64EEC:
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_64EF2:
		jsr	MoveSprite2.w
		jsr	Obj_Wait.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_64F04:
		move.l	#loc_64F20,(a0)
		clr.w	$18(a0)
		jsr	Swing_Setup1.w
		lea	(Child1_MakeRoboShipFlame).l,a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_64F20:
		jsr	Swing_UpAndDown.w
		jsr	MoveSprite2.w
		btst	#6,$2A(a0)
		bne.s	loc_64F38
		addq.w	#2,$10(a0)

loc_64F38:
		cmpi.w	#$1890,$10(a0)
		blo.s	loc_64F66
		move.l	#loc_64F70,(a0)
		bset	#4,$38(a0)
		clr.w	$18(a0)
		move.b	#$F,$28(a0)
		move.b	#-1,$29(a0)
		lea	ChildSpriteDat_66624(pc),a2
		jsr	CreateChild3_NormalRepeated.w

loc_64F66:
		bsr.w	sub_66348
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_64F70:
		move.b	(__u_FAB8).w,d0
		andi.b	#$C,d0
		cmpi.b	#$C,d0
		bne.s	loc_64F8A
		move.l	#loc_64FA0,(a0)
		bset	#4,(__u_FAB8).w

loc_64F8A:
		jsr	Swing_UpAndDown.w
		jsr	MoveSprite2.w
		bsr.w	sub_66372
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------

loc_64FA0:
		jsr	Swing_UpAndDown.w
		jsr	MoveSprite2.w
		btst	#5,(__u_FAB8).w
		beq.s	loc_64FD2
		move.l	#loc_64FDC,(a0)
		move.w	#$190,$18(a0)
		bclr	#4,$38(a0)
		lea	(Child1_MakeRoboShipFlame).l,a2
		jsr	CreateChild1_Normal.w

loc_64FD2:
		bsr.w	sub_66372
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------

loc_64FDC:
		jsr	Swing_UpAndDown.w
		jsr	MoveSprite2.w
		move.w	(Camera_X_pos).w,d0
		addi.w	#$200,d0
		cmp.w	$10(a0),d0
		blo.s	loc_65000
		bsr.w	sub_66372
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------

loc_65000:
		ori.b	#$30,$38(a0)
		movea.w	(__u_FABA).w,a1
		jsr	Delete_Referenced_Sprite.w
		clr.w	(__u_FABA).w
		clr.w	(PalCyc_Counters+$2).w
		lea	(ArtKosM_Teleporter).l,a1
		move.w	#-$5A40,d2
		jsr	Queue_Kos_Module.w
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------

loc_6502E:
		lea	ObjDat3_664FA(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_65048,(a0)
		lea	ChildObjDat_66610(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_65048:
		btst	#0,(__u_FAB8).w
		bne.s	loc_6505C
		jsr	Refresh_ChildPositionAdjusted.w
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_6505C:
		move.l	#loc_65068,(a0)
		move.b	$43(a0),$3A(a0)

loc_65068:
		move.w	(__u_FABA).w,d0
		beq.s	loc_6509A
		movea.w	d0,a1
		move.w	$14(a1),d0
		subi.w	#$18,d0
		cmp.w	$14(a0),d0
		bls.s	loc_650A6
		move.w	$1A(a0),d0
		addi.w	#$80,d0
		bmi.s	loc_6508C
		move.w	d0,$1A(a0)

loc_6508C:
		move.b	$1A(a0),d2
		move.b	$3A(a0),d3
		add.b	d2,d3
		move.b	d3,$43(a0)

loc_6509A:
		jsr	Refresh_ChildPositionAdjusted.w
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_650A6:
		move.l	#loc_650D4,(a0)
		move.b	#2,$22(a0)
		move.w	#$14,(ScrShake_Value).w
		moveq	#-$34,d0
		jsr	Play_Sound_2.w
		lea	ChildObjDat_6661E(pc),a2
		jsr	CreateChild6_Simple.w
		lea	ChildObjDat_66638(pc),a2
		jsr	CreateChild6_Simple.w

loc_650D4:
		move.w	$1A(a0),d2
		subi.w	#$80,d2
		bpl.s	loc_650FA
		move.l	#loc_6510C,(a0)
		moveq	#0,d2
		movea.w	$46(a0),a1
		bset	#2,$38(a1)
		movea.w	(__u_FABA).w,a2
		bset	#7,$A(a2)

loc_650FA:
		move.w	d2,$1A(a0)
		move.b	$1A(a0),d2
		move.b	$3A(a0),d3
		add.b	d2,d3
		move.b	d3,$43(a0)

loc_6510C:
		jsr	Refresh_ChildPositionAdjusted.w
		move.w	(__u_FABA).w,d0
		beq.s	loc_65132
		movea.w	d0,a1
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),d0
		move.b	(__u_FABC+$1).w,d1
		ext.w	d1
		neg.w	d1
		add.w	d1,d0
		move.w	d0,$14(a1)

loc_65132:
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_65138:
		lea	word_66506(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_65148,(a0)

loc_65148:
		jsr	Refresh_ChildPositionAdjusted.w
		move.b	$22(a1),d0
		addq.b	#1,d0
		move.b	d0,$22(a0)
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_6515E:
		lea	word_6650C(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_6516E,(a0)

loc_6516E:
		movea.w	$46(a0),a1

		move.b	$1A(a1),d0
		lsr.b	#4,d0
		addq.b	#4,d0
		move.b	d0,$22(a0)
		jsr	Refresh_ChildPosition.w
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_6518A:
		lea	ObjDat3_66512(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_651AC,(a0)
		addi.w	#$30,$14(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		add.w	d0,d0
		move.w	d0,$2E(a0)

loc_651AC:
		subq.w	#1,$2E(a0)
		bmi.s	loc_651B4
		rts
; ---------------------------------------------------------------------------

loc_651B4:
		move.l	#loc_651E2,(a0)
		jsr	Random_Number.w
		andi.w	#$3F,d0
		subi.w	#$20,d0
		add.w	d0,$10(a0)
		swap	d0
		andi.w	#$3F,d0
		subi.w	#$20,d0
		add.w	d0,$14(a0)
		move.l	#loc_651F2,$34(a0)

loc_651E2:
		lea	byte_66843(pc),a1
		jsr	Animate_RawNoSST.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_651F2:
		move.l	#loc_6520A,(a0)
		move.l	#Go_Delete_Sprite,$34(a0)
		clr.b	$23(a0)
		clr.b	$24(a0)
		rts
; ---------------------------------------------------------------------------

loc_6520A:
		lea	byte_6684A(pc),a1
		jsr	Animate_RawNoSST.w
		subi.w	#$80,$1A(a0)
		jsr	MoveSprite2.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_65226:
		lea	ObjDat3_6651E(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_65276,(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	d0,d1
		move.w	word_65262(pc,d0.w),$42(a0)
		move.w	word_6526C(pc,d0.w),$2E(a0)
		lsr.w	#1,d1
		move.b	RawAni_6525C(pc,d1.w),$22(a0)
		move.l	#loc_65288,$34(a0)
		rts
; ---------------------------------------------------------------------------
RawAni_6525C:	dc.b  $1C, $1B,	$1A, $19, $18,	 0
word_65262:	dc.w $42C
		dc.w $FE2A
		dc.w $622
		dc.w $F824
		dc.w $FE1C
word_6526C:	dc.w $20
		dc.w $30
		dc.w $40
		dc.w $50
		dc.w $60
; ---------------------------------------------------------------------------

loc_65276:
		jsr	Refresh_ChildPosition.w
		jsr	Obj_Wait.w
		jmp	Sprite_CheckDeleteXY.w
; ---------------------------------------------------------------------------

loc_65288:
		move.l	#loc_65296,(a0)
		bset	#7,$A(a0)
		rts
; ---------------------------------------------------------------------------

loc_65296:
		jsr	MoveSprite.w
		jmp	Sprite_CheckDeleteXY.w
; ---------------------------------------------------------------------------

loc_652A2:
		move.l	#loc_652FE,(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		lea	byte_652DE(pc,d0.w),a1
		move.w	(Camera_X_pos).w,d1
		addi.w	#$140,d1
		move.w	(Camera_Y_pos).w,d2
		addi.w	#$C0,d2
		move.b	(a1)+,d3
		ext.w	d3
		add.w	d3,d1
		move.w	d1,$10(a0)
		move.b	(a1)+,d3
		ext.w	d3
		add.w	d3,d2
		move.w	d2,$14(a0)
		lsl.w	#2,d0
		move.w	d0,$2E(a0)
		rts
; ---------------------------------------------------------------------------
byte_652DE:	dc.b  $F0, $A8
		dc.b  $E8, $D0
		dc.b  $F8, $F0
		dc.b  $F0, $90
		dc.b  $E0, $A0
		dc.b  $F8, $C8
		dc.b  $E0, $F0
		dc.b  $E0, $C0
		dc.b  $C0, $A8
		dc.b  $D0, $D0
		dc.b  $C0, $F8
		dc.b  $B8, $C8
		dc.b  $C8, $E0
		dc.b  $A0, $C0
		dc.b  $A8, $E0
		dc.b  $90, $F8
; ---------------------------------------------------------------------------

loc_652FE:
		subq.w	#1,$2E(a0)
		bpl.w	locret_6206C
		lea	(Obj_Explosion).l,a1
		move.l	a1,(a0)
		move.b	#2,5(a0)
		jsr	(a1)
		bset	#7,$A(a0)
		rts
; ---------------------------------------------------------------------------

loc_6531E:
		lea	ObjDat3_6652A(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_65348,(a0)
		move.w	#$F0,$2E(a0)
		lea	ChildObjDat3_6662C(pc),a2
		tst.b	$2C(a0)
		beq.s	loc_65342
		lea	ChildObjDat3_66632(pc),a2

loc_65342:
		jmp	(CreateChild8_TreeListRepeated).l
; ---------------------------------------------------------------------------

loc_65348:
		subq.w	#1,$2E(a0)
		bne.s	loc_65354
		bset	#7,$38(a0)

loc_65354:
		jsr	Refresh_ChildPositionAdjusted.w
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_65360:
		bset	#3,$38(a0)
		move.b	#$40,$3C(a0)
		move.b	#1,$40(a0)
		bra.w	loc_65382
; ---------------------------------------------------------------------------

loc_65376:
		move.b	#-$40,$3C(a0)
		move.b	#-1,$40(a0)

loc_65382:
		lea	word_66536(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_653F2,(a0)
		move.b	$3C(a0),$26(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	d0,d1
		lsr.w	#1,d1
		btst	#3,$38(a0)
		beq.s	loc_653AE
		addi.w	#$A,d1

loc_653AE:
		move.b	byte_653DE(pc,d1.w),$31(a0)
		cmpi.b	#$12,d0
		bne.s	loc_653C0
		bset	#2,$38(a0)

loc_653C0:
		move.w	d0,d1
		addi.b	#$10,d1
		add.b	d1,d1
		move.b	d1,$30(a0)
		lsl.w	#2,d0
		subi.w	#$48,d0
		neg.w	d0
		move.w	d0,$2E(a0)
		move.w	d0,$32(a0)
		rts
; ---------------------------------------------------------------------------
byte_653DE:	dc.b $D0
		dc.b $D4
		dc.b $D8
		dc.b $E0
		dc.b $E8
		dc.b $F4
		dc.b $F8
		dc.b $FC
		dc.b 0
		dc.b $40
		dc.b $30
		dc.b $28
		dc.b $20
		dc.b $18
		dc.b $10
		dc.b 8
		dc.b $F0
		dc.b $E8
		dc.b $E0
		dc.b $C0
; ---------------------------------------------------------------------------

loc_653F2:
		subi.w	#1,$2E(a0)
		bmi.s	loc_65404
		bsr.w	sub_6628C
		jmp	(MoveSprite_Circular).l
; ---------------------------------------------------------------------------

loc_65404:
		move.l	#loc_6540A,(a0)

loc_6540A:
		move.w	$3A(a0),d0
		addi.w	#$20,d0
		cmpi.w	#$800,d0
		blo.s	loc_65432
		btst	#2,$38(a0)
		beq.s	loc_65426
		cmpi.w	#$C00,d0
		blo.s	loc_65432

loc_65426:
		move.l	#loc_65452,(a0)
		move.w	$32(a0),$2E(a0)

loc_65432:

		move.w	d0,$3A(a0)
		bsr.w	sub_6628C
		jsr	(MoveSprite_Circular).l
		btst	#2,$38(a0)
		beq.s	loc_6544C
		bsr.w	sub_662A6

loc_6544C:
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_65452:
		bsr.w	sub_6628C
		movea.w	$44(a0),a1
		btst	#7,$38(a1)
		beq.s	loc_6546E
		subq.w	#1,$2E(a0)
		bpl.s	loc_6546E
		move.l	#loc_6549A,(a0)

loc_6546E:

		btst	#2,$38(a0)
		bne.s	loc_65484
		moveq	#5,d2
		jsr	MoveSprite_CircularSimple.w
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_65484:
		bsr.w	sub_662A6
		lea	(AngleLookup_1).l,a2
		jsr	MoveSprite_AtAngleLookup.w
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_6549A:
		move.b	$3C(a0),d0
		moveq	#4,d1
		move.b	$31(a0),d2
		sub.b	d0,d2
		beq.s	loc_654C2
		sgt	d3
		bpl.s	loc_654AE
		neg.b	d2

loc_654AE:
		cmpi.b	#4,d2
		blo.s	loc_654C2
		tst.b	d3
		bne.s	loc_654BA
		neg.b	d1

loc_654BA:
		add.b	d1,d0
		move.b	d0,$3C(a0)
		bra.s	loc_6546E
; ---------------------------------------------------------------------------

loc_654C2:

		move.l	#loc_654E2,(a0)
		tst.b	$2C(a0)
		bne.s	loc_654E0
		movea.w	$44(a0),a1
		moveq	#2,d0
		tst.b	$2C(a1)
		beq.s	loc_654DC
		moveq	#3,d0

loc_654DC:
		bset	d0,(__u_FAB8).w

loc_654E0:
		bra.s	loc_6546E
; ---------------------------------------------------------------------------

loc_654E2:
		btst	#4,(__u_FAB8).w
		beq.s	loc_654F6
		move.l	#loc_654FA,(a0)
		move.w	#$3B,$2E(a0)

loc_654F6:
		bra.w	loc_6546E
; ---------------------------------------------------------------------------

loc_654FA:
		btst	#2,$38(a0)
		bne.s	loc_6550E
		moveq	#5,d2
		jsr	MoveSprite_CircularSimple.w
		bra.w	loc_65538
; ---------------------------------------------------------------------------

loc_6550E:
		moveq	#0,d0
		movea.w	$44(a0),a1
		tst.b	$2C(a1)
		beq.s	loc_6551C
		addq.w	#2,d0

loc_6551C:
		btst	#0,(V_int_run_count+3).w
		beq.s	loc_65526
		addq.w	#1,d0

loc_65526:
		move.b	RawAni_65550(pc,d0.w),$22(a0)
		lea	(AngleLookup_1).l,a2
		jsr	MoveSprite_AtAngleLookup.w

loc_65538:
		subq.w	#1,$2E(a0)
		bpl.s	loc_6554A
		move.l	#loc_65554,(a0)
		move.w	$32(a0),$2E(a0)

loc_6554A:
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------
RawAni_65550:	dc.b  $15, $1C,	$19, $1B
; ---------------------------------------------------------------------------

loc_65554:
		subq.w	#1,$2E(a0)
		bpl.s	loc_65560
		move.l	#loc_65564,(a0)

loc_65560:
		bra.w	loc_6546E
; ---------------------------------------------------------------------------

loc_65564:
		move.b	$3C(a0),d0
		moveq	#2,d1
		move.b	$26(a0),d2
		sub.b	d0,d2
		beq.s	loc_6558C
		sgt	d3
		bpl.s	loc_65578
		neg.b	d2

loc_65578:
		subq.b	#1,d2
		beq.s	loc_6558C
		tst.b	d3
		bne.s	loc_65582
		neg.b	d1

loc_65582:
		add.b	d1,d0
		move.b	d0,$3C(a0)
		bra.w	loc_6546E
; ---------------------------------------------------------------------------

loc_6558C:

		move.l	#loc_655AA,(a0)
		clr.b	$39(a0)
		moveq	#1,d0
		btst	#3,$38(a0)
		bne.s	loc_655A2
		neg.w	d0

loc_655A2:
		move.b	d0,$40(a0)
		bra.w	loc_6546E
; ---------------------------------------------------------------------------

loc_655AA:
		bsr.w	sub_6628C
		bra.w	loc_6546E
; ---------------------------------------------------------------------------

loc_655B2:
		lea	ObjDat3_6653C(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_655CE,(a0)
		move.w	#$17F0,$10(a0)
		move.w	#$660,$14(a0)

loc_655CE:
		moveq	#$1B,d1
		moveq	#$20,d2
		moveq	#$20,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		tst.b	(__u_FAA2).w
		beq.s	loc_655F4
		lea	ChildObjDat_6664A(pc),a2
		jsr	CreateChild6_Simple.w
		jsr	Go_Delete_Sprite.w

loc_655F4:
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
		dc.w  $FFE8,   $30, $FFE0,   $40
; ---------------------------------------------------------------------------

loc_65602:
		lea	word_66548(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_6561C,(a0)
		bset	#7,4(a0)
		bra.w	loc_662C0
; ---------------------------------------------------------------------------

loc_6561C:
		tst.b	4(a0)
		bpl.s	loc_6562E
		jsr	MoveSprite_LightGravity.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_6562E:
		jsr	Displace_PlayerOffObject.w
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_6563A:
		lea	ObjDat3_6654E(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_65662,(a0)
		move.w	#$63,$2E(a0)
		tst.b	$2C(a0)
		beq.w	locret_6206C
		move.l	#Wait_Draw,(a0)
		bra.w	loc_65692
; ---------------------------------------------------------------------------

loc_65662:
		subq.w	#1,$2E(a0)
		bmi.s	loc_65678
		lea	byte_66875(pc),a1
		jsr	Animate_RawNoSST.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_65678:
		move.l	#Wait_Draw,(a0)
		clr.b	$22(a0)
		move.w	#$3F,$2E(a0)
		move.l	#loc_65692,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_65692:

		move.b	#5,$22(a0)
		move.w	#$B,$2E(a0)
		move.l	#Go_Delete_Sprite,$34(a0)
		rts
; ---------------------------------------------------------------------------

Obj_B1_2:

		move.w	$3A(a0),d0
		moveq	#0,d1
		cmpi.w	#$460,(Camera_X_pos).w
		blo.s	loc_656B8
		moveq	#4,d1

loc_656B8:
		move.w	d1,$3A(a0)
		cmp.w	d0,d1
		beq.s	locret_656D0
		movea.l	off_656D2(pc,d1.w),a1
		lea	(Normal_palette_line_2).w,a2
		moveq	#$17,d0

loc_656CA:
		move.l	(a1)+,(a2)+
		dbf	d0,loc_656CA

locret_656D0:
		rts
; ---------------------------------------------------------------------------
off_656D2:	dc.l Pal_HPZ_A
		dc.l Pal_HPZ2_A
; ---------------------------------------------------------------------------

loc_656DA:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_6571A(pc,d0.w),d1
		jsr	off_6571A(pc,d1.w)
		btst	#6,$38(a0)
		bne.s	loc_65702
		move.l	#Map_Knuckles,$C(a0)
		bsr.w	Knuckles_Load_PLC_661E0
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_65702:
		move.l	#Map_SSZKnucklesTired,$C(a0)
		lea	DPLCPtr_6668A(pc),a2
		jsr	Perform_DPLC.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
off_6571A:	dc.w loc_65730-off_6571A

		dc.w loc_6575E-off_6571A
		dc.w loc_65794-off_6571A
		dc.w loc_657CE-off_6571A
		dc.w loc_657FE-off_6571A
		dc.w loc_65826-off_6571A
		dc.w loc_6584C-off_6571A
		dc.w loc_65876-off_6571A
		dc.w loc_658BA-off_6571A
		dc.w loc_658F2-off_6571A
		dc.w loc_6594A-off_6571A
; ---------------------------------------------------------------------------

loc_65730:
		lea	ObjDat4_663BA(pc),a1
		jsr	SetUp_ObjAttributesSlotted.w
		clr.b	(__u_FAB8).w
		move.w	#prio(1),8(a0)
		lea	(Normal_palette_line_2).w,a1
		lea	(Target_palette_line_2).w,a2
		moveq	#7,d6

loc_6574E:
		move.l	(a1)+,(a2)+
		dbf	d6,loc_6574E
		lea	Pal_CutsceneKnux1.w,a1
		jmp	PalLoad_Line1.w
; ---------------------------------------------------------------------------

loc_6575E:
		lea	byte_667C1(pc),a1
		jsr	Animate_RawNoSSTCheckResult.w
		btst	#0,(__u_FAB8).w
		beq.w	locret_6206C
		move.b	#4,5(a0)
		move.b	#$56,$22(a0)
		move.b	#$33,$1E(a0)
		lea	(ArtKosM_SSZDeathEggSmall).l,a1
		move.w	#-$6000,d2
		jmp	Queue_Kos_Module.w
; ---------------------------------------------------------------------------

loc_65794:
		jsr	MoveSprite_LightGravity.w
		jsr	ObjCheckFloorDist.w
		tst.w	d1
		bpl.w	locret_6206C
		add.w	d1,$14(a0)
		move.b	#6,5(a0)
		move.w	#5,$2E(a0)
		jsr	Create_New_Sprite.w
		bne.s	loc_657C4
		move.l	#loc_66072,(a1)

loc_657C4:
		lea	ChildObjDat_665F6(pc),a2
		jmp	CreateChild6_Simple.w
; ---------------------------------------------------------------------------

loc_657CE:
		moveq	#-$2D,d0
		jsr	sub_85E52.w
		subq.w	#1,$2E(a0)
		bpl.w	locret_6206C
		move.b	#8,5(a0)
		bset	#0,4(a0)
		bset	#6,$38(a0)
		clr.b	$22(a0)
		lea	byte_66719(pc),a1
		jmp	Set_Raw_Animation.w
; ---------------------------------------------------------------------------

loc_657FE:
		moveq	#-$2D,d0
		jsr	sub_85E52.w
		btst	#1,(__u_FAB8).w
		bne.s	loc_65814
		jmp	Animate_RawMultiDelay.w
; ---------------------------------------------------------------------------

loc_65814:
		move.b	#$A,5(a0)
		clr.b	$22(a0)
		move.w	#5,$2E(a0)
		rts
; ---------------------------------------------------------------------------

loc_65826:
		subq.w	#1,$2E(a0)
		bpl.s	locret_6584A
		move.b	#$C,5(a0)
		bclr	#0,4(a0)
		bclr	#6,$38(a0)
		move.b	#$56,$22(a0)
		move.w	#5,$2E(a0)

locret_6584A:
		rts
; ---------------------------------------------------------------------------

loc_6584C:
		subq.w	#1,$2E(a0)
		bpl.w	locret_6206C
		move.b	#$E,5(a0)
		move.b	#$13,$1E(a0)
		move.w	#$200,$18(a0)
		move.w	#-$300,$1A(a0)
		lea	byte_667C1(pc),a1
		jmp	Set_Raw_Animation.w
; ---------------------------------------------------------------------------

loc_65876:
		jsr	Animate_RawCheckResult.w
		jsr	MoveSprite.w
		tst.w	$1A(a0)
		bmi.w	locret_6206C
		jsr	ObjCheckFloorDist.w
		tst.w	d1
		bpl.w	locret_6206C
		add.w	d1,$14(a0)
		move.b	#$10,5(a0)
		move.w	#$300,$18(a0)
		clr.w	$1A(a0)
		bclr	#0,4(a0)
		lea	byte_66824(pc),a1
		jmp	Set_Raw_Animation.w
; ---------------------------------------------------------------------------

loc_658BA:
		jsr	Animate_RawCheckResult.w
		jsr	MoveSprite2.w
		cmpi.w	#$2A8,$10(a0)
		blo.w	locret_6206C
		move.b	#$12,5(a0)
		move.b	#$1B,$1E(a0)
		move.w	#$480,$18(a0)
		move.w	#-$600,$1A(a0)
		lea	byte_667C1(pc),a1
		jmp	Set_Raw_Animation.w
; ---------------------------------------------------------------------------

loc_658F2:
		jsr	Animate_RawCheckResult.w
		jsr	MoveSprite.w
		tst.w	$1A(a0)
		bmi.w	locret_6206C
		jsr	ObjCheckFloorDist.w
		tst.w	d1
		bpl.w	locret_6206C
		add.w	d1,$14(a0)
		move.b	#$14,5(a0)
		move.w	#prio(4),8(a0)
		bclr	#0,4(a0)
		bset	#6,$38(a0)
		move.b	#1,$22(a0)
		st	(ScrEvents_6).w
		moveq	#$5B,d0
		jsr	Play_Sound_2.w
		lea	byte_6671F(pc),a1
		jmp	Set_Raw_Animation.w
; ---------------------------------------------------------------------------

loc_6594A:
		bsr.w	sub_65FDE
		jsr	Animate_RawMultiDelay.w
		move.w	(Camera_X_pos).w,d0
		subi.w	#$80,d0
		cmp.w	$10(a0),d0
		bgt.s	loc_65976
		move.w	$14(a0),d0
		sub.w	(Camera_Y_pos).w,d0
		addi.w	#$80,d0
		cmpi.w	#$200,d0
		bls.w	locret_6206C

loc_65976:
		move.b	#1,(Last_star_post_hit).w
	;	move.w	#$140,(Saved_X_pos).w
	;	move.w	#$C6C,(Saved_Y_pos).w
	;	jsr	(Save_Level_Data).l
		lea	(Target_palette_line_2).w,a1
		lea	(Normal_palette_line_2).w,a2
		moveq	#7,d6

loc_65998:
		move.l	(a1)+,(a2)+
		dbf	d6,loc_65998
		lea	(PLC_83D48).l,a1
		jsr	Load_PLC_Raw.w
		jsr	Remove_From_TrackingSlot.w
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------

Obj_AF_2:
		lea	ObjDat3_6649E(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_659C6,(a0)

loc_659C6:
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_659CC:
		lea	ObjDat3_664AA(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_65A30,(a0)
		move.w	#$200,$10(a0)
		move.w	#$C68,d0
		move.w	d0,$14(a0)
		move.w	d0,$1A(a0)
		move.w	#-$40,$40(a0)
		move.w	#$100,$2E(a0)
		move.l	(V_int_run_count).w,(RNG_seed).w
		lea	ChildObjDat_665C4(pc),a2
		jsr	CreateChild1_Normal.w
		lea	(Normal_palette_line_4).w,a1
		lea	(Target_palette_line_4).w,a2
		moveq	#7,d6

loc_65A14:
		move.l	(a1)+,(a2)+
		dbf	d6,loc_65A14
		lea	Pal_KnuxSSZEnd(pc),a1
		lea	(Normal_palette_line_4).w,a2
		moveq	#$F,d0

loc_65A24:
		move.w	(a1)+,d1
		beq.s	loc_65A2A
		move.w	d1,(a2)

loc_65A2A:
		addq.w	#2,a2
		dbf	d0,loc_65A24

loc_65A30:
		jsr	(MoveSprite_SSZBGAdjust).l
		jsr	Draw_Sprite.w
		subq.w	#1,$2E(a0)
		bpl.s	locret_65A48
		move.l	#loc_65A4A,(a0)

locret_65A48:
		rts
; ---------------------------------------------------------------------------

loc_65A4A:
		bsr.w	sub_66054
		jsr	(MoveSprite_SSZBGAdjust).l
		jsr	Draw_Sprite.w
		move.w	(Camera_Y_pos).w,d0
		subi.w	#$38,d0
		cmp.w	$14(a0),d0
		bls.w	locret_6206C
		bset	#5,$38(a0)
		bset	#1,(__u_FAB8).w
		lea	(Target_palette_line_4).w,a1
		lea	(Normal_palette_line_4).w,a2
		moveq	#7,d6

loc_65A80:
		move.l	(a1)+,(a2)+
		dbf	d6,loc_65A80
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------

loc_65A8C:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_65AB0(pc,d0.w),d1
		jsr	off_65AB0(pc,d1.w)
		jsr	(MoveSprite_SSZBGAdjust).l
		lea	DPLCPtr_66692(pc),a2
		jsr	Perform_DPLC.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
off_65AB0:	dc.w loc_65AB6-off_65AB0

		dc.w loc_65AD4-off_65AB0
		dc.w loc_65AF6-off_65AB0
; ---------------------------------------------------------------------------

loc_65AB6:
		lea	ObjDat4_664B6(pc),a1
		jsr	SetUp_ObjAttributesSlotted.w
		move.l	#byte_66739,$30(a0)
		move.w	$14(a0),$1A(a0)
		move.w	#$190,$2E(a0)

loc_65AD4:
		jsr	Animate_RawMultiDelay.w
		subq.w	#1,$2E(a0)
		bpl.w	locret_6206C
		move.b	#4,5(a0)
		move.w	#$10,$40(a0)
		move.w	#$180,$2E(a0)
		rts
; ---------------------------------------------------------------------------

loc_65AF6:
		subq.w	#1,$2E(a0)
		bmi.s	loc_65B02
		jmp	Animate_RawMultiDelay.w
; ---------------------------------------------------------------------------

loc_65B02:
		jsr	Remove_From_TrackingSlot.w
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------

loc_65B0E:
		lea	ObjDat3_664C8(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_65B24,(a0)
		move.w	$14(a0),$1A(a0)

loc_65B24:
		st	(ScrEvents_10).w
		btst	#2,(__u_FAB8).w
		bne.s	loc_65B3C
		jsr	(MoveSprite_SSZBGAdjust).l
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_65B3C:
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------

loc_65B42:

		lea	word_664D4(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_65B5A,(a0)
		move.l	#Go_Delete_Sprite,$34(a0)

loc_65B5A:
		jsr	Refresh_ChildPosition.w
		lea	byte_66760(pc),a1
		jsr	Animate_RawNoSSTMultiDelay.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_65B70:
		lea	word_664DA(pc),a1
		jsr	SetUp_ObjAttributes2.w
		move.l	#loc_65BAE,(a0)
		jsr	Random_Number.w
		move.w	#$100,d1
		andi.w	#$3F,d0
		subi.w	#$20,d0
		bpl.s	loc_65B96
		neg.w	d1

loc_65B96:
		move.w	d1,$18(a0)
		add.w	d0,$10(a0)
		swap	d0
		andi.w	#$1F,d0
		add.w	d0,$14(a0)
		move.w	#$100,$1A(a0)

loc_65BAE:
		move.b	#4,$22(a0)
		btst	#0,(V_int_run_count+3).w
		beq.s	loc_65BC2
		move.b	#5,$22(a0)

loc_65BC2:
		addi.w	#-$10,$1A(a0)
		jsr	MoveSprite2.w
		jmp	Sprite_CheckDeleteXY.w
; ---------------------------------------------------------------------------

Obj_83:
		lea	ObjDat3_66402(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_65C04,(a0)
		addq.w	#4,$14(a0)
		lea	PLC_65BFC(pc),a1
		jmp	Load_PLC_Raw.w
; ---------------------------------------------------------------------------
PLC_65BFC:	dc.w 0
		dc.l ArtNem_GrayButton
		dc.w $8AC0
; ---------------------------------------------------------------------------

loc_65C04:
		move.w	(__u_FAA4).w,d0
		beq.s	loc_65C3A
		movea.w	d0,a1
		lea	word_65C48(pc),a2
		jsr	(Check_InMyRange).l
		beq.s	loc_65C3A

loc_65C18:
		move.l	#loc_65C50,(a0)
		move.b	#1,$22(a0)
		st	(__u_FAA9).w
		clr.w	$48(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	off_65C40(pc,d0.w),d0
		jsr	off_65C40(pc,d0.w)

loc_65C3A:
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------
off_65C40:	dc.w loc_65C56-off_65C40
		dc.w loc_65C72-off_65C40
		dc.w loc_65C78-off_65C40
		dc.w loc_65CAC-off_65C40
word_65C48:	dc.w  $FFE8,   $30, $FFE8,   $30
; ---------------------------------------------------------------------------

loc_65C50:
		jmp	Sprite_CheckDelete.w
; ---------------------------------------------------------------------------

loc_65C56:
		clr.b	(Ctrl_1_locked).w
		move.w	#$1000,d0
		move.w	d0,(__u_FA98).w
		move.w	d0,(Camera_target_max_Y_pos).w
		lea	Child6_IncLevY.w,a2
		jmp	CreateChild6_Simple.w
; ---------------------------------------------------------------------------

loc_65C72:
		st	(Level_trigger_array+8).w
		rts
; ---------------------------------------------------------------------------

loc_65C78:
		move.w	#$14,(ScrShake_Value).w
		move.w	(Camera_Y_pos).w,d0
		addi.w	#$100,d0
		move.w	d0,(Mean_water_level).w
		move.w	#$350,(Target_water_level).w
		st	(__u_FAA3).w
		moveq	#$57,d0
		jsr	Play_Sound_2.w
		jsr	Create_New_Sprite.w
		bne.s	locret_65CAA
		move.l	#loc_62480,(a1)

locret_65CAA:
		rts
; ---------------------------------------------------------------------------

loc_65CAC:
		move.w	#$14,(ScrShake_Value).w
		movea.w	(Level_layout_main+$40).w,a1
		lea	$8E(a1),a1
		move.w	(Level_layout_header).w,d0
		move.b	#$14,(a1)
		adda.w	d0,a1
		move.b	#$F,(a1)
		adda.w	d0,a1
		move.b	#$F,(a1)
		adda.w	d0,a1
		move.b	#-$78,(a1)
		jsr	Create_New_Sprite.w
		bne.s	loc_65CF4
		move.l	#Obj_48_1,(a1)
		move.w	#$4740,$10(a1)
		move.w	#$828,$14(a1)
		move.b	#$4C,$2C(a1)

loc_65CF4:
		jsr	Create_New_Sprite.w
		bne.s	locret_65D14
		move.l	#Obj_48_1,(a1)
		move.w	#$4740,$10(a1)
		move.w	#$A28,$14(a1)
		move.b	#$20,$2C(a1)

locret_65D14:
		rts
; ---------------------------------------------------------------------------

Obj_88:

		jsr	Obj_WaitOffscreen.w
		move.l	#loc_65D46,(a0)
		jsr	Create_New_Sprite3.w
		bne.s	loc_65D46
		move.l	#Obj_CorkFloor,(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		move.b	#1,$2C(a1)
		move.w	a1,$44(a0)

loc_65D46:

		movea.w	$44(a0),a1
		cmpi.l	#loc_2A5F8,(a1)
		beq.s	loc_65D58
		jmp	Delete_Sprite_If_Not_In_Range.w
; ---------------------------------------------------------------------------

loc_65D58:
		tst.b	(__u_FAA2).w
		bne.s	loc_65D68
		st	(__u_FAA2).w
		move.w	#$958,(Target_water_level).w

loc_65D68:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

Obj_89:

		lea	ObjDat3_66402(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_65D8C,(a0)
		addq.w	#4,$14(a0)
		lea	PLC_65BFC(pc),a1
		jmp	Load_PLC_Raw.w
; ---------------------------------------------------------------------------

loc_65D8C:
		bsr.w	sub_65DEC
		move.b	#0,$22(a0)
		move.b	$2A(a0),d0
		andi.b	#$18,d0
		beq.s	loc_65DD0
		move.b	#1,$22(a0)
		tst.b	(__u_FAA3).w
		beq.s	loc_65DD0
		clr.b	(__u_FAA3).w
		move.w	#$A58,(Target_water_level).w
		moveq	#$57,d0
		jsr	Play_Sound_2.w
		jsr	Create_New_Sprite.w
		bne.s	loc_65DD0
		move.l	#loc_62480,(a1)
		st	$2C(a1)

loc_65DD0:

		jmp	Sprite_OnScreen_Test.w

; =============== S U B R O U T I N E =======================================


sub_65DD6:

		jsr	Create_New_Sprite.w
		bne.s	locret_65DEA
		move.l	#Obj_Song_Fade_Transition,(a1)
		move.b	#Mus_Knux,$2C(a1)		; NAT: Fix knuckles music for S3 levels

		cmp.b	#7,Current_zone.w
		bhs.s	locret_65DEA

		cmp.b	#4,Current_zone.w
		beq.s	locret_65DEA
		move.b	#Mus_KnuxS3,$2C(a1)		; NAT: S3 variant

locret_65DEA:
		rts
; End of function sub_65DD6


; =============== S U B R O U T I N E =======================================


sub_65DEC:

		move.w	#$1B,d1
		move.w	#4,d2
		move.w	#5,d3
		move.w	$10(a0),d4
		jmp	SolidObjectFull.w
; End of function sub_65DEC


; =============== S U B R O U T I N E =======================================


sub_65E02:

		jsr	Random_Number.w
		andi.w	#$1FF,d0
		addi.w	#$100,d0
		neg.w	d0
		move.w	d0,$1A(a0)
		swap	d0
		move.w	#$100,d1
		btst	#2,(__u_FAB8).w
		bne.s	loc_65E3E
		bclr	#0,4(a0)
		move.w	$10(a0),d2
		cmp.w	$3A(a0),d2
		blo.s	loc_65E46
		cmp.w	$3C(a0),d2
		bhi.s	loc_65E3E
		tst.w	d0
		bpl.s	loc_65E46

loc_65E3E:

		neg.w	d1
		bset	#0,4(a0)

loc_65E46:

		move.w	d1,$18(a0)
		rts
; End of function sub_65E02


; =============== S U B R O U T I N E =======================================


sub_65E4C:

		move.w	#$1B,d1
		move.w	#$20,d2
		move.w	#$20,d3
		move.w	$10(a0),d4
		jmp	SolidObjectFull.w
; End of function sub_65E4C


; =============== S U B R O U T I N E =======================================


sub_65E62:
		lea	(Player_1).w,a1
		bsr.w	sub_65E72
		lea	(Player_2).w,a1
		tst.l	(a1)
		beq.s	locret_65EAE
; End of function sub_65E62


; =============== S U B R O U T I N E =======================================


sub_65E72:
		move.b	#5,$20(a1)
		cmpi.b	#$C,$23(a0)
		blo.s	locret_65EAE
		move.b	#-$7D,$2E(a1)
		move.b	#0,$20(a1)
		bset	#1,4(a1)
		moveq	#0,d0
		btst	#1,(V_int_run_count+3).w
		beq.s	loc_65E9E
		moveq	#2,d0

loc_65E9E:
		add.b	$38(a1),d0
		move.b	RawAni_65EB0(pc,d0.w),$22(a1)
		jsr	Player_Load_PLC2.w

locret_65EAE:
		rts
; End of function sub_65E72

; ---------------------------------------------------------------------------
RawAni_65EB0:	dc.b  $B4, $A7,	$B5, $A8

; =============== S U B R O U T I N E =======================================


sub_65EB4:

		subq.w	#1,$2E(a0)
		bpl.s	locret_65ED2
		move.w	$3E(a0),$2E(a0)
		jsr	Create_New_Sprite.w
		bne.s	locret_65ED2
		move.l	#loc_63324,(a1)
		move.w	a0,$46(a1)

locret_65ED2:

		rts
; End of function sub_65EB4


; =============== S U B R O U T I N E =======================================


sub_65ED4:

		subq.b	#1,$24(a0)
		bpl.s	locret_65EFC
		move.b	#4,$24(a0)
		move.b	$23(a0),d0
		addq.b	#1,d0
		move.b	d0,$23(a0)
		andi.b	#3,d0
		move.b	4(a0),d1
		andi.b	#-4,d1
		or.b	d0,d1
		move.b	d1,4(a0)

locret_65EFC:
		rts
; End of function sub_65ED4


; =============== S U B R O U T I N E =======================================


sub_65EFE:

		lea	(Player_1).w,a1
		moveq	#0,d2
		moveq	#$3C,d3
		moveq	#-$73,d4
		bsr.w	sub_65F84
		lea	(Player_2).w,a1
		moveq	#1,d2
		moveq	#$3D,d3
		moveq	#-$76,d4
		bsr.w	sub_65F84
		lea	(Player_1).w,a1
		moveq	#0,d2
		moveq	#$3C,d3
		bsr.w	sub_65F2E
		lea	(Player_2).w,a1
		moveq	#1,d2
		moveq	#$3D,d3
; End of function sub_65EFE


; =============== S U B R O U T I N E =======================================


sub_65F2E:
		btst	d2,$38(a0)
		beq.w	locret_65FD4
		subq.b	#1,$24(a1)
		bpl.s	loc_65F5C
		move.b	#8,$24(a1)
		move.b	$23(a1),d0
		addq.b	#1,$23(a1)
		andi.b	#3,d0
		move.b	4(a1),d1
		andi.b	#-4,d1
		or.b	d0,d1
		move.b	d1,4(a1)

loc_65F5C:
		move.b	(a0,d3.w),d0
		addq.b	#2,(a0,d3.w)
		jsr	GetSineCosine.w
		asr.w	#3,d0
		asr.w	#3,d1
		move.w	$10(a0),d2
		move.w	$14(a0),d3
		add.w	d0,d2
		add.w	d1,d3
		move.w	d2,$10(a1)
		move.w	d3,$14(a1)
		rts
; End of function sub_65F2E


; =============== S U B R O U T I N E =======================================


sub_65F84:

		btst	d2,$38(a0)
		bne.s	locret_65FD4
		lea	word_65FD6(pc),a2
		jsr	(Check_InMyRange).l
		beq.s	locret_65FD4
		bset	d2,$38(a0)
		move.w	d3,-(sp)
		clr.b	(Scroll_lock).w
		clr.b	(Update_HUD_timer).w
		move.b	#-$7D,$2E(a1)
		move.b	d4,$22(a1)
		clr.b	$20(a1)
		clr.b	$24(a1)
		clr.b	$23(a1)
		move.l	a1,-(sp)
		jsr	Player_Load_PLC2.w
		movea.l	(sp)+,a1
		movea.l	a1,a2
		movea.l	a0,a1
		jsr	(sub_8622C).l
		move.w	(sp)+,d3
		move.b	d0,(a0,d3.w)

locret_65FD4:
		rts
; End of function sub_65F84

; ---------------------------------------------------------------------------
word_65FD6:	dc.w  $FFE0,   $40, $FFE0,   $40

; =============== S U B R O U T I N E =======================================


sub_65FDE:
		btst	#3,$38(a0)
		bne.w	locret_6206C
		lea	(Player_1).w,a1
		jsr	Find_OtherObject.w
		cmpi.w	#$20,d3
		bhs.w	locret_6206C
		subi.w	#$30,d2
		cmpi.w	#$20,d2
		bhs.w	locret_6206C
		tst.w	d0
		beq.w	locret_6206C
		btst	#0,4(a1)
		beq.w	locret_6206C
		cmpi.b	#8,$20(a1)
		bne.w	locret_6206C
		lea	byte_6672A(pc),a1
		jmp	Set_Raw_Animation.w
; End of function sub_65FDE


; =============== S U B R O U T I N E =======================================


MoveSprite_SSZBGAdjust:

		move.w	(__u_FA84).w,d0
		add.w	d0,$10(a0)
		move.w	$40(a0),d0
		ext.l	d0
		lsl.l	#8,d0
		move.l	$1A(a0),d1
		add.l	d0,d1
		move.l	d1,$1A(a0)
		swap	d1
		move.w	(__u_EE9C).w,d0
		asr.w	#2,d0
		sub.w	d0,d1
		move.w	d1,$14(a0)
		rts
; End of function MoveSprite_SSZBGAdjust


; =============== S U B R O U T I N E =======================================


sub_66054:
		move.b	(V_int_run_count+3).w,d0
		andi.w	#$1F,d0
		bne.w	locret_6206C
		moveq	#-$60,d0
		jsr	Play_Sound_2.w
		lea	ChildObjDat_665F0(pc),a2
		jmp	CreateChild6_Simple.w
; End of function sub_66054

; ---------------------------------------------------------------------------

loc_66072:
		move.w	(Camera_X_pos).w,$3A(a0)
		move.l	#loc_6607E,(a0)

loc_6607E:
		move.w	(Camera_X_pos).w,d0
		move.w	$3A(a0),d1
		move.w	d0,$3A(a0)
		sub.w	d1,d0
		asr.w	#1,d0
		move.w	d0,(__u_FA84).w
		rts

; =============== S U B R O U T I N E =======================================


sub_66094:

		bset	#0,4(a0)
		tst.w	d0
		beq.s	locret_660A4
		bclr	#0,4(a0)

locret_660A4:
		rts
; End of function sub_66094

; ---------------------------------------------------------------------------

Knux_React_HurtPlayer:

		tst.b	$34(a1)
		bne.s	locret_660A4

loc_660AE:
		btst	#1,$2B(a1)
		bne.s	locret_660A4
		cmp.b	#4,5(a1)		; NAT: Check if hurt or dead
		bhs.s	locret_660A4
		jmp	HurtCharacter_Directly.w
; ---------------------------------------------------------------------------

Knux_CheckReaction:

		lea	word_66152(pc),a1
		jsr	Check_PlayerInRange.w
		tst.l	d0
		beq.w	locret_6206C
		tst.w	d0
		beq.s	loc_660DA
		move.l	d0,-(sp)
		bsr.w	sub_660E2
		move.l	(sp)+,d0

loc_660DA:
		swap	d0
		tst.w	d0
		beq.w	locret_6206C

; =============== S U B R O U T I N E =======================================


sub_660E2:
		btst	#4,$38(a0)
		bne.w	locret_6206C
		movea.w	d0,a1
		cmp.b	#6,5(a1)		; NAT: Check if player is dead
		bhs.w	locret_6206C

		btst	#0,4(a0)
		sne	d4
		move.w	$10(a1),d1
		cmp.w	$10(a0),d1
		bhs.s	loc_66102
		not.b	d4

loc_66102:
		tst.b	d4
		bne.s	loc_66134
		move.w	$14(a1),d2
		sub.w	$14(a0),d2
		bpl.s	loc_66112
		neg.w	d2

loc_66112:
		cmpi.w	#$10,d2
		bhs.s	loc_66134
		btst	#1,$2B(a1)
		bne.w	Knux_React_GetHurt
		cmpi.b	#2,$20(a1)		; NAT: Move this about
		bne.s	loc_6612E

loc_6612A:
		movea.l	(a3),a4
		jmp	(a4)
; ---------------------------------------------------------------------------
loc_6612E:
		movea.l	4(a3),a4
		jmp	(a4)
; ---------------------------------------------------------------------------

loc_66134:

		btst	#1,$2B(a1)
		bne.w	Knux_React_GetHurt
		cmpi.b	#2,$20(a1)		; NAT: Move this about
		bne.s	loc_6614A

loc_66146:
		movea.l	8(a3),a4
		jmp	(a4)
; End of function sub_660E2

; ---------------------------------------------------------------------------
loc_6614A:
		movea.l	$C(a3),a4
		jmp	(a4)
; ---------------------------------------------------------------------------
word_66152:	dc.w  $FFE8,   $30, $FFE8,   $30

; =============== S U B R O U T I N E =======================================


sub_6615A:

		tst.w	$18(a0)
		beq.s	locret_66188
		bmi.s	loc_66176
		move.w	(Camera_X_pos).w,d0
		addi.w	#$130,d0
		cmp.w	$10(a0),d0
		bhi.s	locret_66188
		clr.w	$18(a0)
		rts
; ---------------------------------------------------------------------------

loc_66176:
		move.w	(Camera_X_pos).w,d0
		addi.w	#$10,d0
		cmp.w	$10(a0),d0
		blo.s	locret_66188
		clr.w	$18(a0)

locret_66188:

		rts
; End of function sub_6615A

; ---------------------------------------------------------------------------

Knuckles_Load_PLC_6618A:
		moveq	#0,d0
		move.b	$22(a0),d0
		cmp.b	$3A(a0),d0
		beq.s	locret_661DE
		move.b	d0,$3A(a0)
		lea	(PLC_Knuckles).l,a2
		add.w	d0,d0
		adda.w	(a2,d0.w),a2
		move.w	(a2)+,d5
		subq.w	#1,d5
		bmi.s	locret_661DE
		move.w	#$D400,d4
		move.l	#ArtUnc_Knux,d6

loc_661B6:
		moveq	#0,d1
		move.w	(a2)+,d1
		move.w	d1,d3
		lsr.w	#8,d3
		andi.w	#$F0,d3
		addi.w	#$10,d3
		andi.w	#$FFF,d1
		lsl.l	#5,d1
		add.l	d6,d1
		move.w	d4,d2
		add.w	d3,d4
		add.w	d3,d4
		jsr	Add_To_DMA_Queue.w
		dbf	d5,loc_661B6

locret_661DE:

		rts

; =============== S U B R O U T I N E =======================================


Knuckles_Load_PLC_661E0:

		moveq	#0,d0
		move.b	$22(a0),d0
		cmp.b	$3A(a0),d0
		beq.s	locret_66234
		move.b	d0,$3A(a0)
		lea	(PLC_Knuckles).l,a2
		add.w	d0,d0
		adda.w	(a2,d0.w),a2
		move.w	(a2)+,d5
		subq.w	#1,d5
		bmi.s	locret_66234
		move.w	#$9B40,d4
		move.l	#ArtUnc_Knux,d6

loc_6620C:
		moveq	#0,d1
		move.w	(a2)+,d1
		move.w	d1,d3
		lsr.w	#8,d3
		andi.w	#$F0,d3
		addi.w	#$10,d3
		andi.w	#$FFF,d1
		lsl.l	#5,d1
		add.l	d6,d1
		move.w	d4,d2
		add.w	d3,d4
		add.w	d3,d4
		jsr	Add_To_DMA_Queue.w
		dbf	d5,loc_6620C

locret_66234:
					; Knuckles_Load_PLC_661E0+20j
		rts
; End of function Knuckles_Load_PLC_661E0


; =============== S U B R O U T I N E =======================================


sub_66236:
		move.l	#ArtUnc_DashDust,d6
		moveq	#0,d0
		move.b	$22(a0),d0
		cmp.b	$3A(a0),d0
		beq.s	locret_6628A
		move.b	d0,$3A(a0)
		lea	(DPLC_DashSplashDrown).l,a2
		add.w	d0,d0
		adda.w	(a2,d0.w),a2
		move.w	(a2)+,d5
		subq.w	#1,d5
		bmi.s	locret_6628A
		move.w	#-$6000,d4

loc_66262:
		moveq	#0,d1
		move.w	(a2)+,d1
		move.w	d1,d3
		lsr.w	#8,d3
		andi.w	#$F0,d3
		addi.w	#$10,d3
		andi.w	#$FFF,d1
		lsl.l	#5,d1
		add.l	d6,d1
		move.w	d4,d2
		add.w	d3,d4
		add.w	d3,d4
		jsr	Add_To_DMA_Queue.w
		dbf	d5,loc_66262

locret_6628A:

		rts
; End of function sub_66236


; =============== S U B R O U T I N E =======================================


sub_6628C:

		move.b	$40(a0),d0
		add.b	d0,$3C(a0)
		subq.b	#1,$39(a0)
		bpl.s	locret_662A4
		move.b	$30(a0),$39(a0)
		neg.b	$40(a0)

locret_662A4:
		rts
; End of function sub_6628C


; =============== S U B R O U T I N E =======================================


sub_662A6:

		moveq	#0,d0
		move.b	$3C(a0),d0
		addi.b	#$10,d0
		rol.b	#3,d0
		andi.b	#7,d0
		addi.b	#$13,d0
		move.b	d0,$22(a0)
		rts
; End of function sub_662A6

; ---------------------------------------------------------------------------

loc_662C0:
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	d0,d3
		lea	byte_66308(pc,d0.w),a1
		move.b	(a1)+,d1
		ext.w	d1
		add.w	d1,$10(a0)
		move.b	(a1)+,d2
		ext.w	d2
		add.w	d2,$14(a0)
		lsr.w	#1,d0
		addq.b	#7,d0
		move.b	d0,$22(a0)
		move.w	#-$200,d0
		lsl.w	#4,d3
		neg.w	d3
		add.w	d3,d0
		move.w	d0,$18(a0)
		lsl.w	#1,d3
		andi.w	#$180,d3
		addi.w	#$80,d3
		tst.w	d2
		bpl.s	loc_66302
		neg.w	d3

loc_66302:
		move.w	d3,$1A(a0)
		rts
; ---------------------------------------------------------------------------
byte_66308:	dc.b	8, $F8
		dc.b	8,   0
		dc.b	8, $F0
		dc.b	8,   8
		dc.b	8, $E8
		dc.b	8, $10
		dc.b	8, $E0
		dc.b	8, $18
		dc.b	0, $F8
		dc.b	0,   0
		dc.b	0, $F0
		dc.b	0,   8
		dc.b	0, $E8
		dc.b	0, $10
		dc.b	0, $E0
		dc.b	0, $18
		dc.b  $F8, $F8
		dc.b  $F8,   0
		dc.b  $F8, $F0
		dc.b  $F8,   8
		dc.b  $F8, $E8
		dc.b  $F8, $10
		dc.b  $F8, $E0
		dc.b  $F8, $18
		dc.b  $F0, $F8
		dc.b  $F0,   0
		dc.b  $F0, $F0
		dc.b  $F0,   8
		dc.b  $F0, $E8
		dc.b  $F0, $10
		dc.b  $F0, $E0
		dc.b  $F0, $18

; =============== S U B R O U T I N E =======================================


sub_66348:
		btst	#6,$2A(a0)
		beq.s	locret_66370
		tst.b	$20(a0)
		bne.s	loc_66364
		move.b	#$30,$20(a0)
		moveq	#$6E,d0
		jsr	Play_Sound_2.w

loc_66364:
		subq.b	#1,$20(a0)
		bne.s	locret_66370
		bclr	#6,$2A(a0)

locret_66370:

		rts
; End of function sub_66348


; =============== S U B R O U T I N E =======================================


sub_66372:

		tst.b	$28(a0)
		bne.s	locret_663B8
		tst.b	$20(a0)
		bne.s	loc_66392
		move.b	#$20,$20(a0)
		moveq	#$6E,d0
		jsr	Play_Sound_2.w
		bset	#6,$2A(a0)

loc_66392:
		moveq	#0,d0
		btst	#0,$20(a0)
		bne.s	loc_663A0
		addi.w	#4,d0

loc_663A0:
		jsr	(sub_7A614).l
		subq.b	#1,$20(a0)
		bne.s	locret_663B8
		bclr	#6,$2A(a0)
		move.b	$25(a0),$28(a0)

locret_663B8:

		rts
; End of function sub_66372

; ---------------------------------------------------------------------------
ObjDat4_663BA:	dc.w 0

		dc.w $A4DA
		dc.w $2E
		dc.w 0
		dc.l Map_CutsceneKnux
		dc.w prio(3)
		dc.b $1C
		dc.b $18
		dc.b $16
		dc.b 0
ObjDat4_663CC:	dc.w 0
		dc.w $A4DA
		dc.w $2E
		dc.w 0
		dc.l Map_MHZKnuxPullSwitch
		dc.w prio(3)
		dc.b $1C
		dc.b $18
		dc.b 3
		dc.b 0
ObjDat4_663DE:	dc.w 0
		dc.w $6A0
		dc.w $2E
		dc.w 0
		dc.l Map_KnuxIntroLay
		dc.w prio(3)
		dc.w $1C18
		dc.b 0
		dc.b 0
		dc.b 0
		dc.b 0
		dc.b $A4
		dc.b $DA
		dc.b 0
		dc.b $2E
		dc.b 0
		dc.b 0
		dc.l Map_HPZKnucklesGrab
		dc.w prio(3)
		dc.b $1C
		dc.b $18
		dc.b 2
		dc.b 0
ObjDat3_66402:	dc.l Map_Button

		dc.w $8456
		dc.w prio(2)
		dc.b $10
		dc.b 8
		dc.b 0
		dc.b 0
ObjDat3_6640E:	dc.l Map_LBZKnuxBomb
		dc.w $A4D6
		dc.w prio(1)
		dc.b 8
		dc.b 8
		dc.b 0
		dc.b 0
ObjDat3_6641A:	dc.l Map_LBZKnuxPillar
		dc.w $45A0
		dc.w prio(5)
		dc.b $10
		dc.b $10
		dc.b 0
		dc.b 0
ObjDat3_66426:	dc.l Map_LBZKnuxPillar
		dc.w $45A0
		dc.w prio(5)
		dc.b $10
		dc.b $80
		dc.b 1
		dc.b 0
ObjDat3_66432:	dc.l Map_AIZCorkFloor
		dc.w $4001
		dc.w prio(3)
		dc.b $10
		dc.b $18
		dc.b 0
		dc.b 0
ObjDat3_6643E:	dc.l Map_MHZKnuxPeer
		dc.w $2500
		dc.w prio(3)
		dc.b $10
		dc.b $10
		dc.b 4
		dc.b 0
ObjDat3_6644A:	dc.l Map_Button
		dc.w $341
		dc.w prio(2)
		dc.b $80
		dc.b $80
		dc.b 0
		dc.b 0
ObjDat3_66456:	dc.l Map_MHZKnuxSwitch
		dc.w $A528
		dc.w prio(6)
		dc.b $10
		dc.b $10
		dc.b 0
		dc.b 0
ObjDat3_66462:	dc.l Map_MHZKnuxDoor
		dc.w $63C9
		dc.w prio(1)
		dc.b $10
		dc.b $20
		dc.b 0
		dc.b 0
ObjDat3_6646E:	dc.l Map_MHZKnuxLeaves

		dc.w $E368
		dc.w prio(0)
		dc.b 4
		dc.b 4
		dc.b 0
		dc.b 0
ObjDat3_6647A:	dc.l Map_LRZKnuxBoulder
		dc.w $4500
		dc.w prio(4)
		dc.b $20
		dc.b $20
		dc.b 0
		dc.b 0
ObjDat3_66486:	dc.l Map_KnuxIntroBomb
		dc.w $252E
		dc.w prio(3)
		dc.b $C
		dc.b $10
		dc.b 0
		dc.b 0
word_66492:	dc.w prio(2)
		dc.b 8
		dc.b 8
		dc.b 1
		dc.b 0
word_66498:	dc.w prio(2)
		dc.b 8
		dc.b 8
		dc.b 5
		dc.b 0
ObjDat3_6649E:	dc.l Map_Button
		dc.w $48E
		dc.w prio(3)
		dc.b $10
		dc.b 8
		dc.b 1
		dc.b 0
ObjDat3_664AA:	dc.l Map_SSZDeathEggSmall
		dc.w $6500
		dc.w prio(7)
		dc.b $3C
		dc.b $30
		dc.b 0
		dc.b 0
ObjDat4_664B6:	dc.w 0
		dc.w $64C9
		dc.w $10
		dc.w 2
		dc.l Map_SSZDeathEggCloud
		dc.w prio(5)
		dc.w $4010
		dc.b 0
		dc.b 0
ObjDat3_664C8:	dc.l Map_SpriteMask
		dc.w 0
		dc.w prio(4)
		dc.b $40
		dc.b $30
		dc.b $C
		dc.b 0
word_664D4:	dc.w prio(6)
		dc.b 4
		dc.b $1C
		dc.b 1
		dc.b 0
word_664DA:	dc.w prio(6)
		dc.b 2
		dc.b $80
		dc.b 8
		dc.b 8
		dc.b 4
		dc.b 0
ObjDat3_664E2:	dc.l Map_DashDust

		dc.w $500
		dc.w prio(1)
		dc.b $10
		dc.b $10
		dc.b $A
		dc.b 0
ObjDat3_664EE:	dc.l Map_RobotnikShip

		dc.w $852E
		dc.w prio(0)
		dc.b $1C
		dc.b $20
		dc.b $A
		dc.b 0
ObjDat3_664FA:	dc.l Map_KnuxFinalBossCrane

		dc.w $84A7
		dc.w prio(3)
		dc.b $14
		dc.b $14
		dc.b 0
		dc.b 0
word_66506:	dc.w prio(5)
		dc.b $10
		dc.b $C
		dc.b 1
		dc.b 0
word_6650C:	dc.w prio(3)
		dc.b 4
		dc.b $80
		dc.b 4
		dc.b 0
ObjDat3_66512:	dc.l Map_HPZEmeraldMisc
		dc.w $83B5
		dc.w prio(0)
		dc.b $C
		dc.b $C
		dc.b $12
		dc.b 0
ObjDat3_6651E:	dc.l Map_HPZEmeraldMisc
		dc.w $43B5
		dc.w prio(3)
		dc.b 4
		dc.b 8
		dc.b $18
		dc.b 0
ObjDat3_6652A:	dc.l Map_KnuxFinalBossCrane
		dc.w $4A7
		dc.w prio(0)
		dc.b 8
		dc.b 8
		dc.b $12
		dc.b 0
word_66536:	dc.w prio(0)
		dc.b 8
		dc.b 8
		dc.b $12
		dc.b 0
ObjDat3_6653C:	dc.l Map_LRZ3Platform
		dc.w $C001
		dc.w prio(0)
		dc.b $10
		dc.b $20
		dc.b 6
		dc.b 0
word_66548:	dc.w prio(0)
		dc.b 4
		dc.b 4
		dc.b 7
		dc.b 0
ObjDat3_6654E:	dc.l Map_HPZKnuxDizzyStars
		dc.w $2500
		dc.w prio(3)
		dc.b $C
		dc.b 4
		dc.b 1
		dc.b 0
ChildObjDat_6655A:dc.w 0
		dc.l loc_620EA
ChildObjDat_66560:dc.w 0
		dc.l loc_62458
		dc.w $E094
ChildObjDat_66568:dc.w 2
		dc.l Obj_DecLevStartYGradual
		dc.w 0
		dc.l Obj_DecLevStartXGradual
		dc.w 0
		dc.l Obj_IncLevEndXGradual
		dc.w 0
ChildObjDat_6657C:dc.w 0
		dc.l loc_627C6
		dc.w $C000
ChildObjDat_66584:dc.w 0
		dc.l loc_6282A
		dc.w $F8F0
ChildObjDat_6658C:dc.w 3
		dc.l loc_6285A
ChildObjDat_66592:dc.w 3
		dc.l loc_629CE
		dc.b 2
		dc.b $24
ChildObjDat_6659A:dc.w 0
		dc.l loc_61F60
		dc.w $18
ChildObjDat_665A2:dc.w 0
		dc.l Obj_83
		dc.w $C
ChildObjDat_665AA:dc.w 0
		dc.l Obj_CutsceneKnuckles
ChildObjDat_665B0:dc.w 0
		dc.l loc_62F72
ChildObjDat_665B6:dc.w 0
		dc.l loc_6300C
ChildObjDat_665BC:dc.w 0

		dc.l loc_632CA
		dc.w $F800
ChildObjDat_665C4:dc.w 6
		dc.l loc_65B0E
		dc.w 0
		dc.l loc_65A8C
		dc.w $CD
		dc.l loc_65B42
		dc.w $E01D
		dc.l loc_65B42
		dc.w $F01D
		dc.l loc_65B42
		dc.w $81D
		dc.l loc_65B42
		dc.w $101D
		dc.l loc_65B42
		dc.w $281D
ChildObjDat_665F0:dc.w 0
		dc.l loc_65B70
ChildObjDat_665F6:dc.w 0
		dc.l loc_659CC
ChildObjDat_665FC:dc.w 0
		dc.l loc_64C24
ChildObjDat_66602:dc.w $F
		dc.l loc_652A2
ChildObjDat_66608:dc.w 0
		dc.l loc_6502E
		dc.w $23
ChildObjDat_66610:dc.w 1

		dc.l loc_65138
		dc.w 0
		dc.l loc_6515E
		dc.w $D0
ChildObjDat_6661E:dc.w $E
		dc.l loc_6518A
ChildSpriteDat_66624:dc.w 1
		dc.l loc_6531E
		dc.w $8FC
ChildObjDat3_6662C:dc.w	9
		dc.l loc_65376
ChildObjDat3_66632:dc.w	9
		dc.l loc_65360
ChildObjDat_66638:dc.w 4
		dc.l loc_65226
ChildObjDat_6663E:dc.w 0
		dc.l loc_655B2
ChildObjDat_66644:dc.w 0

		dc.l loc_6563A
ChildObjDat_6664A:dc.w $1F
		dc.l loc_65602
ChildObjDat_66650:dc.w 9
		dc.l loc_6395C
ChildObjDat_66656:dc.w 7
		dc.l loc_63694
ChildObjDat_6665C:dc.w 0
		dc.l loc_638DC
		dc.w $EC
ChildObjDat_66664:dc.w 0
		dc.l loc_63916
DPLCPtr_6666A:	dc.l ArtUnc_CutsceneKnux

		dc.l DPLC_CutsceneKnux
DPLCPtr_66672:	dc.l ArtUnc_MHZKnuxPress
		dc.l DPLC_MHZKnuxPress
DPLCPtr_6667A:	dc.l ArtUnc_KnuxIntroLay
		dc.l DPLC_KnuxIntroLay
DPLCPtr_66682:	dc.l ArtUnc_HPZKnucklesGrab

		dc.l DPLC_HPZKnucklesGrab
DPLCPtr_6668A:	dc.l ArtUnc_SSZKnucklesTired

		dc.l DPLC_SSZKnucklesTired
DPLCPtr_66692:	dc.l ArtUnc_SSZDeathEggCloud
		dc.l DPLC_SSZDeathEggCloud
byte_6669A:	dc.b 7
		dc.b 1
		dc.b 2
		dc.b 3
		dc.b $FC
byte_6669F:	dc.b 4

		dc.b $A
		dc.b $B
		dc.b $C
		dc.b $D
		dc.b $E
		dc.b $F
		dc.b $10
		dc.b $11
		dc.b $FC
word_666A9:	dc.w $112

		dc.w $1314
		dc.w $15FC
word_666AF:	dc.w $108

		dc.w $408
		dc.w $508
		dc.w $608
		dc.w $7FC
word_666B9:	dc.w $71C
		dc.w $1C1D
		dc.w $F806
word_666BF:	dc.w $71E
		dc.w $1FFC
byte_666C3:	dc.b  $16,   7
		dc.b  $16,   7
		dc.b  $17,   7
		dc.b  $18,   7
		dc.b  $19, $13
		dc.b  $1A,   7
		dc.b  $1B,   0
		dc.b  $F4
byte_666D2:	dc.b  $20,   5
		dc.b  $21,   5
		dc.b  $22, $14
		dc.b  $23,   3
		dc.b  $24,  $F
		dc.b  $21,   5
		dc.b  $20,   5
		dc.b  $F4
byte_666E1:	dc.b	0,   4
		dc.b	0,   9
		dc.b	1, $1D
		dc.b	0,   4
		dc.b	2,   4
		dc.b	3, $1D
		dc.b	2,   4
		dc.b	0,   4
		dc.b	1, $1D
		dc.b	0,   4
		dc.b  $F4
byte_666F6:	dc.b	3,   7
		dc.b	3, $1F
		dc.b	0,   7
		dc.b	1, $1F
		dc.b	2,   7
		dc.b	1, $7F
		dc.b	2,   7
		dc.b	1, $1F
		dc.b	2,   7
		dc.b	1,  $F
		dc.b	2,   7
		dc.b	1,  $B
		dc.b	2,   7
		dc.b	1,   7
		dc.b	2,   7
		dc.b	1,   7
		dc.b	2,   7
		dc.b  $F4
byte_66719:	dc.b	0,   7
		dc.b	0,   7
		dc.b  $F8,   6
byte_6671F:	dc.b	1,  $B

		dc.b	2,   5
		dc.b	3,  $B
		dc.b	2,  $B
		dc.b	1,  $B
		dc.b  $FC
byte_6672A:	dc.b	4,   7
		dc.b	4,   7
		dc.b	5,   7
		dc.b	6, $1F
		dc.b  $F8,  $A
		dc.b	5,  $F
		dc.b	6, $1F
		dc.b  $FC
byte_66739:	dc.b	0,   5
		dc.b	0,   5
		dc.b	1,   7
		dc.b	2,   9
		dc.b	3,   9
		dc.b	4,  $B
		dc.b	5,  $C
		dc.b	6,  $D
		dc.b	7,  $E
		dc.b	8,  $F
		dc.b	9, $13
		dc.b   $A, $1D
		dc.b   $B, $27
		dc.b   $C, $63
		dc.b  $F8, $1E
		dc.b   $B, $3B
		dc.b   $A, $63
		dc.b   $B, $3B
		dc.b   $C, $63
		dc.b  $FC
byte_66760:	dc.b	6,   0
		dc.b	6, $4D
		dc.b	1, $4D
		dc.b	1, $4D
		dc.b	1, $4D
		dc.b	1, $4D
		dc.b	2,   9
		dc.b	3,   9
		dc.b  $F4
word_66771:	dc.w $D804

		dc.w $D904
		dc.w $DA04
		dc.w $DB04
		dc.w $D804
		dc.w $D904
		dc.w $DA04
		dc.w $DB04
		dc.w $D804
		dc.w $D904
		dc.w $DA04
		dc.w $DB04
		dc.w $D804
		dc.w $D904
		dc.w $DA04
		dc.w $DB04
		dc.w $D804
		dc.w $D904
		dc.w $DA04
		dc.w $DB04
		dc.w $D804
		dc.w $D904
		dc.w $DA04
		dc.w $DB04
		dc.w $DC04
		dc.w $DD04
		dc.w $DC04
		dc.w $DD04
		dc.w $DE0B
		dc.w $FFFC
byte_667AD:	dc.b 4
		dc.b $D8
		dc.b $D9
		dc.b $DA
		dc.b $DB
		dc.b $FF
		dc.b $FC
word_667B4:	dc.w $DA05
		dc.w $9B05
		dc.w $9C0F
		dc.w $FFF4
byte_667BC:	dc.b 1
		dc.b 0
		dc.b $8D
		dc.b $FF
		dc.b $FC
byte_667C1:	dc.b 1

		dc.b $9A
		dc.b $96
		dc.b $9A
		dc.b $97
		dc.b $9A
		dc.b $98
		dc.b $9A
		dc.b $99
		dc.b $FF
		dc.b $FC
byte_667CC:	dc.b 3
		dc.b $DA
		dc.b $DA
		dc.b $9B
		dc.b $9C
		dc.b $9B
		dc.b $FF
		dc.b $F4
word_667D4:	dc.w $C005
		dc.w $CA05
		dc.w $CB7F
		dc.w $CB7F
		dc.w $CB7F
		dc.w $FFFC
byte_667E0:	dc.b 5
		dc.b $CC
		dc.b $9B
		dc.b $9C
		dc.b $9B
		dc.b $FF
		dc.b $F4
byte_667E7:	dc.b 2
		dc.b 3
		dc.b 3
		dc.b 3
		dc.b 4
		dc.b 3
		dc.b 5
		dc.b 3
		dc.b 4
		dc.b $7F
		dc.b 4
		dc.b $1F
		dc.b $FF
		dc.b $F4
byte_667F5:	dc.b 3
		dc.b $DA
		dc.b $DA
		dc.b $9B
		dc.b $9C
		dc.b $FF
		dc.b $F8
		dc.b 8
		dc.b 0
		dc.b $86
		dc.b $87
		dc.b $86
		dc.b $88
		dc.b $86
		dc.b $89
		dc.b $86
		dc.b $8A
		dc.b $86
		dc.b $8B
		dc.b $FF
		dc.b $FC
byte_6680A:	dc.b 2

		dc.b 3
		dc.b 3
		dc.b 3
		dc.b 4
		dc.b 3
		dc.b 5
		dc.b 3
		dc.b 4
		dc.b $3F
		dc.b $FF
		dc.b $F4
		dc.b 2
		dc.b 3
		dc.b 3
		dc.b 3
		dc.b 4
		dc.b 3
		dc.b 5
		dc.b 3
		dc.b 4
		dc.b $7F
		dc.b 6
		dc.b 3
		dc.b $FF
		dc.b $F4
byte_66824:	dc.b 4

		dc.b 7
		dc.b 8
		dc.b 1
		dc.b 2
		dc.b 3
		dc.b 4
		dc.b 5
		dc.b 6
		dc.b $FF
		dc.b $FC
byte_6682F:	dc.b 3

		dc.b 7
		dc.b 8
		dc.b 1
		dc.b 2
		dc.b 3
		dc.b 4
		dc.b 5
		dc.b 6
		dc.b $FF
		dc.b $FC
byte_6683A:	dc.b 1
		dc.b $A
		dc.b $B
		dc.b $C
		dc.b $D
		dc.b $E
		dc.b $F
		dc.b $10
		dc.b $FC
byte_66843:	dc.b 1
		dc.b $12
		dc.b $12
		dc.b $13
		dc.b $14
		dc.b $15
		dc.b $F4
byte_6684A:	dc.b 3
		dc.b $16
		dc.b $16
		dc.b $17
		dc.b $F4
byte_6684F:	dc.b 6
		dc.b $3F
		dc.b 6
		dc.b $3F
		dc.b 7
		dc.b 2
		dc.b 8
		dc.b 2
		dc.b 7
		dc.b 2
		dc.b 6
		dc.b 2
		dc.b 7
		dc.b 2
		dc.b 8
		dc.b 2
		dc.b 7
		dc.b 2
		dc.b 6
		dc.b 2
		dc.b 7
		dc.b 2
		dc.b 8
		dc.b 2
		dc.b 7
		dc.b 2
		dc.b 6
		dc.b 2
		dc.b 7
		dc.b 2
		dc.b 8
		dc.b 2
		dc.b 7
		dc.b 2
		dc.b 6
		dc.b $5F
		dc.b $FF
		dc.b $F4
byte_66875:	dc.b 5
		dc.b 1
		dc.b 2
		dc.b 3
		dc.b 4
		dc.b $FC
byte_6687B:	dc.b 7
		dc.b 9
		dc.b $A
		dc.b $FF
		dc.b $FC
byte_66880:	dc.b 5
		dc.b $B
		dc.b $C
		dc.b $FF
		dc.b $FC
byte_66885:	dc.b $56
		dc.b 7
		dc.b $56
		dc.b $1F
		dc.b $DE
		dc.b 0
		dc.b $DE
		dc.b $F
		dc.b $56
		dc.b $3F
		dc.b $FF
		dc.b $F4
word_66891:	dc.w $D804
		dc.w $D904
		dc.w $DA04
		dc.w $DB04
		dc.w $DC04
		dc.w $DC04
		dc.w $DD04
		dc.w $DC04
		dc.w $DD04
		dc.w $DE00
		dc.w $FFF4
word_668A7:	dc.w $DE07

		dc.w $DE07
		dc.w $5600
		dc.w $FFF4
word_668AF:	dc.w $E59
		dc.w $E77
		dc.w $F07
		dc.w $101D
		dc.w $1107
		dc.w $1207
		dc.w $1107
		dc.w $1207
		dc.w $F07
		dc.w $FFF4
byte_668C3:	dc.b $13
		dc.b 0
		dc.b 1
		dc.b $FC
byte_668C7:	dc.b 4
		dc.b $6F
		dc.b 4
		dc.b $6F
		dc.b 2
		dc.b 7
		dc.b 3
		dc.b $7F
		dc.b $FC
byte_668D0:	dc.b 3
		dc.b 3
		dc.b 3
		dc.b 3
		dc.b 4
		dc.b 3
		dc.b 5
		dc.b 3
		dc.b 4
		dc.b $5F
		dc.b 6
		dc.b $1F
		dc.b 7
		dc.b 2
		dc.b 8
		dc.b 2
		dc.b 7
		dc.b 2
		dc.b 6
		dc.b 2
		dc.b 7
		dc.b 2
		dc.b 8
		dc.b 2
		dc.b 7
		dc.b 2
		dc.b 6
		dc.b $F
		dc.b 9
		dc.b 7
		dc.b $A
		dc.b 7
		dc.b 9
		dc.b 7
		dc.b $A
		dc.b 7
		dc.b 9
		dc.b 7
		dc.b $A
		dc.b 7
		dc.b 9
		dc.b 7
		dc.b $A
		dc.b 7
		dc.b 9
		dc.b 7
		dc.b $A
		dc.b 7
		dc.b 9
		dc.b 7
		dc.b $A
		dc.b 7
		dc.b $F4
byte_66905:	dc.b 3
		dc.b 1
		dc.b 2
		dc.b 3
		dc.b 4
		dc.b $FC
byte_6690B:	dc.b 5
		dc.b 5
		dc.b 5
		dc.b 6
		dc.b 7
		dc.b 8
		dc.b $F4

Pal_CNZFlash:	binclude "Levels/CNZ/Palettes/Flash.bin"
	even

Pal_KnuxSSZEnd:	binclude "General/Sprites/Knuckles/Palettes/SSZ End.bin"
	even

Pal_HPZ2_A:	binclude "Levels/HPZ/Palettes/2_A.bin"
	even

Pal_HPZ2_B:	binclude "Levels/HPZ/Palettes/2_B.bin"
	even

Pal_SKIntroBomb:	binclude "General/Sprites/Knuckles/Cutscene/Intro Bomb Pal.bin"
	even

Map_MHZKnuxPeer:	include "Levels/MHZ/Misc Object Data/Map - Knuckles Peering.asm"

Map_MHZKnuxDoor:	include "Levels/MHZ/Misc Object Data/Map - Knuckles Switch Door.asm"

Map_MHZKnuxPullSwitch:	include "General/Sprites/Knuckles/Cutscene/Map - MHZ2 Press.asm"

DPLC_MHZKnuxPress:	include "General/Sprites/Knuckles/Cutscene/DPLC - MHZ Press.asm"

Map_MHZKnuxSwitch:	include "Levels/MHZ/Misc Object Data/Map - Act 2 Knuckles Switch.asm"

Map_MHZKnuxLeaves:	include "Levels/MHZ/Misc Object Data/Map - Act 2 Knuckles Leaves.asm"

Map_LRZKnuxBoulder:	include "Levels/LRZ/Misc Object Data/Map - Knuckles Boulder.asm"

Map_SSZKnucklesTired:	include "General/Sprites/Knuckles/Cutscene/Map - SSZ Tired.asm"

DPLC_SSZKnucklesTired:	include "General/Sprites/Knuckles/Cutscene/DPLC - SSZ Tired.asm"

Map_SSZDeathEggSmall:	include "Levels/SSZ/Misc Object Data/Map - Death Egg Small.asm"

Map_SSZDeathEggCloud:	include "General/Sprites/SSZ Death Egg Cloud/Map - SSZ Death Egg Cloud.asm"

DPLC_SSZDeathEggCloud:	include "General/Sprites/SSZ Death Egg Cloud/DPLC - SSZ Death Egg Cloud.asm"

Map_HPZKnucklesGrab:	include "General/Sprites/Knuckles/Cutscene/Map - HPZ Grab.asm"

DPLC_HPZKnucklesGrab:	include "General/Sprites/Knuckles/Cutscene/DPLC - HPZ Grab.asm"

Map_KnuxFinalBossCrane:	include "General/Sprites/Robotnik/Map - Robotnik Ship Crane.asm"

Map_HPZKnuxDizzyStars:	include "Levels/HPZ/Misc Object Data/Map - Knuckles Dizzy Stars.asm"

Map_KnuxIntroLay:	include "General/Sprites/Knuckles/Cutscene/Map - Intro Laying.asm"

DPLC_KnuxIntroLay:	include "General/Sprites/Knuckles/Cutscene/DPLC - Intro Laying.asm"

Map_KnuxIntroBomb:	include "General/Sprites/Knuckles/Cutscene/Map - Intro Bomb.asm"

; ---------------------------------------------------------------------------

Obj_84:

		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_67490(pc,d0.w),d1
		jsr	off_67490(pc,d1.w)
		jsr	(Sonic_Load_PLC).l
		bsr.w	sub_67A08
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
off_67490:	dc.w loc_674AC-off_67490

		dc.w loc_67514-off_67490
		dc.w loc_67536-off_67490
		dc.w loc_67560-off_67490
		dc.w loc_67594-off_67490
		dc.w loc_675C0-off_67490
		dc.w loc_67614-off_67490
		dc.w loc_67624-off_67490
		dc.w loc_6764E-off_67490
		dc.w loc_67674-off_67490
		dc.w loc_676AC-off_67490
		dc.w loc_676C6-off_67490
		dc.w loc_676E8-off_67490
		dc.w loc_67704-off_67490
; ---------------------------------------------------------------------------

loc_674AC:
		addq.b	#2,5(a0)
		move.l	#Map_Sonic,$C(a0)
		move.w	#$680,$A(a0)
		move.w	#prio(5),8(a0)
		move.b	#-$46,$22(a0)
		move.b	#$40,7(a0)
		move.b	#$20,6(a0)
		move.w	#$60,$10(a0)
		move.w	#$30,$14(a0)
		move.w	#$40,$2E(a0)
		move.l	#loc_6751A,$34(a0)
		move.w	#8,$40(a0)
		move.w	#-$16E8,(__u_EEB6).w
		move.b	#-1,(Sonic_Knux_Mapnum).w
		lea	(Player_1).w,a1
		move.b	#0,$22(a1)
		move.b	#$53,$2E(a1)

locret_67512:

		rts
; ---------------------------------------------------------------------------

loc_67514:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_6751A:
		move.b	#4,5(a0)
		move.w	#$300,$18(a0)
		move.w	#$600,$1A(a0)
		lea	ChildObjDat_67A5A(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_67536:
		subi.w	#$18,$1A(a0)
		beq.s	loc_67544
		jmp	MoveSprite2.w
; ---------------------------------------------------------------------------

loc_67544:
		move.b	#6,5(a0)
		clr.w	$18(a0)
		move.w	#$5F,$2E(a0)
		move.l	#loc_67572,$34(a0)
		jmp	Swing_Setup1.w
; ---------------------------------------------------------------------------

loc_67560:
		jsr	Swing_UpAndDown.w
		jsr	MoveSprite2.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_67572:
		move.b	#8,5(a0)
		move.w	#$400,$18(a0)
		move.w	#-$400,$1A(a0)
		move.l	#byte_67A84,$30(a0)
		bset	#3,$38(a0)
		rts
; ---------------------------------------------------------------------------

loc_67594:
		subi.w	#$40,$18(a0)
		jsr	MoveSprite.w
		cmpi.w	#$130,$14(a0)
		bhs.s	loc_675AE
		jmp	(loc_67A20).l
; ---------------------------------------------------------------------------

loc_675AE:
		move.b	#$A,5(a0)
		move.w	#$130,$14(a0)
		clr.w	$1A(a0)
		rts
; ---------------------------------------------------------------------------

loc_675C0:
		subi.w	#$40,$18(a0)
		jsr	MoveSprite2.w
		cmpi.w	#$40,$10(a0)
		blo.s	loc_675D6
		rts
; ---------------------------------------------------------------------------

loc_675D6:
		move.b	#$C,5(a0)
		move.w	#$40,$10(a0)
		move.w	#5,$2E(a0)
		move.l	#loc_675FA,$34(a0)
		move.w	#$3F,$3A(a0)
		bra.w	loc_67996
; ---------------------------------------------------------------------------

loc_675FA:
		move.w	#5,$2E(a0)
		cmpi.w	#$80,$10(a0)
		blo.w	locret_67512
		lea	ChildObjDat_67A70(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_67614:
		subq.w	#1,$3A(a0)
		bpl.w	locret_67512
		move.b	#$E,5(a0)
		rts
; ---------------------------------------------------------------------------

loc_67624:
		bsr.w	sub_679B8
		jsr	Obj_Wait.w
		move.w	$10(a0),d0
		addq.w	#4,d0
		move.w	d0,$10(a0)
		cmpi.w	#$200,d0
		bhs.s	loc_67640
		rts
; ---------------------------------------------------------------------------

loc_67640:
		move.b	#$10,5(a0)
		move.w	#$1F,$3A(a0)
		rts
; ---------------------------------------------------------------------------

loc_6764E:
		bsr.w	sub_679B8
		jsr	Obj_Wait.w
		subq.w	#1,$3A(a0)
		bpl.w	locret_67512
		move.b	#$12,5(a0)
		bset	#2,$38(a0)
		move.w	#$C,$40(a0)
		rts
; ---------------------------------------------------------------------------

loc_67674:
		bsr.w	sub_679B8
		jsr	Obj_Wait.w
		move.w	$10(a0),d0
		subi.w	#4,d0
		move.w	d0,$10(a0)
		cmpi.w	#$120,d0
		bls.s	loc_67692
		rts
; ---------------------------------------------------------------------------

loc_67692:
		move.b	#$14,5(a0)
		bset	#2,$38(a0)
		move.w	#$1F,$3A(a0)
		move.w	#$10,$40(a0)
		rts
; ---------------------------------------------------------------------------

loc_676AC:
		bsr.w	sub_679B8
		jsr	Obj_Wait.w
		subq.w	#1,$3A(a0)
		bpl.w	locret_67512
		move.b	#$16,5(a0)
		rts
; ---------------------------------------------------------------------------

loc_676C6:
		bsr.w	sub_679B8
		cmpi.w	#$918,(Player_1+x_pos).w
		bhs.s	loc_676D8
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_676D8:
		move.b	#$18,5(a0)
		lea	ChildObjDat_67A78(pc),a2
		jmp	CreateChild6_Simple.w
; ---------------------------------------------------------------------------

loc_676E8:
		bsr.w	sub_679B8
		cmpi.w	#$1240,(Player_1+x_pos).w
		bhs.s	loc_676F6
		rts
; ---------------------------------------------------------------------------

loc_676F6:
		move.b	#$1A,5(a0)
		subi.w	#$20,$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_67704:
		bsr.w	sub_679B8
		cmpi.w	#$13D0,(Player_1+x_pos).w
		bhs.s	loc_67712
		rts
; ---------------------------------------------------------------------------

loc_67712:
		st	(PalCyc_Counters2).w
		lea	(Player_1).w,a1
		move.b	#4,5(a1)
		bset	#1,$2A(a1)
		move.w	#-$400,$1A(a1)
		move.w	#-$200,$18(a1)
		move.w	#0,$1C(a1)
		move.b	#$1A,$20(a1)
		clr.b	$2E(a1)
		clr.w	(Ctrl_1_logical).w
		st	(Ctrl_1_locked).w
		clr.b	(Super_Sonic_Knux_flag).w
		move.b	#2,(Super_Hyper_palette_status).w
		move.w	#$1E,(Palette_frame).w
		lea	Pal_AIZIntroEmeralds(pc),a1
		lea	(Normal_palette_line_4).w,a2
		moveq	#7,d0

loc_67764:
		move.l	(a1)+,(a2)+
		dbf	d0,loc_67764
		lea	ChildObjDat_67A7E(pc),a2
		jsr	CreateChild6_Simple.w
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------

loc_6777A:
		move.l	#loc_677CE,(a0)
		move.l	#Map_AIZIntroPlane,$C(a0)
		move.w	#$529,$A(a0)
		move.w	#prio(5),8(a0)
		move.b	#$40,7(a0)
		move.b	#$20,7(a0)
		jsr	Swing_Setup1.w
		lea	(ArtKosM_AIZIntroPlane).l,a1
		move.w	#-$5AE0,d2
		jsr	Queue_Kos_Module.w
		lea	(ArtKosM_AIZIntroEmeralds).l,a1
		move.w	#-$49E0,d2
		jsr	Queue_Kos_Module.w
		lea	ChildObjDat_67A62(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_677CE:
		jsr	Swing_UpAndDown.w
		jsr	MoveSprite2.w
		movea.w	$46(a0),a1
		btst	#2,$38(a1)
		beq.s	loc_677EC
		move.l	#loc_67800,(a0)

loc_677EC:
		btst	#3,$38(a1)
		bne.s	loc_677FA
		jsr	Refresh_ChildPosition.w

loc_677FA:
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_67800:
		jsr	Swing_UpAndDown.w
		jsr	MoveSprite2.w
		subq.w	#4,$10(a0)
		cmpi.w	#$20,$10(a0)
		blo.s	loc_6781E
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_6781E:
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------

loc_67824:
		move.l	#Map_AIZIntroPlane,$C(a0)
		move.w	#$529,$A(a0)
		move.w	#prio(5),8(a0)
		move.b	#4,7(a0)
		move.b	#$C,7(a0)
		move.l	#loc_6784A,(a0)

loc_6784A:
		lea	(byte_67A8F).l,a1
		jsr	Animate_RawNoSST.w
		jsr	Refresh_ChildPosition.w
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_67862:
		move.l	#Map_AIZIntroPlane,$C(a0)
		move.w	#$529,$A(a0)
		move.w	#prio(5),8(a0)
		move.b	#4,7(a0)
		move.b	#$C,7(a0)
		move.l	#loc_67888,(a0)

loc_67888:
		lea	(byte_67A97).l,a1
		jsr	Animate_RawNoSST.w
		jsr	Refresh_ChildPosition.w
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_678A0:
		move.l	#loc_678DA,(a0)
		move.l	#Map_AIZIntroWaves,$C(a0)
		move.w	#$3D1,$A(a0)
		move.w	#prio(2),8(a0)
		move.b	#$10,7(a0)
		bset	#0,4(a0)
		movea.w	$46(a0),a1
		move.l	#byte_67A9B,$30(a0)
		move.l	#Go_Delete_Sprite,$34(a0)

loc_678DA:
		cmpi.w	#$60,$10(a0)
		blo.s	loc_678FA
		movea.w	$46(a0),a1
		move.w	$40(a1),d0
		sub.w	d0,$10(a0)
		jsr	Animate_RawMultiDelay.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_678FA:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_67900:
		lea	ObjDat3_67A4E(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.b	$2C(a0),d0
		lsr.b	#1,d0
		move.b	d0,$22(a0)
		move.l	#loc_67938,(a0)
		move.b	#4,$1E(a0)
		lea	(Player_1).w,a1
		move.w	$10(a1),$10(a0)
		move.w	$14(a1),$14(a0)
		moveq	#$40,d0
		jsr	Set_IndexedVelocity.w

loc_67938:
		jsr	MoveSprite.w
		tst.l	d0
		bmi.s	loc_67956
		jsr	ObjCheckFloorDist.w
		tst.w	d1
		bpl.s	loc_67956
		add.w	d1,$14(a0)
		move.l	#loc_6795C,(a0)

loc_67956:

		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_6795C:
		movea.w	(__u_FAA4).w,a1
		move.w	$10(a0),d0
		move.w	$10(a1),d1
		subq.w	#8,d0
		cmp.w	d0,d1
		blo.s	loc_67976
		addi.w	#$10,d0
		cmp.w	d0,d1
		blo.s	loc_6797C

loc_67976:
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_6797C:
		move.w	$18(a1),d0
		btst	#1,$2C(a0)
		beq.s	loc_6798A
		neg.w	d0

loc_6798A:
		tst.w	d0
		bmi.w	locret_67512
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_67996:
		move.l	#Map_SuperSonic,mappings(a0)
		move.b	#$21,mapping_frame(a0)
		move.b	#0,(Palette_timer).w
		move.w	#$24,(Palette_frame).w
		move.w	#$7FFF,(Super_Hyper_frame_count).w
		rts

; =============== S U B R O U T I N E =======================================


sub_679B8:

		move.b	#1,(Super_Sonic_Knux_flag).w
		move.b	#$21,$22(a0)
		btst	#1,(V_int_run_count+3).w
		beq.s	loc_679D2
		move.b	#$22,$22(a0)

loc_679D2:
		subq.b	#1,(Palette_timer).w
		bpl.s	locret_67A06
		move.b	#6,(Palette_timer).w
		lea	(PalCycle_SuperSonic).l,a1
		move.w	(Palette_frame).w,d0
		addq.w	#6,(Palette_frame).w
		cmpi.w	#$36,(Palette_frame).w
		blo.s	loc_679FA
		move.w	#$24,(Palette_frame).w

loc_679FA:
		lea	(Normal_palette+$4).w,a2
		move.l	(a1,d0.w),(a2)+
		move.w	4(a1,d0.w),(a2)

locret_67A06:
		rts
; End of function sub_679B8


; =============== S U B R O U T I N E =======================================


sub_67A08:
		move.w	$40(a0),d1
		move.w	(__u_EEB6).w,d0
		bpl.s	loc_67A1A
		add.w	d1,d0
		move.w	d0,(__u_EEB6).w
		rts
; ---------------------------------------------------------------------------

loc_67A1A:
		add.w	d1,(Player_1+x_pos).w
		rts
; End of function sub_67A08

; ---------------------------------------------------------------------------

loc_67A20:
		movea.l	$30(a0),a1
		subq.b	#1,$24(a0)
		bpl.s	locret_67A4C
		move.b	(a1),$24(a0)
		moveq	#0,d0
		move.b	$23(a0),d0
		addq.w	#1,d0
		cmp.b	1(a1),d0
		blo.s	loc_67A3E
		moveq	#0,d0

loc_67A3E:
		move.b	d0,$23(a0)
		moveq	#0,d1
		move.b	2(a1,d0.w),d1
		move.b	d1,$22(a0)

locret_67A4C:
		rts
; ---------------------------------------------------------------------------
ObjDat3_67A4E:	dc.l Map_AIZIntroEmeralds
		dc.w $65B1
		dc.w prio(5)
		dc.b 4
		dc.b 4
		dc.b 1
		dc.b 0
ChildObjDat_67A5A:dc.w 0
		dc.l loc_6777A
		dc.w $DE2C
ChildObjDat_67A62:dc.w 1
		dc.l loc_67824
		dc.w $3804
		dc.l loc_67862
		dc.w $1818
ChildObjDat_67A70:dc.w 0
		dc.l loc_678A0
		dc.w $18
ChildObjDat_67A78:dc.w 0
		dc.l Obj_CutsceneKnuckles
ChildObjDat_67A7E:dc.w 6
		dc.l loc_67900
byte_67A84:	dc.b	3,   8
		dc.b  $97, $96
		dc.b  $98, $96
		dc.b  $99, $96
		dc.b  $9A, $96
		dc.b  $FC
byte_67A8F:	dc.b 0
		dc.b 1
		dc.b 2
		dc.b 3
		dc.b 4
		dc.b 3
		dc.b 2
		dc.b $FC
byte_67A97:	dc.b 0
		dc.b 5
		dc.b 6
		dc.b $FC
byte_67A9B:	dc.b 0
		dc.b 1
		dc.b 0
		dc.b 0
		dc.b 1
		dc.b 1
		dc.b 2
		dc.b 2
		dc.b 3
		dc.b 2
		dc.b 4
		dc.b 1
		dc.b 5
		dc.b 1
		dc.b $F4
Pal_AIZIntroEmeralds:	binclude "Levels/AIZ/Palettes/Intro Emeralds.bin"
	even

; ---------------------------------------------------------------------------

Obj_RobotnikHead:
		jsr	Refresh_ChildPositionAdjusted.w
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	RobotnikHead_Index(pc,d0.w),d1
		jsr	RobotnikHead_Index(pc,d1.w)
		jmp	Child_Draw_Sprite2.w
; ---------------------------------------------------------------------------
RobotnikHead_Index:	dc.w Obj_RobotnikHeadInit-RobotnikHead_Index
		dc.w Obj_RobotnikHeadMain-RobotnikHead_Index
		dc.w Obj_RobotnikHeadEnd-RobotnikHead_Index
; ---------------------------------------------------------------------------

Obj_RobotnikHeadInit:

		lea	ObjDat_RobotnikHead(pc),a1
		jsr	SetUp_ObjAttributes.w
		jsr	(Child_SyncDraw).l
		move.l	#AniRaw_RobotnikHead,$30(a0)
		movea.w	$46(a0),a1
		move.w	$46(a1),$44(a0)
		cmpi.b	#2,(Player_1+character_id).w
		bne.s	Obj_RobotnikHeadEnd

; =============== S U B R O U T I N E =======================================


sub_67B14:

		move.l	#Map_EggRoboHead,$C(a0)		; If player is Knuckles, use Egg Robo head

loc_67B1C:
		move.l	#AniRaw_EggRoboHead,$30(a0)
		lea	(ArtKosM_EggRoboHead).l,a1
		move.w	#-$5A40,d2
		jmp	Queue_Kos_Module.w
; End of function sub_67B14

; ---------------------------------------------------------------------------

Obj_RobotnikHeadMain:

		jsr	Animate_Raw.w
		movea.w	$44(a0),a1
		btst	#7,$2A(a1)
		bne.s	loc_67B56
		btst	#6,$2A(a1)
		beq.s	locret_67B54
		move.b	#2,$22(a0)		; Use hurt mapping frame if parent boss object is currently hurt

locret_67B54:
		rts
; ---------------------------------------------------------------------------

loc_67B56:
		move.b	#4,5(a0)
		move.b	#3,$22(a0)		; Use defeated head frame if parent boss object is defeated
		rts
; ---------------------------------------------------------------------------

Obj_RobotnikHeadEnd:

		rts
; ---------------------------------------------------------------------------

Obj_RobotnikHead2:
		jsr	Refresh_ChildPositionAdjusted.w
		jsr	(Child_SyncDraw).l
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	RobotnikHead2_Index(pc,d0.w),d1
		jsr	RobotnikHead2_Index(pc,d1.w)
		btst	#6,$38(a0)
		bne.w	Obj_RobotnikHeadEnd
		jmp	Child_Draw_Sprite2.w
; ---------------------------------------------------------------------------
RobotnikHead2_Index:	dc.w Obj_RobotnikHeadInit-RobotnikHead2_Index
		dc.w Obj_RobotnikHeadMain-RobotnikHead2_Index
		dc.w Obj_RobotnikHeadEnd-RobotnikHead2_Index
; ---------------------------------------------------------------------------

Obj_FBZRobotnikHead:
		jsr	Refresh_ChildPositionAdjusted.w
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	FBZRobotnikHead_Index(pc,d0.w),d1
		jsr	FBZRobotnikHead_Index(pc,d1.w)
		jsr	(Child_GetPriority).l
		jmp	Child_Draw_Sprite2.w
; ---------------------------------------------------------------------------
FBZRobotnikHead_Index:	dc.w Obj_FBZRobotnikHeadInit-FBZRobotnikHead_Index

		dc.w Obj_FBZRobotnikHeadMain-FBZRobotnikHead_Index
		dc.w Obj_RobotnikHeadEnd-FBZRobotnikHead_Index
; ---------------------------------------------------------------------------

Obj_FBZRobotnikHeadInit:
		lea	ObjDat_FBZRobotnikHead(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#AniRaw_RobotnikHead,$30(a0)
		movea.w	$46(a0),a1
		move.w	$46(a1),$44(a0)
		cmpi.b	#2,(Player_1+character_id).w
		bne.w	Obj_RobotnikHeadEnd
		bra.w	sub_67B14
; ---------------------------------------------------------------------------

Obj_FBZRobotnikHeadMain:
		move.w	$10(a0),d0
		bclr	#0,4(a0)
		cmp.w	(Player_1+x_pos).w,d0
		bhs.s	loc_67BFC
		bset	#0,4(a0)

loc_67BFC:
		clr.b	$22(a0)
		movea.w	$44(a0),a1
		btst	#2,$38(a0)
		beq.s	loc_67C12
		move.b	#1,$22(a0)

loc_67C12:
		btst	#7,$2A(a1)
		bne.s	loc_67C2A
		btst	#6,$2A(a1)
		beq.s	locret_67C28
		move.b	#2,$22(a0)

locret_67C28:
		rts
; ---------------------------------------------------------------------------

loc_67C2A:
		move.b	#4,5(a0)
		move.b	#3,$22(a0)
		rts
; ---------------------------------------------------------------------------

Obj_RobotnikHead3:
		jsr	Refresh_ChildPositionAdjusted.w
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	RobotnikHead3_Index(pc,d0.w),d1
		jsr	RobotnikHead3_Index(pc,d1.w)
		jmp	Child_Draw_Sprite2.w
; ---------------------------------------------------------------------------
RobotnikHead3_Index:	dc.w Obj_RobotnikHead3Init-RobotnikHead3_Index

		dc.w Obj_RobotnikHead3Main-RobotnikHead3_Index
		dc.w Obj_RobotnikHead3End-RobotnikHead3_Index
; ---------------------------------------------------------------------------

Obj_RobotnikHead3Init:

		lea	ObjDat_RobotnikHead(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#AniRaw_RobotnikHead,$30(a0)
		cmpi.b	#2,(Player_1+character_id).w
		bne.s	loc_67C76
		bsr.w	sub_67B14

loc_67C76:
		movea.w	$46(a0),a1
		btst	#7,$A(a1)
		beq.s	locret_67C88
		bset	#7,$A(a0)

locret_67C88:
		rts
; ---------------------------------------------------------------------------

Obj_RobotnikHead3Main:

		jsr	Animate_Raw.w
		movea.w	$46(a0),a1
		btst	#7,$2A(a1)
		bne.s	loc_67CAC
		btst	#6,$2A(a1)
		beq.s	locret_67CAA
		move.b	#2,$22(a0)

locret_67CAA:
		rts
; ---------------------------------------------------------------------------

loc_67CAC:
		move.b	#4,5(a0)
		move.b	#3,$22(a0)
		rts
; ---------------------------------------------------------------------------

Obj_RobotnikHead3End:

		movea.w	$46(a0),a1
		btst	#7,$2A(a1)
		bne.w	Obj_RobotnikHeadEnd
		lea	AniRaw_RobotnikHead(pc),a1
		jmp	Animate_RawNoSST.w
; ---------------------------------------------------------------------------

Obj_RobotnikHead4:

		jsr	Refresh_ChildPositionAdjusted.w
		jsr	(Child_GetPriority).l
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	RobotnikHead4_Index(pc,d0.w),d1
		jsr	RobotnikHead4_Index(pc,d1.w)
		movea.w	$46(a0),a1
		btst	#5,$38(a1)
		bne.s	loc_67CFE
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_67CFE:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------
RobotnikHead4_Index:	dc.w Obj_RobotnikHead3Init-RobotnikHead4_Index

		dc.w Obj_RobotnikHead3Main-RobotnikHead4_Index
		dc.w Obj_RobotnikHead3End-RobotnikHead4_Index
; ---------------------------------------------------------------------------

Obj_MechaSonicHead:
		lea	ObjDat_MechaSonicHead(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#Obj_MechaSonicHeadMain,(a0)
		lea	(ArtKosM_MechaSonicHead).l,a1
		move.w	#-$5A40,d2
		jmp	Queue_Kos_Module.w
; ---------------------------------------------------------------------------

Obj_MechaSonicHeadMain:
		jsr	Refresh_ChildPositionAdjusted.w
		tst.b	(MechaHead_DeleteFlag).w
		bne.s	loc_67D3C
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_67D3C:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

Obj_RobotnikShip:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	RobotnikShip_Index(pc,d0.w),d1
		jsr	RobotnikShip_Index(pc,d1.w)
		btst	#6,$38(a0)
		bne.w	Obj_RobotnikHeadEnd
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
RobotnikShip_Index:	dc.w loc_67D68-RobotnikShip_Index

		dc.w loc_67D84-RobotnikShip_Index
		dc.w loc_67DD8-RobotnikShip_Index
		dc.w loc_67E0A-RobotnikShip_Index
; ---------------------------------------------------------------------------

loc_67D68:
		lea	ObjDat_RobotnikShip(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.b	$2C(a0),$22(a0)
		lea	(Child1_MakeRoboHead2).l,a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_67D84:
		jsr	Refresh_ChildPositionAdjusted.w
		jsr	(Child_SyncDraw).l
		movea.w	$46(a0),a1
		btst	#7,$2A(a1)
		bne.s	loc_67D9E
		rts
; ---------------------------------------------------------------------------

loc_67D9E:
		move.b	#4,5(a0)
		cmpi.b	#0,(Current_zone).w
		beq.s	loc_67DC2
		lea	Child6_CreateBossExplosion.w,a2
		jsr	CreateChild6_Simple.w
		bne.s	locret_67DC0
		move.b	#4,$2C(a1)

locret_67DC0:
		rts
; ---------------------------------------------------------------------------

loc_67DC2:
		lea	Child6_CreateBossExplosion.w,a2	; if in Angel Island
		jsr	CreateChild6_Simple.w
		bne.s	locret_67DD6
		move.b	#$12,$2C(a1)

locret_67DD6:
		rts
; ---------------------------------------------------------------------------

loc_67DD8:
		movea.w	$46(a0),a1
		btst	#4,$38(a1)
		bne.s	loc_67DF0
		jsr	(Child_SyncDraw).l
		jmp	Refresh_ChildPositionAdjusted.w
; ---------------------------------------------------------------------------

loc_67DF0:
		move.b	#6,5(a0)
		move.b	#5,$22(a0)
		move.w	#-$200,$1A(a0)
		move.w	#$7F,$2E(a0)
		rts
; ---------------------------------------------------------------------------

loc_67E0A:
		jsr	MoveSprite.w
		subq.w	#1,$2E(a0)
		bmi.s	loc_67E18
		rts
; ---------------------------------------------------------------------------

loc_67E18:
		bset	#5,$38(a0)
		clr.b	(Boss_flag).w
		jmp	Go_Delete_Sprite_2.w
; ---------------------------------------------------------------------------

Obj_RobotnikShip2:

		moveq	#0,d0
		move.b	5(a0),d0
		move.w	RobotnikShip2_Index(pc,d0.w),d1
		jsr	RobotnikShip2_Index(pc,d1.w)
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
RobotnikShip2_Index:	dc.w Obj_RobotnikShipInit-RobotnikShip2_Index

		dc.w Obj_RobotnikShipMain-RobotnikShip2_Index
		dc.w Obj_RobotnikShip2Wait-RobotnikShip2_Index
		dc.w Obj_RobotnikShipReady-RobotnikShip2_Index
		dc.w Obj_RobotnikShipEscape-RobotnikShip2_Index
; ---------------------------------------------------------------------------

Obj_RobotnikShip2Wait:
		movea.w	$46(a0),a1
		btst	#4,$38(a1)
		bne.s	loc_67E54
		rts
; ---------------------------------------------------------------------------

loc_67E54:
		move.b	#6,5(a0)
		move.b	#5,$22(a0)
		rts
; ---------------------------------------------------------------------------

Obj_RobotnikShip3:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	RobotnikShip3_Index(pc,d0.w),d1
		jsr	RobotnikShip3_Index(pc,d1.w)
		movea.w	$46(a0),a1
		btst	#5,$38(a1)
		bne.s	loc_67E8C
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
RobotnikShip3_Index:	dc.w Obj_RobotnikShipInit-RobotnikShip3_Index
		dc.w Obj_RobotnikShipMain-RobotnikShip3_Index
		dc.w Obj_RobotnikShipWait-RobotnikShip3_Index
		dc.w Obj_RobotnikShipReady-RobotnikShip3_Index
		dc.w Obj_RobotnikShipEscape-RobotnikShip3_Index
; ---------------------------------------------------------------------------

loc_67E8C:
		jmp	Go_Delete_Sprite_2.w
; ---------------------------------------------------------------------------

Obj_RobotnikShipInit:

		lea	ObjDat_RobotnikShip(pc),a1
		jsr	SetUp_ObjAttributes.w
		jsr	(Child_SyncDraw).l
		move.b	$2C(a0),$22(a0)
		lea	(Child1_MakeRoboHead).l,a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

Obj_RobotnikShipMain:

		jsr	Refresh_ChildPositionAdjusted.w
		movea.w	$46(a0),a1
		btst	#7,$2A(a1)
		bne.s	loc_67EC8
		rts
; ---------------------------------------------------------------------------

loc_67EC8:
		move.b	#4,5(a0)
		lea	Child6_CreateBossExplosion.w,a2
		jsr	CreateChild1_Normal.w
		bne.s	locret_67EE2
		move.b	#4,$2C(a1)

locret_67EE2:
		rts
; ---------------------------------------------------------------------------

Obj_RobotnikShipWait:

		movea.w	$46(a0),a1
		btst	#4,$38(a1)
		bne.s	loc_67EF6
		jmp	Refresh_ChildPositionAdjusted.w
; ---------------------------------------------------------------------------

loc_67EF6:
		move.b	#6,5(a0)
		move.b	#$A,$22(a0)
		rts
; ---------------------------------------------------------------------------

Obj_RobotnikShipReady:

		move.w	(Camera_Y_pos).w,d0
		addi.w	#$40,d0
		cmp.w	$14(a0),d0
		bhs.s	loc_67F18
		subq.w	#1,$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_67F18:
		move.b	#8,5(a0)

loc_67F1E:
		bset	#0,4(a0)
		move.w	#$300,$18(a0)
		clr.w	$1A(a0)
		move.w	#$100,$2E(a0)
		lea	Child1_MakeRoboShipFlame(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

Obj_RobotnikShipEscape:

		jsr	MoveSprite2.w
		subq.w	#1,$2E(a0)
		bmi.s	loc_67F4C
		rts
; ---------------------------------------------------------------------------

loc_67F4C:
		bset	#5,$38(a0)
		clr.b	(Boss_flag).w
		jmp	Go_Delete_Sprite_2.w
; ---------------------------------------------------------------------------

Obj_RobotnikShip4:

		moveq	#0,d0
		move.b	5(a0),d0
		move.w	RobotnikShip4_Index(pc,d0.w),d1
		jsr	RobotnikShip4_Index(pc,d1.w)
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
RobotnikShip4_Index:	dc.w Obj_RobotnikShipInit-RobotnikShip4_Index

		dc.w Obj_RobotnikShipMain-RobotnikShip4_Index
		dc.w Obj_RobotnikShipWait-RobotnikShip4_Index
		dc.w Obj_RobotnikShipReady-RobotnikShip4_Index
		dc.w Obj_RobotnikShipEscape-RobotnikShip4_Index
; ---------------------------------------------------------------------------

Obj_FBZRobotnikShip:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	FBZRobotnikShip_Index(pc,d0.w),d1
		jsr	FBZRobotnikShip_Index(pc,d1.w)
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
FBZRobotnikShip_Index:	dc.w Obj_FBZRobotnikShipInit-FBZRobotnikShip_Index

		dc.w Obj_FBZRobotnikShipMain-FBZRobotnikShip_Index
		dc.w Obj_FBZRobotnikShipWait-FBZRobotnikShip_Index
		dc.w Obj_FBZRobotnikShipFall-FBZRobotnikShip_Index
		dc.w Obj_FBZRobotnikShipRise-FBZRobotnikShip_Index
		dc.w Obj_RobotnikShipEscape-FBZRobotnikShip_Index
; ---------------------------------------------------------------------------

Obj_FBZRobotnikShipInit:
		lea	ObjDat_RobotnikShip(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.b	$2C(a0),$22(a0)
		lea	(Child1_MakeFBZRoboHead).l,a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

Obj_FBZRobotnikShipMain:
		jsr	Refresh_ChildPosition.w
		jsr	(Child_GetPriority).l
		movea.w	$46(a0),a1
		btst	#7,$2A(a1)
		bne.s	loc_67FD0
		rts
; ---------------------------------------------------------------------------

loc_67FD0:
		move.b	#4,5(a0)
		lea	Child6_CreateBossExplosion.w,a2
		jsr	CreateChild1_Normal.w
		bne.s	locret_67FEA
		move.b	#4,$2C(a1)

locret_67FEA:
		rts
; ---------------------------------------------------------------------------

Obj_FBZRobotnikShipWait:
		movea.w	$46(a0),a1
		btst	#4,$38(a1)
		bne.s	loc_68004
		jsr	(Child_GetPriority).l
		jmp	Refresh_ChildPosition.w
; ---------------------------------------------------------------------------

loc_68004:
		move.b	#6,5(a0)
		move.b	#5,$22(a0)
		clr.w	$18(a0)
		move.w	#-$200,$1A(a0)
		move.w	#$2F,$2E(a0)
		move.l	#Obj_FBZRobotnikShipReadyGo,$34(a0)
		rts
; ---------------------------------------------------------------------------

Obj_FBZRobotnikShipFall:
		jsr	MoveSprite.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

Obj_FBZRobotnikShipReadyGo:
		move.b	#8,5(a0)
		bset	#0,4(a0)
		rts
; ---------------------------------------------------------------------------

Obj_FBZRobotnikShipRise:
		move.w	(Camera_Y_pos).w,d0
		addi.w	#$C0,d0
		cmp.w	$14(a0),d0
		bhs.s	loc_68058
		subq.w	#1,$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_68058:
		move.b	#$A,5(a0)
		bra.w	loc_67F1E
; ---------------------------------------------------------------------------

Obj_RobotnikShipFlame:
		lea	ObjDat2_RoboShipFlame(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#Obj_RobotnikShipFlameMain,(a0)
		rts
; ---------------------------------------------------------------------------

Obj_RobotnikShipFlameMain:
		movea.w	$46(a0),a1
		btst	#4,$38(a1)
		bne.s	loc_6809E
		jsr	Refresh_ChildPositionAdjusted.w
		btst	#0,(V_int_run_count+3).w
		bne.w	Obj_RobotnikHeadEnd
		tst.w	$18(a1)
		beq.w	Obj_RobotnikHeadEnd
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_6809E:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

Obj_BlueSphere_Ship:
		move.l	#loc_680EC,(a0)
		move.l	#Map_RobotnikShip,$C(a0)
		move.w	#$226F,$A(a0)
		move.w	#prio(5),8(a0)
		move.b	#$20,7(a0)
		move.b	#$20,6(a0)
		move.b	#$A,$22(a0)
		move.w	#$188,$10(a0)
		move.w	#$C0,$14(a0)
		jsr	Swing_Setup1.w
		lea	Child1_BlueSphereShipHead(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_680EC:
		jsr	Swing_UpAndDown.w
		jsr	MoveSprite2.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

Obj_BlueSphere_ShipHead:
		move.l	#loc_68118,(a0)
		move.w	#prio(5),8(a0)
		move.b	#$10,7(a0)
		move.b	#8,6(a0)
		rts
; ---------------------------------------------------------------------------

loc_68118:
		jsr	Refresh_ChildPositionAdjusted.w
		lea	AniRaw_EggRoboHead(pc),a1
		jsr	Animate_RawNoSST.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
ObjDat_RobotnikHead:	dc.l Map_RobotnikShip

		dc.w $52E
		dc.w prio(5)
		dc.b $10
		dc.b 8
		dc.b 0
		dc.b 0
ObjDat_FBZRobotnikHead:	dc.l Map_FBZRobotnikHead
		dc.w $430
		dc.w prio(5)
		dc.b $10
		dc.b 8
		dc.b 0
		dc.b 0
ObjDat_RobotnikShip:	dc.l Map_RobotnikShip

		dc.w $52E
		dc.w prio(5)
		dc.b $1C
		dc.b $20
		dc.b 8
		dc.b 0
ObjDat2_RoboShipFlame:	dc.w prio(5)
		dc.b 8
		dc.b 4
		dc.b 6
		dc.b 0
ObjDat_MechaSonicHead:	dc.l Map_MechaSonicHead
		dc.w $252E
		dc.w prio(5)
		dc.b $14
		dc.b $10
		dc.b 0
		dc.b 0
Child1_MakeRoboHead:dc.w 0
		dc.l Obj_RobotnikHead
		dc.w $E4
Child1_MakeRoboHead2:dc.w 0
		dc.l Obj_RobotnikHead2
		dc.w $E4
Child1_MakeFBZRoboHead:dc.w 0
		dc.l Obj_FBZRobotnikHead
		dc.w $E4
Child1_MakeRoboHead3:dc.w 0

		dc.l Obj_RobotnikHead3
		dc.w $E4
Child1_MakeRoboHead4:dc.w 0

		dc.l Obj_RobotnikHead4
		dc.w $E4
word_6818C:	dc.w 0
		dc.l Obj_RobotnikShip
		dc.w $EC
		dc.w 0
		dc.l Obj_RobotnikShip2
		dc.w 0
Child1_MakeRoboShip3:dc.w 0

		dc.l Obj_RobotnikShip3
		dc.w $FA04
ChildObjDat_681A4:dc.w 0
		dc.l Obj_RobotnikShip4
		dc.w $F8
ChildObjDat_681AC:dc.w 0
		dc.l Obj_FBZRobotnikShip
		dc.w 4
Child1_MakeRoboShipFlame:dc.w 0

		dc.l Obj_RobotnikShipFlame
		dc.w $1E00
Child1_MakeMechaHead:dc.w 0

		dc.l Obj_MechaSonicHead
		dc.w $E0
Child1_BlueSphereShipHead:dc.w 0
		dc.l Obj_BlueSphere_ShipHead
		dc.w $E4
AniRaw_RobotnikHead:	dc.b 5

		dc.b 0
		dc.b 1
		dc.b $FC
AniRaw_EggRoboHead:	dc.b $F

		dc.b 0
		dc.b 1
		dc.b $FC
Map_EggRoboHead:	include "General/Sprites/Robotnik/Map - Egg Robo Head.asm"

Map_MechaSonicHead:	include "General/Sprites/Mecha Sonic/Map - Mecha Sonic Head.asm"

Map_RobotnikShip:	include "General/Sprites/Robotnik/Map - Robotnik Ship.asm"

Map_FBZRobotnikRun:	include "Levels/FBZ/Misc Object Data/Map - Robotnik Run.asm"

Map_FBZRobotnikHead:	include "Levels/FBZ/Misc Object Data/Map - Robotnik Head.asm"

Map_FBZRobotnikStand:	include "Levels/FBZ/Misc Object Data/Map - Robotnik Stand.asm"

; ---------------------------------------------------------------------------

Obj_AIZ_Miniboss_Cutscene:	; NAT: Make player unable to die during this cutscene
		st	Player_1+$37.w
		st	Player_2+$37.w
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_684FE(pc,d0.w),d1
		jsr	off_684FE(pc,d1.w)
		bra.w	loc_68F62
; ---------------------------------------------------------------------------
off_684FE:	dc.w loc_68508-off_684FE

		dc.w loc_6852C-off_684FE
		dc.w loc_68574-off_684FE
		dc.w loc_685B8-off_684FE
		dc.w loc_685FC-off_684FE
; ---------------------------------------------------------------------------

loc_68508:
		st	BossHitMode.w		; NAT: Enable hit mode
		clr.w	BossHitsP1.w		; clear hits count

		lea	ObjDat3_68FFE(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.b	#$60,$29(a0)
		move.w	(Camera_max_X_pos).w,(__u_FA92).w
		st	Boss_flag.w
		moveq	#$5A,d0
		jmp	Load_PLC.w
; ---------------------------------------------------------------------------

loc_6852C:
		move.w	(Camera_X_pos).w,d0
		move.w	#$2F10,d5
		cmp.w	d5,d0
		bhs.s	loc_6853A

locret_68572:
		rts
; ---------------------------------------------------------------------------

loc_6853A:
		move.l	#loc_6857A,$34(a0)
		lea	ChildObjDat_6906A(pc),a2
		jsr	CreateChild3_NormalRepeated.w
		lea	Pal_AIZMiniboss(pc),a1
		jsr	PalLoad_Line1.w

loc_68556:
		move.b	#4,5(a0)
		move.w	#$B4,$2E(a0)
		move.w	d5,(Camera_min_X_pos).w
		move.w	d5,(Camera_max_X_pos).w
		moveq	#-$1F,d0
		jmp	Play_Sound.w
; ---------------------------------------------------------------------------

loc_68574:

		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_6857A:
		move.l	#loc_685BE,$34(a0)
		move.b	#6,5(a0)
		lea	ChildObjDat_6905C(pc),a2
		jsr	CreateChild1_Normal.w
		lea	ChildObjDat_69072(pc),a2
		jsr	CreateChild1_Normal.w

; =============== S U B R O U T I N E =======================================


sub_6859C:
		move.w	#$100,$1A(a0)
		move.w	#$AF,$2E(a0)
		moveq	#Mus_Minib_S3,d0
		move.b	d0,(Level_music+$1).w
		jmp	Play_Sound.w
; End of function sub_6859C

; ---------------------------------------------------------------------------

loc_685B8:
		jmp	MoveWaitTouch.w
; ---------------------------------------------------------------------------

loc_685BE:
		move.w	#$7F,$2E(a0)
		move.l	#loc_6862E,$34(a0)
		move.b	#3,$39(a0)
		bset	#1,$38(a0)

loc_685D8:
		move.b	#8,5(a0)
		clr.w	$1A(a0)
		jmp	Swing_Setup1.w
; ---------------------------------------------------------------------------

loc_685FC:
		jsr	Swing_UpAndDown.w
		jmp	MoveWaitTouch.w
; ---------------------------------------------------------------------------

loc_6862E:
		move.w	#$10,$2E(a0)
		move.l	#loc_68646,$34(a0)
		lea	ChildObjDat_69104(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_68646:
		move.l	#loc_68690,(a0)
		lea	Pal_AIZMiniboss(pc),a1
		jsr	PalLoad_Line1.w
		move.b	#$F,$28(a0)
		moveq	#-$1F,d0
		jsr	Play_Sound.w
		move.w	#$400,$18(a0)
		clr.w	$1A(a0)
		move.w	#$40,$2E(a0)
		cmpi.w	#0,(Current_zone_and_act).w
		bne.s	loc_68682
		move.w	#$114,$2E(a0)		; NAT: Change delay from $120 to load monitors first

loc_68682:
		move.l	#Go_Delete_Sprite,$34(a0)
		st	(ScrEvents_2).w
		rts
; ---------------------------------------------------------------------------

loc_68690:
		jsr	MoveSprite2.w
		subq.w	#1,$2E(a0)
		bmi.s	loc_686A2
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_686A2:
		sf	Player_1+$37.w		; NAT: Clear fake shield bit
		sf	Player_2+$37.w
		lea	(PLC_83D48).l,a1
		jsr	Load_PLC_Raw.w

		clr.b	(Boss_flag).w
		jsr	Obj_PlayLevelMusic.w
		jmp	Go_Delete_Sprite_2.w
; ---------------------------------------------------------------------------

loc_686BE:
		jsr	Refresh_ChildPositionAdjusted.w
		lea	word_6900A(pc),a1
		jsr	SetUp_ObjAttributes2.w
		bset	#4,$2B(a0)
		move.l	#byte_69126,$30(a0)
		move.l	#loc_686E8,(a0)
		jmp	Child_DrawTouch_Sprite2.w
; ---------------------------------------------------------------------------

loc_686E8:
		jsr	Refresh_ChildPositionAdjusted.w
		jsr	Animate_Raw.w
		movea.w	$46(a0),a1
		btst	#7,$2A(a1)
		beq.s	loc_68704
		clr.b	$28(a0)

loc_68704:
		jmp	Child_DrawTouch_Sprite2.w
; ---------------------------------------------------------------------------

loc_6870A:
		jsr	Refresh_ChildPositionAdjusted.w
		move.l	#loc_68720,(a0)
		lea	word_69012(pc),a1
		jmp	SetUp_ObjAttributes2.w
; ---------------------------------------------------------------------------

loc_68720:
		jsr	Refresh_ChildPositionAdjusted.w
		jmp	Child_Draw_Sprite2.w
; ---------------------------------------------------------------------------

loc_6872C:

		jsr	Refresh_ChildPositionAdjusted.w
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_68746(pc,d0.w),d1
		jsr	off_68746(pc,d1.w)
		jmp	Child_Draw_Sprite2.w
; ---------------------------------------------------------------------------
off_68746:	dc.w loc_68754-off_68746

		dc.w loc_6875E-off_68746
		dc.w loc_6877E-off_68746
		dc.w loc_6879C-off_68746
		dc.w loc_687DC-off_68746
		dc.w loc_6879C-off_68746
		dc.w locret_68572-off_68746
; ---------------------------------------------------------------------------

loc_68754:

		lea	word_6901A(pc),a1
		jmp	SetUp_ObjAttributes2.w
; ---------------------------------------------------------------------------

loc_6875E:
		movea.w	$46(a0),a1
		btst	#1,$38(a1)
		bne.s	loc_6876C
		rts
; ---------------------------------------------------------------------------

loc_6876C:
		move.b	#4,5(a0)
		move.l	#loc_68784,$34(a0)
		bra.w	loc_68EC0
; ---------------------------------------------------------------------------

loc_6877E:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_68784:
		move.l	#loc_687A2,$34(a0)

loc_6878C:
		move.b	#6,5(a0)
		move.l	#byte_6912F,$30(a0)
		rts
; ---------------------------------------------------------------------------

loc_6879C:

		jmp	Animate_RawMultiDelay.w
; ---------------------------------------------------------------------------

loc_687A2:
		move.b	#8,5(a0)
		move.b	#3,$39(a0)
		move.l	#loc_687B6,$34(a0)

loc_687B6:
		move.w	#$1C,$2E(a0)
		subq.b	#1,$39(a0)
		cmpi.b	#1,$39(a0)
		beq.s	loc_687D2
		lea	ChildObjDat_6909A(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_687D2:
		lea	ChildObjDat_690A8(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_687DC:
		jsr	Obj_Wait.w
		tst.b	$39(a0)
		bmi.s	loc_687EA
		rts
; ---------------------------------------------------------------------------

loc_687EA:
		move.b	#$A,5(a0)
		move.l	#byte_69136,$30(a0)
		move.l	#loc_68802,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_68802:
		move.b	#$C,5(a0)
		rts
; ---------------------------------------------------------------------------

loc_6880A:

		jsr	Refresh_ChildPositionAdjusted.w
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_68824(pc,d0.w),d1
		jsr	off_68824(pc,d1.w)
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
off_68824:	dc.w loc_68828-off_68824

		dc.w loc_6879C-off_68824
; ---------------------------------------------------------------------------

loc_68828:
		lea	byte_69022(pc),a1
		jsr	SetUp_ObjAttributes2.w
		move.l	#byte_6913F,$30(a0)
		move.l	#Go_Delete_Sprite,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_68844:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_68852(pc,d0.w),d1
		jmp	off_68852(pc,d1.w)
; ---------------------------------------------------------------------------
off_68852:	dc.w sub_6885A-off_68852

		dc.w loc_6888E-off_68852
		dc.w loc_68574-off_68852
		dc.w loc_6888E-off_68852

; =============== S U B R O U T I N E =======================================


sub_6885A:

		lea	word_6902A(pc),a1
		jsr	SetUp_ObjAttributes2.w
		moveq	#$4D,d0
		jsr	Play_Sound_2.w
		move.l	#byte_6914C,$30(a0)
		move.l	#loc_6889A,$34(a0)
		move.w	#-$400,$1A(a0)
		move.w	#$60,$2E(a0)
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_6888E:

		jsr	Move_AnimateRaw_Wait.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_6889A:
		move.b	#4,5(a0)
		move.w	#8,$2E(a0)
		move.l	#loc_688B0,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_688B0:
		move.b	#6,5(a0)
		moveq	#$51,d0
		jsr	Play_Sound_2.w
		move.w	#prio(1),8(a0)
		bset	#1,4(a0)
		move.l	#Go_Delete_Sprite,$34(a0)
		move.w	#$60,$2E(a0)
		movea.w	$46(a0),a1
		moveq	#0,d0
		move.b	$2C(a1),d0
		bsr.w	sub_68EE4
		move.w	(Camera_Y_pos).w,d0
		subi.w	#$20,d0
		move.w	d0,$14(a0)
		rts
; End of function sub_6885A

; ---------------------------------------------------------------------------

Obj_AIZMiniboss_Flame:

		jsr	Refresh_ChildPositionAdjusted.w
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_68908(pc,d0.w),d1
		jmp	off_68908(pc,d1.w)
; ---------------------------------------------------------------------------
off_68908:	dc.w sub_6890E-off_68908

		dc.w loc_68574-off_68908
		dc.w loc_68956-off_68908

; =============== S U B R O U T I N E =======================================


sub_6890E:

		lea	ObjDat3_6903E(pc),a1
		jsr	SetUp_ObjAttributes.w
		bset	#4,$2B(a0)
		move.l	#loc_6893E,$34(a0)
		moveq	#6,d1

loc_68928:
		moveq	#0,d0
		move.b	$2C(a0),d0
		sub.w	d0,d1
		add.b	d1,d1
		move.w	d1,$2E(a0)
		rts
; ---------------------------------------------------------------------------

loc_6893E:
		move.b	#4,5(a0)
		move.l	#byte_6915F,$30(a0)
		move.l	#loc_68962,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_68956:
		jsr	Animate_RawMultiDelay.w
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------

loc_68962:
		move.l	#Map_BossExplosion,$C(a0)
		move.w	#-$7B2E,$A(a0)
		move.l	#byte_69164,$30(a0)
		move.l	#Go_Delete_Sprite,$34(a0)
		cmpi.b	#6,$2C(a0)
		bne.w	locret_68572
		lea	ChildObjDat_690D0(pc),a2
		jmp	CreateChild1_Normal.w
; End of function sub_6890E

; ---------------------------------------------------------------------------

loc_68994:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_689A8(pc,d0.w),d1
		jsr	off_689A8(pc,d1.w)
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------
off_689A8:	dc.w loc_689AC-off_689A8

		dc.w loc_689F8-off_689A8
; ---------------------------------------------------------------------------

loc_689AC:
		bsr.w	sub_6890E
		move.w	#prio(2),8(a0)
		move.l	#byte_6916F,$30(a0)
		move.l	#Go_Delete_Sprite,$34(a0)
		movea.w	$46(a0),a1
		movea.w	$46(a1),a1
		move.w	a1,$46(a0)
		move.w	$14(a1),$14(a0)
		move.w	#-$60,d0
		btst	#0,4(a1)
		beq.s	loc_689EC
		neg.w	d0
		bset	#0,4(a0)

loc_689EC:
		move.w	$10(a1),d1
		add.w	d0,d1
		move.w	d1,$10(a0)
		rts
; ---------------------------------------------------------------------------

loc_689F8:
		jsr	Animate_RawMultiDelay.w
		tst.w	d2
		beq.s	locret_68A16
		bmi.s	locret_68A16
		move.w	word_68A18(pc,d0.w),d0
		btst	#0,4(a0)
		bne.s	loc_68A12
		neg.w	d0

loc_68A12:
		add.w	d0,$10(a0)

locret_68A16:

		rts
; ---------------------------------------------------------------------------
word_68A18:	dc.w 0
		dc.w 0
		dc.w 0
		dc.w $10
		dc.w 8
		dc.w 8
; ---------------------------------------------------------------------------

Obj_AIZ_Miniboss:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_68A36(pc,d0.w),d1
		jsr	off_68A36(pc,d1.w)
		bra.w	loc_68F62
; ---------------------------------------------------------------------------
off_68A36:	dc.w loc_68A46-off_68A36

		dc.w loc_68A6E-off_68A36
		dc.w loc_68574-off_68A36
		dc.w loc_68ABA-off_68A36
		dc.w loc_685FC-off_68A36
		dc.w loc_68B1C-off_68A36
		dc.w loc_68B68-off_68A36
		dc.w loc_68BBC-off_68A36
; ---------------------------------------------------------------------------

loc_68A46:
		lea	ObjDat3_68FFE(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.b	#6,$29(a0)
		st	Boss_flag.w
	;	move.b	#2,5(a0)
		moveq	#$5A,d0
		jsr	Load_PLC.w
		lea	Pal_AIZMiniboss(pc),a1
		jmp	PalLoad_Line1.w
; ---------------------------------------------------------------------------

loc_68A6E:
		move.w	(Camera_X_pos).w,d0
		move.w	#$10E0,d5

loc_68A82:
		cmp.w	d5,d0
		bhs.s	loc_68A88
		rts
; ---------------------------------------------------------------------------

loc_68A88:
		btst	#5,OptionsBits.w	; NAT: Check if bosses enabled
		bne.s	.enabled		; if so, bruh
		lea	.scrn(pc),a1		; else, enable screen lock and end of level
		jmp	Boss_Force_End_2

.scrn		dc.w $10E0, $10E0, $2A8, $2A8

.enabled	st	BossHitMode.w		; NAT: Enable hit mode
		clr.w	BossHitsP1.w		; clear hits count

		move.l	#loc_68A94,$34(a0)
		bra.w	loc_68556
; ---------------------------------------------------------------------------

loc_68A94:
		move.l	#loc_68ACC,$34(a0)
		move.b	#6,5(a0)
		bsr.w	sub_6859C
		lea	ChildObjDat_6905C(pc),a2
		jsr	CreateChild1_Normal.w
		lea	ChildObjDat_69086(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_68ABA:
		jsr	MoveSprite2.w
		jsr	Obj_Wait.w
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------

loc_68ACC:

		move.l	#loc_68ADE,$34(a0)
		move.w	#$14,$2E(a0)
		bra.w	loc_685D8
; ---------------------------------------------------------------------------

loc_68ADE:
		move.l	#loc_68AFE,$34(a0)
		move.w	#$1E,$2E(a0)
;		cmpi.b	#2,(Player_1+character_id).w
;		bne.w	locret_68572
;		bset	#1,$38(a0)
		rts
; ---------------------------------------------------------------------------

loc_68AFE:
		move.b	#$A,5(a0)
		move.b	#8,$39(a0)
		moveq	#$4F,d0
		jsr	Play_Sound_2.w
		lea	Child1_AIZ_MinibossFlames(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_68B1C:
		jsr	Swing_UpAndDown_Count.w
		beq.s	loc_68B28
		tst.w	d1
		bmi.s	loc_68B34

loc_68B28:
		jsr	MoveSprite2.w
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------

loc_68B34:

		move.b	#6,5(a0)
		move.w	#$5F,$2E(a0)
		move.l	#loc_68B74,$34(a0)
		move.w	#-$100,d0
		bchg	#2,$38(a0)
		beq.s	loc_68B5E
		neg.w	d0
		move.l	#loc_68ACC,$34(a0)

loc_68B5E:
		move.w	d0,$1A(a0)
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------

loc_68B68:
		jsr	Obj_Wait.w
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------

loc_68B74:
		move.l	#loc_68B92,$34(a0)

loc_68B7C:
		move.b	#$C,5(a0)
		clr.w	$18(a0)
		clr.w	$1A(a0)
		move.w	#$10,$2E(a0)
		rts
; ---------------------------------------------------------------------------

loc_68B92:
		move.b	#$E,5(a0)
		move.b	#4,$39(a0)
		move.l	#loc_68BDC,$34(a0)
		move.w	#$100,d0
		bchg	#3,$38(a0)
		bne.s	loc_68BB4
		neg.w	d0

loc_68BB4:
		move.w	d0,$18(a0)
		jmp	Swing_Setup1.w
; ---------------------------------------------------------------------------

loc_68BBC:
		jsr	Swing_UpAndDown_Count.w
		bne.s	loc_68BD0
		jsr	MoveSprite2.w
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------

loc_68BD0:
		movea.l	$34(a0),a1
		jsr	(a1)
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------

loc_68BDC:
		move.b	#4,$39(a0)
		move.l	#loc_68BF6,$34(a0)
		bchg	#0,4(a0)
		jmp	MoveSprite2.w
; ---------------------------------------------------------------------------

loc_68BF6:
		move.l	#loc_68B34,$34(a0)
		bra.w	loc_68B7C
; ---------------------------------------------------------------------------

loc_68C02:
		jsr	Obj_EndSignControl_HitHUD		; NAT: sex!
		lea	ChildObjDat_6910C(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_68C12:

		jsr	Refresh_ChildPositionAdjusted.w
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	word_68C2C(pc,d0.w),d1
		jsr	word_68C2C(pc,d1.w)
		jmp	Child_Draw_Sprite2.w
; ---------------------------------------------------------------------------
word_68C2C:	dc.w loc_68754-word_68C2C

		dc.w loc_68C38-word_68C2C
		dc.w loc_68574-word_68C2C
		dc.w loc_6879C-word_68C2C
		dc.w loc_6879C-word_68C2C
		dc.w locret_68572-word_68C2C
; ---------------------------------------------------------------------------

loc_68C38:
		movea.w	$46(a0),a1
		btst	#1,$38(a1)
		bne.s	loc_68C46
		rts
; ---------------------------------------------------------------------------

loc_68C46:
		move.b	#4,5(a0)
		move.l	#loc_68C58,$34(a0)
		bra.w	loc_68EC0
; ---------------------------------------------------------------------------

loc_68C58:
		move.l	#loc_68C64,$34(a0)
		bra.w	loc_6878C
; ---------------------------------------------------------------------------

loc_68C64:
		move.b	#8,5(a0)
		move.l	#loc_68C84,$34(a0)
		move.l	#byte_69136,$30(a0)
		lea	ChildObjDat_690A8(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_68C84:
		move.b	#2,5(a0)
		movea.w	$46(a0),a1
		bclr	#1,$38(a1)
		rts
; ---------------------------------------------------------------------------

loc_68C96:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_68CC6(pc,d0.w),d1
		jsr	off_68CC6(pc,d1.w)
		movea.w	$46(a0),a1
		movea.w	$46(a1),a1
		btst	#7,$2A(a1)
		bne.s	loc_68CC0
		jsr	Add_SpriteToCollisionResponseList.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_68CC0:
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------
off_68CC6:	dc.w loc_68CD0-off_68CC6

		dc.w loc_68CF4-off_68CC6
		dc.w loc_68574-off_68CC6
		dc.w loc_68D42-off_68CC6
		dc.w loc_68D5E-off_68CC6
; ---------------------------------------------------------------------------

loc_68CD0:
		bsr.w	sub_6885A
		movea.w	$46(a0),a1
		cmpi.l	#loc_6872C,(a1)
		bne.s	loc_68CE4
		clr.b	$28(a0)

loc_68CE4:
		move.l	#loc_68D06,$34(a0)
		move.b	#8,$1E(a0)
		rts
; ---------------------------------------------------------------------------

loc_68CF4:
		jsr	Animate_Raw.w
		jsr	MoveSprite2.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_68D06:
		move.b	#4,5(a0)
		move.w	#8,$2E(a0)
		move.l	#loc_68D1C,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_68D1C:
		move.b	#6,5(a0)
		move.l	#loc_68D48,$34(a0)
		bset	#1,4(a0)
		bsr.w	sub_68ED4
		move.w	(Camera_Y_pos).w,d0
		subi.w	#$20,d0
		move.w	d0,$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_68D42:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_68D48:
		move.b	#8,5(a0)
		move.w	#prio(1),8(a0)
		move.l	#loc_68D70,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_68D5E:
		jsr	Animate_Raw.w
		jsr	MoveSprite2.w
		jmp	ObjHitFloor_DoRoutine.w
; ---------------------------------------------------------------------------

loc_68D70:
		moveq	#$4E,d0
		jsr	Play_Sound_2.w
		lea	ChildObjDat_690D8(pc),a2
		jsr	CreateChild1_Normal.w
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------

loc_68D88:

		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_68D96(pc,d0.w),d1
		jmp	off_68D96(pc,d1.w)
; ---------------------------------------------------------------------------
off_68D96:	dc.w loc_68D9C-off_68D96

		dc.w loc_68DD8-off_68D96
		dc.w loc_68DEE-off_68D96
; ---------------------------------------------------------------------------

loc_68D9C:

		lea	ObjDat3_69032(pc),a1
		jsr	SetUp_ObjAttributes.w
		cmp.b	#6,PlayMode.w		; NAT: Check if minigame
		beq.s	.mini			; if so, branch
		tst.b	Current_zone.w
		beq.s	loc_68DB4
.mini		move.w	#$500,$A(a0)
		clr.b	$28(a0)			; NAT: Clear collision

loc_68DB4:
		movea.w	$46(a0),a1
		tst.b	$28(a1)
		bne.s	loc_68DC2
		clr.b	$28(a0)

loc_68DC2:
		move.l	#AniRaw_BossExplosion,$30(a0)
		move.l	#loc_68DDE,$34(a0)
		moveq	#$C,d1
		bra.w	loc_68928
; ---------------------------------------------------------------------------

loc_68DD8:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_68DDE:
		move.b	#4,5(a0)
		move.l	#Go_Delete_Sprite,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_68DEE:
		jsr	Animate_RawMultiDelay.w
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------

loc_68DFA:
		lea	ObjDat3_6904A(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_68E7E,(a0)
		move.l	#loc_68E84,$34(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	(Camera_X_pos).w,d1
		move.w	word_68E48(pc,d0.w),d2
		add.w	d2,d1
		move.w	d1,$10(a0)
		move.w	(Camera_Y_pos).w,d1
		move.w	word_68E54(pc,d0.w),d2
		move.w	d2,$14(a0)
		move.w	byte_68E60(pc,d0.w),$18(a0)
		move.w	byte_68E60(pc,d0.w),$2E(a0)
		lsr.w	#1,d0
		move.b	byte_68E78(pc,d0.w),$22(a0)
		rts
; ---------------------------------------------------------------------------
word_68E48:	dc.w $FFE0
		dc.w $FF98
		dc.w $FFF0
		dc.w $FFA8
		dc.w $FFF8
		dc.w $FFB0
word_68E54:	dc.w $310
		dc.w $310
		dc.w $31C
		dc.w $31C
		dc.w $328
		dc.w $328
byte_68E60:	dc.b 2
		dc.b 0
		dc.b 2
		dc.b 0
		dc.b 1
		dc.b $80
		dc.b 1
		dc.b $80
		dc.b 1
		dc.b 0
		dc.b 1
		dc.b 0
		dc.b 0
		dc.b 0
		dc.b 0
		dc.b 0
		dc.b 0
		dc.b 0
		dc.b 0
		dc.b 0
		dc.b 0
		dc.b 0
		dc.b 0
		dc.b 0
byte_68E78:	dc.b 0
		dc.b 0
		dc.b 1
		dc.b 1
		dc.b 2
		dc.b 2
; ---------------------------------------------------------------------------

loc_68E7E:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_68E84:
		move.l	#loc_68E8C,(a0)
		rts
; ---------------------------------------------------------------------------

loc_68E8C:
		jsr	MoveSprite2.w
		jmp	Child_Draw_Sprite2.w
; ---------------------------------------------------------------------------

loc_68E98:

		lea	word_69056(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#Obj_FlickerMove,(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		lsr.w	#1,d0
		addi.b	#$E,d0
		move.b	d0,$22(a0)
		moveq	#8,d0
		jmp	Set_IndexedVelocity.w
; ---------------------------------------------------------------------------

loc_68EC0:

		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	word_68ECE(pc,d0.w),$2E(a0)
		rts
; ---------------------------------------------------------------------------
word_68ECE:	dc.w 0
		dc.w $10
		dc.w $20

; =============== S U B R O U T I N E =======================================


sub_68ED4:
		movea.w	$46(a0),a1
		moveq	#0,d0
		move.b	$2C(a1),d0
		move.w	word_68F28(pc,d0.w),$2E(a0)
; End of function sub_68ED4


; =============== S U B R O U T I N E =======================================


sub_68EE4:
		lsr.w	#1,d0
		move.b	$39(a1),d1
		addq.b	#4,d1
		move.b	d1,$39(a1)
		andi.w	#$C,d1
		add.w	d1,d0
		lea	byte_68F2E(pc),a2
		lea	word_68F4E(pc),a3
		btst	#0,4(a1)
		beq.s	loc_68F0E
		lea	byte_68F3E(pc),a2
		lea	word_68F58(pc),a3

loc_68F0E:
		move.b	(a2,d0.w),d0
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		add.w	(Camera_X_pos).w,d0
		move.w	d0,$10(a0)
		move.w	#$400,$1A(a0)
		rts
; End of function sub_68EE4

; ---------------------------------------------------------------------------
word_68F28:	dc.w 0
		dc.w $20
		dc.w $40
byte_68F2E:	dc.b 2
		dc.b 3
		dc.b 4
		dc.b 0
		dc.b 0
		dc.b 2
		dc.b 4
		dc.b 0
		dc.b 1
		dc.b 3
		dc.b 4
		dc.b 0
		dc.b 0
		dc.b 1
		dc.b 4
		dc.b 0
byte_68F3E:	dc.b 3
		dc.b 2
		dc.b 0
		dc.b 0
		dc.b 4
		dc.b 3
		dc.b 1
		dc.b 0
		dc.b 4
		dc.b 2
		dc.b 0
		dc.b 0
		dc.b 3
		dc.b 2
		dc.b 1
		dc.b 0
word_68F4E:	dc.w $24
		dc.w $4C
		dc.w $74
		dc.w $9C
		dc.w $C4
word_68F58:	dc.w $7C
		dc.w $A4
		dc.w $CC
		dc.w $F4
		dc.w $11C
; ---------------------------------------------------------------------------

loc_68F62:

		tst.b	$28(a0)
		bne.s	locret_68FB4
		tst.b	$29(a0)
		beq.s	loc_68FB6
		tst.b	$20(a0)
		bne.s	loc_68F88
		move.b	#$20,$20(a0)
		moveq	#$6E,d0
		jsr	Play_Sound_2.w
		bset	#6,$2A(a0)

loc_68F88:
		moveq	#0,d0
		btst	#0,$20(a0)
		bne.s	loc_68F94
		addq.w	#8,d0

loc_68F94:
		lea	word_68FE6(pc),a1
		lea	word_68FEE(pc,d0.w),a2
		jsr	CopyWordData_4.w
		subq.b	#1,$20(a0)
		bne.s	locret_68FB4
		bclr	#6,$2A(a0)
		move.b	$25(a0),$28(a0)

locret_68FB4:

		rts
; ---------------------------------------------------------------------------

loc_68FB6:
		move.l	#Wait_FadeToLevelMusic,(a0)
		move.l	#loc_68C02,$34(a0)
		clr.w	$18(a0)
		clr.w	$1A(a0)
		lea	Child6_CreateBossExplosion.w,a2
		jsr	CreateChild6_Simple.w
		bne.s	loc_68FE0
		move.b	#$10,$2C(a1)

loc_68FE0:
		jmp	BossDefeated_StopTimer.w
; ---------------------------------------------------------------------------
word_68FE6:	dc.w  $FC2E, $FC34, $FC36, $FC3C
word_68FEE:	dc.w   $644,  $240,   $20,  $644
		dc.w   $888,  $AAA,  $EEE,  $AAA
ObjDat3_68FFE:	dc.l Map_AIZMiniboss

		dc.w $A41A
		dc.w prio(4)
		dc.b $20
		dc.b $20
		dc.b 0
		dc.b $F
word_6900A:	dc.w $841A
		dc.w prio(3)
		dc.b $28
		dc.b $10
		dc.b 2
		dc.b $9C
word_69012:	dc.w $A41A
		dc.w prio(4)
		dc.b 4
		dc.b 8
		dc.b 6
		dc.b 0
word_6901A:	dc.w $A41A
		dc.w prio(5)
		dc.b 8
		dc.b 8
		dc.b 3
		dc.b 0
byte_69022:	dc.b 4
		dc.b $1A
		dc.w prio(4)
		dc.b 8
		dc.b 8
		dc.b 7
		dc.b 0
word_6902A:	dc.w $41A
		dc.w prio(5)
		dc.b 8
		dc.b $10
		dc.b $C
		dc.b $98
ObjDat3_69032:	dc.l Map_BossExplosion
		dc.w $4D2
		dc.w prio(1)
		dc.b $C
		dc.b $C
		dc.b 0
		dc.b $97
ObjDat3_6903E:	dc.l Map_AIZMinibossFlame
		dc.w $8482
		dc.w prio(2)
		dc.b $10
		dc.b $10
		dc.b 0
		dc.b $8B
ObjDat3_6904A:	dc.l Map_AIZMinibossSmall
		dc.w $2474
		dc.w prio(7)
		dc.b $10
		dc.b $10
		dc.b 0
		dc.b 0
word_69056:	dc.w prio(4)
		dc.b $10
		dc.b $14
		dc.b 0
		dc.b 0
ChildObjDat_6905C:dc.w 1

		dc.l loc_686BE
		dc.w $20
		dc.l loc_6870A
		dc.w $DC08
ChildObjDat_6906A:dc.w 5
		dc.l loc_68DFA
		dc.w 0
ChildObjDat_69072:dc.w 2
		dc.l loc_6872C
		dc.w $E0
		dc.l loc_6872C
		dc.w $9E4
		dc.l loc_6872C
		dc.w $12E8
ChildObjDat_69086:dc.w 2
		dc.l loc_68C12
		dc.w $E0
		dc.l loc_68C12
		dc.w $9E4
		dc.l loc_68C12
		dc.w $12E8
ChildObjDat_6909A:dc.w 1
		dc.l loc_6880A
		dc.w 4
		dc.l loc_68844
		dc.w 4
ChildObjDat_690A8:dc.w 1

		dc.l loc_6880A
		dc.w 4
		dc.l loc_68C96
		dc.w 4
Child1_AIZ_MinibossFlames:dc.w 3

		dc.l Obj_AIZMiniboss_Flame
		dc.w $9C04
		dc.l Obj_AIZMiniboss_Flame
		dc.w $AC04
		dc.l Obj_AIZMiniboss_Flame
		dc.w $BC04
		dc.l Obj_AIZMiniboss_Flame
		dc.w $D403
ChildObjDat_690D0:dc.w 0
		dc.l loc_68994
		dc.w 0
ChildObjDat_690D8:dc.w 6

		dc.l loc_68D88
		dc.w $DC
		dc.l loc_68D88
		dc.w $8E4
		dc.l loc_68D88
		dc.w $F8E4
		dc.l loc_68D88
		dc.w $4EC
		dc.l loc_68D88
		dc.w $FCEC
		dc.l loc_68D88
		dc.w $4FC
		dc.l loc_68D88
		dc.w $FCFC
ChildObjDat_69104:dc.w 0
		dc.l Obj_BossExplosionSpecial
		dc.w 0
ChildObjDat_6910C:dc.w 3
		dc.l loc_68E98
		dc.w $F0F8
		dc.l loc_68E98
		dc.w $CF0
		dc.l loc_68E98
		dc.w $F014
		dc.l loc_68E98
		dc.w $100C
byte_69126:	dc.b 1
		dc.b 1
		dc.b 2
		dc.b $FC
		dc.b 7
		dc.b 3
		dc.b 4
		dc.b 5
		dc.b $F4
byte_6912F:	dc.b 3
		dc.b 5
		dc.b 4
		dc.b 5
		dc.b 5
		dc.b $17
		dc.b $F4
byte_69136:	dc.b 5

		dc.b $17
		dc.b 5
		dc.b $17
		dc.b 4
		dc.b 5
		dc.b 3
		dc.b 5
		dc.b $F4
byte_6913F:	dc.b 7
		dc.b 1
		dc.b 7
		dc.b 1
		dc.b 8
		dc.b 1
		dc.b 9
		dc.b 3
		dc.b $A
		dc.b 3
		dc.b $B
		dc.b 3
		dc.b $F4
byte_6914C:	dc.b 1
		dc.b $C
		dc.b $D
		dc.b $FC
		dc.b 0
		dc.b 0
		dc.b 0
		dc.b 0
		dc.b 1
		dc.b 1
		dc.b 2
		dc.b 2
		dc.b 3
		dc.b 3
		dc.b 4
		dc.b 4
		dc.b 5
		dc.b 4
		dc.b $F4
byte_6915F:	dc.b 0
		dc.b 1
		dc.b 0
		dc.b 1
		dc.b $F4
byte_69164:	dc.b 2
		dc.b 1
		dc.b 2
		dc.b 1
		dc.b 3
		dc.b 2
		dc.b 4
		dc.b 4
		dc.b 5
		dc.b 1
		dc.b $F4
byte_6916F:	dc.b 0
		dc.b 1
		dc.b 0
		dc.b 1
		dc.b 1
		dc.b 2
		dc.b 2
		dc.b 2
		dc.b 3
		dc.b 4
		dc.b 4
		dc.b 4
		dc.b $F4
Pal_AIZMiniboss:	binclude "Levels/AIZ/Palettes/Miniboss.bin"
	even


AIZBossSonicDat:dc.w $4380
		dc.w $43E0
		dc.w $15A

AIZBossKnuxDat:	dc.w $4100
		dc.w $4160
		dc.w $5DA
; ---------------------------------------------------------------------------

Obj_AIZ_EndBoss:
		move.l	#Obj_AIZ_EndBossWait,(a0)
		lea	AIZBossSonicDat(pc),a1
		cmpi.b	#2,(Player_1+character_id).w
		bne.s	loc_691BE
		lea	AIZBossKnuxDat(pc),a1

loc_691BE:
		lea	(__u_FA82).w,a2
		move.l	(a1)+,(a2)+
		move.w	(a1)+,(a2)+			; Load relative positional data depending on the character

Obj_AIZ_EndBossWait:
		move.w	(__u_FA82).w,d0
		cmp.w	(Camera_X_pos).w,d0
		bls.s	loc_691D4			; Only branch if Sonic has reached the boss area
		rts
; ---------------------------------------------------------------------------

loc_691D4:
		btst	#5,OptionsBits.w		; NAT: Check if bosses are on
		bne.s	.enabled			; if are, branch

		lea	.screen(pc),a1			; else, lock screen
		jmp	Boss_Force_End_2		;

.screen		dc.w $4440, $4440
		dc.w $15A, $15A

.enabled	move.w	d0,(Camera_min_X_pos).w
		move.w	d0,(Camera_max_X_pos).w

		move.l	#Obj_Wait,(a0)			; Set up object to wait $78 frames
		move.w	#$78,$2E(a0)
		move.l	#Obj_AIZ_EndBossMusic,$34(a0)
		moveq	#-$1F,d0
		jsr	Play_Sound.w

		st	BossHitMode.w		; NAT: Enable hit mode
		clr.w	BossHitsP1.w		; clear hits count
		st	Boss_flag.w		; Lock the screen
		clr.b	(__u_FAA2).w
		clr.b	(__u_FAA3).w
		moveq	#$6B,d0
		jsr	Load_PLC.w			; Load Robotnik's ship and explosions
		lea	(ArtKosM_AIZEndBoss).l,a1
		move.w	#$3000,d2
		jsr	Queue_Kos_Module.w		; Load the AIZ boss ship
		lea	Pal_AIZEndBoss(pc),a1
		jmp	PalLoad_Line1.w		; Load the AIZ boss palette
; ---------------------------------------------------------------------------

Obj_AIZ_EndBossMusic:
		clr.l	RNG_Seed.w			; NAT: Make sure the boss has the right pattern
		move.l	#Obj_AIZ_EndBossMain,(a0)
		moveq	#Mus_Boss,d0			; Play the boss music
		move.b	d0,(Level_music+$1).w
		jmp	Play_Sound.w
; ---------------------------------------------------------------------------

Obj_AIZ_EndBossMain:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	AIZ_EndBossIndex(pc,d0.w),d1
		jsr	AIZ_EndBossIndex(pc,d1.w)
		btst	#6,$38(a0)
		bne.w	locret_69366			; Only draw and touch when boss has revealed itself
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------
AIZ_EndBossIndex:	dc.w Obj_AIZ_EndBossInit-AIZ_EndBossIndex

		dc.w loc_692E2-AIZ_EndBossIndex
		dc.w loc_6932C-AIZ_EndBossIndex
		dc.w loc_69368-AIZ_EndBossIndex
		dc.w loc_693F0-AIZ_EndBossIndex
		dc.w loc_692E2-AIZ_EndBossIndex
		dc.w loc_69456-AIZ_EndBossIndex
		dc.w loc_6946A-AIZ_EndBossIndex
; ---------------------------------------------------------------------------

Obj_AIZ_EndBossInit:
		lea	ObjDat_AIZEndBoss(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.b	#8,$29(a0)			; 8 hits defeats it
		bset	#0,4(a0)
		lea	(word_6818C).l,a2
		jsr	CreateChild1_Normal.w
		bne.s	loc_69296
		move.b	#8,$2C(a1)

loc_69296:
		lea	ChildObjDat_69D18(pc),a2
		jsr	CreateChild1_Normal.w

loc_692A0:
		move.b	#2,5(a0)
		moveq	#$4B,d0
		jsr	Play_Sound_2.w
		ori.b	#$48,$38(a0)
		move.l	#loc_69302,$34(a0)
		clr.b	$28(a0)
		bsr.w	sub_69C94
		bclr	#0,4(a0)
		cmpi.w	#8,$26(a0)
		bhs.s	loc_692D8
		bset	#0,4(a0)

loc_692D8:
		lea	ChildObjDat_69D2E(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_692E2:
		lea	byte_69D98(pc),a1
		jsr	Animate_RawNoSSTMultiDelay.w
		bclr	#6,$38(a0)
		cmpi.b	#$2B,$22(a0)
		bne.s	locret_69300
		bset	#6,$38(a0)

locret_69300:
		rts
; ---------------------------------------------------------------------------

loc_69302:
		move.b	#4,5(a0)
		bclr	#6,$38(a0)
		bset	#7,$A(a0)
		move.b	#$16,$28(a0)
		move.l	#loc_6933A,$34(a0)
		lea	ChildObjDat_69D36(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_6932C:
		lea	byte_69DB3(pc),a1
		jsr	Animate_RawNoSSTMultiDelay.w
		bra.w	sub_69BE2
; ---------------------------------------------------------------------------

loc_6933A:
		move.b	#6,5(a0)
		move.w	#$1F,$2E(a0)
		move.l	#loc_6937E,$34(a0)
		move.w	#$C0,d0
		move.w	d0,$3E(a0)
		move.w	d0,$1A(a0)
		move.w	#$10,$40(a0)
		bclr	#0,$38(a0)

locret_69366:

		rts
; ---------------------------------------------------------------------------

loc_69368:
		jsr	Swing_UpAndDown.w
		jsr	MoveSprite2.w
		jsr	Obj_Wait.w
		bra.w	sub_69BE2
; ---------------------------------------------------------------------------

loc_6937E:
		bset	#1,$38(a0)
		btst	#7,$38(a0)
		bne.s	loc_693A2
		move.w	#4,$26(a0)
		move.w	#$2F,$2E(a0)
		move.l	#loc_693DC,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_693A2:
		move.w	#$BF,d0
	;	cmpi.b	#2,(Player_1+character_id).w
	;	bne.s	loc_693B2
	;	move.w	#$FF,d0

loc_693B2:
		move.w	d0,$2E(a0)
		move.l	#loc_693C0,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_693C0:

		move.b	#8,5(a0)
		move.w	#$3F,$2E(a0)
		move.l	#loc_693FA,$34(a0)
		andi.b	#-$B,$38(a0)
		rts
; ---------------------------------------------------------------------------

loc_693DC:
		st	(__u_FAA2).w
		move.w	#$8F,$2E(a0)
		move.l	#loc_693C0,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_693F0:
		bsr.w	sub_69BE2
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_693FA:
		move.b	#$A,5(a0)
		moveq	#$4B,d0
		jsr	Play_Sound_2.w
		move.l	#loc_6942A,$34(a0)
		clr.b	$28(a0)
		bsr.w	sub_69C94
		lea	ChildObjDat_69D2E(pc),a2
		jsr	CreateChild1_Normal.w
		move.b	#2,$2C(a1)
		rts
; ---------------------------------------------------------------------------

loc_6942A:
		move.b	#$C,5(a0)
		bset	#7,$38(a0)
		beq.s	loc_6943E
		move.b	#$E,5(a0)

loc_6943E:
		move.l	#loc_69476,$34(a0)
		bclr	#7,$A(a0)
		move.b	#0,$22(a0)
		bra.w	loc_69A66
; ---------------------------------------------------------------------------

loc_69456:
		move.w	(Camera_min_X_pos).w,d0
		addq.w	#2,d0
		cmp.w	(__u_FA84).w,d0
		bhi.s	loc_69466
		move.w	d0,(Camera_min_X_pos).w

loc_69466:
		addq.w	#2,(Camera_max_X_pos).w

loc_6946A:
		jsr	MoveSprite2.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_69476:
		clr.w	$18(a0)
		clr.w	$1A(a0)
		bra.w	loc_692A0
; ---------------------------------------------------------------------------

loc_69482:
		move.l	#loc_694A4,$34(a0)
		st	(__u_FAA3).w
		move.l	#Obj_Wait,(a0)
		bset	#4,$38(a0)
		lea	ChildObjDat_69D66(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_694A4:
		move.l	#loc_694D4,(a0)

loc_694AA:

		st	(End_Of_Level_Flag).w
		clr.b	(Boss_flag).w
		lea	(PLC_CNZ2KnuxEnd).l,a1
		jsr	Load_PLC_Raw.w
		lea	ChildObjDat_69D8C(pc),a2
		jsr	CreateChild6_Simple.w
		bset	#1,4(a1)
		jmp	(PLCLoad_AnimalsAndExplosion).l
; ---------------------------------------------------------------------------

loc_694D4:
		tst.b	(End_Of_Level_Flag).w
		bne.w	locret_69366
		move.l	#loc_69526,(a0)
		jsr	Restore_PlayerControl.w
		lea	(Player_2).w,a1
		jsr	Restore_PlayerControl2.w
		jsr	Obj_PlayLevelMusic.w
		st	(Ctrl_1_locked).w
		clr.w	(Ctrl_1_logical).w
		jsr	Create_New_Sprite.w
		bne.s	loc_6950E
		move.l	#loc_863C0,(a1)

loc_6950E:
		move.w	(__u_FA84).w,d0
		addi.w	#$158,d0
		move.w	d0,(__u_FA92).w
		lea	Child6_IncLevX.w,a2
		jmp	CreateChild6_Simple.w
; ---------------------------------------------------------------------------

loc_69526:
		move.b	#5,(Flying_picking_Sonic_timer).w
		lea	(Player_1).w,a1
		move.w	(__u_FA84).w,d0
		addi.w	#$1F8,d0
		cmp.w	$10(a1),d0
		bls.s	loc_69546
		move.w	#$808,(Ctrl_1_logical).w
		rts
; ---------------------------------------------------------------------------

loc_69546:
		jsr	Stop_Object.w

		cmpi.b	#2,(Player_1+character_id).w
		beq.s	loc_6957A
		move.l	#loc_69588,(a0)
		jsr	Create_New_Sprite.w
		bne.s	loc_6956E
		move.l	#Obj_CutsceneKnuckles,(a1)
		move.b	#4,$2C(a1)

loc_6956E:
		lea	(PLC_83D6C).l,a1
		jmp	Load_PLC_Raw.w
; ---------------------------------------------------------------------------

loc_6957A:
		move.l	#loc_695CE,(a0)
		move.w	#$2020,(Ctrl_1_logical).w
		rts
; ---------------------------------------------------------------------------

loc_69588:
		move.b	#5,(Flying_picking_Sonic_timer).w
		tst.b	(Ctrl_1_locked).w
		beq.s	loc_695A0
		move.w	#$101,(Ctrl_1_logical).w
		clr.w	(Ctrl_2_logical).w
		rts
; ---------------------------------------------------------------------------

loc_695A0:
		move.l	#loc_695A8,(a0)
		rts
; ---------------------------------------------------------------------------

loc_695A8:
		move.b	#5,(Flying_picking_Sonic_timer).w

loc_695AE:
		move.w	(__u_FA86).w,d0
		addi.w	#$1E6,d0
		cmp.w	(Player_1+y_pos).w,d0
		bhi.w	locret_69366
		move.w	#$100,d0
		jsr	StartNewLevel.w
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_695CE:
		move.w	#$2000,(Ctrl_1_logical).w
		lea	(Player_1).w,a1
		bset	#7,$A(a1)
		tst.w	$1A(a1)
		bmi.w	locret_69366
		move.l	#loc_69616,(a0)
		move.b	#-$7D,$2E(a1)
		move.b	#-$35,$22(a1)
		jsr	Player_Load_PLC.w
		move.w	#$1000,d0
		move.w	d0,(__u_FA98).w
		move.w	d0,(Camera_target_max_Y_pos).w
		lea	Child6_IncLevY.w,a2
		jmp	CreateChild6_Simple.w
; ---------------------------------------------------------------------------

loc_69616:
		lea	(Player_1).w,a1
		jsr	(MoveSprite_NormGravity).l
		bra.s	loc_695AE
; ---------------------------------------------------------------------------

loc_69622:

		jsr	Refresh_ChildPositionAdjusted.w
		bsr.w	Child_SyncDraw
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_6964E(pc,d0.w),d1
		jsr	off_6964E(pc,d1.w)
		btst	#6,$38(a0)
		bne.w	locret_69366
		bsr.w	sub_69CA4
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
off_6964E:	dc.w loc_6965A-off_6964E

		dc.w loc_69682-off_6964E
		dc.w loc_696B4-off_6964E
		dc.w loc_696CA-off_6964E
		dc.w loc_696E2-off_6964E
		dc.w loc_69704-off_6964E
; ---------------------------------------------------------------------------

loc_6965A:
		lea	word_69CE0(pc),a1
		jsr	SetUp_ObjAttributes3.w
		moveq	#0,d0
		tst.b	$2C(a0)
		beq.s	loc_69678
		move.b	#$2A,$22(a0)
		move.w	#prio(5),8(a0)

loc_69678:
		lea	ChildObjDat_69D26(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_69682:
		movea.w	$46(a0),a1
		btst	#3,$38(a1)
		bne.s	loc_69690
		rts
; ---------------------------------------------------------------------------

loc_69690:
		tst.b	$2C(a0)
		bne.s	loc_696AC
		move.b	#4,5(a0)
		move.w	#4,$2E(a0)
		move.l	#loc_696BA,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_696AC:
		move.b	#8,5(a0)
		rts
; ---------------------------------------------------------------------------

loc_696B4:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_696BA:
		move.b	#6,5(a0)
		move.l	#loc_696DA,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_696CA:
		bclr	#6,$38(a0)
		lea	byte_69DBE(pc),a1
		jmp	Animate_RawNoSSTMultiDelay.w
; ---------------------------------------------------------------------------

loc_696DA:
		move.b	#8,5(a0)
		rts
; ---------------------------------------------------------------------------

loc_696E2:
		movea.w	$46(a0),a1
		btst	#1,$38(a1)
		bne.s	loc_696F0
		rts
; ---------------------------------------------------------------------------

loc_696F0:
		move.b	#$A,5(a0)
		bset	#1,$38(a0)
		move.w	$26(a1),$26(a0)
		rts
; ---------------------------------------------------------------------------

loc_69704:
		movea.w	$46(a0),a1
		btst	#1,$38(a1)
		beq.s	loc_69712
		rts
; ---------------------------------------------------------------------------

loc_69712:
		move.b	#2,5(a0)
		bclr	#1,$38(a0)
		rts
; ---------------------------------------------------------------------------

loc_69720:
		move.l	#Obj_FlickerMove,(a0)
		move.b	#1,$22(a0)
		clr.b	$28(a0)
		moveq	#$C,d0
		jmp	Set_IndexedVelocity.w
; ---------------------------------------------------------------------------

loc_69738:
		bsr.w	Child_SyncDraw
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_69760(pc,d0.w),d1
		jsr	off_69760(pc,d1.w)
		jsr	Refresh_ChildPositionAdjusted.w
		btst	#6,$38(a0)
		bne.w	locret_69366
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------
off_69760:	dc.w loc_69768-off_69760

		dc.w loc_69774-off_69760
		dc.w loc_697BA-off_69760
		dc.w loc_6981E-off_69760
; ---------------------------------------------------------------------------

loc_69768:
		lea	word_69CE6(pc),a1
		jsr	SetUp_ObjAttributes3.w
		rts
; ---------------------------------------------------------------------------

loc_69774:
		movea.w	$46(a0),a1
		btst	#1,$38(a1)
		bne.s	loc_69782
		rts
; ---------------------------------------------------------------------------

loc_69782:
		move.b	#4,5(a0)
		move.b	#1,$23(a0)
		bset	#1,$38(a0)
		move.b	#1,$3A(a0)
		move.l	#loc_697D8,$34(a0)
		move.w	$26(a1),$26(a0)
		clr.w	$2E(a0)
		tst.b	$2C(a1)
		beq.s	locret_697B8
		move.w	#$4F,$2E(a0)

locret_697B8:
		rts
; ---------------------------------------------------------------------------

loc_697BA:
		subq.w	#1,$2E(a0)
		bpl.s	locret_697D6
		move.w	#3,$2E(a0)
		bsr.w	sub_69AD8
		subq.b	#1,$23(a0)
		bpl.s	locret_697D6
		movea.l	$34(a0),a1
		jsr	(a1)

locret_697D6:

		rts
; ---------------------------------------------------------------------------

loc_697D8:
		move.b	#6,5(a0)
		cmpi.b	#2,(Player_1+character_id).w
		beq.s	loc_69802

loc_697E6:
		movea.w	$46(a0),a1
		bclr	#1,$38(a1)
		move.w	#$5F,$2E(a0)
		move.l	#loc_69824,$34(a0)
		bra.w	loc_69B5E
; ---------------------------------------------------------------------------

loc_69802:
		subq.b	#1,$3A(a0)
		bmi.s	loc_697E6
		move.w	#$2F,$2E(a0)
		bra.w	loc_69B5E
; ---------------------------------------------------------------------------

loc_69812:
		move.b	#2,5(a0)
		clr.b	$39(a0)
		rts
; ---------------------------------------------------------------------------

loc_6981E:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_69824:
		move.b	#4,5(a0)
		move.b	#1,$23(a0)
		bclr	#1,$38(a0)
		clr.w	$2E(a0)
		move.l	#loc_69812,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_69844:

		lea	word_69CEC(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_6989E,(a0)
		bset	#4,$2B(a0)
		move.l	#loc_698BC,$34(a0)
		movea.w	$46(a0),a1
		movea.w	$46(a1),a2
		movea.w	$46(a2),a2
		move.w	a2,$44(a0)
		move.w	$26(a1),d0
		move.w	d0,$26(a0)
		move.l	off_6988E(pc,d0.w),$30(a0)
		cmpi.w	#8,d0
		bhs.s	locret_6988C
		bset	#0,4(a0)

locret_6988C:
		rts
; ---------------------------------------------------------------------------
off_6988E:	dc.l word_69DC9
		dc.l word_69DF3
		dc.l word_69DF3
		dc.l word_69DC9
; ---------------------------------------------------------------------------

loc_6989E:
		movea.w	$44(a0),a1
		btst	#7,$2A(a1)
		bne.s	loc_698C6
		jsr	Refresh_ChildPosition.w
		jsr	Animate_Raw.w
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------

loc_698BC:
		lea	ChildObjDat_69D56(pc),a2
		jsr	CreateChild1_Normal.w

loc_698C6:
		bset	#6,$38(a0)
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------

loc_698D2:
		lea	word_69CF2(pc),a1
		jsr	SetUp_ObjAttributes3.w
		bset	#4,$2B(a0)
		moveq	#$4D,d0
		jsr	Play_Sound_2.w
		move.b	#$C,$1E(a0)
		move.w	#$9F,$2E(a0)
		move.l	#loc_69908,(a0)
		move.l	#loc_69946,$34(a0)
		bra.w	loc_69B7A
; ---------------------------------------------------------------------------

loc_69908:
		tst.w	$18(a0)
		beq.s	loc_69914
		jsr	ObjHitFloor_DoRoutine.w

loc_69914:

		jsr	Animate_Raw.w
		jsr	MoveSprite2.w
		subq.w	#1,$2E(a0)
		bmi.s	loc_69940
		move.b	(V_int_run_count+3).w,d0
		andi.b	#3,d0
		bne.s	loc_6993A
		lea	ChildObjDat_69D5E(pc),a2
		jsr	CreateChild1_Normal.w

loc_6993A:
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------

loc_69940:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_69946:
		move.l	#loc_69914,(a0)
		move.l	#byte_69E29,$30(a0)
		clr.w	$1A(a0)
		rts
; ---------------------------------------------------------------------------

loc_6995A:
		lea	word_69CF8(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_6998A,(a0)
		move.l	#Go_Delete_Sprite,$34(a0)
		move.l	#byte_69E2F,$30(a0)
		tst.w	$18(a0)
		bne.s	locret_69988
		move.l	#byte_69E38,$30(a0)

locret_69988:
		rts
; ---------------------------------------------------------------------------

loc_6998A:
		jsr	Animate_RawMultiDelay.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_69996:
		lea	ObjDat_AIZEndBoss2(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_699B0,(a0)
		move.l	#Go_Delete_Sprite,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_699B0:
		lea	byte_69E41(pc),a1
		jsr	Animate_RawNoSSTMultiDelay.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_699C0:
		lea	word_69CFE(pc),a1
		jsr	SetUp_ObjAttributes2.w
		move.l	#loc_699EA,(a0)
		tst.b	$2C(a0)
		bne.s	loc_699E0
		move.l	#Go_Delete_Sprite,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_699E0:
		move.l	#loc_69A04,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_699EA:
		lea	byte_69E4A(pc),a1
		jsr	Animate_RawNoSSTMultiDelayFlipX.w
		cmpi.b	#$2B,$22(a0)
		beq.w	locret_69366
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_69A04:
		move.l	#loc_69A1A,(a0)
		move.w	#$800,$1A(a0)
		move.l	#Go_Delete_Sprite,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_69A1A:
		jsr	MoveSprite2.w
		lea	byte_69E65(pc),a1
		jsr	Animate_RawNoSSTMultiDelayFlipX.w
		cmpi.b	#$2B,$22(a0)
		beq.w	locret_69366
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_69A3A:

		lea	word_69D12(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#Obj_FlickerMove,(a0)
		move.b	$2C(a0),d0
		lsr.b	#1,d0
		addi.b	#$32,d0
		move.b	d0,$22(a0)
		moveq	#0,d0
		jsr	Set_IndexedVelocity.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_69A66:
		jsr	Random_Number.w
		andi.w	#$C,d0
		move.w	$26(a0),d1
		move.w	d0,$26(a0)
		cmp.w	d1,d0
		beq.s	loc_69A66
		lea	word_69AC8(pc,d0.w),a1
		moveq	#0,d2
		move.w	(__u_FA84).w,d2
		add.w	(a1)+,d2
		swap	d2
		sub.l	$10(a0),d2
		add.l	d2,d2
		swap	d2
		move.w	d2,$18(a0)
		moveq	#0,d3
		move.w	(__u_FA86).w,d3
		add.w	(a1)+,d3
		swap	d3
		sub.l	$14(a0),d3
		add.l	d3,d3
		swap	d3
		move.w	d3,$1A(a0)
		move.w	#$7F,$2E(a0)
		tst.w	d2
		beq.s	locret_69AC6
		bclr	#0,4(a0)
		tst.w	d2
		bmi.s	locret_69AC6
		bset	#0,4(a0)

locret_69AC6:

		rts
; ---------------------------------------------------------------------------
word_69AC8:	dc.w	$58,   $76
		dc.w	$A0,   $46
		dc.w   $160,   $46
		dc.w   $1A8,   $76

; =============== S U B R O U T I N E =======================================


sub_69AD8:
		move.w	$26(a0),d0
		moveq	#0,d1
		eori.w	#$C,d0
		beq.s	loc_69AEE
		cmpi.w	#$C,d0
		beq.s	loc_69AEE
		addi.w	#$10,d1

loc_69AEE:

		moveq	#0,d2
		move.b	$39(a0),d2
		add.w	d2,d1
		lea	byte_69B0E(pc,d1.w),a1
		move.b	(a1)+,$42(a0)
		move.b	(a1)+,$43(a0)
		move.b	(a1)+,$22(a0)
		addq.b	#4,d2
		move.b	d2,$39(a0)
		rts
; End of function sub_69AD8

; ---------------------------------------------------------------------------
byte_69B0E:	dc.b  $E8,   8,	  5,   0
		dc.b  $E8,   8,	  5,   0
		dc.b  $E4,   0,	  4,   0
		dc.b  $E4,   0,	  4,   0
		dc.b  $E8,   8,	  5,   0
		dc.b  $F0, $10,	  6,   0
		dc.b  $E8,   8,	  5,   0
		dc.b  $E4,   0,	  4,   0

; =============== S U B R O U T I N E =======================================


Child_SyncDraw:

		movea.w	$46(a0),a1
		btst	#6,$38(a1)
		bne.s	loc_69B56
		bclr	#6,$38(a0)
		bset	#7,$A(a0)
		btst	#7,$A(a1)
		bne.s	locret_69B54
		bclr	#7,$A(a0)

locret_69B54:
		rts
; ---------------------------------------------------------------------------

loc_69B56:
		bset	#6,$38(a0)
		rts
; End of function Child_SyncDraw

; ---------------------------------------------------------------------------

loc_69B5E:

		move.w	$26(a0),d0
		lsr.w	#1,d0
		move.w	off_69B72(pc,d0.w),d0
		lea	off_69B72(pc,d0.w),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------
off_69B72:	dc.w ChildObjDat_69D3E-off_69B72

		dc.w ChildObjDat_69D46-off_69B72
		dc.w ChildObjDat_69D46-off_69B72
		dc.w ChildObjDat_69D4E-off_69B72
; ---------------------------------------------------------------------------

loc_69B7A:
		movea.w	$46(a0),a1
		move.w	$26(a1),d0
		cmpi.w	#8,d0
		bhs.s	loc_69B8E
		bset	#0,4(a0)

loc_69B8E:
		move.l	off_69BB2(pc,d0.w),$30(a0)
		lea	word_69BC2(pc,d0.w),a1
		move.w	(a1)+,d1
		add.w	d1,$10(a0)
		move.w	(a1)+,d1
		add.w	d1,$14(a0)
		lea	word_69BD2(pc,d0.w),a1
		move.w	(a1)+,$18(a0)
		move.w	(a1)+,$1A(a0)
		rts
; ---------------------------------------------------------------------------
off_69BB2:	dc.l byte_69E1D
		dc.l byte_69E23
		dc.l byte_69E23
		dc.l byte_69E1D
word_69BC2:	dc.w	$14,   $14
		dc.w	  0,   $18
		dc.w	  0,   $18
		dc.w  $FFEC,   $14
word_69BD2:	dc.w   $300,  $300
		dc.w	  0,  $400
		dc.w	  0,  $400
		dc.w  $FD00,  $300

; =============== S U B R O U T I N E =======================================


sub_69BE2:

		tst.b	$28(a0)
		bne.s	locret_69C34
		tst.b	$29(a0)
		beq.s	loc_69C36
		tst.b	$20(a0)
		bne.s	loc_69C02
		move.b	#$20,$20(a0)
		moveq	#$6E,d0
		jsr	Play_Sound_2.w

loc_69C02:
		bset	#6,$2A(a0)
		moveq	#0,d0
		btst	#0,$20(a0)
		bne.s	loc_69C16
		addi.w	#$E,d0

loc_69C16:
		bsr.w	sub_69C5C
		subq.b	#1,$20(a0)
		bne.s	locret_69C34
		bclr	#6,$2A(a0)
		cmpi.b	#0,$22(a0)
		bne.s	locret_69C34
		move.b	$25(a0),$28(a0)

locret_69C34:

		rts
; ---------------------------------------------------------------------------

loc_69C36:
		move.l	#Wait_FadeToLevelMusic,(a0)
		bclr	#6,$38(a0)
		bset	#7,$A(a0)
		move.b	#0,$22(a0)
		move.l	#loc_69482,$34(a0)
		jmp	BossDefeated_StopTimer.w
; End of function sub_69BE2


; =============== S U B R O U T I N E =======================================


sub_69C5C:

		lea	word_69C6A(pc),a1
		lea	word_69C78(pc,d0.w),a2
		jmp	CopyWordData_7.w
; End of function sub_69C5C

; ---------------------------------------------------------------------------
word_69C6A:	dc.w $FC28
		dc.w $FC2E
		dc.w $FC32
		dc.w $FC34
		dc.w $FC36
		dc.w $FC3A
		dc.w $FC3C
word_69C78:	dc.w   $222,	 8,   $4C,     6,   $20,  $A24,	 $622,	$AAA,  $AAA,  $AAA,  $CCC,  $EEE,  $666,  $888

; =============== S U B R O U T I N E =======================================


sub_69C94:

		moveq	#0,d0
		bsr.s	sub_69C5C
		bclr	#6,$2A(a0)
		clr.b	$20(a0)
		rts
; End of function sub_69C94


; =============== S U B R O U T I N E =======================================


sub_69CA4:
		movea.w	$46(a0),a1
		btst	#7,$2A(a1)
		bne.s	loc_69CB2
		rts
; ---------------------------------------------------------------------------

loc_69CB2:
		move.l	#Wait_Draw,(a0)
		bset	#7,$2A(a0)
		move.b	#1,$22(a0)
		move.w	#$1F,$2E(a0)
		move.l	#loc_69720,$34(a0)
		rts
; End of function sub_69CA4

; ---------------------------------------------------------------------------
ObjDat_AIZEndBoss:	dc.l Map_AIZEndBoss
		dc.w $A180		; VRAM
		dc.w prio(5)		; Priority
		dc.b $28		; Width
		dc.b $20		; Height
		dc.b 0			; Frame
		dc.b $10		; Collision
word_69CE0:	dc.w prio(4)
		dc.b $24
		dc.b $14
		dc.b 1
		dc.b 0
word_69CE6:	dc.w prio(3)
		dc.b $C
		dc.b $C
		dc.b 4
		dc.b 0
word_69CEC:	dc.w prio(2)
		dc.b 8
		dc.b 4
		dc.b $B
		dc.b $97
word_69CF2:	dc.w prio(2)
		dc.b $14
		dc.b $18
		dc.b $F
		dc.b $9A
word_69CF8:	dc.w prio(2)
		dc.b 8
		dc.b 8
		dc.b $18
		dc.b 0
word_69CFE:	dc.w $8180
		dc.w prio(2)
		dc.b $30
		dc.b $30
		dc.b $24
		dc.b 0
ObjDat_AIZEndBoss2:	dc.l Map_AIZEndBoss
		dc.w $8180
		dc.w prio(2)
		dc.b $18
		dc.b $10
		dc.b $21
		dc.b 0
word_69D12:	dc.w prio(3)
		dc.b $10
		dc.b $10
		dc.b 0
		dc.b 0
ChildObjDat_69D18:dc.w 1
		dc.l loc_69622
		dc.w $14FC
		dc.l loc_69622
		dc.w $ECFC
ChildObjDat_69D26:dc.w 0
		dc.l loc_69738
		dc.w $E400
ChildObjDat_69D2E:dc.w 0

		dc.l loc_699C0
		dc.w 0
ChildObjDat_69D36:dc.w 0
		dc.l loc_69996
		dc.w $D0
ChildObjDat_69D3E:dc.w 0
		dc.l loc_69844
		dc.w $305
ChildObjDat_69D46:dc.w 0
		dc.l loc_69844
		dc.w 7
ChildObjDat_69D4E:dc.w 0
		dc.l loc_69844
		dc.w $FD05
ChildObjDat_69D56:dc.w 0
		dc.l loc_698D2
		dc.w 0
ChildObjDat_69D5E:dc.w 0
		dc.l loc_6995A
		dc.w 0
ChildObjDat_69D66:dc.w 5
		dc.l loc_69A3A
		dc.w $F0F0
		dc.l loc_69A3A
		dc.w $10F0
		dc.l loc_69A3A
		dc.w $F008
		dc.l loc_69A3A
		dc.w $1008
		dc.l loc_69A3A
		dc.w $F418
		dc.l loc_69A3A
		dc.w $C18
ChildObjDat_69D8C:dc.w 0
		dc.l Obj_EndSignControl_HitHUD	; NAT: load this instead
		dc.w 0
		dc.l Obj_CutsceneKnuckles
byte_69D98:	dc.b  $2B,   0
		dc.b  $2B,   0
		dc.b  $2B,   0
		dc.b	0,   0
		dc.b  $2B,   0
		dc.b  $2B,   0
		dc.b	0,   0
		dc.b  $2B,   0
		dc.b  $2B,   0
		dc.b	0,   0
		dc.b  $2B,   0
		dc.b  $2B,   0
		dc.b	0,   0
		dc.b  $F4
byte_69DB3:	dc.b  $1B,   0
		dc.b  $1B,   4
		dc.b  $1C,   5
		dc.b  $1D,   6
		dc.b	0,   0
		dc.b  $F4
byte_69DBE:	dc.b  $1E,   0
		dc.b  $1E,   4
		dc.b  $1F,   5
		dc.b  $20,   6
		dc.b	1,   0
		dc.b  $F4
word_69DC9:	dc.w 7
		dc.w $2B07
		dc.w $2B08
		dc.w $2B08
		dc.w $2B09
		dc.w $2B09
		dc.w $2B0A
		dc.w $2B0A
		dc.w $2B0A
		dc.w $2B0A
		dc.w $2B0A
		dc.w $2B0A
		dc.w $2B0A
		dc.w $2B0A
		dc.w $2B0A
		dc.w $2B0A
		dc.w $2B0A
		dc.w $2B0A
		dc.w $2B0A
		dc.w $2B0A
		dc.w $2BF4
word_69DF3:	dc.w $B
		dc.w $2B0B
		dc.w $2B0C
		dc.w $2B0C
		dc.w $2B0D
		dc.w $2B0D
		dc.w $2B0E
		dc.w $2B0E
		dc.w $2B0E
		dc.w $2B0E
		dc.w $2B0E
		dc.w $2B0E
		dc.w $2B0E
		dc.w $2B0E
		dc.w $2B0E
		dc.w $2B0E
		dc.w $2B0E
		dc.w $2B0E
		dc.w $2B0E
		dc.w $2B0E
		dc.w $2BF4
byte_69E1D:	dc.b 1
		dc.b $26
		dc.b $27
		dc.b $28
		dc.b $29
		dc.b $FC
byte_69E23:	dc.b 1
		dc.b $16
		dc.b $17
		dc.b $2F
		dc.b $30
		dc.b $FC
byte_69E29:	dc.b 1
		dc.b $10
		dc.b $11
		dc.b $2D
		dc.b $2E
		dc.b $FC
byte_69E2F:	dc.b  $12,   0
		dc.b  $12,   9
		dc.b  $13,   2
		dc.b  $14,   2
		dc.b  $F4
byte_69E38:	dc.b  $18,   0
		dc.b  $18,   9
		dc.b  $19,   2
		dc.b  $1A,   2
		dc.b  $F4
byte_69E41:	dc.b  $21,   0
		dc.b  $21,   4
		dc.b  $22,   5
		dc.b  $23,   6
		dc.b  $F4
byte_69E4A:	dc.b  $2B,   0
		dc.b  $24,   0
		dc.b  $64,   0
		dc.b  $6B,   0
		dc.b  $2C,   0
		dc.b  $6C,   0
		dc.b  $6B,   0
		dc.b  $24,   0
		dc.b  $64,   0
		dc.b  $6B,   0
		dc.b  $2C,   0
		dc.b  $6C,   0
		dc.b  $6B,   0
		dc.b  $F4
byte_69E65:	dc.b  $2B,   0
		dc.b  $24,   0
		dc.b  $64,   0
		dc.b  $6B,   0
		dc.b  $2C,   0
		dc.b  $6C,   0
		dc.b  $6B,   0
		dc.b  $31,   0
		dc.b  $71,   0
		dc.b  $6B,   0
		dc.b  $31,   0
		dc.b  $71,   0
		dc.b  $6B,   0
		dc.b  $F4
Pal_AIZEndBoss:	binclude "Levels/AIZ/Palettes/End Boss.bin"
	even

; ---------------------------------------------------------------------------

Obj_HCZMiniboss:
		lea	word_69ED2(pc),a1
		jsr	(Check_CameraInRange).l
		move.l	#loc_69EDA,(a0)
		st	Boss_flag.w
		st	(ScrEvents_D).w
		moveq	#$5B,d0
		jsr	Load_PLC.w
		move.w	#$300,(Camera_min_Y_pos).w

		btst	#5,OptionsBits.w		; NAT: Check if bosses are to be loaded
		beq.s	locret_69F78			; branch if not
		lea	ChildObjDat_6AD6E(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------
word_69ED2:	dc.w   $300,  $400, $3500, $3700
; ---------------------------------------------------------------------------

loc_69EDA:
		btst	#0,$38(a0)
		bne.s	loc_69EFE
		move.w	#$638,d0
		cmp.w	(Camera_Y_pos).w,d0
		bhi.s	loc_69EFE
		bset	#0,$38(a0)
		move.w	d0,(Camera_min_Y_pos).w
		move.w	d0,(Camera_max_Y_pos).w
		move.w	d0,(Camera_target_max_Y_pos).w

loc_69EFE:

		btst	#1,$38(a0)
		move.w	#$3680,d0
		move.w	(Camera_X_pos).w,d1
		move.w	d1,(Camera_min_X_pos).w
		cmp.w	d1,d0
		bhi.s	loc_69F22
		bset	#1,$38(a0)
		move.w	d0,(Camera_min_X_pos).w
		move.w	d0,(Camera_max_X_pos).w

loc_69F22:
		cmpi.b	#3,$38(a0)
		beq.s	loc_69F2C

locret_69F78:
		rts
; ---------------------------------------------------------------------------

loc_69F2C:
		move.w	(Camera_max_X_pos).w,(__u_FA92).w

		btst	#5,OptionsBits.w	; NAT: Check if bosses are to be loaded
		bne.s	.enabled		; branch if so
		jmp	Boss_Force_End		; end boss

.enabled	move.b	#$80,BossHitMode.w	; NAT: Enable hit mode
		clr.w	BossHitsP1.w		; clear hits count

		move.w	$14(a0),$44(a0)
		move.l	#Obj_Wait,(a0)
		move.w	#$78,$2E(a0)
		move.l	#loc_69F64,$34(a0)
		moveq	#-$1F,d0
		jsr	Play_Sound.w
		bset	#3,$38(a0)
		lea	Pal_HCZMiniboss(pc),a1
		jmp	PalLoad_Line1.w
; ---------------------------------------------------------------------------

loc_69F64:
		move.l	#Obj_HCZ_MinibossLoop,(a0)
		moveq	#Mus_Minib_S3,d0			; NAT: Play boss music
		move.b	d0,(Level_music+$1).w
		jmp	Play_Sound.w
; ---------------------------------------------------------------------------

Obj_HCZ_MinibossLoop:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_69F92(pc,d0.w),d1
		jsr	off_69F92(pc,d1.w)
		bsr.w	sub_6AC48
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------
off_69F92:	dc.w loc_69FAA-off_69F92

		dc.w loc_69FE4-off_69F92
		dc.w loc_6A00A-off_69F92
		dc.w loc_69FE4-off_69F92
		dc.w loc_6A00A-off_69F92
		dc.w loc_6A076-off_69F92
		dc.w loc_6A0C2-off_69F92
		dc.w loc_6A0F8-off_69F92
		dc.w loc_6A110-off_69F92
		dc.w loc_6A15A-off_69F92
		dc.w loc_6A00A-off_69F92
		dc.w loc_6A216-off_69F92
; ---------------------------------------------------------------------------

loc_69FAA:
		lea	ObjDat3_6ACF0(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.b	#6,$29(a0)
		move.b	#$28,$1E(a0)
		bset	#3,$38(a0)
		move.w	#$100,$1A(a0)
		move.w	#$DF,$2E(a0)
		move.l	#loc_69FF0,$34(a0)
		lea	Child1_HCZMiniboss_RocketsEngine(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_69FE4:
		jsr	MoveSprite2.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_69FF0:
		move.b	#4,5(a0)
		clr.w	$1A(a0)
		move.w	#$3B,$2E(a0)
		move.l	#loc_6A010,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_6A00A:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_6A010:
		move.b	#6,5(a0)
		move.w	#-$400,$1A(a0)
		move.w	#$37,$2E(a0)
		move.l	#loc_6A02C,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_6A02C:
		move.b	#8,5(a0)
		move.w	#$3B,$2E(a0)
		move.l	#loc_6A042,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_6A042:

		bsr.w	sub_6AAD2

loc_6A046:
		move.b	#$A,5(a0)
		bset	#6,$38(a0)
		bclr	#7,$38(a0)
		move.w	#$400,$1A(a0)
		move.w	#$47,$2E(a0)
		move.l	#loc_6A098,$34(a0)
		st	PlayerSpawn.w			; NAT: disable respawn

		moveq	#$3C,d0
		jmp	Play_Sound_2.w

; ---------------------------------------------------------------------------

loc_6A076:
		btst	#7,$38(a0)
		bne.s	loc_6A08C
		move.w	$14(a0),d0
		cmp.w	(Water_level).w,d0
		blo.s	loc_6A08C
		bsr.w	sub_6AAB6

loc_6A08C:

		jsr	MoveSprite2.w
		jmp	ObjHitFloor_DoRoutine.w
; ---------------------------------------------------------------------------

loc_6A098:
		move.b	#$C,5(a0)
		move.w	$40(a0),$18(a0)
		neg.w	$40(a0)
		clr.w	$1A(a0)
		move.w	#$2F,$2E(a0)
		move.l	#loc_6A0D8,$34(a0)
		bclr	#7,$38(a0)
		rts
; ---------------------------------------------------------------------------

loc_6A0C2:
		jsr	MoveSprite2.w
		jsr	ObjCheckFloorDist.w
		add.w	d1,$14(a0)
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_6A0D8:
		clr.w	PlayerSpawn.w			; NAT: enable respawn
		move.w	#-$400,$1A(a0)
		clr.w	$18(a0)
		subq.b	#1,$39(a0)
		bmi.s	loc_6A0F0
		move.b	#$E,5(a0)
		rts
; ---------------------------------------------------------------------------

loc_6A0F0:
		move.b	#$10,5(a0)
		rts
; ---------------------------------------------------------------------------

loc_6A0F8:
		bsr.w	sub_6AAA0
		jsr	MoveSprite2.w
		move.w	$14(a0),d0
		cmp.w	$44(a0),d0
		bls.w	loc_6A046
		rts
; ---------------------------------------------------------------------------

loc_6A110:
		bsr.w	sub_6AAA0
		jsr	MoveSprite2.w
		move.w	$44(a0),d0
		addi.w	#$108,d0
		cmp.w	$14(a0),d0
		bhs.s	loc_6A12A
		rts
; ---------------------------------------------------------------------------

loc_6A12A:
		move.b	#$12,5(a0)
		bclr	#7,$38(a0)
		move.w	d0,$14(a0)
		move.w	#$180,d0
		tst.w	$40(a0)
		bpl.s	loc_6A146
		neg.w	d0

loc_6A146:
		move.w	d0,$18(a0)
		move.w	#$3F,$2E(a0)
		move.l	#loc_6A16C,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_6A15A:
		addi.w	#$20,$1A(a0)
		jsr	MoveSprite2.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_6A16C:
		move.b	#$14,5(a0)
		moveq	#-$6F,d0
		jsr	Play_Sound_2.w
		bclr	#3,$38(a0)
		move.w	#$9F,$2E(a0)
		move.l	#loc_6A194,$34(a0)
		clr.w	$18(a0)
		rts
; ---------------------------------------------------------------------------

loc_6A194:
		bset	#2,$38(a0)
		move.w	#$17F,$2E(a0)
		move.l	#loc_6A1AA,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_6A1AA:
		bclr	#2,$38(a0)
		move.w	#$7F,$2E(a0)
		move.l	#loc_6A1C0,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_6A1C0:

		bset	#3,$38(a0)
		move.w	#$3F,$2E(a0)
		move.l	#loc_6A1C0,$34(a0)
		move.l	#loc_6A1DE,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_6A1DE:
		move.b	#2,5(a0)
		move.w	#-$20,$1A(a0)
		move.w	#$7F,$2E(a0)
		move.l	#loc_6A1FA,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_6A1FA:
		move.b	#$16,5(a0)
		bclr	#6,$38(a0)
		move.w	#-$400,$1A(a0)
		moveq	#$70,d0
		jmp	Play_Sound_2.w
; ---------------------------------------------------------------------------

loc_6A216:
		jsr	MoveSprite2.w
		move.w	$14(a0),d0
		cmp.w	$44(a0),d0
		bls.w	loc_6A042
		rts
; ---------------------------------------------------------------------------

loc_6A22A:
		st	(__u_FAA2).w
		jsr	Obj_EndSignControl_HitHUD		; NAT: Hurr Durr
		jsr	Create_New_Sprite.w
		bne.s	loc_6A242
		move.l	#loc_6A24C,(a1)

loc_6A242:
		lea	ChildObjDat_6ADAA(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_6A24C:
		tst.b	(End_Of_Level_Flag).w
		bne.w	locret_69F78
		move.l	#loc_6A270,(a0)
		clr.w	(Ctrl_1_logical).w
		clr.w	(Ctrl_2_logical).w
		st	(Ctrl_1_locked).w
		st	(Ctrl_2_locked).w
		move.b	#-$80,(Player_1+$2E).w

loc_6A270:
		tst.b	(Title_Card_Out_Flag).w
		beq.w	locret_69F78
		move.l	#loc_6A2A0,(a0)
		lea	ChildObjDat_6ADA4(pc),a2
		tst.b	(Player_mode+$1).w
		beq.s	loc_6A28C
		lea	ChildObjDat_6AD9E(pc),a2

loc_6A28C:
		jsr	CreateChild6_Simple.w
		move.w	#$2F,$2E(a0)
		move.l	#Go_Delete_Sprite,$34(a0)

loc_6A2A0:
		btst	#0,$38(a0)
		beq.w	locret_69F78
		lea	ChildObjDat_6AD98(pc),a2
		jsr	CreateChild6_Simple.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

Obj_HCZMiniboss_Rockets:

		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_6A2D0(pc,d0.w),d1
		jsr	off_6A2D0(pc,d1.w)
		moveq	#$20,d0
		jmp	Child_DrawTouch_Sprite_FlickerMove.w
; ---------------------------------------------------------------------------
off_6A2D0:	dc.w loc_6A2DE-off_6A2D0

		dc.w loc_6A2F8-off_6A2D0
		dc.w loc_6A34C-off_6A2D0
		dc.w loc_6A36C-off_6A2D0
		dc.w loc_6A37A-off_6A2D0
		dc.w loc_6A404-off_6A2D0
		dc.w loc_6A41E-off_6A2D0
; ---------------------------------------------------------------------------

loc_6A2DE:
		lea	ObjDat3_6ACFC(pc),a1
		jsr	SetUp_ObjAttributes.w
		bset	#6,$38(a0)
		lea	ChildObjDat_6AD76(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_6A2F8:
		clr.b	$28(a0)
		movea.w	$46(a0),a1
		btst	#3,$38(a1)
		beq.w	locret_69F78
		move.b	#4,5(a0)
		move.b	#1,$40(a0)
		move.w	#$3F,$2E(a0)
		move.l	#loc_6A356,$34(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	word_6A344(pc,d0.w),$3C(a0)
		cmpi.b	#4,d0
		blo.s	locret_6A342
		bset	#0,4(a0)
		move.b	#6,5(a0)

locret_6A342:
		rts
; ---------------------------------------------------------------------------
word_6A344:	dc.w 0
		dc.w $8080
		dc.w $8000
		dc.w $80
; ---------------------------------------------------------------------------

loc_6A34C:
		bsr.w	sub_6AB1A
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_6A356:
		move.b	#8,5(a0)
		move.w	#$3F,$2E(a0)
		move.l	#loc_6A384,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_6A36C:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_6A372:
		move.b	#2,5(a0)
		rts
; ---------------------------------------------------------------------------

loc_6A37A:
		bsr.w	sub_6AB1A
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_6A384:
		move.b	#2,$40(a0)
		move.b	#-$75,$28(a0)
		move.w	#$1F,$2E(a0)
		move.l	#loc_6A3A0,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_6A3A0:
		move.b	#$A,5(a0)
		move.b	#4,$40(a0)
		move.l	#loc_6A416,$34(a0)
		bclr	#6,$38(a0)
		moveq	#$67,d0
		jMP	Play_Sound_2.w
; ---------------------------------------------------------------------------

loc_6A3C4:
		move.b	#2,$40(a0)
		move.w	#$1F,$2E(a0)
		move.l	#loc_6A3DA,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_6A3DA:
		move.b	#6,5(a0)
		cmpi.b	#4,$2C(a0)
		blo.s	loc_6A3EE
		move.b	#4,5(a0)

loc_6A3EE:
		move.b	#1,$40(a0)
		move.w	#$3F,$2E(a0)
		move.l	#loc_6A372,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_6A404:
		bsr.w	sub_6AB1A
		movea.w	$46(a0),a1
		btst	#3,$38(a1)
		bne.w	locret_69F78

loc_6A416:
		move.b	#$C,5(a0)
		rts
; ---------------------------------------------------------------------------

loc_6A41E:
		bsr.w	sub_6AB1A
		moveq	#0,d0
		move.b	$2C(a0),d0
		lsr.b	#1,d0
		move.b	loc_6A45C(pc,d0.w),d1
		cmp.b	$3C(a0),d1
		beq.s	loc_6A436
		rts
; ---------------------------------------------------------------------------

loc_6A436:
		move.b	#8,5(a0)
		clr.b	$28(a0)
		move.b	#2,$40(a0)
		move.w	#$1F,$2E(a0)
		move.l	#loc_6A3C4,$34(a0)
		bset	#6,$38(a0)
		rts
; ---------------------------------------------------------------------------

loc_6A45C:
		or.b	d0,d0
		and.w	d0,d0

loc_6A460:
		lea	word_6AD08(pc),a1
		jsr	SetUp_ObjAttributes2.w
		move.l	#loc_6A478,(a0)
		bset	#4,$2B(a0)
		rts
; ---------------------------------------------------------------------------

loc_6A478:
		bsr.w	sub_6ABA8

loc_6A47C:
		movea.w	$46(a0),a1
		btst	#7,$2A(a1)
		bne.s	loc_6A4A2
		btst	#6,$38(a1)
		bne.w	locret_69F78
		btst	#0,(V_int_run_count+3).w
		bne.w	locret_69F78
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------

loc_6A4A2:
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------

Obj_HCZMiniboss_Engine:
		lea	word_6AD10(pc),a1
		jsr	SetUp_ObjAttributes2.w
		move.l	#loc_6A4C0,(a0)
		bset	#4,$2B(a0)
		rts
; ---------------------------------------------------------------------------

loc_6A4C0:
		jsr	Refresh_ChildPosition.w
		bra.s	loc_6A47C
; ---------------------------------------------------------------------------

loc_6A4C8:

		lea	ObjDat4_6AD30(pc),a1
		jsr	SetUp_ObjAttributesSlotted.w
		move.w	(Water_level).w,$14(a0)
		move.l	#Obj_Wait,(a0)
		tst.b	$2C(a0)
		beq.s	loc_6A4EA
		move.w	#7,$2E(a0)

loc_6A4EA:
		move.l	#loc_6A4F4,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_6A4F4:
		move.l	#loc_6A504,(a0)
		move.l	#Go_Delete_SpriteSlotted3,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_6A504:
		lea	byte_6AE3B(pc),a1
		jsr	Animate_RawNoSST.w
		lea	DPLCPtr_6ADE4(pc),a2
		jsr	Perform_DPLC.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_6A51E:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_6A536(pc,d0.w),d1
		jsr	off_6A536(pc,d1.w)
		bsr.w	sub_6A960
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------
off_6A536:	dc.w loc_6A542-off_6A536

		dc.w loc_6A55C-off_6A536
		dc.w loc_6A57C-off_6A536
		dc.w loc_6A5B2-off_6A536
		dc.w loc_6A5D8-off_6A536
		dc.w loc_6A618-off_6A536
; ---------------------------------------------------------------------------

loc_6A542:
		lea	ObjDat3_6AD18(pc),a1
		jsr	SetUp_ObjAttributes.w
		addi.w	#$148,$14(a0)
		clr.w	$42(a0)
		clr.w	$44(a0)
		rts
; ---------------------------------------------------------------------------

loc_6A55C:
		tst.b	4(a0)
		bpl.w	locret_69F78
		move.b	#4,5(a0)
		lea	Pal_HCZMinibossWater(pc),a1
		lea	(Water_palette_line_2).w,a2
		moveq	#7,d0

loc_6A574:
		move.l	(a1)+,(a2)+
		dbf	d0,loc_6A574
		rts
; ---------------------------------------------------------------------------

loc_6A57C:
		movea.w	$46(a0),a1
		btst	#2,$38(a1)
		beq.w	locret_69F78
		move.b	#6,5(a0)
		move.l	#byte_6ADEC,$30(a0)
		move.l	#loc_6A5BC,$34(a0)
		moveq	#-$40,d0
		jsr	Play_Sound_2.w
		lea	ChildObjDat_6AD92(pc),a2
		jmp	CreateChild6_Simple.w
; ---------------------------------------------------------------------------

loc_6A5B2:
		lea	byte_6ADEC(pc),a1
		jmp	Animate_RawNoSSTMultiDelay.w
; ---------------------------------------------------------------------------

loc_6A5BC:
		move.b	#8,5(a0)
		move.l	#byte_6ADEC,$30(a0)
		move.l	#loc_6A622,$34(a0)
		clr.b	$29(a0)
		rts
; ---------------------------------------------------------------------------

loc_6A5D8:
		bsr.w	sub_6A9B8
		movea.w	$46(a0),a1
		btst	#2,$38(a1)
		beq.s	loc_6A5FA
		moveq	#-$41,d0
		jsr	sub_85E52.w
		lea	byte_6AE11(pc),a1
		jmp	Animate_RawNoSST.w
; ---------------------------------------------------------------------------

loc_6A5FA:
		move.b	#$A,5(a0)
		bset	#3,$38(a0)
		move.l	#loc_6A622,$34(a0)
		bsr.w	loc_6A986
		jmp	Animate_RawMultiDelay.w
; ---------------------------------------------------------------------------

loc_6A618:
		lea	byte_6AE16(pc),a1
		jmp	Animate_RawNoSSTMultiDelay.w
; ---------------------------------------------------------------------------

loc_6A622:

		move.b	#4,5(a0)
		move.b	#$16,$22(a0)
		bclr	#3,$38(a0)
		rts
; ---------------------------------------------------------------------------

loc_6A636:
		movea.w	$46(a0),a1
		btst	#4,$38(a1)
		beq.s	loc_6A656
		lea	ChildObjDat_6ADC4(pc),a2
		jsr	CreateChild1_Normal.w
		bsr.w	loc_6A986
		jsr	Go_Delete_Sprite_2.w

loc_6A656:
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_6A65C:
		lea	ObjDat3_6AD24(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_6A6B8,(a0)
		jsr	Random_Number.w
		andi.w	#$FF,d0
		ext.w	d0
		add.w	d0,$10(a0)
		swap	d0
		andi.w	#$3F,d0
		subq.w	#8,d0
		add.w	d0,$14(a0)
		andi.w	#3,d0
		move.b	d0,$22(a0)
		lsl.w	#2,d0
		move.l	off_6A6A8(pc,d0.w),$30(a0)
		move.w	#$1F,$2E(a0)
		move.l	#loc_6A6D2,$34(a0)
		rts
; ---------------------------------------------------------------------------
off_6A6A8:	dc.l word_6AE46
		dc.l word_6AE4A
		dc.l word_6AE4E
		dc.l word_6AE52
; ---------------------------------------------------------------------------

loc_6A6B8:

		movea.w	$46(a0),a3
		bsr.w	sub_6A9AA
		jsr	Animate_Raw.w
		jsr	Obj_Wait.w
		jmp	Child_Draw_Sprite2.w
; ---------------------------------------------------------------------------

loc_6A6D2:
		move.l	#loc_6A6E4,(a0)
		movea.l	$30(a0),a1
		move.b	1(a1),$22(a0)
		rts
; ---------------------------------------------------------------------------

loc_6A6E4:
		movea.w	$46(a0),a3
		btst	#3,$38(a3)
		bne.s	loc_6A6FA
		bsr.w	sub_6A9AA
		jmp	Child_Draw_Sprite2.w
; ---------------------------------------------------------------------------

loc_6A6FA:
		move.l	#loc_6A6B8,(a0)
		move.w	#$1F,$2E(a0)
		move.l	#Go_Delete_Sprite,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_6A710:
		lea	ObjDat3_6AD24(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_6A79C,(a0)
		move.w	(Camera_X_pos).w,d0
		addi.w	#$A0,d0
		move.w	d0,$10(a0)
		move.w	d0,$3A(a0)
		move.w	(Water_level).w,d0
		addq.w	#8,d0
		move.w	d0,$14(a0)
		jsr	Random_Number.w
		andi.w	#$FF,d0
		move.w	d0,d1
		ext.w	d0
		bpl.s	loc_6A74E
		st	$3C(a0)

loc_6A74E:
		add.w	d0,$10(a0)
		bsr.w	sub_6A940
		lsl.w	#4,d0
		move.w	d0,$18(a0)
		andi.b	#1,d1
		move.b	d1,$23(a0)
		swap	d0
		andi.w	#$1F,d0
		add.w	d0,$14(a0)
		andi.w	#3,d0
		move.b	d0,$22(a0)
		lsl.w	#2,d0
		lea	off_6A6A8(pc),a1
		move.l	(a1,d0.w),$30(a0)
		move.w	#$200,$1A(a0)
		move.w	#$BF,$2E(a0)
		move.l	#Go_Delete_Sprite,$34(a0)
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_6A79C:
		tst.b	4(a0)
		bpl.s	loc_6A7BE
		bsr.w	sub_6A916
		jsr	MoveSprite2.w
		jsr	Animate_Raw.w
		jsr	Obj_Wait.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_6A7BE:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_6A7C4:

		lea	(Player_1).w,a1
		btst	#6,$2A(a1)
		beq.w	locret_69F78
		move.l	#loc_6A872,(a0)
		clr.b	(__u_FAA2).w
		movea.w	$46(a0),a1
		bset	#0,$38(a1)
		move.b	#4,4(a0)
		lea	(Player_1).w,a1
		lea	(Ctrl_1_locked).w,a2
		tst.b	$2C(a0)
		beq.s	loc_6A80C
		lea	(Player_2).w,a1
		lea	(Ctrl_2_locked).w,a2
		btst	#6,$2A(a1)
		beq.w	loc_6A86C

loc_6A80C:
		clr.b	(a2)
		tst.l	(a1)
		beq.s	loc_6A86C
		move.w	a1,$44(a0)
		bclr	#7,$A(a0)
		move.w	$10(a1),d0
		move.w	d0,$10(a0)
		move.w	$14(a1),$14(a0)
		move.w	(Camera_X_pos).w,d1
		addi.w	#$A0,d1
		move.w	d1,$3A(a0)
		sub.w	d1,d0
		bpl.s	loc_6A83E
		st	$3C(a0)

loc_6A83E:
		bsr.w	sub_6A940
		move.w	#$200,$1A(a0)
		bset	#1,$2A(a1)
		move.b	#1,$2E(a1)
		move.b	#$F,$20(a1)
		clr.b	$3D(a1)
		clr.w	$18(a1)
		clr.w	$1A(a1)
		clr.w	$1C(a1)
		rts
; ---------------------------------------------------------------------------

loc_6A86C:

		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_6A872:
		bsr.w	sub_6A916
		jsr	MoveSprite2.w
		movea.w	$44(a0),a1
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),d0
		move.w	d0,$14(a1)
		cmpi.w	#$828,d0
		bhs.s	loc_6A896
		rts
; ---------------------------------------------------------------------------

loc_6A896:
		tst.b	$2C(a0)
		beq.s	loc_6A8AE
		lea	(Player_2).w,a1
		tst.l	(a1)
		beq.s	loc_6A8C0
		jsr	Restore_PlayerControl2.w
		bra.s	loc_6A8C0
; ---------------------------------------------------------------------------

loc_6A8AE:
		jsr	Restore_PlayerControl.w
		move.w	#0,(__u_FA96).w
		jsr	(Make_LevelSizeObj).l

loc_6A8C0:

		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_6A8C6:

		lea	byte_6AD42(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#Obj_FlickerMove,(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		lsr.w	#1,d0
		addi.b	#$1B,d0
		move.b	d0,$22(a0)
		moveq	#$20,d0
		jmp	Set_IndexedVelocity.w
; ---------------------------------------------------------------------------

loc_6A8EE:

		lea	byte_6AD48(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#MoveChkDel,(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		lsr.w	#1,d0
		addi.b	#$1F,d0
		move.b	d0,$22(a0)
		moveq	#$1C,d0
		jmp	Set_IndexedVelocity.w

; =============== S U B R O U T I N E =======================================


sub_6A916:

		move.w	$10(a0),d0
		move.w	$18(a0),d1
		move.w	#$100,d2
		cmp.w	$3A(a0),d0
		scs	d3
		bcs.s	loc_6A92C
		neg.w	d2

loc_6A92C:
		add.w	d2,d1
		cmp.b	$3C(a0),d3
		beq.s	loc_6A93A
		move.b	d3,$3C(a0)
		add.w	d2,d1

loc_6A93A:
		move.w	d1,$18(a0)
		rts
; End of function sub_6A916


; =============== S U B R O U T I N E =======================================


sub_6A940:

		add.w	d0,d0
		smi	d2
		bpl.s	loc_6A948
		neg.w	d0

loc_6A948:
		move.w	#$100,d3
		sub.w	d0,d3
		bpl.s	loc_6A952
		moveq	#0,d3

loc_6A952:
		lsl.w	#4,d3
		tst.b	d2
		beq.s	loc_6A95A
		neg.w	d3

loc_6A95A:
		move.w	d3,$18(a0)
		rts
; End of function sub_6A940


; =============== S U B R O U T I N E =======================================


sub_6A960:
		movea.w	$46(a0),a1
		btst	#7,$2A(a1)
		beq.w	locret_69F78
		move.l	#loc_6A636,(a0)
		clr.b	$28(a0)
		bclr	#3,$38(a0)
		beq.w	locret_69F78
		bra.w	loc_6A986

loc_6A986:

		move.w	$42(a0),d0
		beq.s	loc_6A990
		bsr.w	sub_6A996

loc_6A990:
		move.w	$44(a0),d0
		beq.s	locret_6A9A8
; End of function sub_6A960


; =============== S U B R O U T I N E =======================================


sub_6A996:
		movea.w	d0,a2
		bset	#1,$2A(a2)
		clr.b	$2E(a2)
		move.w	#prio(2),8(a2)

locret_6A9A8:
		rts
; End of function sub_6A996


; =============== S U B R O U T I N E =======================================


sub_6A9AA:

		movea.l	a0,a1
		movea.l	a0,a2
		movea.l	a3,a0
		bsr.w	sub_6AA30
		movea.l	a1,a0
		rts
; End of function sub_6A9AA


; =============== S U B R O U T I N E =======================================


sub_6A9B8:
		clr.l	$42(a0)
		move.w	$14(a0),d0
		subi.w	#$20,d0
		lea	(Player_1).w,a2
		cmp.w	$14(a2),d0
		bhi.s	loc_6A9E0
		move.w	a2,$42(a0)
		bsr.w	sub_6AA30
		tst.b	$2E(a2)
		bne.s	loc_6A9E0
		bsr.w	sub_6AA00

loc_6A9E0:

		lea	(Player_2).w,a2
		cmp.w	$14(a2),d0
		bhi.s	locret_6AA22
		cmpi.b	#6,5(a2)
		bhs.s	locret_6AA22
		move.w	a2,$44(a0)
		bsr.w	sub_6AA30
		tst.b	$2E(a2)
		bne.s	locret_6AA22
; End of function sub_6A9B8


; =============== S U B R O U T I N E =======================================


sub_6AA00:
		bset	#1,$2A(a2)
		move.b	#1,$2E(a2)
		move.b	#$F,$20(a2)
		clr.b	$3D(a2)
		clr.w	$18(a2)
		clr.w	$1A(a2)
		clr.w	$1C(a2)

locret_6AA22:

		rts
; End of function sub_6AA00

; ---------------------------------------------------------------------------
		dc.w $B000
		dc.w 0
		dc.w $B04A
		dc.w 0
		dc.w $B04A
		dc.w $B04A

; =============== S U B R O U T I N E =======================================


sub_6AA30:

		move.w	$10(a2),d0
		move.w	$18(a2),d1
		move.w	#$40,d2
		sub.w	$10(a0),d0
		scs	d3
		bcc.s	loc_6AA46
		neg.w	d0

loc_6AA46:
		cmpi.w	#3,d0
		bhi.s	loc_6AA54
		tst.w	d1
		bpl.s	loc_6AA62
		bra.w	loc_6AA60
; ---------------------------------------------------------------------------

loc_6AA54:
		cmpi.w	#$70,d0
		bls.s	loc_6AA5C
		moveq	#0,d1

loc_6AA5C:
		tst.b	d3
		bne.s	loc_6AA62

loc_6AA60:
		neg.w	d2

loc_6AA62:

		add.w	d2,d1
		move.w	#prio(2),8(a2)
		move.w	d1,$18(a2)
		bpl.s	loc_6AA76
		move.w	#prio(6),8(a2)

loc_6AA76:
		ext.l	d1
		lsl.l	#8,d1
		add.l	d1,$10(a2)
		move.l	#$8000,d4
		move.w	$14(a2),d5
		sub.w	$14(a0),d5
		cmpi.w	#-$10,d5
		blt.s	loc_6AA9A
		cmpi.w	#$10,d5
		ble.s	locret_6AA9E
		neg.l	d4

loc_6AA9A:
		add.l	d4,$14(a2)

locret_6AA9E:
		rts
; End of function sub_6AA30


; =============== S U B R O U T I N E =======================================


sub_6AAA0:

		btst	#7,$38(a0)
		bne.w	locret_69F78
		move.w	$14(a0),d0
		cmp.w	(Water_level).w,d0
		blo.w	locret_69F78
; End of function sub_6AAA0


; =============== S U B R O U T I N E =======================================


sub_6AAB6:
		bset	#7,$38(a0)
		moveq	#$39,d0
		jsr	Play_Sound_2.w
		clr.w	(__u_FA9A).w
		lea	ChildObjDat_6AD7E(pc),a2
		jmp	CreateChild1_Normal.w
; End of function sub_6AAB6


; =============== S U B R O U T I N E =======================================


sub_6AAD2:
		move.b	$3A(a0),d0
		addq.b	#2,$3A(a0)
		andi.w	#$E,d0
		lea	byte_6AB0A(pc,d0.w),a1
		move.b	(a1)+,d0
		bne.s	loc_6AAEA
		move.w	#$100,d0

loc_6AAEA:
		move.w	#$400,d2
		cmpi.w	#$A0,d0
		blo.s	loc_6AAF6
		neg.w	d2

loc_6AAF6:
		move.w	d2,$40(a0)
		move.w	(Camera_X_pos).w,d1
		add.w	d0,d1
		move.w	d1,$10(a0)
		move.b	(a1)+,$39(a0)
		rts
; End of function sub_6AAD2

; ---------------------------------------------------------------------------
byte_6AB0A:	dc.b  $40,   1
		dc.b	0,   1
		dc.b  $40,   0
		dc.b  $40,   1
		dc.b	0,   0
		dc.b	0,   1
		dc.b  $40,   0
		dc.b	0,   0

; =============== S U B R O U T I N E =======================================


sub_6AB1A:

		move.b	$40(a0),d2
		add.b	d2,$3C(a0)
		bsr.w	sub_6AB60
		add.b	d2,$3D(a0)
		bsr.w	sub_6AB94
		moveq	#0,d0
		move.b	$3D(a0),d0
		lsr.w	#4,d0
		move.b	byte_6AB50(pc,d0.w),$22(a0)
		move.w	#prio(4),8(a0)
		cmpi.b	#8,d0
		blo.s	locret_6AB4E
		move.w	#prio(5),8(a0)

locret_6AB4E:
		rts
; End of function sub_6AB1A

; ---------------------------------------------------------------------------
byte_6AB50:	dc.b 1
		dc.b 2
		dc.b 3
		dc.b 4
		dc.b 5
		dc.b 6
		dc.b 7
		dc.b 8
		dc.b 9
		dc.b $A
		dc.b $B
		dc.b $1A
		dc.b $1A
		dc.b $1A
		dc.b $C
		dc.b $D

; =============== S U B R O U T I N E =======================================


sub_6AB60:
		moveq	#0,d0
		move.b	$3C(a0),d0
		bsr.w	sub_6AB76
		move.w	$10(a2),d0
		add.w	d1,d0
		move.w	d0,$10(a0)
		rts
; End of function sub_6AB60


; =============== S U B R O U T I N E =======================================


sub_6AB76:
		cmpi.b	#-$80,d0
		blo.s	loc_6AB82
		moveq	#-1,d1
		sub.b	d0,d1
		move.b	d1,d0

loc_6AB82:
		lea	(HCZMiniboss_RocketTwistLookup).l,a1
		move.b	(a1,d0.w),d1
		ext.w	d1
		movea.w	$46(a0),a2
		rts
; End of function sub_6AB76


; =============== S U B R O U T I N E =======================================


sub_6AB94:
		moveq	#0,d0
		move.b	$3D(a0),d0
		bsr.s	sub_6AB76
		move.w	$14(a2),d0
		add.w	d1,d0
		move.w	d0,$14(a0)
		rts

; =============== S U B R O U T I N E =======================================

sub_6ABA8:
		movea.w	$46(a0),a2
		moveq	#0,d0
		move.b	$3D(a2),d0
		lsr.w	#3,d0
		andi.w	#-2,d0
		move.w	word_6ABF8(pc,d0.w),8(a0)
		lea	byte_6AC18(pc,d0.w),a1
		move.b	(a1)+,d1
		ext.w	d1
		btst	#0,4(a2)
		beq.s	loc_6ABD6
		neg.w	d1
		bset	#0,4(a0)

loc_6ABD6:
		move.b	(a1)+,d2
		ext.w	d2
		move.w	$10(a2),d3
		add.w	d1,d3
		move.w	d3,$10(a0)
		move.w	$14(a2),d3
		add.w	d2,d3
		move.w	d3,$14(a0)
		lsr.w	#1,d0
		move.b	byte_6AC38(pc,d0.w),$22(a0)
		rts

; ---------------------------------------------------------------------------
word_6ABF8:	dc.w prio(5), prio(4), prio(4), prio(4)
		dc.w prio(4), prio(3), prio(3), prio(3)
		dc.w prio(3), prio(3), prio(3), prio(5)
		dc.w prio(5), prio(5), prio(5), prio(5)
byte_6AC18:	dc.b	3,   3
		dc.b	0,   0
		dc.b	6,   6
		dc.b   $C,  $C
		dc.b  $12, $12
		dc.b   $C,  $C
		dc.b	8,   8
		dc.b	0,   0
		dc.b	3,   3
		dc.b	0,   0
		dc.b	0,   0
		dc.b	0,   0
		dc.b  $FA, $FA
		dc.b  $F6, $F6
		dc.b	0,   0
		dc.b	0,   0
byte_6AC38:	dc.b   $E,  $F
		dc.b  $10, $11
		dc.b  $12, $11
		dc.b  $10,  $F
		dc.b   $E, $1A
		dc.b  $1A, $1A
		dc.b   $E,  $E
		dc.b  $1A, $1A

; =============== S U B R O U T I N E =======================================


sub_6AC48:
		tst.b	$28(a0)
		bne.s	locret_6ACA4
		tst.b	$29(a0)
		beq.s	loc_6ACA6
		tst.b	$20(a0)
		bne.s	loc_6AC68
		move.b	#$20,$20(a0)
		moveq	#$6E,d0
		jsr	Play_Sound_2.w

loc_6AC68:
		bset	#6,$2A(a0)
		moveq	#0,d0
		btst	#0,$20(a0)
		bne.s	loc_6AC7C
		addi.w	#$E,d0

loc_6AC7C:
		lea	word_6ACC6(pc),a1
		lea	word_6ACD4(pc,d0.w),a2
		jsr	CopyWordData_7.w
		subq.b	#1,$20(a0)
		bne.s	locret_6ACA4
		bclr	#6,$2A(a0)
		cmpi.b	#0,$22(a0)
		bne.s	locret_6ACA4
		move.b	$25(a0),$28(a0)

locret_6ACA4:

		rts
; ---------------------------------------------------------------------------

loc_6ACA6:
		move.l	#Wait_FadeToLevelMusic,(a0)
		move.l	#loc_6A22A,$34(a0)
		lea	Child6_CreateBossExplosion.w,a2
		jsr	CreateChild1_Normal.w
		jmp	BossDefeated_StopTimer.w
; End of function sub_6AC48

; ---------------------------------------------------------------------------
word_6ACC6:	dc.w $FC28
		dc.w $FC2E
		dc.w $FC32
		dc.w $FC34
		dc.w $FC36
		dc.w $FC3A
		dc.w $FC3C
word_6ACD4:	dc.w 4
		dc.w 0
		dc.w $C
		dc.w 8
		dc.w $20
		dc.w $826
		dc.w $624
		dc.w $AAA
		dc.w $AAA
		dc.w $888
		dc.w $AAA
		dc.w $EEE
		dc.w $888
		dc.w $AAA
ObjDat3_6ACF0:	dc.l Map_HCZMiniboss
		dc.w $A304
		dc.w prio(5)
		dc.b $20
		dc.b $20
		dc.b 0
		dc.b $F
ObjDat3_6ACFC:	dc.l Map_HCZMiniboss
		dc.w $A304
		dc.w prio(4)
		dc.b $10
		dc.b $10
		dc.b 1
		dc.b $8B
word_6AD08:	dc.w $8304
		dc.w prio(5)
		dc.b $10
		dc.b $10
		dc.b $15
		dc.b 0
word_6AD10:	dc.w $8304
		dc.w prio(5)
		dc.b $10
		dc.b $10
		dc.b $15
		dc.b $92
ObjDat3_6AD18:	dc.l Map_HCZMiniboss
		dc.w $A304
		dc.w prio(5)
		dc.b $10
		dc.b $28
		dc.b $16
		dc.b 0
ObjDat3_6AD24:	dc.l Map_Bubbler

		dc.w $A45C
		dc.w prio(5)
		dc.b $10
		dc.b $10
		dc.b 0
		dc.b 0
ObjDat4_6AD30:	dc.w 2
		dc.w $83FC
		dc.w $10
		dc.w 0
		dc.l Map_HCZMinibossSplash
		dc.w prio(1)
		dc.b $10
		dc.b $10
		dc.b 0
		dc.b 0
byte_6AD42:	dc.w prio(5)
		dc.b $C
		dc.b $C
		dc.b 0
		dc.b 0
byte_6AD48:	dc.w prio(5)
		dc.b $14
		dc.b $24
		dc.b 0
		dc.b 0
Child1_HCZMiniboss_RocketsEngine:dc.w 4
		dc.l Obj_HCZMiniboss_Rockets
		dc.w $1818
		dc.l Obj_HCZMiniboss_Rockets
		dc.w $E8E8
		dc.l Obj_HCZMiniboss_Rockets
		dc.w $E818
		dc.l Obj_HCZMiniboss_Rockets
		dc.w $18E8
		dc.l Obj_HCZMiniboss_Engine
		dc.w $24
ChildObjDat_6AD6E:dc.w 0
		dc.l loc_6A51E
		dc.w 0
ChildObjDat_6AD76:dc.w 0
		dc.l loc_6A460
		dc.w 0
ChildObjDat_6AD7E:dc.w 2
		dc.l loc_6A4C8
		dc.w 0
		dc.l loc_6A4C8
		dc.w $F000
		dc.l loc_6A4C8
		dc.w $1000
ChildObjDat_6AD92:dc.w $1D
		dc.l loc_6A65C
ChildObjDat_6AD98:dc.w 0
		dc.l loc_6A710
ChildObjDat_6AD9E:dc.w 0
		dc.l loc_6A7C4
ChildObjDat_6ADA4:dc.w 1
		dc.l loc_6A7C4
ChildObjDat_6ADAA:dc.w 3
		dc.l loc_6A8C6
		dc.w $F4F4
		dc.l loc_6A8C6
		dc.w $F40C
		dc.l loc_6A8C6
		dc.w $CF4
		dc.l loc_6A8C6
		dc.w $C0C
ChildObjDat_6ADC4:dc.w 4
		dc.l loc_6A8EE
		dc.w $DC
		dc.l loc_6A8EE
		dc.w $F800
		dc.l loc_6A8EE
		dc.w $800
		dc.l loc_6A8EE
		dc.w $F430
		dc.l loc_6A8EE
		dc.w $C30
DPLCPtr_6ADE4:	dc.l ArtUnc_DashDust
		dc.l DPLC_HCZMinibossSplash
byte_6ADEC:	dc.b  $16,   7

		dc.b  $17,   7
		dc.b  $18,   7
		dc.b  $16,   6
		dc.b  $17,   6
		dc.b  $18,   6
		dc.b  $16,   5
		dc.b  $17,   5
		dc.b  $18,   5
		dc.b  $16,   4
		dc.b  $17,   4
		dc.b  $18,   4
		dc.b  $16,   3
		dc.b  $17,   3
		dc.b  $18,   3
		dc.b  $16,   2
		dc.b  $17,   2
		dc.b  $18,   2
		dc.b  $F4
byte_6AE11:	dc.b 1
		dc.b $16
		dc.b $17
		dc.b $18
		dc.b $FC
byte_6AE16:	dc.b  $16,   2
		dc.b  $17,   2
		dc.b  $18,   2
		dc.b  $16,   3
		dc.b  $17,   3
		dc.b  $18,   3
		dc.b  $16,   4
		dc.b  $17,   4
		dc.b  $18,   4
		dc.b  $16,   5
		dc.b  $17,   5
		dc.b  $18,   5
		dc.b  $16,   6
		dc.b  $17,   6
		dc.b  $18,   6
		dc.b  $16,   7
		dc.b  $17,   7
		dc.b  $18,   7
		dc.b  $F4
byte_6AE3B:	dc.b 3
		dc.b 0
		dc.b 1
		dc.b 2
		dc.b 3
		dc.b 4
		dc.b 5
		dc.b 6
		dc.b 7
		dc.b 8
		dc.b $F4
word_6AE46:	dc.w 0

		dc.w $16FC
word_6AE4A:	dc.w 1

		dc.w $16FC
word_6AE4E:	dc.w 2

		dc.w $16FC
word_6AE52:	dc.w 3

		dc.w $16FC
Pal_HCZMiniboss:	binclude "Levels/HCZ/Palettes/Miniboss.bin"
	even

Pal_HCZMinibossWater:	binclude "Levels/HCZ/Palettes/Miniboss Water.bin"
	even

byte_6AE96:	dc.w $438
		dc.w $838
		dc.w $3F00
		dc.w $4100
		dc.b	7, $38
		dc.b	7, $38
		dc.b  $40,   0
		dc.b  $40, $50
word_6AEA6:	dc.w 0
		dc.w $3B8
		dc.w $44E0
		dc.w $4640
		dc.w $2B8
		dc.w $2B8
		dc.w $4540
		dc.w $4590
; ---------------------------------------------------------------------------

Obj_HCZEndBoss:
		lea	byte_6AE96(pc),a1
		jsr	(Check_CameraInRange).l

		btst	#5,OptionsBits.w		; NAT: Check if bosses are on
		bne.s	.enabled			; if are, branch
		lea	.screen(pc),a1			; else, lock screen
		jmp	Boss_Force_End_2		;

.screen		dc.w $4000, $4050, $738, $738

.enabled	move.b	#$80,BossHitMode.w		; NAT: Enable hit mode
		clr.w	BossHitsP1.w			; clear hits count

		move.b	#Mus_Boss,$26(a0)
		jsr	sub_85D6A.w
		move.l	#loc_6AEFE,(a0)
		move.l	#loc_6AF04,$34(a0)
		moveq	#$6C,d0
		jsr	Load_PLC.w
		move.w	#0,(Normal_palette+$1E).w
		lea	Pal_HCZEndBoss(pc),a1
		jmp	PalLoad_Line1.w
; ---------------------------------------------------------------------------

loc_6AEFE:
		jmp	loc_85CA4.w
; ---------------------------------------------------------------------------

loc_6AF04:
		move.l	#loc_6AF0C,(a0)

locret_6AF0A:

		rts
; ---------------------------------------------------------------------------

loc_6AF0C:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_6AF24(pc,d0.w),d1
		jsr	off_6AF24(pc,d1.w)
		bsr.w	sub_6BBC4
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------
off_6AF24:	dc.w loc_6AF32-off_6AF24

		dc.w loc_6AF74-off_6AF24
		dc.w loc_6AFB6-off_6AF24
		dc.w loc_6AF74-off_6AF24
		dc.w loc_6AF74-off_6AF24
		dc.w loc_6AFB6-off_6AF24
		dc.w loc_6B064-off_6AF24
; ---------------------------------------------------------------------------

loc_6AF32:
		lea	ObjDat3_6BD20(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.b	#8,$29(a0)
		move.w	#$80,$1A(a0)
		move.w	#$EF,$2E(a0)
		move.l	#loc_6AF80,$34(a0)
		lea	(ChildObjDat_6BDEC).l,a2
		jsr	CreateChild1_Normal.w
		bne.s	loc_6AF6A
		move.b	#5,$2C(a1)

loc_6AF6A:
		lea	ChildObjDat_6BD8A(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_6AF74:
		jsr	MoveSprite2.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_6AF80:
		move.b	#4,5(a0)
		move.w	$14(a0),$3A(a0)
		move.w	#-$100,$44(a0)
		move.w	#$9F,$30(a0)
		move.w	#$3F,$2E(a0)
		move.l	#loc_6AFC8,$34(a0)
		lea	(PLC_83D6C).l,a1
		jsr	Load_PLC_Raw.w
		jmp	Swing_Setup1.w
; ---------------------------------------------------------------------------

loc_6AFB6:
		jsr	Swing_UpAndDown.w
		jsr	MoveSprite2.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_6AFC8:

		bset	#3,$38(a0)
		cmpi.b	#2,(Player_1+character_id).w
		beq.s	loc_6AFF2
		move.b	#6,5(a0)
		move.w	#$80,$1A(a0)
		move.w	#$9F,$2E(a0)
		move.l	#loc_6B008,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_6AFF2:
		move.b	#$A,5(a0)
		move.w	#$1FF,$2E(a0)
		move.l	#loc_6B03A,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_6B008:
		move.w	#-$100,$1A(a0)
		move.w	#$4F,$2E(a0)
		move.l	#loc_6B01E,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_6B01E:
		move.b	#$A,5(a0)
		move.w	#$FF,$2E(a0)
		move.w	$3A(a0),$14(a0)
		move.l	#loc_6B03A,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_6B03A:

		move.b	#$C,5(a0)
		bclr	#3,$38(a0)
		move.w	$44(a0),$18(a0)
		move.w	#$BF,$2E(a0)
		move.l	#loc_6B08E,$34(a0)
		move.b	#8,$39(a0)
		jmp	Swing_Setup1.w
; ---------------------------------------------------------------------------

loc_6B064:
		jsr	Swing_UpAndDown.w
		jsr	MoveSprite2.w
		jsr	Obj_Wait.w
		subq.w	#1,$30(a0)
		bpl.s	locret_6B08C
		neg.w	$18(a0)
		bchg	#0,4(a0)
		move.w	#$13F,$30(a0)

locret_6B08C:
		rts
; ---------------------------------------------------------------------------

loc_6B08E:
		move.w	#$5F,$2E(a0)
		subq.b	#1,$39(a0)
		bmi.s	loc_6B0A2
		bset	#1,$38(a0)
		rts
; ---------------------------------------------------------------------------

loc_6B0A2:
		move.w	$18(a0),$44(a0)
		clr.w	$18(a0)
		bra.w	loc_6AFC8
; ---------------------------------------------------------------------------

loc_6B0B0:
		move.l	#loc_6B0CC,(a0)
		bset	#4,$38(a0)
		move.l	#loc_6B0E8,$34(a0)
		moveq	#$C,d0
		jmp	Set_IndexedVelocity.w
; ---------------------------------------------------------------------------

loc_6B0CC:
		jsr	MoveSprite.w
		jsr	Obj_Wait.w
		btst	#0,(V_int_run_count+3).w
		beq.w	locret_6AF0A
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_6B0E8:
		bclr	#7,4(a0)
		st	(End_Of_Level_Flag).w
		clr.b	(Boss_flag).w
		move.w	(__u_FAB4).w,d0
		addi.w	#$180,d0
		move.w	d0,(__u_FA92).w

		move.w	#$40C8,$10(a0)		; NAT: Spawn signpost at the centre
		move.l	#Obj_EndSignControl_HitHUD,(a0)
		rts
;		lea	Child6_IncLevX.w,a2
;		jsr	CreateChild6_Simple.w
;		cmpi.b	#2,(Player_1+character_id).w
;		beq.s	loc_6B138
;		jsr	Create_New_Sprite.w
;		bne.s	locret_6B136
;		move.l	#Obj_81,(a1)
;		move.w	#$4250,$10(a1)
;		move.w	#$7E0,$14(a1)

locret_6B136:
;		rts
; ---------------------------------------------------------------------------

loc_6B138:
;		jsr	Create_New_Sprite.w
;		bne.s	locret_6B152
;		move.l	#Obj_81,(a1)
;		move.w	#$4760,$10(a1)
;		move.w	#$360,$14(a1)

locret_6B152:
;		rts
; ---------------------------------------------------------------------------

loc_6B154:
;		move.w	(Camera_X_pos).w,(Camera_min_X_pos).w
;		tst.b	(End_Of_Level_Flag).w
;		bne.w	locret_6AF0A
;		clr.w	(Ctrl_1_logical).w
;		clr.w	(Ctrl_2_logical).w
;		st	(Ctrl_1_locked).w
;		st	(Ctrl_2_locked).w
;		move.b	#-$80,(Player_1+$2E).w
;		jsr	Restore_PlayerControl.w
;		lea	(Player_2).w,a1
;		jsr	Restore_PlayerControl2.w
;		jsr	Obj_PlayLevelMusic.w
;		jsr	Create_New_Sprite.w
;		bne.s	loc_6B19C
;		move.l	#loc_6B7BC,(a1)

loc_6B19C:
;		move.w	#0,(Camera_min_Y_pos).w
;		jmp	Go_Delete_Sprite_2.w
; ---------------------------------------------------------------------------

loc_6B1A8:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_6B1C4(pc,d0.w),d1
		jsr	off_6B1C4(pc,d1.w)
		jsr	Refresh_ChildPosition.w
		moveq	#0,d0
		jmp	Child_DrawTouch_Sprite2_FlickerMove.w
; ---------------------------------------------------------------------------
off_6B1C4:	dc.w loc_6B1CE-off_6B1C4

		dc.w loc_6B1D8-off_6B1C4
		dc.w loc_6B204-off_6B1C4
		dc.w loc_6B22A-off_6B1C4
		dc.w loc_6B25C-off_6B1C4
; ---------------------------------------------------------------------------

loc_6B1CE:
		lea	byte_6BD32(pc),a1
		jmp	SetUp_ObjAttributes3.w
; ---------------------------------------------------------------------------

loc_6B1D8:
		movea.w	$46(a0),a1
		btst	#3,$38(a1)
		bne.s	loc_6B1E6
		rts
; ---------------------------------------------------------------------------

loc_6B1E6:
		move.b	#4,5(a0)
		move.b	#-$5A,$28(a0)
		move.l	#byte_6BDF4,$30(a0)
		move.l	#loc_6B212,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_6B204:
		moveq	#-$40,d0
		jsr	sub_85E52.w
		jmp	Animate_RawGetFaster.w
; ---------------------------------------------------------------------------

loc_6B212:
		move.b	#6,5(a0)
		move.l	#byte_6BDFB,$30(a0)
		lea	ChildObjDat_6BDBA(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_6B22A:
		jsr	Animate_Raw.w
		movea.w	$46(a0),a1
		btst	#3,$38(a1)
		beq.s	loc_6B244
		moveq	#-$40,d0
		jmp	sub_85E52.w
; ---------------------------------------------------------------------------

loc_6B244:
		move.b	#8,5(a0)
		move.l	#byte_6BE01,$30(a0)
		move.l	#loc_6B262,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_6B25C:
		jmp	(Animate_RawGetSlower).l
; ---------------------------------------------------------------------------

loc_6B262:
		move.b	#2,5(a0)
		clr.b	$28(a0)
		rts
; ---------------------------------------------------------------------------

loc_6B26E:
		move.w	$10(a0),-(sp)
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_6B29E(pc,d0.w),d1
		jsr	off_6B29E(pc,d1.w)
		move.w	#$1F,d1
		move.w	#$C,d2
		move.w	#$C,d3
		move.w	(sp)+,d4
		jsr	SolidObjectTop.w
		bsr.w	sub_6BC42
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
off_6B29E:	dc.w loc_6B2AA-off_6B29E

		dc.w loc_6B2F2-off_6B29E
		dc.w loc_6B31E-off_6B29E
		dc.w loc_6B336-off_6B29E
		dc.w loc_6B31E-off_6B29E
		dc.w loc_6B394-off_6B29E
; ---------------------------------------------------------------------------

loc_6B2AA:
		lea	word_6BD3E(pc),a1
		jsr	SetUp_ObjAttributes2.w
		move.w	(Water_level).w,d0
		subq.w	#8,d0
		move.w	d0,$14(a0)
		move.w	d0,$3A(a0)
		move.l	#byte_6BE0C,$30(a0)
		move.l	#loc_6B2F8,$34(a0)
		lea	ChildObjDat_6BDCA(pc),a2
		jsr	CreateChild1_Normal.w
		lea	ChildObjDat_6BDE6(pc),a2
		jsr	CreateChild6_Simple.w
		movea.w	$46(a0),a1
		move.w	$46(a1),$44(a0)
		rts
; ---------------------------------------------------------------------------

loc_6B2F2:
		jmp	Animate_Raw.w
; ---------------------------------------------------------------------------

loc_6B2F8:
		move.b	#4,5(a0)
		move.l	#byte_6BE15,$30(a0)
		move.w	#-$100,$1A(a0)
		move.l	#loc_6B32E,$34(a0)
		lea	ChildObjDat_6BDC2(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_6B31E:
		jsr	MoveSprite2.w
		jsr	Animate_Raw.w
		bra.w	sub_6BC8A
; ---------------------------------------------------------------------------

loc_6B32E:
		move.b	#6,5(a0)

loc_6B334:
		rts
; ---------------------------------------------------------------------------

loc_6B336:
		jsr	Animate_Raw.w
		movea.w	$44(a0),a1
		btst	#3,$38(a1)
		bne.s	loc_6B334
; ---------------------------------------------------------------------------

loc_6B34A:
		move.b	#8,5(a0)
		bset	#3,$38(a0)
		move.w	#$80,$1A(a0)
		move.l	#loc_6B37A,$34(a0)
		move.w	#$80,$18(a0)
		tst.w	$18(a1)
		bpl.s	locret_6B374
		neg.w	$18(a0)

locret_6B374:
		rts
; ---------------------------------------------------------------------------

loc_6B37A:
		move.l	#loc_6B394,(a0)
		move.w	#$F,$2E(a0)
		clr.w	$18(a0)
		move.l	#loc_6B3BC,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_6B394:

		move.w	#$1F,d1
		move.w	#$C,d2
		move.w	#$C,d3
		move.w	$10(a0),d4
		jsr	SolidObjectTop.w
		jsr	Animate_Raw.w
		jsr	Obj_Wait.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_6B3BC:
		jsr	Displace_PlayerOffObject.w
		jmp	Go_Delete_Sprite_2.w
; ---------------------------------------------------------------------------

loc_6B3C8:
		jsr	MoveSprite2.w
		jsr	Animate_Raw.w
		bsr.w	sub_6BC8A
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_6B3DE:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_6B3F6(pc,d0.w),d1
		jsr	off_6B3F6(pc,d1.w)
		bsr.w	sub_6BC70
		jmp	Child_Draw_Sprite2.w
; ---------------------------------------------------------------------------
off_6B3F6:	dc.w loc_6B3FC-off_6B3F6

		dc.w loc_6B410-off_6B3F6
		dc.w loc_6B440-off_6B3F6
; ---------------------------------------------------------------------------

loc_6B3FC:
		lea	byte_6BD46(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#byte_6BE19,$30(a0)
		rts
; ---------------------------------------------------------------------------

loc_6B410:
		bsr.w	Obj_HCZEB_WaterFan_Suck
		bsr.w	sub_6B9AC
		bsr.w	sub_6B916
		jsr	Animate_Raw.w
		movea.w	$46(a0),a1
		btst	#3,$38(a1)
		bne.s	loc_6B430
		rts
; ---------------------------------------------------------------------------

loc_6B430:
		move.b	#4,5(a0)
		move.w	$18(a1),$18(a0)
		bra.w	loc_6BB1E
; ---------------------------------------------------------------------------

loc_6B440:
		bsr.w	sub_6B916
		move.w	$18(a1),$18(a0)
		jsr	MoveSprite2.w
		jmp	Animate_Raw.w
; ---------------------------------------------------------------------------

loc_6B456:

		lea	word_6BD4C(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_6B47A,(a0)
		move.l	#byte_6BE32,$30(a0)

loc_6B46E:
		move.w	(Water_level).w,d0
		subq.w	#4,d0
		move.w	d0,$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_6B47A:
		jsr	Animate_Raw.w
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	word_6B49E(pc,d0.w),d0
		movea.w	$46(a0),a1
		move.w	$10(a1),d1
		add.w	d0,d1
		move.w	d1,$10(a0)
		jmp	Child_Draw_Sprite2.w
; ---------------------------------------------------------------------------
word_6B49E:	dc.w $FFFC
		dc.w 4
; ---------------------------------------------------------------------------

loc_6B4A2:
		lea	word_6BD52(pc),a1
		jsr	SetUp_ObjAttributes2.w
		move.l	#AnimateRaw_DrawTouch,(a0)
		move.l	#byte_6BE36,$30(a0)
		move.l	#Go_Delete_Sprite,$34(a0)
		bra.s	loc_6B46E
; ---------------------------------------------------------------------------

loc_6B4C4:
		lea	ObjDat3_6BD5A(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#Obj_Wait,(a0)
		move.l	#loc_6B4F2,$34(a0)
		bsr.w	sub_6B96C
		tst.b	$2C(a0)
		bne.w	locret_6AF0A
		lea	ChildObjDat_6BDCA(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_6B4F2:
		move.l	#loc_6B502,(a0)
		move.l	#Go_Delete_Sprite_2,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_6B502:
		bsr.w	sub_6BB40
		jmp	AnimateRaw_DrawTouch.w
; ---------------------------------------------------------------------------

loc_6B50C:
		lea	ObjDat3_6BD72(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_6B56C,(a0)
		jsr	Random_Number.w
		andi.w	#$FF,d0
		ext.w	d0
		add.w	d0,$10(a0)
		swap	d0
		move.w	(Water_level).w,d1
		andi.w	#$1F,d0
		add.w	d0,d1
		move.w	d1,$14(a0)
		andi.w	#3,d0
		move.b	d0,$22(a0)
		lsl.w	#2,d0
		move.l	off_6B55C(pc,d0.w),$30(a0)
		move.w	#$1F,$2E(a0)
		move.l	#loc_6B586,$34(a0)
		rts
; ---------------------------------------------------------------------------
off_6B55C:	dc.l word_6AE46
		dc.l word_6AE4A
		dc.l word_6AE4E
		dc.l word_6AE52
; ---------------------------------------------------------------------------

loc_6B56C:

		movea.w	$46(a0),a3
		bsr.w	sub_6BB9A
		jsr	Animate_Raw.w
		jsr	Obj_Wait.w
		jmp	Child_Draw_Sprite2.w
; ---------------------------------------------------------------------------

loc_6B586:
		move.l	#loc_6B598,(a0)
		movea.l	$30(a0),a1
		move.b	1(a1),$22(a0)
		rts
; ---------------------------------------------------------------------------

loc_6B598:
		movea.w	$46(a0),a3
		btst	#3,$38(a3)
		bne.s	loc_6B5AE
		bsr.w	sub_6BB9A
		jmp	Child_Draw_Sprite2.w
; ---------------------------------------------------------------------------

loc_6B5AE:
		move.l	#loc_6B56C,(a0)
		move.w	#$1F,$2E(a0)
		move.l	#Go_Delete_Sprite,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_6B5C4:

		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_6B5D8(pc,d0.w),d1
		jsr	off_6B5D8(pc,d1.w)
		jmp	Child_DrawTouch_Sprite.w
; ---------------------------------------------------------------------------
off_6B5D8:	dc.w loc_6B5E6-off_6B5D8

		dc.w loc_6B600-off_6B5D8
		dc.w loc_6B644-off_6B5D8
		dc.w loc_6B678-off_6B5D8
		dc.w loc_6B6E6-off_6B5D8
		dc.w loc_6B70E-off_6B5D8
		dc.w loc_6B734-off_6B5D8
; ---------------------------------------------------------------------------

loc_6B5E6:
		lea	byte_6BD38(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.b	#8,$1E(a0)
		bsr.w	sub_6B8F0
		jmp	Refresh_ChildPositionAdjusted.w
; ---------------------------------------------------------------------------

loc_6B600:
		jsr	Refresh_ChildPositionAdjusted.w
		movea.w	$46(a0),a1
		btst	#1,$38(a1)
		bne.s	loc_6B614
		rts
; ---------------------------------------------------------------------------

loc_6B614:
		move.b	#4,5(a0)
		tst.b	$2C(a0)
		beq.s	loc_6B622
		rts
; ---------------------------------------------------------------------------

loc_6B622:
		move.b	#6,5(a0)
		move.w	#3,$2E(a0)
		move.l	#loc_6B6BA,$34(a0)
		move.b	#1,$40(a0)
		move.b	#0,$41(a0)
		rts
; ---------------------------------------------------------------------------

loc_6B644:
		jsr	Refresh_ChildPositionAdjusted.w
		movea.w	$46(a0),a1
		btst	#1,$38(a1)
		beq.s	loc_6B658
		rts
; ---------------------------------------------------------------------------

loc_6B658:
		move.b	#6,5(a0)
		subq.b	#2,$2C(a0)
		move.w	#7,$2E(a0)
		move.l	#loc_6B694,$34(a0)
		bsr.w	sub_6B8F0
		bra.w	loc_6B904
; ---------------------------------------------------------------------------

loc_6B678:
		move.b	$40(a0),d0
		add.b	d0,$42(a0)
		move.b	$41(a0),d0
		add.b	d0,$43(a0)
		jsr	Refresh_ChildPositionAdjusted.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_6B694:
		move.b	#2,5(a0)
		tst.b	$2C(a0)
		bne.s	locret_6B6B8
		lea	word_6BDAA(pc),a2
		jsr	(CreateChild7_Normal2).l
		bne.s	locret_6B6B8
		move.w	$46(a0),$46(a1)
		move.b	#4,$2C(a1)

locret_6B6B8:

		rts
; ---------------------------------------------------------------------------

loc_6B6BA:
		move.b	#8,5(a0)
		move.l	#loc_6B71C,$34(a0)
		move.w	#$100,$18(a0)
		movea.w	$46(a0),a1
		bclr	#1,$38(a1)
		btst	#0,4(a1)
		beq.s	locret_6B6E4
		neg.w	$18(a0)

locret_6B6E4:
		rts
; ---------------------------------------------------------------------------

loc_6B6E6:
		move.w	$14(a0),d0
		cmp.w	(Water_level).w,d0
		bhs.s	loc_6B6FE
		jsr	MoveSprite_LightGravity.w
		jsr	ObjHitFloor_DoRoutine.w
		rts
; ---------------------------------------------------------------------------

loc_6B6FE:
		move.b	#$A,5(a0)
		lea	ChildObjDat_6BDD8(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_6B70E:
		jsr	MoveSprite_LightGravity.w
		jmp	ObjHitFloor_DoRoutine.w
; ---------------------------------------------------------------------------

loc_6B71C:
		move.b	#$C,5(a0)
		move.l	#byte_6BE07,$30(a0)
		move.l	#loc_6B73A,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_6B734:
		jmp	Animate_RawGetFaster.w
; ---------------------------------------------------------------------------

loc_6B73A:
		lea	ChildObjDat_6BDE0(pc),a2
		jsr	CreateChild6_Simple.w
		moveq	#$4E,d0
		jsr	Play_Sound_2.w
		lea	ChildObjDat_6BDB2(pc),a2
		jsr	CreateChild1_Normal.w
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------

loc_6B75C:
		lea	word_6BD2C(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_6B76E,(a0)
		rts
; ---------------------------------------------------------------------------

loc_6B76E:
		jsr	Refresh_ChildPositionAdjusted.w
		moveq	#0,d0
		jmp	Child_Draw_Sprite2_FlickerMove.w
; ---------------------------------------------------------------------------

loc_6B77C:
		lea	ObjDat3_6BD66(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_6B7A2,(a0)
		move.l	#byte_6BF02,$30(a0)
		move.l	#Go_Delete_Sprite,$34(a0)
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------

loc_6B7A2:
		jsr	Animate_Raw.w
		cmpi.b	#3,$22(a0)
		bhs.s	loc_6B7B6
		jsr	Add_SpriteToCollisionResponseList.w

loc_6B7B6:
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_6B7BC:
		lea	(ArtKosM_HCZGeyserVert).l,a1
		move.w	#$6D60,d2
		jsr	Queue_Kos_Module.w
		move.l	#loc_6B7D2,(a0)

loc_6B7D2:
		move.l	#loc_6B7EC,(a0)
		move.w	#$5F,$2E(a0)
		move.l	#loc_6B804,$34(a0)
		st	(ScrShake_Value).w
		rts
; ---------------------------------------------------------------------------

loc_6B7EC:
		move.b	(V_int_run_count+3).w,d0
		andi.b	#7,d0
		bne.s	loc_6B7FE
		moveq	#$6F,d0
		jsr	Play_Sound_2.w

loc_6B7FE:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_6B804:
		jsr	Create_New_Sprite.w
		bne.s	loc_6B81C
		move.l	#loc_6B824,(a1)
		st	$2C(a1)
		move.w	#4,$2E(a1)

loc_6B81C:
		lea	loc_6B832(pc),a1
		move.l	a1,(a0)
		jmp	(a1)
; ---------------------------------------------------------------------------

loc_6B824:
		subq.w	#1,$2E(a0)
		bpl.w	locret_6AF0A
		move.l	#loc_6B832,(a0)

loc_6B832:

		lea	ObjDat3_6BD7E(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_6B882,(a0)
		tst.b	$2C(a0)
		bne.s	loc_6B860
		st	(PalCyc_Counters2).w
		st	(ScrShake_Value).w
		moveq	#$57,d0
		jsr	Play_Sound_2.w
		lea	(Player_1).w,a1
		bra.w	loc_6B864
; ---------------------------------------------------------------------------

loc_6B860:
		lea	(Player_2).w,a1

loc_6B864:
		move.w	a1,$44(a0)
		move.w	$10(a1),d0
		move.w	d0,$10(a0)
		move.w	(Camera_Y_pos).w,d1
		addi.w	#$130,d1
		move.w	d1,$14(a0)
		jmp	(loc_6BCB2).l
; ---------------------------------------------------------------------------

loc_6B882:
		movea.w	$44(a0),a1
		move.w	$14(a0),d0
		subq.w	#6,d0
		move.w	d0,$14(a0)
		subi.w	#$60,d0
		cmp.w	$14(a1),d0
		bhs.s	loc_6B8B2
		move.b	#-$7F,$2E(a1)
		move.b	#$1A,$20(a1)
		move.l	#loc_6B8C8,(a0)
		move.w	#$5F,$2E(a0)

loc_6B8B2:

		tst.b	$2C(a0)
		bne.s	loc_6B8C2
		move.l	a0,-(sp)
		jsr	(AnPal_HCZ1).l
		movea.l	(sp)+,a0

loc_6B8C2:

		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_6B8C8:
		movea.w	$44(a0),a1
		subq.w	#6,$14(a0)
		subq.w	#6,$14(a1)
		tst.b	$2C(a0)
		bne.s	loc_6B8C2
		subq.w	#1,$2E(a0)
		bpl.s	loc_6B8B2
		move.w	#$200,d0
		jsr	StartNewLevel.w
		jmp	Delete_Current_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_6B8F0:

		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	word_6B8FE(pc,d0.w),8(a0)
		rts
; End of function sub_6B8F0

; ---------------------------------------------------------------------------
word_6B8FE:	dc.w prio(5), prio(4), prio(3)
; ---------------------------------------------------------------------------

loc_6B904:
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	word_6B912(pc,d0.w),$40(a0)
		rts
; ---------------------------------------------------------------------------
word_6B912:	dc.w  $101
		dc.w  $100

; =============== S U B R O U T I N E =======================================


sub_6B916:

		movea.w	$46(a0),a1
		moveq	#0,d0
		move.b	$39(a1),d0
		cmp.b	$39(a0),d0
		beq.s	locret_6B946
		move.b	d0,$39(a0)
		move.b	byte_6B949(pc,d0.w),d1
		ext.w	d1
		move.w	(Water_level).w,d2
		add.w	d1,d2
		move.w	d2,$14(a0)
		lsl.w	#2,d0
		move.l	off_6B954(pc,d0.w),$30(a0)
		clr.b	$24(a0)

locret_6B946:
		rts
; End of function sub_6B916

; ---------------------------------------------------------------------------
		dc.b $F8
byte_6B949:	dc.b $F8
		dc.b $F0
		dc.b $E8
		dc.b $E0
		dc.b $D8
		dc.b $D8
		dc.b 0
		dc.b 0
		dc.b 6
		dc.b $BE
		dc.b $19
off_6B954:	dc.l byte_6BE19
		dc.l byte_6BE1E
		dc.l byte_6BE23
		dc.l byte_6BE28
		dc.l byte_6BE2D
		dc.l byte_6BE2D

; =============== S U B R O U T I N E =======================================


sub_6B96C:
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	d0,$2E(a0)
		move.w	word_6B98E(pc,d0.w),d1
		move.w	(Water_level).w,d2
		add.w	d1,d2
		move.w	d2,$14(a0)
		add.w	d0,d0
		move.l	off_6B998(pc,d0.w),$30(a0)
		rts
; End of function sub_6B96C

; ---------------------------------------------------------------------------
word_6B98E:	dc.w $FFF8
		dc.w $FFE8
		dc.w $FFD8
		dc.w $FFC8
		dc.w $FFB8
off_6B998:	dc.l byte_6BE3F
		dc.l byte_6BE76
		dc.l byte_6BEA5
		dc.l byte_6BECC
		dc.l byte_6BEEB

; =============== S U B R O U T I N E =======================================


sub_6B9AC:
		move.w	$10(a0),d0
		move.w	(Water_level).w,d1
		addq.w	#8,d1
		move.l	#$20000,d2
		move.l	d2,d3		; NAT: Some oops code below, need to copy var
		lea	(Player_1).w,a1
		bsr.s	sub_6B9C8
		move.l	d3,d2		; NAT: Copy it back
		lea	(Player_2).w,a1
; End of function sub_6B9AC


; =============== S U B R O U T I N E =======================================


sub_6B9C8:
		tst.b	$2E(a1)
		bne.s	locret_6B9E0
		cmp.w	$14(a1),d1
		bhs.s	locret_6B9E0
		cmp.w	$10(a1),d0
		bhs.s	loc_6B9DC
		neg.l	d2

loc_6B9DC:
		add.l	d2,$10(a1)

locret_6B9E0:
		rts
; End of function sub_6B9C8


; =============== S U B R O U T I N E =======================================


Obj_HCZEB_WaterFan_Suck:
		movea.w	$46(a0),a1
		moveq	#0,d0
		move.b	$39(a1),d0
		lsl.w	#2,d0
		lea	word_6BAC2(pc),a1
		lea	(a1,d0.w),a1
		moveq	#$42,d4
		lea	(Player_1).w,a2
		bsr.s	sub_6BA06
		moveq	#$43,d4
		lea	(Player_2).w,a2
; End of function Obj_HCZEB_WaterFan_Suck


; =============== S U B R O U T I N E =======================================


sub_6BA06:
		movea.w	$46(a0),a3
		btst	#7,$2A(a3)
		bne.w	sub_6BB02
		cmpi.b	#6,5(a2)
		bhs.w	loc_6BAB2
		tst.b	$34(a2)
		bne.w	loc_6BAB2
		tst.b	$2E(a2)
		beq.s	loc_6BA32
		tst.b	(a0,d4.w)
		bne.s	loc_6BA6C

loc_6BA32:
		move.w	$14(a0),d0
		move.w	$14(a2),d2
		add.w	(a1),d0
		cmp.w	d0,d2
		blo.w	locret_6BB00
		add.w	2(a1),d0
		cmp.w	d0,d2
		bhs.w	locret_6BB00
		move.w	$10(a0),d0
		move.w	$10(a2),d2
		sub.w	d2,d0
		addi.w	#$10,d0
		cmpi.w	#$20,d0
		bhs.w	locret_6BB00
		tst.b	$2E(a2)
		bne.s	loc_6BA6C
		bsr.w	sub_6BADA

loc_6BA6C:

		move.w	$14(a0),d0
		move.w	$14(a2),d2
		add.w	(a1),d0		; NAT: Was post increment. Broke Tails. 0/10 thx Sonic Team
		cmp.w	d0,d2
		blo.w	sub_6BB02
		move.w	$10(a2),d0
		move.w	$18(a2),d1
		move.w	#$80,d2
		sub.w	$10(a0),d0
		cmpi.w	#-$12,d0
		ble.s	sub_6BB02
		cmpi.w	#$12,d0
		bge.s	sub_6BB02
		tst.w	d0
		bmi.s	loc_6BA9E
		neg.w	d2

loc_6BA9E:
		add.w	d2,d1
		move.w	d1,$18(a2)
		ext.l	d1
		lsl.l	#8,d1
		add.l	d1,$10(a2)
		subq.w	#2,$14(a2)
		rts
; ---------------------------------------------------------------------------

loc_6BAB2:

		jsr	Displace_PlayerOffObject.w
		clr.b	(a0,d4.w)
		clr.b	$2E(a2)
		rts
; End of function sub_6BA06

; ---------------------------------------------------------------------------
word_6BAC2:	dc.w  $FFE8,   $48
		dc.w  $FFE0,   $58
		dc.w  $FFD8,   $68
		dc.w  $FFD0,   $78
		dc.w  $FFC8,   $88
		dc.w  $FFB8,   $88

; =============== S U B R O U T I N E =======================================


sub_6BADA:
		st	(a0,d4.w)
		bset	#1,$2A(a2)
		move.b	#1,$2E(a2)
		move.b	#$18,$20(a2)
		clr.b	$3D(a2)
		clr.w	$18(a2)
		clr.w	$1A(a2)
		clr.w	$1C(a2)

locret_6BB00:

		rts
; End of function sub_6BADA


; =============== S U B R O U T I N E =======================================


sub_6BB02:
		clr.b	(a0,d4.w)
		bset	#1,$2A(a2)
		clr.b	$2E(a2)
		move.b	#2,$20(a2)
		move.w	#-$200,$1A(a2)

locret_6BB3E:
		rts
; ---------------------------------------------------------------------------

loc_6BB1E:
		tst.b	$42(a0)
		beq.s	loc_6BB2E
		moveq	#$42,d4		; NAT: Was clr $42(a0), and it broke Tails because of the routine
		lea	(Player_1).w,a2
		bsr.s	sub_6BB02

loc_6BB2E:
		tst.b	$43(a0)
		beq.s	locret_6BB3E
		moveq	#$43,d4		; NAT: Was clr $43(a0), and it broke Tails because of the routine
		lea	(Player_2).w,a2
		bra.s	sub_6BB02

; =============== S U B R O U T I N E =======================================


sub_6BB40:
		cmpi.b	#$30,$23(a0)
		bhs.s	locret_6BB90
		lea	word_6BB92(pc),a1
		lea	(Player_1).w,a2
		bsr.w	sub_6BB5C
		lea	word_6BB92(pc),a1
		lea	(Player_2).w,a2
; End of function sub_6BB40


; =============== S U B R O U T I N E =======================================


sub_6BB5C:
		tst.b	$2E(a2)
		bne.s	locret_6BB90
		move.w	$10(a0),d0
		move.w	$10(a2),d1
		add.w	(a1)+,d0
		cmp.w	d0,d1
		blo.s	locret_6BB90
		add.w	(a1)+,d0
		cmp.w	d0,d1
		bhs.s	locret_6BB90
		move.w	$14(a0),d0
		move.w	$14(a2),d1
		add.w	(a1)+,d0
		cmp.w	d0,d1
		blo.s	locret_6BB90
		add.w	(a1)+,d0
		cmp.w	d0,d1
		bhs.s	locret_6BB90
		move.w	#-$800,$1A(a2)

locret_6BB90:
		rts
; End of function sub_6BB5C

; ---------------------------------------------------------------------------
word_6BB92:	dc.w  $FFF4,   $18

		dc.w  $FFC8,   $40

; =============== S U B R O U T I N E =======================================


sub_6BB9A:

		movea.w	$46(a0),a1
		move.w	$10(a0),d0
		move.w	$18(a0),d1
		move.w	#$80,d2
		sub.w	$10(a1),d0
		tst.w	d0
		bmi.s	loc_6BBB4
		neg.w	d2

loc_6BBB4:
		add.w	d2,d1
		move.w	d1,$18(a0)
		ext.l	d1
		lsl.l	#8,d1
		add.l	d1,$10(a0)
		rts
; End of function sub_6BB9A


; =============== S U B R O U T I N E =======================================


sub_6BBC4:
		tst.l	(a0)
		beq.s	locret_6BC1A
		tst.b	$28(a0)
		bne.s	locret_6BC1A
		tst.b	$29(a0)
		beq.s	loc_6BC1C
		tst.b	$20(a0)
		bne.s	loc_6BBE8
		move.b	#$20,$20(a0)
		moveq	#$6E,d0
		jsr	Play_Sound_2.w

loc_6BBE8:
		bset	#6,$2A(a0)
		moveq	#0,d0
		btst	#0,$20(a0)
		bne.s	loc_6BBFA
		addq.w	#6,d0

loc_6BBFA:
		lea	word_6BC30(pc),a1
		lea	word_6BC36(pc,d0.w),a2
		jsr	CopyWordData_3.w
		subq.b	#1,$20(a0)
		bne.s	locret_6BC1A
		bclr	#6,$2A(a0)
		move.b	$25(a0),$28(a0)

locret_6BC1A:
		rts
; ---------------------------------------------------------------------------

loc_6BC1C:
		move.l	#Wait_FadeToLevelMusic,(a0)
		move.l	#loc_6B0B0,$34(a0)
		jmp	BossDefeated_StopTimer.w
; End of function sub_6BBC4

; ---------------------------------------------------------------------------
word_6BC30:	dc.w $FC34
		dc.w $FC36
		dc.w $FC3C
word_6BC36:	dc.w	  6,   $20,  $624,  $EEE,  $EEE,  $EEE

; =============== S U B R O U T I N E =======================================

sub_6BC42:
		movea.w	$44(a0),a1
		btst	#7,$2A(a1)
		beq.s	locret_6BC88
		bset	#7,$2A(a0)
		move.l	#loc_6B3C8,(a0)
		move.w	#$100,$1A(a0)
		move.l	#Go_Delete_Sprite_2,$34(a0)
		jmp	Displace_PlayerOffObject.w

; =============== S U B R O U T I N E =======================================

sub_6BC70:
		movea.w	$46(a0),a1
		btst	#7,$2A(a1)
		beq.s	locret_6BC88
		bset	#7,$2A(a0)
		move.b	#4,5(a0)

locret_6BC88:
		rts

; =============== S U B R O U T I N E =======================================

sub_6BC8A:

		move.w	$3A(a0),d0
		sub.w	$14(a0),d0
		bcs.s	loc_6BCAC
		andi.w	#$F0,d0
		lsr.w	#4,d0
		move.b	d0,$39(a0)
		tst.w	$1A(a0)
		bpl.s	locret_6BCAA
		cmpi.b	#5,d0
		bhs.s	loc_6BCAC

locret_6BCAA:
		rts
; ---------------------------------------------------------------------------

loc_6BCAC:

		movea.l	$34(a0),a2
		jmp	(a2)
; End of function sub_6BC8A

; ---------------------------------------------------------------------------

loc_6BCB2:
		lea	(byte_303EA).l,a3
		move.w	$10(a0),d2
		move.w	$14(a0),d3
		subi.w	#$80,d3
		moveq	#7,d1

loc_6BCC6:
		jsr	Create_New_Sprite3.w
		bne.s	locret_6BD1E
		move.l	#loc_3011A,(a1)
		move.l	#Map_HCZWaterWallDebris,$C(a1)
		move.w	#$43C3,$A(a1)
		move.b	#-$7C,4(a1)
		move.b	(a3)+,d0
		ext.w	d0
		add.w	d2,d0
		move.w	d0,$10(a1)
		move.b	(a3)+,d0
		ext.w	d0
		add.w	d3,d0
		move.w	d0,$14(a1)
		move.w	#prio(5),8(a1)
		move.b	#$18,7(a1)
		move.b	#$18,6(a1)
		move.w	(a3)+,$18(a1)
		move.w	(a3)+,$1A(a1)
		move.b	d1,$22(a1)
		dbf	d1,loc_6BCC6

locret_6BD1E:
		rts
; ---------------------------------------------------------------------------
ObjDat3_6BD20:	dc.l Map_HCZEndBoss
		dc.w $A320
		dc.w prio(2)
		dc.b $2C
		dc.b $1C
		dc.b 0
		dc.b 6
word_6BD2C:	dc.w prio(4)
		dc.b $C
		dc.b 4
		dc.b 1
		dc.b 0
byte_6BD32:	dc.w prio(2)
		dc.b $1C
		dc.b 4
		dc.b 2
		dc.b 0
byte_6BD38:	dc.w prio(2)
		dc.b $1C
		dc.b 4
		dc.b 6
		dc.b 0
word_6BD3E:	dc.w $8320
		dc.w prio(1)
		dc.b $14
		dc.b $C
		dc.b $17
		dc.b 0
byte_6BD46:	dc.w prio(1)
		dc.b $14
		dc.b $30
		dc.b $D
		dc.b 0
word_6BD4C:	dc.w prio(0)
		dc.b $10
		dc.b 4
		dc.b $1A
		dc.b 0
word_6BD52:	dc.w $8320
		dc.w prio(1)
		dc.b $C
		dc.b 8
		dc.b $18
		dc.b 0
ObjDat3_6BD5A:	dc.l Map_HCZEndBoss
		dc.w $8320
		dc.w prio(2)
		dc.b $C
		dc.b $10
		dc.b 8
		dc.b 0
ObjDat3_6BD66:	dc.l Map_Explosion
		dc.w $8000|AT_Explosion
		dc.w prio(1)
		dc.b $C
		dc.b $C
		dc.b 0
		dc.b $8B
ObjDat3_6BD72:	dc.l Map_Bubbler
		dc.w $845C
		dc.w prio(5)
		dc.b $10
		dc.b $10
		dc.b 0
		dc.b 0
ObjDat3_6BD7E:	dc.l Map_HCZWaterWall
		dc.w $436B
		dc.w prio(5)
		dc.b $20
		dc.b $60
		dc.b 1
		dc.b 0
ChildObjDat_6BD8A:dc.w 4
		dc.l loc_6B5C4
		dc.w $2312
		dc.l loc_6B5C4
		dc.w $1B0A
		dc.l loc_6B5C4
		dc.w $130A
		dc.l loc_6B75C
		dc.w $1C
		dc.l loc_6B1A8
		dc.w $24
word_6BDAA:	dc.w 0
		dc.l loc_6B5C4
		dc.b $13
		dc.b $A
ChildObjDat_6BDB2:dc.w 0

		dc.l loc_6B77C
		dc.w 0
ChildObjDat_6BDBA:dc.w 0
		dc.l loc_6B26E
		dc.w 0
ChildObjDat_6BDC2:dc.w 0
		dc.l loc_6B3DE
		dc.w 0
ChildObjDat_6BDCA:dc.w 1

		dc.l loc_6B456
		dc.w $FC00
		dc.l loc_6B456
		dc.w $400
ChildObjDat_6BDD8:dc.w 0
		dc.l loc_6B4A2
		dc.w 0
ChildObjDat_6BDE0:dc.w 4
		dc.l loc_6B4C4
ChildObjDat_6BDE6:dc.w $13
		dc.l loc_6B50C
ChildObjDat_6BDEC:dc.w 0
		dc.l Obj_RobotnikShip2
		dc.w $C
byte_6BDF4:	dc.b 7
		dc.b 8
		dc.b 2
		dc.b 3
		dc.b 4
		dc.b 5
		dc.b $FC
byte_6BDFB:	dc.b 0
		dc.b 2
		dc.b 3
		dc.b 4
		dc.b 5
		dc.b $FC
byte_6BE01:	dc.b 7
		dc.b 2
		dc.b 3
		dc.b 4
		dc.b 5
		dc.b $FC
byte_6BE07:	dc.b 5
		dc.b 8
		dc.b 6
		dc.b 7
		dc.b $FC
byte_6BE0C:	dc.b 3
		dc.b $17
		dc.b $17
		dc.b $22
		dc.b $16
		dc.b $21
		dc.b $15
		dc.b $20
		dc.b $F4
byte_6BE15:	dc.b 3
		dc.b $15
		dc.b $20
		dc.b $FC
byte_6BE19:	dc.b 3

		dc.b $D
		dc.b $F
		dc.b $11
		dc.b $FC
byte_6BE1E:	dc.b 3
		dc.b $24
		dc.b $25
		dc.b $26
		dc.b $FC
byte_6BE23:	dc.b 3
		dc.b $27
		dc.b $28
		dc.b $29
		dc.b $FC
byte_6BE28:	dc.b 3
		dc.b $2A
		dc.b $2B
		dc.b $2C
		dc.b $FC
byte_6BE2D:	dc.b 3
		dc.b $2D
		dc.b $2E
		dc.b $2F
		dc.b $FC
byte_6BE32:	dc.b 1
		dc.b $1A
		dc.b $23
		dc.b $FC
byte_6BE36:	dc.b  $18,   2
		dc.b  $18,   2
		dc.b  $30,   3
		dc.b  $19,   4
		dc.b  $F4
byte_6BE3F:	dc.b	8,   0,	  8,   0
		dc.b  $1B,   0,	  9,   0
		dc.b  $1C,   0,	 $A,   0
		dc.b  $1D,   0,	 $A,   0
		dc.b  $1D,   0,	 $A,   0
		dc.b  $1D,   0,	 $A,   0
		dc.b  $1D,   0,	 $A,   0
		dc.b  $1D,   0,	 $A,   0
		dc.b  $1D,   0,	 $A,   0
		dc.b  $1D,   0,	 $A,   0
		dc.b  $1D,   0,	 $A,   0
		dc.b  $1D,   0,	 $B,   2
		dc.b  $1E,   2,	 $C,   3
		dc.b  $1F,   3,	$F4
byte_6BE76:	dc.b	8,   0,	  8,   0
		dc.b  $1B,   0,	  9,   0
		dc.b  $1C,   0,	 $A,   0
		dc.b  $1D,   0,	 $A,   0
		dc.b  $1D,   0,	 $A,   0
		dc.b  $1D,   0,	 $A,   0
		dc.b  $1D,   0,	 $A,   0
		dc.b  $1D,   0,	 $A,   0
		dc.b  $1D,   0,	 $A,   0
		dc.b  $1D,   0,	 $B,   2
		dc.b  $1E,   2,	 $C,   3
		dc.b  $1F,   3,	$F4
byte_6BEA5:	dc.b	8,   0,	  8,   0
		dc.b  $1B,   0,	  9,   0
		dc.b  $1C,   0,	 $A,   0
		dc.b  $1D,   0,	 $A,   0
		dc.b  $1D,   0,	 $A,   0
		dc.b  $1D,   0,	 $A,   0
		dc.b  $1D,   0,	 $A,   0
		dc.b  $1D,   0,	 $B,   2
		dc.b  $1E,   2,	 $C,   3
		dc.b  $1F,   3,	$F4
byte_6BECC:	dc.b	8,   0,	  8,   0
		dc.b  $1B,   0,	  9,   0
		dc.b  $1C,   0,	 $A,   0
		dc.b  $1D,   0,	 $A,   0
		dc.b  $1D,   0,	 $A,   0
		dc.b  $1D,   0,	 $B,   2
		dc.b  $1E,   2,	 $C,   3
		dc.b  $1F,   3,	$F4
byte_6BEEB:	dc.b	8,   0,	  8,   0
		dc.b  $1B,   0,	  9,   0
		dc.b  $1C,   0,	 $A,   0
		dc.b  $1D,   0,	 $B,   2
		dc.b  $1E,   2,	 $C,   3
		dc.b  $1F,   3,	$F4
byte_6BF02:	dc.b	7
		dc.b	0
		dc.b	0
		dc.b	1
		dc.b	2
		dc.b	3
		dc.b	4
		dc.b  $F4
Pal_HCZEndBoss:	binclude "Levels/HCZ/Palettes/End Boss.bin"
	even

; ---------------------------------------------------------------------------

Obj_MGZ2DrillingEggman:

		move.l	#Obj_Wait,(a0)
		st	Boss_flag.w
		move.w	#$78,$2E(a0)
		move.l	#Obj_MGZ2DrillingEggmanGo,$34(a0)
		clr.b	$2C(a0)
		moveq	#-$1F,d0
		jsr	Play_Sound.w
		lea	(ArtKosM_MGZEndBoss).l,a1
		move.w	#$67E0,d2
		jsr	Queue_Kos_Module.w
		lea	(ArtKosM_MGZEndBossDebris).l,a1
		move.w	#-$7440,d2
		jsr	Queue_Kos_Module.w
		moveq	#$6D,d0
		jsr	Load_PLC.w
		lea	Pal_MGZEndBoss(pc),a1
		jmp	PalLoad_Line1.w
; ---------------------------------------------------------------------------

Obj_MGZ2DrillingEggmanGo:
		st	BossHitMode.w		; NAT: Enable hit mode
		clr.w	BossHitsP1.w		; clear hits count

		move.l	#Obj_MGZ2DrillingEggmanStart,(a0)
		moveq	#Mus_Boss,d0		; NAT: Play boss music
		move.b	d0,(Level_music+$1).w
		jmp	Play_Sound.w

locret_6BF96:

		rts
; ---------------------------------------------------------------------------

Obj_MGZ2DrillingEggmanStart:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_6BFB0(pc,d0.w),d1
		jsr	off_6BFB0(pc,d1.w)
		bsr.w	MGZ2_SpecialCheckHit
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------
off_6BFB0:	dc.w loc_6BFCA-off_6BFB0

		dc.w loc_6C014-off_6BFB0
		dc.w loc_6C024-off_6BFB0
		dc.w loc_6C07E-off_6BFB0
		dc.w loc_6C0B2-off_6BFB0
		dc.w loc_6C0E4-off_6BFB0
		dc.w loc_6C122-off_6BFB0
		dc.w loc_6C136-off_6BFB0
		dc.w loc_6C0E4-off_6BFB0
		dc.w loc_6C16A-off_6BFB0
		dc.w loc_6C0E4-off_6BFB0
		dc.w loc_6C1D4-off_6BFB0
		dc.w loc_6C2B2-off_6BFB0
; ---------------------------------------------------------------------------

loc_6BFCA:
		lea	ObjDat_MGZDrillBoss(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.b	#$7F,$29(a0)
		move.b	#$30,$1F(a0)
		move.b	#$24,$1E(a0)
		move.w	#$C,$26(a0)
		bset	#3,$38(a0)
		move.w	#-$800,$1A(a0)
		lea	Child1_MakeRoboShip3(pc),a2
		jsr	CreateChild1_Normal.w
		bne.s	loc_6C00A

loc_6C004:
		move.b	#9,$2C(a1)

loc_6C00A:
		lea	ChildObjDat_6D7C0(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_6C014:
		move.b	#4,5(a0)
		moveq	#$59,d0
		jmp	Play_Sound_2.w
; ---------------------------------------------------------------------------

loc_6C024:
		move.w	$1A(a0),d0
		addi.w	#$40,d0
		cmpi.w	#$C0,d0
		bge.s	loc_6C06E
		move.w	d0,$1A(a0)
		btst	#7,$38(a0)
		bne.s	loc_6C068
		move.w	(Camera_Y_pos).w,d1
		addi.w	#$120,d1
		cmp.w	$14(a0),d1
		blo.s	loc_6C068
		bset	#7,$38(a0)
		lea	ChildObjDat_6D7EA(pc),a2
		btst	#0,4(a0)
		beq.s	loc_6C062
		lea	ChildObjDat_6D7F2(pc),a2

loc_6C062:
		jsr	CreateChild3_NormalRepeated.w

loc_6C068:

		jmp	MoveSprite2.w
; ---------------------------------------------------------------------------

loc_6C06E:
		move.b	#6,5(a0)
		move.b	#5,$39(a0)
		jmp	Swing_Setup1.w
; ---------------------------------------------------------------------------

loc_6C07E:
		btst	#6,$2A(a0)
		bne.s	loc_6C092
		jsr	Swing_UpAndDown_Count.w
		tst.b	$39(a0)
		bpl.s	loc_6C0AC

loc_6C092:
		move.b	#$16,5(a0)
		move.w	#-$400,$1A(a0)
		move.w	#$7F,$2E(a0)
		move.l	#loc_6C200,$34(a0)

loc_6C0AC:
		jmp	MoveSprite2.w
; ---------------------------------------------------------------------------

loc_6C0B2:
		subq.w	#1,$2E(a0)
		bpl.s	loc_6C0D8
		move.w	#3,$2E(a0)
		subq.w	#2,$26(a0)
		bne.s	loc_6C0D8
		move.b	#$A,5(a0)
		move.w	#$3F,$2E(a0)
		move.l	#loc_6C0F6,$34(a0)

loc_6C0D8:

		jsr	Swing_UpAndDown.w
		jmp	MoveSprite2.w
; ---------------------------------------------------------------------------

loc_6C0E4:
		jsr	Swing_UpAndDown.w
		jsr	MoveSprite2.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_6C0F6:
		move.l	#loc_6C10C,$34(a0)

loc_6C0FE:
		bset	#3,$38(a0)
		move.w	#$5F,$2E(a0)
		rts
; ---------------------------------------------------------------------------

loc_6C10C:
		move.b	#$C,5(a0)
		move.w	#$1F,$2E(a0)
		move.l	#loc_6C128,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_6C122:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_6C128:
		move.b	#$E,5(a0)
		bset	#1,$38(a0)
		rts
; ---------------------------------------------------------------------------

loc_6C136:
		btst	#1,$38(a0)
		beq.s	loc_6C140
		rts
; ---------------------------------------------------------------------------

loc_6C140:
		move.b	#$10,5(a0)
		bclr	#3,$38(a0)
		move.w	#$5F,$2E(a0)
		move.l	#loc_6C15C,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_6C15C:
		move.b	#$12,5(a0)
		move.w	#3,$2E(a0)
		rts
; ---------------------------------------------------------------------------

loc_6C16A:
		jsr	Swing_UpAndDown.w
		jsr	MoveSprite2.w
		subq.w	#1,$2E(a0)
		bpl.s	locret_6C18E
		move.w	#3,$2E(a0)
		addq.w	#2,$26(a0)
		cmpi.w	#$C,$26(a0)
		bhs.s	loc_6C190

locret_6C18E:
		rts
; ---------------------------------------------------------------------------

loc_6C190:
		move.b	#$14,5(a0)
		move.w	#$1F,$2E(a0)
		move.l	#loc_6C1A6,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_6C1A6:
		move.l	#loc_6C1B2,$34(a0)
		bra.w	loc_6C0FE
; ---------------------------------------------------------------------------

loc_6C1B2:
		move.b	#$16,5(a0)
		move.w	#-$400,$1A(a0)
		move.w	#$7F,$2E(a0)
		move.l	#loc_6C200,$34(a0)
		bclr	#7,$38(a0)
		rts
; ---------------------------------------------------------------------------

loc_6C1D4:
		jsr	ObjCheckCeilingDist.w
		tst.w	d1
		bmi.s	loc_6C1E4
		jmp	Move_WaitNoFall.w
; ---------------------------------------------------------------------------

loc_6C1E4:
		move.b	#$18,5(a0)
		lea	ChildObjDat_6D7EA(pc),a2
		btst	#0,4(a0)
		beq.s	loc_6C1FA
		lea	ChildObjDat_6D7F2(pc),a2

loc_6C1FA:
		jmp	CreateChild3_NormalRepeated.w
; ---------------------------------------------------------------------------

loc_6C200:
		jsr	Boss_DisableHitMode		; NAT: Disable hit mode
		bset	#5,$38(a0)
		clr.b	(Boss_flag).w
		move.l	#Delete_Current_Sprite,(a0)
		jsr	Obj_PlayLevelMusic.w
		lea	(MGZ_8x8_Primary_KosM).l,a1
		move.w	#0,d2
		jsr	Queue_Kos_Module.w
		lea	(MGZ2_8x8_Secondary_KosM).l,a1
		move.w	#$4A40,d2
		jsr	Queue_Kos_Module.w
		moveq	#$14,d0
		jsr	Load_PLC.w
		lea	(ArtKosM_Spiker).l,a1
		move.w	#-$5A00,d2
		jsr	Queue_Kos_Module.w
		lea	(ArtKosM_Mantis).l,a1
		move.w	#-$5620,d2
		jsr	Queue_Kos_Module.w
		lea	(PLC_83D3A).l,a1
		jsr	Load_PLC_Raw.w
		lea	(Pal_MGZ).l,a1
		jsr	PalLoad_Line1.w
		move.w	#$1DF,(Camera_min_Y_pos).w
		st	(__u_EEB8).w
		btst	#0,4(a0)
		bne.s	loc_6C29E
		move.w	#$6000,(__u_FA92).w
		jsr	Create_New_Sprite.w
		bne.s	locret_6C29C
		move.l	#Obj_IncLevEndXGradual,(a1)

locret_6C29C:
		rts
; ---------------------------------------------------------------------------

loc_6C29E:
		clr.w	(__u_FA94).w
		jsr	Create_New_Sprite.w
		bne.s	locret_6C2B0
		move.l	#Obj_DecLevStartXGradual,(a1)

locret_6C2B0:
		rts
; ---------------------------------------------------------------------------

loc_6C2B2:
		jsr	MoveSprite2.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_6C2BE:
		move.l	#Obj_Wait,(a0)
		bset	#4,$38(a0)
		move.l	#loc_6C2E2,$34(a0)
		move.w	#prio(4),8(a0)
		lea	ChildObjDat_6D822(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_6C2E2:
		move.w	a0,a2			; copy because bork
		lea	Level_layout_main+$3C.w,a5; get layout address table
		lea	MGZ2_AltMod(pc),a1	; get alt mod data
		jsr	LayoutMod_AltLayouts	; do alternate layouts

		move.w	a2,a0			; copy addr back
		jsr	(loc_694AA).l		; NAT: Signpost loads here
		bra.w	loc_6C9E2		; go delete yourselves
; ---------------------------------------------------------------------------

MGZ2_AltMod:
	dc.b $79, 3-1, $9A, $9A, $9A
	dc.b 0
	even

loc_6C2EE:
;		tst.b	(End_Of_Level_Flag).w
;		bne.w	locret_6BF96
;		move.l	#locret_6C318,(a0)
;		bset	#4,$38(a0)
;		jsr	Obj_PlayLevelMusic.w
;		jsr	Create_New_Sprite.w
;		bne.s	locret_6C316
;		move.l	#loc_6D104,(a1)

;locret_6C316:
;		rts
; ---------------------------------------------------------------------------

;locret_6C318:
;		rts
; ---------------------------------------------------------------------------

	include "General/Boss/MGZ EndBoss.asm"
	include "General/Boss/LRZ2.asm"

Obj_A2_1:
		lea	word_6C688(pc),a1
		jsr	(Check_CameraInRange).l
		clr.b	$26(a0)		; NAT: Disable boss music
		jsr	sub_85D6A.w
		move.l	#loc_6C6F4,(a0)
		move.l	#loc_6C6FA,$34(a0)
		lea	(ArtKosM_MGZEndBoss).l,a1
		move.w	#$67E0,d2
		jsr	Queue_Kos_Module.w
		lea	(ArtKosM_MGZEndBossDebris).l,a1
		move.w	#-$7440,d2
		jsr	Queue_Kos_Module.w
		moveq	#$6D,d0
		jsr	Load_PLC.w
		cmpi.b	#2,(Player_1+character_id).w
		lea	Pal_MGZEndBoss(pc),a1
		jmp	PalLoad_Line1.w
; ---------------------------------------------------------------------------

loc_6C6F4:
		jmp	loc_85CA4.w
; ---------------------------------------------------------------------------

loc_6C6FA:
		move.l	#loc_6C702,(a0)
		rts
; ---------------------------------------------------------------------------

loc_6C702:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_6C71A(pc,d0.w),d1
		jsr	off_6C71A(pc,d1.w)
		bsr.w	loc_6D61E
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------
off_6C71A:	dc.w loc_6C72A-off_6C71A

		dc.w loc_6C782-off_6C71A
		dc.w loc_6C796-off_6C71A
		dc.w loc_6C814-off_6C71A
		dc.w loc_6C7D8-off_6C71A
		dc.w loc_6C814-off_6C71A
		dc.w loc_6C83C-off_6C71A
		dc.w loc_6C88A-off_6C71A
; ---------------------------------------------------------------------------

loc_6C72A:
		lea	ObjDat_MGZDrillBoss(pc),a1
		jsr	SetUp_ObjAttributes.w
		st	$46(a0)
		move.b	#8,$29(a0)
		move.b	#$1C,$1E(a0)
		move.w	#$C,$26(a0)
		move.b	#2,$2C(a0)
		bset	#3,$38(a0)
		move.w	#$3F,$2E(a0)
		move.l	#loc_6C788,$34(a0)
		lea	(Child1_MakeRoboShip3).l,a2
		jsr	CreateChild1_Normal.w
		bne.s	loc_6C778
		move.b	#9,$2C(a1)

loc_6C778:
		lea	ChildObjDat_6D7C0(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_6C782:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_6C788:

		move.b	#4,5(a0)
		bset	#1,$38(a0)
		rts
; ---------------------------------------------------------------------------

loc_6C796:
		btst	#2,$38(a0)
		bne.s	loc_6C7A0
		rts
; ---------------------------------------------------------------------------

loc_6C7A0:
		move.b	#6,5(a0)
		move.w	#$1F,$2E(a0)
		move.l	#loc_6C7BC,$34(a0)
		move.b	#0,$2C(a0)
		rts
; ---------------------------------------------------------------------------

loc_6C7BC:
		move.b	#8,5(a0)
		move.w	#$87,$2E(a0)
		move.l	#loc_6C7FE,$34(a0)
		lea	(__u_FA82).w,a1
		bra.w	loc_6D51A
; ---------------------------------------------------------------------------

loc_6C7D8:
		cmpi.w	#$28,$2E(a0)
		bne.s	loc_6C7F2
		moveq	#$59,d0
		jsr	Play_Sound_2.w
		lea	ChildObjDat_6D83E(pc),a2
		jsr	CreateChild6_Simple.w

loc_6C7F2:
		jsr	MoveSprite2.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_6C7FE:
		move.b	#$A,5(a0)

loc_6C804:
		move.w	#$3F,$2E(a0)
		move.l	#loc_6C81A,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_6C814:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_6C81A:
		move.b	#$C,5(a0)
		move.w	#$9F,$2E(a0)
		move.l	#loc_6C862,$34(a0)
		move.b	#2,$2C(a0)
		lea	(__u_FA8A).w,a1
		bra.w	loc_6D51A
; ---------------------------------------------------------------------------

loc_6C83C:
		cmpi.w	#$48,$2E(a0)
		bne.s	loc_6C856
		moveq	#$59,d0
		jsr	Play_Sound_2.w
		lea	ChildObjDat_6D83E(pc),a2
		jsr	CreateChild6_Simple.w

loc_6C856:
		jsr	MoveSprite2.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_6C862:
		move.b	#$E,5(a0)
		move.w	#$3E18,$10(a0)
		move.w	#-$58,$14(a0)
		move.w	#$77,$2E(a0)
		move.l	#loc_6C788,$34(a0)
		bclr	#2,$38(a0)
		rts
; ---------------------------------------------------------------------------

loc_6C88A:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_6C890:
		move.l	#Obj_Wait,(a0)
		move.w	#prio(4),8(a0)
		move.l	#loc_6C8B4,$34(a0)
		bset	#4,$38(a0)
		lea	ChildObjDat_6D822(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_6C8B4:
		move.l	#loc_6C8F4,(a0)
		st	(End_Of_Level_Flag).w
		clr.b	(Boss_flag).w
		jsr	Create_New_Sprite.w
		bne.s	loc_6C8DC
		move.l	#Obj_81,(a1)
		move.w	#$3F40,$10(a1)
		move.w	#$B0,$14(a1)

loc_6C8DC:
		move.w	(__u_FAB4).w,d0
		addi.w	#$118,d0
		move.w	d0,(__u_FA92).w
		lea	Child6_IncLevX.w,a2
		jmp	CreateChild6_Simple.w
; ---------------------------------------------------------------------------

loc_6C8F4:
		move.w	(Camera_X_pos).w,(Camera_min_X_pos).w
		tst.b	(End_Of_Level_Flag).w
		bne.w	locret_6BF96
		move.l	#loc_6C932,(a0)
		clr.b	(End_Of_Level_Flag).w
		jsr	Restore_PlayerControl.w
		jsr	Obj_PlayLevelMusic.w
		clr.w	(Ctrl_1_logical).w
		st	(Ctrl_1_locked).w
		clr.w	$2E(a0)
		move.b	#1,(Scroll_lock).w
		addi.w	#$30,(Camera_max_X_pos).w
		rts
; ---------------------------------------------------------------------------

loc_6C932:
		move.w	(Camera_X_pos).w,d0
		addi.w	#$150,d0
		cmp.w	(Player_1+x_pos).w,d0
		bls.w	loc_6D13C
		jmp	(loc_86334).l
; ---------------------------------------------------------------------------

loc_6C948:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_6C95E(pc,d0.w),d1
		jsr	off_6C95E(pc,d1.w)
		moveq	#0,d0
		jmp	Child_Draw_Sprite_FlickerMove.w
; ---------------------------------------------------------------------------
off_6C95E:	dc.w loc_6C962-off_6C95E
		dc.w loc_6C988-off_6C95E
; ---------------------------------------------------------------------------

loc_6C962:
		lea	word_6D782(pc),a1
		jsr	SetUp_ObjAttributes3.w
		movea.w	$46(a0),a1
		cmpi.l	#Obj_A1_1_MGZ2_Boss.ok,(a1)
		bne.s	loc_6C97E
		bclr	#7,$A(a0)

loc_6C97E:
		lea	ChildObjDat_6D7DA(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_6C988:
		movea.w	$46(a0),a1
		btst	#5,$38(a1)
		bne.s	loc_6C9E2
		cmpi.b	#2,$2C(a1)
		beq.s	loc_6C9CC
		btst	#1,$38(a1)
		beq.s	loc_6C9C6
		bset	#1,$38(a0)
		bne.s	loc_6C9CC
		lea	ChildObjDat_6D802(pc),a2
		btst	#0,4(a0)
		beq.s	loc_6C9BC
		lea	ChildObjDat_6D80A(pc),a2

loc_6C9BC:
		jsr	CreateChild3_NormalRepeated.w
		bra.s	loc_6C9CC
; ---------------------------------------------------------------------------

loc_6C9C6:
		bclr	#1,$38(a0)

loc_6C9CC:

		lea	byte_6D24A(pc),a2
		bsr.w	sub_6D228
		lea	byte_6D284(pc),a2
		bsr.w	sub_6D26A
		jmp	Refresh_ChildPositionAdjusted.w
; ---------------------------------------------------------------------------

loc_6C9E2:

		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------

loc_6C9E8:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_6C9FE(pc,d0.w),d1
		jsr	off_6C9FE(pc,d1.w)
		moveq	#0,d0
		jmp	Child_DrawTouch_Sprite_FlickerMove.w
; ---------------------------------------------------------------------------
off_6C9FE:	dc.w loc_6CA12-off_6C9FE

		dc.w loc_6CA2E-off_6C9FE
		dc.w loc_6CA62-off_6C9FE
		dc.w loc_6CB14-off_6C9FE
		dc.w loc_6CB38-off_6C9FE
		dc.w loc_6CB6A-off_6C9FE
		dc.w loc_6CB38-off_6C9FE
		dc.w loc_6CB6A-off_6C9FE
		dc.w loc_6CB38-off_6C9FE
		dc.w loc_6CC32-off_6C9FE
; ---------------------------------------------------------------------------

loc_6CA12:
		lea	word_6D788(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.b	#2,5(a0)
		movea.w	$46(a0),a1
		move.w	$46(a1),$44(a0)
		rts
; ---------------------------------------------------------------------------

loc_6CA2E:
		movea.w	$44(a0),a1
		btst	#5,$38(a1)
		bne.s	loc_6C9E2
		btst	#3,$38(a1)
		bne.s	loc_6CA58
		lea	byte_6D25A(pc),a2
		bsr.w	sub_6D228

loc_6CA4A:

		lea	byte_6D294(pc),a2
		bsr.w	sub_6D26A
		jmp	Refresh_ChildPositionAdjusted.w
; ---------------------------------------------------------------------------

loc_6CA58:
		move.b	#4,5(a0)
		bra.w	loc_6D2FA
; ---------------------------------------------------------------------------

loc_6CA62:
		movea.w	$44(a0),a1
		btst	#5,$38(a1)
		bne.w	loc_6C9E2
		btst	#3,$38(a1)
		beq.s	loc_6CA88
		btst	#1,$38(a1)
		bne.s	loc_6CA9A
		jsr	Animate_RawMultiDelay.w
		bra.s	loc_6CA4A
; ---------------------------------------------------------------------------

loc_6CA88:
		move.b	#6,5(a0)
		move.l	#loc_6CB1E,$34(a0)
		bra.w	loc_6D3A8
; ---------------------------------------------------------------------------

loc_6CA9A:
		cmpi.b	#2,$2C(a1)
		beq.s	loc_6CACA
		move.b	#8,5(a0)
		move.w	#$27,$2E(a0)
		move.l	#loc_6CB4A,$34(a0)
		bsr.w	sub_6D334
		bclr	#5,$38(a0)
		lea	ChildObjDat_6D7FA(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_6CACA:
		move.b	#8,5(a0)
		move.w	#$37,$2E(a0)
		move.l	#loc_6CBB2,$34(a0)
		bclr	#2,$38(a0)
		bsr.w	sub_6D42E
		lea	ChildObjDat_6D812(pc),a2
		jsr	CreateChild1_Normal.w
		moveq	#$59,d0
		jsr	Play_Sound_2.w
		lea	ChildObjDat_6D83E(pc),a2
		jsr	CreateChild6_Simple.w

loc_6CB04:
		bclr	#5,$38(a0)
		lea	ChildObjDat_6D7FA(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_6CB14:
		jsr	Animate_RawMultiDelay.w
		bra.w	loc_6CA4A
; ---------------------------------------------------------------------------

loc_6CB1E:
		move.b	#2,5(a0)
		move.w	#$1F,$2E(a0)
		movea.w	$44(a0),a1
		move.l	#loc_6CB4A,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_6CB38:
		jsr	MoveSprite2.w
		jsr	Animate_RawMultiDelay.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_6CB4A:

		move.b	#$A,5(a0)
		movea.w	$46(a0),a1
		bset	#3,$38(a1)
		move.w	#0,$2E(a0)
		move.l	#loc_6CB76,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_6CB6A:
		jsr	Animate_RawMultiDelay.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_6CB76:
		move.b	#8,5(a0)
		movea.w	$46(a0),a1
		bclr	#3,$38(a1)
		neg.w	$18(a0)
		move.w	#$27,$2E(a0)
		move.l	#loc_6CB9A,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_6CB9A:
		move.b	#4,5(a0)
		movea.w	$44(a0),a1
		bset	#5,$38(a0)
		bclr	#1,$38(a1)
		rts
; ---------------------------------------------------------------------------

loc_6CBB2:
		move.b	#$E,5(a0)
		move.w	#$1F,$2E(a0)
		move.l	#loc_6CBCE,$34(a0)
		bset	#5,$38(a0)
		rts
; ---------------------------------------------------------------------------

loc_6CBCE:
		move.b	#8,5(a0)
		move.w	#$2F,$2E(a0)
		move.l	#loc_6CC0E,$34(a0)
		bsr.w	sub_6D4DC
		lea	ChildObjDat_6D812(pc),a2
		jsr	CreateChild1_Normal.w
		bne.s	loc_6CBF8
		move.b	#2,$2C(a1)

loc_6CBF8:
		moveq	#$59,d0
		jsr	Play_Sound_2.w
		lea	ChildObjDat_6D83E(pc),a2
		jsr	CreateChild6_Simple.w
		bra.w	loc_6CB04
; ---------------------------------------------------------------------------

loc_6CC0E:
		move.b	#$12,5(a0)
		ori.b	#$24,$38(a0)
		movea.w	$44(a0),a1
		bset	#2,$38(a1)
		bclr	#1,$38(a1)
		subi.w	#$80,$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_6CC32:
		movea.w	$44(a0),a1
		btst	#2,$38(a1)
		bne.s	locret_6CC44
		move.b	#4,5(a0)

locret_6CC44:
		rts
; ---------------------------------------------------------------------------

loc_6CC46:
		lea	word_6D77C(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_6CC58,(a0)
		rts
; ---------------------------------------------------------------------------

loc_6CC58:
		movea.w	$46(a0),a1
		btst	#5,$38(a1)
		bne.s	loc_6CCE0
		jsr	Refresh_ChildPositionAdjusted.w
		jmp	Child_Draw_Sprite2.w
; ---------------------------------------------------------------------------

loc_6CC72:
		lea	word_6D788(pc),a1
		jsr	SetUp_ObjAttributes3.w
		clr.b	$28(a0)
		move.w	#prio(4),8(a0)
		move.l	#loc_6CCC0,(a0)
		movea.w	$46(a0),a1
		move.w	$26(a1),d0
		move.w	word_6CCA8(pc,d0.w),$42(a0)
		lsr.w	#1,d0
		move.b	RawAni_6CCB8(pc,d0.w),$22(a0)
		jmp	Refresh_ChildPositionAdjusted.w
; ---------------------------------------------------------------------------
word_6CCA8:	dc.w $C00
		dc.w $3F9
		dc.w $F0
		dc.w $FDF9
		dc.w $F400
		dc.w $FD07
		dc.w $10
		dc.w $C00
RawAni_6CCB8:	dc.b  $1C, $15,	$2C, $2A, $2D, $2B, $29, $1C
; ---------------------------------------------------------------------------

loc_6CCC0:
		jsr	Refresh_ChildPositionAdjusted.w
		movea.w	$46(a0),a1
		btst	#5,$38(a1)
		bne.s	loc_6CCE0
		btst	#4,$38(a1)
		bne.s	loc_6CCE0
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_6CCE0:

		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------

loc_6CCE6:
		move.l	#loc_6CD12,(a0)
		move.l	#loc_6CD32,$34(a0)
		movea.w	$46(a0),a1
		move.w	$26(a1),$26(a0)
		move.b	4(a1),4(a0)
		bclr	#7,4(a0)
		move.w	#4,$2E(a0)
		rts
; ---------------------------------------------------------------------------

loc_6CD12:
		movea.w	$46(a0),a1
		btst	#2,$38(a1)
		bne.s	loc_6CD2C
		btst	#4,$38(a1)
		bne.s	loc_6CD2C
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_6CD2C:

		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_6CD32:
		move.w	#4,$2E(a0)
		lea	ChildObjDat_6D81A(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_6CD42:
		lea	word_6D794(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_6CD80,(a0)
		move.w	#$2F,$2E(a0)
		move.l	#Go_Delete_Sprite,$34(a0)
		movea.w	$46(a0),a1
		movea.w	$46(a1),a2
		move.w	a2,$44(a0)
		move.w	$26(a1),$26(a0)
		move.w	$2C(a1),$2C(a0)
		bsr.w	sub_6D334
		bra.w	loc_6D6A6
; ---------------------------------------------------------------------------

loc_6CD80:
		movea.w	$44(a0),a1
		btst	#2,$38(a1)
		bne.s	loc_6CD9C
		jsr	MoveSprite2.w
		jsr	Obj_Wait.w
		bra.w	loc_6D6A6
; ---------------------------------------------------------------------------

loc_6CD9C:
		move.l	#loc_6CDB0,(a0)
		movea.w	$44(a0),a1
		move.w	$46(a1),$44(a0)
		bra.w	loc_6D6A6
; ---------------------------------------------------------------------------

loc_6CDB0:
		movea.w	$44(a0),a1
		movea.w	$46(a1),a2
		move.w	$14(a1),d0
		move.b	$2C(a2),d1
		cmp.b	$2C(a0),d1
		bne.s	loc_6CDE4
		tst.b	d1
		bne.s	loc_6CDDA
		moveq	#8,d1
		add.w	d1,d0
		cmp.w	$14(a0),d0
		blt.s	loc_6CDE4

loc_6CDD4:
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------

loc_6CDDA:
		moveq	#8,d1
		sub.w	d1,d0
		cmp.w	$14(a0),d0
		ble.s	loc_6CDD4

loc_6CDE4:

		bra.w	loc_6D6A6
; ---------------------------------------------------------------------------

loc_6CDE8:

		lea	word_6D78E(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_6CE04,(a0)
		bsr.w	sub_6D36E
		move.l	#loc_6CE1E,$34(a0)

loc_6CE04:
		subq.w	#1,$2E(a0)
		bmi.s	loc_6CE1E
		movea.w	$46(a0),a1
		btst	#7,$2A(a1)
		beq.w	locret_6BF96
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------

loc_6CE1E:

		move.l	#loc_6CE36,(a0)
		move.b	#$17,$22(a0)
		clr.w	$2E(a0)
		moveq	#0,d0
		jmp	Child_DrawTouch_Sprite_FlickerMove.w
; ---------------------------------------------------------------------------

loc_6CE36:
		movea.w	$46(a0),a1
		btst	#3,$38(a1)
		bne.s	loc_6CE58
		move.b	#$16,$22(a0)
		addq.w	#1,$2E(a0)
		jsr	MoveSprite2.w
		jmp	Child_DrawTouch_Sprite_FlickerMove.w
; ---------------------------------------------------------------------------

loc_6CE58:
		move.l	#loc_6CE66,(a0)
		moveq	#0,d0
		jmp	Child_DrawTouch_Sprite_FlickerMove.w
; ---------------------------------------------------------------------------

loc_6CE66:
		movea.w	$46(a0),a1
		btst	#3,$38(a1)
		beq.s	loc_6CE78
		jmp	Child_DrawTouch_Sprite_FlickerMove.w
; ---------------------------------------------------------------------------

loc_6CE78:
		move.l	#loc_6CE8A,(a0)
		neg.w	$18(a0)
		moveq	#0,d0
		jmp	Child_DrawTouch_Sprite_FlickerMove.w
; ---------------------------------------------------------------------------

loc_6CE8A:
		subq.w	#1,$2E(a0)
		bmi.s	loc_6CE9C
		jsr	MoveSprite2.w
		jmp	Child_DrawTouch_Sprite_FlickerMove.w
; ---------------------------------------------------------------------------

loc_6CE9C:
		move.b	#$17,$22(a0)
		move.l	#Delete_Current_Sprite,(a0)
		moveq	#0,d0
		jmp	Child_DrawTouch_Sprite_FlickerMove.w
; ---------------------------------------------------------------------------

loc_6CEB0:

		lea	word_6D79A(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_6CEF0,(a0)
		move.b	$2C(a0),d0
		subi.b	#4,d0
		move.b	d0,$2C(a0)
		beq.s	loc_6CEE6
		move.w	#prio(7),8(a0)
		movea.w	$46(a0),a1
		cmpi.l	#Obj_A1_1_MGZ2_Boss.ok,(a1)
		bne.s	loc_6CEE6
		bclr	#7,$A(a0)

loc_6CEE6:

		lea	ChildObjDat_6D7E2(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_6CEF0:
		movea.w	$46(a0),a1
		btst	#5,$38(a1)
		bne.s	loc_6CF12
		lea	byte_6D2D2(pc),a2
		bsr.w	sub_6D2A4
		jsr	Refresh_ChildPositionAdjusted.w
		moveq	#$14,d0
		jmp	Child_Draw_Sprite2_FlickerMove.w
; ---------------------------------------------------------------------------

loc_6CF12:
		bset	#5,$38(a0)
		move.l	#Delete_Current_Sprite,(a0)
		rts
; ---------------------------------------------------------------------------

loc_6CF20:
		lea	word_6D7A0(pc),a1
		jsr	SetUp_ObjAttributes2.w
		move.l	#loc_6CF62,(a0)
		bset	#4,$2B(a0)
		movea.w	$46(a0),a1
		move.w	$46(a1),$44(a0)
		tst.b	$2C(a1)
		beq.s	loc_6CF4C
		move.w	#prio(6),8(a0)

loc_6CF4C:
		bclr	#7,$A(a0)
		btst	#7,$A(a1)
		beq.s	locret_6CF60
		bset	#7,$A(a0)

locret_6CF60:
		rts
; ---------------------------------------------------------------------------

loc_6CF62:
		movea.w	$46(a0),a1
		btst	#5,$38(a1)
		bne.s	loc_6CF98
		lea	byte_6D2E6(pc),a2
		bsr.w	sub_6D2A4
		jsr	Refresh_ChildPositionAdjusted.w
		movea.w	$44(a0),a1
		btst	#7,$2A(a1)
		bne.s	loc_6CF98
		btst	#0,(V_int_run_count+3).w
		bne.w	locret_6BF96
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------

loc_6CF98:

		jmp	Go_Delete_Sprite_2.w
; ---------------------------------------------------------------------------

loc_6CF9E:

		lea	ObjDat3_6D7A8(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_6CFB2,(a0)
		bra.w	loc_6D3E2
; ---------------------------------------------------------------------------

loc_6CFB2:
		jsr	MoveSprite_LightGravity.w
		jmp	Sprite_CheckDeleteXY.w
; ---------------------------------------------------------------------------

loc_6CFBE:

		lea	word_6D782(pc),a1
		jsr	SetUp_ObjAttributes3.w
		jsr	Refresh_ChildPositionAdjusted.w
		move.l	#Obj_FlickerMove,(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		beq.s	loc_6CFE2
		move.w	#prio(4),8(a0)

loc_6CFE2:
		lsr.w	#1,d0
		addi.b	#$2E,d0
		move.b	d0,$22(a0)
		moveq	#$28,d0
		jmp	Set_IndexedVelocity.w
; ---------------------------------------------------------------------------

loc_6CFF4:
		lea	ObjDat3_6D7B4(pc),a1
		jsr	SetUp_ObjAttributes.w

loc_6CFFE:
		move.l	#loc_6D060,(a0)
		move.w	#-$72E0,$3A(a0)
		move.w	(Camera_X_pos).w,d0
		addi.w	#$140,d0
		move.w	d0,$10(a0)
		move.w	d0,$30(a0)
		move.w	(Camera_Y_pos).w,d0
		addi.w	#$50,d0
		move.w	d0,$14(a0)
		move.w	d0,$34(a0)
		move.w	#-$400,$18(a0)
		move.b	#4,$40(a0)
		move.l	#ArtScaled_MGZEndBoss,$42(a0)
		move.b	#1,$3E(a0)
		bsr.w	DynamicWaterHeightC
		moveq	#6,d0
		move.w	$1C(a0),d1
		beq.s	loc_6D058
		cmpi.w	#$C,d1
		beq.s	loc_6D058
		moveq	#$10,d0

loc_6D058:

		move.w	d0,$2E(a0)
		bra.w	loc_6D0EE
; ---------------------------------------------------------------------------

loc_6D060:
		movea.w	$46(a0),a1
		btst	#2,$38(a1)
		bne.w	loc_6D0FE
		move.w	$18(a0),d0
		add.w	$2E(a0),d0
		cmpi.w	#-$100,d0
		bgt.s	loc_6D080
		move.w	d0,$18(a0)

loc_6D080:
		move.w	$1A(a0),d0
		move.w	$3C(a0),d1
		bmi.s	loc_6D096
		add.w	d1,d0
		cmpi.w	#$400,d0
		ble.s	loc_6D09E
		bra.w	loc_6D0A2
; ---------------------------------------------------------------------------

loc_6D096:
		add.w	d1,d0
		cmpi.w	#-$400,d0
		blt.s	loc_6D0A2

loc_6D09E:
		move.w	d0,$1A(a0)

loc_6D0A2:

		jsr	(sub_86180).l
		move.w	$30(a0),d2
		move.w	$34(a0),d3
		moveq	#0,d0
		move.b	$40(a0),d0
		addq.w	#4,d0
		move.l	#$100,d4
		divu.w	d0,d4
		sub.w	d4,d2
		sub.w	d4,d3
		move.w	d2,$10(a0)
		move.w	d3,$14(a0)
		move.b	(V_int_run_count+3).w,d0
		andi.b	#3,d0
		bne.s	loc_6D0F4
		move.b	$40(a0),d0
		add.b	$3E(a0),d0
		andi.b	#$7F,d0
		cmpi.b	#4,d0
		blo.w	loc_6D0EE
		move.b	d0,$40(a0)

loc_6D0EE:

		jsr	(Perform_Art_Scaling).l

loc_6D0F4:
		move.w	$30(a0),d0
		jmp	Sprite_OnScreen_Test2.w
; ---------------------------------------------------------------------------

loc_6D0FE:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

;loc_6D104:
;		subq.w	#1,$2E(a0)
;		bpl.w	locret_6BF96
;		moveq	#0,d0
;		move.b	$39(a0),d0
;		move.w	word_6D14C(pc,d0.w),$2E(a0)
;		lsl.w	#4,d0
;		lea	(Pal_MGZFadeCNZ).l,a1
;		adda.w	d0,a1
;		lea	(Normal_palette_line_4).w,a2
;		moveq	#7,d1

;loc_6D128:
;		move.l	(a1)+,(a2)+
;		dbf	d1,loc_6D128
;		addq.b	#2,$39(a0)
;		cmpi.b	#$20,$39(a0)
;		blo.w	locret_6BF96

loc_6D13C:
		move.w	#$300,d0
		jsr	StartNewLevel.w
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------
;word_6D14C:	dc.w $A
;		dc.w $A
;		dc.w $A
;		dc.w $A
;		dc.w $A
;		dc.w $A
;		dc.w $A
;		dc.w $A
;		dc.w $A
;		dc.w $64
;		dc.w 5
;		dc.w 5
;		dc.w 5
;		dc.w 5
;		dc.w $14
; ---------------------------------------------------------------------------

loc_6D16A:
		movea.w	$46(a0),a1
		move.w	(Camera_Y_pos).w,d0
		move.w	d0,d1
		moveq	#$18,d2
		addi.w	#$70,d0
		cmp.w	$14(a1),d0
		bge.s	loc_6D18A
		move.w	#$C8,d2
		bset	#2,$38(a0)

loc_6D18A:
		add.w	d2,d1
		move.w	d1,$14(a0)
		move.l	#Obj_Wait,(a0)
		move.b	#9,$39(a0)
		move.l	#loc_6D1A6,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_6D1A6:
		subq.b	#1,$39(a0)
		bmi.w	loc_6CD2C
		move.w	#3,$2E(a0)
		lea	ChildObjDat_6D844(pc),a2
		jmp	CreateChild6_Simple.w
; ---------------------------------------------------------------------------

loc_6D1BE:
		lea	ObjDat3_6D7A8(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_6D1D2,(a0)
		bsr.w	sub_6D1DE

loc_6D1D2:
		jsr	MoveSprite_LightGravity.w
		jmp	Sprite_CheckDeleteXY.w

; =============== S U B R O U T I N E =======================================


sub_6D1DE:
		jsr	Random_Number.w
		move.w	d0,d1
		andi.w	#3,d0
		move.b	RawAni_6D224(pc,d0.w),$22(a0)
		andi.w	#$3FF,d1
		btst	#0,d1
		beq.s	loc_6D1FC
		neg.w	d1

loc_6D1FC:
		move.w	d1,$18(a0)
		swap	d0
		movea.w	$46(a0),a1
		btst	#2,$38(a1)
		beq.s	locret_6D222
		andi.w	#$1FF,d0
		addi.w	#$200,d0
		btst	#0,d0
		beq.s	loc_6D21E
		neg.w	d0

loc_6D21E:
		move.w	d0,$1A(a0)

locret_6D222:
		rts
; End of function sub_6D1DE

; ---------------------------------------------------------------------------
RawAni_6D224:	dc.b	0,   1,	  2,   0

; =============== S U B R O U T I N E =======================================


sub_6D228:

		movea.w	$46(a0),a1
		move.w	$26(a1),d0
		move.w	d0,$26(a0)
		lea	(a2,d0.w),a3
		move.b	(a3)+,$22(a0)
		moveq	#0,d0
		move.b	(a3)+,d0
		beq.s	locret_6D248
		lsl.w	#4,d0
		add.w	#Sprite_table_input,d0		; NAT: Fix the priority level
		move.w	d0,8(a0)

locret_6D248:
		rts
; End of function sub_6D228

; ---------------------------------------------------------------------------
byte_6D24A:	dc.b	2, $30
		dc.b	3, $30
		dc.b  $1E, $30
		dc.b  $1F, $30
		dc.b	5, $30
		dc.b	3, $30
		dc.b	4, $30
		dc.b	2, $30
byte_6D25A:	dc.b	9, $28
		dc.b   $C, $28
		dc.b  $20, $28
		dc.b  $14, $30
		dc.b  $13, $30
		dc.b  $12, $30
		dc.b   $F, $28
		dc.b	9, $28

; =============== S U B R O U T I N E =======================================


sub_6D26A:

		movea.w	$46(a0),a1
		move.w	$26(a1),d0
		move.w	d0,$26(a0)
		lea	(a2,d0.w),a3
		move.b	(a3)+,$42(a0)
		move.b	(a3)+,$43(a0)
		rts
; End of function sub_6D26A

; ---------------------------------------------------------------------------
byte_6D284:	dc.b  $E4, $10
		dc.b  $F6, $18
		dc.b   $C, $1C
		dc.b  $18, $14
		dc.b  $2C,   8
		dc.b  $20, $F4
		dc.b  $14, $EC
		dc.b  $E4, $10
byte_6D294:	dc.b  $E9,   0
		dc.b  $EF, $16
		dc.b	0, $20
		dc.b  $10,  $F
		dc.b  $11,   0
		dc.b  $10, $F0
		dc.b	0, $E0
		dc.b  $E9,   0

; =============== S U B R O U T I N E =======================================


sub_6D2A4:

		movea.w	$46(a0),a1
		moveq	#0,d0
		move.b	$3A(a1),d0
		move.b	d0,$3A(a0)
		add.w	d0,d0
		lea	(a2,d0.w),a3
		move.b	(a3)+,$42(a0)
		move.b	(a3)+,$43(a0)
		move.b	(a3)+,$22(a0)
		tst.b	$2C(a0)
		beq.s	locret_6D2D0
		subi.b	#$14,$42(a0)

locret_6D2D0:
		rts
; End of function sub_6D2A4

; ---------------------------------------------------------------------------
byte_6D2D2:	dc.b	8, $18
		dc.b	6,   0
		dc.b  $F8, $14
		dc.b	7,   0
		dc.b  $18, $14
		dc.b	8,   0
		dc.b  $18,   8
		dc.b  $18,   0
		dc.b  $18, $FC
		dc.b  $23,   0
byte_6D2E6:	dc.b	0, $10
		dc.b  $19,   0
		dc.b  $F8,   8
		dc.b  $1A,   0
		dc.b	8,   8
		dc.b  $24,   0
		dc.b  $10,   0
		dc.b  $1B,   0
		dc.b	9, $F9
		dc.b  $25,   0
; ---------------------------------------------------------------------------

loc_6D2FA:
		movea.w	$44(a0),a1
		move.w	$26(a1),d0
		add.w	d0,d0
		move.l	off_6D314(pc,d0.w),$30(a0)
		clr.b	$23(a0)
		clr.b	$24(a0)
		rts
; ---------------------------------------------------------------------------
off_6D314:	dc.l byte_6D853
		dc.l byte_6D87A
		dc.l byte_6D8A1
		dc.l byte_6D8C8
		dc.l byte_6D8CD
		dc.l byte_6D8D2
		dc.l byte_6D8D9
		dc.l byte_6D853

; =============== S U B R O U T I N E =======================================


sub_6D334:

		move.w	$26(a0),d0
		add.w	d0,d0
		move.l	dword_6D34E(pc,d0.w),$18(a0)
		btst	#0,4(a1)
		beq.s	locret_6D34C
		neg.w	$18(a0)

locret_6D34C:
		rts
; End of function sub_6D334

; ---------------------------------------------------------------------------
dword_6D34E:	dc.l $FC000000

		dc.l $FC000400
		dc.l $400
		dc.l $4000400
		dc.l $4000000
		dc.l $400FC00
		dc.l $FC00
		dc.l $FC000000

; =============== S U B R O U T I N E =======================================


sub_6D36E:
		movea.w	$46(a0),a1
		move.w	$26(a1),d0
		add.w	d0,d0
		move.l	dword_6D34E(pc,d0.w),$18(a0)
		btst	#0,4(a1)
		beq.s	loc_6D38A
		neg.w	$18(a0)

loc_6D38A:
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	word_6D398(pc,d0.w),$2E(a0)
		rts
; End of function sub_6D36E

; ---------------------------------------------------------------------------
word_6D398:	dc.w 4
		dc.w 9
		dc.w $E
		dc.w $13
		dc.w $18
		dc.w $1D
		dc.w $22
		dc.w $27
; ---------------------------------------------------------------------------

loc_6D3A8:
		movea.w	$44(a0),a1
		move.w	$26(a1),d0
		add.w	d0,d0
		move.l	off_6D3C2(pc,d0.w),$30(a0)
		clr.b	$23(a0)
		clr.b	$24(a0)
		rts
; ---------------------------------------------------------------------------
off_6D3C2:	dc.l byte_6D900
		dc.l byte_6D91F
		dc.l byte_6D93E
		dc.l byte_6D8C8
		dc.l byte_6D8CD
		dc.l byte_6D8D2
		dc.l byte_6D95D
		dc.l byte_6D900
; ---------------------------------------------------------------------------

loc_6D3E2:
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	d0,d1
		lsr.w	#1,d0
		move.b	RawAni_6D3FC(pc,d0.w),$22(a0)
		add.w	d1,d1
		move.l	word_6D406(pc,d1.w),$18(a0)
		rts
; ---------------------------------------------------------------------------
RawAni_6D3FC:	dc.b	0,   1,	  2,   0,   0,	 1,   0,   2,	0,   1
word_6D406:	dc.w  $FC00, $FC00
		dc.w   $400, $FC00
		dc.w  $FF80, $FC00
		dc.w	$80, $FC00

		dc.w  $FD00, $FE00
		dc.w   $300, $FE00
		dc.w  $FE00, $FD00
		dc.w   $200, $FD00
		dc.w  $FF80, $FE00
		dc.w	$80, $FE00

; =============== S U B R O U T I N E =======================================


sub_6D42E:
		jsr	Random_Number.w
		andi.w	#$FF,d0
		move.w	d0,d1
		andi.w	#1,d1
		bclr	#0,4(a0)
		subi.w	#$80,d0
		bcc.s	loc_6D452
		addq.w	#2,d1
		bset	#0,4(a0)

loc_6D452:
		move.w	(Camera_Y_pos).w,d3
		addi.w	#8,d3
		lea	(__u_FA82).w,a2

loc_6D45E:
		move.w	(Camera_X_pos).w,d2
		addi.w	#$A8,d2
		add.w	d0,d2
		add.w	d1,d1
		move.w	word_6D4AC(pc,d1.w),d4
		move.w	d4,$26(a0)
		move.w	d2,$10(a0)
		move.w	d3,$14(a0)
		move.w	d1,(a2)+
		move.w	d4,(a2)+
		move.w	d2,(a2)+
		move.w	d3,(a2)+
		add.w	d1,d1
		move.l	off_6D4BC(pc,d1.w),$30(a0)
		clr.b	$23(a0)
		clr.b	$24(a0)
		add.w	d4,d4
		lea	dword_6D34E(pc),a3
		move.l	(a3,d4.w),$18(a0)
		btst	#0,4(a0)
		beq.s	locret_6D4AA
		neg.w	$18(a0)

locret_6D4AA:
		rts
; End of function sub_6D42E

; ---------------------------------------------------------------------------
word_6D4AC:	dc.w 4
		dc.w 2
		dc.w 4
		dc.w 2
		dc.w $C
		dc.w $A
		dc.w $C
		dc.w $A
off_6D4BC:	dc.l byte_6D8C1
		dc.l byte_6D89A
		dc.l byte_6D8C1
		dc.l byte_6D89A
		dc.l byte_6D8F9
		dc.l byte_6D8D2
		dc.l byte_6D8F9
		dc.l byte_6D8D2

; =============== S U B R O U T I N E =======================================


sub_6D4DC:
		jsr	Random_Number.w
		andi.w	#$7F,d0
		move.w	d0,d1
		andi.w	#1,d1
		addq.w	#4,d1
		move.w	(__u_FA82).w,d2
		lsr.w	#1,d2
		bset	#0,4(a0)
		move.b	byte_6D516(pc,d2.w),d3
		beq.s	loc_6D508
		neg.w	d0
		bclr	#0,4(a0)

loc_6D508:
		add.b	d3,d1
		move.w	#$F8,d3
		lea	(__u_FA8A).w,a2
		bra.w	loc_6D45E
; End of function sub_6D4DC

; ---------------------------------------------------------------------------
byte_6D516:	dc.b 2
		dc.b 0
		dc.b 0
		dc.b 2
; ---------------------------------------------------------------------------

loc_6D51A:

		move.w	(a1)+,d0
		move.w	(a1)+,d1
		move.w	d1,$26(a0)
		move.w	(a1)+,d2
		move.w	(a1)+,d3
		lea	byte_6D588(pc,d0.w),a2
		move.b	(a2)+,d4
		ext.w	d4
		add.w	d4,d2
		move.w	d2,$10(a0)
		move.b	(a2)+,d4
		ext.w	d4
		add.w	d4,d3
		move.w	d3,$14(a0)
		lsr.w	#1,d0
		move.b	byte_6D598(pc,d0.w),$3A(a0)
		lsr.w	#1,d0
		move.b	byte_6D5A0(pc,d0.w),d2
		andi.b	#-4,4(a0)
		or.b	d2,4(a0)
		add.w	d1,d1
		lea	dword_6D34E(pc),a2
		move.l	(a2,d1.w),$18(a0)
		asr	$18(a0)
		asr	$1A(a0)
		btst	#0,4(a0)
		beq.s	loc_6D576
		neg.w	$18(a0)

loc_6D576:
		moveq	#$59,d0
		jsr	Play_Sound_2.w
		lea	ChildObjDat_6D83E(pc),a2
		jmp	CreateChild6_Simple.w
; ---------------------------------------------------------------------------
byte_6D588:	dc.b  $F4, $D4
		dc.b  $1A, $D8
		dc.b   $C, $D4
		dc.b  $E6, $D8
		dc.b  $14, $24
		dc.b  $30, $1C
		dc.b  $EC, $24
		dc.b  $D0, $1C
byte_6D598:	dc.b 0
		dc.b 8
		dc.b 0
		dc.b 8
		dc.b 0
		dc.b 2
		dc.b 0
		dc.b 2
byte_6D5A0:	dc.b 0
		dc.b 1
		dc.b 1
		dc.b 0

; =============== S U B R O U T I N E =======================================


MGZ2_SpecialCheckHit:

		tst.b	$28(a0)
		bne.s	locret_6D608	; If collision is on, don't do anything
		tst.b	$29(a0)
		bne.s	loc_6D5C2		; If still has a hit point, branch
		tst.b	$46(a0)
		beq.s	loc_6D60A	; ONLY kill the boss is $46 isn't set. If it is set, this is an event instance of the object
		move.b	#1,$29(a0)
		bclr	#7,$2A(a0)

loc_6D5C2:
		tst.b	$20(a0)
		bne.s	loc_6D5D6
		move.b	#$20,$20(a0)
		moveq	#$6E,d0			; Play hit sound
		jsr	Play_Sound_2.w

loc_6D5D6:
		bset	#6,$2A(a0)
		moveq	#0,d0
		btst	#0,$20(a0)
		bne.s	loc_6D5EA
		addi.w	#6,d0

loc_6D5EA:
		bsr.w	MGZ2_BossPalAdjust
		subq.b	#1,$20(a0)
		bne.s	locret_6D608
		bclr	#6,$2A(a0)
		cmpi.b	#0,$22(a0)
		bne.s	locret_6D608
		move.b	$25(a0),$28(a0)	; Put backup of collision back into $28

locret_6D608:

		rts
; ---------------------------------------------------------------------------

loc_6D60A:
		move.l	#Wait_FadeToLevelMusic,(a0)
		move.l	#loc_6C2BE,$34(a0)
		jmp	BossDefeated_StopTimer.w
; End of function MGZ2_SpecialCheckHit

; ---------------------------------------------------------------------------

loc_6D61E:
		tst.b	$28(a0)
		bne.s	locret_6D668
		tst.b	$29(a0)
		beq.s	loc_6D66A
		tst.b	$20(a0)
		bne.s	loc_6D644
		move.b	#$20,$20(a0)
		moveq	#$6E,d0
		jsr	Play_Sound_2.w
		bset	#6,$2A(a0)

loc_6D644:
		moveq	#0,d0
		btst	#0,$20(a0)
		bne.s	loc_6D652
		addi.w	#6,d0

loc_6D652:
		bsr.w	MGZ2_BossPalAdjust
		subq.b	#1,$20(a0)
		bne.s	locret_6D668
		bclr	#6,$2A(a0)
		move.b	$25(a0),$28(a0)

locret_6D668:

		rts
; ---------------------------------------------------------------------------

loc_6D66A:
		move.l	#Wait_FadeToLevelMusic,(a0)
		move.l	#loc_6C890,$34(a0)
		jmp	BossDefeated_StopTimer.w

; =============== S U B R O U T I N E =======================================


MGZ2_BossPalAdjust:

		lea	word_6D694(pc),a1
		lea	word_6D69A(pc,d0.w),a2
		movea.w	(a1)+,a3
		move.w	(a2)+,(a3)+
		movea.w	(a1)+,a3
		move.w	(a2)+,(a3)+
		movea.w	(a1)+,a3
		move.w	(a2)+,(a3)+
		rts
; End of function MGZ2_BossPalAdjust

; ---------------------------------------------------------------------------
word_6D694:	dc.w $FC36
		dc.w $FC3A
		dc.w $FC3C
word_6D69A:	dc.w $20
		dc.w $866
		dc.w $644
		dc.w $EEE
		dc.w $888
		dc.w $AAA
; ---------------------------------------------------------------------------

loc_6D6A6:

		movea.w	$44(a0),a1
		movea.w	$46(a1),a1
		btst	#7,$2A(a1)
		bne.s	loc_6D6BC
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------

loc_6D6BC:
		jsr	Random_Number.w
		andi.w	#$3C,d0
		jmp	loc_849D8.w

; =============== S U B R O U T I N E =======================================


DynamicWaterHeightC:
		move.l	#Obj_MGZEB_SpawnB,PlayerSpawn.w; NAT: Use bottom position

		movea.w	$46(a0),a2
		moveq	#0,d0
		move.b	$39(a2),d0
		addq.b	#1,$39(a2)
		andi.b	#7,d0
		move.b	byte_6D708(pc,d0.w),d0
		move.w	d0,$1C(a0)
		move.w	d0,$3C(a2)

		lea	word_6D6F8(pc,d0.w),a1
		move.w	(a1)+,$1A(a0)
		move.w	(a1)+,$3C(a0)
		rts

; ---------------------------------------------------------------------------
word_6D6F8:	dc.w  $FE00,	 8
		dc.w  $FA00,   $40
		dc.w   $600, $FFC0
		dc.w  $FE00,	 8
byte_6D708:	dc.b 0
		dc.b 8
		dc.b 4
		dc.b 0
		dc.b 0
		dc.b 4
		dc.b 0
		dc.b 8
; ---------------------------------------------------------------------------

loc_6D710:
		move.w	$3C(a0),d0
		lea	word_6D744(pc,d0.w),a2
		move.w	(a2)+,d1
		add.w	(Camera_X_pos).w,d1
		move.w	d1,$10(a0)
		move.w	(a2)+,d1
		add.w	(Camera_Y_pos).w,d1
		move.w	d1,$14(a0)
		move.l	dword_6D754(pc,d0.w),$18(a0)
		lsr.w	#1,d0
		move.w	word_6D764(pc,d0.w),$26(a0)
		lsr.w	#1,d0
		move.b	byte_6D76C(pc,d0.w),$3A(a0)
		rts
; ---------------------------------------------------------------------------
word_6D744:	dc.w  $FFC0,   $70
		dc.w	$A0,  $120
		dc.w	$A0, $FFB0
		dc.w  $FFC0,   $70
dword_6D754:	dc.l $2000000
		dc.l $80FE00
		dc.l $800200
		dc.l $2000000
word_6D764:	dc.w 0
		dc.w $C
		dc.w 4
		dc.w 0
byte_6D76C:	dc.b 6
		dc.b 4
		dc.b 8
		dc.b 6
ObjDat_MGZDrillBoss:	dc.l Map_MGZEndBoss

		dc.w $233F
		dc.w prio(6)
		dc.b $24
		dc.b $20
		dc.b 0
		dc.b $F
word_6D77C:	dc.w prio(7)
		dc.b $10
		dc.b $10
		dc.b 1
		dc.b 0
word_6D782:	dc.w prio(6)

		dc.b $18
		dc.b $18
		dc.b 2
		dc.b 0
word_6D788:	dc.w prio(5)

		dc.b $C
		dc.b $C
		dc.b 9
		dc.b $8B
word_6D78E:	dc.w prio(4)
		dc.b 4
		dc.b 4
		dc.b $16
		dc.b $98
word_6D794:	dc.w prio(6)
		dc.b 4
		dc.b 4
		dc.b $16
		dc.b $98
word_6D79A:	dc.w prio(3)
		dc.b $C
		dc.b $C
		dc.b 6
		dc.b 0
word_6D7A0:	dc.w $33F
		dc.w prio(3)
		dc.b $C
		dc.b $C
		dc.b $19
		dc.b $9A
ObjDat3_6D7A8:	dc.l Map_MGZEndBossDebris

		dc.w $C45E
		dc.w prio(2)
		dc.b $10
		dc.b $10
		dc.b 0
		dc.b 0
ObjDat3_6D7B4:	dc.l Map_ScaledArt
		dc.w $2469
		dc.w prio(6)
		dc.b $20
		dc.b $20
		dc.b 0
		dc.b 0
ChildObjDat_6D7C0:dc.w 3

		dc.l loc_6CC46
		dc.w $EC0F
		dc.l loc_6C948
		dc.w $E410
		dc.l loc_6CEB0
		dc.w $818
		dc.l loc_6CEB0
		dc.w $F418
ChildObjDat_6D7DA:dc.w 0
		dc.l loc_6C9E8
		dc.w $E900
ChildObjDat_6D7E2:dc.w 0
		dc.l loc_6CF20
		dc.w $10
ChildObjDat_6D7EA:dc.w 9

		dc.l loc_6CF9E
		dc.w $18C0
ChildObjDat_6D7F2:dc.w 9

		dc.l loc_6CF9E
		dc.w $E8C0
ChildObjDat_6D7FA:dc.w 0

		dc.l loc_6CC72
		dc.w $C00
ChildObjDat_6D802:dc.w 7
		dc.l loc_6CDE8
		dc.w $F000
ChildObjDat_6D80A:dc.w 7
		dc.l loc_6CDE8
		dc.w $1000
ChildObjDat_6D812:dc.w 0

		dc.l loc_6CCE6
		dc.w 0
ChildObjDat_6D81A:dc.w 0
		dc.l loc_6CD42
		dc.w 0
ChildObjDat_6D822:dc.w 2

		dc.l loc_6CFBE
		dc.w $CEC
		dc.l loc_6CFBE
		dc.w $F008
		dc.l loc_6CFBE
		dc.w $1408
ChildObjDat_6D836:dc.w 0
		dc.l loc_6CFF4
		dc.w 0
ChildObjDat_6D83E:dc.w 0

		dc.l loc_6D16A
ChildObjDat_6D844:dc.w 0
		dc.l loc_6D1BE
		dc.b	0,   5
		dc.b	1,   5
		dc.b	2,   5
		dc.b	3,   5
		dc.b  $FC
byte_6D853:	dc.b	9,   7
		dc.b   $A,   7
		dc.b   $B,   7
		dc.b	9,   6
		dc.b   $A,   6
		dc.b   $B,   6
		dc.b	9,   5
		dc.b   $A,   5
		dc.b   $B,   5
		dc.b	9,   4
		dc.b   $A,   4
		dc.b   $B,   4
		dc.b	9,   3
		dc.b   $A,   3
		dc.b   $B,   3
		dc.b  $F8, $20
		dc.b	9,   2
		dc.b   $A,   2
		dc.b   $B,   2
		dc.b  $FC
byte_6D87A:	dc.b   $C,   7
		dc.b   $D,   7
		dc.b   $E,   7
		dc.b   $C,   6
		dc.b   $D,   6
		dc.b   $E,   6
		dc.b   $C,   5
		dc.b   $D,   5
		dc.b   $E,   5
		dc.b   $C,   4
		dc.b   $D,   4
		dc.b   $E,   4
		dc.b   $C,   3
		dc.b   $D,   3
		dc.b   $E,   3
		dc.b  $F8, $20
byte_6D89A:	dc.b   $C,   2
		dc.b   $D,   2
		dc.b   $E,   2
		dc.b  $FC
byte_6D8A1:	dc.b  $20,   7
		dc.b  $21,   7
		dc.b  $22,   7
		dc.b  $20,   6
		dc.b  $21,   6
		dc.b  $22,   6
		dc.b  $20,   5
		dc.b  $21,   5
		dc.b  $22,   5
		dc.b  $20,   4
		dc.b  $21,   4
		dc.b  $22,   4
		dc.b  $20,   3
		dc.b  $21,   3
		dc.b  $22,   3
		dc.b  $F8, $20
byte_6D8C1:	dc.b  $20,   2
		dc.b  $21,   2
		dc.b  $22,   2
		dc.b  $FC
byte_6D8C8:	dc.b  $14, $7F

		dc.b  $14, $7F
		dc.b  $FC
byte_6D8CD:	dc.b  $13, $7F

		dc.b  $13, $7F
		dc.b  $FC
byte_6D8D2:	dc.b  $26,   2

		dc.b  $27,   2
		dc.b  $28,   2
		dc.b  $FC
byte_6D8D9:	dc.b   $F,   7
		dc.b  $10,   7
		dc.b  $11,   7
		dc.b   $F,   6
		dc.b  $10,   6
		dc.b  $11,   6
		dc.b   $F,   5
		dc.b  $10,   5
		dc.b  $11,   5
		dc.b   $F,   4
		dc.b  $10,   4
		dc.b  $11,   4
		dc.b   $F,   3
		dc.b  $10,   3
		dc.b  $11,   3
		dc.b  $F8, $20
byte_6D8F9:	dc.b   $F,   2
		dc.b  $10,   2
		dc.b  $11,   2
		dc.b  $FC
byte_6D900:	dc.b	9,   3
		dc.b   $A,   3
		dc.b   $B,   3
		dc.b	9,   4
		dc.b   $A,   4
		dc.b   $B,   4
		dc.b	9,   5
		dc.b   $A,   5
		dc.b   $B,   5
		dc.b	9,   6
		dc.b   $A,   6
		dc.b   $B,   6
		dc.b	9,   7
		dc.b   $A,   7
		dc.b   $B,   7
		dc.b  $F4
byte_6D91F:	dc.b   $C,   3
		dc.b   $D,   3
		dc.b   $E,   3
		dc.b   $C,   4
		dc.b   $D,   4
		dc.b   $E,   4
		dc.b   $C,   5
		dc.b   $D,   5
		dc.b   $E,   5
		dc.b   $C,   6
		dc.b   $D,   6
		dc.b   $E,   6
		dc.b   $C,   7
		dc.b   $D,   7
		dc.b   $E,   7
		dc.b  $F4
byte_6D93E:	dc.b  $20,   3
		dc.b  $21,   3
		dc.b  $22,   3
		dc.b  $20,   4
		dc.b  $21,   4
		dc.b  $22,   4
		dc.b  $20,   5
		dc.b  $21,   5
		dc.b  $22,   5
		dc.b  $20,   6
		dc.b  $21,   6
		dc.b  $22,   6
		dc.b  $20,   7
		dc.b  $21,   7
		dc.b  $22,   7
		dc.b  $F4
byte_6D95D:	dc.b   $F,   3
		dc.b  $10,   3
		dc.b  $11,   3
		dc.b   $F,   4
		dc.b  $10,   4
		dc.b  $11,   4
		dc.b   $F,   5
		dc.b  $10,   5
		dc.b  $11,   5
		dc.b   $F,   6
		dc.b  $10,   6
		dc.b  $11,   6
		dc.b   $F,   7
		dc.b  $10,   7
		dc.b  $11,   7
		dc.b  $F4
Pal_MGZEndBoss:	binclude "Levels/MGZ/Palettes/End Boss.bin"
	even


; ---------------------------------------------------------------------------

Obj_CNZMiniboss:
		cmp.b	#6,PlayMode.w		; NAT: if minigames
		beq.w	loc_6DDDD_Delete_DD	; lol delete
		move.w	#$31E0,d0
		cmp.w	(Camera_X_pos).w,d0	; Wait for Player to get in range
		bls.s	loc_6D9A8
		rts
; ---------------------------------------------------------------------------

loc_6D9A8:
		move.w	(Camera_max_X_pos).w,(__u_FA92).w; X end to FFFA92
		move.w	#$1C0,(Camera_min_Y_pos).w
		move.w	d0,(Camera_min_X_pos).w		; Set X start
		addi.w	#$80,d0
		move.w	d0,(Camera_max_X_pos).w		; Set X end
		move.w	#$2B8,(Camera_max_Y_pos).w
		move.w	#$2B8,(Camera_target_max_Y_pos).w; Set Y end

		btst	#5,OptionsBits.w		; NAT: Check if boss should be loaded
		bne.s	.allok				; branch if yes
		cmp.w	#$240,Camera_Y_Pos.w		; check if moved at right place yet?
		blt.s	locret_6DA22			; if not, branch

.allok		move.l	#Obj_Wait,(a0)
		move.w	#60*2,$2E(a0)			; Wait for 2 seconds
		lea	Pal_CNZMiniboss(pc),a1		; Load CNZ Miniboss palette
		jsr	PalLoad_Line1.w

		move.l	#Obj_CNZMinibossEnd,$34(a0)
		btst	#5,OptionsBits.w		; NAT: Check if boss should be loaded
		beq.s	Obj_CNZMinibossGo.boss		; branch if no
		move.l	#Obj_CNZMinibossGo,$34(a0)

		move.b	#$70,BossHitMode.w		; NAT: Enable hit mode
		clr.w	BossHitsP1.w			; clear hits count
		st	Boss_flag.w			; Lock screen

		moveq	#-$1F,d0
		jsr	Play_Sound.w			; Fade out music
		moveq	#$5D,d0
		jmp	Load_PLC.w			; Load CNZ Miniboss PLC
; ---------------------------------------------------------------------------

Obj_CNZMinibossGo:
		move.l	#Obj_CNZMinibossStart,(a0)
		moveq	#Mus_Minib_S3,d0
		move.b	d0,(Level_music+$1).w
		jsr	Play_Sound.w			; Play miniboss music

.boss		jsr	Create_New_Sprite.w
		bne.s	locret_6DA22
		move.l	#Obj_CNZMinibossScrollControl,(a1)

locret_6DA22:
		rts
; ---------------------------------------------------------------------------

Obj_CNZMinibossStart:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	CNZMiniboss_Index(pc,d0.w),d1
		jsr	CNZMiniboss_Index(pc,d1.w)
		bsr.w	CNZMiniboss_MoveDown
		jsr	Run_PalRotationScript.w
		bsr.w	CNZMiniboss_CheckPlayerHit
		bsr.w	CNZMiniboss_CheckTopHit
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------
CNZMiniboss_Index:	dc.w Obj_CNZMinibossInit-CNZMiniboss_Index

		dc.w Obj_CNZMinibossLower-CNZMiniboss_Index
		dc.w Obj_CNZMinibossMove-CNZMiniboss_Index
		dc.w Obj_CNZMinibossMove-CNZMiniboss_Index
		dc.w Obj_CNZMinibossOpening-CNZMiniboss_Index
		dc.w Obj_CNZMinibossWaitHit-CNZMiniboss_Index
		dc.w Obj_CNZMinibossClosing-CNZMiniboss_Index
		dc.w Obj_CNZMinibossLower2-CNZMiniboss_Index
; ---------------------------------------------------------------------------

Obj_CNZMinibossInit:
		lea	ObjDat_CNZMiniboss(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.b	#6,$29(a0)		; 6 hits (for some reason)
		move.b	#6,$45(a0)
		bset	#3,$38(a0)
		move.w	#$80,$1A(a0)	; Initial vertical speed
		move.w	#$11F,$2E(a0)	; Wait amount
		move.l	#Obj_CNZMinibossGo2,$34(a0)
		lea	Child1_CNZMinibossMakeTop(pc),a2		; Make the little top
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

Obj_CNZMinibossLower:
		jsr	MoveSprite2.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

Obj_CNZMinibossGo2:
		move.b	#4,5(a0)
		clr.w	$1A(a0)
		bset	#1,$38(a0)
		move.w	#$90,$2E(a0)
		move.l	#Obj_CNZMinibossGo3,$34(a0)
		bra.w	SetUp_CNZMinibossSwing
; ---------------------------------------------------------------------------

Obj_CNZMinibossMove:
		jsr	Swing_UpAndDown.w
		jsr	MoveSprite2.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

Obj_CNZMinibossGo3:
		move.w	#$100,$18(a0)
		move.w	#$9F,$2E(a0)

Obj_CNZMinibossCloseGo:
		move.b	#6,5(a0)
		move.l	#Obj_CNZMinibossChangeDir,$34(a0)
		bclr	#3,$38(a0)
		lea	(PalSPtr_CNZMinibossNormal).l,a1
		lea	(PalRotation_Data).w,a2
		move.l	(a1)+,(a2)+
		move.l	(a1)+,(a2)+
		clr.w	(a2)
		move.l	#CNZMiniboss_MakeTimedSparks,(__u_FADA).w
		rts
; ---------------------------------------------------------------------------

Obj_CNZMinibossChangeDir:

		neg.w	$18(a0)
		move.w	#$13F,$2E(a0)
		rts
; ---------------------------------------------------------------------------

Obj_CNZMinibossOpening:
		jmp	Animate_RawMultiDelay.w
; ---------------------------------------------------------------------------

Obj_CNZMinibossOpenGo:
		move.b	#$A,5(a0)
		move.l	#Obj_CNZMinibossChangeDir,$34(a0)
		bset	#6,$38(a0)		; Set Open state
		move.b	#$7F,$3B(a0)
		lea	Child1_CNZCoilOpenSparks(pc),a2	; Create spark objects for coil
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

Obj_CNZMinibossWaitHit:
		btst	#6,$2A(a0)
		bne.s	loc_6DB4E
		rts
; ---------------------------------------------------------------------------

loc_6DB4E:
		move.b	#$C,5(a0)
		bclr	#6,$38(a0)
		move.l	#AniRaw_CNZMinibossClosing,$30(a0)
		move.l	#Obj_CNZMinibossCloseGo,$34(a0)
		rts
; ---------------------------------------------------------------------------

Obj_CNZMinibossClosing:
		jmp	Animate_RawMultiDelay.w
; ---------------------------------------------------------------------------

Obj_CNZMinibossLower2:
		addq.w	#1,$14(a0)
		subq.b	#1,$43(a0)
		bpl.s	loc_6DB82
; ---------------------------------------------------------------------------

loc_6DB7E:
		move.b	$42(a0),5(a0)

loc_6DB82:
		rts
; ---------------------------------------------------------------------------

Obj_CNZMinibossEnd:
		move.l	#Obj_Wait,(a0)
		st	(End_Of_Level_Flag).w			; Set end of level flag
		bset	#4,$38(a0)
		move.l	#Obj_CNZMinibossEndGo,$34(a0)

		btst	#5,OptionsBits.w		; NAT: Check if bosses are on
		beq.s	.noboss				; if not, branch
		jsr	Boss_DisableHitMode		; disable hits mode and give points
		lea	Child6_CNZMinibossMakeDebris(pc),a2
		jmp	CreateChild6_Simple.w

.noboss		move.w	#$20,(Normal_palette_line_2+$14).w; Set palette properly
		st	(ScrEvents_2).w			; Signal BG event
		rts
; ---------------------------------------------------------------------------

Obj_CNZMinibossEndGo:
		move.l	#Obj_EndSignControlAwaitStart,(a0)	; NAT: do extra stuff here
		clr.b	(Boss_flag).w	; Unlock level
		jsr	(AfterBoss_Cleanup).l
		lea	(PLC_EndSignStuff).l,a1		; Get ready to start act 2 after sign finishes
		jmp	Load_PLC_Raw.w
; ---------------------------------------------------------------------------

Obj_CNZMinibossTop:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	CNZMinibossTop_Index(pc,d0.w),d1
		jsr	CNZMinibossTop_Index(pc,d1.w)

	; NAT: We want to have sex... I mean a good spawning position
		move.w	$46(a0),a1		; get parent to a1
		cmp.w	#$32C0,x_pos(a0)	; check if we are at right
		blo.s	.chkright		; if not, go check

		moveq	#$C-1,d4		; set loop count
		move.w	#$20,d2			; set increment
		move.w	#$3210,d3		; prepare position
		move.w	#$31E0,d5		; prepare boss left
		move.w	#$3240,d6		; prepare boss right
		bsr.s	Obj_CNZT_ChkSpawn	; check spawn locations
		jmp	Draw_And_Touch_Sprite.w

.chkright	moveq	#$C-1,d4		; set loop count
		move.w	#-$20,d2		; set increment
		move.w	#$3370,d3		; prepare position
		move.w	#$3340,d5		; prepare boss left
		move.w	#$33A0,d6		; prepare boss right
		bsr.s	Obj_CNZT_ChkSpawn	; check spawn locations
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------
CNZMinibossTop_Index:	dc.w Obj_CNZMinibossTopInit-CNZMinibossTop_Index
		dc.w Obj_CNZMinibossTopWait-CNZMinibossTop_Index
		dc.w Obj_CNZMinibossTopWait2-CNZMinibossTop_Index
		dc.w Obj_CNZMinibossTopMain-CNZMinibossTop_Index
; ---------------------------------------------------------------------------

Obj_CNZT_ChkSpawn:
		move.w	#$2F4,PlayerSpawn+2.w	; NAT: prepare y-pos
		move.w	x_pos(a1),d1		; NAT: get parent x-pos

.loop		cmp.w	d1,d5			; check boss left
		bgt.s	.bossok			; branch if less than
		cmp.w	d1,d6			; check boss right
		bgt.s	.nextpos		; branch if less than

.bossok		movem.w	d2-d4,-(sp)		; push regs
		move.w	#$360,d2		; set y-pos
		jsr	GetFloorPosition_FG.w	; get chunk maps
		movem.w	(sp)+,d2-d4		; pop regs

		tst.w	(a1)			; check if this is a tile
		beq.s	.nextpos		; branch if empty tile
		move.w	d3,PlayerSpawn.w	; set spawn pos
		rts

.nextpos	add.w	d2,d3			; increase positions
		add.w	d2,d5			;
		add.w	d2,d6			;
		dbf	d4,.loop		; loop for all positions

	; spawn on top of the top
		move.w	x_pos(a0),PlayerSpawn.w	; set respawn x-pos
		move.w	y_pos(a0),PlayerSpawn+2.w; set respawn y-pos
		sub.w	#$1C,PlayerSpawn+2.w	; fix it
		rts
; ---------------------------------------------------------------------------

Obj_CNZMinibossTopInit:
		lea	ObjDat3_CNZMinibossTop(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.b	#$10,$1F(a0)
		move.b	#8,$1E(a0)
		rts
; ---------------------------------------------------------------------------

Obj_CNZMinibossTopWait:
		movea.w	$46(a0),a1

loc_6DC02:
		btst	#1,$38(a1)
		bne.s	loc_6DC10		; Wait for signal from main boss
		jmp	Refresh_ChildPosition.w
; ---------------------------------------------------------------------------

loc_6DC10:
		move.b	#4,5(a0)
		move.l	#AniRaw_CNZMinibossTop,$30(a0)
		move.l	#Obj_CNZMinibossTopGo,$34(a0)
		rts
; ---------------------------------------------------------------------------

Obj_CNZMinibossTopWait2:
		jsr	Refresh_ChildPosition.w
		jmp	Animate_RawGetFaster.w
; ---------------------------------------------------------------------------

Obj_CNZMinibossTopGo:
		move.b	#6,5(a0)
		move.l	#AniRaw_CNZMinibossTop2,$30(a0)
		move.w	#$200,$18(a0)
		move.w	#$200,$1A(a0)		; Set initial speed of top
		rts
; ---------------------------------------------------------------------------

Obj_CNZMinibossTopMain:
		movea.w	$46(a0),a1
		btst	#7,$2A(a1)
		bne.w	loc_6DDD2			; If parent has been destroyed, destroy this object
		move.w	$10(a0),-(sp)
		jsr	MoveSprite2.w
		moveq	#$13,d1
		moveq	#$C,d2
		moveq	#8,d3
		move.w	(sp)+,d4
		jsr	SolidObjectFull.w
		jsr	Animate_Raw.w
		tst.w	$18(a0)
		bmi.s	loc_6DCB0
		moveq	#$10,d3		; If moving to the right
		jsr	ObjCheckRightWallDist.w
		tst.w	d1
		bmi.w	loc_6DD4C	; Reverse direction if block is hit from side
		move.w	$10(a0),d0
		addi.w	#$10,d0
		cmpi.w	#$3380,d0
		bhs.w	loc_6DD8E	; Reverse direction if edge of screen is hit
		move.w	$14(a0),d1
		bsr.w	CNZMinibossTop_CheckHitBase
		bne.w	loc_6DD8E	; Reverse direction if miniboss base was hit
		bra.w	loc_6DCDA
; ---------------------------------------------------------------------------

loc_6DCB0:
		moveq	#-$10,d3	; If moving to the left
		jsr	ObjCheckLeftWallDist.w
		tst.w	d1
		bmi.w	loc_6DD4C	; Reverse direction if wall was hit
		move.w	$10(a0),d0
		subi.w	#$10,d0
		cmpi.w	#$3200,d0
		blo.w	loc_6DD8E	; Reverse direction if edge of screen is hit
		move.w	$14(a0),d1
		bsr.w	CNZMinibossTop_CheckHitBase
		bne.w	loc_6DD8E	; Reverse direction if miniboss base was hit

loc_6DCDA:
		bsr.w	CNZMinibossTop_CheckPlayerBounce
		bne.w	loc_6DDCC	; If bounce was detected, reverse direction
		tst.w	$1A(a0)
		bmi.s	loc_6DD1E
		jsr	ObjCheckFloorDist.w		; If moving downward, check for hitting the blocks
		tst.w	d1
		bmi.w	loc_6DD94	; If hit, reverse direction
		move.w	$10(a0),d0
		move.w	$14(a0),d1
		addq.w	#8,d1
		move.w	(Camera_Y_pos).w,d2
		addi.w	#$E0,d2
		cmp.w	d2,d1
		bhs.w	loc_6DDCC	; If bottom of screen was hit, bounce
		cmpi.w	#$380,d1
		bhi.w	loc_6DDCC	; Maximum lower bound is $380
		bsr.w	CNZMinibossTop_CheckHitBase
		bne.w	loc_6DDCC	; If base was hit, bounce
		rts
; ---------------------------------------------------------------------------

loc_6DD1E:
		jsr	ObjCheckCeilingDist.w	; If moving upward, check for hitting the blocks from below
		tst.w	d1
		bmi.s	loc_6DD94	; If hit, reverse direction
		move.w	$10(a0),d0
		move.w	$14(a0),d1
		subq.w	#8,d1
		cmp.w	(Camera_Y_pos).w,d1
		bls.w	loc_6DDCC	; If top of screen was hit, bounce
		cmpi.w	#$240,d1
		bls.w	loc_6DDCC	; Maximum upper bound is $240
		bsr.w	CNZMinibossTop_CheckHitBase
		bne.w	loc_6DDCC	; If base was hit, bounce
		rts
; ---------------------------------------------------------------------------

loc_6DD4C:

		lea	Child1_CNZBounceEffect(pc),a2
		jsr	CreateChild1_Normal.w
		bne.s	loc_6DD64
		tst.w	$18(a0)
		bmi.s	loc_6DD64
		bset	#0,4(a1)

loc_6DD64:

		moveq	#$10,d0
		neg.w	$18(a0)		; Change direction
		bmi.s	loc_6DD6E
		neg.w	d0

loc_6DD6E:
		add.w	$10(a0),d0
		cmpi.w	#$3200,d0
		bls.s	locret_6DD8C
		cmpi.w	#$3380,d0
		bhs.s	locret_6DD8C	; If the walls were hit somehow, don't do anything
		move.w	d0,(ScrEvents_Routine2).w
		move.w	$14(a0),(ScrEvents_3).w	; Move X/Y positions into special variables for removing the blocks from the level layout
		bsr.w	CNZMiniboss_BlockExplosion

locret_6DD8C:

		rts
; ---------------------------------------------------------------------------

loc_6DD8E:

		neg.w	$18(a0)			; Simple direction switch
		rts
; ---------------------------------------------------------------------------

loc_6DD94:

		move.w	$10(a0),d0
		moveq	#8,d1
		neg.w	$1A(a0)
		bmi.s	loc_6DDA2
		neg.w	d1

loc_6DDA2:
		add.w	$14(a0),d1
		cmpi.w	#$3200,d0
		bls.s	locret_6DD8C
		cmpi.w	#$3380,d0
		bhs.s	locret_6DD8C
		cmpi.w	#$300,d1
		blo.s	locret_6DD8C
		cmpi.w	#$3380,d1
		bhs.s	locret_6DD8C
		move.w	d0,(ScrEvents_Routine2).w		; Move X/Y positions into special variables see above
		move.w	d1,(ScrEvents_3).w
		bra.s	CNZMiniboss_BlockExplosion
; ---------------------------------------------------------------------------

loc_6DDCC:

		neg.w	$1A(a0)			; Simple direction switch
		rts
; ---------------------------------------------------------------------------

loc_6DDD2:
		lea	Child1_CNZMinibossExplosion(pc),a2
		jsr	CreateChild1_Normal.w
		move.b	#6,$2C(a1)
		clr.b	$28(a0)
		jsr	Displace_PlayerOffObject.w

loc_6DDDD_Delete_DD:
		jmp	Go_Delete_Sprite.w

; =============== S U B R O U T I N E =======================================


CNZMiniboss_BlockExplosion:
		lea	Child1_CNZMinibossExplosion(pc),a2
		jsr	CreateChild1_Normal.w
		bne.s	locret_6DE24
		move.b	#6,$2C(a1)
		move.w	(ScrEvents_Routine2).w,d0
		andi.w	#-$20,d0
		addi.w	#$10,d0
		move.w	d0,$10(a1)
		move.w	(ScrEvents_3).w,d0
		andi.w	#-$20,d0
		addi.w	#$10,d0
		move.w	d0,$14(a1)

locret_6DE24:
		rts
; End of function CNZMiniboss_BlockExplosion

; ---------------------------------------------------------------------------

Obj_CNZMinibossCoil:

		move.l	#Obj_CNZMinibossCoilClose,(a0)
		move.b	#$1A,$28(a0)
		move.b	#$70,$29(a0)
		bclr	#2,$38(a0)
		rts
; ---------------------------------------------------------------------------

Obj_CNZMinibossCoilClose:
		movea.w	$46(a0),a1
		btst	#7,$2A(a1)
		bne.s	loc_6DEB6
		btst	#6,$38(a1)
		bne.s	loc_6DEA8
		jsr	Refresh_ChildPosition.w		; If base is not open
		movea.w	$46(a0),a1
		tst.b	$28(a0)
		bne.s	loc_6DE9C		; Skip if collision is set
		bset	#2,$38(a0)
		bne.s	loc_6DE88		; If $38 already set, branch
		move.b	#$10,$3A(a0)
		btst	#2,$38(a1)
		bne.s	loc_6DE88		; If base has been stunned already, branch
		move.b	$28(a1),$25(a1)	; Backup parent collision
		clr.b	$28(a1)			; Unset parent collision
		move.b	$1C(a0),$1C(a1)		; NAT: Copy who hit it
	;	subq.b	#1,$29(a1)		; Remove a hit

loc_6DE88:

		subq.b	#1,$3A(a0)
		bpl.w	locret_6DA22
		bclr	#2,$38(a0)
		move.b	$25(a0),$28(a0)	; Restore collision

loc_6DE9C:
		move.b	#$70,$29(a0)
		jmp	Add_SpriteToCollisionResponseList.w
; ---------------------------------------------------------------------------

loc_6DEA8:
		move.l	#Obj_CNZMinibossCoilOpen,(a0)
		move.b	#$A9,$28(a0)
		rts
; ---------------------------------------------------------------------------

loc_6DEB6:

		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

Obj_CNZMinibossCoilOpen:
		jsr	Refresh_ChildPosition.w
		movea.w	$46(a0),a1
		btst	#7,$2A(a1)
		bne.s	loc_6DEB6
		btst	#6,$38(a1)
		beq.w	Obj_CNZMinibossCoil		; If parent closes up
		jmp	Add_SpriteToCollisionResponseList.w
; ---------------------------------------------------------------------------

loc_6DEDE:
		move.l	#loc_6DEEC,(a0)
		move.b	#-$56,$28(a0)
		rts
; ---------------------------------------------------------------------------

loc_6DEEC:
		jsr	Refresh_ChildPosition.w
		jmp	Add_SpriteToCollisionResponseList.w
; ---------------------------------------------------------------------------

Obj_CNZMinibossTimedSparks:
		lea	ObjDat3_CNZMinibossSpark(pc),a1		;Temporary sparks when boss is closed
		jsr	SetUp_ObjAttributes3.w
		bset	#5,$2B(a0)
		move.l	#Obj_Wait,(a0)
		move.l	#Obj_CNZMinibossTimedSparksGo,$34(a0)
		move.l	#AniRaw_CNZMinibossTimedSparkLeft,$30(a0)
		tst.b	$2C(a0)
		beq.s	locret_6DF32
		move.l	#AniRaw_CNZMinibossTimedSparkRight,$30(a0)
		move.w	#2,$2E(a0)

locret_6DF32:
		rts
; ---------------------------------------------------------------------------

Obj_CNZMinibossTimedSparksGo:
		move.l	#Obj_CNZMinibossTimedSparksMain,(a0)
		move.w	#$7F,$2E(a0)
		move.l	#Go_Delete_Sprite,$34(a0)
		rts
; ---------------------------------------------------------------------------

Obj_CNZMinibossTimedSparksMain:
		jsr	Refresh_ChildPosition.w
		jsr	Animate_RawMultiDelay.w
		jsr	Obj_Wait.w
		jmp	Child_DrawTouch_Sprite.w
; ---------------------------------------------------------------------------

Obj_CNZMinibossSparks:

		lea	ObjDat3_CNZMinibossSpark(pc),a1
		jsr	SetUp_ObjAttributes3.w
		bset	#5,$2B(a0)			; Player isn't hurt with lightning shield
		move.l	#Obj_CNZMinibossSparksMain,(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		add.w	d0,d0
		move.l	off_6DF88(pc,d0.w),$30(a0)
		rts
; ---------------------------------------------------------------------------
off_6DF88:	dc.l AniRaw_CNZMinibossSparks1
		dc.l AniRaw_CNZMinibossSparks2
		dc.l AniRaw_CNZMinibossSparks3
; ---------------------------------------------------------------------------

Obj_CNZMinibossSparksMain:
		movea.w	$46(a0),a1
		btst	#6,$38(a1)
		beq.w	loc_6DEB6
		jsr	Refresh_ChildPosition.w
		jsr	Animate_RawMultiDelay.w
		jmp	Child_DrawTouch_Sprite.w
; ---------------------------------------------------------------------------

Obj_CNZMinibossBounceEffect:
		lea	ObjDat3_CNZMbossBounceEffect(pc),a1
		jsr	SetUp_ObjAttributes3.w
		bset	#5,$2B(a0)
		move.l	#AnimateRaw_DrawTouch,(a0)
		move.w	#$3208,$10(a0)
		btst	#0,4(a0)
		beq.s	loc_6DFDE
		move.w	#$3378,$10(a0)

loc_6DFDE:
		move.l	#AniRaw_CNZMBossBoundEffect,$30(a0)
		move.l	#Go_Delete_Sprite,$34(a0)
		rts
; ---------------------------------------------------------------------------

Obj_CNZMinibossDebris:
		lea	ObjDat_CNZMinibossDebris(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#Obj_FlickerMove,(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	word_6E022(pc,d0.w),$42(a0)
		lsr.w	#1,d0
		move.b	CNZMinibossDebris_Frames(pc,d0.w),$22(a0)
		jsr	Refresh_ChildPosition.w
		moveq	#0,d0
		jmp	Set_IndexedVelocity.w
; ---------------------------------------------------------------------------
word_6E022:	dc.w $F000
		dc.w $1000
		dc.w $14
		dc.w $1C
		dc.w $24
		dc.w $2C
		dc.w $34
		dc.w $3C
		dc.w $48
CNZMinibossDebris_Frames:	dc.b  $12, $13,	$14, $14, $14, $14, $14, $14, $15,   0
; ---------------------------------------------------------------------------

SetUp_CNZMinibossSwing:
		moveq	#$60,d0
		move.w	d0,$3E(a0)
		move.w	d0,$1A(a0)
		move.w	#8,$40(a0)
		bclr	#0,$38(a0)
		rts

; =============== S U B R O U T I N E =======================================


CNZMiniboss_CheckPlayerHit:
		tst.b	$28(a0)
		bne.s	locret_6E0AE
		st	$29(a0)			; NAT: Force max hits

	;	lea	(PalSPtr_CNZMinibossOpen).l,a1
		lea	(PalRotation_Data+4).w,a2		; NAT: Custom palette script

		move.l	#PalScript_CNZMinibossOpenSonic,(a2)
		tst.b	$1C(a0)		; check if it was tails
		beq.s	.derp		; if not, branch
		move.l	#PalScript_CNZMinibossOpenTails,(a2)

.derp		bset	#2,$38(a0)		; If boss was hit by Sonic, set flag
		bne.s	loc_6E09C		; If already set earlier, skip ahead
		move.l	#$40000,-(a2)		; NAT: Write this only if hit changed
	;	addq.b	#1,$29(a0)		; Don't allow hit to affect him
		move.b	#$10,$3A(a0)
		bset	#3,$38(a0)
		bne.s	loc_6E09C
		move.b	#8,5(a0)
		move.l	#AniRaw_CNZMinibossOpening,$30(a0)
		move.l	#Obj_CNZMinibossOpenGo,$34(a0)		; Set boss to opening animation/routine

loc_6E09C:

		subq.b	#1,$3A(a0)
		bpl.s	locret_6E0AE
		bclr	#2,$38(a0)
		move.b	$25(a0),$28(a0)		; Restore collision after 16 frames at most while opening

locret_6E0AE:

		rts
; End of function CNZMiniboss_CheckPlayerHit


; =============== S U B R O U T I N E =======================================


CNZMiniboss_CheckTopHit:
		tst.b	$44(a0)
		beq.s	locret_6E0F8		; If not hit by top, don't bother
		tst.b	$20(a0)
		bne.s	loc_6E0D6

		lea	$45(a0),a5			; NAT: Get hits counter to a5
		move.b	$1C(a0),d6			; get hitter to d6
		jsr	Boss_HandlePlayerHit		; handle hits
		ble.s	CNZMiniboss_BossDefeated	; if defeated, branch

		bset	#6,$2A(a0)			; Set to indicate in hit stun
		move.b	#$20,$20(a0)
		moveq	#$6E,d0
		jsr	Play_Sound_2.w		; Play hit sound

loc_6E0D6:
		moveq	#0,d0
		btst	#0,$20(a0)
		bne.s	loc_6E0E4
		addi.w	#$A,d0

loc_6E0E4:
		bsr.s	CNZMiniboss_BossFlash	; Do the boss flash
		subq.b	#1,$20(a0)
		bne.s	locret_6E0F8
		bclr	#6,$2A(a0)
		clr.b	$44(a0)

locret_6E0F8:

		rts
; ---------------------------------------------------------------------------

CNZMiniboss_BossDefeated:
		moveq	#0,d0				; NAT: Set to normal colours
		bsr.s	CNZMiniboss_BossFlash		; Do the boss flash

		move.l	#Wait_FadeToLevelMusic,(a0)
		bset	#7,$2A(a0)				; Boss has been annihilated!
		move.l	#Obj_CNZMinibossEnd,$34(a0)
		st	(ScrEvents_2).w				; Signal BG event
		lea	Child1_CNZMinibossExplosion(pc),a2
		jsr	CreateChild1_Normal.w
		jmp	BossDefeated_StopTimer.w
; End of function CNZMiniboss_CheckTopHit


; =============== S U B R O U T I N E =======================================


CNZMiniboss_BossFlash:
		lea	word_6E146(pc),a1
		lea	word_6E150(pc,d0.w),a2
		movea.w	(a1)+,a3
		move.w	(a2)+,(a3)+
		movea.w	(a1)+,a3
		move.w	(a2)+,(a3)+
		movea.w	(a1)+,a3
		move.w	(a2)+,(a3)+
		movea.w	(a1)+,a3
		move.w	(a2)+,(a3)+
		movea.w	(a1)+,a3
		move.w	(a2)+,(a3)+
		rts
; End of function CNZMiniboss_BossFlash

; ---------------------------------------------------------------------------
word_6E146:	dc.w $FC24
		dc.w $FC26
		dc.w $FC28
		dc.w $FC2E
		dc.w $FC3C
word_6E150:	dc.w $6E0
		dc.w $280
		dc.w $40
		dc.w $28
		dc.w $642
		dc.w $888
		dc.w $AAA
		dc.w $CCC
		dc.w $888
		dc.w $AAA
; ---------------------------------------------------------------------------

CNZMiniboss_MakeTimedSparks:
		lea	(PalSPtr_CNZMinibossSparks).l,a2
		move.l	(a2)+,(a1)+
		move.l	(a2)+,(a1)+
		lea	Child1_CNZMinibossTimedSparks(pc),a2
		jmp	CreateChild1_Normal.w

; =============== S U B R O U T I N E =======================================


CNZMiniboss_MoveDown:
		move.w	(ScrEvents_4).w,d0
		cmp.w	$3C(a0),d0
		beq.s	locret_6E198
		move.w	d0,$3C(a0)
		move.b	5(a0),$42(a0)
		move.b	#$E,5(a0)
		move.b	#$1F,$43(a0)

locret_6E198:
		rts
; End of function CNZMiniboss_MoveDown


; =============== S U B R O U T I N E =======================================


CNZMinibossTop_CheckPlayerBounce:
		lea	(Player_1).w,a1
		bsr.w	sub_6E1A8
		bne.s	locret_6E20E
		lea	(Player_2).w,a1
; End of function CNZMinibossTop_CheckPlayerBounce


; =============== S U B R O U T I N E =======================================


sub_6E1A8:
		tst.w	$1A(a1)
		bpl.s	loc_6E210		; If player is moving downward, don't bother
		cmpi.b	#2,$20(a1)
		bne.s	loc_6E210		; If player is not in rolling animation, don't bother
		move.w	$10(a0),d0
		move.w	$14(a0),d1
		addi.w	#$C,d1
		move.w	$10(a1),d2
		subi.w	#$10,d2
		cmp.w	d2,d0
		blo.s	loc_6E210		; If player is not within X range, don't bother
		addi.w	#$20,d2
		cmp.w	d2,d0
		bhs.s	loc_6E210		; See above
		move.w	$14(a1),d2
		subi.w	#$10,d2
		cmp.w	d2,d1
		blo.s	loc_6E210		; If player is not within Y range, don't bother
		addi.w	#$20,d2
		cmp.w	d2,d1
		bhs.s	loc_6E210		; See above
		tst.w	$18(a1)
		bmi.s	loc_6E1FA
		tst.w	$18(a0)
		bpl.s	loc_6E204		; If player and top are moving the same direction, don't need to reverse X direction
		bra.w	loc_6E200
; ---------------------------------------------------------------------------

loc_6E1FA:
		tst.w	$18(a0)
		bmi.s	loc_6E204		; If player and top are moving the same direction, don't need to reverse X direction

loc_6E200:
		neg.w	$18(a0)			; If moving in opposite directions, reverse

loc_6E204:

		tst.w	$1A(a0)
		bmi.w	loc_6E210
		moveq	#1,d0			; If top is moving downward on collision, set collision flag

locret_6E20E:
		rts
; ---------------------------------------------------------------------------

loc_6E210:
		moveq	#0,d0
		rts
; End of function sub_6E1A8


; =============== S U B R O U T I N E =======================================


CNZMinibossTop_CheckHitBase:

		movea.w	$46(a0),a1
		lea	CNZMiniboss_BaseRange(pc),a2		; Two hit boxes. First is the slightly wider base
		move.w	$10(a1),d2
		add.w	(a2)+,d2
		cmp.w	d2,d0
		blo.s	loc_6E23C
		add.w	(a2)+,d2
		cmp.w	d2,d0
		bhs.s	loc_6E23C
		move.w	$14(a1),d2
		add.w	(a2)+,d2
		cmp.w	d2,d1
		blo.s	loc_6E23C
		add.w	(a2)+,d2
		cmp.w	d2,d1
		blo.s	loc_6E270

loc_6E23C:

		lea	CNZMiniboss_CoilRange(pc),a2		; Then it's the coil, different ranges depending on open or close state
		btst	#6,$38(a1)
		beq.s	loc_6E24C
		lea	CNZMiniboss_CoilOpenRange(pc),a2

loc_6E24C:
		move.w	$10(a1),d2
		add.w	(a2)+,d2
		cmp.w	d2,d0
		blo.s	loc_6E26C
		add.w	(a2)+,d2
		cmp.w	d2,d0
		bhs.s	loc_6E26C
		move.w	$14(a1),d2
		add.w	(a2)+,d2
		cmp.w	d2,d1
		blo.s	loc_6E26C
		add.w	(a2)+,d2
		cmp.w	d2,d1
		blo.s	loc_6E270

loc_6E26C:

		moveq	#0,d2
		rts
; ---------------------------------------------------------------------------

loc_6E270:

		btst	#6,$38(a1)
		beq.s	loc_6E27C
		st	$44(a1)				; Only set hit state if coil was open to begin with

loc_6E27C:
		moveq	#1,d2
		rts
; End of function CNZMinibossTop_CheckHitBase

; ---------------------------------------------------------------------------
CNZMiniboss_BaseRange:	dc.w  $FFE8,   $30
		dc.w  $FFF0,   $20
CNZMiniboss_CoilRange:	dc.w  $FFF4,   $18
		dc.w	$10,   $18
CNZMiniboss_CoilOpenRange:	dc.w  $FFF4,   $18
		dc.w	$10,   $38
ObjDat_CNZMiniboss:	dc.l Map_CNZMiniboss
		dc.w $A52E
		dc.w prio(5)
		dc.b $18
		dc.b $30
		dc.b 0
		dc.b $C
ObjDat3_CNZMinibossTop:	dc.w prio(4)
		dc.b $18
		dc.b $10
		dc.b 7
		dc.b $AA
ObjDat3_CNZMinibossSpark:	dc.w prio(4)

		dc.b $C
		dc.b $18
		dc.b $A
		dc.b $92
ObjDat3_CNZMbossBounceEffect:	dc.w prio(2)
		dc.b 8
		dc.b 8
		dc.b $C
		dc.b 0
ObjDat_CNZMinibossDebris:	dc.l Map_CNZMiniboss
		dc.w $A52E
		dc.w prio(2)
		dc.b $10
		dc.b $10
		dc.b 0
		dc.b 0
Child1_CNZMinibossMakeTop:dc.w 1
		dc.l Obj_CNZMinibossTop
		dc.w $2C
		dc.l Obj_CNZMinibossCoil
		dc.w $1C
Child1_CNZMinibossTimedSparks:dc.w 1
		dc.l Obj_CNZMinibossTimedSparks
		dc.w $EC18
		dc.l Obj_CNZMinibossTimedSparks
		dc.w $1418
		dc.w 0
		dc.l loc_6DEDE
		dc.w $FC
Child1_CNZCoilOpenSparks:dc.w 2
		dc.l Obj_CNZMinibossSparks
		dc.w $FC28
		dc.l Obj_CNZMinibossSparks
		dc.w $42C
		dc.l Obj_CNZMinibossSparks
		dc.w $FC3C
Child1_CNZBounceEffect:dc.w 0
		dc.l Obj_CNZMinibossBounceEffect
		dc.w $FC
Child1_CNZMinibossExplosion:dc.w 0
		dc.l Obj_CreateBossExplosion
		dc.w 0
Child6_CNZMinibossMakeDebris:dc.w 8
		dc.l Obj_CNZMinibossDebris
AniRaw_CNZMinibossOpening:	dc.b	0,   3
		dc.b	1,   3
		dc.b	2,   3
		dc.b	3,   3
		dc.b	4,   3
		dc.b	5,   3
		dc.b	6,   3
		dc.b  $F4
AniRaw_CNZMinibossClosing:	dc.b	6,   3
		dc.b	5,   3
		dc.b	4,   3
		dc.b	3,   3
		dc.b	2,   3
		dc.b	1,   3
		dc.b	0,   3
		dc.b  $F4
AniRaw_CNZMinibossTop:	dc.b	7,   8,  7,   8,  9, $FC

AniRaw_CNZMinibossTop2:	dc.b	0,   7,  8,   9,  $FC

AniRaw_CNZMinibossTimedSparkLeft:	dc.b   $A,   0
		dc.b  $11,   2
		dc.b   $B,   0
		dc.b  $11,   2
		dc.b  $FC
AniRaw_CNZMinibossTimedSparkRight:	dc.b   $F,   0
		dc.b  $11,   2
		dc.b  $10,   0
		dc.b  $11,   2
		dc.b  $FC
AniRaw_CNZMinibossSparks1:	dc.b   $A,   0
		dc.b  $11,   7
		dc.b   $B,   0
		dc.b  $11,   7
		dc.b  $FC
AniRaw_CNZMinibossSparks2:	dc.b  $11,   0
		dc.b   $F,   0
		dc.b  $11,   7
		dc.b  $10,   0
		dc.b  $11,   9
		dc.b  $FC
AniRaw_CNZMinibossSparks3:	dc.b   $A,   0
		dc.b  $11,   7
		dc.b   $B,   0
		dc.b  $11,  $B
		dc.b  $FC
AniRaw_CNZMBossBoundEffect:	dc.b   $C,   0,   $D,   1,   $E,   1,   $F4,   0

Pal_CNZMiniboss:	binclude "Levels/CNZ/Palettes/Miniboss.bin"
	even


PalSPtr_CNZMinibossNormal:	dc.w 4
		dc.w 0
		dc.l PalScript_CNZMinibossNormal
		dc.w 0
PalScript_CNZMinibossNormal:	dc.w $FC34
		dc.w	  2,  $EEE,	0,  $A22,     0,   $20,	    5, $FFF8,	$14, $FC34,	2,  $EEE,     0,  $A22,	    0,	 $20
		dc.w	  3, $FFF8,   $14, $FC34,     2,  $EEE,	    0,	$A22,	  0,   $20,	1, $FFF8,   $14, $FC34,	   $A,	$EEE
		dc.w	  0,  $A22,	0,   $20,     0, $FFF4

PalSPtr_CNZMinibossSparks:	dc.w 4
		dc.w 0
		dc.l PalScript_CNZMinibossSparks
		dc.w 0
PalScript_CNZMinibossSparks:	dc.w $FC34
word_6E3F4:	dc.w	$30,  $EEE,	0,  $A22,     0,   $20,	    0, $FFF8,	$14, $FC34,	2,  $EEE,     0,  $A22,	    0,	 $20
		dc.w	  1, $FFF8,   $14, $FC34,     3,  $EEE,	    0,	$A22,	  0,   $20,	3, $FFF8,   $14, $FC34,	    1,	 $20
		dc.w	$5F, $FFF8, $FF94

PalScript_CNZMinibossOpenSonic:	dc.w $FC34
		dc.w 0, $EEE,  0, $A22,  0, $E00,  1, $EEE,  0, $A22,  0, $E00,  7, $EEE,  0, $A22
		dc.w 0, $E00,  2, $FFFC
PalScript_CNZMinibossOpenTails:	dc.w $FC34
		dc.w 0, $EEE,  0, $28C,  0, $08E,  1, $EEE,  0, $28C,  0, $08E,  7, $EEE,  0, $28C
		dc.w 0, $08E,  2, $FFFC
; ---------------------------------------------------------------------------
word_6E46E:	dc.w	  0,  $300
		dc.w  $4660, $4860
word_6E476:	dc.w   $240,  $240
		dc.w  $4760, $47E0
; ---------------------------------------------------------------------------

Obj_CNZEndBoss:
		lea	word_6E46E(pc),a1
		jsr	(Check_CameraInRange).l

		move.l	#Ranges_CNZB,d0			; use boss specific data
		move.l	d0,BoxLoc_Level.w		; all this does, is ensure
		move.l	d0,BoxLoc_Play1.w		; both players dont die if one
		move.l	d0,BoxLoc_Play2.w		; enters boss area room too slow
		move.w	#Boxes_CNZB-Ranges_CNZB,SpawnBoxPos.w; also centers respawning correctly

		btst	#5,OptionsBits.w		; NAT: Check if bosses are on
		bne.s	.enabled			; if are, branch
		lea	.screen(pc),a1			; else, lock screen
		jmp	Boss_Force_End_2		;

.screen		dc.w $4780, $47C0, $240, $240

.enabled	move.b	#$80,BossHitMode.w		; NAT: Enable hit mode
		clr.w	BossHitsP1.w			; clear hits count

		move.l	#loc_6E4B8,(a0)
		move.l	#loc_6E4BE,$34(a0)
		lea	word_6E476(pc),a1
		move.b	#Mus_Boss,$26(a0)
		jsr	sub_85D6A.w
		moveq	#$6E,d0
		jsr	Load_PLC.w
		lea	Pal_CNZEndBoss(pc),a1
		jmp	PalLoad_Line1.w
; ---------------------------------------------------------------------------

loc_6E4B8:
		jmp	loc_85CA4.w
; ---------------------------------------------------------------------------

loc_6E4BE:
		move.l	#loc_6E4C6,(a0)

locret_6E4C4:

		rts
; ---------------------------------------------------------------------------

loc_6E4C6:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_6E4E2(pc,d0.w),d1
		jsr	off_6E4E2(pc,d1.w)
		bsr.w	sub_6EC3A
		bsr.w	sub_6EC9E

		move.w	#$4780,PlayerSpawn.w		; NAT: Set left spawn
		cmp.w	#$4840,x_pos(a0)		; check if boss is beyond middle
		bhs.s	.gotit				; yes? branch
		move.w	#$4900,PlayerSpawn.w		; set right spawn
.gotit		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------
off_6E4E2:	dc.w loc_6E4F2-off_6E4E2

		dc.w loc_6E548-off_6E4E2
		dc.w loc_6E574-off_6E4E2
		dc.w loc_6E5B6-off_6E4E2
		dc.w loc_6E5D8-off_6E4E2
		dc.w loc_6E62C-off_6E4E2
		dc.w loc_6E680-off_6E4E2
		dc.w loc_6E6AA-off_6E4E2
; ---------------------------------------------------------------------------

loc_6E4F2:
		move.w	#$2E0,PlayerSpawn+2.w		; NAT: Set respawn y-pos
		lea	ObjDat3_6ED84(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.b	#8,$29(a0)
		move.w	$14(a0),$3A(a0)
		move.w	#$7F,$2E(a0)
		move.l	#loc_6E55E,$34(a0)
		move.w	#-$100,$18(a0)
		jsr	Swing_Setup1.w
		lea	(ChildObjDat_681A4).l,a2
		jsr	CreateChild1_Normal.w
		bne.s	loc_6E534
		move.b	#9,$2C(a1)

loc_6E534:
		lea	ChildObjDat_6EDCC(pc),a2
		jsr	CreateChild1_Normal.w
		lea	ChildObjDat_6EDD4(pc),a2
		jmp	CreateChild3_NormalRepeated.w
; ---------------------------------------------------------------------------

loc_6E548:
		jsr	Swing_UpAndDown.w
		jsr	MoveSprite2.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_6E55A:
		jsr	Swing_Setup1.w

loc_6E55E:
		move.b	#4,5(a0)
		move.w	#$B4,$2E(a0)
		move.l	#loc_6E5A4,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_6E574:
		jsr	Find_SonicTails.w
		addi.w	#$10,d2
		cmpi.w	#$20,d2
		blo.s	loc_6E59E
		move.w	#$100,d1
		bset	#0,4(a0)
		tst.w	d0
		bne.s	loc_6E59A
		neg.w	d1
		bclr	#0,4(a0)

loc_6E59A:
		move.w	d1,$18(a0)

loc_6E59E:
		jmp	Swing_MoveWaitNoFall.w
; ---------------------------------------------------------------------------

loc_6E5A4:
		move.b	#6,5(a0)
		bset	#1,$38(a0)
		clr.w	$18(a0)
		rts
; ---------------------------------------------------------------------------

loc_6E5B6:
		jsr	Swing_UpAndDown.w
		jsr	MoveSprite2.w
		btst	#1,$38(a0)
		beq.s	loc_6E5CC
		rts
; ---------------------------------------------------------------------------

loc_6E5CC:
		move.b	#8,5(a0)
		clr.w	$18(a0)
		rts
; ---------------------------------------------------------------------------

loc_6E5D8:
		jsr	Swing_UpAndDown.w
		jsr	MoveSprite2.w
		move.w	$10(a0),d0
		movea.w	$44(a0),a1
		cmp.w	$10(a1),d0
		beq.s	loc_6E610
		bhi.s	loc_6E602
		addq.w	#1,d0
		move.w	d0,$10(a0)
		bset	#0,4(a0)
		rts
; ---------------------------------------------------------------------------

loc_6E602:
		subq.w	#1,d0

loc_6E604:
		bclr	#0,4(a0)
		move.w	d0,$10(a0)
		rts
; ---------------------------------------------------------------------------

loc_6E610:
		move.b	#$A,5(a0)
		bset	#3,$38(a0)
		move.w	#$BF,$2E(a0)
		move.l	#loc_6E632,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_6E62C:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_6E632:
		bset	#2,$38(a0)
		move.w	#$FF,$2E(a0)
		move.l	#loc_6E650,$34(a0)
		lea	ChildObjDat_6EDE4(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_6E650:
		bclr	#2,$38(a0)
		bset	#7,$38(a0)
		move.w	#$FF,$2E(a0)
		move.l	#loc_6E66C,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_6E66C:
		move.b	#$C,5(a0)
		bclr	#3,$38(a0)
		bclr	#7,$38(a0)
		rts
; ---------------------------------------------------------------------------

loc_6E680:
		move.w	$14(a0),d0
		addq.w	#1,d0
		movea.w	$44(a0),a1
		move.w	$14(a1),d1
		subi.w	#$14,d1
		cmp.w	d1,d0
		bhs.s	loc_6E69C
		move.w	d0,$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_6E69C:
		move.b	#$E,5(a0)
		bset	#3,$38(a0)
		rts
; ---------------------------------------------------------------------------

loc_6E6AA:
		move.w	$14(a0),d0
		subq.w	#1,d0
		cmp.w	$3A(a0),d0
		bls.s	loc_6E6BC
		move.w	d0,$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_6E6BC:
		move.w	$3A(a0),$14(a0)
		bra.w	loc_6E55A
; ---------------------------------------------------------------------------

loc_6E6C6:
		move.l	#Obj_Wait,(a0)
		bset	#4,$38(a0)
		move.l	#loc_6E6E4,$34(a0)
		lea	ChildObjDat_6EE00(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_6E6E4:
;		move.l	#loc_6E724,(a0)
		st	(End_Of_Level_Flag).w
		clr.b	(Boss_flag).w
		move.w	(__u_FAB4).w,d0
		addi.w	#$190,d0
		move.w	d0,(__u_FA92).w

		move.w	#$4840,$10(a0)		; NAT: end level here instead
		jmp	Obj_EndSignControl_HitHUD
;		jsr	Create_New_Sprite.w
;		bne.s	loc_6E718
;		move.l	#Obj_81,(a1)
;		move.w	#$4990,$10(a1)
;		move.w	#$2E0,$14(a1)

loc_6E718:
;		lea	Child6_IncLevX.w,a2
;		jmp	CreateChild6_Simple.w
; ---------------------------------------------------------------------------

loc_6E724:
;		move.w	(Camera_X_pos).w,(Camera_min_X_pos).w
;		tst.b	(End_Of_Level_Flag).w
;		bne.w	locret_6E4C4
;		move.l	#loc_6E778,(a0)
;		jsr	Restore_PlayerControl.w
;		lea	(Player_2).w,a1
;		jsr	Restore_PlayerControl2.w
;		jsr	Obj_PlayLevelMusic.w
;		move.w	#$200,(__u_FA96).w
;		lea	Child6_DecLevY.w,a2
;		jsr	CreateChild6_Simple.w
;		move.w	(__u_FAB4).w,d0
;		addi.w	#$310,d0
;		move.w	d0,(__u_FA92).w
;		lea	Child6_IncLevX.w,a2
;		jmp	CreateChild6_Simple.w
; ---------------------------------------------------------------------------

loc_6E778:
;		cmpi.w	#$4A30,(Player_1+x_pos).w
;		blo.s	locret_6E7B4
;		move.l	#loc_6E7B6,(a0)
;		lea	(ArtKosM_BadnikExplosion).l,a1
;		move.w	#-$4C00,d2
;		jsr	Queue_Kos_Module.w
;		jsr	Create_New_Sprite.w
;		bne.s	locret_6E7B4
;		move.w	a1,$44(a0)
;		move.l	#Obj_CNZCannon,(a1)
;		move.w	#$4B20,$10(a1)
;		move.w	#$2A8,$14(a1)

locret_6E7B4:

;		rts
; ---------------------------------------------------------------------------

loc_6E7B6:
;		move.w	(Camera_X_pos).w,(Camera_min_X_pos).w
;		movea.w	$44(a0),a1
;		cmpi.b	#1,$30(a1)
;		bne.w	locret_6E4C4
;		move.l	#loc_6E7E4,(a0)
;		move.w	#$200,d0
;		move.w	d0,(Camera_target_max_Y_pos).w
;		move.w	#$BF,$2E(a0)
;		st	(Ctrl_1_locked).w
;		rts
; ---------------------------------------------------------------------------

loc_6E7E4:
;		subq.w	#1,$2E(a0)
;		bpl.w	locret_6E4C4
;		movea.w	$44(a0),a1
;		cmpi.b	#$12,$26(a1)
;		bne.w	locret_6E4C4
;		move.l	#loc_6E80C,(a0)

loc_6E800:
;		move.w	#$7070,(Ctrl_1_logical).w
;		st	(Ctrl_1_locked).w
;		rts
; ---------------------------------------------------------------------------

loc_6E80C:
;		move.w	(Camera_Y_pos).w,d0
;		addi.w	#$20,d0
;		cmp.w	(Player_1+y_pos).w,d0
;		blo.w	locret_6E4C4
;		move.w	#$500,d0
;		jsr	StartNewLevel.w
;		jmp	Go_Delete_Sprite_2.w
; ---------------------------------------------------------------------------

loc_6E82C:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_6E844(pc,d0.w),d1
		jsr	off_6E844(pc,d1.w)
		bsr.w	sub_6ED22
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------
off_6E844:	dc.w loc_6E850-off_6E844

		dc.w loc_6E86A-off_6E844
		dc.w loc_6E8A2-off_6E844
		dc.w loc_6E8E8-off_6E844
		dc.w loc_6E8FE-off_6E844
		dc.w loc_6E920-off_6E844
; ---------------------------------------------------------------------------

loc_6E850:
		lea	ObjDat3_6ED9C(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.b	#$10,$1E(a0)
		move.l	#byte_6EE1D,$30(a0)
		rts
; ---------------------------------------------------------------------------

loc_6E86A:
		jsr	Refresh_ChildPositionAdjusted.w
		movea.w	$46(a0),a1
		btst	#1,$38(a1)
		bne.s	loc_6E87E
		rts
; ---------------------------------------------------------------------------

loc_6E87E:
		move.b	#4,5(a0)
		move.l	#loc_6E8B6,$34(a0)
		jsr	Find_SonicTails.w
		move.w	#$100,d1
		tst.w	d0
		bne.s	loc_6E89C
		neg.w	d1

loc_6E89C:
		move.w	d1,$18(a0)
		rts
; ---------------------------------------------------------------------------

loc_6E8A2:
		jsr	MoveSprite.w
		tst.w	$1A(a0)
		bmi.w	locret_6E4C4
		jmp	ObjHitFloor_DoRoutine.w
; ---------------------------------------------------------------------------

loc_6E8B6:
		moveq	#$5D,d0
		jsr	Play_Sound_2.w
		move.w	$1A(a0),d0
		cmpi.w	#$80,d0
		blo.s	loc_6E8D2
		asr.w	#1,d0
		neg.w	d0
		move.w	d0,$1A(a0)
		rts
; ---------------------------------------------------------------------------

loc_6E8D2:
		move.b	#6,5(a0)
		movea.w	$46(a0),a1
		move.w	a0,$44(a1)
		bclr	#1,$38(a1)
		rts
; ---------------------------------------------------------------------------

loc_6E8E8:
		movea.w	$46(a0),a1
		btst	#3,$38(a1)
		bne.s	loc_6E8F6
		rts
; ---------------------------------------------------------------------------

loc_6E8F6:
		move.b	#8,5(a0)
		rts
; ---------------------------------------------------------------------------

loc_6E8FE:
		movea.w	$46(a0),a1
		btst	#3,$38(a1)
		beq.s	loc_6E910
		jmp	Animate_RawMultiDelay.w
; ---------------------------------------------------------------------------

loc_6E910:
		move.b	#$A,5(a0)
		move.b	#4,$22(a0)
		bra.w	loc_6EAD0
; ---------------------------------------------------------------------------

loc_6E920:
		movea.w	$46(a0),a1
		bclr	#3,$38(a1)
		bne.s	loc_6E92E
		rts
; ---------------------------------------------------------------------------

loc_6E92E:
		move.b	#2,5(a0)
		rts
; ---------------------------------------------------------------------------

loc_6E936:

		lea	word_6EDA8(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#Obj_FlickerMove,(a0)
		tst.b	$2C(a0)
		beq.s	loc_6E952
		bset	#0,4(a0)

loc_6E952:
		moveq	#8,d0
		jmp	Set_IndexedVelocity.w
; ---------------------------------------------------------------------------

loc_6E95A:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_6E986(pc,d0.w),d1
		jsr	off_6E986(pc,d1.w)
		lea	(CNZEndBossMagnet_AngleX).l,a1
		jsr	(MoveSprite_AngleXLookupOffset).l
		bsr.w	sub_6EBD8
		bsr.w	sub_6EBF0
		bsr.w	sub_6ED4C
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------
off_6E986:	dc.w loc_6E994-off_6E986

		dc.w loc_6E9B2-off_6E986
		dc.w loc_6E9E2-off_6E986
		dc.w loc_6EA26-off_6E986
		dc.w loc_6EA5C-off_6E986
		dc.w loc_6EA92-off_6E986
		dc.w loc_6EAB2-off_6E986
; ---------------------------------------------------------------------------

loc_6E994:
		lea	ObjDat3_6EDB4(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.b	$2C(a0),d0
		lsl.b	#5,d0
		move.b	d0,$3C(a0)
		move.l	#byte_6EE0E,$30(a0)
		rts
; ---------------------------------------------------------------------------

loc_6E9B2:
		movea.w	$46(a0),a1
		btst	#3,$38(a1)
		bne.s	loc_6E9C0
		rts
; ---------------------------------------------------------------------------

loc_6E9C0:
		move.b	#4,5(a0)
		move.b	#1,$40(a0)
		move.w	#$40,$2E(a0)
		move.l	#loc_6EA1A,$34(a0)
		move.b	$3C(a0),$3A(a0)
		rts
; ---------------------------------------------------------------------------

loc_6E9E2:
		movea.w	$46(a0),a1
		btst	#2,$38(a1)
		bne.s	loc_6EA02
		move.b	$40(a0),d0
		add.b	d0,$3C(a0)
		jsr	Animate_RawMultiDelay.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_6EA02:
		move.b	#6,5(a0)
		lea	ChildObjDat_6EDDC(pc),a2
		jsr	CreateChild1_Normal.w
		move.b	$2C(a0),$2C(a1)
		rts
; ---------------------------------------------------------------------------

loc_6EA1A:
		addq.b	#1,$40(a0)
		move.w	#$40,$2E(a0)
		rts
; ---------------------------------------------------------------------------

loc_6EA26:
		movea.w	$46(a0),a1
		btst	#2,$38(a1)
		beq.s	loc_6EA40
		move.b	$40(a0),d0
		add.b	d0,$3C(a0)
		jmp	Animate_RawMultiDelay.w
; ---------------------------------------------------------------------------

loc_6EA40:
		move.b	#8,5(a0)
		bset	#7,$38(a0)
		move.w	#$40,$2E(a0)
		move.l	#loc_6EA70,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_6EA5C:
		move.b	$40(a0),d0
		add.b	d0,$3C(a0)
		jsr	Animate_RawMultiDelay.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_6EA70:
		cmpi.b	#1,$40(a0)
		beq.s	loc_6EA84
		subq.b	#1,$40(a0)
		move.w	#$40,$2E(a0)
		rts
; ---------------------------------------------------------------------------

loc_6EA84:
		move.b	#$A,5(a0)
		bclr	#7,$38(a0)
		rts
; ---------------------------------------------------------------------------

loc_6EA92:
		jsr	Animate_RawMultiDelay.w
		move.b	$3C(a0),d0
		addq.b	#1,d0
		move.b	d0,$3C(a0)
		cmp.b	$3A(a0),d0
		beq.s	loc_6EAAA
		rts
; ---------------------------------------------------------------------------

loc_6EAAA:
		move.b	#$C,5(a0)
		rts
; ---------------------------------------------------------------------------

loc_6EAB2:
		movea.w	$46(a0),a1
		btst	#3,$38(a1)
		beq.s	loc_6EAC4
		jmp	Animate_RawMultiDelay.w
; ---------------------------------------------------------------------------

loc_6EAC4:
		move.b	#2,5(a0)
		move.b	#1,$22(a0)

loc_6EAD0:
		clr.b	$24(a0)
		clr.b	$23(a0)
		rts
; ---------------------------------------------------------------------------

loc_6EADA:

		lea	ObjDat3_6EDC0(pc),a1
		jsr	SetUp_ObjAttributes.w
		bset	#5,$2B(a0)
		move.l	#byte_6EE2C,$30(a0)
		move.l	#loc_6EB34,$34(a0)
		btst	#1,$2C(a0)
		beq.s	loc_6EB0C
		move.l	#loc_6EB0C,(a0)
		bra.w	sub_6EC1E
; ---------------------------------------------------------------------------

loc_6EB0C:

		move.l	#loc_6EB16,(a0)
		bra.w	sub_6EC1E
; ---------------------------------------------------------------------------

loc_6EB16:
		moveq	#$78,d0
		jsr	sub_85E52.w
		jsr	Refresh_ChildPosition.w
		jsr	Animate_Raw.w
		bsr.w	sub_6EC1E
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------

loc_6EB34:

		move.b	#9,$22(a0)
		move.b	$39(a0),d0
		addq.b	#1,d0
		move.b	d0,$39(a0)
		andi.b	#3,d0
		andi.b	#-4,4(a0)
		or.b	d0,4(a0)
		rts
; ---------------------------------------------------------------------------
		lea	ObjDat3_6EDC0(pc),a1
		jsr	SetUp_ObjAttributes.w
		bset	#5,$2B(a0)
		move.l	#loc_6EB34,$34(a0)
		move.b	$2C(a0),d0
		beq.s	loc_6EB84
		move.l	#byte_6EE3B,$30(a0)
		move.l	#loc_6EB8C,(a0)
		bra.w	sub_6EC1E
; ---------------------------------------------------------------------------

loc_6EB84:
		move.l	#byte_6EE32,$30(a0)

loc_6EB8C:
		move.l	#loc_6EB96,(a0)
		bra.w	sub_6EC1E
; ---------------------------------------------------------------------------

loc_6EB96:
		jsr	Refresh_ChildPosition.w
		jsr	Animate_RawMultiDelay.w
		bsr.w	sub_6EC1E
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------

loc_6EBAC:

		lea	word_6EDAE(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#Obj_FlickerMove,(a0)
		move.b	$2C(a0),d0
		lsr.b	#1,d0
		addi.b	#$B,d0
		move.b	d0,$22(a0)
		moveq	#0,d0
		jsr	Set_IndexedVelocity.w
		jmp	Draw_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_6EBD8:
		move.b	$3C(a0),d0
		move.w	#prio(4),8(a0)
		addi.b	#$40,d0
		bpl.s	locret_6EBEE
		move.w	#prio(5),8(a0)

locret_6EBEE:
		rts
; End of function sub_6EBD8


; =============== S U B R O U T I N E =======================================


sub_6EBF0:
		cmpi.b	#3,$22(a0)
		beq.s	locret_6EC12
		move.b	$3C(a0),d0
		lea	byte_6EC14(pc),a1
		moveq	#4,d6

loc_6EC02:
		cmp.b	(a1)+,d0
		blo.s	loc_6EC0E
		addq.w	#1,a1
		dbf	d6,loc_6EC02
		rts
; ---------------------------------------------------------------------------

loc_6EC0E:
		move.b	(a1)+,$22(a0)

locret_6EC12:
		rts
; End of function sub_6EBF0

; ---------------------------------------------------------------------------
byte_6EC14:	dc.b  $30,   1
		dc.b  $58,   8
		dc.b  $A8,   2
		dc.b  $D0,   8
		dc.b  $FF,   1

; =============== S U B R O U T I N E =======================================


sub_6EC1E:

		movea.w	$46(a0),a1
		btst	#7,$38(a1)
		bne.s	loc_6EC34
		btst	#7,$2A(a1)
		bne.s	loc_6EC34
		rts
; ---------------------------------------------------------------------------

loc_6EC34:

		jmp	Go_Delete_Sprite.w
; End of function sub_6EC1E


; =============== S U B R O U T I N E =======================================


sub_6EC3A:
		btst	#2,$38(a0)
		bne.s	loc_6EC44
		rts
; ---------------------------------------------------------------------------

loc_6EC44:
		lea	(Player_1).w,a1
		bsr.w	sub_6EC50
		lea	(Player_2).w,a1
; End of function sub_6EC3A


; =============== S U B R O U T I N E =======================================


sub_6EC50:
		move.w	$10(a0),d0
		sub.w	$10(a1),d0
		spl	d1
		bpl.s	loc_6EC5E
		neg.w	d0

loc_6EC5E:
		andi.w	#-$40,d0
		cmpi.w	#$1C0,d0
		blo.s	loc_6EC6C
		move.w	#$1C0,d0

loc_6EC6C:
		lsr.w	#4,d0
		move.l	dword_6EC7E(pc,d0.w),d2
		tst.b	d1
		bne.s	loc_6EC78
		neg.l	d2

loc_6EC78:
		add.l	d2,$10(a1)
		rts
; End of function sub_6EC50

; ---------------------------------------------------------------------------
dword_6EC7E:	dc.l $28000
		dc.l $20000
		dc.l $1C000
		dc.l $18000
		dc.l $14000
		dc.l $10000
		dc.l $C000
		dc.l $8000

; =============== S U B R O U T I N E =======================================


sub_6EC9E:
		tst.l	(a0)
		beq.s	locret_6ECF4
		tst.b	$28(a0)
		bne.s	locret_6ECF4
		tst.b	$29(a0)
		beq.s	loc_6ECF6
		tst.b	$20(a0)
		bne.s	loc_6ECC2
		move.b	#$20,$20(a0)
		moveq	#$6E,d0
		jsr	Play_Sound_2.w

loc_6ECC2:
		bset	#6,$2A(a0)
		moveq	#0,d0
		btst	#0,$20(a0)
		bne.s	loc_6ECD4
		addq.w	#8,d0

loc_6ECD4:
		lea	word_6ED0A(pc),a1
		lea	word_6ED12(pc,d0.w),a2
		jsr	CopyWordData_4.w
		subq.b	#1,$20(a0)
		bne.s	locret_6ECF4
		bclr	#6,$2A(a0)
		move.b	$25(a0),$28(a0)

locret_6ECF4:
		rts
; ---------------------------------------------------------------------------

loc_6ECF6:
		move.l	#Wait_FadeToLevelMusic,(a0)
		move.l	#loc_6E6C6,$34(a0)
		jmp	BossDefeated_StopTimer.w
; End of function sub_6EC9E

; ---------------------------------------------------------------------------
word_6ED0A:	dc.w $FC32
		dc.w $FC34
		dc.w $FC36
		dc.w $FC3C
word_6ED12:	dc.w $60
		dc.w $20
		dc.w $20
		dc.w $640
		dc.w $888
		dc.w $EEE
		dc.w $EEE
		dc.w $AAA

; =============== S U B R O U T I N E =======================================


sub_6ED22:
		movea.w	$46(a0),a1
		btst	#7,$2A(a1)
		beq.s	loc_6ED32
		clr.b	$28(a0)

loc_6ED32:
		btst	#4,$38(a1)
		bne.s	loc_6ED3C
		rts
; ---------------------------------------------------------------------------

loc_6ED3C:
		move.l	#Delete_Current_Sprite,(a0)
		lea	ChildObjDat_6EDF2(pc),a2
		jmp	CreateChild1_Normal.w
; End of function sub_6ED22


; =============== S U B R O U T I N E =======================================


sub_6ED4C:
		movea.w	$46(a0),a1
		btst	#7,$2A(a1)
		beq.s	loc_6ED5C
		clr.b	$28(a0)

loc_6ED5C:
		btst	#4,$38(a1)
		bne.s	loc_6ED66
		rts
; ---------------------------------------------------------------------------

loc_6ED66:
		bset	#7,$2A(a0)
		move.b	#1,$22(a0)
		clr.b	$28(a0)
		move.l	#Obj_FlickerMove,(a0)
		moveq	#0,d0
		jmp	Set_IndexedVelocity.w
; End of function sub_6ED4C

; ---------------------------------------------------------------------------
ObjDat3_6ED84:	dc.l Map_CNZEndBoss
		dc.w $2430
		dc.w prio(5)
		dc.b $40
		dc.b $14
		dc.b 0
		dc.b 6
		dc.l Map_RobotnikShip
		dc.w $852E
		dc.w prio(5)
		dc.b $20
		dc.b $20
		dc.b 5
		dc.b 0
ObjDat3_6ED9C:	dc.l Map_CNZEndBoss
		dc.w $2430
		dc.w prio(5)
		dc.b $10
		dc.b $10
		dc.b 4
		dc.b $8B
word_6EDA8:	dc.w prio(5)
		dc.b 8
		dc.b $10
		dc.b $A
		dc.b 0
word_6EDAE:	dc.w prio(5)
		dc.b $14
		dc.b $14
		dc.b 0
		dc.b 0
ObjDat3_6EDB4:	dc.l Map_CNZEndBoss
		dc.w $2430
		dc.w prio(4)
		dc.b 8
		dc.b $10
		dc.b 1
		dc.b $9E
ObjDat3_6EDC0:	dc.l Map_CNZEndBoss

		dc.w $2430
		dc.w prio(1)
		dc.b $10
		dc.b $40
		dc.b 6
		dc.b $AB
ChildObjDat_6EDCC:dc.w 0
		dc.l loc_6E82C
		dc.w $14
ChildObjDat_6EDD4:dc.w 3
		dc.l loc_6E95A
		dc.w 8
ChildObjDat_6EDDC:dc.w 0
		dc.l loc_6EADA
		dc.w $4C
ChildObjDat_6EDE4:dc.w 1
		dc.l loc_6EADA
		dc.w $F454
		dc.l loc_6EADA
		dc.w $C54
ChildObjDat_6EDF2:dc.w 1
		dc.l loc_6E936
		dc.w $F800
		dc.l loc_6E936
		dc.w $800
ChildObjDat_6EE00:dc.w 1
		dc.l loc_6EBAC
		dc.w $EC00
		dc.l loc_6EBAC
		dc.w $1400
byte_6EE0E:	dc.b	1,   0
		dc.b	3,   0
		dc.b	1,   0
		dc.b	3,   0
		dc.b	1,   4
		dc.b	3,   0
		dc.b	1,   9
		dc.b  $FC
byte_6EE1D:	dc.b	4,   0
		dc.b	5,   0
		dc.b	4,   0
		dc.b	5,   0
		dc.b	4,   4
		dc.b	5,   0
		dc.b	4,   9
		dc.b  $FC
byte_6EE2C:	dc.b	0,   9
		dc.b	6,   9
		dc.b	7, $F4
byte_6EE32:	dc.b	9, $1F
		dc.b	6,   0
		dc.b	9,   2
		dc.b	7,   0
		dc.b  $FC
byte_6EE3B:	dc.b	9, $24,	  6,   0
		dc.b	9,   2,	  7,   0
		dc.b  $FC,   7,	  0,   1
		dc.b  $FC
Pal_CNZEndBoss:	binclude "Levels/CNZ/Palettes/End Boss.bin"
	even

; ---------------------------------------------------------------------------

Obj_AA_1_FBZ1_Boss:
		lea	byte_6EE98(pc),a1
		jsr	(Check_CameraInRange).l
		btst	#5,OptionsBits.w		; NAT: Check if bosses are on
		bne.s	.enabled			; if are, branch

		lea	.screen(pc),a1			; else, lock screen
		jmp	Boss_Force_End_2		;

.screen		dc.w $2E60, $2E70, $540, $540

.enabled	st	BossHitMode.w			; NAT: Enable hit mode
		clr.w	BossHitsP1.w			; clear hits count
		move.l	#.ok,(a0)			; set new obj

.ok		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_6EE8E(pc,d0.w),d1
		jsr	off_6EE8E(pc,d1.w)
		bsr.w	sub_6F786
		bsr.w	sub_6F994
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
off_6EE8E:	dc.w loc_6EEA8-off_6EE8E

		dc.w loc_6EF0E-off_6EE8E
		dc.w loc_6EF32-off_6EE8E
		dc.w loc_6EF5A-off_6EE8E
		dc.w loc_6EF76-off_6EE8E
byte_6EE98:	dc.b	2, $40
		dc.b	6,   0
		dc.b  $2D, $20
		dc.b  $2F, $20
		dc.b	5, $40
		dc.b	5, $40
		dc.b  $2E, $20
		dc.b  $2E, $20
; ---------------------------------------------------------------------------

loc_6EEA8:
		lea	Obj3_6FA34(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.b	#6,$29(a0)
		st	Boss_flag.w
		move.w	(Camera_max_X_pos).w,(__u_FA92).w
		move.w	(Camera_max_Y_pos).w,(__u_FA98).w
		move.w	#$540,(Camera_target_max_Y_pos).w
		move.w	#$2E40,$3A(a0)
		move.l	#loc_6EF14,$34(a0)
		lea	PLC_83D64.w,a1
		jsr	Load_PLC_Raw.w
		lea	(ArtKosM_FBZMiniboss).l,a1
		move.w	#-$5A40,d2
		jsr	Queue_Kos_Module.w
		lea	Pal_FBZMiniboss(pc),a1
		jsr	PalLoad_Line1.w
		lea	ChildObjDat_6FA76(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_6EF0E:
		jmp	(loc_85C7E).l
; ---------------------------------------------------------------------------

loc_6EF14:
		move.b	#4,5(a0)
		move.w	(Camera_max_X_pos).w,(__u_FA92).w
		move.w	$3A(a0),d0
		move.w	d0,(Camera_min_X_pos).w
		addi.w	#$40,d0
		move.w	d0,(Camera_max_X_pos).w
		rts
; ---------------------------------------------------------------------------

loc_6EF32:
		btst	#0,$38(a0)
		bne.s	loc_6EF3C

locret_6EF58:
		rts
; ---------------------------------------------------------------------------

loc_6EF3C:
		move.b	#6,5(a0)
		move.l	#loc_6EF60,$34(a0)
		move.w	#$78,$2E(a0)
		moveq	#-$1F,d0
		jmp	Play_Sound.w
; ---------------------------------------------------------------------------

loc_6EF5A:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_6EF60:
		move.b	#8,5(a0)
		moveq	#Mus_Minib_SK,d0
		move.b	d0,(Level_music+$1).w
		jsr	Play_Sound.w
; ---------------------------------------------------------------------------

loc_6EF76:
		bclr	#7,$38(a0)
		beq.s	locret_6EF58
		lea	ChildObjDat_6FAA8(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_6EF88:
		subq.w	#1,$2E(a0)
		bmi.s	loc_6EF98
		bsr.w	sub_6F786
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_6EF98:
		bclr	#7,4(a0)
		move.w	#$77,$2E(a0)
		jsr	Create_New_Sprite.w
		bne.s	loc_6EFB2
		move.l	#Obj_Song_Fade_ToLevelMusic,(a1)

loc_6EFB2:

		jsr	Obj_EndSignControl_HitHUD	; NAT: do extra stuff here
		lea	ChildObjDat_6FAB0(pc),a2
		jmp	CreateChild6_Simple.w
; ---------------------------------------------------------------------------

loc_6EFDA:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_6EFF2(pc,d0.w),d1
		jsr	off_6EFF2(pc,d1.w)
		bsr.w	sub_6F796
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------
off_6EFF2:	dc.w loc_6EFF6-off_6EFF2

		dc.w loc_6F010-off_6EFF2
; ---------------------------------------------------------------------------

loc_6EFF6:
		lea	(ObjDat3_89E84).l,a1
		jsr	SetUp_ObjAttributes.w

loc_6F002:
		move.w	#prio(5),8(a0)
		move.w	$14(a0),$3E(a0)
		rts
; ---------------------------------------------------------------------------

loc_6F010:
		movea.w	$46(a0),a1
		btst	#7,$2A(a1)
		bne.s	loc_6F04A
		move.w	$3E(a0),d0
		moveq	#2,d1			; prepare value for later

		btst	#4,$2A(a0)		; NAT: Also tails
		bne.s	.tails
		btst	#3,$2A(a0)
		bne.s	.sonic

		moveq	#-1,d1			; neither
		btst	#2,$38(a1)
		bne.s	loc_6F03C
		bclr	#0,$38(a1)
		move.w	d0,$14(a0)
		rts
; ---------------------------------------------------------------------------

.tails		subq.b	#1,d1			; set to Tails
		btst	#3,$2A(a0)
		beq.s	loc_6F03C		; branch if Sonic is not standing on it
.sonic		subq.b	#2,d1			; set to Sonic

loc_6F03C:
		move.b	d1,$1C(a1)		; set player standing
		bset	#0,$38(a1)
		addq.w	#4,d0
		move.w	d0,$14(a0)

		addq.b	#1,d1			; 0-align
		add.b	d1,d1			; double offset
		move.w	.cols(pc,d1.w),Normal_palette_line_2+$1E.w; set palette data
		rts

.cols		dc.w $222, $C22, $08C
; ---------------------------------------------------------------------------

loc_6F04A:
		move.l	#loc_6F056,(a0)
		addq.w	#8,$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_6F056:
		bsr.w	sub_6F796
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_6F060:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_6F074(pc,d0.w),d1
		jsr	off_6F074(pc,d1.w)
		jmp	Child_Draw_Sprite2.w
; ---------------------------------------------------------------------------
off_6F074:	dc.w loc_6F07C-off_6F074

		dc.w loc_6F086-off_6F074
		dc.w loc_6F0AA-off_6F074
		dc.w loc_6F0B8-off_6F074
; ---------------------------------------------------------------------------

loc_6F07C:
		lea	word_6FA58(pc),a1
		jmp	SetUp_ObjAttributes3.w
; ---------------------------------------------------------------------------

loc_6F086:
		movea.w	$46(a0),a1
		btst	#0,$38(a1)
		bne.s	loc_6F094
		rts
; ---------------------------------------------------------------------------

loc_6F094:
		move.b	#4,5(a0)
		move.w	#$40,$2E(a0)
		move.l	#loc_6F0B0,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_6F0AA:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_6F0B0:
		move.b	#6,5(a0)
		rts
; ---------------------------------------------------------------------------

loc_6F0B8:
		jsr	(Find_SonicTails8Way).l
		addi.w	#9,d4
		move.b	d4,$22(a0)
		rts
; ---------------------------------------------------------------------------

loc_6F0CE:
		lea	word_6FA5E(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_6F102,(a0)
		move.w	#$EEE,(Normal_palette_line_2+$1E).w
		lea	(word_6FAE0).l,a1
		lea	(PalRotation_Data).w,a2
		move.l	(a1)+,(a2)+
		move.l	(a1)+,(a2)+
		clr.w	(a2)
		move.l	#Go_Delete_Sprite,(__u_FADA).w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_6F102:
		jsr	Run_PalRotationScript.w
		jmp	Draw_Sprite.w

; ---------------------------------------------------------------------------

loc_6F10E:

		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_6F122(pc,d0.w),d1
		jsr	off_6F122(pc,d1.w)
		jmp	Child_Draw_Sprite2.w
; ---------------------------------------------------------------------------
off_6F122:	dc.w loc_6F12A-off_6F122

		dc.w loc_6F142-off_6F122
		dc.w loc_6F162-off_6F122
		dc.w locret_6F176-off_6F122
; ---------------------------------------------------------------------------

loc_6F12A:
		lea	word_6FA40(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.b	$2C(a0),d0
		lsr.b	#1,d0
		addq.b	#1,d0
		move.b	d0,$22(a0)
		rts
; ---------------------------------------------------------------------------

loc_6F142:
		movea.w	$46(a0),a1
		btst	#0,$38(a1)
		bne.s	loc_6F150
		rts
; ---------------------------------------------------------------------------

loc_6F150:
		move.b	#4,5(a0)
		move.l	#loc_6F16E,$34(a0)
		bra.w	loc_6F7A6
; ---------------------------------------------------------------------------

loc_6F162:
		jsr	MoveSprite2.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_6F16E:
		move.b	#6,5(a0)
		rts
; ---------------------------------------------------------------------------

locret_6F176:
		rts
; ---------------------------------------------------------------------------

loc_6F178:

		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_6F190(pc,d0.w),d1
		jsr	off_6F190(pc,d1.w)
		bsr.w	sub_6FA14
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
off_6F190:	dc.w loc_6F1A6-off_6F190

		dc.w loc_6F1D6-off_6F190
		dc.w loc_6F1F4-off_6F190
		dc.w loc_6F218-off_6F190
		dc.w loc_6F1F4-off_6F190
		dc.w loc_6F29E-off_6F190
		dc.w loc_6F338-off_6F190
		dc.w loc_6F1F4-off_6F190
		dc.w loc_6F378-off_6F190
		dc.w loc_6F384-off_6F190
		dc.w loc_6F1F4-off_6F190
; ---------------------------------------------------------------------------

loc_6F1A6:
		lea	word_6FA46(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.w	#-$140,d0
		subi.b	#$A,$2C(a0)
		beq.s	loc_6F1CA
		neg.w	d0
		bset	#0,4(a0)
		move.w	#$3F,$2E(a0)

loc_6F1CA:
		move.w	d0,$18(a0)
		move.w	#-$D0,$1A(a0)
		rts
; ---------------------------------------------------------------------------

loc_6F1D6:
		movea.w	$46(a0),a1
		btst	#0,$38(a1)
		bne.s	loc_6F1E4
		rts
; ---------------------------------------------------------------------------

loc_6F1E4:
		move.b	#4,5(a0)
		move.l	#loc_6F1FA,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_6F1F4:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_6F1FA:
		move.b	#6,5(a0)
		move.w	#$1F,$2E(a0)
		move.l	#loc_6F224,$34(a0)
		lea	word_6FAA2(pc),a2
		jmp	CreateChild4_LinkListRepeated.w
; ---------------------------------------------------------------------------

loc_6F218:
		jsr	MoveSprite2.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_6F224:
		move.b	#8,5(a0)
		bset	#3,$38(a0)
		move.w	#$1F,$2E(a0)
		move.l	#loc_6F240,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_6F240:
		clr.w	PlayerSpawn.w			; NAT: enable respawn

		move.b	#$A,5(a0)
		bset	#2,$38(a0)
		bclr	#3,$38(a0)
		movea.w	$46(a0),a1
		bclr	#1,$38(a1)
		bclr	#1,$38(a0)
		bclr	#6,$38(a1)
		bclr	#6,$38(a0)
		move.w	#$78,$2E(a0)
		move.l	#loc_6F2A8,$34(a0)
		move.b	#-$60,$3C(a0)
		move.b	#2,$40(a0)
		btst	#0,4(a0)
		beq.s	locret_6F29C
		move.b	#$60,$3C(a0)
		move.b	#-2,$40(a0)

locret_6F29C:
		rts
; ---------------------------------------------------------------------------

loc_6F29E:
		bsr.w	sub_6F7F2
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_6F2A8:
		move.w	#$F0,$2E(a0)
		movea.w	$46(a0),a1
		btst	#0,$38(a1)
		beq.s	loc_6F2E4
		btst	#1,$38(a1)
		bne.w	locret_6EF58
		move.b	#$C,5(a0)
		bclr	#2,$38(a0)
		bset	#1,$38(a1)
		bset	#1,$38(a0)
		bset	#7,$38(a1)
		rts

; ---------------------------------------------------------------------------

loc_6F2E4:
		btst	#6,$38(a1)
		bne.w	locret_6EF58
		jsr	Obj_LRZMB_ChooseTarget		; NAT: Target a player
		move.w	$42(a0),a2			; NAT: Get the player to target to a2
		tst.b	$40(a2)
		bne.w	locret_6EF58
		move.w	$10(a2),d0
		cmp.w	$10(a1),d0
		bhs.s	loc_6F30E
		btst	#0,4(a0)
		beq.s	loc_6F318
.rts		rts
; ---------------------------------------------------------------------------

loc_6F30E:
		btst	#0,4(a0)
		beq.s	loc_6F2E4.rts

loc_6F318:
		move.b	#$12,5(a0)
		bclr	#2,$38(a0)
		bset	#6,$38(a1)
		bset	#6,$38(a0)
		bset	#7,$38(a1)
		st	PlayerSpawn.w			; NAT: disable respawn
		rts
; ---------------------------------------------------------------------------

loc_6F338:
		btst	#3,$38(a0)
		bne.s	loc_6F344
		bra.w	sub_6F830
; ---------------------------------------------------------------------------

loc_6F344:
		move.b	#$E,5(a0)
		move.b	#2,$40(a0)
		move.w	#$60,$2E(a0)
		move.l	#loc_6F360,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_6F360:
		move.b	#$10,5(a0)
		bclr	#3,$38(a0)
		movea.w	$46(a0),a1
		bclr	#2,$38(a1)
		rts
; ---------------------------------------------------------------------------

loc_6F378:
		btst	#2,$38(a0)
		bne.w	loc_6F240

loc_6F382:
		rts
; ---------------------------------------------------------------------------

loc_6F384:
		bclr	#3,$38(a0)
		beq.s	loc_6F382
; ---------------------------------------------------------------------------

loc_6F38E:
		move.b	#$14,5(a0)
		move.w	#$10,$2E(a0)
		move.l	#loc_6F3A4,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_6F3A4:
		move.b	#$10,5(a0)
		bset	#3,$38(a0)
		rts
; ---------------------------------------------------------------------------

loc_6F3B2:
		movea.w	$46(a0),a1
		btst	#4,$38(a1)
		bne.s	loc_6F3C4
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_6F3C4:
		move.l	#Obj_FlickerMove,(a0)
		bset	#4,$38(a0)
		move.w	#$3F,$2E(a0)
		moveq	#0,d0
		jmp	Set_IndexedVelocity.w
; ---------------------------------------------------------------------------

loc_6F3DE:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_6F3F6(pc,d0.w),d1
		jsr	off_6F3F6(pc,d1.w)
		bsr.w	sub_6FA14
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------
off_6F3F6:	dc.w loc_6F416-off_6F3F6

		dc.w loc_6F46A-off_6F3F6
		dc.w loc_6F4C0-off_6F3F6
		dc.w loc_6F4F6-off_6F3F6
		dc.w loc_6F53E-off_6F3F6
		dc.w loc_6F554-off_6F3F6
		dc.w loc_6F5B8-off_6F3F6
		dc.w loc_6F5E0-off_6F3F6
		dc.w loc_6F612-off_6F3F6
		dc.w loc_6F620-off_6F3F6
		dc.w loc_6F632-off_6F3F6
		dc.w loc_6F64E-off_6F3F6
		dc.w loc_6F67E-off_6F3F6
		dc.w loc_6F6A6-off_6F3F6
		dc.w loc_6F6E4-off_6F3F6
		dc.w loc_6F728-off_6F3F6
; ---------------------------------------------------------------------------

loc_6F416:
		addq.b	#2,$2C(a0)
		cmpi.b	#$A,$2C(a0)
		beq.s	loc_6F432
		lea	word_6FA4C(pc),a1
		move.w	#4,$3E(a0)
		jmp	SetUp_ObjAttributes3.w
; ---------------------------------------------------------------------------

loc_6F432:
		lea	word_6FA52(pc),a1
		move.w	#3,$3E(a0)
		jsr	SetUp_ObjAttributes3.w
		move.b	#-$7A,$28(a0)
		movea.w	$46(a0),a1
		movea.w	$46(a1),a1
		movea.w	$46(a1),a1
		movea.w	$46(a1),a1
		movea.w	$46(a1),a1
		move.w	a1,$44(a0)
		move.w	a1,$30(a1)
		move.w	a0,$32(a1)
		rts
; ---------------------------------------------------------------------------

loc_6F46A:
		jsr	Refresh_ChildPosition.w
		movea.w	$46(a0),a1
		btst	#3,$38(a1)
		bne.s	loc_6F47E
		rts
; ---------------------------------------------------------------------------

loc_6F47E:
		move.b	#4,5(a0)
		bset	#3,$38(a0)
		bsr.w	sub_6F7D2
		move.w	#$F,$2E(a0)
		move.l	#loc_6F4CC,$34(a0)
		movea.w	$46(a0),a1
		move.w	$30(a1),$30(a0)
		move.w	$32(a1),$32(a0)
		btst	#0,4(a1)
		beq.s	locret_6F4BE
		bset	#0,4(a0)
		neg.w	$18(a0)

locret_6F4BE:
		rts
; ---------------------------------------------------------------------------

loc_6F4C0:
		jsr	MoveSprite2.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_6F4CC:
		move.b	#6,5(a0)
		bclr	#3,$38(a0)
		clr.w	$18(a0)
		clr.w	$1A(a0)
		move.w	#prio(1),8(a0)
		cmpi.b	#$A,$2C(a0)
		beq.s	locret_6F4F4
		move.w	#prio(3),8(a0)

locret_6F4F4:
		rts
; ---------------------------------------------------------------------------

loc_6F4F6:
		movea.w	$46(a0),a1

loc_6F4FA:
		btst	#2,$38(a1)
		bne.s	loc_6F504
		rts
; ---------------------------------------------------------------------------

loc_6F504:

		move.b	#8,5(a0)
		bset	#2,$38(a0)
		bclr	#3,$38(a0)
		bclr	#6,$38(a0)
		bclr	#1,$38(a0)
		move.b	$3C(a1),$3C(a0)
		move.b	$40(a1),$40(a0)
		move.b	$2C(a0),d0
		add.b	d0,d0
		move.b	d0,$3B(a0)
		move.b	d0,$3A(a0)
		rts
; ---------------------------------------------------------------------------

loc_6F53E:
		subq.b	#1,$3B(a0)
		bpl.s	loc_6F54A
		move.b	#$A,5(a0)

loc_6F54A:
		move.w	$3E(a0),d2
		jmp	MoveSprite_CircularSimple.w
; ---------------------------------------------------------------------------

loc_6F554:
		bsr.w	sub_6F7F2
		move.w	$3E(a0),d2
		jsr	MoveSprite_CircularSimple.w
		movea.w	$46(a0),a1
		btst	#1,$38(a1)
		bne.s	loc_6F578
		btst	#6,$38(a1)
		bne.s	loc_6F58C
		rts
; ---------------------------------------------------------------------------

loc_6F578:
		move.b	#$C,5(a0)
		bset	#1,$38(a0)
		bclr	#2,$38(a0)
		rts
; ---------------------------------------------------------------------------

loc_6F58C:
		move.b	#$18,5(a0)
		bset	#6,$38(a0)
		bclr	#2,$38(a0)
		cmpi.b	#$A,$2C(a0)
		bne.s	locret_6F5B6
		move.w	$44(a0),a2
		move.w	$42(a2),a1		; NAT: Get the player to target to a2
		move.w	$10(a1),$30(a0)
		move.w	$14(a1),$32(a0)

locret_6F5B6:
		rts
; ---------------------------------------------------------------------------

loc_6F5B8:
		bsr.w	sub_6F830
		beq.s	loc_6F5D6
		move.b	#$E,5(a0)
		cmpi.b	#$A,$2C(a0)
		bne.s	loc_6F5D6
		movea.w	$44(a0),a1
		bset	#3,$38(a1)

loc_6F5D6:

		move.w	$3E(a0),d2
		jmp	MoveSprite_CircularSimple.w
; ---------------------------------------------------------------------------

loc_6F5E0:
		movea.w	$46(a0),a1
		btst	#3,$38(a1)
		bne.s	loc_6F5F6
		move.w	$3E(a0),d2
		jmp	MoveSprite_CircularSimple.w
; ---------------------------------------------------------------------------

loc_6F5F6:
		move.b	#$10,5(a0)
		bset	#3,$38(a0)
		move.w	#$F,$2E(a0)
		move.l	#loc_6F618,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_6F612:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_6F618:
		move.b	#$12,5(a0)
		rts
; ---------------------------------------------------------------------------

loc_6F620:
		move.b	#$14,d4
		bsr.w	sub_6F85A
		move.w	$3E(a0),d2
		jmp	MoveSprite_CircularSimple.w
; ---------------------------------------------------------------------------

loc_6F632:
		movea.w	$46(a0),a1
		btst	#3,$38(a1)
		beq.s	loc_6F640
		rts
; ---------------------------------------------------------------------------

loc_6F640:
		move.b	#$16,5(a0)
		bclr	#3,$38(a0)
		rts
; ---------------------------------------------------------------------------

loc_6F64E:
		movea.w	$46(a0),a1
		btst	#2,$38(a1)
		bne.w	loc_6F504
		bsr.w	sub_6F8C8
		beq.s	loc_6F674
		cmpi.b	#$A,$2C(a0)
		bne.s	loc_6F674
		movea.w	$44(a0),a1
		bset	#2,$38(a1)

loc_6F674:

		move.w	$3E(a0),d2
		jmp	MoveSprite_CircularSimple.w
; ---------------------------------------------------------------------------

loc_6F67E:
		bsr.w	sub_6F8F2
		beq.s	loc_6F69C
		move.b	#$1A,5(a0)
		cmpi.b	#$A,$2C(a0)
		bne.s	loc_6F69C
		movea.w	$44(a0),a1
		bset	#3,$38(a1)

loc_6F69C:

		move.w	$3E(a0),d2
		jmp	MoveSprite_CircularSimple.w
; ---------------------------------------------------------------------------

loc_6F6A6:
		movea.w	$46(a0),a1
		btst	#3,$38(a1)
		bne.s	loc_6F6BC
		move.w	$3E(a0),d2
		jmp	MoveSprite_CircularSimple.w
; ---------------------------------------------------------------------------

loc_6F6BC:
		move.b	#$1C,5(a0)
		bset	#3,$38(a0)
		move.w	#$1F,$2E(a0)
		move.l	#loc_6F702,$34(a0)
		cmpi.b	#$A,$2C(a0)
		bne.w	locret_6EF58
		bra.w	loc_6F91C
; ---------------------------------------------------------------------------

loc_6F6E4:
		cmpi.b	#$A,$2C(a0)
		beq.s	loc_6F6F6
		bsr.w	sub_6F93A
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_6F6F6:
		jsr	MoveSprite2.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_6F702:
		move.b	#$1E,5(a0)
		move.w	#$1F,$2E(a0)
		move.l	#loc_6F72E,$34(a0)
		moveq	#-$6A,d0
		jmp	Play_Sound_2.w
; ---------------------------------------------------------------------------

loc_6F720:
		move.b	#$16,5(a0)
		rts
; ---------------------------------------------------------------------------

loc_6F728:
		jsr	Obj_Wait.w

loc_6F72E:
		move.b	#$1C,5(a0)
		neg.w	$18(a0)
		neg.w	$1A(a0)
		move.w	#$1F,$2E(a0)
		move.l	#loc_6F720,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_6F74C:
		lea	(ObjDat3_89E78).l,a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_6F764,(a0)
		move.b	#1,$22(a0)

loc_6F764:
		bsr.w	sub_6F786
		move.w	$10(a0),d0
		andi.w	#-$80,d0
		sub.w	(Camera_X_pos_coarse_back).w,d0
		cmpi.w	#$280,d0
		bhi.s	loc_6F780
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_6F780:
		jmp	Delete_Current_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_6F786:

		moveq	#$23,d1
		moveq	#$20,d2
		moveq	#$1C,d3
		move.w	$10(a0),d4
		jmp	SolidObjectFull.w
; End of function sub_6F786


; =============== S U B R O U T I N E =======================================


sub_6F796:

		moveq	#$1B,d1
		moveq	#8,d2
		moveq	#$D,d3
		move.w	$10(a0),d4
		jmp	SolidObjectFull.w
; End of function sub_6F796

; ---------------------------------------------------------------------------

loc_6F7A6:
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	word_6F7C0(pc,d0.w),$2E(a0)
		add.w	d0,d0
		lea	word_6F7C6(pc,d0.w),a1
		move.w	(a1)+,d1
		move.w	(a1)+,(a0,d1.w)
		rts
; ---------------------------------------------------------------------------
word_6F7C0:	dc.w $20
		dc.w $20
		dc.w $40
word_6F7C6:	dc.w	$18, $FFC0
		dc.w	$18,   $40
		dc.w	$1A,   $40

; =============== S U B R O U T I N E =======================================


sub_6F7D2:
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	locret_6F7E4(pc,d0.w),d0
		move.w	d0,$18(a0)
		move.w	d0,$1A(a0)

locret_6F7E4:
		rts
; End of function sub_6F7D2

; ---------------------------------------------------------------------------
		dc.w $FF40
		dc.w $FE80
		dc.w $FDC0
		dc.w $FD00
		dc.w $FC40
		dc.w $FAD0

; =============== S U B R O U T I N E =======================================


sub_6F7F2:

		move.b	$3C(a0),d0
		moveq	#0,d1
		btst	#0,4(a0)
		beq.s	loc_6F802

loc_6F800:
		addq.w	#2,d1

loc_6F802:
		move.b	$40(a0),d2
		bmi.s	loc_6F814
		move.b	byte_6F82C(pc,d1.w),d3
		cmp.b	d3,d0
		bhs.s	loc_6F81E
		bra.w	loc_6F820
; ---------------------------------------------------------------------------

loc_6F814:
		addq.w	#1,d1
		move.b	byte_6F82C(pc,d1.w),d3
		cmp.b	d3,d0
		bhi.s	loc_6F820

loc_6F81E:
		neg.b	d2

loc_6F820:

		move.b	d2,$40(a0)
		add.b	d2,d0
		move.b	d0,$3C(a0)
		rts
; End of function sub_6F7F2

; ---------------------------------------------------------------------------
byte_6F82C:	dc.b $B0
		dc.b $80
		dc.b $80
		dc.b $50

; =============== S U B R O U T I N E =======================================


sub_6F830:

		btst	#0,4(a0)
		bne.s	loc_6F84A
		addq.b	#2,$3C(a0)
		moveq	#-$40,d0
		cmp.b	$3C(a0),d0
		bhi.s	loc_6F856

loc_6F844:
		move.b	d0,$3C(a0)
		rts
; ---------------------------------------------------------------------------

loc_6F84A:
		subq.b	#2,$3C(a0)
		moveq	#$40,d0
		cmp.b	$3C(a0),d0
		bhs.s	loc_6F844

loc_6F856:
		moveq	#0,d0
		rts
; End of function sub_6F830


; =============== S U B R O U T I N E =======================================


sub_6F85A:
		move.b	$3C(a0),d0
		moveq	#0,d1
		move.b	$2C(a0),d1
		movea.w	$46(a0),a1
		move.b	$40(a1),d2
		move.b	d2,$40(a0)
		lsr.w	#1,d1
		btst	#0,4(a0)
		bne.s	loc_6F888
		move.b	locret_6F8BC+1(pc,d1.w),d3
		sub.b	d2,d0
		cmp.b	d3,d0
		bls.s	loc_6F892
		bra.w	loc_6F8B8
; ---------------------------------------------------------------------------

loc_6F888:
		move.b	byte_6F8C2(pc,d1.w),d3
		add.b	d2,d0
		cmp.b	d3,d0
		blo.s	loc_6F8B8

loc_6F892:
		move.b	d3,d0
		move.b	d4,5(a0)
		addq.b	#2,$40(a0)
		cmpi.b	#$A,$2C(a0)
		bne.s	loc_6F8B8
		movea.w	$44(a0),a1
		movea.w	$46(a1),a1
		bset	#2,$38(a1)
		bset	#6,$3A(a1)

loc_6F8B8:

		move.b	d0,$3C(a0)

locret_6F8BC:
		rts
; End of function sub_6F85A

; ---------------------------------------------------------------------------
		dc.b $A0
		dc.b $88
		dc.b $60
		dc.b $48
byte_6F8C2:	dc.b $38
		dc.b $60
		dc.b $78
		dc.b $90
		dc.b $B8
		dc.b $CC

; =============== S U B R O U T I N E =======================================


sub_6F8C8:
		btst	#0,4(a0)
		bne.s	loc_6F8E2
		addq.b	#2,$3C(a0)
		moveq	#-$60,d0
		cmp.b	$3C(a0),d0
		bhi.s	loc_6F8EE

loc_6F8DC:
		move.b	d0,$3C(a0)
		rts
; ---------------------------------------------------------------------------

loc_6F8E2:
		subq.b	#2,$3C(a0)
		moveq	#$60,d0
		cmp.b	$3C(a0),d0
		bhs.s	loc_6F8DC

loc_6F8EE:
		moveq	#0,d0
		rts
; End of function sub_6F8C8


; =============== S U B R O U T I N E =======================================


sub_6F8F2:
		btst	#0,4(a0)
		bne.s	loc_6F90C
		subq.b	#2,$3C(a0)
		moveq	#-$80,d0
		cmp.b	$3C(a0),d0
		blo.s	loc_6F918

loc_6F906:
		move.b	d0,$3C(a0)
		rts
; ---------------------------------------------------------------------------

loc_6F90C:
		addq.b	#2,$3C(a0)
		moveq	#-$80,d0
		cmp.b	$3C(a0),d0
		blo.s	loc_6F906

loc_6F918:
		moveq	#0,d0
		rts
; End of function sub_6F8F2

; ---------------------------------------------------------------------------

loc_6F91C:
		move.w	$30(a0),d0
		sub.w	$10(a0),d0
		lsl.w	#3,d0
		move.w	d0,$18(a0)
		move.w	$32(a0),d0
		sub.w	$14(a0),d0
		lsl.w	#3,d0
		move.w	d0,$1A(a0)
		rts

; =============== S U B R O U T I N E =======================================


sub_6F93A:
		movea.w	$32(a0),a1
		movea.w	$30(a0),a2
		moveq	#0,d2
		move.b	$2C(a0),d2
		lsr.w	#1,d2
		moveq	#0,d0
		move.w	$10(a1),d0
		move.w	$10(a2),d3
		sub.w	d3,d0
		smi	d1
		bpl.s	loc_6F95C
		neg.w	d0

loc_6F95C:
		divu.w	#5,d0
		mulu.w	d2,d0
		tst.b	d1
		beq.s	loc_6F968
		neg.w	d0

loc_6F968:
		add.w	d0,d3
		move.w	d3,$10(a0)
		moveq	#0,d0
		move.w	$14(a1),d0
		move.w	$14(a2),d3
		sub.w	d3,d0
		smi	d1
		bpl.s	loc_6F980
		neg.w	d0

loc_6F980:
		divu.w	#5,d0
		mulu.w	d2,d0
		tst.b	d1
		beq.s	loc_6F98C
		neg.w	d0

loc_6F98C:
		add.w	d0,d3
		move.w	d3,$14(a0)
		rts
; End of function sub_6F93A


; =============== S U B R O U T I N E =======================================


sub_6F994:
		btst	#6,$3A(a0)
		beq.s	locret_6F9DC
		tst.b	$20(a0)
		bne.s	loc_6F9B6

		lea	$29(a0),a5			; NAT: Get hits counter to a5
		move.b	$1C(a0),d6			; get hitter to d6
		bmi.s	.nah				; if neither, branch
		jsr	Boss_AddPlayerScore		; handle score

.nah		jsr	Boss_HandlePlayerHit2		; handle hits
		ble.s	loc_6F9DE			; if defeated, branch

		move.b	#$20,$20(a0)
		moveq	#$6E,d0
		jsr	Play_Sound_2.w

loc_6F9B6:
		moveq	#0,d0
		btst	#0,$20(a0)
		bne.s	loc_6F9C2
		addq.w	#8,d0

loc_6F9C2:
		lea	word_6F9FC(pc),a1
		lea	word_6FA04(pc,d0.w),a2
		jsr	CopyWordData_4.w
		subq.b	#1,$20(a0)
		bne.s	locret_6F9DC

loc_6F9D6:
		bclr	#6,$3A(a0)

locret_6F9DC:

		rts
; ---------------------------------------------------------------------------

loc_6F9DE:
		move.l	#loc_6EF88,(a0)
		bset	#7,$2A(a0)
		lea	Child6_CreateBossExplosion.w,a2
		jsr	CreateChild1_Normal.w
		jmp	BossDefeated_StopTimer.w
; End of function sub_6F994

; ---------------------------------------------------------------------------
word_6F9FC:	dc.w $FC24
		dc.w $FC28
		dc.w $FC36
		dc.w $FC3E
word_6FA04:	dc.w $222
		dc.w $644
		dc.w $222
		dc.w $44
		dc.w $AAA
		dc.w $AAA
		dc.w $EEE
		dc.w $EEE

; =============== S U B R O U T I N E =======================================


sub_6FA14:

		movea.w	$46(a0),a1
		btst	#7,$2A(a1)
		bne.s	loc_6FA22
		rts
; ---------------------------------------------------------------------------

loc_6FA22:
		move.l	#loc_6F3B2,(a0)
		bset	#7,$2A(a0)
		clr.b	$28(a0)
		rts
; End of function sub_6FA14

; ---------------------------------------------------------------------------
Obj3_6FA34:	dc.l Map_FBZMiniboss
		dc.w $A52E
		dc.w prio(4)
		dc.b $20
		dc.b $20
		dc.b 0
		dc.b 0
word_6FA40:	dc.w prio(2)
		dc.b 8
		dc.b 8
		dc.b 1
		dc.b 0
word_6FA46:	dc.w prio(6)
		dc.b $18
		dc.b $10
		dc.b 5
		dc.b 0
word_6FA4C:	dc.w prio(5)
		dc.b 8
		dc.b 8
		dc.b 6
		dc.b 0
word_6FA52:	dc.w prio(4)
		dc.b $18
		dc.b $18
		dc.b 7
		dc.b 0
word_6FA58:	dc.w prio(2)
		dc.b $10
		dc.b 8
		dc.b 8
		dc.b 0
word_6FA5E:	dc.w prio(3)
		dc.b $10
		dc.b 8
		dc.b $11
		dc.b 0
		dc.w prio(5)
		dc.b $10
		dc.b 8
		dc.b 4
		dc.b 0
		dc.l Map_EggCapsule
		dc.w $8494
		dc.w prio(2)
		dc.b 8
		dc.b 8
		dc.b 0
		dc.b 0
ChildObjDat_6FA76:dc.w 6
		dc.l loc_6F10E
		dc.w $F0F8
		dc.l loc_6F10E
		dc.w $10F8
		dc.l loc_6F10E
		dc.w $F8
		dc.l loc_6EFDA		; button
		dc.w $DC
		dc.l loc_6F060		; eyes
		dc.w $F8
		dc.l loc_6F178
		dc.w 0
		dc.l loc_6F178
		dc.w 0
word_6FAA2:	dc.w 4
		dc.l loc_6F3DE
ChildObjDat_6FAA8:dc.w 0
		dc.l loc_6F0CE
		dc.w $F8
ChildObjDat_6FAB0:dc.w 0
		dc.l loc_6F74C
		dc.b 3
		dc.b 9
		dc.b $A
		dc.b $B
		dc.b $C
		dc.b $D
		dc.b $E
		dc.b $F
		dc.b $10
		dc.b $FC
Pal_FBZMiniboss:	binclude "Levels/FBZ/Palettes/FBZ Miniboss.bin"
	even

word_6FAE0:	dc.w 4
		dc.w 0
		dc.l word_6FAEA
		dc.w 0
word_6FAEA:	dc.w $FC3E
		dc.w	  6,  $EEE,	0,  $644,     3, $FFF4
Map_FBZMiniboss:	include "Levels/FBZ/Misc Object Data/Map - Miniboss.asm"

; ---------------------------------------------------------------------------

Obj_AB_1_FBZ_Laser_Boss:
		lea	word_6FCFC(pc),a1
		jsr	(Check_CameraInRange).l
		btst	#5,OptionsBits.w		; NAT: Check if bosses are on
		bne.s	.enabled			; if are, branch

		lea	.screen(pc),a1			; else, lock screen
		jmp	Boss_Force_End_2		;

.screen		dc.w $2A80, $2AC0, $5E0, $5E0

.enabled	st	BossHitMode.w			; NAT: Enable hit mode
		clr.w	BossHitsP1.w			; clear hits count
		move.l	#.ok,(a0)			; set new obj

.ok		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_6FD2E(pc,d0.w),d1
		jsr	off_6FD2E(pc,d1.w)
		bsr.w	sub_70330
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------
off_6FD2E:	dc.w loc_6FD38-off_6FD2E

		dc.w loc_6FDC0-off_6FD2E
		dc.w loc_6FE00-off_6FD2E
		dc.w loc_6FE22-off_6FD2E
		dc.w loc_6FEB2-off_6FD2E
; ---------------------------------------------------------------------------

loc_6FD38:
		lea	ObjDat3_70396(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.b	#$7F,$29(a0)
		move.b	#2,$39(a0)		; NAT: Require less hits
		st	Boss_flag.w
		move.w	(Camera_target_max_Y_pos).w,(__u_FA98).w
		move.w	#$2900,(Camera_min_X_pos).w
		move.w	#$5E0,(Camera_target_max_Y_pos).w
		lea	PLC_705B6(pc),a1
		jsr	Load_PLC_Raw.w
		lea	Pal_FBZ2Subboss(pc),a1
		jsr	PalLoad_Line1.w
		jsr	Create_New_Sprite.w
		bne.s	loc_6FD9A
		move.l	#Obj_Song_Fade_Transition,(a1)
		move.b	#Mus_Minib_SK,$2C(a1)

loc_6FD9A:
		lea	ChildObjDat_703D0(pc),a2
		jsr	CreateChild1_Normal.w
		lea	ChildObjDat_703DE(pc),a2
		jsr	CreateChild6_Simple.w
		bne.s	loc_6FDB6
		move.b	#$49,$2C(a1)

loc_6FDB6:
		lea	ChildObjDat_703C8(pc),a2
		jmp	CreateChild3_NormalRepeated.w
; ---------------------------------------------------------------------------

loc_6FDC0:
		lea	(Player_1).w,a1
		jsr	Find_OtherObject.w
		cmpi.w	#$18,d2
		blo.s	loc_6FDD2
		lea	(Player_2).w,a1		; NAT: Find Tails
		jsr	Find_OtherObject.w
		cmpi.w	#$18,d2
		blo.s	loc_6FDD2
		rts
; ---------------------------------------------------------------------------

loc_6FDD2:
		move.b	#4,5(a0)
		move.w	#$80,$1A(a0)
		move.w	#$37,$2E(a0)
		move.l	#loc_6FE0C,$34(a0)
		bset	#7,$38(a0)
		bne.w	locret_6FE20
		lea	ChildObjDat_703E4(pc),a2
		jmp	CreateChild3_NormalRepeated.w
; ---------------------------------------------------------------------------

loc_6FE00:
		jsr	MoveSprite2.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_6FE0C:
		move.b	#6,5(a0)
		move.w	#$3F,$2E(a0)
		move.l	#loc_6FE3A,$34(a0)

locret_6FE20:

		rts
; ---------------------------------------------------------------------------

loc_6FE22:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_6FE28:
		subq.b	#1,$39(a0)
		bmi.s	loc_6FE6E
		bset	#3,$38(a0)
		bclr	#6,$2A(a0)

loc_6FE3A:
		move.b	#8,5(a0)
		bclr	#1,$38(a0)
		clr.w	$1A(a0)
		lea	ChildObjDat_703EC(pc),a2
		jsr	CreateChild1_Normal.w
		jsr	Obj_LRZMB_ChooseTarget	; NAT: Target a player

; =============== S U B R O U T I N E =======================================


sub_6FE54:
		move.w	$42(a0),a1		; NAT: Get player we are
		jsr	Find_OtherObject.w
		move.w	#$100,d1
		tst.w	d0
		bne.s	loc_6FE68
		neg.w	d1

loc_6FE68:
		move.w	d1,$18(a0)
		rts
; End of function sub_6FE54

; ---------------------------------------------------------------------------

loc_6FE6E:
		move.l	#Wait_Draw,(a0)
		bset	#7,$2A(a0)
		bset	#5,$38(a0)
		move.w	#$5F,$2E(a0)
		move.l	#loc_6FF10,$34(a0)
		lea	word_6FEA4(pc),a6
		move.w	(a6)+,d6

loc_6FE94:
		movea.l	(a6)+,a1
		move.w	(a6)+,d2
		jsr	Queue_Kos_Module.w
		dbf	d6,loc_6FE94
		rts
; ---------------------------------------------------------------------------
word_6FEA4:	dc.w 1
		dc.l ArtKosM_FBZCloud
		dc.w $7460
		dc.l ArtKosM_FBZBossPillar
		dc.w $7AA0
; ---------------------------------------------------------------------------

loc_6FEB2:
		btst	#1,$38(a0)
		bne.s	loc_6FEFA
		move.b	(V_int_run_count+3).w,d0
		andi.b	#$1F,d0
		bne.s	loc_6FEC6
		bsr.s	sub_6FE54

loc_6FEC6:
		move.w	#$100,d0
		movea.w	$44(a0),a1
		move.w	$10(a1),d1
		move.w	$10(a0),d2
		addi.w	#$20,d1
		cmp.w	d1,d2
		blo.s	loc_6FEF0
		movea.w	$46(a0),a1
		move.w	$10(a1),d1
		subi.w	#$20,d1
		cmp.w	d1,d2
		blo.s	loc_6FEF4
		neg.w	d0

loc_6FEF0:
		move.w	d0,$18(a0)

loc_6FEF4:
		jmp	MoveSprite2.w
; ---------------------------------------------------------------------------

loc_6FEFA:
		move.b	#6,5(a0)
		move.w	#$7F,$2E(a0)
		move.l	#loc_6FE28,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_6FF10:
		bset	#4,$38(a0)
		move.w	#$5F,$2E(a0)
		move.l	#loc_6FF34,$34(a0)
		move.w	#$32B8,Camera_max_X_pos.w	; force camera max pos
		jsr	Create_New_Sprite.w
		bne.s	locret_6FF32
		move.l	#Obj_Song_Fade_ToLevelMusic,(a1)

locret_6FF32:
		rts
; ---------------------------------------------------------------------------

loc_6FF34:
		bset	#2,$38(a0)
		clr.b	(Boss_flag).w
		move.l	#loc_6FF50,(a0)
		lea	(PLC_83D48).l,a1
		jmp	Load_PLC_Raw.w
; ---------------------------------------------------------------------------

loc_6FF50:
		move.w	(Camera_X_pos).w,(Camera_min_X_pos).w
		jmp	Sprite_CheckDeleteXY.w
; ---------------------------------------------------------------------------

loc_6FF5C:
		lea	word_703A2(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_6FF70,(a0)
		bra.w	loc_702EA
; ---------------------------------------------------------------------------

loc_6FF70:

		movea.w	$46(a0),a1
		btst	#7,$2A(a1)
		bne.s	loc_6FFB0
		btst	#1,$2C(a0)
		bne.s	loc_6FFAA
		movea.w	$46(a0),a1
		btst	#3,$38(a1)
		beq.s	loc_6FFAA
		move.l	#loc_6FFB8,(a0)
		move.w	#$1F,$2E(a0)
		move.l	#loc_6FFCA,$34(a0)
		move.w	#$300,$18(a0)		; NAT: Move faster

loc_6FFAA:

		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_6FFB0:
		move.l	#Sprite_OnScreen_Test,(a0)
		rts
; ---------------------------------------------------------------------------

loc_6FFB8:
		jsr	MoveSprite2.w
		jsr	Obj_Wait.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_6FFCA:
		move.l	#loc_6FF70,(a0)
		movea.w	$46(a0),a1
		bclr	#3,$38(a1)
		rts
; ---------------------------------------------------------------------------

loc_6FFDC:
		lea	word_703A8(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_6FFFA,(a0)
		addi.w	#$CC,$10(a0)
		addi.w	#$7C,$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_6FFFA:
		movea.w	$46(a0),a1
		btst	#7,$2A(a1)
		bne.s	loc_7000C

loc_70006:
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_7000C:
		move.l	#Sprite_OnScreen_Test,(a0)
		move.b	#3,$22(a0)
		lea	Child6_CreateBossExplosion.w,a2
		jsr	CreateChild1_Normal.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_7002A:
		lea	ObjDat3_703BC(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_70068,(a0)
		move.l	#loc_700EA,$34(a0)
		addi.w	#$D8,$10(a0)
		addi.w	#$74,$14(a0)
		move.l	#byte_703F4,$30(a0)
		cmpi.b	#2,(Player_1+character_id).w
		bne.s	locret_70066
		move.l	#Map_EggRoboStand,$C(a0)

locret_70066:
		rts
; ---------------------------------------------------------------------------

loc_70068:

		jsr	Animate_RawMultiDelay.w
		movea.w	$46(a0),a1
		btst	#6,$2A(a1)
		beq.s	loc_70080
		move.b	#2,$22(a0)

loc_70080:
		btst	#7,$2A(a1)
		beq.s	loc_70094
		move.l	#loc_7009A,(a0)
		move.b	#3,$22(a0)

loc_70094:
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_7009A:
		movea.w	$46(a0),a1
		btst	#4,$38(a1)
		beq.s	loc_700E4
		move.l	$34(a0),(a0)
		subq.w	#4,$14(a0)
		move.w	#$200,$18(a0)
		move.l	#Map_FBZRobotnikRun,$C(a0)
		move.w	#-$7B57,$A(a0)
		clr.b	$22(a0)
		clr.b	$24(a0)
		clr.b	$23(a0)
		bset	#0,4(a0)
		cmpi.b	#2,(Player_1+character_id).w
		bne.s	loc_700E4
		move.l	#Map_EggRoboRun,$C(a0)

loc_700E4:

		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_700EA:
		tst.b	4(a0)
		bpl.s	loc_70106
		lea	byte_70419(pc),a1
		jsr	Animate_RawNoSST.w
		jsr	MoveSprite2.w
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_70106:
		lea	(PLC_83D3A).l,a1
		jsr	Load_PLC_Raw.w

loc_70112:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_70118:
		lea	word_703AE(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_70152,(a0)
		move.w	#$B0,d0
		move.b	$2C(a0),d1
		bne.s	loc_70134
		neg.w	d0

loc_70134:
		add.w	d0,$10(a0)
		addi.w	#$60,$14(a0)
		movea.w	$46(a0),a1
		moveq	#$44,d0
		tst.b	d1
		beq.s	loc_7014A
		moveq	#$46,d0

loc_7014A:
		move.w	(a1,d0.w),$44(a0)
		rts
; ---------------------------------------------------------------------------

loc_70152:
		movea.w	$46(a0),a1
		btst	#2,$38(a1)
		bne.s	loc_7018C
		move.w	$10(a0),-(sp)
		movea.w	$44(a0),a1
		move.w	$10(a1),$10(a0)
		moveq	#$13,d1
		moveq	#$50,d2
		move.w	#$60,d3
		move.w	(sp)+,d4
		jsr	SolidObjectFull.w
		btst	#0,(V_int_run_count+3).w
		bne.w	locret_6FE20
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_7018C:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_70192:
		lea	word_703B4(pc),a1
		jsr	SetUp_ObjAttributes2.w
		move.l	#loc_701B4,(a0)
		move.l	#byte_70401,$30(a0)
		move.l	#loc_701EE,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_701B4:
		jsr	Refresh_ChildPosition.w
		jsr	Animate_RawGetFaster.w
		tst.w	d2
		beq.s	loc_701E8
		bmi.s	loc_701D6
		cmpi.b	#4,$2E(a0)
		bne.s	loc_701E8
		moveq	#$53,d0
		jsr	Play_Sound_2.w

loc_701D6:
		cmpi.b	#$20,$2F(a0)
		bne.s	loc_701E8
		movea.w	$46(a0),a1
		bset	#1,$38(a1)

loc_701E8:

		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------

loc_701EE:
		move.l	#loc_70220,(a0)
		move.b	#6,$22(a0)
		move.l	#byte_70406,$30(a0)

loc_70202:
		addi.w	#$3C,$14(a0)
		move.w	#$1F,$2E(a0)
		move.l	#loc_70262,$34(a0)
		moveq	#$54,d0
		jmp	Play_Sound_2.w
; ---------------------------------------------------------------------------

loc_70220:
		clr.b	$28(a0)
		cmpi.b	#8,$22(a0)
		bne.s	loc_70232
		move.b	#-$54,$28(a0)

loc_70232:
		lea	(Player_1).w,a2
		cmpi.b	#4,5(a2)
		beq.s	loc_7024A
		lea	(Player_2).w,a2
		cmpi.b	#4,5(a2)
		bne.s	loc_70250

loc_7024A:
		bset	#6,$2A(a0)

loc_70250:
		jsr	Animate_Raw.w
		jsr	Obj_Wait.w
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------

loc_70262:
		move.l	#loc_70294,$34(a0)
		move.w	#$1F,$2E(a0)
		jsr	Create_New_Sprite.w
		bne.s	loc_7027E
		move.l	#loc_8642E,(a1)

loc_7027E:
		lea	Child6_CreateBossExplosion.w,a2
		jsr	CreateChild1_Normal.w
		bne.s	locret_70292
		addi.w	#$60,$14(a1)

locret_70292:
		rts
; ---------------------------------------------------------------------------

loc_70294:
		move.l	#byte_70412,$30(a0)
		move.l	#loc_702C0,$34(a0)
		clr.b	$24(a0)
		clr.b	$23(a0)
		btst	#6,$2A(a0)
		bne.s	locret_702BE
		movea.w	$46(a0),a1
		bset	#6,$2A(a1)

locret_702BE:
		rts
; ---------------------------------------------------------------------------

loc_702C0:
		move.l	#Obj_Wait,(a0)
		move.w	#$1F,$2E(a0)
		move.l	#loc_702D6,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_702D6:
		movea.w	$46(a0),a1
		tst.b	$39(a1)
		bmi.s	loc_702E4
		clr.w	(ScrShake_Value).w

loc_702E4:
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------

loc_702EA:
		movea.w	$46(a0),a1
		moveq	#0,d0
		move.b	$2C(a0),d0
		cmpi.w	#4,d0
		bhs.s	loc_7030C
		moveq	#$44,d1
		tst.b	d0
		beq.s	loc_70302
		moveq	#$46,d1

loc_70302:
		move.w	a0,(a1,d1.w)
		bset	#1,4(a0)

loc_7030C:
		add.w	d0,d0
		lea	word_70320(pc,d0.w),a1
		move.w	(a1)+,d0
		add.w	d0,$10(a0)
		move.w	(a1)+,d0
		add.w	d0,$14(a0)
		rts
; ---------------------------------------------------------------------------
word_70320:	dc.w  $FF50,   $18
		dc.w	$B0,   $18
		dc.w  $FF50,   $A8
		dc.w	$B0,   $A8

; =============== S U B R O U T I N E =======================================


sub_70330:
		tst.b	$28(a0)
		bne.s	locret_70360
		tst.b	$20(a0)
		bne.s	loc_7034A
		move.b	#$20,$20(a0)
		moveq	#$6E,d0
		jsr	Play_Sound_2.w

loc_7034A:
		bsr.w	sub_70362
		subq.b	#1,$20(a0)
		bne.s	locret_70360
		move.b	$25(a0),$28(a0)
		move.b	#$7F,$29(a0)

locret_70360:

		rts
; End of function sub_70330


; =============== S U B R O U T I N E =======================================


sub_70362:
		moveq	#0,d0
		btst	#0,$20(a0)
		bne.s	loc_70376
		btst	#7,$2A(a0)
		bne.s	loc_70376
		addq.w	#6,d0

loc_70376:

		lea	word_70384(pc),a1
		lea	word_7038A(pc,d0.w),a2
		jmp	CopyWordData_3.w
; End of function sub_70362

; ---------------------------------------------------------------------------
word_70384:	dc.w  $FC38, $FC3A, $FC3C
word_7038A:	dc.w   $866,  $644,   $20
		dc.w   $EEE,  $EEE,  $EEE
ObjDat3_70396:	dc.l Map_FBZ2Subboss
		dc.w $A52E
		dc.w prio(5)
		dc.b $20
		dc.b $20
		dc.b 0
		dc.b $1C
word_703A2:	dc.w prio(1)
		dc.b 8
		dc.b 8
		dc.b 1
		dc.b 0
word_703A8:	dc.w prio(5)
		dc.b $C
		dc.b $14
		dc.b 2
		dc.b 0
word_703AE:	dc.w prio(1)
		dc.b 8
		dc.b $60
		dc.b 4
		dc.b 0
word_703B4:	dc.w $A52E
		dc.w prio(1)
		dc.b $18
		dc.b 4
		dc.b 5
		dc.b 0
ObjDat3_703BC:	dc.l Map_FBZRobotnikStand
		dc.w $8466
		dc.w prio(5)
		dc.b $20
		dc.b $20
		dc.b 0
		dc.b 0
ChildObjDat_703C8:dc.w 3
		dc.l loc_6FF5C
		dc.w 0
ChildObjDat_703D0:dc.w 1
		dc.l loc_6FFDC
		dc.w 0
		dc.l loc_7002A
		dc.w 0
ChildObjDat_703DE:dc.w 0
		dc.l Obj_8B
ChildObjDat_703E4:dc.w 1
		dc.l loc_70118
		dc.w 0
ChildObjDat_703EC:dc.w 0
		dc.l loc_70192
		dc.w 8
byte_703F4:	dc.b	0,   7
		dc.b	1, $17
		dc.b	0,   7
		dc.b	1,  $F
		dc.b	0, $3F
		dc.b	1,   7
		dc.b  $FC
byte_70401:	dc.b   $B, $40
		dc.b	5,  $A
		dc.b  $FC
byte_70406:	dc.b	0,   6
		dc.b	6,  $A
		dc.b	7,  $A
		dc.b  $F8,   8
		dc.b	0,   8
		dc.b   $A, $FC
byte_70412:	dc.b	0,   7
		dc.b	7,  $A
		dc.b	6,  $A
		dc.b  $F4
byte_70419:	dc.b	5,   0

		dc.b	1,   2
		dc.b	1, $FC
		dc.b	0
Pal_FBZ2Subboss:	binclude "Levels/FBZ/Palettes/FBZ2 Subboss.bin"
	even

Map_FBZ2Subboss:	include "Levels/FBZ/Misc Object Data/Map - Act 2 Subboss.asm"

PLC_705B6:	dc.w 3
		dc.l ArtNem_FBZ2Subboss
		dc.w $A5C0
		dc.l ArtNem_FBZRobtonikStand
		dc.w $8CC0
		dc.l ArtNem_FBZRobtonikRun
		dc.w $9520
		dc.l ArtNem_BossExplosion
		dc.w $A000
PLC_705D0:	dc.w 3
		dc.l ArtNem_FBZ2Subboss
		dc.w $A5C0
		dc.l ArtNem_EggRoboStand
		dc.w $8CC0
		dc.l ArtNem_EggRoboRun
		dc.w $9520
		dc.l ArtNem_BossExplosion
		dc.w $A000
; ---------------------------------------------------------------------------

Obj_FBZEndBoss:
		st	BossHitMode.w			; NAT: Enable hit mode
		clr.w	BossHitsP1.w			; clear hits count
		move.l	#Obj_Wait,(a0)
		st	Boss_flag.w
		move.w	#$77,$2E(a0)
		move.l	#loc_70632,$34(a0)
		moveq	#-$1F,d0
		jsr	Play_Sound.w
		jsr	Create_New_Sprite.w
		bne.s	loc_70620
		move.l	#Obj_Song_Fade_Transition,(a1)
		move.b	#Mus_Boss,$2C(a1)

loc_70620:
		moveq	#$6F,d0
		jsr	Load_PLC.w
		lea	Pal_FBZEndBoss(pc),a1
		jmp	PalLoad_Line1.w
; ---------------------------------------------------------------------------

loc_70632:
		move.l	#loc_7063A,(a0)

locret_70638:
		rts
; ---------------------------------------------------------------------------

loc_7063A:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_70652(pc,d0.w),d1
		jsr	off_70652(pc,d1.w)
		bsr.w	sub_70E10

		move.w	#$2E6C,PlayerSpawn.w		; NAT: Set left spawn
		cmp.w	#$2F0C,x_pos(a0)		; check if boss is beyond middle
		bhs.s	.gotit				; yes? branch
		move.w	#$2F84,PlayerSpawn.w		; set right spawn
.gotit		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------
off_70652:	dc.w loc_7065C-off_70652

		dc.w loc_706AC-off_70652
		dc.w loc_706E2-off_70652
		dc.w loc_7071A-off_70652
		dc.w loc_707BC-off_70652
; ---------------------------------------------------------------------------

loc_7065C:
		move.w	#$66C,PlayerSpawn+2.w		; NAT: Set respawn y-pos
		lea	ObjDat3_70E8C(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.b	#8,$29(a0)
		move.b	#-$80,$3C(a0)
		move.w	(Camera_X_pos_copy).w,d0
		addi.w	#$A0,d0
		move.w	d0,$10(a0)
		move.w	(Camera_Y_pos_copy).w,d0
		subi.w	#$60,d0
		move.w	d0,$14(a0)
		lea	(ChildObjDat_681AC).l,a2
		jsr	CreateChild1_Normal.w
		bne.s	loc_706A2
		move.b	#$B,$2C(a1)
		move.w	a1,$3E(a0)

loc_706A2:	st	(BG_Collision).w			; NAT: Enable again lol
		lea	ChildObjDat_70EE0(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_706AC:
		jsr	MoveSprite.w
		move.w	#$690,d0
		subi.w	#$48,d0
		cmp.w	$14(a0),d0
		bls.s	loc_706C2
		rts
; ---------------------------------------------------------------------------

loc_706C2:
		move.w	d0,$14(a0)
		move.b	#4,5(a0)
		bset	#7,$38(a0)
		move.w	#$5F,$2E(a0)
		move.l	#loc_70700,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_706E2:
		bsr.w	sub_70C72
		addq.b	#4,$3C(a0)
		lea	(byte_710C2).l,a2
		jsr	(MoveSprite_AngleYLookup).l
		bsr.w	sub_70DC8
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_70700:

		move.b	#6,5(a0)
		bset	#3,$38(a0)
		move.w	#$3F,$2E(a0)
		move.b	#9,$39(a0)
		rts
; ---------------------------------------------------------------------------

loc_7071A:
		bsr.w	sub_70DAC
		jsr	Find_SonicTails.w
		cmpi.b	#2,(Player_1+character_id).w
		bne.s	loc_70736
		bset	#1,$38(a0)
		bra.w	loc_7075A
; ---------------------------------------------------------------------------

loc_70736:
		btst	#1,$38(a0)
		bne.s	locret_70788
		btst	#0,$38(a0)
		bne.s	loc_7075A
		cmpi.w	#$18,d2
		bhs.s	loc_7075A
		btst	#1,$2A(a1)
		bne.s	loc_7075A
		ori.b	#3,$38(a0)

loc_7075A:

		subq.w	#1,$2E(a0)
		bpl.s	locret_70788
		move.w	#$1F,$2E(a0)
		bclr	#0,$38(a0)
		subq.b	#1,$39(a0)
		bmi.s	loc_7078A
		bset	#3,$38(a0)
		bclr	#0,4(a0)
		tst.w	d0
		bne.s	locret_70788
		bset	#0,4(a0)

locret_70788:

		rts
; ---------------------------------------------------------------------------

loc_7078A:
		move.b	#8,5(a0)
		bset	#2,$38(a0)
		move.l	#loc_707EC,$34(a0)
		moveq	#2,d0
		move.w	#$1FF,d1
		cmpi.b	#2,(Player_1+character_id).w
		bne.s	loc_707B2
		moveq	#2,d0
		move.w	#$FF,d1

loc_707B2:
		move.b	d0,$40(a0)
		move.w	d1,$2E(a0)
		rts
; ---------------------------------------------------------------------------

loc_707BC:
		cmpi.b	#2,(Player_1+character_id).w
		bne.s	loc_707CA
		bset	#1,$38(a0)

loc_707CA:
		bsr.w	sub_70C72
		move.b	$40(a0),d0
		add.b	d0,$3C(a0)
		lea	(byte_710C2).l,a2
		jsr	(MoveSprite_AngleYLookup).l
		bsr.w	sub_70DC8
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_707EC:
		bclr	#2,$38(a0)
		bra.w	loc_70700
; ---------------------------------------------------------------------------

loc_707F6:
		tst.b	$3C(a0)
		beq.s	loc_7081A
		move.b	$40(a0),d0
		add.b	d0,$3C(a0)
		lea	(byte_710C2).l,a2
		jsr	(MoveSprite_AngleYLookup).l
		bsr.w	sub_70DC8
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_7081A:
		move.l	#Wait_FadeToLevelMusic,(a0)
		move.w	#prio(4),8(a0)
		move.w	#$3F,$2E(a0)
		move.l	#loc_70836,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_70836:
		move.l	#Obj_Wait,(a0)
		bset	#4,$38(a0)
		move.l	#loc_70854,$34(a0)
		lea	ChildObjDat_70F0A(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_70854:
		move.l	#Obj_Wait,(a0)
		bclr	#7,4(a0)
		move.w	#$7F,$2E(a0)
		move.l	#loc_70870,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_70870:
		move.w	#$2F00,$10(a0)			; NAT: Create sign instead
		jmp	Obj_EndSignControl_HitHUD	;

;		move.l	#loc_708AA,(a0)
;		st	(End_Of_Level_Flag).w
;		clr.b	(Boss_flag).w
;		jsr	Create_New_Sprite.w
;		bne.s	loc_70898
;		move.l	#Obj_81,(a1)
;		move.w	#$307C,$10(a1)
;		move.w	#$660,$14(a1)

loc_70898:
;M		move.w	#$2FDC,(__u_FA92).w
;		lea	Child6_IncLevX.w,a2
;		jmp	CreateChild6_Simple.w
; ---------------------------------------------------------------------------

loc_708AA:
;		move.w	(Camera_X_pos).w,(Camera_min_X_pos).w
;		tst.b	(End_Of_Level_Flag).w
;		bne.w	locret_70638
;		move.l	#loc_7092A,(a0)
;		jsr	Restore_PlayerControl.w
;		clr.w	(Ctrl_1_logical).w
;		st	(Ctrl_1_locked).w
;		clr.w	$2E(a0)
;		lea	(Player_2).w,a1
;		jsr	Restore_PlayerControl2.w
;		jsr	Obj_PlayLevelMusic.w
;		jsr	Create_New_Sprite.w
;		bne.s	loc_708EE
;		move.l	#loc_863C0,(a1)

loc_708EE:
;		move.w	#$1000,(Camera_target_max_Y_pos).w
;		move.w	#$3738,(__u_FA92).w
;		lea	Child6_IncLevX.w,a2
;		jsr	CreateChild6_Simple.w

loc_70906:
;		lea	word_7091C(pc),a6
;		move.w	(a6)+,d6

loc_7090C:
;		movea.l	(a6)+,a1
;		move.w	(a6)+,d2
;		jsr	Queue_Kos_Module.w
;		dbf	d6,loc_7090C
;		rts
; ---------------------------------------------------------------------------
;word_7091C:	dc.w 1
;		dc.l ArtKosM_FBZExitDoor
;		dc.w $7CA0
;		dc.l ArtKosM_FBZExitHall
;		dc.w $7E80
; ---------------------------------------------------------------------------

loc_7092A:
;		cmpi.w	#$720,(Camera_Y_pos).w
;		bhs.s	loc_70938
;		jmp	(loc_86334).l
; ---------------------------------------------------------------------------

loc_70938:
;		move.w	#$800,d0
;		jsr	StartNewLevel.w
;		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_70948:

		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_7095C(pc,d0.w),d1
		jsr	off_7095C(pc,d1.w)
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------
off_7095C:	dc.w loc_70966-off_7095C

		dc.w loc_70990-off_7095C
		dc.w loc_709A8-off_7095C
		dc.w loc_70A0C-off_7095C
		dc.w loc_70A28-off_7095C
; ---------------------------------------------------------------------------

loc_70966:
		lea	word_70E98(pc),a1
		jsr	SetUp_ObjAttributes3.w
		lea	ChildObjDat_70EF4(pc),a2
		jsr	CreateChild1_Normal.w
		movea.w	$46(a0),a1
		tst.b	$2C(a0)
		bne.s	loc_7098A
		move.w	a0,$44(a1)
		rts
; ---------------------------------------------------------------------------

loc_7098A:
		move.w	a0,$46(a1)
		rts
; ---------------------------------------------------------------------------

loc_70990:
		movea.w	$46(a0),a1
		btst	#7,$38(a1)
		bne.s	loc_709A2
		jmp	Refresh_ChildPosition.w
; ---------------------------------------------------------------------------

loc_709A2:
		move.b	#4,5(a0)

loc_709A8:
		movea.w	$46(a0),a1
		btst	#4,$38(a1)
		bne.s	loc_709EC
		btst	#3,$38(a1)
		bne.s	loc_709BE
		rts
; ---------------------------------------------------------------------------

loc_709BE:
		move.b	#6,5(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		add.w	d0,d0
		btst	#0,4(a1)
		beq.s	loc_709D6
		addq.w	#8,d0

loc_709D6:
		lea	word_709FC(pc,d0.w),a1
		move.w	(a1)+,$18(a0)
		move.w	(a1)+,$2E(a0)
		move.l	#loc_70A12,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_709EC:
		lea	ChildObjDat_70F24(pc),a2
		jsr	CreateChild1_Normal.w
		jmp	Go_Delete_Sprite_2.w
; ---------------------------------------------------------------------------
word_709FC:	dc.w   $100,	 7
		dc.w   $100,	 0
		dc.w  $FF00,	 0
		dc.w  $FF00,	 7
; ---------------------------------------------------------------------------

loc_70A0C:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_70A12:
		move.b	#8,5(a0)
		move.w	#7,$2E(a0)
		move.l	#loc_70A34,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_70A28:
		jsr	MoveSprite2.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_70A34:
		move.b	#4,5(a0)
		movea.w	$46(a0),a1
		bclr	#3,$38(a1)
		rts
; ---------------------------------------------------------------------------

loc_70A46:
		lea	word_70E9E(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_70A76,(a0)
		movea.w	$46(a0),a1
		tst.b	$2C(a1)
		beq.s	loc_70A66
		bset	#0,4(a0)

loc_70A66:
		move.w	$46(a1),$44(a0)

		lea	ChildObjDat_70EFC(pc),a2
		jsr	CreateChild3_NormalRepeated.w

loc_70A76:
		movea.w	$44(a0),a1
		move.b	$3C(a1),$3C(a0)
		movea.w	$46(a0),a1
		move.w	$10(a1),$10(a0)
		lea	(byte_71102).l,a2
		jsr	(MoveSprite_AngleYLookup).l
		bsr.w	sub_70DFA
		moveq	#0,d0
		jmp	Child_Draw_Sprite2_FlickerMove.w
; ---------------------------------------------------------------------------

loc_70AA2:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_70AB8(pc,d0.w),d1
		jsr	off_70AB8(pc,d1.w)
		moveq	#8,d0
		jmp	Child_Draw_Sprite_FlickerMove.w
; ---------------------------------------------------------------------------
off_70AB8:	dc.w loc_70ABC-off_70AB8

		dc.w loc_70AF2-off_70AB8
; ---------------------------------------------------------------------------

loc_70ABC:
		lea	word_70E9E(pc),a1
		jsr	SetUp_ObjAttributes3.w
		movea.w	$46(a0),a1
		moveq	#-$1C,d0
		btst	#0,4(a1)
		beq.s	loc_70ADC
		bset	#0,4(a0)
		neg.w	d0

loc_70ADC:
		movea.w	$46(a1),a1
		move.w	$46(a1),$44(a0)
		move.b	d0,$42(a0)
		move.b	#2,$43(a0)
		rts
; ---------------------------------------------------------------------------

loc_70AF2:
		jsr	(Child_GetPriority).l
		bra.w	loc_70C8E
; ---------------------------------------------------------------------------

loc_70AFC:
		lea	word_70EA4(pc),a1
		jsr	SetUp_ObjAttributes3.w

loc_70B06:
		move.l	#loc_70B18,(a0)
		movea.w	$46(a0),a1
		bclr	#1,$38(a1)
		rts
; ---------------------------------------------------------------------------

loc_70B18:
		jsr	(Child_GetPriority).l
		btst	#7,$2A(a1)
		bne.s	loc_70B58
		btst	#1,$38(a1)
		beq.s	loc_70B4C
		move.l	#loc_70B74,(a0)
		move.w	#$5F,$2E(a0)
		move.l	#loc_70B06,$34(a0)
		lea	ChildObjDat_70F04(pc),a2
		jsr	CreateChild6_Simple.w

loc_70B4C:
		jsr	Refresh_ChildPosition.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_70B58:
		move.l	#loc_70B80,(a0)
		move.w	$3E(a1),$46(a0)
		subq.b	#4,$43(a0)
		jsr	Refresh_ChildPosition.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_70B74:
		jsr	(Child_GetPriority).l
		jmp	Refresh_ChildPosWait.w
; ---------------------------------------------------------------------------

loc_70B80:
		jsr	Refresh_ChildPosition.w
		jmp	Child_Draw_Sprite2.w
; ---------------------------------------------------------------------------

loc_70B8C:
		bsr.w	sub_70D10
		move.l	#Obj_Wait,(a0)
		move.l	#loc_70BA0,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_70BA0:
		move.l	#loc_70BB0,(a0)
		move.l	#Go_Delete_Sprite,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_70BB0:
		moveq	#$4F,d0
		jsr	sub_85E52.w
		jsr	(Child_GetPriority).l
		jsr	Refresh_ChildPosition.w
		jsr	Animate_RawMultiDelay.w
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------

loc_70BD0:

		lea	word_70EAA(pc),a1
		jsr	SetUp_ObjAttributes3.w
		jsr	Refresh_ChildPositionAdjusted.w
		move.l	#Obj_FlickerMove,(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		lsr.w	#1,d0
		addi.b	#8,d0
		move.b	d0,$22(a0)
		moveq	#$34,d0
		jmp	Set_IndexedVelocity.w
; ---------------------------------------------------------------------------

loc_70BFE:

		lea	word_70EAA(pc),a1
		jsr	SetUp_ObjAttributes3.w
		jsr	Refresh_ChildPositionAdjusted.w
		move.l	#Obj_FlickerMove,(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		lsr.w	#1,d0
		addi.b	#$C,d0
		move.b	d0,$22(a0)
		moveq	#8,d0
		jmp	Set_IndexedVelocity.w
; ---------------------------------------------------------------------------

Obj_FBZExitDoor:
		lea	ObjDat_FBZExitDoor(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_70C3C,(a0)

loc_70C3C:
		jsr	Check_PlayerCollision.w
		bne.s	loc_70C4A
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------

loc_70C4A:
		move.l	#loc_70C66,(a0)
		move.w	#$800,$18(a0)
		lea	(Player_1).w,a1
		subq.w	#8,$10(a1)
		moveq	#$5D,d0
		jsr	Play_Sound_2.w

loc_70C66:
		jsr	MoveSprite_LightGravity.w
		jmp	Draw_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_70C72:

		cmpi.w	#4,$2E(a0)
		blo.s	locret_70C8C
		move.b	$3C(a0),d0
		andi.b	#$7F,d0
		bne.s	locret_70C8C
		moveq	#-$37,d0
		jmp	Play_Sound_2.w

; ---------------------------------------------------------------------------

loc_70C8E:
		movea.w	$44(a0),a1
		movea.w	$46(a0),a2
		move.w	$10(a1),d0
		move.b	$42(a0),d1
		ext.w	d1
		add.w	d0,d1
		move.w	$10(a2),d2
		sub.w	d2,d1
		moveq	#$10,d3
		moveq	#0,d4
		move.b	$2C(a0),d4
		bsr.w	sub_70CE4
		move.w	$14(a1),d0
		move.b	$43(a0),d1
		ext.w	d1
		add.w	d0,d1
		move.w	$14(a2),d2
		sub.w	d2,d1
		moveq	#$14,d3
		bsr.w	sub_70CE4
		tst.b	$3C(a2)
		beq.s	locret_70CDA
		bmi.s	locret_70CDA
		move.w	word_70CDC(pc,d4.w),8(a0)

locret_70CDA:
locret_70C8C:
		rts
; ---------------------------------------------------------------------------
word_70CDC:	dc.w prio(3), prio(2), prio(1), prio(0)

; =============== S U B R O U T I N E =======================================


sub_70CE4:

		move.w	off_70CEC(pc,d4.w),d5
		jmp	off_70CEC(pc,d5.w)
; End of function sub_70CE4

; ---------------------------------------------------------------------------
off_70CEC:	dc.w loc_70CF4-off_70CEC

		dc.w loc_70CFA-off_70CEC
		dc.w loc_70D00-off_70CEC
		dc.w loc_70D08-off_70CEC
; ---------------------------------------------------------------------------

loc_70CF4:
		asr.w	#2,d1
		bra.w	loc_70D08
; ---------------------------------------------------------------------------

loc_70CFA:
		asr.w	#1,d1
		bra.w	loc_70D08
; ---------------------------------------------------------------------------

loc_70D00:
		asr.w	#1,d1
		move.w	d1,d0
		asr.w	#1,d1
		add.w	d0,d1

loc_70D08:


		add.w	d1,d2
		move.w	d2,(a0,d3.w)
		rts

; =============== S U B R O U T I N E =======================================


sub_70D10:
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	word_70D40(pc,d0.w),$2E(a0)
		move.w	word_70D52(pc,d0.w),$42(a0)
		add.w	d0,d0
		move.l	off_70D64(pc,d0.w),$30(a0)
		movea.l	off_70D88(pc,d0.w),a1
		jsr	SetUp_ObjAttributes.w
		bset	#4,$2B(a0)
		jmp	Refresh_ChildPosition.w
; End of function sub_70D10

; ---------------------------------------------------------------------------
word_70D40:	dc.w $50
		dc.w $4D
		dc.w $4A
		dc.w $47
		dc.w $44
		dc.w $41
		dc.w $3E
		dc.w $3B
		dc.w 0
word_70D52:	dc.w $98
		dc.w $8A4
		dc.w $F8A4
		dc.w $B4
		dc.w $C4
		dc.w $D4
		dc.w $E4
		dc.w $F4
		dc.w $F0
off_70D64:	dc.l byte_70F70
		dc.l byte_70F70
		dc.l byte_70F70
		dc.l byte_70F61
		dc.l byte_70F61
		dc.l byte_70F61
		dc.l byte_70F61
		dc.l byte_70F61
		dc.l byte_70F3E
off_70D88:	dc.l ObjDat3_70EC8
		dc.l ObjDat3_70EC8
		dc.l ObjDat3_70EC8
		dc.l ObjDat3_70EBC
		dc.l ObjDat3_70EBC
		dc.l ObjDat3_70EBC
		dc.l ObjDat3_70EBC
		dc.l ObjDat3_70EBC
		dc.l ObjDat3_70EB0

; =============== S U B R O U T I N E =======================================


sub_70DAC:
		movea.w	$44(a0),a1
		movea.w	$46(a0),a2
		move.w	$10(a1),d0
		move.w	$10(a2),d1
		sub.w	d0,d1
		asr.w	#1,d1
		add.w	d1,d0
		move.w	d0,$10(a0)
		rts
; End of function sub_70DAC


; =============== S U B R O U T I N E =======================================


sub_70DC8:

		tst.b	$3C(a0)
		beq.s	loc_70DEC
		bmi.s	loc_70DDE
		bset	#7,$A(a0)
		move.w	#prio(0),8(a0)
		rts
; ---------------------------------------------------------------------------

loc_70DDE:
		bclr	#7,$A(a0)
		move.w	#prio(6),8(a0)
		rts
; ---------------------------------------------------------------------------

loc_70DEC:
		bset	#7,$A(a0)
		move.w	#prio(6),8(a0)
		rts
; End of function sub_70DC8


; =============== S U B R O U T I N E =======================================


sub_70DFA:
		tst.b	$3C(a0)
		beq.s	loc_70DEC
		bmi.s	loc_70DDE
		bset	#7,$A(a0)
		move.w	#prio(4),8(a0)
		rts
; End of function sub_70DFA


; =============== S U B R O U T I N E =======================================


sub_70E10:
		tst.l	(a0)
		beq.s	locret_70E66
		tst.b	$28(a0)
		bne.s	locret_70E66
		tst.b	$29(a0)
		beq.s	loc_70E68
		tst.b	$20(a0)
		bne.s	loc_70E34
		move.b	#$20,$20(a0)
		moveq	#$6E,d0
		jsr	Play_Sound_2.w

loc_70E34:
		bset	#6,$2A(a0)
		moveq	#0,d0
		btst	#0,$20(a0)
		bne.s	loc_70E46
		addq.w	#8,d0

loc_70E46:
		lea	word_70E74(pc),a1
		lea	word_70E7C(pc,d0.w),a2
		jsr	CopyWordData_4.w
		subq.b	#1,$20(a0)
		bne.s	locret_70E66
		bclr	#6,$2A(a0)
		move.b	$25(a0),$28(a0)

locret_70E66:
		rts
; ---------------------------------------------------------------------------

loc_70E68:
		move.l	#loc_707F6,(a0)
		jmp	BossDefeated_StopTimer.w
; End of function sub_70E10

; ---------------------------------------------------------------------------
word_70E74:	dc.w $FC26
		dc.w $FC28
		dc.w $FC32
		dc.w $FC3C
word_70E7C:	dc.w	$2A,   $26,   $20,  $644
		dc.w   $888,  $AAA,  $EEE,  $AAA
ObjDat3_70E8C:	dc.l Map_FBZEndBoss
		dc.w $A400
		dc.w prio(4)
		dc.b $28
		dc.b $18
		dc.b 0
		dc.b $16
word_70E98:	dc.w prio(5)
		dc.b $10
		dc.b $20
		dc.b 1
		dc.b $A3
word_70E9E:	dc.w prio(4)

		dc.b 8
		dc.b 8
		dc.b 2
		dc.b 0
word_70EA4:	dc.w prio(3)
		dc.b $C
		dc.b 8
		dc.b 3
		dc.b 0
word_70EAA:	dc.w prio(1)

		dc.b $14
		dc.b $10
		dc.b 8
		dc.b 0
ObjDat3_70EB0:	dc.l Map_FBZEndBoss
		dc.w $8400
		dc.w prio(0)
		dc.b 4
		dc.b 8
		dc.b 4
		dc.b $8B
ObjDat3_70EBC:	dc.l Map_BossExplosion
		dc.w $8500
		dc.w prio(0)
		dc.b $10
		dc.b $10
		dc.b 0
		dc.b $8B
ObjDat3_70EC8:	dc.l Map_FBZEndBossFlame
		dc.w $8450
		dc.w prio(0)
		dc.b $10
		dc.b $10
		dc.b 0
		dc.b $8B
ObjDat_FBZExitDoor:	dc.l Map_FBZExitDoor
		dc.w $43E5
		dc.w prio(1)
		dc.b 8
		dc.b $20
		dc.b 0
		dc.b $D7
ChildObjDat_70EE0:dc.w 2
		dc.l loc_70948
		dc.w $D048
		dc.l loc_70948
		dc.w $3048
		dc.l loc_70AFC
		dc.w $D8
ChildObjDat_70EF4:dc.w 0
		dc.l loc_70A46
		dc.w $E0
ChildObjDat_70EFC:dc.w 3
		dc.l loc_70AA2
		dc.w 0
ChildObjDat_70F04:dc.w 8
		dc.l loc_70B8C
ChildObjDat_70F0A:dc.w 3
		dc.l loc_70BD0
		dc.w $EC08
		dc.l loc_70BD0
		dc.w $1408
		dc.l loc_70BD0
		dc.w $F020
		dc.l loc_70BD0
		dc.w $1020
ChildObjDat_70F24:dc.w 3
		dc.l loc_70BFE
		dc.w $F8F0
		dc.l loc_70BFE
		dc.w $8F0
		dc.l loc_70BFE
		dc.w $F810
		dc.l loc_70BFE
		dc.w $810
byte_70F3E:	dc.b	4,   3
		dc.b	4,   3
		dc.b	5,   3
		dc.b	6,   3
		dc.b	7,   3
		dc.b	4,   3
		dc.b	5,   3
		dc.b	6,   3
		dc.b	7,   3
		dc.b	4,   3
		dc.b	5,   3
		dc.b	6,   3
		dc.b	7,   3
		dc.b	4,   3
		dc.b	5,   3
		dc.b	6,   3
		dc.b	7,   3
		dc.b  $F4
byte_70F61:	dc.b	0,   2
		dc.b	0,   2
		dc.b	1,   2
		dc.b	2,   3
		dc.b	3,   4
		dc.b	4,   5
		dc.b	5,   6
		dc.b  $F4
byte_70F70:	dc.b	0,   2
		dc.b	0,   2
		dc.b	1,   3
		dc.b	2,   4
		dc.b	3,   5
		dc.b	4,   6
		dc.b  $F4,   0
Map_FBZExitDoor:	include "Levels/FBZ/Misc Object Data/Map - Exit Door.asm"

Pal_FBZEndBoss:	binclude "Levels/FBZ/Palettes/FBZ End Boss.bin"
	even

Map_FBZEndBoss:	include "Levels/FBZ/Misc Object Data/Map - End Boss.asm"

Map_FBZEndBossFlame:	include "Levels/FBZ/Misc Object Data/Map - End Boss Flame.asm"

byte_710C2:	dc.b    0,   2,   4,   5,   7,   9,  $B,  $C,  $E, $10, $11, $13, $15, $17, $18, $1A, $1C, $1D, $1F, $20
		dc.b  $22, $23, $25, $27, $28, $29, $2B, $2C, $2E, $2F, $30, $32, $33, $34, $35, $37, $38, $39, $3A, $3B
		dc.b  $3C, $3D, $3E, $3F, $3F, $40, $41, $42, $43, $43, $44, $44, $45, $45, $46, $46, $47, $47, $47, $47
		dc.b  $48, $48, $48, $48
byte_71102:	dc.b    0,   1,   2,   2,   3,   4,   5,   5,   6,   7,   8,   9,   9,  $A,  $B,  $C,  $C,  $D,  $E,  $E
		dc.b   $F, $10, $10, $11, $12, $12, $13, $14, $14, $15, $15, $16, $17, $17, $18, $18, $19, $19, $1A, $1A
		dc.b  $1B, $1B, $1B, $1C, $1C, $1D, $1D, $1D, $1E, $1E, $1E, $1E, $1F, $1F, $1F, $1F, $1F, $20, $20, $20
		dc.b  $20, $20, $20, $20
word_71142:	dc.w 0
		dc.w $378
		dc.w $5F0
		dc.w $7F0
		dc.w $2B8
		dc.w $2B8
		dc.w $6F0
		dc.w $6F0
word_71152:	dc.w $7C8
		dc.w $9C8
		dc.w $5F0
		dc.w $7F0
		dc.w $8C8
		dc.w $8C8
		dc.w $6F0
		dc.w $6F0
; ---------------------------------------------------------------------------

Obj_ICZMiniboss:
		cmpi.w	#$501,(Apparent_zone_and_act).w
		beq.s	loc_711AA
		btst	#5,OptionsBits.w		; NAT: Check if bosses are on
		beq.s	.nohide				; if not, branch
		st	MonContPos.w			; hide HUD now

.nohide		lea	word_71142(pc),a1
		tst.b	$2C(a0)
		beq.s	loc_71178
		lea	word_71152(pc),a1

loc_71178:
		jsr	(Check_CameraInRange).l
		btst	#5,OptionsBits.w		; NAT: Check if bosses are on
		bne.s	.enabled			; if are, branch

		lea	.screen(pc),a1			; else, lock screen
		jmp	Boss_Force_End_2		;

.screen		dc.w $6F0, $6F0, $2B8, $2B8

.enabled	move.b	#Mus_Minib_S3,$26(a0)		; NAT: Use Sonic 3 music
		st	BossHitMode.w			; NAT: Enable hit mode
		clr.w	BossHitsP1.w			; clear hits count

		jsr	sub_85D6A.w
		move.l	#loc_711B0,(a0)
		move.l	#loc_711B6,$34(a0)
		moveq	#$5F,d0
		jsr	Load_PLC.w
		lea	Pal_ICZMiniboss(pc),a1
		jmp	PalLoad_Line1.w
; ---------------------------------------------------------------------------

loc_711AA:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_711B0:
		jmp	loc_85CA4.w
; ---------------------------------------------------------------------------

loc_711B6:
		move.l	#loc_711BE,(a0)

locret_711BC:

		rts
; ---------------------------------------------------------------------------

loc_711BE:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_711D6(pc,d0.w),d1
		jsr	off_711D6(pc,d1.w)
		bsr.w	sub_718DA
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------
off_711D6:	dc.w loc_711EC-off_711D6

		dc.w loc_7122A-off_711D6
		dc.w loc_71252-off_711D6
		dc.w loc_7127E-off_711D6
		dc.w loc_712C4-off_711D6
		dc.w loc_71300-off_711D6
		dc.w loc_7127E-off_711D6
		dc.w loc_7135E-off_711D6
		dc.w loc_7138A-off_711D6
		dc.w loc_713AC-off_711D6
		dc.w loc_7122A-off_711D6
; ---------------------------------------------------------------------------

loc_711EC:
		lea	ObjDat3_71960(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.b	#6,$29(a0)
		move.w	#$200,$3E(a0)
		move.w	#$80,$1A(a0)
		move.w	#$BF,$2E(a0)
		move.l	#loc_71236,$34(a0)
		lea	ChildObjDat_719AA(pc),a2
		jsr	CreateChild6_Simple.w
		lea	ChildObjDat_71984(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_7122A:
		jsr	MoveSprite2.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_71236:
		move.b	#4,5(a0)
		bset	#3,$38(a0)
		move.w	#$1F,$2E(a0)
		move.l	#loc_71258,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_71252:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_71258:

		move.b	#6,5(a0)
		move.w	#$3F,$2E(a0)
		move.l	#loc_7128A,$34(a0)
		lea	(word_71AE6).l,a1

loc_71272:
		lea	(PalRotation_Data).w,a2
		move.l	(a1)+,(a2)+
		move.l	(a1)+,(a2)+
		clr.w	(a2)
		rts
; ---------------------------------------------------------------------------

loc_7127E:
		jsr	Run_PalRotationScript.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_7128A:
		bset	#2,$38(a0)
		move.w	#$7F,$2E(a0)
		move.l	#loc_712A8,$34(a0)
		moveq	#$74,d0
		jmp	Play_Sound_2.w
; ---------------------------------------------------------------------------

loc_712A8:
		move.b	#8,5(a0)
		move.w	#$300,$1A(a0)
		move.w	#7,$2E(a0)
		move.l	#loc_712D6,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_712C4:
		jsr	MoveSprite2.w
		jsr	Run_PalRotationScript.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_712D6:
		bsr.w	sub_7184E

loc_712DA:
		move.b	#$A,5(a0)
		move.w	#$300,$1A(a0)
		neg.w	$3E(a0)
		move.w	$3E(a0),$18(a0)
		move.w	#$5F,$2E(a0)
		moveq	#-$41,d0
		jmp	Play_Sound_2.w
; ---------------------------------------------------------------------------

loc_71300:
		jsr	Run_PalRotationScript.w
		subq.w	#1,$2E(a0)
		bmi.s	loc_71318
		addi.w	#-$10,$1A(a0)
		jmp	MoveSprite2.w
; ---------------------------------------------------------------------------

loc_71318:
		move.b	#$C,5(a0)
		move.w	#$3F,$2E(a0)
		move.l	#loc_7133A,$34(a0)
		rts
; ---------------------------------------------------------------------------
		jsr	Run_PalRotationScript.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_7133A:
		subq.b	#1,$39(a0)
		bpl.s	loc_712DA
		move.b	#$E,5(a0)
		bset	#1,$38(a0)
		move.w	(__u_FAB4).w,d0
		addi.w	#$A0,d0
		cmp.w	$10(a0),d0
		scc	$43(a0)
		rts
; ---------------------------------------------------------------------------

loc_7135E:
		btst	#1,$38(a0)
		beq.s	loc_7136C
		jmp	Run_PalRotationScript.w
; ---------------------------------------------------------------------------

loc_7136C:
		move.b	#$10,5(a0)
		bclr	#2,$38(a0)
		move.l	#loc_71390,(__u_FADA).w
		lea	(word_71B52).l,a1
		bra.w	loc_71272
; ---------------------------------------------------------------------------

loc_7138A:
		jmp	Run_PalRotationScript.w
; ---------------------------------------------------------------------------

loc_71390:
		move.b	#$12,5(a0)
		move.w	#$222,(Normal_palette_line_2+$14).w
		move.w	#$3F,$2E(a0)
		move.l	#loc_713B2,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_713AC:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_713B2:
		move.b	#$14,5(a0)
		move.w	#-$100,$1A(a0)
		clr.w	$18(a0)
		move.w	#$17,$2E(a0)
		move.l	#loc_713D2,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_713D2:
		move.b	#4,5(a0)
		move.w	#$FF,$2E(a0)
		move.l	#loc_71258,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_713E8:
		jsr	Obj_EndSignControl_HitHUD	; NAT: do extra stuff here
		movea.w	(__u_FAAE).w,a1
		cmpi.l	#loc_8B660,(a1)
		bne.s	loc_71400
		bset	#5,$38(a1)

loc_71400:
		cmpi.b	#2,(Player_1+character_id).w
		beq.s	loc_71416
		jsr	Create_New_Sprite.w
		bne.s	loc_71416
		move.l	#loc_71420,(a1)

loc_71416:

		lea	ChildObjDat_719B0(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_71420:
		move.l	#loc_71440,(a0)
		lea	(word_719FA).l,a1
		lea	(PalRotation_Data).w,a2
		move.l	(a1)+,(a2)+
		move.l	(a1)+,(a2)+
		clr.w	(a2)
		move.l	#Go_Delete_Sprite,(__u_FADA).w
		rts
; ---------------------------------------------------------------------------

loc_71440:
		jmp	Run_PalRotationScript.w
; ---------------------------------------------------------------------------

loc_71446:

		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_71462(pc,d0.w),d1
		jsr	off_71462(pc,d1.w)
		jsr	Refresh_ChildPosition.w
		moveq	#0,d0
		jmp	Child_Draw_Sprite2_FlickerMove.w
; ---------------------------------------------------------------------------
off_71462:	dc.w loc_7146A-off_71462

		dc.w loc_71478-off_71462
		dc.w loc_71498-off_71462
		dc.w locret_714B6-off_71462
; ---------------------------------------------------------------------------

loc_7146A:
		lea	word_7196C(pc),a1
		jsr	SetUp_ObjAttributes3.w
		bra.w	loc_716B2
; ---------------------------------------------------------------------------

loc_71478:
		movea.w	$46(a0),a1
		btst	#3,$38(a1)
		bne.s	loc_71486
		rts
; ---------------------------------------------------------------------------

loc_71486:
		move.b	#4,5(a0)
		move.l	#loc_714AE,$34(a0)
		bra.w	loc_716C8
; ---------------------------------------------------------------------------

loc_71498:
		move.b	$18(a0),d0
		add.b	d0,$42(a0)
		move.b	$19(a0),d0
		add.b	d0,$43(a0)
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_714AE:
		move.b	#6,5(a0)
		rts
; ---------------------------------------------------------------------------

locret_714B6:
		rts
; ---------------------------------------------------------------------------

loc_714B8:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_714CE(pc,d0.w),d1
		jsr	off_714CE(pc,d1.w)
		moveq	#0,d0
		jmp	Child_DrawTouch_Sprite2_FlickerMove.w
; ---------------------------------------------------------------------------
off_714CE:	dc.w loc_714E6-off_714CE

		dc.w loc_714F4-off_714CE
		dc.w loc_7151E-off_714CE
		dc.w loc_7155A-off_714CE
		dc.w loc_7157C-off_714CE
		dc.w loc_71594-off_714CE
		dc.w loc_715B4-off_714CE
		dc.w loc_71600-off_714CE
		dc.w loc_7155A-off_714CE
		dc.w loc_7164E-off_714CE
		dc.w loc_7155A-off_714CE
		dc.w locret_71688-off_714CE
; ---------------------------------------------------------------------------

loc_714E6:
		lea	ObjDat3_71972(pc),a1
		jsr	SetUp_ObjAttributes.w
		bra.w	loc_716F4
; ---------------------------------------------------------------------------

loc_714F4:
		movea.w	$46(a0),a1
		btst	#2,$38(a1)
		bne.s	loc_71502
		rts
; ---------------------------------------------------------------------------

loc_71502:
		move.b	#4,5(a0)
		move.w	#-$40,$1A(a0)
		move.w	#$3F,$2E(a0)
		move.l	#loc_7153A,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_7151E:
		moveq	#1,d0
		btst	#0,(V_int_run_count+3).w
		beq.s	loc_7152A
		neg.w	d0

loc_7152A:
		add.w	d0,$10(a0)
		jsr	MoveSprite2.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_7153A:
		move.b	#6,5(a0)
		move.w	#prio(3),8(a0)
		bsr.w	sub_71740
		move.w	#$1F,$2E(a0)
		move.l	#loc_71566,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_7155A:
		jsr	MoveSprite2.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_71566:
		move.b	#8,5(a0)
		move.b	#-$75,$28(a0)
		moveq	#-$41,d0
		jmp	Play_Sound_2.w
; ---------------------------------------------------------------------------

loc_7157C:
		movea.w	$46(a0),a1
		btst	#1,$38(a1)
		bne.s	loc_7158C
		bra.w	loc_7179E
; ---------------------------------------------------------------------------

loc_7158C:
		move.b	#$A,5(a0)
		rts
; ---------------------------------------------------------------------------

loc_71594:
		movea.w	$46(a0),a1
		moveq	#0,d0
		tst.b	$43(a1)
		bne.s	loc_715A2
		moveq	#-$80,d0

loc_715A2:
		cmp.b	$3D(a0),d0
		beq.s	loc_715AC
		bra.w	loc_7179E
; ---------------------------------------------------------------------------

loc_715AC:
		move.b	#$C,5(a0)
		rts
; ---------------------------------------------------------------------------

loc_715B4:
		addq.b	#4,$3C(a0)
		lea	(ICZMiniboss_OrbAngleLookup).l,a2
		jsr	MoveSprite_AtAngleLookup.w
		moveq	#0,d0
		bsr.w	sub_717B8
		movea.w	$46(a0),a1
		btst	#1,$38(a1)
		beq.s	loc_715F0
		tst.b	$2C(a0)
		bne.w	locret_711BC
		moveq	#0,d0
		tst.b	$43(a1)
		bne.s	loc_715E8
		moveq	#-$80,d0

loc_715E8:
		cmp.b	$3C(a0),d0
		bne.w	locret_711BC

loc_715F0:
		move.b	#$E,5(a0)
		bclr	#1,$38(a1)
		bra.w	loc_7186A
; ---------------------------------------------------------------------------

loc_71600:
		move.b	$3C(a0),d0
		cmp.b	$42(a0),d0
		beq.s	loc_71620
		addq.b	#4,$3C(a0)
		lea	(ICZMiniboss_OrbAngleLookup).l,a2
		jsr	MoveSprite_AtAngleLookup.w
		moveq	#0,d0
		bra.w	sub_717B8
; ---------------------------------------------------------------------------

loc_71620:
		move.b	#$10,5(a0)
		move.w	#$3F,$2E(a0)
		move.l	#loc_71636,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_71636:
		move.b	#$12,5(a0)
		move.w	#$7F,$2E(a0)
		move.l	#loc_71654,$34(a0)
		bra.w	loc_718CA
; ---------------------------------------------------------------------------

loc_7164E:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_71654:
		move.b	#$14,5(a0)
		moveq	#$67,d0
		jsr	Play_Sound_2.w
		move.w	#$400,$1A(a0)
		clr.w	$18(a0)
		move.w	#$45,$2E(a0)
		move.l	#loc_7167C,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_7167C:
		move.b	#2,5(a0)
		clr.b	$28(a0)
		rts
; ---------------------------------------------------------------------------

locret_71688:
		rts
; ---------------------------------------------------------------------------

loc_7168A:

		lea	word_7197E(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#Obj_FlickerMove,(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		lsr.w	#1,d0
		addi.b	#$B,d0
		move.b	d0,$22(a0)
		moveq	#8,d0
		jmp	Set_IndexedVelocity.w
; ---------------------------------------------------------------------------

loc_716B2:
		moveq	#0,d0
		move.b	$2C(a0),d0
		lsr.w	#1,d0
		move.b	RawAni_716C2(pc,d0.w),$22(a0)
		rts
; ---------------------------------------------------------------------------
RawAni_716C2:	dc.b	1,   9,	  3,   2,  $A,	 4
; ---------------------------------------------------------------------------

loc_716C8:
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	word_716DC(pc,d0.w),$18(a0)
		move.w	word_716E8(pc,d0.w),$2E(a0)
		rts
; ---------------------------------------------------------------------------
word_716DC:	dc.w $FFFF
		dc.w $1FF
		dc.w 1
		dc.w $FFFF
		dc.w $1FF
		dc.w 1
word_716E8:	dc.w 2
		dc.w 2
		dc.w 3
		dc.w 6
		dc.w 6
		dc.w 8
; ---------------------------------------------------------------------------

loc_716F4:
		move.w	(__u_FAB0).w,d0
		addi.w	#$D8,d0
		move.w	d0,$14(a0)

loc_71700:
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	word_71730(pc,d0.w),d2
		jsr	Random_Number.w
		andi.w	#7,d0
		subq.w	#3,d0
		add.w	d0,d2
		move.w	(__u_FAB4).w,$10(a0)
		add.w	d2,$10(a0)
		swap	d0
		andi.w	#7,d0
		subq.w	#3,d0
		add.w	d0,$14(a0)
		rts
; ---------------------------------------------------------------------------
word_71730:	dc.w $FFE0
		dc.w $20
		dc.w $60
		dc.w $A0
		dc.w $E0
		dc.w $120
		dc.w $160
		dc.w $1A0

; =============== S U B R O U T I N E =======================================


sub_71740:
		moveq	#0,d0
		move.b	$2C(a0),d0
		lsl.w	#4,d0
		move.b	d0,$3C(a0)
		move.w	$10(a0),d0
		move.w	$14(a0),d1
		movem.w	d0-d1,-(sp)
		lea	(ICZMiniboss_OrbAngleLookup).l,a2
		jsr	MoveSprite_AtAngleLookup.w
		moveq	#0,d0
		moveq	#0,d1
		moveq	#0,d2
		moveq	#0,d3
		movem.w	(sp)+,d0-d1
		move.w	$10(a0),d2
		move.w	$14(a0),d3
		move.w	d0,$10(a0)
		move.w	d1,$14(a0)
		swap	d0
		swap	d1
		swap	d2
		swap	d3
		sub.l	d0,d2
		sub.l	d1,d3
		lsl.l	#3,d2
		lsl.l	#3,d3
		swap	d2
		swap	d3
		move.w	d2,$18(a0)
		move.w	d3,$1A(a0)
		rts
; End of function sub_71740

; ---------------------------------------------------------------------------

loc_7179E:

		addq.b	#4,$3C(a0)
		lea	(ICZMiniboss_OrbAngleLookup).l,a2
		jsr	MoveSprite_AtAngleLookup.w
		move.b	$3D(a0),d0
		addq.b	#1,d0
		move.b	d0,$3D(a0)

; =============== S U B R O U T I N E =======================================


sub_717B8:

		jsr	GetSineCosine.w
		tst.w	d1
		bpl.s	loc_717C4
		neg.w	d1

loc_717C4:
		move.w	$14(a0),d2
		move.w	$14(a1),d4
		sub.w	d4,d2
		scs	d3
		bcc.s	loc_717D4
		neg.w	d2

loc_717D4:
		mulu.w	d1,d2
		lsr.l	#8,d2
		cmpi.b	#$40,$3D(a0)
		blo.s	loc_717EA
		cmpi.b	#-$40,$3D(a0)
		bhs.s	loc_717EA
		not.b	d3

loc_717EA:

		tst.b	d3
		beq.s	loc_717F0
		neg.w	d2

loc_717F0:
		add.w	d2,d4
		move.w	d4,$14(a0)
		move.b	$3D(a0),d0
		spl	d3
		cmpi.b	#$40,$3C(a0)
		blo.s	loc_7180E
		cmpi.b	#-$40,$3C(a0)
		bhs.s	loc_7180E
		not.b	d3

loc_7180E:

		move.b	#6,$22(a0)
		cmpi.b	#$20,d0
		blo.s	loc_7183C
		cmpi.b	#$60,d0
		blo.s	loc_7182C
		cmpi.b	#-$60,d0
		blo.s	loc_7183C
		cmpi.b	#-$20,d0
		bhs.s	loc_7183C

loc_7182C:
		move.b	#5,$22(a0)
		tst.b	d3
		bne.s	loc_7183C
		move.b	#8,$22(a0)

loc_7183C:

		move.w	#prio(3),8(a0)
		tst.b	d3
		bne.s	locret_7184C
		move.w	#prio(6),8(a0)

locret_7184C:
		rts
; End of function sub_717B8


; =============== S U B R O U T I N E =======================================


sub_7184E:
		move.b	$3A(a0),d0
		addq.b	#1,$3A(a0)
		andi.w	#7,d0
		move.b	byte_71862(pc,d0.w),$39(a0)
		rts
; End of function sub_7184E

; ---------------------------------------------------------------------------
byte_71862:	dc.b 1
		dc.b 0
		dc.b 1
		dc.b 1
		dc.b 0
		dc.b 1
		dc.b 0
		dc.b 0
; ---------------------------------------------------------------------------

loc_7186A:
		movea.w	$46(a0),a1
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	d0,d1
		lsr.w	#1,d1
		tst.b	$43(a1)
		bne.s	loc_71880
		addq.w	#8,d1

loc_71880:
		move.b	byte_7189A(pc,d1.w),$42(a0)
		add.w	d0,d0
		move.l	word_718AA(pc,d0.w),$18(a0)
		tst.b	$43(a1)
		bne.s	locret_71898
		neg.w	$18(a0)

locret_71898:
		rts
; ---------------------------------------------------------------------------
byte_7189A:	dc.b $60
		dc.b $5C
		dc.b $58
		dc.b $54
		dc.b $50
		dc.b $4C
		dc.b $48
		dc.b $44
		dc.b $E0
		dc.b $DC
		dc.b $D8
		dc.b $D4
		dc.b $D0
		dc.b $CC
		dc.b $C8
		dc.b $C4
word_718AA:	dc.w  $FD00, $FC00
		dc.w  $FE00, $FC00
		dc.w  $FF00, $FC00
		dc.w	  0, $FC00
		dc.w   $100, $FC00
		dc.w   $200, $FC00
		dc.w   $300, $FC00
		dc.w   $400, $FC00
; ---------------------------------------------------------------------------

loc_718CA:
		move.w	(__u_FAB0).w,d0
		subi.w	#$40,d0
		move.w	d0,$14(a0)
		bra.w	loc_71700

; =============== S U B R O U T I N E =======================================


sub_718DA:
		tst.b	$28(a0)
		bne.s	locret_71924
		tst.b	$29(a0)
		beq.s	loc_71926
		tst.b	$20(a0)
		bne.s	loc_718FA
		move.b	#$20,$20(a0)
		moveq	#$6E,d0
		jsr	Play_Sound_2.w

loc_718FA:
		bset	#6,$2A(a0)
		moveq	#0,d0
		btst	#0,$20(a0)
		bne.s	loc_7190E
		addi.w	#4,d0

loc_7190E:
		bsr.w	sub_71946
		subq.b	#1,$20(a0)
		bne.s	locret_71924
		bclr	#6,$2A(a0)
		move.b	$25(a0),$28(a0)

locret_71924:

		rts
; ---------------------------------------------------------------------------

loc_71926:
		move.l	#Wait_FadeToLevelMusic,(a0)
		move.l	#loc_713E8,$34(a0)
		lea	Child6_CreateBossExplosion.w,a2
		jsr	CreateChild1_Normal.w
		jmp	BossDefeated_StopTimer.w
; End of function sub_718DA


; =============== S U B R O U T I N E =======================================


sub_71946:
		lea	word_71954(pc),a1
		lea	word_71958(pc,d0.w),a2
		jmp	CopyWordData_2.w
; End of function sub_71946

; ---------------------------------------------------------------------------
word_71954:	dc.w $FC34
		dc.w $FC36
word_71958:	dc.w $222
		dc.w $20
		dc.w $EEE
		dc.w $EEE
ObjDat3_71960:	dc.l Map_ICZMiniboss
		dc.w $A4A9
		dc.w prio(5)
		dc.b $18
		dc.b $18
		dc.b 0
		dc.b 6
word_7196C:	dc.w prio(5)
		dc.b $10
		dc.b $C
		dc.b 1
		dc.b 0
ObjDat3_71972:	dc.l Map_ICZMiniboss
		dc.w $44A9
		dc.w prio(5)
		dc.b $C
		dc.b $C
		dc.b 6
		dc.b 0
word_7197E:	dc.w prio(3)
		dc.b $C
		dc.b $C
		dc.b $B
		dc.b 0
ChildObjDat_71984:dc.w 5
		dc.l loc_71446
		dc.w $F2F5
		dc.l loc_71446
		dc.w $EF5
		dc.l loc_71446
		dc.w $12
		dc.l loc_71446
		dc.w $F2F5
		dc.l loc_71446
		dc.w $EF5
		dc.l loc_71446
		dc.w $E
ChildObjDat_719AA:dc.w 7
		dc.l loc_714B8
ChildObjDat_719B0:dc.w 3
		dc.l loc_7168A
		dc.w $F4F4
		dc.l loc_7168A
		dc.w $CF4
		dc.l loc_7168A
		dc.w $F40C
		dc.l loc_7168A
		dc.b $C
		dc.b $C
		dc.b 0
		dc.b 3
		dc.b 1
		dc.b 3
		dc.b 2
		dc.b 3
		dc.b 3
		dc.b 3
		dc.b 4
		dc.b 3
		dc.b 5
		dc.b 3
		dc.b 6
		dc.b 3
		dc.b $F4
		dc.b 0
Pal_ICZMiniboss:	binclude "Levels/ICZ/Palettes/Miniboss.bin"
	even

word_719FA:	dc.w 4
		dc.w 0
		dc.l word_71A04
		dc.w 0
word_71A04:	dc.w $FC62
		dc.w   $901,  $EEC,  $CC6,  $C80,  $C60,  $C40,	 $A40,	$820,  $620,  $200,  $600,     7,  $EEC,  $CC6,	 $C82,	$C80
		dc.w   $C40,  $A40,  $820,  $820,  $200,  $600,	    7,	$EEC,  $CC8,  $E82,  $C82,  $C40,  $C40,  $A20,	 $820,	$200
		dc.w   $600,	 7,  $EEE,  $EC8,  $EA4,  $C82,	 $C60,	$C40,  $A20,  $A20,  $400,  $600,     7,  $EEE,	 $EC8,	$EA4
		dc.w   $E82,  $C60,  $C40,  $C20,  $A20,  $400,	 $600,	   7,  $EEE,  $EC8,  $EA6,  $E82,  $C62,  $C40,	 $C20,	$C20
		dc.w   $600,  $800,	7,  $EEE,  $EE8,  $EC6,	 $EA2,	$C80,  $C60,  $C20,  $C20,  $600,  $A00,     7,	 $EEE,	$EEA
		dc.w   $EC6,  $EA4,  $C82,  $C60,  $C40,  $C20,	 $800,	$C00,	  7,  $EEE,  $EEA,  $EC8,  $EA4,  $C82,	 $C60,	$C40
		dc.w   $E20,  $A00,  $C00,     7,  $EEE,  $EEA,	 $EC8,	$EA4,  $C82,  $C60,  $C40,  $E20,  $A00,  $E00,	    7, $FFF4
word_71AE6:	dc.w 4
		dc.w 0
		dc.l word_71AF0
		dc.w 0
word_71AF0:	dc.w $FC34
		dc.w	  2,  $222,	7,  $C22,     0,  $EE0,	    0, $FFF8,	$14, $FC34,	2,  $222,     5,  $C22,	    0,	$EE0
		dc.w	  0, $FFF8,   $14, $FC34,     2,  $222,	    3,	$C22,	  0,  $EE0,	0, $FFF8,   $14, $FC34,	    2,	$222
		dc.w	  1,  $C22,	0,  $EE0,     0, $FFF8,	  $14, $FC34,	  0,  $222,	0,  $C22,     0,  $EE0,	    0, $FFFC
word_71B52:	dc.w 4
		dc.w 0
		dc.l word_71B5C
		dc.w 0
word_71B5C:	dc.w $FC34
		dc.w	  2,  $222,	1,  $C22,     0,  $EE0,	    0, $FFF8,	$14, $FC34,	2,  $222,     3,  $C22,	    0,	$EE0
		dc.w	  0, $FFF8,   $14, $FC34,     2,  $222,	    5,	$C22,	  0,  $EE0,	0, $FFF8,   $14, $FC34,	    2,	$222
		dc.w	  7,  $C22,	0,  $EE0,     0, $FFF8,	  $14, $FC34,	  4,  $222,	9,  $C22,     0,  $EE0,	    0, $FFF4
word_71BBE:	dc.w $2F8
		dc.w $6F8
		dc.w $4340
		dc.w $4490
word_71BC6:	dc.w $5F8
		dc.w $5F8
		dc.w $4390
		dc.w $4390
; ---------------------------------------------------------------------------

Obj_ICZEndBoss:
		lea	word_71BBE(pc),a1
		jsr	(Check_CameraInRange).l
		btst	#5,OptionsBits.w		; NAT: Check if bosses are on
		bne.s	.enabled			; if are, branch

		lea	.screen(pc),a1			; else, lock screen
		jmp	Boss_Force_End_2		;

.screen		dc.w $4390, $4390, $5F8, $5F8

.enabled	move.l	#loc_71C08,(a0)
		move.l	#loc_71C0E,$34(a0)
		st	BossHitMode.w			; NAT: Enable hit mode
		clr.w	BossHitsP1.w			; clear hits count

		lea	word_71BC6(pc),a1
		move.b	#Mus_Boss,$26(a0)
		jsr	sub_85D6A.w
		moveq	#$70,d0
		jsr	Load_PLC.w
		lea	Pal_ICZEndBoss(pc),a1
		jmp	PalLoad_Line1.w
; ---------------------------------------------------------------------------

loc_71C08:
		jmp	loc_85CA4.w
; ---------------------------------------------------------------------------

loc_71C0E:
		move.l	#loc_71C16,(a0)

locret_71C14:

		rts
; ---------------------------------------------------------------------------

loc_71C16:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_71C2E(pc,d0.w),d1
		jsr	off_71C2E(pc,d1.w)
		bsr.w	sub_7225C

		move.w	#$43A8,PlayerSpawn.w		; NAT: Set left spawn
		cmp.w	#$4428,x_pos(a0)		; check if boss is beyond middle
		bhs.s	.gotit				; yes? branch
		move.w	#$44A8,PlayerSpawn.w		; set right spawn
.gotit		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------
off_71C2E:	dc.w loc_71C36-off_71C2E

		dc.w loc_71C78-off_71C2E
		dc.w loc_71CAA-off_71C2E
		dc.w loc_71D64-off_71C2E
; ---------------------------------------------------------------------------

loc_71C36:
		move.w	#$6AA,PlayerSpawn+2.w		; NAT: Set respawn y-pos
		lea	ObjDat3_72306(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.b	#8,$29(a0)
		move.w	#$80,$1A(a0)
		move.w	#$CF,$2E(a0)
		move.l	#loc_71C84,$34(a0)
		lea	(ChildObjDat_72336).l,a2
		jsr	CreateChild1_Normal.w
		bne.s	loc_71C6E
		move.b	#9,$2C(a1)

loc_71C6E:
		lea	ChildObjDat_7233E(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_71C78:
		jsr	MoveSprite2.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_71C84:
		move.w	#$7FFF,$44(a0)
		bsr.w	sub_72120
		move.b	#4,5(a0)
		move.w	#$3F,$2E(a0)
		move.l	#loc_71CEC,$34(a0)
		move.w	#$BF,$46(a0)
		rts
; ---------------------------------------------------------------------------

loc_71CAA:
		jsr	Swing_UpAndDown.w
		subq.w	#1,$44(a0)
		bpl.s	loc_71CC6
		neg.w	$18(a0)
		bchg	#0,4(a0)
		move.w	#$17F,$44(a0)

loc_71CC6:
		jsr	MoveSprite2.w
		cmpi.b	#2,(Player_1+character_id).w
		bne.s	loc_71CE6
		subq.w	#1,$46(a0)
		bpl.s	loc_71CE6
		move.w	#$7F,$46(a0)
		bchg	#2,$38(a0)

loc_71CE6:

		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_71CEC:
		bset	#2,$38(a0)
		move.w	#$3F,$2E(a0)
		move.l	#loc_71D02,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_71D02:
		move.w	#$3F,$2E(a0)
		move.w	#-$80,$18(a0)
		move.w	#$17F,$44(a0)
		move.l	#loc_71D1E,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_71D1E:

		move.l	#loc_71D46,$34(a0)
		moveq	#$7F,d0
		jsr	Play_Sound_2.w
		bsr.w	sub_7213A
		cmpi.w	#2,$26(a0)
		bne.w	locret_71C14
		lea	ChildObjDat_72352(pc),a2
		jmp	CreateChild6_Simple.w
; ---------------------------------------------------------------------------

loc_71D46:
		bclr	#1,$38(a0)
		move.w	#$3F,$2E(a0)
		move.l	#loc_71D1E,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_71D64:
		subq.w	#1,$3C(a0)
		bmi.s	loc_71D78
		addi.l	#$8000,$14(a0)
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_71D78:
		move.b	#4,5(a0)
		rts
; ---------------------------------------------------------------------------

loc_71D80:
		move.l	#Obj_Wait,(a0)
		bset	#4,$38(a0)
		move.l	#loc_71D9E,$34(a0)
		lea	ChildObjDat_7236C(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_71D9E:
;		move.l	#loc_71DE2,(a0)
		st	(End_Of_Level_Flag).w
		clr.b	(Boss_flag).w

		move.w	#$4430,$10(a0)			; NAT: Create sign instead
		jmp	Obj_EndSignControl_HitHUD	;

;		jsr	Create_New_Sprite.w
;		bne.s	loc_71DC6
;		move.l	#Obj_81,(a1)
;		move.w	#$4560,$10(a1)
;		move.w	#$6A3,$14(a1)

loc_71DC6:
;		move.w	(__u_FAB4).w,d0
;		addi.w	#$130,d0
;		move.w	d0,(__u_FA92).w
;		jsr	Create_New_Sprite.w
;		bne.s	locret_71DE0
;		move.l	#Obj_IncLevEndXGradual,(a1)

locret_71DE0:
;		rts
; ---------------------------------------------------------------------------

loc_71DE2:
;		move.w	(Camera_X_pos).w,(Camera_min_X_pos).w
;		tst.b	(End_Of_Level_Flag).w
;		bne.w	locret_71C14
;		clr.b	(End_Of_Level_Flag).w
;		jsr	Restore_PlayerControl.w
;		lea	(Player_2).w,a1
;		jsr	Restore_PlayerControl2.w
;		jsr	Obj_PlayLevelMusic.w
;		move.w	(__u_FA98).w,(Camera_target_max_Y_pos).w
;		move.w	#$47C0,(__u_FA92).w
;		lea	Child6_IncLevX.w,a2
;		jsr	CreateChild6_Simple.w
;		jmp	Go_Delete_Sprite_2.w
; ---------------------------------------------------------------------------

loc_71E28:
		jsr	Refresh_ChildPositionAdjusted.w
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_71E44(pc,d0.w),d1
		jsr	off_71E44(pc,d1.w)
		moveq	#$C,d0
		jmp	Child_Draw_Sprite_FlickerMove.w
; ---------------------------------------------------------------------------
off_71E44:	dc.w loc_71E4A-off_71E44

		dc.w loc_71E54-off_71E44
		dc.w loc_71E7C-off_71E44
; ---------------------------------------------------------------------------

loc_71E4A:
		lea	word_72312(pc),a1
		jmp	SetUp_ObjAttributes3.w
; ---------------------------------------------------------------------------

loc_71E54:
		movea.w	$46(a0),a1
		tst.b	$3B(a1)
		bne.s	loc_71E60
		rts
; ---------------------------------------------------------------------------

loc_71E60:
		move.b	#4,5(a0)
		move.b	#4,$22(a0)
		move.w	#$E,$2E(a0)
		move.l	#loc_71E82,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_71E7C:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_71E82:
		move.w	#$17,$2E(a0)
		move.w	#6,$26(a0)
		lea	ChildObjDat_7235E(pc),a2
		jmp	CreateChild6_Simple.w
; ---------------------------------------------------------------------------

loc_71E98:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_71EC4(pc,d0.w),d1
		jsr	off_71EC4(pc,d1.w)
		jsr	Refresh_ChildPosition.w
		moveq	#0,d0
		movea.w	$46(a0),a1
		tst.b	$3B(a1)
		bne.s	loc_71EBE
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_71EBE:
		jmp	loc_849D8.w
; ---------------------------------------------------------------------------
off_71EC4:	dc.w loc_71ECA-off_71EC4

		dc.w loc_71ED4-off_71EC4
		dc.w loc_71F10-off_71EC4
; ---------------------------------------------------------------------------

loc_71ECA:
		lea	word_72318(pc),a1
		jmp	SetUp_ObjAttributes3.w
; ---------------------------------------------------------------------------

loc_71ED4:
		movea.w	$46(a0),a4
		move.b	$3A(a0),d0
		move.b	$38(a4),d1
		move.b	d1,$3A(a0)
		eor.b	d1,d0
		andi.b	#4,d0
		beq.s	locret_71F0E
		moveq	#1,d0
		btst	#2,d1
		bne.s	loc_71EF6
		neg.b	d0

loc_71EF6:
		move.b	d0,$40(a0)
		move.b	#4,5(a0)
		move.w	#$24,$2E(a0)
		move.l	#loc_71F1E,$34(a0)

locret_71F0E:
		rts
; ---------------------------------------------------------------------------

loc_71F10:
		move.b	$40(a0),d0
		add.b	d0,$43(a0)
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_71F1E:

		move.b	#2,5(a0)
		movea.w	$46(a0),a1
		move.b	$38(a1),$3A(a0)
		rts
; ---------------------------------------------------------------------------

loc_71F30:
		move.w	$10(a0),-(sp)
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_71F74(pc,d0.w),d1
		jsr	off_71F74(pc,d1.w)
		jsr	Refresh_ChildPosition.w
		moveq	#$23,d1
		moveq	#4,d2
		moveq	#$A,d3
		move.w	(sp)+,d4
		jsr	SolidObjectFull.w
		moveq	#0,d0
		movea.w	$46(a0),a1
		tst.b	$3B(a1)
		bne.s	loc_71F68
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_71F68:
		jsr	Displace_PlayerOffObject.w
		jmp	loc_849D8.w
; ---------------------------------------------------------------------------
off_71F74:	dc.w loc_71F7A-off_71F74

		dc.w loc_71F92-off_71F74
		dc.w loc_71FDA-off_71F74
; ---------------------------------------------------------------------------

loc_71F7A:
		lea	word_7231E(pc),a1
		jsr	SetUp_ObjAttributes3.w
		movea.w	$46(a0),a1
		lea	ChildObjDat_72364(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_71F92:
		movea.w	$46(a0),a4
		btst	#1,$38(a4)
		beq.s	loc_71FA2
		bsr.w	loc_72006

loc_71FA2:
		move.b	$3A(a0),d0
		move.b	$38(a4),d1
		move.b	d1,$3A(a0)
		eor.b	d1,d0
		andi.b	#4,d0
		beq.s	locret_71FD8
		moveq	#1,d0
		btst	#2,d1
		bne.s	loc_71FC0
		neg.b	d0

loc_71FC0:
		move.b	d0,$40(a0)
		move.b	#4,5(a0)
		move.w	#$42,$2E(a0)
		move.l	#loc_71F1E,$34(a0)

locret_71FD8:
		rts
; ---------------------------------------------------------------------------

loc_71FDA:
		movea.w	$46(a0),a4
		btst	#1,$38(a4)
		beq.s	loc_71FEA
		bsr.w	loc_72006

loc_71FEA:
		move.b	$40(a0),d0
		add.b	d0,$43(a0)
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------
		move.b	#2,5(a0)
		move.b	$38(a4),$3A(a0)
		rts
; ---------------------------------------------------------------------------

loc_72006:

		move.w	$26(a4),d0
		cmpi.w	#2,d0
		beq.w	locret_71C14

loc_72012:
		move.w	d0,$26(a0)
		lea	ChildObjDat_72358(pc),a2
		jmp	CreateChild6_Simple.w
; ---------------------------------------------------------------------------

loc_72020:

		lea	ObjDat3_72324(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#Obj_Wait,(a0)
		move.l	#loc_7203C,$34(a0)
		bra.w	loc_72168
; ---------------------------------------------------------------------------

loc_7203C:
		movea.w	$46(a0),a1
		move.l	#loc_7205E,(a0)
		cmpi.w	#6,$26(a1)
		bne.s	loc_72054
		move.l	#loc_72092,(a0)

loc_72054:
		move.l	#Go_Delete_Sprite,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_7205E:
		jsr	Refresh_ChildPosition.w
		jsr	Animate_RawMultiDelay.w
		cmpi.b	#4,$23(a0)
		blo.s	loc_72084
		cmpi.b	#8,$23(a0)
		bhi.s	loc_72084
		lea	word_7208A(pc),a1
		jsr	(sub_8A9C6).l

loc_72084:

		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------
word_7208A:	dc.w  $FFE8,   $30, $FFE8,   $30
; ---------------------------------------------------------------------------

loc_72092:
		jsr	Refresh_ChildPositionAdjusted.w
		jsr	Animate_RawMultiDelay.w
		cmpi.b	#4,$23(a0)
		blo.s	loc_720B8
		cmpi.b	#8,$23(a0)
		bhi.s	loc_720B8
		lea	word_720BE(pc),a1
		jsr	(sub_8A9C6).l

loc_720B8:

		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------
word_720BE:	dc.w  $FFF0,   $20, $FFF0,   $20
; ---------------------------------------------------------------------------

loc_720C6:
		move.l	#loc_720D4,(a0)
		move.b	#-$65,$28(a0)
		rts
; ---------------------------------------------------------------------------

loc_720D4:
		jsr	Refresh_ChildPosition.w
		movea.w	$46(a0),a1
		btst	#7,$2A(a1)
		bne.s	loc_720EC
		jmp	Add_SpriteToCollisionResponseList.w
; ---------------------------------------------------------------------------

loc_720EC:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_720F2:

		lea	word_72330(pc),a1
		jsr	SetUp_ObjAttributes3.w
		jsr	Refresh_ChildPositionAdjusted.w
		move.l	#Obj_FlickerMove,(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		lsr.w	#1,d0
		addi.b	#$16,d0
		move.b	d0,$22(a0)
		moveq	#$34,d0
		jmp	Set_IndexedVelocity.w

; =============== S U B R O U T I N E =======================================


sub_72120:
		move.w	#$C0,d0
		move.w	d0,$3E(a0)
		move.w	d0,$1A(a0)
		move.w	#$10,$40(a0)
		bclr	#0,$38(a0)
		rts
; End of function sub_72120


; =============== S U B R O U T I N E =======================================


sub_7213A:
		bset	#1,$38(a0)
		tst.b	$3B(a0)
		bne.s	loc_72160
		move.b	$3A(a0),d0
		andi.w	#$F,d0
		lea	byte_723D0(pc),a1
		move.b	(a1,d0.w),$27(a0)
		addq.b	#1,d0
		move.b	d0,$3A(a0)
		rts
; ---------------------------------------------------------------------------

loc_72160:
		move.w	#2,$26(a0)
		rts
; End of function sub_7213A

; ---------------------------------------------------------------------------

loc_72168:
		movea.w	$46(a0),a1
		move.w	$26(a1),d0
		moveq	#0,d1
		move.b	$2C(a0),d1
		lea	word_721F4(pc),a2
		move.w	(a2,d0.w),d2
		adda.w	d2,a2
		move.w	(a2,d1.w),$42(a0)
		lea	word_7222C(pc),a2
		move.w	(a2,d0.w),d2
		adda.w	d2,a2
		move.b	(a2,d1.w),d2
		or.b	d2,4(a0)
		lea	word_721C2(pc),a2
		move.w	(a2,d0.w),d2
		adda.w	d2,a2
		move.w	(a2,d1.w),$2E(a0)
		cmpi.b	#6,d0
		beq.s	loc_721B8
		add.w	d1,d1
		move.l	off_721D8(pc,d1.w),$30(a0)
		rts
; ---------------------------------------------------------------------------

loc_721B8:
		move.l	#byte_7239C,$30(a0)
		rts
; ---------------------------------------------------------------------------
word_721C2:	dc.w	8
		dc.w   $A
		dc.w	8
		dc.w   $E
		dc.w  $11
		dc.w   $E
		dc.w   $B
		dc.w	8
		dc.w	5
		dc.w	2
		dc.w $FFFF
off_721D8:	dc.l byte_7238F
		dc.l byte_7238F
		dc.l byte_7238F
		dc.l byte_7238F
		dc.l byte_72380
		dc.l byte_72380
		dc.l byte_72380
word_721F4:	dc.w 8
		dc.w $16
		dc.w $22
		dc.w $30
		dc.w $B014
		dc.w $C014
		dc.w $B804
		dc.w $C004
		dc.w $CC0C
		dc.w $DC08
		dc.w $E404
		dc.w $840
		dc.w $3C
		dc.w $F040
		dc.w $F83C
		dc.w $FC34
		dc.w $FC28
		dc.w $5014
		dc.w $4014
		dc.w $4804
		dc.w $4004
		dc.w $340C
		dc.w $2408
		dc.w $1C04
		dc.w $18FC
		dc.w $1400
		dc.w $10F8
		dc.w $8FC
word_7222C:	dc.w 8
		dc.w $16
		dc.w $22
		dc.w $E
		dc.w $200
		dc.w $200
		dc.w 0
		dc.w 0
		dc.w 0
		dc.w 0
		dc.w 0
		dc.w $100
		dc.w $100
		dc.w 0
		dc.w 0
		dc.w 0
		dc.w 0
		dc.w $300
		dc.w $300
		dc.w $100
		dc.w $100
		dc.w $100
		dc.w $100
		dc.w $100

; =============== S U B R O U T I N E =======================================


sub_7225C:
		tst.b	$28(a0)
		bne.s	locret_722C4
		move.b	$29(a0),d0
		beq.s	loc_722C6
		tst.b	$20(a0)
		bne.s	loc_72292
		cmpi.b	#2,d0
		bne.s	loc_72284
		st	$3B(a0)
		move.b	#6,5(a0)
		move.w	#$7F,$3C(a0)

loc_72284:
		move.b	#$20,$20(a0)
		moveq	#$6E,d0
		jsr	Play_Sound_2.w

loc_72292:
		bset	#6,$2A(a0)
		moveq	#0,d0
		btst	#0,$20(a0)
		bne.s	loc_722A6
		addi.w	#4,d0

loc_722A6:
		bsr.w	sub_722EC
		subq.b	#1,$20(a0)
		bne.s	locret_722C4
		bclr	#6,$2A(a0)
		cmpi.b	#0,$22(a0)
		bne.s	locret_722C4
		move.b	$25(a0),$28(a0)

locret_722C4:

		rts
; ---------------------------------------------------------------------------

loc_722C6:
		st	$3B(a0)				; NAT: Make sure the extra bit is destroyed
		move.l	#Wait_FadeToLevelMusic,(a0)
		move.l	#loc_71D80,$34(a0)
		movea.w	(__u_FAAE).w,a1
		cmpi.l	#loc_8B660,(a1)
		bne.s	loc_722E6
		bset	#5,$38(a1)

loc_722E6:
		jmp	BossDefeated_StopTimer.w
; End of function sub_7225C


; =============== S U B R O U T I N E =======================================


sub_722EC:
		lea	word_722FA(pc),a1
		lea	word_722FE(pc,d0.w),a2
		jmp	CopyWordData_2.w
; End of function sub_722EC

; ---------------------------------------------------------------------------
word_722FA:	dc.w $FC34
		dc.w $FC3C
word_722FE:	dc.w $20
		dc.w $644
		dc.w $EEE
		dc.w $AAA
ObjDat3_72306:	dc.l Map_ICZEndBoss
		dc.w $A2A6
		dc.w prio(5)
		dc.b $24
		dc.b $24
		dc.b 0
		dc.b $F
word_72312:	dc.w prio(4)
		dc.b $14
		dc.b 8
		dc.b 3
		dc.b 0
word_72318:	dc.w prio(5)
		dc.b 8
		dc.b $C
		dc.b 1
		dc.b 0
word_7231E:	dc.w prio(5)
		dc.b $18
		dc.b $2C
		dc.b 2
		dc.b 0
ObjDat3_72324:	dc.l Map_ICZEndBoss
		dc.w $A2A6
		dc.w prio(1)
		dc.b $10
		dc.b $10
		dc.b 5
		dc.b 0
word_72330:	dc.w prio(3)
		dc.b $14
		dc.b $10
		dc.b 0
		dc.b 0
ChildObjDat_72336:dc.w 0
		dc.l Obj_RobotnikShip4
		dc.w 0
ChildObjDat_7233E:dc.w 2
		dc.l loc_71E28
		dc.w $1807
		dc.l loc_71E98
		dc.w $B
		dc.l loc_71F30
		dc.w $2D
ChildObjDat_72352:dc.w 5
		dc.l loc_72020
ChildObjDat_72358:dc.w 6
		dc.l loc_72020
ChildObjDat_7235E:dc.w 3
		dc.l loc_72020
ChildObjDat_72364:dc.w 0
		dc.l loc_720C6
		dc.w 8
ChildObjDat_7236C:dc.w 2
		dc.l loc_720F2
		dc.w $EC04
		dc.l loc_720F2
		dc.w $C04
		dc.l loc_720F2
		dc.w $1C
byte_72380:	dc.b	5,   1
		dc.b	5,   1
		dc.b	6,   1
		dc.b	7,   2
		dc.b	8,   3
		dc.b	9,   4
		dc.b   $A,   5
		dc.b  $F4
byte_7238F:	dc.b   $B,   2
		dc.b   $B,   2
		dc.b   $C,   3
		dc.b   $D,   4
		dc.b   $E,   5
		dc.b   $F,   6
		dc.b  $F4
byte_7239C:	dc.b  $10,   1
		dc.b  $10,   1
		dc.b  $11,   1
		dc.b  $12,   2
		dc.b  $13,   2
		dc.b  $14,   2
		dc.b  $15,   2
		dc.b  $F4,   5
		dc.b	0,   1
		dc.b  $FC,   0
Pal_ICZEndBoss:	binclude "Levels/ICZ/Palettes/End Boss.bin"
	even

byte_723D0:	dc.b	0,   2
		dc.b	4,   2
		dc.b	0,   2
		dc.b	4,   2
		dc.b	0,   2
		dc.b	0,   2
		dc.b	4,   2
		dc.b	2,   4
; ---------------------------------------------------------------------------

Obj_LBZMiniboss:

		btst	#5,OptionsBits.w		; NAT: Check if bosses are on
		bne.s	.enabled			; if are, branch
		lea	.screen(pc),a1			; else, lock screen
		jmp	Boss_Force_End_2		;

.screen		dc.w $3E00, $3EA0, $148, $148

.enabled	move.l	#.ok,(a0)			; set addr
.ok		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_723F4(pc,d0.w),d1
		jsr	off_723F4(pc,d1.w)

		move.w	#$3DE0,PlayerSpawn.w		; NAT: Set left spawn
		cmp.w	#$3ED0,x_pos(a0)		; check if boss is beyond middle
		bhs.s	.gotit				; yes? branch
		move.w	#$3FC0,PlayerSpawn.w		; set right spawn
.gotit		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------
off_723F4:	dc.w loc_72400-off_723F4

		dc.w loc_72452-off_723F4
		dc.w loc_72474-off_723F4
		dc.w loc_724BC-off_723F4
		dc.w loc_724E2-off_723F4
		dc.w loc_72558-off_723F4
; ---------------------------------------------------------------------------

loc_72400:
		move.w	#$1EC,PlayerSpawn+2.w		; NAT: Set respawn y-pos
		lea	ObjDat3_72956(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.b	#6,$29(a0)
		st	Boss_flag.w
		move.w	$10(a0),$3C(a0)
		move.w	#$10,$2E(a0)
		move.l	#loc_72458,$34(a0)
		lea	Pal_LBZMiniboss(pc),a1
		jsr	PalLoad_Line1.w
		lea	ChildObjDat_7296E(pc),a2
		jsr	CreateChild1_Normal.w
		lea	ChildObjDat_72976(pc),a2
		jsr	CreateChild4_LinkListRepeated.w
		lea	ChildObjDat_7297C(pc),a2
		jmp	CreateChild4_LinkListRepeated.w
; ---------------------------------------------------------------------------

loc_72452:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_72458:
		move.b	#4,5(a0)
		move.w	#0,$1A(a0)
		move.w	#$3F,$2E(a0)
		move.l	#loc_72480,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_72474:
		jsr	MoveSprite2.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_72480:
		move.b	#6,5(a0)
		bset	#1,$38(a0)
		lea	(byte_72982).l,a1
		lea	(__u_FA82).w,a2
		moveq	#5,d6

loc_72498:
		move.b	(a1)+,(a2)+
		dbf	d6,loc_72498
		move.l	#-$57E,$30(a0)
		move.b	#$10,$24(a0)
		move.l	#loc_724C8,$34(a0)

loc_724B4:
		move.w	#$10,$2E(a0)
		rts
; ---------------------------------------------------------------------------

loc_724BC:
		jsr	Animate_Raw.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_724C8:
		lea	(__u_FA82).w,a1
		subq.b	#1,(a1)
		cmpi.b	#2,(a1)
		bhi.s	loc_724B4
		move.b	#8,5(a0)
		move.b	#6,$28(a0)
		rts
; ---------------------------------------------------------------------------

loc_724E2:
		lea	(Player_1).w,a1
		moveq	#0,d0
		moveq	#0,d1
		move.w	$10(a0),d2
;		cmpi.b	#2,(Player_1+character_id).w
;		bne.s	loc_72502
;		moveq	#$20,d4
;		tst.b	$2C(a0)
;		beq.s	loc_72500
;		neg.w	d4

loc_72500:
;		add.w	d4,d2

loc_72502:
		sub.w	$10(a1),d2
		bpl.s	loc_7250C
		neg.w	d2
		addq.w	#2,d0

loc_7250C:
		moveq	#0,d1
		move.w	$14(a0),d3
		move.w	$14(a1),d4
		subi.w	#$38,d4
		sub.w	d4,d3
		bpl.s	loc_72522
		neg.w	d3
		addq.w	#2,d1

loc_72522:
		move.w	word_72554(pc,d0.w),$18(a0)
		move.w	word_72554(pc,d1.w),$1A(a0)
		cmpi.w	#4,d2
		bhi.s	loc_72538
		clr.w	$18(a0)

loc_72538:
		cmpi.w	#4,d3
		bhi.s	loc_72542
		clr.w	$1A(a0)

loc_72542:
		jsr	MoveSprite2.w
		jsr	Animate_Raw.w
		jmp	(loc_72840).l
; ---------------------------------------------------------------------------
word_72554:	dc.w  $FF00,  $100
; ---------------------------------------------------------------------------

loc_72558:
		subq.w	#2,$14(a0)
		jmp	(loc_72840).l
; ---------------------------------------------------------------------------

loc_72562:
;		cmpi.b	#2,(Player_1+character_id).w
;		beq.s	loc_72584
		jsr	Create_New_Sprite.w
		bne.s	loc_72578
		move.l	#Obj_Song_Fade_ToLevelMusic,(a1)

loc_72578:
		move.w	$3C(a0),$10(a0)
		jmp	Obj_EndSignControl_HitHUD	; NAT: do extra stuff here
; ---------------------------------------------------------------------------

loc_72584:
		movea.w	$46(a0),a1
		move.b	$2C(a0),d0
		bset	d0,$38(a1)
		jmp	Go_Delete_Sprite_2.w
; ---------------------------------------------------------------------------

loc_72596:
		jsr	Refresh_ChildPositionAdjusted.w
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_725B0(pc,d0.w),d1
		jsr	off_725B0(pc,d1.w)
		jmp	Child_Draw_Sprite2.w
; ---------------------------------------------------------------------------
off_725B0:	dc.w loc_725B6-off_725B0

		dc.w loc_725CA-off_725B0
		dc.w loc_725E8-off_725B0
; ---------------------------------------------------------------------------

loc_725B6:
		lea	word_72962(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#byte_72988,$30(a0)
		rts
; ---------------------------------------------------------------------------

loc_725CA:
		movea.w	$46(a0),a1
		btst	#1,$38(a1)
		bne.s	loc_725D8
		rts
; ---------------------------------------------------------------------------

loc_725D8:
		move.b	#4,5(a0)
		move.l	#byte_72988,$30(a0)
		rts
; ---------------------------------------------------------------------------

loc_725E8:
		jmp	Animate_Raw.w
; ---------------------------------------------------------------------------

loc_725EE:
		bset	#2,$38(a0)

loc_725F4:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_72610(pc,d0.w),d1
		jsr	off_72610(pc,d1.w)
		tst.b	$2C(a0)
		bne.s	loc_7260C
		jmp	loc_728C8(pc)
; ---------------------------------------------------------------------------

loc_7260C:
		jmp	loc_72902(pc)
; ---------------------------------------------------------------------------
off_72610:	dc.w loc_7261C-off_72610
		dc.w loc_72658-off_72610
		dc.w loc_72688-off_72610
		dc.w loc_726E4-off_72610
		dc.w loc_7270E-off_72610
		dc.w loc_7278E-off_72610
; ---------------------------------------------------------------------------

loc_7261C:
		lea	word_72968(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.w	#$100,$2E(a0)
		move.l	#loc_72674,$34(a0)
		move.b	#4,$3D(a0)
		move.w	#5,$3E(a0)
		cmpi.b	#$A,$2C(a0)
		bne.s	loc_72654
		move.w	#4,$3E(a0)
		bset	#1,$38(a0)

loc_72654:
		bra.w	loc_727B0
; ---------------------------------------------------------------------------

loc_72658:
		tst.b	$2C(a0)
		bne.s	loc_72664
		jsr	Refresh_ChildPositionAdjusted.w

loc_72664:
		move.w	$3E(a0),d2
		jsr	MoveSprite_CircularSimple.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_72674:

		move.b	#4,5(a0)
		bsr.w	sub_7280C
		move.l	#loc_726B2,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_72688:
		btst	#1,$38(a0)
		beq.s	loc_726A8
		move.b	$3D(a0),d0
		add.b	d0,$3C(a0)
		move.w	$3E(a0),d2
		jsr	MoveSprite_CircularSimple.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_726A8:
		move.w	$3E(a0),d2
		jmp	MoveSprite_CircularSimple.w
; ---------------------------------------------------------------------------

loc_726B2:
		bsr.w	sub_72826
		move.l	#loc_72726,$34(a0)
		tst.b	$2C(a0)
		beq.s	loc_726DC
		move.b	#6,5(a0)
		movea.w	$46(a0),a1
		bset	#1,$38(a1)
		move.b	$3C(a1),$3C(a0)
		rts
; ---------------------------------------------------------------------------

loc_726DC:
		move.b	#8,5(a0)
		rts
; ---------------------------------------------------------------------------

loc_726E4:
		movea.w	$46(a0),a1
		move.b	$3C(a1),$3C(a0)
		move.w	$3E(a0),d2
		jsr	MoveSprite_CircularSimple.w
		movea.w	$46(a0),a1
		btst	#1,$38(a1)
		beq.s	loc_72706
		rts
; ---------------------------------------------------------------------------

loc_72706:
		move.b	#8,5(a0)
		rts
; ---------------------------------------------------------------------------

loc_7270E:
		move.b	$3D(a0),d0
		add.b	d0,$3C(a0)
		jsr	Obj_Wait.w
		move.w	$3E(a0),d2
		jmp	MoveSprite_CircularSimple.w
; ---------------------------------------------------------------------------

loc_72726:
		bclr	#1,$38(a0)
		neg.b	$3D(a0)
		bsr.w	loc_72674
		cmpi.b	#$A,$2C(a0)
		bne.s	loc_72756
		move.b	#$A,5(a0)
		move.w	#$3C,$2E(a0)
		move.l	#loc_72674,$34(a0)
		bset	#1,$38(a0)

loc_72756:
		moveq	#0,d0
		move.b	$2C(a0),d0
		lsr.w	#1,d0
		moveq	#0,d1
		btst	#2,$38(a0)
		beq.s	loc_7276A
		addq.w	#8,d1

loc_7276A:
		tst.b	$3D(a0)
		bpl.s	loc_72772
		addq.w	#4,d1

loc_72772:
		movea.l	off_7277E(pc,d1.w),a1
		move.b	(a1,d0.w),$3C(a0)
		rts
; ---------------------------------------------------------------------------
off_7277E:	dc.l byte_727F4
		dc.l byte_727FA
		dc.l byte_72800
		dc.l byte_72806
; ---------------------------------------------------------------------------

loc_7278E:
		move.w	$3E(a0),d2
		jsr	MoveSprite_CircularSimple.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_7279E:
		jsr	MoveSprite.w
		jsr	Obj_Wait.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_727B0:
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	byte_727E2(pc,d0.w),8(a0)
		lsr.w	#1,d0
		move.b	byte_727EE(pc,d0.w),$22(a0)
		move.b	byte_727F4(pc,d0.w),$3C(a0)
		btst	#2,$38(a0)
		beq.s	loc_727D8
		move.b	byte_72800(pc,d0.w),$3C(a0)

loc_727D8:
		move.w	$3E(a0),d2
		jmp	MoveSprite_CircularSimple.w
; ---------------------------------------------------------------------------
byte_727E2:	dc.w prio(6), prio(7), prio(6), prio(7), prio(6), prio(5)
byte_727EE:	dc.b 7
		dc.b 8
		dc.b 7
		dc.b 8
		dc.b 7
		dc.b 6
byte_727F4:	dc.b $55
		dc.b 0
		dc.b $D5
		dc.b $AA
		dc.b $80
		dc.b $68
byte_727FA:	dc.b $2A
		dc.b $7A
		dc.b $B0
		dc.b $DA
		dc.b 0
		dc.b $18
byte_72800:	dc.b $D5
		dc.b $80
		dc.b $55
		dc.b $2A
		dc.b 0
		dc.b $F4
byte_72806:	dc.b $AA
		dc.b 0
		dc.b $2A
		dc.b $55
		dc.b $80
		dc.b $8C

; =============== S U B R O U T I N E =======================================


sub_7280C:
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	word_7281A(pc,d0.w),$2E(a0)
		rts
; End of function sub_7280C

; ---------------------------------------------------------------------------
word_7281A:	dc.w 0
		dc.w $14
		dc.w 9
		dc.w 9
		dc.w 9
		dc.w 5

; =============== S U B R O U T I N E =======================================


sub_72826:
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	word_72834(pc,d0.w),$2E(a0)
		rts
; End of function sub_72826

; ---------------------------------------------------------------------------
word_72834:	dc.w $34
		dc.w $14
		dc.w 9
		dc.w 9
		dc.w 9
		dc.w 3
; ---------------------------------------------------------------------------

loc_72840:

		tst.b	$28(a0)
		bne.s	locret_72898
		tst.b	$29(a0)
		beq.s	loc_7289A
		cmpi.b	#3,$29(a0)
		bne.s	loc_7285A
		bset	#0,$38(a0)

loc_7285A:
		tst.b	$20(a0)
		bne.s	loc_7287A
		move.b	5(a0),$3A(a0)
		move.b	#$A,5(a0)
		move.b	#$20,$20(a0)
		moveq	#$6E,d0
		jsr	Play_Sound_2.w

loc_7287A:
		lea	word_7289A(pc),a2		; load data to a2
		btst	#0,$20(a0)
		bne.s	loc_7359C
		addq.w	#4,a2				; skip first color

loc_7359C:
		lea	Normal_palette_line_2+2.w,a1	; NAT: load palette line to a1
		move.l	(a2)+,(a1)+			; copy 2 colors
		move.l	(a2)+,(a1)+			;

		subq.b	#1,$20(a0)
		bne.s	locret_72898
		move.b	$3A(a0),5(a0)
		move.w	#$EEE,(Normal_palette_line_2+$2).w
		move.b	$25(a0),$28(a0)

locret_72898:
		rts

; ---------------------------------------------------------------------------
word_7289A:	dc.w $EEE, $CCC, $888, $666, $444, $222
; ---------------------------------------------------------------------------

loc_7289A:
		move.l	#Wait_NewDelay,(a0)
		move.l	#loc_72562,$34(a0)
		lea	Child6_CreateBossExplosion.w,a2
		jsr	CreateChild1_Normal.w
		cmpi.w	#3,(Player_mode).w
		beq.s	loc_728C2
		jmp	BossDefeated_StopTimer.w
; ---------------------------------------------------------------------------

loc_728C2:
		jmp	BossDefeated.w
; ---------------------------------------------------------------------------

loc_728C8:
		movea.w	$46(a0),a1
		btst	#7,$2A(a1)
		bne.s	loc_728EA
		btst	#0,$38(a1)
		beq.s	loc_728E4
		btst	#2,$38(a0)
		bne.s	loc_728EA

loc_728E4:
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------

loc_728EA:

		move.w	$44(a0),d0
		beq.s	loc_728F8
		movea.w	d0,a1
		bset	#7,$2A(a1)

loc_728F8:
		bsr.w	sub_72910
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------

loc_72902:
		btst	#7,$2A(a0)
		bne.s	loc_728EA
		jmp	Draw_And_Touch_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_72910:
		move.l	#loc_7279E,(a0)
		clr.b	$28(a0)
		move.w	#$80,$2E(a0)
		move.l	#Go_Delete_Sprite,$34(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		add.w	d0,d0
		lea	word_7293E(pc,d0.w),a1
		move.w	(a1)+,$18(a0)
		move.w	(a1)+,$1A(a0)
		rts
; End of function sub_72910

; ---------------------------------------------------------------------------
word_7293E:	dc.w $100
		dc.w $FF00
		dc.w $FE00
		dc.w $FE00
		dc.w $300
		dc.w $FE00
		dc.w $200
		dc.w $FF00
		dc.w $FF00
		dc.w $FE00
		dc.w $FF80
		dc.w $FF00
ObjDat3_72956:	dc.l Map_LBZMiniboss
		dc.w $A4D6
		dc.w prio(5)
		dc.b $20
		dc.b $20
		dc.b 0
		dc.b 0
word_72962:	dc.w prio(4)
		dc.b $20
		dc.b $20
		dc.b 3
		dc.b 0
word_72968:	dc.w prio(3)
		dc.b 8
		dc.b 8
		dc.b 6
		dc.b $98
ChildObjDat_7296E:dc.w 0
		dc.l loc_72596
		dc.w 0
ChildObjDat_72976:dc.w 5
		dc.l loc_725F4
ChildObjDat_7297C:dc.w 5
		dc.l loc_725EE
byte_72982:	dc.b   $F,   0
		dc.b	1,   0
		dc.b	2, $FC
byte_72988:	dc.b	7,   3

		dc.b	4,   5
		dc.b  $F8,   6
		dc.b  $3F,   5
		dc.b	5,   5
		dc.b  $F8,   6
		dc.b	7,   5
		dc.b	4,   3
		dc.b	4, $FC
Pal_LBZMiniboss:	binclude "Levels/LBZ/Palettes/Miniboss.bin"
	even

; ---------------------------------------------------------------------------

Obj_LBZ_FinalBoss1:

		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_729D2(pc,d0.w),d1
		jsr	off_729D2(pc,d1.w)
		bsr.w	sub_734FA
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------
off_729D2:	dc.w loc_729DE-off_729D2

		dc.w loc_72A54-off_729D2
		dc.w loc_72A70-off_729D2
		dc.w locret_72AEC-off_729D2
		dc.w loc_72AEE-off_729D2
		dc.w loc_72B04-off_729D2
; ---------------------------------------------------------------------------

loc_729DE:
		lea	ObjDat3_736CC(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.b	#9,$29(a0)
		st	Boss_flag.w
		move.l	#loc_72A5A,$34(a0)
		cmpi.b	#2,(Player_1+character_id).w
		beq.s	loc_72A2A
		move.w	#$7F,$2E(a0)
		st	(Update_HUD_timer).w
		moveq	#$71,d0
		jsr	Load_PLC.w
	;	jsr	Create_New_Sprite.w
	;	bne.s	loc_72A2A
	;	move.l	#Obj_Song_Fade_Transition,(a1)
	;	move.b	#Mus_Boss,$2C(a1)

loc_72A2A:

		lea	(Child1_MakeRoboHead3).l,a2
		jsr	CreateChild1_Normal.w
		lea	ChildObjDat_737F0(pc),a2
		jsr	CreateChild1_Normal.w
		lea	ChildObjDat_73766(pc),a2
		jsr	CreateChild1_Normal.w
		lea	ChildObjDat_737E8(pc),a2
		jmp	CreateChild3_NormalRepeated.w
; ---------------------------------------------------------------------------

loc_72A54:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_72A5A:
		move.b	#4,5(a0)
		move.w	#-$100,$1A(a0)
		lea	Pal_LBZFinalBoss1(pc),a1
		jmp	PalLoad_Line1.w
; ---------------------------------------------------------------------------

loc_72A70:
		move.w	$14(a0),d0
		move.w	(Camera_Y_pos).w,d1
		tst.w	$1A(a0)
		bmi.s	loc_72A8C
		addi.w	#$118,d1
		cmp.w	d1,d0
		bhs.s	loc_72A9A
		jmp	MoveSprite2.w
; ---------------------------------------------------------------------------

loc_72A8C:
		subi.w	#$B0,d1
		cmp.w	d1,d0
		bls.s	loc_72A9A
		jmp	MoveSprite2.w
; ---------------------------------------------------------------------------

loc_72A9A:

		cmpi.b	#2,$29(a0)
		bls.s	loc_72AAA
		btst	#3,$38(a0)
		beq.s	locret_72AE6

loc_72AAA:
		jsr	Random_Number.w
		swap	d0
		moveq	#0,d1
		bclr	#0,4(a0)
		btst	#0,d0
		beq.s	loc_72AC8
		moveq	#2,d1
		bset	#0,4(a0)

loc_72AC8:
		move.w	word_72AE8(pc,d1.w),d1
		move.w	(Camera_X_pos).w,d2
		add.w	d1,d2
		move.w	d2,$10(a0)
		move.w	#$100,d0
		tst.w	$1A(a0)
		bmi.s	loc_72AE2
		neg.w	d0

loc_72AE2:
		move.w	d0,$1A(a0)

locret_72AE6:
		rts
; ---------------------------------------------------------------------------
word_72AE8:	dc.w $110
		dc.w $30
; ---------------------------------------------------------------------------

locret_72AEC:
		rts
; ---------------------------------------------------------------------------

loc_72AEE:
		subq.b	#1,$40(a0)
		bmi.s	loc_72AF6
		rts
; ---------------------------------------------------------------------------

loc_72AF6:
		move.b	#$A,5(a0)
		move.b	#4,$40(a0)

locret_72B02:

		rts
; ---------------------------------------------------------------------------

loc_72B04:
		addq.w	#8,$14(a0)
		subq.b	#1,$40(a0)
		bmi.s	loc_72B10
		rts
; ---------------------------------------------------------------------------

loc_72B10:
		move.b	#6,5(a0)
		rts
; ---------------------------------------------------------------------------

loc_72B18:
		move.w	$14(a0),d0
		addq.w	#1,d0
		move.w	(Camera_Y_pos).w,d1
		addi.w	#$140,d1
		cmp.w	d1,d0
		bhs.s	loc_72B34
		move.w	d0,$14(a0)
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_72B34:
		move.l	#loc_72B46,(a0)
		move.w	#$3F,$2E(a0)
		st	(Ctrl_2_locked).w
		rts
; ---------------------------------------------------------------------------

loc_72B46:
		subq.w	#1,$2E(a0)
		bpl.s	locret_72B94
		lea	(Player_1).w,a1
		btst	#7,$2A(a1)
		bne.s	locret_72B94
		btst	#1,$2A(a1)
		bne.s	locret_72B94
		cmpi.b	#6,5(a1)
		bhs.s	locret_72B94
		move.l	#loc_72B96,(a0)
		jsr	(Set_PlayerEndingPose).l
		clr.b	(Title_Card_Out_Flag).w
		jsr	Create_New_Sprite.w
		bne.s	loc_72B86
		move.l	#Obj_LevelResults,(a1)

loc_72B86:
		jsr	Create_New_Sprite.w
		bne.s	locret_72B94
		move.l	#loc_72CFA,(a1)

locret_72B94:

		rts
; ---------------------------------------------------------------------------

loc_72B96:
		tst.b	(Title_Card_Out_Flag).w
		beq.w	locret_72B02
		move.l	#loc_72BBC,(a0)
		jsr	Obj_PlayLevelMusic.w
		move.w	#$1F,$2E(a0)
		lea	PLC_83D64.w,a1
		jmp	Load_PLC_Raw.w
; ---------------------------------------------------------------------------

loc_72BBC:
		subq.w	#1,$2E(a0)
		bpl.w	locret_72B02
		move.l	#loc_72C0A,(a0)
		bset	#5,$38(a0)
		move.w	a0,(__u_FAA4).w
		jsr	Restore_PlayerControl.w
		lea	(Player_2).w,a1
		jsr	Restore_PlayerControl2.w
		st	(Ctrl_1_locked).w
		clr.w	(Ctrl_1_logical).w
		jsr	Create_New_Sprite.w
		bne.s	loc_72BFA
		move.l	#loc_863C0,(a1)

loc_72BFA:
		lea	(ArtKosM_LBZ2DeathEggSmall).l,a1
		move.w	#-$6A40,d2
		jmp	Queue_Kos_Module.w
; ---------------------------------------------------------------------------

loc_72C0A:
		lea	(Player_1).w,a1
		btst	#1,$2A(a1)
		bne.s	locret_72C3A
		move.w	(Camera_X_pos).w,d0
		addi.w	#$A0,d0
		sub.w	$10(a1),d0
		scs	d2
		bpl.s	loc_72C28
		neg.w	d0

loc_72C28:
		cmpi.w	#4,d0
		blo.s	loc_72C3C
		moveq	#3,d1
		tst.b	d2
		beq.s	loc_72C36
		moveq	#2,d1

loc_72C36:
		bset	d1,(Ctrl_1_logical).w

locret_72C3A:
		rts
; ---------------------------------------------------------------------------

loc_72C3C:
		move.l	#loc_72C68,(a0)
		clr.b	(__u_FA88).w
		jsr	Stop_Object.w
		bclr	#0,4(a1)
		bclr	#0,$2A(a1)
		move.w	#$101,(Ctrl_1_logical).w
		lea	ChildObjDat_73806(pc),a2
		jmp	CreateChild6_Simple.w
; ---------------------------------------------------------------------------

loc_72C68:
		btst	#0,(__u_FA88).w
		beq.s	locret_72C9C
		move.l	#loc_72C9E,(a0)
		move.l	#loc_72CBE,$34(a0)
		lea	(Player_1).w,a1
		bsr.w	sub_72C8E
		lea	(Player_2).w,a1
		clr.b	$20(a0)

; =============== S U B R O U T I N E =======================================


sub_72C8E:
		move.b	#-$7D,$2E(a1)
		clr.b	$24(a1)
		clr.b	$23(a1)

locret_72C9C:
		rts
; End of function sub_72C8E

; ---------------------------------------------------------------------------

loc_72C9E:
		lea	(Player_1).w,a1
		lea	byte_7386A(pc),a2
		jsr	(Animate_ExternalPlayerSprite).l
		lea	(Player_2).w,a1
		clr.b	$20(a1)
		lea	byte_73874(pc),a2
		jmp	(Animate_ExternalPlayerSprite).l
; ---------------------------------------------------------------------------

loc_72CBE:
		move.l	#loc_72CC6,(a0)
		rts
; ---------------------------------------------------------------------------

loc_72CC6:
		btst	#1,(__u_FA88).w
		beq.s	locret_72CD8
		move.l	#loc_72CDA,(a0)
		st	(ScrEvents_2).w

locret_72CD8:
		rts
; ---------------------------------------------------------------------------

loc_72CDA:
		move.w	(Camera_Y_pos).w,d0
		addi.w	#$120,d0
		cmp.w	(Player_1+y_pos).w,d0
		bhi.w	locret_72B02
		move.w	#$700,d0
		jsr	StartNewLevel.w
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_72CFA:
		lea	(Player_2).w,a1
		btst	#7,$2A(a1)
		bne.s	locret_72D16
		btst	#1,$2A(a1)
		bne.s	locret_72D16
		cmpi.b	#6,5(a1)
		blo.s	loc_72D18

locret_72D16:

		rts
; ---------------------------------------------------------------------------

loc_72D18:
		jsr	(Set_PlayerEndingPose).l
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_72D24:
		move.l	#loc_72D5A,(a0)
		move.w	#$4430,$10(a0)
		move.w	#$728,$14(a0)
		move.w	#$1010,$3A(a0)
		move.w	#$200,d0
		tst.b	$2C(a0)
		beq.s	loc_72D48
		neg.w	d0

loc_72D48:
		move.w	d0,$18(a0)
		move.w	#$41,$2E(a0)
		move.l	#loc_72D78,$34(a0)

loc_72D5A:
		subq.b	#1,$39(a0)
		bpl.s	loc_72D6C
		move.b	#3,$39(a0)
		jsr	(sub_83E84).l

loc_72D6C:
		jsr	MoveSprite2.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_72D78:
		clr.w	$18(a0)
		move.w	#-$200,$1A(a0)
		move.w	#$57,$2E(a0)
		move.l	#loc_72D92,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_72D92:
		lea	Child6_CreateBossExplosion.w,a2
		jsr	CreateChild1_Normal.w
		bne.s	loc_72DB2
		move.w	#$4430,$10(a1)
		move.w	#$678,$14(a1)
		move.b	#$C,$2C(a1)

loc_72DB2:
		tst.b	$2C(a0)
		bne.s	loc_72DE4
		jsr	Create_New_Sprite.w
		bne.s	loc_72DE4
		move.l	#loc_72DEA,(a1)
		move.w	(Camera_X_pos).w,d0
		addi.w	#$D0,d0
		move.w	d0,$10(a1)
		move.w	(Camera_Y_pos).w,d0
		subi.w	#$20,d0
		move.w	d0,$14(a1)
		move.w	#5,$3A(a1)

loc_72DE4:

		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------

loc_72DEA:
		subq.w	#1,$2E(a0)
		bpl.s	locret_72E20
		addq.b	#1,$39(a0)
		cmpi.b	#8,$39(a0)
		bne.s	loc_72E00
		st	(ScrEvents_2).w

loc_72E00:
		cmpi.b	#$18,$39(a0)
		bhs.s	loc_72E22
		move.w	$3A(a0),$2E(a0)
		addq.w	#1,$3A(a0)
		jsr	Create_New_Sprite.w
		bne.s	locret_72E20
		move.l	#loc_72E54,(a1)

locret_72E20:

		rts
; ---------------------------------------------------------------------------

loc_72E22:
		move.l	#loc_72E2E,(a0)
		move.w	#$17F,$2E(a0)

loc_72E2E:
		subq.w	#1,$2E(a0)
		bmi.s	loc_72E36
		rts
; ---------------------------------------------------------------------------

loc_72E36:
		bset	#0,(__u_FA88).w
		clr.b	$39(a0)
		clr.w	$2E(a0)
		lea	ChildObjDat_7380C(pc),a2
		jsr	CreateChild1_Normal.w
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------

loc_72E54:
		lea	ObjDat3_73736(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#MoveChkDel,(a0)
		jsr	Random_Number.w
		andi.w	#7,d0
		move.b	RawAni_72E96(pc,d0.w),$22(a0)
		swap	d0
		andi.w	#$FF,d0
		move.w	(Camera_X_pos).w,d1
		addi.w	#$20,d1
		add.w	d0,d1
		move.w	d1,$10(a0)
		move.w	(Camera_Y_pos).w,d0
		subi.w	#$20,d0
		move.w	d0,$14(a0)
		rts
; ---------------------------------------------------------------------------
RawAni_72E96:	dc.b	7,   8,	  9,  $A,  $B,	 7,   8,   9
; ---------------------------------------------------------------------------

loc_72E9E:

		lea	ObjDat3_73742(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_72EF8,(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		beq.s	loc_72EBC
		move.l	#loc_72F40,(a0)

loc_72EBC:
		move.w	word_72EE8(pc,d0.w),$1A(a0)
		lea	byte_72EDA(pc,d0.w),a1
		move.b	(a1)+,$22(a0)
		move.b	(a1)+,d0
		or.b	d0,4(a0)
		lea	Pal_LBZEnding(pc),a1
		jmp	PalLoad_Line1.w
; ---------------------------------------------------------------------------
byte_72EDA:	dc.b	0,   0
		dc.b	1,   0
		dc.b	1,   0
		dc.b	2,   0
		dc.b	2,   1
		dc.b	2,   2
		dc.b	2,   3
word_72EE8:	dc.w $40
		dc.w $38
		dc.w $3C
		dc.w $40
		dc.w $44
		dc.w $48
		dc.w $4C
		dc.w $50
; ---------------------------------------------------------------------------

loc_72EF8:
		move.b	(V_int_run_count+3).w,d0
		andi.b	#$F,d0
		bne.s	loc_72F2C
		lea	ChildObjDat_73838(pc),a2
		jsr	CreateChild6_Simple.w
		jsr	Random_Number.w
		andi.w	#$1F,d0
		subi.w	#$10,d0
		add.w	d0,$10(a1)
		swap	d0
		andi.w	#$1F,d0
		subi.w	#$10,d0
		add.w	d0,$14(a1)

loc_72F2C:
		move.w	(Camera_Y_pos).w,d0
		addi.w	#$80,d0
		cmp.w	$14(a0),d0
		bhs.s	loc_72F40
		bset	#1,(__u_FA88).w

loc_72F40:

		jsr	MoveSprite2.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_72F4C:
		lea	ObjDat3_7374E(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_72F7A,(a0)
		move.w	#-$40,$1A(a0)
		move.w	#$7F,$2E(a0)
		move.l	#Go_Delete_Sprite,$34(a0)
		lea	ChildObjDat_7383E(pc),a2
		jsr	CreateChild6_Simple.w

loc_72F7A:
		move.b	(V_int_run_count+3).w,d0
		andi.b	#3,d0
		bne.s	loc_72FA0
		move.b	$39(a0),d0
		addq.b	#1,d0
		move.b	d0,$39(a0)
		andi.b	#3,d0
		move.b	4(a0),d1
		andi.b	#-4,d1
		or.b	d0,d1
		move.b	d1,4(a0)

loc_72FA0:
		jsr	MoveSprite2.w
		jsr	Obj_Wait.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_72FB2:
		lea	ObjDat3_7375A(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_72FD8,(a0)
		move.l	#byte_73864,$30(a0)
		move.l	#Go_Delete_Sprite,$34(a0)
		move.w	#$40,$1A(a0)

loc_72FD8:
		jsr	Animate_Raw.w
		jsr	MoveSprite2.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
word_72FEA:	dc.w	  0,  $428, $4280, $4380
		dc.w   $328,  $328, $4300, $4300
; ---------------------------------------------------------------------------

Obj_CD_1_LBZ2_TallBoss:
		lea	word_72FEA(pc),a1
		jsr	(Check_CameraInRange).l
		clr.b	$26(a0)		; NAT: Disable boss music
		jsr	sub_85D6A.w
		move.l	#loc_73046,(a0)
		move.l	#loc_7304C,$34(a0)
		clr.b	(__u_FAA2).w
		clr.b	(__u_FAA3).w
		moveq	#$71,d0
		jsr	Load_PLC.w

; =============== S U B R O U T I N E =======================================


sub_7302E:
		lea	PLC_73038(pc),a1
		jmp	Load_PLC_Raw.w
; End of function sub_7302E

; ---------------------------------------------------------------------------
PLC_73038:	dc.w 1
		dc.l ArtNem_RobotnikShip
		dc.w $A5C0
		dc.l ArtNem_BossExplosion
		dc.w $A000
; ---------------------------------------------------------------------------

loc_73046:
		jmp	loc_85CA4.w
; ---------------------------------------------------------------------------

loc_7304C:
		move.l	#Obj_LBZ_FinalBoss1,(a0)
		rts
; ---------------------------------------------------------------------------

loc_73054:
		move.w	$14(a0),d0
		subq.w	#1,d0
		move.w	(Camera_Y_pos).w,d1
		subi.w	#$50,d1
		cmp.w	d1,d0
		blo.s	loc_73070
		move.w	d0,$14(a0)
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_73070:
		move.w	d1,$14(a0)
		bset	#5,$38(a0)
		jsr	Create_New_Sprite.w
		bne.s	loc_73088
		move.l	#Obj_LBZ_FinalBoss2,(a1)

loc_73088:
		jmp	Go_Delete_Sprite_2.w
; ---------------------------------------------------------------------------

loc_7308E:

		lea	ObjDat3_736D8(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_730B0,(a0)
		move.l	#loc_730B0,$34(a0)
		lea	ChildObjDat_737BA(pc),a2
		jmp	CreateChild3_NormalRepeated.w
; ---------------------------------------------------------------------------

loc_730B0:

		jsr	Refresh_ChildPositionAdjusted.w
		bsr.w	sub_7361E
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------

loc_730C0:
		movea.w	$46(a0),a1
		btst	#6,$2A(a1)
		bne.s	loc_730EC
		move.l	$34(a0),(a0)
		btst	#5,$2A(a1)
		beq.s	loc_730EC
		subi.b	#$28,$43(a0)
		cmpi.b	#4,$2C(a0)
		bne.s	loc_730EC
		bclr	#5,$2A(a1)

loc_730EC:

		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------

loc_730F2:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_730F8:
		move.w	#1,$3C(a0)
		bra.s	loc_7308E
; ---------------------------------------------------------------------------

loc_73100:
		lea	ObjDat3_736E4(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_73128,(a0)
		move.l	#loc_73128,$34(a0)
		move.w	#2,$3C(a0)
		lea	ChildObjDat_737DA(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_73128:

		jsr	Refresh_ChildPositionAdjusted.w
		bsr.w	sub_7361E
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------

loc_73138:

		lea	word_736F8(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_73152,(a0)
		move.w	#$60,$2E(a0)
		bsr.w	sub_73682

loc_73152:
		jsr	MoveSprite.w
		jsr	(TimedSprite_ScreenLock).l
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_73164:
		move.l	#loc_73174,(a0)
		lea	ObjDat3_7371E(pc),a1
		jmp	SetUp_ObjAttributes.w
; ---------------------------------------------------------------------------

loc_73174:
		movea.w	$46(a0),a1
		btst	#7,$2A(a1)
		bne.s	loc_7318C
		jsr	Refresh_ChildPositionAdjusted.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_7318C:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_73192:

		lea	ObjDat3_7372A(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_731B0,(a0)
		tst.b	$2C(a0)
		beq.s	locret_731AE
		move.b	#$22,$22(a0)

locret_731AE:
		rts
; ---------------------------------------------------------------------------

loc_731B0:
		movea.w	$46(a0),a1
		btst	#6,$2A(a1)
		beq.s	loc_731C8
		jsr	Refresh_ChildPositionAdjusted.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_731C8:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_731CE:
		lea	word_736FE(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_731F4,(a0)
		movea.w	$46(a0),a1
		move.w	$46(a1),$44(a0)
		tst.b	$2C(a0)
		beq.s	loc_731F4
		move.b	#8,$39(a0)

loc_731F4:

		bsr.w	sub_733FC
		moveq	#4,d0
		jmp	Child_Draw_Sprite_FlickerMove.w
; ---------------------------------------------------------------------------
		movea.w	$44(a0),a1
		btst	#6,$2A(a1)
		bne.s	loc_73212
		move.l	#loc_731F4,(a0)

loc_73212:
		moveq	#4,d0
		jmp	Child_Draw_Sprite_FlickerMove.w
; ---------------------------------------------------------------------------

loc_7321A:

		lea	word_73704(pc),a1
		jsr	SetUp_ObjAttributes2.w
		move.l	#loc_73232,(a0)
		move.w	#8,$3A(a0)
		rts
; ---------------------------------------------------------------------------

loc_73232:
		movea.w	$46(a0),a1
		btst	#7,$2A(a1)
		bne.s	loc_7326A
		jsr	Refresh_ChildPositionAdjusted.w
		subq.w	#1,$2E(a0)
		bpl.w	locret_72B02
		move.w	$3A(a0),$2E(a0)
		subq.w	#1,$3A(a0)
		bpl.s	loc_73264
		move.l	#loc_73270,(a0)
		move.w	#$18,$2E(a0)

loc_73264:
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_7326A:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_73270:
		jsr	Refresh_ChildPositionAdjusted.w
		subq.w	#1,$2E(a0)
		bmi.s	loc_7328C
		btst	#0,$2F(a0)
		bne.w	locret_72B02
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_7328C:
		move.l	#loc_732A8,(a0)
		move.l	#byte_73849,$30(a0)
		move.l	#loc_732BA,$34(a0)
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_732A8:
		jsr	Refresh_ChildPositionAdjusted.w
		jsr	Animate_Raw.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_732BA:
		move.l	#loc_732F6,(a0)
		tst.b	4(a0)
		bpl.s	loc_732CE
		moveq	#$5E,d0
		jsr	Play_Sound_2.w

loc_732CE:
		move.b	#-$64,$28(a0)
		move.b	#$11,$22(a0)
		moveq	#-$2C,d0
		move.w	#-$800,d1
		btst	#0,4(a0)
		beq.s	loc_732EC
		neg.w	d0
		neg.w	d1

loc_732EC:
		add.w	d0,$10(a0)
		move.w	d1,$18(a0)
		rts
; ---------------------------------------------------------------------------

loc_732F6:
		btst	#0,(V_int_run_count+3).w
		bne.s	loc_73318
		lea	ChildObjDat_737D2(pc),a2
		jsr	CreateChild1_Normal.w
		move.l	#byte_73851,$30(a1)
		bsr.w	sub_734E4
		bra.w	loc_7332E
; ---------------------------------------------------------------------------

loc_73318:
		lea	ChildObjDat_737D2(pc),a2
		jsr	CreateChild1_Normal.w
		move.l	#byte_73857,$30(a1)
		bsr.w	sub_734E4

loc_7332E:
		jsr	MoveSprite2.w
		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------

loc_7333A:
		lea	word_7370C(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_73358,(a0)
		move.l	#Go_Delete_Sprite,$34(a0)
		jsr	Refresh_ChildPositionAdjusted.w

loc_73358:
		jsr	Animate_Raw.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_73364:

		lea	word_736F0(pc),a1
		jsr	SetUp_ObjAttributes2.w
		bset	#4,$2B(a0)
		move.l	#loc_73384,(a0)
		move.l	#byte_73844,$30(a0)
		rts
; ---------------------------------------------------------------------------

loc_73384:
		jsr	Refresh_ChildPositionAdjusted.w
		jsr	Animate_Raw.w
		jmp	Child_DrawTouch_Sprite.w
; ---------------------------------------------------------------------------

loc_73396:
		lea	ObjDat3_73712(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_733CA,(a0)
		move.l	#byte_7385D,$30(a0)
		move.l	#loc_733E2,$34(a0)
		move.b	#-$14,$43(a0)
		tst.b	$2C(a0)
		beq.s	locret_733C8
		move.b	#-$80,$3C(a0)

locret_733C8:
		rts
; ---------------------------------------------------------------------------

loc_733CA:
		jsr	Animate_Raw.w
		addq.b	#1,$3C(a0)
		moveq	#3,d2
		jsr	(MoveSprite_CircularSimpleOffset).l
		jmp	Child_DrawTouch_Sprite.w
; ---------------------------------------------------------------------------

loc_733E2:
		move.b	$39(a0),d0
		addq.b	#1,d0
		move.b	d0,$39(a0)
		andi.b	#3,d0
		andi.b	#-4,4(a0)
		or.b	d0,4(a0)
		rts

; =============== S U B R O U T I N E =======================================


sub_733FC:
		moveq	#0,d0
		move.b	$39(a0),d0
		subq.w	#1,$2E(a0)
		bmi.s	loc_7340E
		add.w	d0,d0
		bra.w	loc_73484
; ---------------------------------------------------------------------------

loc_7340E:
		movea.w	$44(a0),a1
		btst	#0,4(a1)
		sne	d2
		beq.s	loc_73426
		subq.b	#1,d0
		bpl.s	loc_73430
		moveq	#$B,d0
		bra.w	loc_73430
; ---------------------------------------------------------------------------

loc_73426:
		addq.b	#1,d0
		cmpi.b	#$C,d0
		blo.s	loc_73430
		moveq	#0,d0

loc_73430:

		move.b	d0,$39(a0)
		lea	byte_734AA(pc),a2
		move.b	(a2,d0.w),d1
		bset	#0,4(a0)
		bclr	#7,d1
		bne.s	loc_73450
		bclr	#0,4(a0)
		not.b	d2

loc_73450:
		bclr	#3,$38(a1)
		cmpi.b	#4,d1
		bne.s	loc_73478
		bset	#3,$38(a1)
		tst.b	d2
		beq.s	loc_73478
		movem.l	d0-d1,-(sp)
		lea	ChildObjDat_737C2(pc),a2
		jsr	CreateChild1_Normal.w
		movem.l	(sp)+,d0-d1

loc_73478:

		move.b	d1,$22(a0)
		add.w	d0,d0
		move.w	word_734B6(pc,d0.w),$2E(a0)

loc_73484:
		lea	byte_734CE(pc,d0.w),a1
		movea.w	$46(a0),a2
		move.b	(a1)+,d1
		ext.w	d1
		move.w	$10(a2),d2
		add.w	d1,d2
		move.w	d2,$10(a0)
		move.b	(a1)+,d1

		ext.w	d1
		move.w	$14(a2),d2
		add.w	d1,d2
		move.w	d2,$14(a0)
		rts
; End of function sub_733FC

; ---------------------------------------------------------------------------
byte_734AA:	dc.b $83
		dc.b $84
		dc.b $85
		dc.b $86
		dc.b $87
		dc.b $88
		dc.b 7
		dc.b 6
		dc.b 5
		dc.b 4
		dc.b 3
		dc.b $2D
word_734B6:	dc.w 7
		dc.w $5F
		dc.w 7
		dc.w 7
		dc.w 7
		dc.w 7
		dc.w 7
		dc.w 7
		dc.w 7
		dc.w $5F
		dc.w 7
		dc.w $27
byte_734CE:	dc.b  $27, $F8
		dc.b  $24, $F8
		dc.b  $24, $F8
		dc.b  $14, $F8
		dc.b   $C, $F8
		dc.b	0, $F8
		dc.b  $F4, $F8
		dc.b  $EC, $F8
		dc.b  $DC, $F8
		dc.b  $DC, $F8
		dc.b  $D9, $F8

; =============== S U B R O U T I N E =======================================


sub_734E4:

		jsr	Random_Number.w
		swap	d0
		andi.b	#7,d0
		addi.b	#$18,d0
		move.b	d0,$42(a1)
		rts
; End of function sub_734E4


; =============== S U B R O U T I N E =======================================


sub_734FA:
		tst.b	$28(a0)
		bne.w	locret_735B4
		tst.b	$29(a0)
		beq.w	loc_735B6
		tst.b	$20(a0)
		bne.s	loc_73584
		move.b	5(a0),$3A(a0)
		move.b	#6,5(a0)
		move.b	#$20,$20(a0)
		bset	#6,$2A(a0)
		moveq	#$6E,d0
		jsr	Play_Sound_2.w
		move.w	$1A(a0),d0
		asl.w	#1,d0
		cmpi.w	#-$800,d0
		blt.s	loc_73546
		cmpi.w	#$800,d0
		bgt.s	loc_73546
		move.w	d0,$1A(a0)

loc_73546:

		cmpi.b	#5,$29(a0)
		beq.s	loc_7355C
		cmpi.b	#1,$29(a0)
		bne.s	loc_73584
		bset	#3,$38(a0)

loc_7355C:
		move.w	$3C(a0),d0
		bset	d0,$38(a0)
		addq.w	#1,$3C(a0)
		move.b	#8,5(a0)
		move.b	#$F,$40(a0)
		bset	#5,$2A(a0)
		lea	ChildObjDat_737F8(pc),a2
		jsr	CreateChild1_Normal.w

loc_73584:

		moveq	#0,d0
		btst	#0,$20(a0)
		bne.s	loc_73592
		addi.w	#4,d0

loc_73592:
		bsr.w	sub_73604
		subq.b	#1,$20(a0)
		bne.s	locret_735B4
		move.b	$3A(a0),5(a0)
		move.w	#$EEE,(Normal_palette_line_2+$2).w
		move.b	$25(a0),$28(a0)
		bclr	#6,$2A(a0)

locret_735B4:

		rts
; ---------------------------------------------------------------------------

loc_735B6:
		jsr	BossDefeated.w
		move.b	#5,$22(a0)
		bset	#6,$2A(a0)
		bset	#7,$2A(a0)
		clr.b	$28(a0)
		move.w	$3C(a0),d0
		bset	d0,$38(a0)
		lea	Child6_CreateBossExplosion.w,a2
		jsr	CreateChild1_Normal.w
		move.b	#4,$2C(a1)
		cmpi.b	#2,(Player_1+character_id).w
		beq.s	loc_735FC
		move.l	#loc_72B18,(a0)
		rts
; ---------------------------------------------------------------------------

loc_735FC:
		move.l	#loc_73054,(a0)
		rts
; End of function sub_734FA


; =============== S U B R O U T I N E =======================================


sub_73604:
		lea	word_73612(pc),a1
		lea	word_73616(pc,d0.w),a2
		jmp	CopyWordData_2.w
; End of function sub_73604

; ---------------------------------------------------------------------------
word_73612:	dc.w $FC28
		dc.w $FC3C
word_73616:	dc.w $26
		dc.w $20
		dc.w $EEE
		dc.w $EEE

; =============== S U B R O U T I N E =======================================


sub_7361E:

		movea.w	$46(a0),a1
		move.w	$3C(a0),d0
		btst	d0,$38(a1)
		beq.s	loc_73672
		move.l	#byte_736C2,$3E(a0)
		bset	#7,$2A(a0)
		lea	(ChildObjDat_7377A).l,a2
		cmpi.w	#2,d0
		bne.s	loc_73654
		move.l	#byte_736C6,$3E(a0)
		lea	(ChildObjDat_73794).l,a2

loc_73654:
		move.w	#$10,$2E(a0)
		move.l	#loc_730F2,(a0)
		jsr	CreateChild1_Normal.w
		lea	Child6_CreateBossExplosion.w,a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_73672:
		btst	#6,$2A(a1)
		beq.s	locret_73680
		move.l	#loc_730C0,(a0)

locret_73680:
		rts
; End of function sub_7361E


; =============== S U B R O U T I N E =======================================


sub_73682:
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	d0,d1
		lsr.w	#1,d1
		movea.w	$46(a0),a1
		movea.l	$3E(a1),a1
		move.b	(a1,d1.w),$22(a0)
		add.w	d0,d0
		lea	word_736AA(pc,d0.w),a1
		move.w	(a1)+,$18(a0)
		move.w	(a1)+,$1A(a0)
		rts
; End of function sub_73682

; ---------------------------------------------------------------------------
word_736AA:	dc.w  $FF00, $FE00
		dc.w   $100, $FE00
		dc.w  $FE00, $FF00
		dc.w   $200, $FF00
		dc.w  $FD00, $FD00
		dc.w   $300, $FD00
byte_736C2:	dc.b $23
		dc.b $25
		dc.b $24
		dc.b $26
byte_736C6:	dc.b $27
		dc.b $29
		dc.b $28
		dc.b $2A
		dc.b $2B
		dc.b $2C
ObjDat3_736CC:	dc.l Map_RobotnikShip
		dc.w $852E
		dc.w prio(5)
		dc.b $20
		dc.b $20
		dc.b $C
		dc.b $F
ObjDat3_736D8:	dc.l Map_LBZFinalBoss1
		dc.w $A3AA
		dc.w prio(5)
		dc.b $20
		dc.b $14
		dc.b 0
		dc.b $AD
ObjDat3_736E4:	dc.l Map_LBZFinalBoss1
		dc.w $A3AA
		dc.w prio(4)
		dc.b $28
		dc.b $18
		dc.b 1
		dc.b $AD
word_736F0:	dc.w $83AA
		dc.w prio(5)
		dc.b $C
		dc.b $18
		dc.b 9
		dc.b $89
word_736F8:	dc.w prio(4)
		dc.b $10
		dc.b $10
		dc.b $2A
		dc.b 0
word_736FE:	dc.w prio(3)
		dc.b $C
		dc.b $C
		dc.b 3
		dc.b 0
word_73704:	dc.w $83AA
		dc.w prio(2)
		dc.b $18
		dc.b 8
		dc.b $F
		dc.b 0
word_7370C:	dc.w prio(2)
		dc.b 8
		dc.b 8
		dc.b $1C
		dc.b 0
ObjDat3_73712:	dc.l Map_LBZFinalBoss1
		dc.w $A3AA
		dc.w prio(6)
		dc.b $C
		dc.b $C
		dc.b $C
		dc.b $97
ObjDat3_7371E:	dc.l Map_LBZFinalBoss1
		dc.w $A3AA
		dc.w prio(5)
		dc.b $28
		dc.b 8
		dc.b 2
		dc.b 0
ObjDat3_7372A:	dc.l Map_LBZFinalBoss1
		dc.w $A3AA
		dc.w prio(5)
		dc.b $10
		dc.b $C
		dc.b $10
		dc.b 0
ObjDat3_73736:	dc.l Map_LBZDeathEggSmall
		dc.w $44AE
		dc.w prio(6)
		dc.b $C
		dc.b $C
		dc.b 7
		dc.b 0
ObjDat3_73742:	dc.l Map_LBZDeathEggSmall
		dc.w $24AE
		dc.w prio(7)
		dc.b $18
		dc.b $18
		dc.b 0
		dc.b 0
ObjDat3_7374E:	dc.l Map_LBZDeathEggSmall
		dc.w $24AE
		dc.w prio(6)
		dc.b 4
		dc.b 4
		dc.b 3
		dc.b 0
ObjDat3_7375A:	dc.l Map_LBZDeathEggSmall
		dc.w $24AE
		dc.w prio(6)
		dc.b 4
		dc.b 4
		dc.b 4
		dc.b 0
ChildObjDat_73766:dc.w 2
		dc.l loc_7308E
		dc.w 8
		dc.l loc_730F8
		dc.w $30
		dc.l loc_73100
		dc.w $5C
ChildObjDat_7377A:dc.w 3
		dc.l loc_73138
		dc.w $F0FC
		dc.l loc_73138
		dc.w $10FC
		dc.l loc_73138
		dc.w $F010
		dc.l loc_73138
		dc.w $1010
ChildObjDat_73794:dc.w 5
		dc.l loc_73138
		dc.w $F0F8
		dc.l loc_73138
		dc.w $10F8
		dc.l loc_73138
		dc.w $F010
		dc.l loc_73138
		dc.w $1010
		dc.l loc_73138
		dc.w $ECE0
		dc.l loc_73138
		dc.w $14E0
ChildObjDat_737BA:dc.w 1
		dc.l loc_731CE
		dc.w 0
ChildObjDat_737C2:dc.w 0
		dc.l loc_7321A
		dc.w $F800
		dc.w 0
		dc.l loc_7321A
		dc.w $800
ChildObjDat_737D2:dc.w 0

		dc.l loc_7333A
		dc.w $2000
ChildObjDat_737DA:dc.w 1
		dc.l loc_73364
		dc.w $EC30
		dc.l loc_73364
		dc.w $1430
ChildObjDat_737E8:dc.w 0
		dc.l loc_73396
		dc.w 0
ChildObjDat_737F0:dc.w 0
		dc.l loc_73164
		dc.w $EC
ChildObjDat_737F8:dc.w	  1
		dc.l loc_73192
		dc.w $F000
		dc.l loc_73192
		dc.w $1000
ChildObjDat_73806:dc.w 1
		dc.l loc_72D24
ChildObjDat_7380C:dc.w 6
		dc.l loc_72E9E
		dc.w 0
		dc.l loc_72E9E
		dc.w $F028
		dc.l loc_72E9E
		dc.w $9000
		dc.l loc_72E9E
		dc.w $B828
		dc.l loc_72E9E
		dc.w $1810
		dc.l loc_72E9E
		dc.w $DCF8
		dc.l loc_72E9E
		dc.w $B01C
ChildObjDat_73838:dc.w 0
		dc.l loc_72F4C
ChildObjDat_7383E:dc.w 0
		dc.l loc_72FB2
byte_73844:	dc.b	2,   9
		dc.b   $A,  $B
		dc.b  $FC
byte_73849:	dc.b 0
		dc.b $17
		dc.b $17
		dc.b $18
		dc.b $19
		dc.b $1A
		dc.b $1B
		dc.b $F4
byte_73851:	dc.b 0
		dc.b $1C
		dc.b $1C
		dc.b $1D
		dc.b $1E
		dc.b $F4
byte_73857:	dc.b 0
		dc.b $1F
		dc.b $1F
		dc.b $20
		dc.b $21
		dc.b $F4
byte_7385D:	dc.b	1,  $C
		dc.b   $D,  $E
		dc.b   $D,  $C
		dc.b  $F4
byte_73864:	dc.b 2
		dc.b 4
		dc.b 4
		dc.b 5
		dc.b 6
		dc.b $F4
byte_7386A:	dc.b 5,	$C4
		dc.b 0,	$55
		dc.b 0,	$59
		dc.b 1,	$5A
		dc.b 1,	0
byte_73874:	dc.b	5, $C4
		dc.b	0, $55
		dc.b	0, $59
		dc.b	1, $5A
		dc.b	1, $5A
		dc.b	1, $5A
		dc.b	1, $5A
		dc.b	1, $5A
		dc.b	1,   0
Pal_LBZFinalBoss1:	binclude "Levels/LBZ/Palettes/Final Boss 1.bin"
	even

Pal_LBZEnding:;	binclude "Levels/LBZ/Palettes/Ending.bin"
	even

word_738C6:	dc.w   $460,  $6A0, $3900, $3B20
word_738CE:	dc.w   $5A0,  $5A0, $3A20, $3A20
; ---------------------------------------------------------------------------

Obj_LBZ_EndBoss:
		lea	word_738C6(pc),a1
		jsr	(Check_CameraInRange).l
		btst	#5,OptionsBits.w		; NAT: Check if bosses are on
		bne.s	.enabled			; if are, branch

		lea	.screen(pc),a1			; else, lock screen
		jmp	Boss_Force_End_2		;

.screen		dc.w $3A00, $3A00, $5A0, $5A0

.enabled	st	BossHitMode.w			; NAT: Enable hit mode
		clr.w	BossHitsP1.w			; clear hits count
		move.l	#.ok,(a0)			; set new obj

.ok		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_738F8(pc,d0.w),d1
		jsr	off_738F8(pc,d1.w)

		lea	Player_1+x_pos.w,a1		; NAT: Get player 1 x-pos to a1
		bsr.s	Obj_LBZEB_FixPos		; fix position
		lea	Player_2+x_pos.w,a1		; NAT: Get player 2 x-pos to a1
		bsr.s	Obj_LBZEB_FixPos		; fix position

		bsr.w	sub_73FE2
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------
off_738F8:	dc.w loc_73906-off_738F8

		dc.w loc_7395A-off_738F8
		dc.w loc_7397A-off_738F8
		dc.w loc_7399E-off_738F8
		dc.w loc_739E6-off_738F8
		dc.w loc_73A1A-off_738F8
		dc.w loc_73A48-off_738F8
; ---------------------------------------------------------------------------

Obj_LBZEB_FixPos:
		cmp.w	#$3AE8,(a1)			; NAT: Check if we are beyond the boss
		blt.s	.nope				; branc if not
		move.w	#$3AD4,(a1)			; move player back
		clr.w	$08(a1)				; clear x_vel
		clr.w	$0C(a1)				; clear inertia
.nope		rts
; ---------------------------------------------------------------------------

loc_73906:
		lea	ObjDat3_740EC(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.b	#8,$29(a0)
		move.l	#loc_73960,$34(a0)
		lea	word_738CE(pc),a1
		move.b	#Mus_Boss,$26(a0)
		jsr	sub_85D6A.w
		lea	ChildObjDat_7414C(pc),a2
		jsr	CreateChild1_Normal.w
		moveq	#$77,d0
		jsr	Load_PLC.w
		lea	(ArtKosM_LBZEndBoss).l,a1
		move.w	#$425*32,d2
		jsr	Queue_Kos_Module.w
		lea	Pal_LBZEndBoss(pc),a1
		jmp	PalLoad_Line1.w
; ---------------------------------------------------------------------------

loc_7395A:
		jmp	loc_85CA4.w
; ---------------------------------------------------------------------------

loc_73960:
		move.b	#4,5(a0)
		lea	ChildObjDat_7418A(pc),a2
		jsr	CreateChild4_LinkListRepeated.w
		lea	ChildObjDat_7415A(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_7397A:
		btst	#7,$38(a0)
		bne.s	loc_73984
		rts
; ---------------------------------------------------------------------------

loc_73984:
		move.b	#6,5(a0)
		move.b	#1,(Scroll_lock).w
		move.w	#$39F0,d0
		move.w	d0,(Camera_min_X_pos).w
		move.w	d0,(Camera_max_X_pos).w

locret_7399C:

		rts
; ---------------------------------------------------------------------------

loc_7399E:
		move.w	#$39F0,d0
		move.w	(Camera_X_pos).w,d1
		subq.w	#2,d1
		cmp.w	d0,d1
		bls.s	loc_739B2
		move.w	d1,(Camera_X_pos).w
		rts
; ---------------------------------------------------------------------------

loc_739B2:
		move.w	d0,(Camera_X_pos).w
		move.b	#8,5(a0)
		clr.b	(Scroll_lock).w
		moveq	#-$30,d0
		jsr	Play_Sound_2.w
		move.w	#-$40,$1A(a0)
		move.w	#$DF,$2E(a0)
		move.l	#loc_739F2,$34(a0)
		lea	ChildObjDat_74162(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_739E6:
		jsr	MoveSprite2.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_739F2:
		bset	#2,$38(a0)
		move.b	#$F,$28(a0)
		bset	#3,$38(a0)

loc_73A04:
		clr.w	PlayerSpawn.w			; NAT: enable respawn
		move.b	#$A,5(a0)
		move.w	#7,$2E(a0)
		move.l	#loc_73A20,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_73A1A:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_73A20:
		bset	#1,$38(a0)
		move.w	#$3F,$2E(a0)
		move.l	#loc_73A36,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_73A36:
		st	PlayerSpawn.w			; NAT: disable respawn
		move.b	#$C,5(a0)
		moveq	#-$7F,d0
		jsr	Play_Sound_2.w
		bra.w	loc_73F1C
; ---------------------------------------------------------------------------

loc_73A48:
		btst	#1,$38(a0)
		beq.s	loc_73A04
		rts
; ---------------------------------------------------------------------------

loc_73A52:
		addi.w	#$20,$1A(a0)
		jsr	MoveSprite2.w
		jsr	Obj_Wait.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_73A6A:
		moveq	#2,d0		; NAT: Reload just the explosion graphics
		jsr	Load_PLC.w

		bset	#5,$38(a0)
		bclr	#7,4(a0)
		clr.b	(Boss_flag).w
		jsr	Obj_PlayLevelMusic.w
	;	lea	(Player_2).w,a1
	;	bclr	#4,$2A(a1)
	;	move.l	#Go_Delete_Sprite_2,(a0)
	;	rts

		move.w	#$3A90,$10(a0)			; NAT: Create sign instead
		jmp	Obj_EndSignControl_HitHUD	;
; ---------------------------------------------------------------------------

loc_73A92:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_73AC4(pc,d0.w),d1
		jsr	off_73AC4(pc,d1.w)
		jsr	Animate_Raw.w
		btst	#7,$2A(a0)
		bne.s	loc_73ABE
		movea.w	$46(a0),a1
		btst	#7,$2A(a1)
		beq.s	loc_73ABE
		bsr.w	sub_73B82

loc_73ABE:

		jmp	Child_DrawTouch_Sprite.w
; ---------------------------------------------------------------------------
off_73AC4:	dc.w loc_73ACC-off_73AC4

		dc.w loc_73AF6-off_73AC4
		dc.w loc_73B12-off_73AC4
		dc.w loc_73B3C-off_73AC4
; ---------------------------------------------------------------------------

loc_73ACC:
		lea	word_7412A(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#byte_741F4,$30(a0)
		move.b	#$10,$1E(a0)
		move.w	#$F,$2E(a0)
		move.l	#loc_73B02,$34(a0)
		bra.w	loc_73F42
; ---------------------------------------------------------------------------

loc_73AF6:
		jsr	MoveSprite2.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_73B02:
		move.b	#4,5(a0)
		move.l	#loc_73B24,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_73B12:
		addi.w	#$20,$1A(a0)
		jsr	MoveSprite2.w
		jmp	ObjHitFloor_DoRoutine.w
; ---------------------------------------------------------------------------

loc_73B24:
		move.b	#6,5(a0)
		move.l	#sub_73B82,$34(a0)
		move.w	$26(a0),d0
		clr.w	$1A(a0)
		rts
; ---------------------------------------------------------------------------

loc_73B3C:
		move.w	#$10,d3
		jsr	ObjHitWall_DoRoutine.w
		jsr	ObjHitFloor2_DoRoutine.w
		tst.b	d3
		beq.s	loc_73B56
		addi.w	#$10,$18(a0)

loc_73B56:
		jsr	MoveSprite2.w
		move.w	$18(a0),d0
		addi.w	#$200,d0
		cmpi.w	#$400,d0
		blo.w	locret_7399C
		move.w	(V_int_run_count+$2).w,d0
		andi.w	#3,d0
		bne.w	locret_7399C
		lea	ChildObjDat_74198(pc),a2
		jmp	CreateChild1_Normal.w

; =============== S U B R O U T I N E =======================================


sub_73B82:

		move.l	#Delete_Current_Sprite,(a0)
		bset	#7,$2A(a0)
		moveq	#$6E,d0
		jsr	Play_Sound_2.w
		lea	ChildObjDat_741A0(pc),a2
		jmp	CreateChild1_Normal.w
; End of function sub_73B82

; ---------------------------------------------------------------------------

loc_73BA0:

		lea	word_74130(pc),a1
		jsr	SetUp_ObjAttributes2.w
		move.l	#loc_73BDC,(a0)
		move.l	#byte_741F8,$30(a0)
		move.l	#Go_Delete_Sprite,$34(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		bne.s	loc_73BD0
		move.w	#-$200,$1A(a0)
		rts
; ---------------------------------------------------------------------------

loc_73BD0:
		subi.w	#$10,d0
		add.w	d0,d0
		neg.w	d0
		move.w	d0,$2E(a0)

loc_73BDC:
		addq.w	#1,$2E(a0)
		bmi.w	locret_7399C
		jsr	MoveSprite2.w
		jsr	Animate_Raw.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_73BF6:

		lea	word_74138(pc),a1
		jsr	SetUp_ObjAttributes2.w
		move.l	#Obj_FlickerMove,(a0)
		bra.w	loc_73F7C
; ---------------------------------------------------------------------------

loc_73C0A:

		jsr	Refresh_ChildPositionAdjusted.w
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_73C24(pc,d0.w),d1
		jsr	off_73C24(pc,d1.w)
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------
off_73C24:	dc.w loc_73C2A-off_73C24

		dc.w loc_73C44-off_73C24
		dc.w loc_73C6A-off_73C24
; ---------------------------------------------------------------------------

loc_73C2A:
		lea	word_7411C(pc),a1
		jsr	SetUp_ObjAttributes3.w
		moveq	#0,d0
		move.b	$2C(a0),d0
		lsr.w	#1,d0
		addq.w	#2,d0
		move.b	d0,$22(a0)
		rts
; ---------------------------------------------------------------------------

loc_73C44:
		movea.w	$46(a0),a1
		btst	#2,$38(a1)
		beq.s	loc_73C58
		move.b	#4,5(a0)
		rts
; ---------------------------------------------------------------------------

loc_73C58:
		move.w	$2E(a0),d0
		addq.w	#1,$2E(a0)
		andi.w	#3,d0
		sub.w	d0,$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_73C6A:
		movea.w	$46(a0),a1
		btst	#7,$2A(a1)
		bne.s	loc_73C78
		rts
; ---------------------------------------------------------------------------

loc_73C78:
		lea	ChildObjDat_74176(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_73C82:

		lea	word_74122(pc),a1
		jsr	SetUp_ObjAttributes2.w
		move.l	#Obj_FlickerMove,(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	word_73CAA(pc,d0.w),$18(a0)
		move.w	#-$200,$1A(a0)
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
word_73CAA:	dc.w $FF00
		dc.w $200
		dc.w $FE00
; ---------------------------------------------------------------------------

loc_73CB0:
		movea.w	$46(a0),a1
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_73CCE(pc,d0.w),d1
		jsr	off_73CCE(pc,d1.w)
		lea	locret_7399C(pc),a2
		bsr.w	sub_73FCE
		bra.w	loc_74098
; ---------------------------------------------------------------------------
off_73CCE:	dc.w loc_73CD8-off_73CCE

		dc.w loc_73CFC-off_73CCE
		dc.w loc_73D0E-off_73CCE
		dc.w loc_73D32-off_73CCE
		dc.w loc_73D40-off_73CCE
; ---------------------------------------------------------------------------

loc_73CD8:
		lea	ObjDat3_74140(pc),a1
		jsr	SetUp_ObjAttributes.w
		subi.w	#$14,$10(a0)
		addi.w	#$40,$14(a0)
		tst.b	$2C(a0)
		beq.s	locret_73CFA
		move.l	#loc_73D56,(a0)

locret_73CFA:
		rts
; ---------------------------------------------------------------------------

loc_73CFC:
		btst	#1,$38(a1)
		bne.s	loc_73D06
		rts
; ---------------------------------------------------------------------------

loc_73D06:
		move.b	#4,5(a0)
		rts
; ---------------------------------------------------------------------------

loc_73D0E:
		subq.b	#1,$3C(a0)
		cmpi.b	#-$40,$3C(a0)
		bls.s	loc_73D1C
		rts
; ---------------------------------------------------------------------------

loc_73D1C:
		move.b	#6,5(a0)
		move.w	#$80,$2E(a0)
		move.l	#loc_73D38,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_73D32:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_73D38:
		move.b	#8,5(a0)
		rts
; ---------------------------------------------------------------------------

loc_73D40:
		addq.b	#1,$3C(a0)
		beq.s	loc_73D48
		rts
; ---------------------------------------------------------------------------

loc_73D48:
		move.b	#2,5(a0)
		bclr	#1,$38(a1)
		rts
; ---------------------------------------------------------------------------

loc_73D56:
		lea	loc_73D62(pc),a2
		bsr.w	sub_73FCE
		bra.w	loc_74098
; ---------------------------------------------------------------------------

loc_73D62:
		movea.w	$46(a0),a1
		move.b	$3C(a1),$3C(a0)
		moveq	#4,d2
		jmp	MoveSprite_CircularSimple.w
; ---------------------------------------------------------------------------

loc_73D74:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_73D88(pc,d0.w),d1
		jsr	off_73D88(pc,d1.w)
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------
off_73D88:	dc.w loc_73D8E-off_73D88

		dc.w loc_73DB6-off_73D88
		dc.w loc_73DEA-off_73D88
; ---------------------------------------------------------------------------

loc_73D8E:
		lea	ObjDat3_740F8(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.w	#-$180,$18(a0)
		move.l	#byte_741EA,$30(a0)
		move.w	#$1F,$2E(a0)
		move.l	#loc_73DC8,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_73DB6:
		jsr	MoveSprite2.w
		jsr	Animate_Raw.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_73DC8:
		move.b	#4,5(a0)
		move.b	#3,$22(a0)
		move.w	#-$200,$1A(a0)
		move.w	#$29,$2E(a0)
		move.l	#loc_73DF6,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_73DEA:
		jsr	MoveSprite_LightGravity.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_73DF6:
		move.l	#Delete_Current_Sprite,(a0)
		move.b	#0,$22(a0)
		movea.w	$46(a0),a1
		bset	#7,$38(a1)
		rts
; ---------------------------------------------------------------------------

loc_73E0E:
		jsr	Refresh_ChildPositionAdjusted.w
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_73E28(pc,d0.w),d1
		jsr	off_73E28(pc,d1.w)
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
off_73E28:	dc.w loc_73E30-off_73E28

		dc.w loc_73E3A-off_73E28
		dc.w loc_73E5E-off_73E28
		dc.w loc_73E8E-off_73E28
; ---------------------------------------------------------------------------

loc_73E30:
		lea	ObjDat3_74104(pc),a1
		jmp	SetUp_ObjAttributes.w
; ---------------------------------------------------------------------------

loc_73E3A:
		movea.w	$46(a0),a1
		btst	#7,$38(a1)
		bne.s	loc_73E48
		rts
; ---------------------------------------------------------------------------

loc_73E48:
		move.b	#4,5(a0)
		move.b	#0,$22(a0)
		move.l	#byte_741F0,$30(a0)
		rts
; ---------------------------------------------------------------------------

loc_73E5E:
		movea.w	$46(a0),a1
		btst	#6,$2A(a1)
		bne.s	loc_73E78
		btst	#7,$2A(a1)
		bne.s	loc_73E80
		jmp	Animate_Raw.w
; ---------------------------------------------------------------------------

loc_73E78:
		move.b	#2,$22(a0)
		rts
; ---------------------------------------------------------------------------

loc_73E80:
		move.b	#6,5(a0)
		move.b	#3,$22(a0)
		rts
; ---------------------------------------------------------------------------

loc_73E8E:
		movea.w	$46(a0),a1
		btst	#5,$38(a1)
		bne.s	loc_73E9C
		rts
; ---------------------------------------------------------------------------

loc_73E9C:
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------

Obj_LBZEB_Barrier:
		lea	ObjDat3_74110(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_73EB4,(a0)
		rts
; ---------------------------------------------------------------------------

loc_73EB4:
		movea.w	$46(a0),a1
		btst	#4,$38(a1)
		bne.s	loc_73F10
		btst	#3,$38(a1)
		bne.s	loc_73EE2
		moveq	#$13,d1
		move.w	#$80,d2
		move.w	#$120,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_73EE2:
		move.l	#loc_73EEE,(a0)
		addi.w	#$60,$14(a0)

loc_73EEE:
		movea.w	$46(a0),a1
		btst	#4,$38(a1)
		bne.s	loc_73F10
		moveq	#$13,d1
		moveq	#$14,d2
		moveq	#0,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_73F10:

		jsr	Displace_PlayerOffObject.w
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_73F1C:
		lea	ChildObjDat_74190(pc),a2
		jsr	CreateChild1_Normal.w
		move.b	$39(a0),d0
		addq.b	#1,$39(a0)
		andi.w	#7,d0
		move.b	byte_73F3A(pc,d0.w),$2C(a1)
		rts
; ---------------------------------------------------------------------------
byte_73F3A:	dc.b 0
		dc.b 2
		dc.b 1
		dc.b 2
		dc.b 0
		dc.b 1
		dc.b 2
		dc.b 1
; ---------------------------------------------------------------------------

loc_73F42:
		moveq	#0,d0
		move.b	$2C(a0),d0
		lsl.w	#3,d0
		lea	word_73F64(pc,d0.w),a1
		move.w	(a1)+,d0
		add.w	d0,$10(a0)
		move.w	(a1)+,d0
		add.w	d0,$14(a0)
		move.w	(a1)+,$18(a0)
		move.w	(a1)+,$1A(a0)
		rts
; ---------------------------------------------------------------------------
word_73F64:	dc.w  $FFF0,   $60
		dc.w  $FA00, $FE00
		dc.w  $FFF0,   $60
		dc.w  $FC00, $FF00
		dc.w  $FFF0,   $90
		dc.w  $FC00,	 0
; ---------------------------------------------------------------------------

loc_73F7C:
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	d0,d1
		move.w	d0,d2
		cmpi.b	#8,d0
		blo.s	loc_73F98
		move.b	#$B,$22(a0)
		subi.w	#8,d2
		move.w	d2,d1

loc_73F98:
		add.w	d0,d0
		lea	word_73FAE(pc,d0.w),a1
		move.w	(a1)+,$18(a0)
		move.w	(a1)+,$1A(a0)
		lsr.w	#1,d1
		or.b	d1,4(a0)
		rts
; ---------------------------------------------------------------------------
word_73FAE:	dc.w  $FD00, $FD00
		dc.w   $300, $FD00
		dc.w  $FD00, $FE00
		dc.w   $300, $FE00
		dc.w  $FC00, $FC00
		dc.w   $400, $FC00
		dc.w  $FC00, $FD00
		dc.w   $400, $FD00

; =============== S U B R O U T I N E =======================================


sub_73FCE:

		move.w	$10(a0),-(sp)
		jsr	(a2)
		moveq	#$12,d1
		moveq	#7,d2
		moveq	#7,d3
		move.w	(sp)+,d4
		jmp	SolidObjectTop.w
; End of function sub_73FCE


; =============== S U B R O U T I N E =======================================


sub_73FE2:
		tst.l	(a0)
		beq.s	locret_74038
		tst.b	$28(a0)
		bne.s	locret_74038
		tst.b	$29(a0)
		beq.s	loc_7403A
		tst.b	$20(a0)
		bne.s	loc_74006
		move.b	#$20,$20(a0)
		moveq	#$6E,d0
		jsr	Play_Sound_2.w

loc_74006:
		bset	#6,$2A(a0)
		lea	(Normal_palette_line_2+$16).w,a1
		move.w	#$222,d0
		btst	#0,$20(a0)
		bne.s	loc_74020
		move.w	#$EEE,d0

loc_74020:
		move.w	d0,(a1)
		subq.b	#1,$20(a0)
		bne.s	locret_74038
		bclr	#6,$2A(a0)
		move.w	#$222,(a1)
		move.b	$25(a0),$28(a0)

locret_74038:
		rts
; ---------------------------------------------------------------------------

loc_7403A:
		move.l	#loc_73A52,(a0)
		clr.b	(Update_HUD_timer).w
		moveq	#$64,d0
		jsr	(HUD_AddToScore).l
		bclr	#7,4(a0)
		move.w	#$7F,$2E(a0)
		bset	#4,$38(a0)
		move.w	#-$5BDB,$A(a0)
		move.w	#-$200,$1A(a0)
		move.l	#loc_73A6A,$34(a0)
		lea	Child6_CreateBossExplosion.w,a2
		jsr	CreateChild1_Normal.w
		bne.s	loc_74086
		move.b	#4,$2C(a1)

loc_74086:
		rts
	;	move.w	#$3AB8,(__u_FA92).w
	;	lea	Child6_IncLevX.w,a2
	;	jmp	CreateChild6_Simple.w
; End of function sub_73FE2

; ---------------------------------------------------------------------------

loc_74098:

		movea.w	$46(a0),a1
		btst	#7,$2A(a1)
		bne.s	loc_740AA
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_740AA:
		move.l	#MoveChkDel,(a0)
		bset	#7,$2A(a0)
		move.w	#$C425,$A(a0)		; NAT: Use line 2 instead

		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	word_740E4(pc,d0.w),$18(a0)
		move.w	#-$200,$1A(a0)
		jsr	Displace_PlayerOffObject.w
		lea	(Player_2).w,a1
		bclr	#4,$2A(a1)
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
word_740E4:	dc.w $300
		dc.w $200
		dc.w $FE00
		dc.w $FD00
ObjDat3_740EC:	dc.l Map_LBZEndBoss
		dc.w $2425
		dc.w prio(5)
		dc.b $20
		dc.b $10
		dc.b 0
		dc.b $18
ObjDat3_740F8:	dc.l Map_FBZRobotnikRun
		dc.w $4A9
		dc.w prio(5)
		dc.b $20
		dc.b $20
		dc.b 0
		dc.b 0
ObjDat3_74104:	dc.l Map_RobotnikShip
		dc.w $852E
		dc.w prio(6)
		dc.b $10
		dc.b 8
		dc.b 4
		dc.b 0
ObjDat3_74110:	dc.l Map_LBZEndBoss
		dc.w $2425
		dc.w prio(0)
		dc.b 8
		dc.b $80
		dc.b $C
		dc.b 0
word_7411C:	dc.w prio(5)
		dc.b 8
		dc.b $18
		dc.b 2
		dc.b 0
word_74122:	dc.w $A425
		dc.w prio(4)
		dc.b 8
		dc.b 8
		dc.b $D
		dc.b 0
word_7412A:	dc.w prio(5)
		dc.b $10
		dc.b $10
		dc.b 5
		dc.b $9A
word_74130:	dc.w $425
		dc.w prio(4)
		dc.b 8
		dc.b 8
		dc.b 7
		dc.b 0
word_74138:	dc.w $A425
		dc.w prio(4)
		dc.b 8
		dc.b 8
		dc.b $A
		dc.b 0
ObjDat3_74140:	dc.l Map_LBZEndBoss
		dc.w $4425
		dc.w prio(5)
		dc.b 8
		dc.b 8
		dc.b $E
		dc.b 0
ChildObjDat_7414C:dc.w 1
		dc.l loc_73E0E
		dc.w $F8
		dc.l Obj_LBZEB_Barrier
		dc.w $E890
ChildObjDat_7415A:dc.w 0
		dc.l loc_73D74
		dc.w $70E8
ChildObjDat_74162:dc.w 2
		dc.l loc_73C0A
		dc.w $E838
		dc.l loc_73C0A
		dc.w $1838
		dc.l loc_73C0A
		dc.w $38
ChildObjDat_74176:dc.w 2
		dc.l loc_73C82
		dc.w $E8
		dc.l loc_73C82
		dc.w $F8
		dc.l loc_73C82
		dc.w 8
ChildObjDat_7418A:dc.w 3
		dc.l loc_73CB0
ChildObjDat_74190:dc.w 0
		dc.l loc_73A92
		dc.w 0
ChildObjDat_74198:dc.w 0
		dc.l loc_73BA0
		dc.w $10
ChildObjDat_741A0:dc.w $B
		dc.l loc_73BF6
		dc.w $F8F8
		dc.l loc_73BF6
		dc.w $8F8
		dc.l loc_73BF6
		dc.w $F808
		dc.l loc_73BF6
		dc.w $808
		dc.l loc_73BF6
		dc.w $F0F0
		dc.l loc_73BF6
		dc.w $10F0
		dc.l loc_73BF6
		dc.w $F010
		dc.l loc_73BF6
		dc.w $1010
		dc.l loc_73BA0
		dc.w $F806
		dc.l loc_73BA0
		dc.w $608
		dc.l loc_73BA0
		dc.w $F8FA
		dc.l loc_73BA0
		dc.w $6F8
byte_741EA:	dc.b 7
		dc.b 0
		dc.b 1
		dc.b 2
		dc.b 1
		dc.b $FC
byte_741F0:	dc.b 7
		dc.b 0
		dc.b 1
		dc.b $FC
byte_741F4:	dc.b 0
		dc.b 5
		dc.b 6
		dc.b $FC
byte_741F8:	dc.b 5
		dc.b 7
		dc.b 7
		dc.b 8
		dc.b 9
		dc.b $F4
Pal_LBZEndBoss:	binclude "Levels/LBZ/Palettes/End Boss.bin"
	even

; ---------------------------------------------------------------------------

Obj_LBZ_FinalBoss2:

		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_7427C(pc,d0.w),d1
		jsr	off_7427C(pc,d1.w)
		jsr	(sub_74FD2).l
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------
off_7427C:	dc.w loc_742A8-off_7427C
		dc.w loc_7430E-off_7427C
		dc.w loc_7430E-off_7427C
		dc.w loc_7432A-off_7427C
		dc.w loc_7430E-off_7427C
		dc.w loc_743CE-off_7427C
		dc.w loc_74412-off_7427C
		dc.w loc_74442-off_7427C
		dc.w loc_74456-off_7427C
		dc.w loc_7447A-off_7427C
		dc.w loc_744A4-off_7427C
		dc.w loc_744E4-off_7427C
		dc.w loc_744FC-off_7427C
		dc.w loc_74528-off_7427C
		dc.w loc_74542-off_7427C
		dc.w loc_7455C-off_7427C
		dc.w loc_74576-off_7427C
		dc.w loc_745A2-off_7427C
		dc.w loc_745E2-off_7427C
		dc.w loc_74618-off_7427C
		dc.w loc_7463A-off_7427C
		dc.w loc_746C8-off_7427C
; ---------------------------------------------------------------------------

loc_742A8:
		lea	ObjDat3_750B6(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.b	#8,$29(a0)
		bset	#3,$38(a0)
		st	(Border_Bottom_Death).w
		move.w	(Camera_X_pos).w,d0
		addi.w	#$A0,d0
		move.w	d0,$10(a0)
		move.w	(Camera_Y_pos).w,d0
		subi.w	#$50,d0
		move.w	d0,$14(a0)
		move.w	#$59,$2E(a0)
		move.l	#loc_74314,$34(a0)
		lea	Pal_LBZFinalBoss2(pc),a1
		jsr	PalLoad_Line1.w
		lea	(ArtKosM_LBZFinalBoss2).l,a1
		move.w	#$7B20,d2
		jsr	Queue_Kos_Module.w
		lea	(Child1_MakeRoboHead4).l,a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_7430E:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_74314:
		move.b	#6,5(a0)
		move.b	#8,$22(a0)
		lea	ChildObjDat_75122(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_7432A:
		jsr	MoveSprite_LightGravity.w
		move.w	(Camera_Y_pos).w,d0
		addi.w	#$120,d0
		cmp.w	$14(a0),d0
		blo.s	loc_74340
		rts
; ---------------------------------------------------------------------------

loc_74340:
		bset	#7,$A(a0)
		clr.w	$1A(a0)
		move.b	#$F,$28(a0)
		bchg	#0,4(a0)
		lea	ChildObjDat_7513C(pc),a2
		jsr	CreateChild1_Normal.w

loc_74360:


		move.b	#8,5(a0)
		move.w	#$7F,$2E(a0)
		move.l	#loc_74376,$34(a0)

locret_74374:

		rts
; ---------------------------------------------------------------------------

loc_74376:
		bchg	#0,4(a0)
		move.b	$39(a0),d0
		addq.b	#1,$39(a0)
		btst	#2,d0
		bne.s	loc_743AE
		move.b	#$A,5(a0)
		bclr	#3,$38(a0)
		bclr	#2,$38(a0)
		move.w	#$AF,$2E(a0)
		move.l	#loc_74360,$34(a0)
		bra.w	loc_74F24
; ---------------------------------------------------------------------------

loc_743AE:
		move.b	#$C,5(a0)
		clr.b	$39(a0)
		clr.w	$1A(a0)
		move.l	#loc_74428,$34(a0)
		move.w	(Camera_Y_pos).w,$14(a0)
		bra.w	loc_74F82
; ---------------------------------------------------------------------------

loc_743CE:
		move.w	$3A(a0),d0
		move.w	off_743E6(pc,d0.w),d0
		jsr	off_743E6(pc,d0.w)
		jsr	MoveSprite2.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------
off_743E6:	dc.w locret_743F4-off_743E6

		dc.w loc_743F0-off_743E6
		dc.w loc_743F6-off_743E6
		dc.w locret_743F4-off_743E6
		dc.w loc_7440C-off_743E6
; ---------------------------------------------------------------------------

loc_743F0:
		subq.w	#4,$1A(a0)

locret_743F4:
		rts
; ---------------------------------------------------------------------------

loc_743F6:
		move.w	$1A(a0),d0
		add.w	$3C(a0),d0
		move.w	d0,$1A(a0)
		bne.s	locret_7440A
		move.w	#2,$3C(a0)

locret_7440A:
		rts
; ---------------------------------------------------------------------------

loc_7440C:
		subq.w	#4,$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_74412:
		moveq	#$50,d1
		move.w	#$F0,d2
		bsr.w	sub_74FA8
		jsr	MoveSprite2.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_74428:
		move.b	#$E,5(a0)
		clr.w	$18(a0)
		move.w	#$1F,$2E(a0)
		move.l	#loc_74448,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_74442:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_74448:
		move.b	#$10,5(a0)
		bset	#3,$38(a0)
		rts
; ---------------------------------------------------------------------------

loc_74456:
		jsr	MoveSprite_LightGravity.w
		move.w	(Camera_Y_pos_copy).w,d0
		addi.w	#$C0,d0
		cmp.w	$14(a0),d0
		blo.s	loc_7446C
		rts
; ---------------------------------------------------------------------------

loc_7446C:
		move.b	#$12,5(a0)
		bset	#2,$38(a0)
		rts
; ---------------------------------------------------------------------------

loc_7447A:
		addi.w	#-$80,$1A(a0)
		jsr	MoveSprite2.w
		tst.w	$1A(a0)
		bpl.s	locret_7449A
		move.w	(Camera_Y_pos_copy).w,d0
		addi.w	#$E0,d0
		cmp.w	$14(a0),d0
		bhs.s	loc_7449C

locret_7449A:
		rts
; ---------------------------------------------------------------------------

loc_7449C:
		move.b	#$14,5(a0)
		rts
; ---------------------------------------------------------------------------

loc_744A4:
		addi.w	#$40,$1A(a0)
		jsr	MoveSprite2.w
		tst.w	$1A(a0)
		bmi.s	locret_744C4
		move.w	(Camera_Y_pos_copy).w,d0
		addi.w	#$D0,d0
		cmp.w	$14(a0),d0
		bls.s	loc_744C6

locret_744C4:
		rts
; ---------------------------------------------------------------------------

loc_744C6:
		move.b	#$16,5(a0)
		move.w	d0,$14(a0)
		clr.w	$1A(a0)
		move.w	#$1F,$2E(a0)
		move.l	#loc_744EA,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_744E4:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_744EA:
		move.b	#$18,5(a0)
		move.l	#loc_74512,$34(a0)
		bra.w	loc_74F82
; ---------------------------------------------------------------------------

loc_744FC:
		moveq	#$30,d1
		move.w	#$110,d2
		bsr.w	sub_74FA8
		jsr	MoveSprite2.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_74512:
		move.b	#$1A,5(a0)
		move.w	#$1F,$2E(a0)
		move.l	#loc_7452E,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_74528:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_7452E:
		move.b	#$1C,5(a0)
		move.w	#-$400,$1A(a0)
		bclr	#3,$38(a0)
		rts
; ---------------------------------------------------------------------------

loc_74542:
		jsr	MoveSprite2.w
		move.w	(Camera_Y_pos).w,d0
		subi.w	#$60,d0
		cmp.w	$14(a0),d0
		bhs.s	loc_74558
		rts
; ---------------------------------------------------------------------------

loc_74558:
		bra.w	loc_74360
; ---------------------------------------------------------------------------

loc_7455C:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_74562:
		move.b	#$20,5(a0)
		move.w	#-$400,$1A(a0)
		bchg	#1,$39(a0)
		rts
; ---------------------------------------------------------------------------

loc_74576:
		jsr	MoveSprite2.w
		move.w	(Camera_Y_pos).w,d0
		subi.w	#$60,d0
		cmp.w	$14(a0),d0
		bhs.s	loc_7458C
		rts
; ---------------------------------------------------------------------------

loc_7458C:
		move.b	#$22,5(a0)
		move.w	#$3F,$2E(a0)
		move.l	#loc_745A8,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_745A2:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_745A8:
		move.b	#$24,5(a0)
		movea.w	$44(a0),a1
		clr.b	$3C(a1)
		move.w	(Camera_X_pos).w,d0
		move.w	d0,d1
		addi.w	#$A0,d0
		bclr	#0,4(a0)
		move.w	#$E0,d2
		cmp.w	$10(a0),d0
		blo.s	loc_745DA
		bset	#0,4(a0)
		move.w	#$60,d2

loc_745DA:
		add.w	d2,d1
		move.w	d1,$10(a0)
		rts
; ---------------------------------------------------------------------------

loc_745E2:
		move.w	(Camera_Y_pos_copy).w,d0
		addi.w	#$88,d0
		cmp.w	$14(a0),d0
		bls.s	loc_745F6
		addq.w	#8,$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_745F6:
		move.b	#$26,5(a0)
		bset	#1,$38(a0)
		move.w	#$14,(ScrShake_Value).w
		move.w	#3,$2E(a0)
		moveq	#$61,d0
		jmp	Play_Sound_2.w
; ---------------------------------------------------------------------------

loc_74618:
		addq.w	#4,$14(a0)
		subq.w	#1,$2E(a0)
		bmi.s	loc_74624
		rts
; ---------------------------------------------------------------------------

loc_74624:
		move.b	#$28,5(a0)
		move.w	#7,$2E(a0)
		move.l	#loc_74640,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_7463A:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_74640:
		move.b	#$2A,5(a0)
		clr.b	$30(a0)
		subi.w	#$10,$14(a0)
		bclr	#1,$38(a0)
		move.w	#$400,d0
		btst	#0,4(a0)
		beq.s	loc_74664
		neg.w	d0

loc_74664:
		move.w	d0,$18(a0)
		move.w	#-$600,$1A(a0)
		move.w	#$3F,$2E(a0)
		btst	#Status_Invincible,(Player_1+status_secondary).w
		bne.s	loc_7468C
		movea.l	a0,a2
		lea	(Player_1).w,a0
		jsr	(HurtCharacter).l
		movea.l	a2,a0
		rts
; ---------------------------------------------------------------------------

loc_7468C:
		lea	(Player_1).w,a1
		clr.b	$2E(a1)
		neg.w	d0
		move.w	d0,$18(a1)
		move.w	#-$400,$1A(a1)
		bset	#1,$2A(a1)
		bclr	#3,$2A(a1)
		clr.b	$40(a1)
		clr.b	$3D(a1)
		move.b	#2,$20(a1)
		move.b	#2,5(a1)
		moveq	#-$4F,d0
		jmp	Play_Sound_2.w
; ---------------------------------------------------------------------------

loc_746C8:
		jsr	MoveSprite.w
		subq.w	#1,$2E(a0)
		bmi.w	loc_74360
		rts
; ---------------------------------------------------------------------------

loc_746D8:
		move.l	#loc_746F4,(a0)
		move.b	#5,$22(a0)
		bset	#4,$38(a0)
		lea	ChildObjDat_7515E(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_746F4:
		move.w	$14(a0),d0
		subq.w	#1,d0
		move.w	d0,$14(a0)
		move.w	(Camera_Y_pos).w,d1
		subi.w	#$40,d1
		cmp.w	d1,d0
		blo.s	loc_74710
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_74710:
		move.l	#loc_7473A,(a0)
		bclr	#7,4(a0)
		bset	#5,$38(a0)
		bset	#0,4(a0)
		move.w	(Camera_X_pos).w,d2
		addi.w	#$40,d2
		move.w	d2,$10(a0)
		jmp	(loc_694AA).l
; ---------------------------------------------------------------------------

loc_7473A:
		tst.b	(End_Of_Level_Flag).w
		bne.w	locret_74374
		tst.b	(__u_FAA2).w
		beq.w	locret_74374
		move.l	#loc_74768,(a0)
		jsr	sub_7302E(pc)
		bclr	#7,$2A(a0)
		jsr	Restore_PlayerControl.w
		clr.w	(Ctrl_1_logical).w
		st	(Ctrl_1_locked).w

loc_74768:
		lea	(Player_1).w,a1
		move.w	#$808,d0
		move.w	(Camera_X_pos).w,d1
		addi.w	#$50,d1
		sub.w	$10(a1),d1
		bcc.s	loc_74784
		move.w	#$404,d0
		neg.w	d1

loc_74784:
		move.w	d0,(Ctrl_1_logical).w
		cmpi.w	#8,d1
		bhs.w	locret_74374
		move.l	#loc_747D6,(a0)
		clr.w	(Ctrl_1_logical).w
		bset	#0,4(a1)
		bset	#0,$2A(a1)
		jsr	Stop_Object.w
		moveq	#$71,d0
		jsr	Load_PLC.w
		lea	(ArtKosM_EggRoboHead).l,a1
		move.w	#-$5A40,d2
		jsr	Queue_Kos_Module.w
		bclr	#5,$38(a0)
		lea	(Child1_MakeRoboHead4).l,a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_747D6:
		move.w	#$101,(Ctrl_1_logical).w
		move.w	$14(a0),d0
		addq.w	#1,d0
		move.w	(Camera_Y_pos).w,d1
		addi.w	#$40,d1
		cmp.w	d1,d0
		bhs.s	loc_747F8
		move.w	d0,$14(a0)
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_747F8:
		move.l	#loc_7481C,(a0)
		move.w	#$200,$18(a0)
		jsr	Swing_Setup1.w
		lea	(Child1_MakeRoboShipFlame).l,a2
		jsr	CreateChild1_Normal.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_7481C:
		move.w	#$101,(Ctrl_1_logical).w
		jsr	Swing_UpAndDown.w
		jsr	MoveSprite2.w
		move.w	$10(a0),d0
		lea	(Player_1).w,a1
		bclr	#0,4(a1)
		bclr	#0,$2A(a1)
		cmp.w	$10(a1),d0
		bhs.s	loc_74854
		bset	#0,4(a1)
		bset	#0,$2A(a1)

loc_74854:
		move.w	(Camera_X_pos).w,d1
		addi.w	#$A0,d1
		cmp.w	d1,d0
		bhs.s	loc_74866
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_74866:
		move.w	d0,$10(a0)
		move.l	#loc_74894,(a0)
		move.w	#$1F,$2E(a0)
		move.l	#loc_748A0,$34(a0)
		bclr	#3,$38(a0)
		lea	ChildObjDat_7517E(pc),a2
		jsr	CreateChild1_Normal.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_74894:
		jsr	Obj_Wait.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_748A0:
		move.l	#loc_748AE,(a0)
		move.w	#$400,$18(a0)
		rts
; ---------------------------------------------------------------------------

loc_748AE:
		jsr	Swing_UpAndDown.w
		jsr	MoveSprite2.w
		move.w	$10(a0),d0
		move.w	(Camera_X_pos).w,d1
		addi.w	#$1C0,d1
		cmp.w	d1,d0
		bhs.s	loc_748D0
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_748D0:
		move.l	#loc_748F4,(a0)
		bset	#6,$2A(a0)
		bset	#4,$38(a0)
		bset	#5,$38(a0)
		clr.b	(Boss_flag).w
		bclr	#7,4(a0)
		rts
; ---------------------------------------------------------------------------

loc_748F4:
		btst	#3,$38(a0)
		beq.s	locret_74908
		move.l	#loc_7490A,(a0)
		move.w	#$808,(Ctrl_1_logical).w

locret_74908:
		rts
; ---------------------------------------------------------------------------

loc_7490A:
		cmpi.w	#$4510,(Player_1+x_pos).w
		blo.s	locret_74950
		move.l	#loc_74952,(a0)
		lea	(Player_1).w,a1
		move.w	$10(a1),$10(a0)
		move.w	$14(a1),$14(a0)
		move.b	#-$7D,$2E(a1)
		move.b	#-$74,$22(a1)
		jsr	Player_Load_PLC.w
		clr.b	$23(a0)
		move.b	#$A,$24(a0)
		move.w	#$200,$18(a0)
		move.w	#-$400,$1A(a0)

locret_74950:
		rts
; ---------------------------------------------------------------------------

loc_74952:
		jsr	MoveSprite_LightGravity.w
		lea	(Player_1).w,a1
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		subq.b	#1,$24(a0)
		bpl.s	loc_7498E
		move.b	#$A,$24(a0)
		addq.b	#1,$23(a0)
		moveq	#-$74,d0
		btst	#0,$23(a0)
		bne.s	loc_74984
		moveq	#-$73,d0

loc_74984:
		move.b	d0,$22(a1)
		jsr	Player_Load_PLC.w

loc_7498E:
		move.w	(__u_FAB0).w,d0
		addi.w	#$200,d0
		cmp.w	(Player_1+y_pos).w,d0
		bhi.w	locret_74374
		move.w	#$700,d0
		jsr	StartNewLevel.w
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_749AE:
		lea	ObjDat3_750C2(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_749BE,(a0)

loc_749BE:
		jsr	(Child_GetPriorityOnce).l
		jsr	Refresh_ChildPositionAdjusted.w
		jmp	Child_Draw_Sprite2.w
; ---------------------------------------------------------------------------

loc_749D0:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_749E6(pc,d0.w),d1
		jsr	off_749E6(pc,d1.w)
		moveq	#$C,d0
		jmp	Child_DrawTouch_Sprite_FlickerMove.w
; ---------------------------------------------------------------------------
off_749E6:	dc.w loc_749EC-off_749E6
		dc.w loc_74A14-off_749E6
		dc.w loc_74A3E-off_749E6
; ---------------------------------------------------------------------------

loc_749EC:
		lea	ObjDat3_750CE(pc),a1
		jsr	SetUp_ObjAttributes.w
		movea.w	$46(a0),a1
		move.w	a0,$44(a1)
		move.b	#$14,$42(a0)
		move.b	#-6,$43(a0)
		lea	ChildObjDat_75144(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_74A14:
		movea.w	$46(a0),a1
		btst	#7,$A(a1)
		beq.s	loc_74A32
		bset	#7,$A(a0)
		move.b	#4,5(a0)
		move.b	#-$53,$28(a0)

loc_74A32:
		lea	(LBZFinalBoss2_CircleLookup).l,a2
		jmp	(MoveSprite_CircularLookup).l
; ---------------------------------------------------------------------------

loc_74A3E:
		movea.w	$46(a0),a1
		btst	#1,$38(a1)
		bne.w	locret_74374
		btst	#2,$38(a1)
		bne.s	loc_74A88
		lea	(Player_1).w,a1
		move.b	$3C(a0),d0
		move.w	$14(a0),d1
		sub.w	$14(a1),d1
		cmpi.w	#-2,d1
		blt.s	loc_74A7C
		cmpi.w	#2,d1
		ble.s	loc_74A88
		subq.b	#1,d0
		cmpi.b	#-$30,d0
		blt.s	loc_74A88
		bra.w	loc_74A84
; ---------------------------------------------------------------------------

loc_74A7C:
		addq.b	#1,d0
		cmpi.b	#0,d0
		bgt.s	loc_74A88

loc_74A84:
		move.b	d0,$3C(a0)

loc_74A88:

		jsr	(Change_FlipXUseParent).l
		lea	(LBZFinalBoss2_CircleLookup).l,a2
		jmp	(MoveSprite_CircularLookup).l
; ---------------------------------------------------------------------------

loc_74A9A:
		lea	word_750E0(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_74ACA,(a0)
		movea.w	$46(a0),a1
		movea.w	$46(a1),a2
		move.w	a2,$46(a0)
		move.w	a1,$44(a0)
		move.w	a1,$44(a0)
		move.b	#$18,$42(a0)
		move.b	#-6,$43(a0)

loc_74ACA:
		jsr	(Child_GetPriorityOnce).l
		jsr	(Change_FlipXUseParent).l
		movea.w	$44(a0),a1
		move.b	$3C(a1),d0
		addi.b	#$14,d0
		move.b	d0,$3C(a0)
		lea	(LBZ2FinalBoss2_CircleLookup2).l,a2
		jsr	(MoveSprite_CircularLookup).l
		moveq	#$C,d0
		jmp	Child_DrawTouch_Sprite_FlickerMove.w
; ---------------------------------------------------------------------------

loc_74AFA:

		lea	word_750DA(pc),a1
		jsr	SetUp_ObjAttributes3.w
		movea.w	$46(a0),a1
		move.w	$46(a1),$44(a0)
		move.l	#loc_74B36,(a0)
		move.l	#byte_75194,$30(a0)
		tst.b	$2C(a0)
		beq.s	loc_74B36
		move.b	#8,$22(a0)
		move.w	#prio(3),8(a0)
		move.l	#byte_7519C,$30(a0)

loc_74B36:

		jsr	(Child_GetPriorityOnce).l

loc_74B3C:
		jsr	Refresh_ChildPositionAdjusted.w
		jsr	Animate_Raw.w
		movea.w	$44(a0),a1
		tst.b	$30(a1)
		beq.s	loc_74B6E
		move.l	#loc_74B76,(a0)
		move.b	#7,$22(a0)
		tst.b	$2C(a0)
		beq.s	loc_74B6E
		move.b	#$B,$22(a0)
		addq.b	#8,$42(a0)

loc_74B6E:

		moveq	#$C,d0
		jmp	Child_DrawTouch_Sprite_FlickerMove.w
; ---------------------------------------------------------------------------

loc_74B76:
		jsr	Refresh_ChildPositionAdjusted.w
		movea.w	$44(a0),a1
		tst.b	$30(a1)
		bne.s	loc_74B96
		move.l	#loc_74B3C,(a0)
		tst.b	$2C(a0)
		beq.s	loc_74B96
		subq.b	#8,$42(a0)

loc_74B96:

		moveq	#$C,d0
		jmp	Child_DrawTouch_Sprite_FlickerMove.w
; ---------------------------------------------------------------------------

loc_74B9E:
		lea	ObjDat3_750E6(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_74BAE,(a0)

loc_74BAE:
		jsr	(Child_GetPriorityOnce).l
		jsr	Refresh_ChildPositionAdjusted.w
		jmp	Child_Draw_Sprite2.w
; ---------------------------------------------------------------------------

loc_74BC0:
		lea	ObjDat3_750F2(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_74BD0,(a0)

loc_74BD0:
		move.b	#-$66,d0
		bsr.w	sub_74EBC
		jsr	Refresh_ChildPositionAdjusted.w
		movea.w	$46(a0),a1
		btst	#7,$2A(a1)
		bne.s	loc_74BFA
		btst	#0,(V_int_run_count+3).w
		bne.w	locret_74374
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_74BFA:

		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_74C00:
		move.l	#loc_74C0C,(a0)
		move.b	#-$64,$28(a0)

loc_74C0C:
		jsr	Refresh_ChildPositionAdjusted.w
		movea.w	$46(a0),a1
		btst	#7,$2A(a1)
		bne.s	loc_74BFA
		jmp	Add_SpriteToCollisionResponseList.w
; ---------------------------------------------------------------------------

loc_74C24:
		move.l	#loc_74C34,(a0)
		movea.w	$46(a0),a1
		move.w	$46(a1),$44(a0)

loc_74C34:

		jsr	Refresh_ChildPositionAdjusted.w
		movea.w	$44(a0),a1
		btst	#7,$2A(a1)
		bne.s	loc_74C7A
		btst	#3,$38(a1)
		bne.w	locret_74374
		btst	#6,$2A(a1)
		bne.w	locret_74374
		lea	word_74C84(pc),a1
		jsr	Check_PlayerInRange.w
		tst.w	d0
		beq.s	locret_74C78
		movea.w	d0,a1
		tst.b	$34(a1)
		bne.s	locret_74C78
		cmpi.b	#6,5(a1)
		blo.s	loc_74C8C

locret_74C78:

		rts
; ---------------------------------------------------------------------------

loc_74C7A:
		clr.b	(Player_1+$2E).w
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------
word_74C84:	dc.w  $FFF0,   $20, $FFF0,   $20
; ---------------------------------------------------------------------------

loc_74C8C:
		move.l	#loc_74CCC,(a0)
		movea.w	$44(a0),a1
		st	$30(a1)
		move.b	#$1E,5(a1)
		move.w	#$40,$2E(a1)
		move.l	#loc_74562,$34(a1)
		lea	(Player_1).w,a1
		move.b	#-$7F,$2E(a1)
		move.b	#2,$20(a1)
		moveq	#0,d0
		move.w	d0,$18(a1)
		move.w	d0,$1A(a1)
		move.w	d0,$1C(a1)

loc_74CCC:
		movea.w	$44(a0),a1
		tst.b	$30(a1)
		beq.s	loc_74CF8
		btst	#7,$2A(a1)
		bne.w	loc_74BFA
		jsr	Refresh_ChildPositionAdjusted.w
		lea	(Player_1).w,a1
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		rts
; ---------------------------------------------------------------------------

loc_74CF8:
		move.l	#loc_74D04,(a0)
		move.w	#$40,$2E(a0)

loc_74D04:
		subq.w	#1,$2E(a0)
		bmi.s	loc_74D0C
		rts
; ---------------------------------------------------------------------------

loc_74D0C:
		move.l	#loc_74C34,(a0)
		rts
; ---------------------------------------------------------------------------

loc_74D14:

		lea	ObjDat3_750FE(pc),a1
		jsr	SetUp_ObjAttributes.w
		jsr	Refresh_ChildPositionAdjusted.w
		move.l	#Obj_FlickerMove,(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		lsr.w	#1,d0
		addi.b	#$D,d0
		move.b	d0,$22(a0)
		moveq	#0,d0
		jsr	Set_IndexedVelocity.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_74D48:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_74D5C(pc,d0.w),d1
		jsr	off_74D5C(pc,d1.w)
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------
off_74D5C:	dc.w loc_74D62-off_74D5C

		dc.w loc_74D7C-off_74D5C
		dc.w loc_74DEA-off_74D5C
; ---------------------------------------------------------------------------

loc_74D62:
		lea	ObjDat3_7510A(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.b	#$10,$1E(a0)
		move.l	#loc_74D90,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_74D7C:
		jsr	MoveSprite.w
		tst.w	$1A(a0)
		bmi.w	locret_74374
		jmp	ObjHitFloor_DoRoutine.w
; ---------------------------------------------------------------------------

loc_74D90:
		move.w	$1A(a0),d0
		cmpi.w	#$100,d0
		blo.s	loc_74DA4
		asr.w	#1,d0
		neg.w	d0
		move.w	d0,$1A(a0)
		rts
; ---------------------------------------------------------------------------

loc_74DA4:
		move.l	#loc_74DEA,(a0)
		move.b	#$7F,$39(a0)
		movea.w	$46(a0),a1
		bset	#3,$38(a1)
		lea	(ChildObjDat_690D8).l,a2
		jsr	CreateChild1_Normal.w
		move.w	#$1000,d0
		move.w	d0,(__u_FA98).w
		move.w	d0,(Camera_target_max_Y_pos).w
		move.w	#$6000,(__u_FA92).w
		move.w	#0,(__u_FA96).w
		lea	(Child1_Act2LevelSize).l,a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_74DEA:

		bclr	#7,4(a0)
		move.b	(V_int_run_count+3).w,d0
		andi.b	#3,d0
		bne.w	locret_74374
		subq.b	#1,$39(a0)
		bmi.s	loc_74E0C
		lea	ChildObjDat_7518E(pc),a2
		jmp	CreateChild6_Simple.w
; ---------------------------------------------------------------------------

loc_74E0C:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_74E12:
		lea	ObjDat3_75116(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_74E24,(a0)
		rts
; ---------------------------------------------------------------------------

loc_74E24:
		jsr	Refresh_ChildPosition.w
		jmp	Child_Draw_Sprite2.w
; ---------------------------------------------------------------------------

loc_74E30:
		jsr	Random_Number.w
		andi.w	#$3C,d0
		lea	word_74E7C(pc,d0.w),a1
		move.w	(a1)+,$10(a0)
		move.w	(a1)+,$14(a0)
		move.l	#Obj_Wait,(a0)
		move.w	#$60,$2E(a0)
		move.l	#loc_74E70,$34(a0)
		lea	Child6_CreateBossExplosion.w,a2
		jsr	CreateChild1_Normal.w
		bne.s	locret_74E6E
		move.b	#4,$2C(a1)

locret_74E6E:
		rts
; ---------------------------------------------------------------------------

loc_74E70:
		bset	#5,$38(a0)
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------
word_74E7C:	dc.w  $4310,  $3ED
		dc.w  $4330,  $3F0
		dc.w  $4350,  $3F0
		dc.w  $4370,  $3F0
		dc.w  $4390,  $3F0
		dc.w  $43B0,  $3F0
		dc.w  $43D0,  $3F0
		dc.w  $43F0,  $3F0
		dc.w  $4410,  $3F0
		dc.w  $4430,  $3ED
		dc.w  $4450,  $3E5
		dc.w  $4470,  $3D6
		dc.w  $4490,  $3B8
		dc.w  $44B0,  $3A2
		dc.w  $44D0,  $395
		dc.w  $44F0,  $390

; =============== S U B R O U T I N E =======================================


sub_74EBC:
		movea.w	$46(a0),a1
		btst	#7,$A(a1)
		beq.s	locret_74ED4
		bset	#7,$A(a0)
		move.l	(sp),(a0)
		move.b	d0,$28(a0)

locret_74ED4:
		rts
; End of function sub_74EBC

; ---------------------------------------------------------------------------
		movea.w	$44(a0),a1
		movea.w	$46(a0),a2
		move.w	$10(a1),d0
		moveq	#$10,d2
		btst	#0,4(a2)
		beq.s	loc_74EEE
		neg.w	d2

loc_74EEE:
		add.w	d2,d0
		move.w	$10(a2),d1
		moveq	#$C,d2
		btst	#0,4(a2)
		beq.s	loc_74F00
		neg.w	d2

loc_74F00:
		add.w	d2,d1
		sub.w	d1,d0
		asr.w	#1,d0
		add.w	d0,d1
		move.w	d1,$10(a0)
		move.w	$14(a1),d0
		subq.w	#4,d0
		move.w	$14(a2),d1
		subq.w	#4,d1
		sub.w	d1,d0
		asr.w	#1,d0
		add.w	d0,d1
		move.w	d1,$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_74F24:
		jsr	Random_Number.w
		andi.w	#6,d0
		move.w	d0,$3A(a0)
		move.w	(Camera_X_pos).w,d1
		move.w	#$1A8,d2
		move.w	#-$300,d3
		btst	#0,4(a0)
		beq.s	loc_74F4C
		move.w	#-$68,d2
		neg.w	d3

loc_74F4C:
		add.w	d2,d1
		move.w	d1,$10(a0)
		move.w	d3,$18(a0)
		move.w	(Camera_Y_pos).w,d1
		move.w	word_74F72(pc,d0.w),d2
		add.w	d1,d2
		move.w	d2,$14(a0)
		move.w	word_74F7A(pc,d0.w),$1A(a0)
		move.w	#8,$3C(a0)
		rts
; ---------------------------------------------------------------------------
word_74F72:	dc.w $60
		dc.w $10
		dc.w $A0
		dc.w $80
word_74F7A:	dc.w 0
		dc.w $200
		dc.w $FE00
		dc.w 0
; ---------------------------------------------------------------------------

loc_74F82:

		move.w	#-$300,d0
		btst	#0,4(a0)
		beq.s	loc_74F90
		neg.w	d0

loc_74F90:
		move.w	d0,$18(a0)
		jsr	Random_Number.w
		andi.w	#$7F,d0
		addi.w	#$C0,d0
		move.w	d0,$2E(a0)
		rts

; =============== S U B R O U T I N E =======================================


sub_74FA8:

		move.w	(Camera_X_pos).w,d0
		tst.w	$18(a0)
		bmi.s	loc_74FBE
		add.w	d2,d0
		cmp.w	$10(a0),d0
		bls.s	loc_74FC6
		bra.w	locret_74FD0
; ---------------------------------------------------------------------------

loc_74FBE:
		add.w	d1,d0
		cmp.w	$10(a0),d0
		blo.s	locret_74FD0

loc_74FC6:
		bchg	#0,4(a0)
		neg.w	$18(a0)

locret_74FD0:

		rts
; End of function sub_74FA8


; =============== S U B R O U T I N E =======================================


sub_74FD2:
		cmpi.b	#8,5(a0)
		blo.s	locret_75044
		tst.b	$28(a0)
		bne.s	locret_75044
		move.b	$29(a0),d0
		beq.s	loc_75046
		tst.b	$20(a0)
		bne.s	loc_75010
		cmpi.b	#$A,5(a0)
		bne.s	loc_74FFA
		move.w	#8,$3A(a0)

loc_74FFA:
		move.b	#$3C,$20(a0)
		moveq	#$6E,d0
		jsr	Play_Sound_2.w
		movea.w	$44(a0),a1
		clr.b	$28(a1)

loc_75010:
		bset	#6,$2A(a0)
		moveq	#0,d0
		btst	#0,$20(a0)
		bne.s	loc_75024
		addi.w	#$C,d0

loc_75024:
		bsr.w	sub_75084
		subq.b	#1,$20(a0)
		bne.s	locret_75044
		bclr	#6,$2A(a0)
		move.b	$25(a0),$28(a0)
		movea.w	$44(a0),a1
		move.b	#-$53,$28(a1)

locret_75044:
		rts
; ---------------------------------------------------------------------------

loc_75046:
		move.l	#Wait_FadeToLevelMusic,(a0)
		move.l	#loc_746D8,$34(a0)
		jsr	BossDefeated_StopTimer.w
		lea	Child6_CreateBossExplosion.w,a2
		jsr	CreateChild6_Simple.w
		bne.s	loc_7506E
		move.b	#4,$2C(a1)

loc_7506E:
		tst.b	$30(a0)
		bne.s	loc_7507A
		jsr	Restore_PlayerControl.w

loc_7507A:
		lea	ChildObjDat_75186(pc),a2
		jmp	CreateChild1_Normal.w
; End of function sub_74FD2


; =============== S U B R O U T I N E =======================================


sub_75084:
		lea	word_75092(pc),a1
		lea	word_7509E(pc,d0.w),a2
		jmp	CopyWordData_6.w
; End of function sub_75084

; ---------------------------------------------------------------------------
word_75092:	dc.w $FC28, $FC2E, $FC30, $FC38, $FC3A, $FC3C
word_7509E:	dc.w 8, $A, 4, $644, $422, 0
		dc.w $888, $666, $AAA, $AAA, $EEE, $EEE
ObjDat3_750B6:	dc.l Map_RobotnikShip
		dc.w $52E
		dc.w prio(5)
		dc.b $1C
		dc.b $20
		dc.b 5
		dc.b 0
ObjDat3_750C2:	dc.l Map_LBZFinalBoss2
		dc.w $23D9
		dc.w prio(4)
		dc.b $28
		dc.b $28
		dc.b 0
		dc.b 0
ObjDat3_750CE:	dc.l Map_LBZFinalBoss2
		dc.w $23D9
		dc.w prio(3)
		dc.b $20
		dc.b $10
		dc.b 2
		dc.b 0
word_750DA:	dc.w prio(1)
		dc.b $14
		dc.b $14
		dc.b 4
		dc.b 0
word_750E0:	dc.w prio(3)
		dc.b 8
		dc.b 8
		dc.b 3
		dc.b 0
ObjDat3_750E6:	dc.l Map_LBZFinalBoss2
		dc.w $23D9
		dc.w prio(6)
		dc.b $14
		dc.b $C
		dc.b 1
		dc.b 0
ObjDat3_750F2:	dc.l Map_LBZFinalBoss2
		dc.w $3D9
		dc.w prio(6)
		dc.b $C
		dc.b $C
		dc.b $C
		dc.b 0
ObjDat3_750FE:	dc.l Map_LBZFinalBoss2
		dc.w $A3D9
		dc.w prio(2)
		dc.b $10
		dc.b $14
		dc.b $D
		dc.b 0
ObjDat3_7510A:	dc.l Map_LBZFinalBoss1
		dc.w $A3AA
		dc.w prio(6)
		dc.b $C
		dc.b $10
		dc.b $16
		dc.b 0
ObjDat3_75116:	dc.l Map_LBZFinalBoss1
		dc.w $A3AA
		dc.w prio(4)
		dc.b $10
		dc.b 4
		dc.b $15
		dc.b 0
ChildObjDat_75122:dc.w 3
		dc.l loc_749D0
		dc.w $1424
		dc.l loc_749AE
		dc.w $CEC
		dc.l loc_74B9E
		dc.w $E8
		dc.l loc_74BC0
		dc.w $38EC
ChildObjDat_7513C:dc.w 0
		dc.l loc_74C00
		dc.w $4CC
ChildObjDat_75144:dc.w 3
		dc.l loc_74AFA
		dc.w $D6FE
		dc.l loc_74AFA
		dc.w $B6FE
		dc.l loc_74A9A
		dc.w 0
		dc.l loc_74C24
		dc.w $C0FE
ChildObjDat_7515E:dc.w 4
		dc.l loc_74D14
		dc.w $F4D4
		dc.l loc_74D14
		dc.w $14D4
		dc.l loc_74D14
		dc.w $2CE8
		dc.l loc_74D14
		dc.w $F4FC
		dc.l loc_74D14
		dc.w $14FC
ChildObjDat_7517E:dc.w 0
		dc.l loc_74D48
		dc.w 8
ChildObjDat_75186:dc.w 0
		dc.l loc_74E12
		dc.w $10
ChildObjDat_7518E:dc.w 0
		dc.l loc_74E30
byte_75194:	dc.b 9
		dc.b 7
		dc.b 4
		dc.b 5
		dc.b 6
		dc.b 5
		dc.b 4
		dc.b $FC
byte_7519C:	dc.b 9
		dc.b $B
		dc.b 8
		dc.b 9
		dc.b $A
		dc.b 9
		dc.b 8
		dc.b $FC
		dc.b 2
		dc.b 4
		dc.b 4
		dc.b 5
		dc.b 6
		dc.b $F4
Pal_LBZFinalBoss2:	binclude "Levels/LBZ/Palettes/Final Boss 2.bin"
	even

; ---------------------------------------------------------------------------

Obj_MHZ_Miniboss:
		btst	#5,OptionsBits.w		; NAT: Check if bosses are on
		bne.s	.enabled			; if are, branch
		lea	.screen(pc),a1			; else, lock screen
		jmp	Boss_Force_End_2		;

.screen		dc.w $4290, $4298, $710, $710

.enabled	st	BossHitMode.w			; NAT: Enable hit mode
		clr.w	BossHitsP1.w			; clear hits count
		move.l	#.ok,(a0)			; set new obj

.ok		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_751F0(pc,d0.w),d1
		jsr	off_751F0(pc,d1.w)
		move.w	(Displace_Obj_X).w,d0
	;	beq.s	loc_751E2
		sub.w	d0,$10(a0)

loc_751E2:
		bsr.w	sub_75D80
		bsr.w	sub_75D50
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------
off_751F0:	dc.w loc_75220-off_751F0

		dc.w loc_752D4-off_751F0
		dc.w loc_7531C-off_751F0
		dc.w loc_752D4-off_751F0
		dc.w loc_75392-off_751F0
		dc.w loc_753B6-off_751F0
		dc.w loc_753DE-off_751F0
		dc.w loc_7541A-off_751F0
		dc.w loc_7544C-off_751F0
		dc.w loc_754A0-off_751F0
		dc.w loc_754E0-off_751F0
		dc.w loc_75532-off_751F0
		dc.w loc_75564-off_751F0
		dc.w loc_754A0-off_751F0
		dc.w loc_755AE-off_751F0
		dc.w loc_754A0-off_751F0
		dc.w loc_7560C-off_751F0
		dc.w loc_7565C-off_751F0
		dc.w loc_754A0-off_751F0
		dc.w loc_75694-off_751F0
		dc.w loc_756C6-off_751F0
		dc.w loc_756FC-off_751F0
		dc.w loc_7571C-off_751F0
		dc.w loc_757A0-off_751F0
; ---------------------------------------------------------------------------

loc_75220:
		lea	ObjDat3_75E52(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.w	(Camera_X_pos).w,d0
		addi.w	#$110,d0
		move.w	d0,$10(a0)
		move.w	(Camera_Y_pos).w,d0
		subi.w	#$78,d0
		move.w	d0,$14(a0)
		move.b	#6,$29(a0)
		move.w	a0,(__u_FAA4).w
		move.b	#5,$42(a0)
		move.l	(V_int_run_count).w,(RNG_seed).w
		st	Boss_flag.w
		move.w	#$100,$1A(a0)
		move.w	#$97,$2E(a0)
		move.l	#loc_752E6,$34(a0)
		move.l	#byte_75EAE,$30(a0)
		move.b	#$18,$1E(a0)
		lea	ChildObjDat_75E84(pc),a2
		jsr	CreateChild1_Normal.w
		jsr	Create_New_Sprite.w
		bne.s	loc_7529E
		move.l	#Obj_Song_Fade_Transition,(a1)
		move.b	#Mus_Minib_SK,$2C(a1)

loc_7529E:
		lea	(ArtKosM_MHZMiniboss).l,a1
		move.w	#$75A0,d2
		jsr	Queue_Kos_Module.w
		lea	(ArtKosM_MHZMinibossLog).l,a1
		move.w	#-$6C20,d2
		jsr	Queue_Kos_Module.w
		lea	(PLC_75F48).l,a1
		jsr	Load_PLC_Raw.w
		lea	Pal_MHZMiniboss(pc),a1
		jmp	PalLoad_Line1.w
; ---------------------------------------------------------------------------

loc_752D4:
		jsr	Animate_RawMultiDelay.w
		jsr	MoveSprite2.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_752E6:
		move.b	#4,5(a0)
		clr.w	$1A(a0)
		move.b	$11(a0),$3A(a0)
		move.w	$14(a0),$3C(a0)
		move.b	#3,$39(a0)

loc_75302:

		move.w	#$80,d0
		move.w	d0,$3E(a0)
		move.w	d0,$1A(a0)
		move.w	#$10,$40(a0)
		bclr	#0,$38(a0)
		rts
; ---------------------------------------------------------------------------

loc_7531C:
		jsr	Animate_RawMultiDelay.w
		jsr	Swing_UpAndDown_Count.w
		bne.s	loc_75330
		jmp	MoveSprite2.w
; ---------------------------------------------------------------------------

loc_75330:

		move.b	#6,5(a0)
		move.w	$3C(a0),$14(a0)
		move.w	#$400,$18(a0)
		clr.w	$1A(a0)
		move.w	#$1F,$2E(a0)
		move.l	#loc_75356,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_75356:
		move.b	#8,5(a0)
		move.b	#5,$22(a0)
		move.w	#$4F,$2E(a0)
		move.l	#loc_753A4,$34(a0)
		move.w	#$6000,(Camera_target_max_X_pos).w
		move.w	#$6000,(__u_FA92).w
		jsr	Create_New_Sprite.w
		bne.s	locret_75390
		move.l	#loc_75E1A,(a1)
		move.w	(Camera_max_X_pos).w,$34(a1)

locret_75390:
		rts
; ---------------------------------------------------------------------------

loc_75392:
		tst.b	4(a0)
		bpl.s	locret_753B4
		jsr	MoveSprite2.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_753A4:
		move.b	#$A,5(a0)
		move.b	#4,$22(a0)
		addq.w	#2,$10(a0)

locret_753B4:
		rts
; ---------------------------------------------------------------------------

loc_753B6:
		move.w	$18(a0),d0
		addi.w	#-$20,d0
		move.w	d0,$18(a0)
		beq.s	loc_753CA
		jmp	MoveSprite2.w
; ---------------------------------------------------------------------------

loc_753CA:
		move.b	#$C,5(a0)
		move.b	$3A(a0),$11(a0)
		clr.w	$18(a0)
		bra.w	loc_75302
; ---------------------------------------------------------------------------

loc_753DE:
		jsr	Swing_UpAndDown.w
		jsr	MoveSprite2.w
		move.w	$10(a0),d0
		sub.w	(Camera_X_pos).w,d0
		cmpi.w	#$110,d0
		bls.s	loc_753FA
		rts
; ---------------------------------------------------------------------------

loc_753FA:
		move.b	#$E,5(a0)
		move.l	#byte_75EBB,$30(a0)
		move.l	#loc_75444,$34(a0)
		clr.b	$24(a0)
		clr.b	$23(a0)
		rts
; ---------------------------------------------------------------------------

loc_7541A:
		jsr	Swing_UpAndDown.w
		jsr	MoveSprite2.w
		jsr	Animate_RawMultiDelay.w
		beq.s	locret_75442
		cmpi.b	#$A,$23(a0)
		bne.s	locret_75442
		subq.b	#1,$42(a0)
		moveq	#-$75,d0
		jmp	Play_Sound_2.w
; ---------------------------------------------------------------------------

loc_75444:

		move.b	#$10,5(a0)

locret_75442:
		rts
; ---------------------------------------------------------------------------

loc_7544C:
		jsr	Swing_UpAndDown.w
		tst.w	d3
		bne.s	loc_7545C
		jmp	MoveSprite2.w
; ---------------------------------------------------------------------------

loc_7545C:
		move.b	#$12,5(a0)
		move.w	#$200,$1A(a0)
		cmpi.b	#1,$42(a0)
		beq.s	loc_75480
		move.w	#$F,$2E(a0)
		move.l	#loc_754AC,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_75480:
		move.w	#7,$2E(a0)
		move.l	#loc_754BE,$34(a0)
	;	cmpi.b	#2,(Player_1+character_id).w
	;	bne.s	locret_7549E
	;	move.l	#loc_754D6,$34(a0)

locret_7549E:
		rts
; ---------------------------------------------------------------------------

loc_754A0:
		jsr	MoveSprite2.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_754AC:
		move.b	#$E,5(a0)
		move.l	#loc_75444,$34(a0)
		bra.w	loc_75302
; ---------------------------------------------------------------------------

loc_754BE:
		move.b	#$14,5(a0)
		move.l	#byte_75ED0,$30(a0)
		move.l	#loc_75508,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_754D6:
		move.b	#$20,5(a0)
		bra.w	loc_75302
; ---------------------------------------------------------------------------

loc_754E0:
		jsr	Animate_RawMultiDelay.w
		beq.s	locret_75506
		cmpi.b	#$12,$22(a0)
		bne.s	loc_754F8
		moveq	#-$74,d0
		jsr	Play_Sound_2.w

loc_754F8:
		cmpi.b	#$C,$23(a0)
		bne.s	locret_75506
		subi.w	#$20,$10(a0)

locret_75506:

		rts
; ---------------------------------------------------------------------------

loc_75508:
		move.b	#$16,5(a0)
		bset	#6,$38(a0)
		move.l	#byte_75EF3,$30(a0)
		move.w	#-$400,$18(a0)
		move.w	#-$400,$1A(a0)
		moveq	#-$74,d0
		jmp	Play_Sound_2.w
; ---------------------------------------------------------------------------

loc_75532:
		jsr	Animate_RawMultiDelay.w
		jsr	MoveSprite.w
		tst.w	$1A(a0)
		bmi.s	locret_7554E
		jsr	ObjCheckFloorDist.w
		tst.w	d1
		bmi.s	loc_75550

locret_7554E:
		rts
; ---------------------------------------------------------------------------

loc_75550:
		move.b	#$18,5(a0)
		move.w	#-$200,$18(a0)
		move.w	#-$300,$1A(a0)
		rts
; ---------------------------------------------------------------------------

loc_75564:
		jsr	MoveSprite.w
		move.w	$1A(a0),d0
		bmi.s	locret_75576
		cmpi.w	#$100,d0
		bhs.s	loc_75578

locret_75576:
		rts
; ---------------------------------------------------------------------------

loc_75578:
		move.b	#$1A,5(a0)
		bclr	#6,$38(a0)
		move.w	#$100,$18(a0)
		move.w	#-$400,$1A(a0)
		move.w	#$10,$2E(a0)
		move.l	#loc_755A0,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_755A0:
		move.b	#$1C,5(a0)
		bset	#6,$38(a0)
		rts
; ---------------------------------------------------------------------------

loc_755AE:
		jsr	MoveSprite.w
		tst.w	$1A(a0)
		bmi.s	locret_755C4
		move.w	$14(a0),d0
		cmp.w	$3C(a0),d0
		bhs.s	loc_755C6

locret_755C4:
		rts
; ---------------------------------------------------------------------------

loc_755C6:
		move.b	#$1E,5(a0)
		move.b	#5,$22(a0)
		bclr	#6,$38(a0)
		move.w	$3C(a0),$14(a0)
		clr.w	$16(a0)
		clr.w	$1A(a0)
		move.w	#$400,$18(a0)
		move.w	#$2A,$2E(a0)
		move.l	#loc_75330,$34(a0)
		clr.b	$23(a0)
		clr.b	$24(a0)
		move.l	#byte_75F0D,$30(a0)

locret_7565A:
		rts
; ---------------------------------------------------------------------------

loc_7560C:
		jsr	Swing_UpAndDown.w
		jsr	MoveSprite2.w
		jsr	Animate_RawMultiDelay.w
		beq.s	locret_7565A
		cmpi.b	#$A,$23(a0)
		bne.s	locret_7565A
		move.b	#$22,5(a0)
		move.b	#$F,$22(a0)
		clr.b	$23(a0)
		clr.b	$24(a0)
		move.l	#byte_75F02,$30(a0)
		move.l	#loc_7566E,$34(a0)
		subq.b	#1,$42(a0)
		lea	ChildObjDat_75E9E(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_7565C:
		jsr	Swing_UpAndDown.w
		jsr	MoveSprite2.w
		jmp	Animate_RawMultiDelay.w
; ---------------------------------------------------------------------------

loc_7566E:
		move.b	#$24,5(a0)
		move.w	#-$80,$1A(a0)
		move.w	#$3F,$2E(a0)
		move.l	#loc_7568A,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_7568A:
		move.b	#$26,5(a0)
		bra.w	loc_75302
; ---------------------------------------------------------------------------

loc_75694:
		jsr	Swing_UpAndDown.w
		jsr	MoveSprite2.w
		btst	#2,$38(a0)
		beq.s	loc_756C4
; ---------------------------------------------------------------------------

loc_756AA:
		move.b	#$28,5(a0)
		move.b	#0,$22(a0)
		move.w	#-$200,$1A(a0)
		move.l	#byte_75EAE,$30(a0)

loc_756C4:
		rts
; ---------------------------------------------------------------------------

loc_756C6:
		jsr	Animate_RawMultiDelay.w
		jsr	MoveSprite2.w
		move.w	(Camera_Y_pos).w,d0
		addi.w	#$30,d0
		cmp.w	$14(a0),d0
		blo.s	loc_756C4
; ---------------------------------------------------------------------------

loc_756E2:
		move.b	#$2A,5(a0)
		move.w	d0,$14(a0)
		move.w	#$1F,$2E(a0)
		move.l	#loc_75708,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_756FC:
		jsr	Animate_RawMultiDelay.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_75708:
		move.b	#$2C,5(a0)
		move.w	#-$400,$18(a0)
		move.w	#$700,$1A(a0)

loc_7571A:
		rts
; ---------------------------------------------------------------------------

loc_7571C:
		jsr	Animate_RawMultiDelay.w
		move.w	$1A(a0),d0
		addi.w	#-$48,d0
		cmpi.w	#-$700,d0
		blt.s	loc_75734
		move.w	d0,$1A(a0)

loc_75734:
		jsr	MoveSprite2.w
		move.w	(Camera_Y_pos).w,d0
		subi.w	#$80,d0
		cmp.w	$14(a0),d0
		blo.s	loc_7571A
; ---------------------------------------------------------------------------

loc_7574A:
		move.b	#$2E,5(a0)
		move.b	#5,$22(a0)
		move.w	(Camera_X_pos_copy).w,d0
		addi.w	#$30,d0
		move.w	d0,$10(a0)
		move.w	(Camera_Y_pos_copy).w,d0
		subi.w	#$5C,d0
		move.w	d0,$14(a0)
		move.w	#$400,$18(a0)
		move.w	#$400,$1A(a0)
		move.w	#$37,$2E(a0)
		move.l	#loc_75330,$34(a0)
		clr.b	$23(a0)
		clr.b	$24(a0)
		move.l	#byte_75F0D,$30(a0)
		bclr	#2,$38(a0)
		rts
; ---------------------------------------------------------------------------

loc_757A0:
		move.w	$1A(a0),d0
		addi.w	#-$10,d0
		bmi.s	loc_757AE
		move.w	d0,$1A(a0)

loc_757AE:
		jsr	MoveSprite2.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_757BA:
		jmp	Obj_EndSignControl_HitHUD	; NAT: do extra stuff here
; ---------------------------------------------------------------------------

loc_757C0:

		move.l	#loc_757D6,(a0)
		bset	#4,$2B(a0)
		lea	word_75E5E(pc),a1
		jmp	SetUp_ObjAttributes2.w
; ---------------------------------------------------------------------------

loc_757D6:
		bsr.w	sub_75C8A
		jsr	Refresh_ChildPositionAdjusted.w
		movea.w	$46(a0),a1
		btst	#6,$38(a1)
		bne.w	loc_7582A
		move.b	(V_int_run_count+3).w,d0
		btst	#0,d0
		bne.w	loc_7582A
		andi.b	#$F,d0
		bne.s	loc_75824
		tst.b	4(a0)
		bpl.s	loc_75824
		jsr	Create_New_Sprite.w
		bne.s	loc_75824
		move.l	#loc_759FC,(a1)
		move.w	a0,$46(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)

loc_75824:

		jmp	Child_DrawTouch_Sprite.w
; ---------------------------------------------------------------------------

loc_7582A:

		btst	#7,$2A(a1)
		bne.s	loc_75834
		rts
; ---------------------------------------------------------------------------

loc_75834:
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------

loc_7583A:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_7584E(pc,d0.w),d1
		jsr	off_7584E(pc,d1.w)
		jmp	Child_DrawTouch_Sprite.w
; ---------------------------------------------------------------------------
off_7584E:	dc.w loc_7585A-off_7584E

		dc.w loc_7589E-off_7584E
		dc.w loc_7592A-off_7584E
		dc.w loc_75924-off_7584E
		dc.w loc_7592A-off_7584E
		dc.w loc_75986-off_7584E
; ---------------------------------------------------------------------------

loc_7585A:
		lea	word_75E7E(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.b	#6,$1E(a0)
		move.w	#-$300,$1A(a0)
		move.l	#byte_75F1C,$30(a0)
		moveq	#0,d0
		lea	(Player_1).w,a1
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		beq.s	loc_7589A
		smi	d1
		bpl.s	loc_7588E
		neg.w	d0

loc_7588E:
		swap	d0
		divu.w	#$3800,d0
		tst.b	d1
		beq.s	loc_7589A
		neg.w	d0

loc_7589A:

		move.w	d0,$18(a0)

loc_7589E:
		jsr	MoveSprite_LightGravity.w
		tst.w	$1A(a0)
		bmi.s	loc_758B8
		jsr	ObjCheckFloorDist.w
		tst.w	d1
		bpl.s	loc_758B8
		bsr.w	sub_758BE

loc_758B8:

		jmp	Animate_RawMultiDelay.w

; =============== S U B R O U T I N E =======================================


sub_758BE:
		bset	#7,$38(a0)
		bne.s	loc_758E2
		add.w	d1,$14(a0)
		move.w	$18(a0),d0
		asr.w	#1,d0
		move.w	d0,$18(a0)
		move.w	$1A(a0),d0
		asr.w	#1,d0
		neg.w	d0
		move.w	d0,$1A(a0)
		rts
; ---------------------------------------------------------------------------

loc_758E2:
		move.b	#4,5(a0)
		add.w	d1,$14(a0)
		move.w	#$1F,$2E(a0)
		move.l	#loc_758FC,$34(a0)
		rts
; End of function sub_758BE

; ---------------------------------------------------------------------------

loc_758FC:
		move.b	#6,5(a0)
		clr.w	$18(a0)
		move.w	#-$200,$1A(a0)
		move.w	#$1F,$2E(a0)
		move.l	#loc_75936,$34(a0)
		lea	ChildObjDat_75EA6(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_75924:
		jsr	MoveSprite2.w

loc_7592A:
		jsr	Animate_RawMultiDelay.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_75936:
		move.b	#8,5(a0)
		move.w	#$1F,$2E(a0)
		move.l	#loc_7594C,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_7594C:
		move.b	#$A,5(a0)
		move.w	#prio(3),8(a0)
		move.w	#-$300,$1A(a0)
		movea.w	$46(a0),a1
		moveq	#0,d0
		move.w	$10(a1),d0
		subq.w	#6,d0
		sub.w	$10(a0),d0
		smi	d1
		bpl.s	loc_75974
		neg.w	d0

loc_75974:
		swap	d0
		divu.w	#$6100,d0
		tst.b	d1
		beq.s	loc_75980
		neg.w	d0

loc_75980:
		move.w	d0,$18(a0)
		rts
; ---------------------------------------------------------------------------

loc_75986:
		addi.w	#$10,$1A(a0)
		jsr	MoveSprite2.w
		tst.w	$1A(a0)
		bmi.s	loc_759AA
		movea.w	$46(a0),a1
		move.w	$14(a1),d0
		addi.w	#-8,d0
		cmp.w	$14(a0),d0
		bls.s	loc_759B0

loc_759AA:
		jmp	Animate_RawMultiDelay.w
; ---------------------------------------------------------------------------

loc_759B0:
		movea.w	$46(a0),a1
		bset	#2,$38(a1)
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------

loc_759C0:
		lea	word_75E5E(pc),a1
		jsr	SetUp_ObjAttributes2.w
		move.l	#loc_759D0,(a0)

loc_759D0:
		movea.w	$46(a0),a1
		move.b	(V_int_run_count+3).w,d0
		btst	#0,d0
		bne.w	loc_759EC
		jsr	Refresh_ChildPosition.w
		jmp	Child_DrawTouch_Sprite.w
; ---------------------------------------------------------------------------

loc_759EC:
		btst	#7,$2A(a1)
		bne.s	loc_759F6
		rts
; ---------------------------------------------------------------------------

loc_759F6:
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------

loc_759FC:
		lea	(ObjDat3_6646E).l,a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_75A24,(a0)
		bsr.w	sub_75C06
		move.w	(Camera_Y_pos).w,d0
		addi.w	#$AC,d0
		move.w	d0,$14(a0)
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_75A24:
		move.w	$18(a0),d0
		add.w	$40(a0),d0
		cmpi.w	#-$100,d0
		ble.s	loc_75A44
		cmpi.w	#$100,d0
		bge.s	loc_75A48
		move.l	#loc_75A48,(a0)
		bset	#0,$38(a0)

loc_75A44:
		move.w	d0,$18(a0)

loc_75A48:

		move.w	$1A(a0),d0
		move.w	$3E(a0),d1
		btst	#0,$38(a0)
		beq.s	loc_75A5A
		moveq	#-1,d1

loc_75A5A:
		sub.w	d1,d0
		cmpi.w	#$80,d0
		blt.s	loc_75A68
		move.l	#loc_75A6C,(a0)

loc_75A68:
		move.w	d0,$1A(a0)

loc_75A6C:
		jsr	MoveSprite2.w
		tst.b	4(a0)
		bpl.s	loc_75A7E
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_75A7E:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

Obj_91_2:
		lea	ObjDat3_75E66(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_75A94,(a0)

loc_75A94:
		move.w	(__u_FAA4).w,d0
		beq.s	loc_75ACE
		movea.w	d0,a1
		cmpi.l	#Obj_MHZ_Miniboss.ok,(a1)	; NAT: Well fuck....
		bne.s	loc_75ACE
		tst.b	4(a0)
		bmi.s	loc_75AB0
		move.b	#5,$42(a1)

loc_75AB0:
		move.b	$42(a1),d0
		cmp.b	$22(a0),d0
		beq.s	loc_75ACE
		move.b	d0,$22(a0)
		cmpi.b	#5,d0
		bhs.s	loc_75ACE
		lea	ChildObjDat_75E98(pc),a2
		jsr	CreateChild6_Simple.w

loc_75ACE:

		jmp	Sprite_CheckDelete.w
; ---------------------------------------------------------------------------

loc_75AD4:
		lea	ObjDat3_75E72(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_75B34,(a0)
		move.b	#$18,$1E(a0)
		movea.w	(__u_FAA4).w,a1
		moveq	#0,d2
		move.b	$42(a1),d2
		move.b	byte_75B2E(pc,d2.w),d3
		ext.w	d3
		add.w	d3,$14(a0)
		jsr	Random_Number.w
		cmpi.b	#2,(Player_1+character_id).w
		beq.s	loc_75B0E
		moveq	#0,d0

loc_75B0E:
		move.w	#-$400,d1
		btst	#0,d0
		beq.s	loc_75B24
		tst.b	d2
		beq.s	loc_75B24
		move.w	#-$200,d1
		sne	$3A(a0)

loc_75B24:

		move.w	d1,$18(a0)
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
byte_75B2E:	dc.b $40
		dc.b $20
		dc.b 0
		dc.b $E0
		dc.b $C0
		dc.b 0
; ---------------------------------------------------------------------------

loc_75B34:
		lea	byte_75F12(pc),a1
		jsr	Animate_RawNoSST.w
		tst.b	$3A(a0)
		beq.s	loc_75B58
		addi.w	#$20,$1A(a0)
		jsr	ObjCheckFloorDist.w
		tst.w	d1
		bpl.s	loc_75B58
		neg.w	$1A(a0)

loc_75B58:

		jsr	MoveSprite2.w
		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------

loc_75B64:
		bsr.w	sub_75B6E
		jmp	Child_AddToTouchList.w

; =============== S U B R O U T I N E =======================================


sub_75B6E:
		movea.w	$46(a0),a1
		moveq	#0,d0
		move.b	$22(a1),d0
		lsl.w	#2,d0
		lea	byte_75BAE(pc,d0.w),a2
		move.b	(a2)+,d0
		ext.w	d0
		move.w	$10(a1),d1
		btst	#0,4(a1)
		beq.s	loc_75B90
		neg.w	d0

loc_75B90:
		add.w	d0,d1
		move.w	d1,$10(a0)
		move.b	(a2)+,d0
		ext.w	d0
		move.w	$14(a1),d1
		add.w	d0,d1
		move.w	d1,$14(a0)
		move.b	(a2)+,$28(a0)
		move.b	(a2)+,$22(a0)
		rts
; End of function sub_75B6E

; ---------------------------------------------------------------------------
byte_75BAE:	dc.b  $D6, $28,	$A3,  $B
		dc.b  $D6, $29,	$A3,  $B
		dc.b  $D6, $2A,	$A3,  $B
		dc.b  $D6, $2B,	$A3,  $B
		dc.b  $C8, $F0,	$9A,  $A
		dc.b  $C8, $F0,	$9A,  $A
		dc.b  $C8, $F0,	$9A,  $A
		dc.b  $D8, $F5,	$9A,  $A
		dc.b  $CF, $F5,	$9A,  $A
		dc.b  $F8, $F8,	$9A,  $A
		dc.b  $EF, $F8,	$9A,  $A
		dc.b  $24,  $E,	$9B,   4
		dc.b  $24,  $D,	$9B,   4
		dc.b	0,   0,	  0,   0
		dc.b  $24,  $E,	$9B,   4
		dc.b	0,   0,	  0,   0
		dc.b  $2B,  $E,	$9B,   4
		dc.b  $2A,  $E,	$9B,   4
		dc.b  $29,  $E,	$9B,   4
		dc.b	0,   0,	  0,   0
		dc.b  $DF, $28,	$A3,  $B
		dc.b  $D6, $28,	$A3,  $B

; =============== S U B R O U T I N E =======================================


sub_75C06:
		move.w	(Camera_Y_pos).w,d2
		addi.w	#$E0,d2
		sub.w	$14(a0),d2
		lsr.w	#3,d2
		andi.w	#$1E,d2
		jsr	Random_Number.w
		move.w	word_75C4A(pc,d2.w),d3
		andi.w	#$1FF,d0
		add.w	d0,d3
		moveq	#-$C,d4
		btst	#1,d0
		beq.s	loc_75C34
		neg.w	d3
		neg.w	d4

loc_75C34:
		move.w	d3,$18(a0)
		move.w	d4,$40(a0)
		swap	d0
		andi.w	#$F,d0
		addq.w	#8,d0
		move.w	d0,$3E(a0)
		rts
; End of function sub_75C06

; ---------------------------------------------------------------------------
word_75C4A:	dc.w $400
		dc.w $400
		dc.w $400
		dc.w $400
		dc.w $380
		dc.w $300
		dc.w $280
		dc.w $200
		dc.w $180
		dc.w $140
		dc.w $100
		dc.w $C0
		dc.w $80
		dc.w $80
		dc.w $80
		dc.w $80
		dc.w $40
		dc.w $40
		dc.w $40
		dc.w $40
		dc.w $3C
		dc.w $38
		dc.w $34
		dc.w $30
		dc.w $2C
		dc.w $28
		dc.w $24
		dc.w $20
		dc.w $1C
		dc.w $18
		dc.w $14
		dc.w $10

; =============== S U B R O U T I N E =======================================


sub_75C8A:
		movea.w	$46(a0),a1
		moveq	#0,d0
		move.b	$22(a1),d0
		move.b	RawAni_75CB6(pc,d0.w),$22(a0)
		add.w	d0,d0
		move.w	d0,d1
		lea	word_75CCC(pc,d0.w),a2
		move.w	(a2)+,8(a0)
		add.w	d1,d1
		add.b	$2C(a0),d1
		lea	word_75CF8(pc,d1.w),a2
		move.w	(a2)+,$42(a0)
		rts
; End of function sub_75C8A

; ---------------------------------------------------------------------------
RawAni_75CB6:	dc.b  $16, $16, $16, $16, $16, $17, $16, $16, $16, $16, $16, $16, $16, $16, $16, $16, $16, $16, $16, $16
		dc.b  $16, $16
word_75CCC:	dc.w prio(5), prio(5), prio(5), prio(5)
		dc.w prio(5), prio(5), prio(5), prio(5)
		dc.w prio(5), prio(5), prio(5), prio(3)
		dc.w prio(3), prio(3), prio(3), prio(3)
		dc.w prio(5), prio(5), prio(5), prio(3)
		dc.w prio(5), prio(5)
word_75CF8:	dc.w $B1C
		dc.w $11C
		dc.w $B1C
		dc.w $11C
		dc.w $B1C
		dc.w $11C
		dc.w $B1C
		dc.w $11C
		dc.w $F81C
		dc.w $FF1C
		dc.w $E812
		dc.w $EF12
		dc.w $F81C
		dc.w $FF1C
		dc.w $F81C
		dc.w $FF1C
		dc.w $EF1C
		dc.w $F61C
		dc.w $F81C
		dc.w $FF1C
		dc.w $EF1C
		dc.w $F61C
		dc.w $F81C
		dc.w $B1C
		dc.w $F81B
		dc.w $B1B
		dc.w $F81C
		dc.w $B1C
		dc.w $F81C
		dc.w $B1C
		dc.w $F81C
		dc.w $B1C
		dc.w $F81C
		dc.w $FF1C
		dc.w $F01C
		dc.w $F71C
		dc.w $EF1C
		dc.w $F61C
		dc.w $F81C
		dc.w $B1C
		dc.w $C1C
		dc.w $61C
		dc.w $B1C
		dc.w $11C

; =============== S U B R O U T I N E =======================================


sub_75D50:
		moveq	#0,d0
		move.b	$22(a0),d0
		move.w	#prio(4),8(a0)
		move.b	byte_75D6A(pc,d0.w),d0
		beq.s	locret_75D68
		move.w	#prio(1),8(a0)

locret_75D68:
		rts
; End of function sub_75D50

; ---------------------------------------------------------------------------
byte_75D6A:	dc.b 0
		dc.b 0
		dc.b 0
		dc.b 0
		dc.b 1
		dc.b 1
		dc.b 1
		dc.b 1
		dc.b 1
		dc.b 0
		dc.b 0
		dc.b 0
		dc.b 0
		dc.b 0
		dc.b 0
		dc.b 0
		dc.b 0
		dc.b 0
		dc.b 0
		dc.b 0
		dc.b 0
		dc.b 0

; =============== S U B R O U T I N E =======================================


sub_75D80:
		tst.b	$28(a0)
		bne.s	locret_75DCA
		move.b	$29(a0),d0
		beq.s	loc_75DCC
		tst.b	$20(a0)
		bne.s	loc_75DA0
		move.b	#$20,$20(a0)
		moveq	#$6E,d0
		jsr	Play_Sound_2.w


loc_75DA0:
		bset	#6,$2A(a0)
		moveq	#0,d0
		btst	#0,$20(a0)
		bne.s	loc_75DB4
		addi.w	#8,d0

loc_75DB4:
		bsr.w	sub_75DF4
		subq.b	#1,$20(a0)
		bne.s	locret_75DCA
		bclr	#6,$2A(a0)
		move.b	$25(a0),$28(a0)

locret_75DCA:

		rts
; ---------------------------------------------------------------------------

loc_75DCC:
		move.l	#Wait_FadeToLevelMusic,(a0)
		move.l	#loc_757BA,$34(a0)
		lea	Child6_CreateBossExplosion.w,a2
		jsr	CreateChild6_Simple.w
		bne.s	loc_75DEE
		move.b	#$10,$2C(a1)

loc_75DEE:
		jmp	BossDefeated_StopTimer.w
; End of function sub_75D80


; =============== S U B R O U T I N E =======================================


sub_75DF4:
		lea	word_75E02(pc),a1
		lea	word_75E0A(pc,d0.w),a2
		jmp	CopyWordData_4.w
; End of function sub_75DF4

; ---------------------------------------------------------------------------
word_75E02:	dc.w $FC2E
		dc.w $FC36
		dc.w $FC3A
		dc.w $FC3C
word_75E0A:	dc.w $224
		dc.w $222
		dc.w $A64
		dc.w $642
		dc.w $AAA
		dc.w $EEE
		dc.w $888
		dc.w $666
; ---------------------------------------------------------------------------

loc_75E1A:
		move.w	(Camera_max_X_pos).w,d0
		cmp.w	$34(a0),d0
		bne.s	loc_75E4C
		move.l	$30(a0),d1
		addi.l	#$4000,d1
		move.l	d1,$30(a0)
		swap	d1
		add.w	d1,d0
		cmp.w	(__u_FA92).w,d0
		bhs.s	loc_75E46
		move.w	d0,(Camera_max_X_pos).w
		move.w	d0,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_75E46:
		move.w	(__u_FA92).w,(Camera_max_X_pos).w

loc_75E4C:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------
ObjDat3_75E52:	dc.l Map_MHZMiniboss
		dc.w $A3AD
		dc.w prio(4)
		dc.b $48
		dc.b $40
		dc.b 0
		dc.b $F
word_75E5E:	dc.w $83AD

		dc.w prio(5)
		dc.b $C
		dc.b $C
		dc.b $16
		dc.b $9A
ObjDat3_75E66:	dc.l Map_MHZMinibossTree
		dc.w $6001
		dc.w prio(7)
		dc.b $14
		dc.b $90
		dc.b 5
		dc.b 0
ObjDat3_75E72:	dc.l Map_MHZMinibossLog
		dc.w $649F
		dc.w prio(7)
		dc.b $14
		dc.b $14
		dc.b 6
		dc.b $86
word_75E7E:	dc.w prio(6)
		dc.b 8
		dc.b 8
		dc.b $18
		dc.b $8B
ChildObjDat_75E84:dc.w 1
		dc.l loc_757C0
		dc.w 0
		dc.l loc_757C0
		dc.w 0
		dc.l loc_75B64
		dc.w 0
ChildObjDat_75E98:dc.w 0
		dc.l loc_75AD4
ChildObjDat_75E9E:dc.w 0
		dc.l loc_7583A
		dc.w $F8
ChildObjDat_75EA6:dc.w 0
		dc.l loc_759C0
		dc.w $113
byte_75EAE:	dc.b	0,  $B

		dc.b	1,   5
		dc.b	2,   5
		dc.b	3,  $B
		dc.b	2,   5
		dc.b	1,   5
		dc.b  $FC
byte_75EBB:	dc.b	4, $27
		dc.b	4, $27
		dc.b	7,   2
		dc.b	9,   2
		dc.b   $C,   2
		dc.b   $D, $3B
		dc.b   $B,   2
		dc.b	9,   2
		dc.b	7,   2
		dc.b	4, $27
		dc.b  $F4
byte_75ED0:	dc.b	4, $27
		dc.b	4, $27
		dc.b	7,   2
		dc.b	9,   2
		dc.b   $C,   2
		dc.b   $D, $27
		dc.b  $10,   3
		dc.b  $11,   7
		dc.b  $12,   7
		dc.b  $11,   7
		dc.b  $12,   7
		dc.b  $11,   7
		dc.b  $12,   7
		dc.b  $11,   7
		dc.b  $12,   7
		dc.b  $11,   7
		dc.b  $12, $31
		dc.b  $F4
byte_75EF3:	dc.b   $A,   3
		dc.b   $A,   3
		dc.b	8,   3
		dc.b	6,   3
		dc.b  $F8,  $A
		dc.b	6, $7F
		dc.b	6, $7F
		dc.b  $FC
byte_75F02:	dc.b   $F, $31
		dc.b   $F, $31
		dc.b  $13,   4
		dc.b  $14,   4
		dc.b  $15,   4
		dc.b  $F4
byte_75F0D:	dc.b	5, $7F

		dc.b	5, $7F
		dc.b  $FC
byte_75F12:	dc.b	1,   0
		dc.b	1,   2
		dc.b	3,   4
		dc.b	5,   6
		dc.b	7, $FC
byte_75F1C:	dc.b  $18,   3
		dc.b  $19,   3
		dc.b  $1A,   3
		dc.b  $1B,   3
		dc.b  $1C,  $B
		dc.b  $FC,   0
Pal_MHZMiniboss:	binclude "Levels/MHZ/Palettes/Miniboss.bin"
	even

PLC_75F48:	dc.w 0
		dc.l ArtNem_BossExplosion
		dc.w $9A40
; ---------------------------------------------------------------------------

Obj_MHZ_EndBoss:
		lea	word_769F4(pc),a1
		jsr	(Check_CameraInRange).l

		btst	#5,OptionsBits.w		; NAT: Check if bosses are on
		bne.s	.enabled			; if are, branch
		lea	.screen(pc),a1			; else, lock screen
		jmp	Boss_Force_End_2		;

.screen		dc.w $3C90, $3C90, $000, $000

.enabled	st	BossHitMode.w			; NAT: Enable hit mode
		clr.w	BossHitsP1.w			; clear hits count
		move.l	#loc_75FD4,(a0)			; set new obj
		move.w	#$32C,PlayerSpawn+2.w		; NAT: Set respawn y-pos

		move.w	(Camera_X_pos).w,(Camera_min_X_pos).w
		st	Boss_flag.w
		jsr	loc_85D7E.w
		addi.w	#$C0,$10(a0)
		lea	ObjDat3_76928(pc),a1
		jsr	SetUp_ObjAttributes.w
		clr.b	5(a0)
		clr.b	(__u_FAA9).w
		lea	(ArtKosM_MHZEndBoss).l,a1
		move.w	#$7D80,d2
		jsr	Queue_Kos_Module.w
		moveq	#$7B,d0
		jsr	Load_PLC.w
		lea	Pal_MHZEndBoss(pc),a1
		jsr	PalLoad_Line1.w
		lea	ChildObjDat_7699C(pc),a2
		jsr	CreateChild1_Normal.w
		lea	ChildObjDat_76982(pc),a2
		jsr	CreateChild1_Normal.w
		lea	ChildObjDat_7697C(pc),a2
		jsr	CreateChild6_Simple.w
		lea	ChildObjDat_76976(pc),a2
		jmp	CreateChild6_Simple.w
; ---------------------------------------------------------------------------

loc_75FD4:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_75FF4(pc,d0.w),d1
		jsr	off_75FF4(pc,d1.w)
		move.w	(Displace_Obj_X).w,d0
		sub.w	d0,$10(a0)
		bsr.w	sub_76782

		move.w	Camera_X_pos.w,d0		; NAT: get camx to d0
		add.w	#$1C,d0				; go forwards a bit
		move.w	d0,PlayerSpawn.w		; set spawn x
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------
off_75FF4:	dc.w loc_76004-off_75FF4
		dc.w loc_7601A-off_75FF4
		dc.w loc_76038-off_75FF4
		dc.w loc_76062-off_75FF4
		dc.w loc_76088-off_75FF4
		dc.w loc_76088-off_75FF4
		dc.w loc_76106-off_75FF4
		dc.w loc_76088-off_75FF4
; ---------------------------------------------------------------------------

loc_76004:
		move.b	#$F,$28(a0)
		move.b	#9,$29(a0)
		move.b	$28(a0),$25(a0)
		clr.b	(__u_FA88).w

loc_7601A:
		btst	#2,$38(a0)
		beq.s	locret_76036
		move.b	#4,5(a0)
		move.w	#$3F,$2E(a0)
		move.l	#loc_7603E,$34(a0)

locret_76036:
locret_76060:
		rts
; ---------------------------------------------------------------------------

loc_76038:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_7603E:
		move.b	#6,5(a0)
		move.w	#-$400,$1A(a0)			; NAT: Make boss move up faster
		move.w	#$23/2,$2E(a0)
		move.l	#loc_7606E,$34(a0)
		moveq	#-$30,d0
		jmp	Play_Sound_2.w
; ---------------------------------------------------------------------------

loc_76062:
		jsr	MoveSprite2.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_7606E:
		move.b	#8,5(a0)
		move.w	#$1C,$2E(a0)		; NAT: Smaller delay. Must be this
		move.l	#loc_7609A,$34(a0)
		jmp	Swing_Setup1.w
; ---------------------------------------------------------------------------

loc_76088:

		jsr	Swing_UpAndDown.w
		jsr	MoveSprite2.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_7609A:
		move.b	#$A,5(a0)
		bset	#6,$38(a0)
		move.w	#$400,$18(a0)
		move.w	#$3F,$2E(a0)
		move.l	#loc_760C4,$34(a0)
		moveq	#-$4A,d0
		jmp	Play_Sound_2.w
; ---------------------------------------------------------------------------

loc_760C4:
		move.b	#$C,5(a0)
		bset	#7,$38(a0)
		move.w	#$4180,$10(a0)
		move.w	#$2E0,$14(a0)
		bset	#3,$38(a0)
		clr.w	$18(a0)
		jsr	Create_New_Sprite.w
		bne.s	loc_760F4
		move.l	#loc_76896,(a1)

loc_760F4:
		move.w	#$4000,(__u_FA92).w	; NAT: Changed from $45A0, because it would bork
		lea	Child6_IncLevX.w,a2
		jmp	CreateChild6_Simple.w
; ---------------------------------------------------------------------------

loc_76106:
		move.w	#$280,(Camera_min_Y_pos).w	; force min y anywaywww
		move.w	(Camera_X_pos).w,d0
		addi.w	#$E0,d0
		cmp.w	$10(a0),d0
		bhs.s	loc_76120
		jsr	Swing_UpAndDown.w
		jmp	MoveSprite2.w
; ---------------------------------------------------------------------------

loc_76120:
		move.b	#$E,5(a0)
		move.l	#loc_76136,$34(a0)
		clr.w	$2E(a0)
		bra.w	loc_76088
; ---------------------------------------------------------------------------

loc_76136:
		move.w	#$5F,$2E(a0)
		move.w	#$400,d0
	;	cmpi.b	#2,(Player_1+character_id).w
	;	bne.s	loc_7614C
	;	move.w	#$500,d0

loc_7614C:
		move.w	#$100,d1
		bchg	#6,$38(a0)
		beq.s	loc_7615C
		move.w	#-$100,d1

loc_7615C:
		add.w	d1,d0
		move.w	d0,$18(a0)
		rts
; ---------------------------------------------------------------------------

loc_76164:
		jsr	Swing_UpAndDown.w
		jsr	MoveSprite2.w
		cmpi.w	#$44D0,$10(a0)
		blo.s	loc_761A4
		move.l	#Wait_FadeToLevelMusic,(a0)
		bset	#7,$2A(a0)
		move.w	#$14,(ScrShake_Value).w
		move.l	#loc_761B2,$34(a0)
		lea	Child6_CreateBossExplosion.w,a2
		jsr	CreateChild6_Simple.w
		jsr	BossDefeated_StopTimer.w

loc_761A4:
		move.w	(Displace_Obj_X).w,d0
		sub.w	d0,$10(a0)
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_761B2:
		move.l	#loc_761E8,(a0)
		move.w	#prio(2),8(a0)
		bset	#7,$A(a0)
		clr.w	$18(a0)
		move.w	#-$200,$1A(a0)
		bset	#4,$38(a0)
		lea	PLC_76A04(pc),a1
		jsr	Load_PLC_Raw.w
		lea	ChildObjDat_769B0(pc),a2
		jmp	CreateChild6_Simple.w
; ---------------------------------------------------------------------------

loc_761E8:
		jsr	MoveSprite.w
		move.w	(Camera_Y_pos).w,d0
		addi.w	#$120,d0
		cmp.w	$14(a0),d0
		bhs.s	loc_76236
		move.l	#loc_7623C,(a0)
		bset	#0,(__u_FA88).w
		st	(End_Of_Level_Flag).w
		clr.b	(Boss_flag).w
		bset	#5,$38(a0)
		jsr	(PLCLoad_AnimalsAndExplosion).l
	;	jsr	Create_New_Sprite.w
	;	bne.s	loc_76236		; NAT: No load
	;	move.l	#Obj_81,(a1)
	;	move.w	#$4640,$10(a1)
	;	move.w	#$320,$14(a1)

loc_76236:

		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_7623C:
		move.w	(Camera_X_pos).w,d0
		addq.w	#4,d0
		move.w	#$45A0,d1
		cmp.w	d1,d0
		blo.s	loc_7626A
		move.l	#loc_76270,(a0)
		move.w	d1,d0
		move.w	d1,(Camera_min_X_pos).w
		move.w	d1,(Camera_max_X_pos).w
		clr.b	(Scroll_lock).w
		clr.b	(Ctrl_1_locked).w
		clr.b	(Ctrl_2_locked).w
		clr.w	(Ctrl_1_logical).w

loc_7626A:
		move.w	d0,(Camera_X_pos).w

locret_7626C:
		rts
; ---------------------------------------------------------------------------

loc_76270:
		tst.b	(End_Of_Level_Flag).w
		bne.s	locret_7626C
		move.l	#loc_76310,(a0)
		clr.b	(__u_FAA9).w
		move.w	(Camera_X_pos).w,d0
		subi.w	#$40,d0
		move.w	d0,$10(a0)
		move.w	(Camera_Y_pos).w,d0
		addi.w	#$40,d0
		move.w	d0,$14(a0)
		jsr	Restore_PlayerControl.w
		bset	#7,$A(a1)
		lea	(Player_2).w,a1
		bset	#7,$A(a1)
		jsr	Restore_PlayerControl2.w
		jsr	Obj_PlayLevelMusic.w
		st	(Ctrl_1_locked).w
		move.w	#$101,(Ctrl_1_logical).w
		st	(Ctrl_2_locked).w
		move.w	#$101,(Ctrl_2_logical).w
		jsr	(sub_8638A).l
		move.w	#$1BF,$2E(a0)
		move.w	#$55,(ScrEvents_1).w
		move.w	#$5000,(__u_FA92).w
		bclr	#5,$38(a0)
		lea	ChildObjDat_7699C(pc),a2
		jsr	CreateChild1_Normal.w
		lea	(PLC_83D7C).l,a1
		jsr	Load_PLC_Raw.w
		lea	Child6_IncLevX.w,a2
		jmp	CreateChild6_Simple.w
; ---------------------------------------------------------------------------

loc_76310:
		subq.w	#1,$2E(a0)
		bmi.s	loc_76318
		rts
; ---------------------------------------------------------------------------

loc_76318:
		move.l	#loc_76356,(a0)
		bclr	#7,$2A(a0)
		bclr	#4,$38(a0)
		bset	#0,4(a0)
		move.w	#$400,$18(a0)
		clr.w	$1A(a0)
		lea	(Child1_MakeRoboShipFlame).l,a2
		jsr	CreateChild1_Normal.w
		cmpi.b	#2,(Player_1+character_id).w
		bne.w	locret_76060
		jmp	(loc_67B1C).l
; ---------------------------------------------------------------------------

loc_76356:
		moveq	#-$42,d0
		jsr	sub_85E52.w
		jsr	(sub_8638A).l
		moveq	#0,d1
		move.w	(Camera_X_pos).w,d0
		addi.w	#$80,d0
		cmp.w	$10(a0),d0
		bhs.s	loc_76376
		moveq	#-$10,d1

loc_76376:
		jsr	MoveSprite_CustomGravity.w
		move.w	(Camera_Y_pos).w,d0
		subi.w	#$40,d0
		cmp.w	$14(a0),d0
		blo.s	loc_763A4
		move.l	#loc_763B2,(a0)
		bset	#5,$38(a0)
		jsr	Create_New_Sprite.w
		bne.s	loc_763A4
		move.l	#loc_863C0,(a1)

loc_763A4:

		move.w	(Displace_Obj_X).w,d0
		sub.w	d0,$10(a0)
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_763B2:
		lea	(Player_1).w,a1
		cmpi.w	#$4778,$10(a1)
		bhs.s	loc_763C4
		jmp	(loc_86334).l
; ---------------------------------------------------------------------------

loc_763C4:
		move.l	#loc_763D8,(a0)
		clr.w	(Ctrl_1_logical).w
		lea	(Player_1).w,a1
		jmp	Stop_Object.w
; ---------------------------------------------------------------------------

loc_763D8:
		move.w	#$101,(Ctrl_1_logical).w
		move.w	#$101,(Ctrl_2).w
		tst.b	(__u_FAA9).w
		beq.w	locret_76060
		move.l	#loc_76404,(a0)
		move.w	#$2020,(Ctrl_1_logical).w
		lea	(Player_1).w,a1
		move.w	#$200,$18(a1)
		rts
; ---------------------------------------------------------------------------

loc_76404:
		move.w	#$2000,(Ctrl_1_logical).w
		lea	(Player_1).w,a1
		tst.w	$1A(a1)
		bmi.w	locret_76060
		move.l	#loc_76456,(a0)
		jsr	Stop_Object.w
		move.b	#-$7F,$2E(a1)
		move.b	#$11,$20(a1)
		bset	#0,4(a1)
		bset	#0,$2A(a1)
		move.w	#$5F,$2E(a0)
		moveq	#$4A,d0
		jsr	Play_Sound_2.w
		jsr	Create_New_Sprite.w
		bne.s	loc_76456
		move.l	#loc_7646E,(a1)

loc_76456:

		subq.w	#1,$2E(a0)
		bmi.s	loc_7645E
		rts
; ---------------------------------------------------------------------------

loc_7645E:
		move.w	#$400,d0
		jsr	StartNewLevel.w
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_7646E:
		move.l	#loc_76492,(a0)
		lea	(Player_2).w,a1
		move.b	#-$7F,$2E(a1)
		move.b	#$20,$20(a1)
		bclr	#0,4(a1)
		bclr	#0,$2A(a1)
		rts
; ---------------------------------------------------------------------------

loc_76492:
		lea	(Player_2).w,a1
		addq.w	#1,$10(a1)
		subq.w	#1,$14(a1)
		rts
; ---------------------------------------------------------------------------

loc_764A0:
		lea	word_76964(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_764C4,(a0)
		movea.w	$46(a0),a1
		move.w	a0,$44(a1)
		move.b	$28(a0),$25(a0)
		move.b	#-1,$29(a0)

loc_764C4:
		jsr	Refresh_ChildPositionAdjusted.w
		jmp	Child_AddToTouchList.w
; ---------------------------------------------------------------------------

loc_764D0:
		lea	ObjDat3_76934(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_764E0,(a0)

loc_764E0:
		movea.w	$46(a0),a1
		btst	#3,$38(a1)
		beq.s	loc_764F8
		move.l	#loc_764F8,(a0)
		bset	#7,$A(a0)

loc_764F8:

		bsr.w	sub_7675C
		jmp	Child_Draw_Sprite2.w
; ---------------------------------------------------------------------------

loc_76502:
		lea	ObjDat3_76934(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_76516,(a0)
		bsr.w	sub_7673E

loc_76516:
		bsr.w	sub_7675C
		jmp	Child_Draw_Sprite2.w
; ---------------------------------------------------------------------------

loc_76520:
		lea	ObjDat3_76940(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_7654A,(a0)
		move.b	#1,$29(a0)
		lea	ChildObjDat_769A4(pc),a2
		jsr	CreateChild6_Simple.w
		lea	ChildObjDat_769AA(pc),a2
		jsr	CreateChild6_Simple.w

loc_7654A:
		tst.b	$28(a0)
		beq.s	loc_76574
		subq.w	#1,$2E(a0)
		bpl.s	loc_7656E
		jsr	Random_Number.w
		andi.w	#$F,d0
		addq.w	#8,d0
		move.w	d0,$2E(a0)
		moveq	#-$77,d0
		jsr	Play_Sound_2.w

loc_7656E:
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------

loc_76574:
		move.l	#Wait_Draw,(a0)
		move.w	#$3F,$2E(a0)
		move.l	#Go_Delete_Sprite,$34(a0)
		movea.w	$46(a0),a1
		bset	#2,$38(a1)
		lea	(Normal_palette).w,a1
		lea	(Target_palette).w,a2
		moveq	#7,d6

loc_7659C:
		move.l	(a1)+,(a2)+
		dbf	d6,loc_7659C
		lea	(Pal_MHZEndBoss).l,a1
		lea	(Target_palette_line_2).w,a2
		moveq	#7,d6

loc_765AE:
		move.l	(a1)+,(a2)+
		dbf	d6,loc_765AE
		lea	(Pal_MHZ1+$20).l,a1
		lea	(Target_palette_line_3).w,a2
		moveq	#$F,d6

loc_765C0:
		move.l	(a1)+,(a2)+
		dbf	d6,loc_765C0
		jsr	Create_New_Sprite.w
		bne.s	loc_765DE
		move.l	#loc_85E64,(a1)
		st	$2C(a1)
		move.w	#3,$3A(a1)

loc_765DE:
		jsr	Create_New_Sprite.w
		bne.s	loc_765F2
		move.l	#Obj_Song_Fade_Transition,(a1)
		move.b	#Mus_Boss,$2C(a1)

loc_765F2:
		lea	Child6_CreateBossExplosion.w,a2
		jsr	CreateChild6_Simple.w
		clr.b	(__u_F7C1).w
		rts
; ---------------------------------------------------------------------------

loc_76604:
		lea	word_76958(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#byte_769B6,$30(a0)
		tst.b	$2C(a0)
		beq.s	loc_76624
		move.l	#byte_769C1,$30(a0)

loc_76624:
		move.l	#loc_7662A,(a0)

loc_7662A:
		jsr	Animate_RawMultiDelay.w
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_76636:
		lea	word_7695E(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_76652,(a0)
		move.l	#byte_769CE,$30(a0)
		bsr.w	sub_76714

loc_76652:
		jsr	Animate_Raw.w
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_7665E:

		lea	ObjDat3_7694C(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_76674,(a0)
		bset	#4,$2B(a0)

loc_76674:
		jsr	Refresh_ChildPositionAdjusted.w
		movea.w	$46(a0),a1
		btst	#7,$2A(a1)
		bne.s	loc_766C4
		move.b	#-$75,$28(a0)
		btst	#6,$2A(a1)
		beq.s	loc_76698
		clr.b	$28(a0)

loc_76698:
		btst	#0,(V_int_run_count+3).w
		sne	d0
		tst.b	$2C(a0)
		beq.s	loc_766A8
		not.b	d0

loc_766A8:
		tst.b	d0
		bne.w	locret_76060
		btst	#6,$38(a1)
		beq.w	locret_76060
		jsr	Add_SpriteToCollisionResponseList.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_766C4:
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------

loc_766CA:
		lea	ObjDat3_7696A(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#Obj_FlickerMove,(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		add.w	d0,d0
		lea	word_766FC(pc,d0.w),a1
		move.w	(a1)+,8(a0)
		move.b	(a1)+,$22(a0)
		moveq	#8,d0
		jsr	Set_IndexedVelocity.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
word_766FC:	dc.w prio(4)
		dc.b $12, 0
		dc.w prio(4)
		dc.b $14, 0
		dc.w prio(6)
		dc.b $14, 0
		dc.w prio(6)
		dc.b $15, 0
		dc.w prio(4)
		dc.b $16, 0
		dc.w prio(4)
		dc.b $17, 0

; =============== S U B R O U T I N E =======================================


sub_76714:
		moveq	#0,d0
		move.b	$2C(a0),d0
		add.w	d0,d0
		lea	word_7672E(pc,d0.w),a1
		move.w	(a1)+,d0
		add.w	d0,$10(a0)
		move.w	(a1)+,d0
		add.w	d0,$14(a0)
		rts
; End of function sub_76714

; ---------------------------------------------------------------------------
word_7672E:	dc.w  $FFB3, $FFB2
		dc.w  $FF5F, $FF5E
		dc.w  $FF0B, $FF0A
		dc.w  $FEB7, $FEB6

; =============== S U B R O U T I N E =======================================


sub_7673E:
		moveq	#0,d0
		move.b	$2C(a0),d0
		add.w	d0,d0
		lea	word_76754(pc,d0.w),a1
		move.w	(a1)+,8(a0)
		move.b	(a1)+,$22(a0)
		rts
; End of function sub_7673E

; ---------------------------------------------------------------------------
word_76754:	dc.w prio(6)
		dc.b 2, 0
		dc.w prio(4)
		dc.b 3, 0

; =============== S U B R O U T I N E =======================================


sub_7675C:

		movea.w	$46(a0),a1
		move.w	$10(a1),$10(a0)
		move.w	$14(a1),$14(a0)
		bclr	#0,4(a0)
		btst	#0,4(a1)
		beq.s	locret_76780
		bset	#0,4(a0)

locret_76780:
		rts
; End of function sub_7675C


; =============== S U B R O U T I N E =======================================


sub_76782:
		movea.w	$44(a0),a4
		move.b	$29(a0),d0
		tst.b	$28(a0)
		beq.s	loc_767A0
		tst.b	$28(a4)
		bne.w	locret_76820
		subq.b	#1,d0
		move.b	$1C(a4),$1C(a0)

loc_767A0:
		btst	#7,$38(a0)
		bne.s	loc_767B0
		cmpi.b	#1,d0
		bgt.s	loc_767B0
		moveq	#2,d0

loc_767B0:

		move.b	d0,$29(a0)
		tst.b	$20(a0)
		bne.s	loc_767E8
		move.b	#$20,$20(a0)
		moveq	#$6E,d0
		jsr	Play_Sound_2.w
		bset	#6,$2A(a0)
		clr.b	$28(a0)
		clr.b	$28(a4)
		lea	(Player_1).w,a1
		tst.b	$1C(a0)
		beq.s	loc_767E4
		lea	(Player_2).w,a1

loc_767E4:
		clr.w	$18(a1)

loc_767E8:
		moveq	#0,d0
		btst	#0,$20(a0)
		bne.s	loc_767F6
		addi.w	#$A,d0

loc_767F6:
		bsr.w	sub_7686A
		subq.b	#1,$20(a0)
		bne.s	locret_76820
		bclr	#6,$2A(a0)
		cmpi.b	#1,$29(a0)
		ble.s	loc_76822
		move.b	$25(a0),$28(a0)
		move.b	$25(a4),$28(a4)
		move.b	#-1,$29(a4)

locret_76820:

		rts
; ---------------------------------------------------------------------------

loc_76822:
		move.l	#loc_76164,(a0)
		bclr	#6,$38(a0)
		move.w	#$400,d0
	;	cmpi.b	#2,(Player_1+character_id).w
	;	bne.s	loc_7683E
	;	move.w	#$500,d0

loc_7683E:
		move.w	d0,$18(a0)
		st	(__u_FAA9).w
		jsr	Create_New_Sprite.w
		bne.s	loc_76854
		move.l	#loc_768B6,(a1)

loc_76854:
		lea	Child6_CreateBossExplosion.w,a2
		jsr	CreateChild6_Simple.w
		bne.s	locret_76868
		move.b	#$20,$2C(a1)

locret_76868:
		rts
; End of function sub_76782


; =============== S U B R O U T I N E =======================================


sub_7686A:
		lea	word_76878(pc),a1
		lea	word_76882(pc,d0.w),a2
		jmp	CopyWordData_5.w
; End of function sub_7686A

; ---------------------------------------------------------------------------
word_76878:	dc.w $FC28
		dc.w $FC34
		dc.w $FC36
		dc.w $FC3A
		dc.w $FC3C
word_76882:	dc.w $E42
		dc.w $228
		dc.w 0
		dc.w $C40
		dc.w $820
		dc.w $888
		dc.w $AAA
		dc.w $EEE
		dc.w $888
		dc.w $AAA
; ---------------------------------------------------------------------------

loc_76896:
		cmpi.w	#$4010,(Camera_X_pos).w
		blo.s	locret_768FC
		lea	(ArtKosM_MHZEndBossSpikes).l,a1
		move.w	#$75E0,d2
		jsr	Queue_Kos_Module.w
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_768B6:
		tst.b	(__u_FAA9).w
		bne.w	locret_76060
		move.l	#loc_768D2,(a0)
	;	jsr	Create_New_Sprite.w
	;	bne.s	loc_768D2
	;	move.l	#loc_863C0,(a1)

loc_768D2:
		moveq	#0,d0
		lea	(Player_1).w,a1
		bclr	#0,$2A(a1)
		bclr	#2,$2A(a1)
		bclr	#0,$2A+$4A(a1)	; NAT: Tiles
		bclr	#2,$2A+$4A(a1)

		btst	#1,$2A(a1)
		beq.s	.ok
		btst	#1,Player_2+status.w
		bne.s	locret_768FC

.ok		move.l	#loc_768FE,(a0)
		move.w	#$55,(ScrEvents_2).w

locret_768FC:
		rts
; ---------------------------------------------------------------------------

loc_768FE:
		st	(Ctrl_1_locked).w
		st	(Ctrl_2_locked).w
		move.w	#$808,(Ctrl_1_logical).w
		move.w	#$808,(Ctrl_2_logical).w
		move.b	#10,SpawnWait.w		; NAT: set spawn delay (prevent death)

		cmpi.w	#$4600,Player_1+x_pos.w
		bhs.s	loc_76912
		cmpi.w	#$4600,Player_2+x_pos.w		; NAT: Tiles
		blo.s	locret_768FC
; ---------------------------------------------------------------------------

loc_76912:	; NAT: Make it good for tiles
		lea	Player_1.w,a1
		bsr.s	.mvoe
		lea	Player_2.w,a1
		bsr.s	.mvoe

		clr.w	(Ctrl_1_logical).w
		clr.w	(Ctrl_2_logical).w
		move.w	#$4640,$10(a0)			; NAT: Create sign instead
		jmp	Obj_EndSignControl_HitHUD	;

.mvoe		cmp.b	#6,5(a1)		; chk if ded
		bgt.s	locret_768FC		; if yes, branch
		move.w	#$4600,$10(a1)
		jmp	Stop_Object.w
; ---------------------------------------------------------------------------
ObjDat3_76928:	dc.l Map_RobotnikShip
		dc.w $52E
		dc.w prio(5)
		dc.b $20
		dc.b $20
		dc.b $A
		dc.b 0
ObjDat3_76934:	dc.l Map_MHZEndBoss

		dc.w $23EC
		dc.w prio(5)
		dc.b $80
		dc.b $80
		dc.b 1
		dc.b 0
ObjDat3_76940:	dc.l Map_MHZEndBoss
		dc.w $23EC
		dc.w prio(4)
		dc.b $80
		dc.b $80
		dc.b 4
		dc.b $11
ObjDat3_7694C:	dc.l Map_MHZEndBoss
		dc.w $3EC
		dc.w prio(4)
		dc.b $10
		dc.b $10
		dc.b $11
		dc.b $8B
word_76958:	dc.w prio(3)
		dc.b $10
		dc.b $10
		dc.b 5
		dc.b 0
word_7695E:	dc.w prio(3)
		dc.b $80
		dc.b $80
		dc.b $E
		dc.b 0
word_76964:	dc.w prio(4)
		dc.b $18
		dc.b $28
		dc.b 0
		dc.b $25
ObjDat3_7696A:	dc.l Map_MHZEndBoss
		dc.w $A3EC
		dc.w prio(1)
		dc.b $80
		dc.b $80
		dc.b 0
		dc.b 0
ChildObjDat_76976:dc.w 1
		dc.l loc_76502
ChildObjDat_7697C:dc.w 0
		dc.l loc_764D0
ChildObjDat_76982:dc.w 3
		dc.l loc_7665E
		dc.w $EC18
		dc.l loc_7665E
		dc.w $D418
		dc.l loc_76520
		dc.w $11AF
		dc.l loc_764A0
		dc.w $21F0
ChildObjDat_7699C:dc.w 0

		dc.l Obj_RobotnikHead4
		dc.w $E4
ChildObjDat_769A4:dc.w 1
		dc.l loc_76604
ChildObjDat_769AA:dc.w 3
		dc.l loc_76636
ChildObjDat_769B0:dc.w 5
		dc.l loc_766CA
byte_769B6:	dc.b	5,   1
		dc.b	6,   3
		dc.b	7,   5
		dc.b	8,   7
		dc.b	0,   9
		dc.b  $FC
byte_769C1:	dc.b	9,   1
		dc.b   $A,   1
		dc.b	9,   1
		dc.b   $A,   1
		dc.b   $B,   1
		dc.b   $C,   1
		dc.b  $FC
byte_769CE:	dc.b	1,  $D
		dc.b   $E,  $F
		dc.b  $10, $FC
Pal_MHZEndBoss:	binclude "Levels/MHZ/Palettes/End Boss.bin"
	even


word_769F4:	dc.w 0
		dc.w $300
		dc.w $3AA0
		dc.w $3D90
		dc.w $280
		dc.w $280
		dc.w $3C90
		dc.w $3C90
PLC_76A04:	dc.w 1
		dc.l ArtNem_EggCapsule
		dc.w $9280
		dc.l ArtNem_Explosion
		dc.w AT_Explosion*$20
; ---------------------------------------------------------------------------

Obj_SOZ_Miniboss:
		btst	#5,OptionsBits.w		; NAT: Check if bosses are on
		bne.s	.enabled			; if are, branch

		lea	.screen(pc),a1			; else, lock screen
		jmp	Boss_Force_End_2		;

.screen		dc.w $4200, $4310, $960, $960

.enabled	move.l	#Obj_Wait,(a0)
		move.w	#$439D,$10(a0)
		move.w	#$9F7,$14(a0)
		lea	(Pal_SOZMinibossFade).l,a1
		lea	(Normal_palette_line_2).w,a2
		moveq	#7,d6

loc_76A30:
		move.l	(a1)+,(a2)+
		dbf	d6,loc_76A30
		lea	(Pal_SOZMinibossMain).l,a1
		lea	(Target_palette_line_2).w,a2
		moveq	#7,d6

loc_76A42:
		move.l	(a1)+,(a2)+
		dbf	d6,loc_76A42
		move.l	#loc_76A8A,$34(a0)
		move.w	#$78,$2E(a0)
		moveq	#-$1F,d0
		jsr	Play_Sound.w
		lea	(ArtKosM_SOZMiniboss).l,a1
		move.w	#$76A0,d2
		jsr	Queue_Kos_Module.w
		lea	(ArtKosM_SOZSand).l,a1
		move.w	#-$61A0,d2
		jsr	Queue_Kos_Module.w
		lea	PLC_83D64.w,a1
		jmp	Load_PLC_Raw.w
; ---------------------------------------------------------------------------

loc_76A8A:
		move.l	#loc_76A92,(a0)
		move.w	#$9EC,PlayerSpawn+2.w		; NAT: Set respawn y-pos
		st	Boss_flag.w			; NAT: Enable boss mode
		st	BossHitMode.w			; NAT: Enable boss hit mode
		clr.w	BossHitsP1.w			; NAT: Clear p1 hit count

Boss_EmptyRange:
		move.l	#Ranges_Empty,d0		; NAT: Get empty ranges
		move.l	d0,BoxLoc_Level.w		; save to level
		move.l	d0,BoxLoc_Play1.w		; save to player 1
		move.l	d0,BoxLoc_Play2.w		; save to player 2
		rts
; ---------------------------------------------------------------------------

loc_76A92:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_76AAE(pc,d0.w),d1
		jsr	off_76AAE(pc,d1.w)
		bsr.w	sub_772F6
		bsr.w	sub_770EA

		move.w	#$4220,PlayerSpawn.w		; NAT: Set left spawn
		cmp.w	#$4320,x_pos(a0)		; check if boss is beyond middle
		bhs.s	.gotit				; yes? branch
		move.w	#$4420,PlayerSpawn.w		; set right spawn
.gotit		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------
off_76AAE:	dc.w loc_76AC8-off_76AAE

		dc.w loc_76B2A-off_76AAE
		dc.w loc_76B44-off_76AAE
		dc.w loc_76B80-off_76AAE
		dc.w loc_76BAA-off_76AAE
		dc.w loc_76BF4-off_76AAE
		dc.w loc_76C36-off_76AAE
		dc.w loc_76CCE-off_76AAE
		dc.w loc_76D08-off_76AAE
		dc.w loc_76D28-off_76AAE
		dc.w loc_76D7C-off_76AAE
		dc.w loc_76DB0-off_76AAE
		dc.w locret_76E08-off_76AAE
; ---------------------------------------------------------------------------

loc_76AC8:
		lea	ObjDat3_773AC(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.b	#6,$1C(a0)		; NAT: Setup hits count
		move.w	8(a0),$3C(a0)
		move.b	#$3B,$1E(a0)
		move.l	#loc_76B30,$34(a0)
		moveq	#Mus_Minib_SK,d0
		move.b	d0,(Level_music+$1).w
		jsr	Play_Sound.w
		move.w	#$3F,$2E(a0)
		move.l	#loc_76B30,$34(a0)
		jsr	Create_New_Sprite.w
		bne.s	locret_76B28
		move.l	#Obj_FadeSelectedFromBlack,(a1)
		move.w	#3,$3A(a1)
		move.w	#$F,$3C(a1)
		move.w	#-$3E0,$30(a1)
		move.w	#-$360,$32(a1)

locret_76B28:
		rts
; ---------------------------------------------------------------------------

loc_76B2A:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_76B30:

		move.b	#4,5(a0)
		st	(ScrEvents_3).w
		lea	ChildObjDat_773E6(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_76B44:
		jsr	Find_SonicTails.w
		cmpi.w	#$60,d2
		blo.s	loc_76B52
		rts
; ---------------------------------------------------------------------------

loc_76B52:
		move.b	#6,5(a0)
		bclr	#0,4(a0)
		tst.w	d0
		beq.s	loc_76B68
		bset	#0,4(a0)

loc_76B68:
		move.w	#$3E,$2E(a0)
		move.l	#loc_76B86,$34(a0)
		lea	ChildObjDat_773DE(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_76B80:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_76B86:
		move.b	#8,5(a0)
		move.w	#-$100,$1A(a0)
		move.w	#7,$2E(a0)
		move.l	#loc_76BB6,$34(a0)
		lea	ChildObjDat_773D6(pc),a2
		jmp	CreateChild3_NormalRepeated.w
; ---------------------------------------------------------------------------

loc_76BAA:
		jsr	MoveSprite2.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_76BB6:
		clr.w	$1A(a0)
		move.w	#7,$2E(a0)
		move.l	#loc_76BCA,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_76BCA:
		move.w	#$80,$1A(a0)
		move.w	#$F,$2E(a0)
		move.l	#loc_76BE0,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_76BE0:
		move.b	#$A,5(a0)
		move.l	#loc_76C26,$34(a0)
		clr.w	$1A(a0)

locret_76BF2:

		rts
; ---------------------------------------------------------------------------

loc_76BF4:
		jsr	MoveSprite2.w
		lea	byte_7745D(pc),a1
		jsr	Animate_RawNoSSTMultiDelay.w
		tst.w	d2
		beq.s	locret_76C24
		bmi.s	locret_76C24
		move.b	$22(a0),$39(a0)
		cmpi.b	#7,$22(a0)
		bne.s	loc_76C1E
		move.w	#-$700,$1A(a0)

loc_76C1E:
		move.b	#0,$22(a0)

locret_76C24:

		rts
; ---------------------------------------------------------------------------

loc_76C26:
		move.b	#$C,5(a0)
		move.l	#loc_76C5E,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_76C36:
		tst.w	$18(a0)
		bpl.s	.oopscheck
		cmpi.w	#$4200+$18,$10(a0)	; NAT: Other side check
		bhi.s	loc_76C48
		bra.s	.clr

.oopscheck	cmpi.w	#$4438,$10(a0)
		blo.s	loc_76C48
.clr		clr.w	$18(a0)

loc_76C48:

		moveq	#$60,d1
		jsr	MoveSprite_CustomGravity.w
		tst.w	$1A(a0)
		bmi.w	locret_76BF2
		jmp	ObjHitFloor_DoRoutine.w
; ---------------------------------------------------------------------------

loc_76C5E:
		move.b	#$E,5(a0)
		move.b	#0,$3A(a0)
		move.l	#loc_76CF0,$34(a0)
		bset	#1,$38(a0)		; allow early hits

loc_76C72:
		move.l	#byte_7746A,$30(a0)
		move.w	#$14,(ScrShake_Value).w
		moveq	#$61,d0
		jsr	Play_Sound_2.w
		lea	ChildObjDat_77402(pc),a2
		jmp	CreateChild3_NormalRepeated.w
; ---------------------------------------------------------------------------

loc_76C92:
		move.b	#$E,5(a0)
		move.l	#loc_76D14,$34(a0)
		bra.s	loc_76C72
; ---------------------------------------------------------------------------

loc_76CA2:
		move.b	#4,5(a0)
		move.b	#$3B,$1E(a0)
		clr.w	$18(a0)
		clr.w	$1A(a0)
		move.w	#8,(ScrShake_Value).w
		moveq	#$5F,d0
		jsr	Play_Sound_2.w
		lea	ChildObjDat_7740A(pc),a2
		jmp	CreateChild3_NormalRepeated.w
; ---------------------------------------------------------------------------

loc_76CCE:
		jsr	Animate_RawMultiDelay.w
		tst.w	d2
		beq.s	locret_76CEE
		bmi.s	locret_76CEE
		move.b	$22(a0),$39(a0)
		move.b	$3A(a0),$22(a0)
		lea	byte_772E2(pc),a1
		bsr.w	sub_772BE

locret_76CEE:

		rts
; ---------------------------------------------------------------------------

loc_76CF0:
		move.b	#$10,5(a0)
		move.l	#byte_7747D,$30(a0)
		move.l	#loc_76D0E,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_76D08:
		jmp	Animate_Raw.w
; ---------------------------------------------------------------------------

loc_76D0E:

loc_76D14:
		move.b	#$12,5(a0)
		move.b	#1,$3A(a0)
		move.w	#$60,$2E(a0)
		rts
; ---------------------------------------------------------------------------

loc_76D28:
		subq.w	#1,$2E(a0)
		bmi.s	loc_76D5C
		jsr	Find_SonicTails.w
		btst	#0,4(a0)
		beq.s	loc_76D3E
		subq.w	#2,d0

loc_76D3E:
		tst.w	d0
		bne.s	loc_76D44
		rts
; ---------------------------------------------------------------------------

loc_76D44:
		move.b	#$14,5(a0)
		move.l	#byte_77452,$30(a0)
		move.l	#loc_76DA8,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_76D5C:
		move.b	#$16,5(a0)
		move.l	#byte_77482,$30(a0)
		move.l	#loc_76DE6,$34(a0)
		clr.w	$18(a0)
		clr.w	$1A(a0)
		rts
; ---------------------------------------------------------------------------

loc_76D7C:
		subq.w	#1,$2E(a0)
		jsr	Animate_RawMultiDelayFlipX.w
		tst.w	d2
		beq.s	locret_76DA6
		bmi.s	locret_76DA6
		move.b	$22(a0),d0
		move.b	d0,$39(a0)
		move.b	#1,$22(a0)
		cmpi.b	#9,d0
		bne.s	locret_76DA6
		move.b	#$19,$22(a0)

locret_76DA6:

		rts
; ---------------------------------------------------------------------------

loc_76DA8:
		move.b	#$12,5(a0)
		rts
; ---------------------------------------------------------------------------

loc_76DB0:
		jsr	MoveSprite2.w
		jsr	Animate_RawMultiDelay.w
		tst.w	d2
		beq.s	locret_76DE4
		bmi.s	locret_76DE4
		move.b	$22(a0),$39(a0)
		cmpi.b	#7,$22(a0)
		bne.s	loc_76DD6
		move.w	#-$700,$1A(a0)

loc_76DD6:
		move.b	$3A(a0),$22(a0)
		lea	byte_772E2(pc),a1
		bsr.w	sub_772BE

locret_76DE4:

		rts
; ---------------------------------------------------------------------------

loc_76DE6:
		move.b	#$C,5(a0)
		move.l	#loc_76C92,$34(a0)
		move.w	#$180,d0
		btst	#0,4(a0)
		bne.s	loc_76E02
		neg.w	d0

loc_76E02:
		move.w	d0,$18(a0)
		rts
; ---------------------------------------------------------------------------

locret_76E08:
		rts
; ---------------------------------------------------------------------------

loc_76E0A:
		subq.w	#1,$2E(a0)
		bmi.s	loc_76E1C
		jsr	MoveSprite.w		; NAT: faaallll

		cmp.w	#$A00-$C,$14(a0)	; check at floor
		blt.s	.nofloor
		move.w	#$A00-$C,$14(a0)	; force
		clr.w	$1A(a0)

.nofloor	jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_76E1C:
		bset	#5,$38(a0)
		bset	#7,$2A(a0)
		move.w	(Camera_X_pos).w,d0
		addi.w	#$A0,d0
		move.w	d0,$10(a0)
		bclr	#7,4(a0)
	;	jsr	Create_New_Sprite.w
	;	bne.s	loc_76E48
	;	move.l	#loc_76E4E,(a1)

loc_76E48:
		jmp	(Obj_EndSignControl_HitHUD).l	; NAT: Communism
; ---------------------------------------------------------------------------

loc_76E4E:
		tst.b	(End_Of_Level_Flag).w
		beq.w	locret_76BF2
		move.l	#loc_76E5C,(a0)

loc_76E5C:
		tst.b	(End_Of_Level_Flag).w
		bne.w	locret_76BF2
		move.l	#loc_76E94,(a0)
		lea	ChildObjDat_773F4(pc),a2
		jsr	CreateChild1_Normal.w
		st	(Ctrl_1_locked).w
		jsr	Create_New_Sprite.w
		bne.s	loc_76E86
		move.l	#loc_863C0,(a1)

loc_76E86:
		cmpi.w	#$43A0,(Player_1+x_pos).w
		blo.s	loc_76E94
		bset	#3,$38(a0)

loc_76E94:

		lea	(Ctrl_1_logical).w,a1
		lea	(Player_1).w,a2
		move.w	#$43A0,d0
		tst.w	$18(a0)
		btst	#3,$38(a0)
		bne.s	loc_76EC8
		cmp.w	$10(a2),d0
		bls.s	loc_76EE4
		moveq	#0,d1
		btst	#5,$2A(a2)
		beq.s	loc_76EC0
		ori.w	#$4040,d1

loc_76EC0:
		ori.w	#$808,d1
		move.w	d1,(a1)
		rts
; ---------------------------------------------------------------------------

loc_76EC8:
		cmp.w	$10(a2),d0
		bhs.s	loc_76EE4
		moveq	#0,d1
		btst	#5,$2A(a2)
		beq.s	loc_76EDC
		ori.w	#$4040,d1

loc_76EDC:
		ori.w	#$404,d1
		move.w	d1,(a1)
		rts
; ---------------------------------------------------------------------------

loc_76EE4:

		move.w	d0,$10(a2)
		clr.w	(a1)
		bclr	#0,4(a2)
		bclr	#0,$2A(a2)
		clr.w	$18(a2)
		clr.w	$1A(a2)
		clr.w	$1C(a2)
		move.w	#$55,(ScrEvents_2).w
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_76F0E:
		lea	word_773B8(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.w	8(a0),$3C(a0)
		move.l	#loc_76F24,(a0)

loc_76F24:
		bsr.w	sub_770EA
		movea.w	$46(a0),a1
		moveq	#8,d0
		btst	#6,$2A(a1)
		bne.s	loc_76F40
		bsr.w	sub_7710C
		jmp	Child_DrawTouch_Sprite.w
; ---------------------------------------------------------------------------

loc_76F40:
		jmp	loc_849D8.w
; ---------------------------------------------------------------------------

loc_76F46:

		jsr	Refresh_ChildPositionAdjusted.w
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_76F60(pc,d0.w),d1
		jsr	off_76F60(pc,d1.w)
		jsr	Check_AddToCollisionList.w
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------
off_76F60:	dc.w loc_76F6A-off_76F60

		dc.w locret_76F86-off_76F60
		dc.w loc_76F88-off_76F60
		dc.w loc_76FA6-off_76F60
		dc.w loc_7701C-off_76F60
; ---------------------------------------------------------------------------

loc_76F6A:
		lea	word_773C4(pc),a1
		jsr	SetUp_ObjAttributes3.w
		tst.b	$2C(a0)
		bne.s	locret_76F84
		clr.b	$28(a0)
		move.b	#4,5(a0)

locret_76F86:
		movea.w	$46(a0),a1
		cmp.w	#loc_76A92&$FFFF,2(a1)	; NAT: Check boss code
		beq.s	locret_76F84		; if nonzero, branch
		clr.b	$28(a0)			; clear our collision too

locret_76F84:
		rts
; ---------------------------------------------------------------------------

loc_76F88:
		movea.w	$46(a0),a1
		btst	#1,$38(a1)
		beq.s	locret_76FA4
		move.b	#6,5(a0)
		move.b	#-$29,$28(a0)
		clr.b	$29(a0)

locret_76FA4:
		rts
; ---------------------------------------------------------------------------

loc_76FA6:
		jsr	Check_PlayerCollision.w
		beq.s	locret_76FF8
		jsr	Check_PlayerAttack.w
		bne.s	loc_76FC2
		tst.b	$34(a1)
		bne.s	locret_76FF8
		jmp	HurtCharacter_Directly.w
; ---------------------------------------------------------------------------

loc_76FC2:
		neg.w	$18(a1)
		neg.w	$1A(a1)
		neg.w	$1C(a1)
		move.b	#8,5(a0)
		move.l	#byte_77495,$30(a0)
		move.l	#loc_76FFA,$34(a0)
		movea.w	$46(a0),a2
		move.w	a1,$44(a2)
		bset	#6,$2A(a2)
		bset	#7,$38(a2)

locret_76FF8:

		rts
; ---------------------------------------------------------------------------

loc_76FFA:
		move.b	#$1A,$22(a0)
		movea.w	$46(a0),a1
		bclr	#6,$2A(a1)
		bclr	#1,$38(a1)
		move.b	#4,5(a0)
		clr.b	$28(a0)
		rts
; ---------------------------------------------------------------------------

loc_7701C:
		jmp	Animate_Raw.w
; ---------------------------------------------------------------------------

loc_77022:
		lea	word_773BE(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.w	8(a0),$3C(a0)
		movea.w	$46(a0),a1
		bclr	#0,4(a0)
		btst	#0,4(a1)
		beq.s	loc_7704A
		bset	#0,4(a0)

loc_7704A:
		move.l	#loc_77062,(a0)
		move.w	#-$100,$1A(a0)
		move.w	#$3F,$2E(a0)
		jmp	Child_DrawTouch_Sprite.w
; ---------------------------------------------------------------------------

loc_77062:
		bsr.w	sub_770EA
		jmp	(MoveDraw_SpriteTimed).l
; ---------------------------------------------------------------------------

loc_7706C:

		lea	ObjDat3_773CA(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_770C4,(a0)
		movea.w	$46(a0),a1
		move.b	$42(a0),d0
		btst	#0,4(a1)
		beq.s	loc_7708E
		neg.b	d0

loc_7708E:
		ext.w	d0
		move.w	$10(a1),d1
		add.w	d0,d1
		moveq	#0,d0
		move.b	$2C(a0),d0
		lea	byte_770B8(pc,d0.w),a2
		move.b	(a2)+,d0
		bmi.s	loc_770AA
		bset	#0,4(a0)

loc_770AA:
		ext.w	d0
		add.w	d0,d1
		move.w	d1,$10(a0)
		move.b	(a2)+,$2E(a0)
		rts
; ---------------------------------------------------------------------------
byte_770B8:	dc.b  $E8,  $B
		dc.b  $18,  $B
		dc.b  $F0,   5
		dc.b  $10,   5
		dc.b  $F8, $FF
		dc.b	8, $FF
; ---------------------------------------------------------------------------

loc_770C4:
		subq.b	#1,$2E(a0)
		bpl.s	locret_770D8
		move.l	#loc_770DA,(a0)
		move.l	#Go_Delete_Sprite,$34(a0)

locret_770D8:
		rts
; ---------------------------------------------------------------------------

loc_770DA:
		lea	byte_7749B(pc),a1
		jsr	Animate_RawNoSSTMultiDelay.w
		jmp	Draw_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_770EA:

		bset	#7,$A(a0)
		move.w	$3C(a0),d0
	;	cmpi.w	#$4200,$10(a0)
	;	bhs.s	loc_77106
	;	move.w	#$80,d0
	;	bclr	#7,$A(a0)

loc_77106:
		move.w	d0,8(a0)
		rts
; End of function sub_770EA


; =============== S U B R O U T I N E =======================================


sub_7710C:
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	off_7716E(pc,d0.w),d1
		lea	off_7716E(pc,d1.w),a1
		movea.w	$46(a0),a2
		moveq	#0,d1
		move.b	$39(a2),d1
		andi.b	#$3F,d1
		lsl.w	#2,d1
		adda.w	d1,a1
		move.b	(a1)+,d2
		ext.w	d2
		move.b	(a1)+,d3
		ext.w	d3
		move.b	(a1)+,$22(a0)
		bclr	#0,4(a0)
		btst	#0,4(a2)
		beq.s	loc_7714E
		bset	#0,4(a0)
		neg.w	d2

loc_7714E:
		tst.b	(a1)
		beq.s	loc_77158
		bchg	#0,4(a0)

loc_77158:
		move.w	$10(a2),d1
		add.w	d2,d1
		move.w	d1,$10(a0)
		move.w	$14(a2),d1
		add.w	d3,d1
		move.w	d1,$14(a0)
		rts
; End of function sub_7710C

; ---------------------------------------------------------------------------
off_7716E:	dc.w byte_7717E-off_7716E

		dc.w byte_771A6-off_7716E
		dc.w byte_771CE-off_7716E
		dc.w byte_771F6-off_7716E
		dc.w byte_7721E-off_7716E
		dc.w byte_77246-off_7716E
		dc.w byte_7726E-off_7716E
		dc.w byte_77296-off_7716E
byte_7717E:	dc.b	0, $F8,	$15,   0
		dc.b	0, $F8,	$15,   0
		dc.b	0, $F8,	$15,   0
		dc.b	0, $F8,	$15,   0
		dc.b	0, $F8,	$15,   0
		dc.b  $FF, $F7,	$15,   0
		dc.b  $FE, $F6,	$15,   0
		dc.b  $FD, $F5,	$15,   0
		dc.b  $FC, $F4,	$15,   0
		dc.b	0, $F8,	$16,   0
byte_771A6:	dc.b  $F4, $14,	  6,   0
		dc.b  $F4, $14,	  6,   0
		dc.b  $F4, $14,	  6,   0
		dc.b  $F4, $14,	  6,   0
		dc.b  $F5, $14,	  6,   0
		dc.b  $EC,  $D,	  7,   0
		dc.b  $E0,   0,	  8,   0
		dc.b  $E4, $F6,	  9,   0
		dc.b  $E0, $EC,	 $A,   0
		dc.b  $F8, $14,	 $B,   0
byte_771CE:	dc.b	0,   4,	$17,   0
		dc.b	0,   4,	$17,   0
		dc.b	0,   4,	$17,   0
		dc.b	0,   4,	$17,   0
		dc.b	1,   4,	$17,   0
		dc.b  $FC,   2,	$17,   0
		dc.b  $F8,   0,	$17,   0
		dc.b  $F4, $FE,	$17,   0
		dc.b  $F0, $F8,	$17,   0
		dc.b	0,   4,	$17,   0
byte_771F6:	dc.b	0, $28,	 $C,   1
		dc.b  $FF, $28,	 $C,   1
		dc.b  $F8, $20,	 $C,   1
		dc.b  $F3, $1A,	 $C,   1
		dc.b  $F2, $19,	 $C,   1
		dc.b  $F3, $1A,	 $C,   1
		dc.b  $F8, $20,	 $C,   1
		dc.b  $FF, $28,	 $C,   1
		dc.b	0, $28,	 $C,   1
		dc.b	0, $28,	 $F,   1
byte_7721E:	dc.b	0, $14,	 $C,   0
		dc.b	2, $14,	 $C,   0
		dc.b  $FC, $10,	 $D,   0
		dc.b  $FE,  $E,	 $E,   0
		dc.b  $FE,  $E,	 $E,   0
		dc.b  $FE,  $E,	 $E,   0
		dc.b  $FC, $10,	 $D,   0
		dc.b	2, $14,	 $C,   0
		dc.b	0, $14,	 $C,   0
		dc.b	0, $14,	 $F,   0
byte_77246:	dc.b  $F8, $1C,	$17,   0
		dc.b  $FA, $1C,	$17,   0
		dc.b  $F6, $14,	$17,   0
		dc.b  $F2,  $E,	$17,   0
		dc.b  $F2,  $E,	$17,   0
		dc.b  $F2,  $E,	$17,   0
		dc.b  $F6, $14,	$17,   0
		dc.b  $FA, $1C,	$17,   0
		dc.b  $F8, $1C,	$17,   0
		dc.b  $FC, $1C,	$17,   0
byte_7726E:	dc.b  $FC, $34,	$10,   0
		dc.b  $FB, $34,	$10,   0
		dc.b  $F4, $2C,	$10,   0
		dc.b  $EF, $26,	$10,   0
		dc.b  $EE, $25,	$10,   0
		dc.b  $EF, $26,	$10,   0
		dc.b  $F4, $2C,	$10,   0
		dc.b  $FB, $34,	$10,   0
		dc.b  $FC, $34,	$10,   0
		dc.b  $FC, $34,	$11,   0
byte_77296:	dc.b	0, $14,	  3,   0
		dc.b	2, $14,	  3,   0
		dc.b	2, $14,	  3,   0
		dc.b	2, $14,	  3,   0
		dc.b	2, $14,	  3,   0
		dc.b	2, $14,	  3,   0
		dc.b	2, $14,	  3,   0
		dc.b	2, $14,	  3,   0
		dc.b	0, $14,	  3,   0
		dc.b	0, $14,	  3,   0

; =============== S U B R O U T I N E =======================================


sub_772BE:

		moveq	#0,d0
		move.b	$23(a0),d0
		adda.w	d0,a1
		move.b	(a1)+,d0
		ext.w	d0
		btst	#0,4(a0)
		beq.s	loc_772D4
		neg.w	d0

loc_772D4:
		add.w	d0,$10(a0)
		move.b	(a1)+,d0
		ext.w	d0
		add.w	d0,$14(a0)
		rts
; End of function sub_772BE

; ---------------------------------------------------------------------------
byte_772E2:	dc.b	0,   0

		dc.b	1,   0
		dc.b	7,   8
		dc.b	5,   6
		dc.b	1,   1
		dc.b  $FF, $FF
		dc.b  $FB, $FA
		dc.b  $F9, $F8
		dc.b  $FF,   0
		dc.b	0,   0

; =============== S U B R O U T I N E =======================================


sub_772F6:
	;	cmpi.w	#$A10,$14(a0)
	;	bhs.s	loc_77364
		btst	#6,$2A(a0)
		beq.w	locret_773AA
		bclr	#7,$38(a0)
		beq.w	locret_773AA
		move.b	#$C,5(a0)
		move.l	#loc_76CA2,$34(a0)

		move.b	$45(a0),d6
		lea	$1C(a0),a5
		jsr	Boss_HandlePlayerHit	; NAT: Gimme score babyb
		ble.s	loc_77364

		move.b	#8,$1E(a0)
		moveq	#0,d0
		move.b	d0,$22(a0)
		move.b	d0,$23(a0)
		move.b	d0,$24(a0)
		move.b	d0,$3A(a0)
		move.b	d0,$39(a0)
		moveq	#$59,d0
		jsr	Play_Sound_2.w
		movea.w	$44(a0),a1
		move.w	#$200,d0
		move.w	$10(a1),d1
		cmp.w	$10(a0),d1
		blo.s	loc_77358
		neg.w	d0

loc_77358:
		move.w	d0,$18(a0)
		move.w	#-$200,$1A(a0)
		rts
; ---------------------------------------------------------------------------

loc_77364:
		move.l	#loc_76E0A,(a0)
		clr.w	$18(a0)
		move.w	#$40,$1A(a0)
		move.w	#$BF,$2E(a0)
		clr.b	(Update_HUD_timer).w
		move.w	(Camera_min_X_pos).w,(__u_FA94).w
		move.w	(Camera_max_X_pos).w,(__u_FA92).w
		move.w	(Camera_X_pos).w,(Camera_min_X_pos).w
		move.w	(Camera_X_pos).w,(Camera_max_X_pos).w
		lea	Child6_CreateBossExplosion.w,a2
		jsr	CreateChild6_Simple.w
		bne.s	locret_773AA
		move.b	#4,$2C(a1)

locret_773AA:

		rts
; End of function sub_772F6

; ---------------------------------------------------------------------------
ObjDat3_773AC:	dc.l Map_SOZMiniboss
		dc.w $A3B5
		dc.w prio(6)
		dc.b $24
		dc.b $34
		dc.b 0
		dc.b 0
word_773B8:	dc.w prio(5)
		dc.b $14
		dc.b $14
		dc.b 0
		dc.b 0
word_773BE:	dc.w prio(5)
		dc.b $34
		dc.b $34
		dc.b $18
		dc.b 0
word_773C4:	dc.w prio(5)
		dc.b $C
		dc.b $10
		dc.b $1A
		dc.b $A8
ObjDat3_773CA:	dc.l Map_SOZMinibossDust
		dc.w $C4F3
		dc.w prio(3)
		dc.b 8
		dc.b 8
		dc.b 0
		dc.b 0
ChildObjDat_773D6:dc.w 7
		dc.l loc_76F0E
		dc.w 0
ChildObjDat_773DE:dc.w 0
		dc.l loc_77022
		dc.w $40
ChildObjDat_773E6:dc.w 1
		dc.l loc_76F46
		dc.w $F4E4
		dc.l loc_76F46
		dc.w 0
ChildObjDat_773F4:dc.w 1
		dc.l Obj_DecLevStartXGradual
		dc.w 0
		dc.l Obj_IncLevEndXGradual
		dc.w 0
ChildObjDat_77402:dc.w 5
		dc.l loc_7706C
		dc.w $FC38
ChildObjDat_7740A:dc.w 5
		dc.l loc_7706C
		dc.w 4
Pal_SOZMinibossFade:	binclude "Levels/SOZ/Palettes/Miniboss Fade.bin"
	even

Pal_SOZMinibossMain:	binclude "Levels/SOZ/Palettes/Miniboss Main.bin"
	even

byte_77452:	dc.b	0,   9
		dc.b	0, $1F
		dc.b	9,   9
		dc.b  $49,   9
		dc.b	0,   9
		dc.b  $F4
byte_7745D:	dc.b	0,   9
		dc.b	0,   9
		dc.b	5,   4
		dc.b	6,   4
		dc.b	7,   4
		dc.b	8,   1
		dc.b  $F4
byte_7746A:	dc.b	8,   4
		dc.b	7,   4
		dc.b	6,   4
		dc.b	5,   4
		dc.b	4,   4
		dc.b	3,   9
		dc.b	2,   9
		dc.b	1,   9
		dc.b	0, $1F
		dc.b  $F4
byte_7747D:	dc.b   $F,   0
		dc.b  $19,   1
		dc.b  $F4
byte_77482:	dc.b	0,   4
		dc.b	1,   4
		dc.b	2,   4
		dc.b	3,   4
		dc.b	4,   4
		dc.b	5,   9
		dc.b	6,   9
		dc.b	7,   5
		dc.b	8,   0
		dc.b  $F4
byte_77495:	dc.b	3, $12
		dc.b  $12, $13
		dc.b  $14, $F4
byte_7749B:	dc.b	0,   3
		dc.b	0,   3
		dc.b	1,   5
		dc.b	2,   5
		dc.b	3,   7
		dc.b  $F4
Map_SOZMiniboss:	include "Levels/SOZ/Misc Object Data/Map - Miniboss.asm"

Map_SOZMinibossDust:	include "Levels/SOZ/Misc Object Data/Map - Miniboss Landing Dust.asm"

; ---------------------------------------------------------------------------

Obj_SOZ_EndBoss:
		btst	#5,OptionsBits.w		; NAT: Check if bosses are on
		bne.s	.enabled			; if are, branch

.doscr		lea	.screen(pc),a1			; else, lock screen
		jmp	Boss_Force_End_2		;

.screen		dc.w $5120, $5140, $680, $680

.enabled	moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_7766E(pc,d0.w),d1
		jsr	off_7766E(pc,d1.w)

		move.w	$10(a0),d0			; NAT: Also to d0
		move.w	d0,(ScrEvents_8).w
		move.w	$14(a0),(ScrEvents_9).w

		sub.w	#$E0,d0				; move by this much
		move.w	d0,PlayerSpawn.w		; NAT: Set spawn point
		cmp.w	#$4E8A,d0			; check if too far
		bhs.s	.ok				; if not, branch

		st	PlayerSpawn.w			; NAT: disable respawn
.ok		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------
off_7766E:	dc.w loc_7767C-off_7766E

		dc.w loc_776EA-off_7766E
		dc.w loc_77710-off_7766E
		dc.w loc_77772-off_7766E
		dc.w loc_77790-off_7766E
		dc.w loc_777CC-off_7766E
		dc.w loc_777F0-off_7766E
; ---------------------------------------------------------------------------

loc_7767C:
		move.w	#$72C,PlayerSpawn+2.w		; NAT: Set respawn y-pos
		st	BossHitMode.w			; NAT: Enable hit mode
		clr.w	BossHitsP1.w			; clear hits count
		st	Boss_flag.w			; NAT: Enable boss mode

		lea	ObjDat3_7828A(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.b	#8,$29(a0)
		move.w	$14(a0),$3A(a0)
		move.w	#$C0,(__u_FA82).w
		lea	(ArtKosM_SOZEndBoss).l,a1
		move.w	#$7480,d2
		jsr	Queue_Kos_Module.w
		moveq	#$6D,d0
		jsr	Load_PLC.w
		lea	Pal_SOZEndBoss1(pc),a1
		jsr	PalLoad_Line1.w
		lea	(Pal_SOZEndBoss2).l,a1
		lea	(Normal_palette_line_4).w,a2
		moveq	#7,d6

loc_776C6:
		move.l	(a1)+,(a2)+
		dbf	d6,loc_776C6
		lea	ChildObjDat_782FA(pc),a2
		jsr	CreateChild1_Normal.w
		lea	ChildObjDat_78320(pc),a2
		jsr	(CreateChild8_TreeListRepeated).l
		lea	ChildObjDat_78326(pc),a2
		jmp	(CreateChild8_TreeListRepeated).l
; ---------------------------------------------------------------------------

loc_776EA:
		lea	(Player_1).w,a1
		jsr	Find_OtherObject.w
		cmpi.w	#$C0,d2
		bhs.s	locret_7770E
		move.b	#4,5(a0)
		move.w	#$3B,$2E(a0)
		moveq	#-$1F,d0
		jmp	Play_Sound.w

locret_7770E:
		rts
; ---------------------------------------------------------------------------

loc_77710:
		subq.w	#1,$2E(a0)
		bpl.w	locret_77AF6
		move.b	#6,5(a0)
		moveq	#Mus_Boss,d0
		move.b	d0,(Level_music+$1).w
		jsr	Play_Sound.w

loc_7772C:
		lea	word_7775A(pc),a1
		cmpi.b	#2,(Player_1+character_id).w
		bne.s	loc_7773C
		lea	word_77766(pc),a1

loc_7773C:

		move.w	(a1)+,$18(a0)
		move.w	(a1)+,$3E(a0)
		move.w	(a1)+,$40(a0)
		move.w	(a1),$30(a0)
		move.w	(a1)+,$2E(a0)
		move.w	(a1)+,$32(a0)
		move.w	(a1)+,$46(a0)
		rts
; ---------------------------------------------------------------------------
word_7775A:	dc.w  $FFC0,  $100, $FF80,   $3F,   $7F,   $1F
word_77766:	dc.w  $FF80,  $200, $FF00,   $1F,   $3F,   $1F
; ---------------------------------------------------------------------------

loc_77772:
		jsr	MoveSprite2.w
		bsr.w	sub_7808C
		subq.w	#1,$2E(a0)
		bpl.s	locret_7778E
		move.b	#8,5(a0)
		move.w	$30(a0),$2E(a0)

locret_7778E:
locret_777CA:
		rts
; ---------------------------------------------------------------------------

loc_77790:
		bsr.w	sub_7806C
		jsr	MoveSprite2.w
		bsr.w	sub_7808C
		move.w	$3C(a0),d0
		add.w	$40(a0),d0
		move.w	d0,$3C(a0)
		subq.w	#1,$2E(a0)
		bpl.s	locret_777CA
		move.b	#$A,5(a0)
		move.w	$46(a0),$2E(a0)
		move.w	#$14,(ScrShake_Value).w
		moveq	#-$65,d0
		jmp	Play_Sound_2.w
; ---------------------------------------------------------------------------

loc_777CC:
		bsr.w	sub_7806C
		subq.w	#1,$2E(a0)
		bpl.s	locret_777EE
		move.b	#8,5(a0)
		bsr.w	sub_78038
		neg.b	$3E(a0)
		neg.w	$40(a0)
		move.w	$32(a0),$2E(a0)

locret_777EE:
		rts
; ---------------------------------------------------------------------------

loc_777F0:
		tst.w	(ScrEvents_7).w
		beq.s	loc_777FA
		bra.w	loc_781E4
; ---------------------------------------------------------------------------

loc_777FA:
		move.b	$42(a0),5(a0)
		clr.b	$28(a0)
		moveq	#0,d0
		bra.w	sub_7825E
; ---------------------------------------------------------------------------

loc_7780A:
		move.l	#loc_77822,(a0)
		bset	#4,$38(a0)
		bset	#7,$A(a0)
		clr.w	$18(a0)
		rts
; ---------------------------------------------------------------------------

loc_77822:
		jsr	MoveSprite_LightGravity.w
		cmpi.w	#$200,$1A(a0)
		blt.s	loc_77842
		move.l	#loc_77848,(a0)
		bclr	#7,$2A(a0)
		bset	#0,4(a0)

loc_77842:
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_77848:
		addi.w	#-$40,$1A(a0)
		jsr	MoveSprite2.w
		cmpi.w	#-$100,$1A(a0)
		bgt.s	loc_77894
		move.l	#loc_7789A,(a0)
		jsr	Swing_Setup1.w
;		jsr	Create_New_Sprite.w
;		bne.s	loc_77882
;		move.l	#Obj_81,(a1)
;		move.w	#$5360,$10(a1)
;		move.w	#$720,$14(a1)

loc_77882:
		bclr	#4,$38(a0)
		lea	(Child1_MakeRoboShipFlame).l,a2
		jsr	CreateChild1_Normal.w

loc_77894:
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_7789A:
	;	move.w	(Camera_X_pos).w,(Camera_min_X_pos).w
		jsr	Swing_UpAndDown.w
		subq.w	#1,$14(a0)
		move.w	$18(a0),d0
		addi.w	#$20,d0
		cmpi.w	#$400,d0
		bls.s	loc_778BC
		move.w	#$400,d0

loc_778BC:
		move.w	d0,$18(a0)
		jsr	MoveSprite2.w
		move.w	(Camera_X_pos).w,d0
		addi.w	#$1A0,d0
		cmp.w	$10(a0),d0
		blo.s	loc_778DA
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_778DA:
		move.l	#loc_778F2,(a0)
		st	(End_Of_Level_Flag).w
		ori.b	#$30,$38(a0)
		bclr	#7,4(a0)
		rts
; ---------------------------------------------------------------------------

loc_778F2:
	;	move.w	(Camera_X_pos).w,(Camera_min_X_pos).w
	;	tst.b	(End_Of_Level_Flag).w
	;	bne.w	locret_77AF6
	;	move.l	#loc_77966,(a0)
	;	jsr	Restore_PlayerControl.w
		jsr	Obj_PlayLevelMusic.w
		jsr	Boss_DisableHitMode		; NAT: Disable hit mode and give point

	;	clr.w	(Ctrl_1_logical).w
	;	st	(Ctrl_1_locked).w
	;	clr.w	$2E(a0)
	;	lea	(Player_2).w,a1
	;	jsr	Restore_PlayerControl2.w
;		jsr	Create_New_Sprite.w
;		bne.s	loc_77936
;		move.l	#loc_77A6E,(a1)

loc_77936:
;		jsr	Create_New_Sprite.w
;		bne.s	loc_77944
;		move.l	#loc_863C0,(a1)

loc_77944:
;		move.w	#-$100,(Camera_min_Y_pos).w
;		move.w	#$800,(Camera_target_max_Y_pos).w
;		move.w	#$5440,(__u_FA92).w
;		jsr	Create_New_Sprite.w
;		bne.s	locret_77964
;		move.l	#Obj_IncLevEndXGradual,(a1)

locret_77964:
		jmp	Obj_SOZ_EndBoss.doscr(pc)	; NAT: Align screen
; ---------------------------------------------------------------------------

loc_77966:
	;	cmpi.w	#$700,(Camera_target_max_Y_pos).w
	;	blo.s	loc_77974
	;	move.w	#$800,(Camera_max_Y_pos).w

loc_77974:
	;	lea	(Player_1).w,a1
	;	cmpi.w	#$5468,$10(a1)
	;	bhs.s	loc_77986
	;	jmp	(loc_86334).l
; ---------------------------------------------------------------------------

loc_77986:
	;	move.w	$10(a1),$10(a0)
	;	move.w	$14(a1),$14(a0)
	;	move.w	$18(a1),$18(a0)
	;	clr.w	$1A(a0)
	;	cmpi.b	#2,$38(a1)
	;	beq.s	loc_779B8
	;	move.l	#loc_779C0,(a0)
	;	move.b	#$81,$2E(a1)
	;	move.b	#$1A,$20(a1)
	;	rts
; ---------------------------------------------------------------------------

loc_779B8:
	;	move.l	#loc_77A3E,(a0)
	;	rts
; ---------------------------------------------------------------------------

loc_779C0:
	;	jsr	MoveSprite2.w
	;	lea	(Player_1).w,a1
	;	move.w	$14(a0),$14(a1)
	;	move.w	$10(a0),d0
	;	move.w	#$54C0,d1
	;	cmp.w	d1,d0
	;	blo.s	loc_779FC
	;	move.l	#loc_77A02,(a0)
	;	bset	#0,(__u_FAB8).w
	;	clr.w	$18(a0)
	;	clr.w	$1A(a0)
	;	move.w	d1,d0
	;	st	(Fast_V_scroll_flag).w
	;	move.w	#$7F,$2E(a0)

loc_779FC:
	;	move.w	d0,$10(a1)
	;	rts
; ---------------------------------------------------------------------------

loc_77A02:
	;	cmpi.w	#$1000,$1A(a0)
	;	blo.s	loc_77A10
	;	move.w	#$1000,$1A(a0)

loc_77A10:
	;	jsr	MoveSprite.w
	;	lea	(Player_1).w,a1
	;	move.w	$10(a0),$10(a1)
	;	move.w	$14(a0),$14(a1)
	;	subq.w	#1,$2E(a0)
	;	bmi.s	loc_77A2E
	;	rts
; ---------------------------------------------------------------------------

loc_77A2E:
	;	move.w	#$900,d0
	;	jsr	StartNewLevel.w
	;	jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_77A3E:
	;	jsr	MoveSprite2.w
	;	lea	(Player_1).w,a1
	;	move.w	$14(a0),$14(a1)
	;	move.w	$10(a0),d0
	;	move.w	d0,$10(a1)
	;	cmpi.w	#$5560,d0
	;	bhs.s	loc_77A5E
	;	rts
; ---------------------------------------------------------------------------

loc_77A5E:
	;	move.w	#$900,d0
	;	jsr	StartNewLevel.w
	;	jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_77A6E:
	;	btst	#0,(__u_FAB8).w
	;	beq.w	locret_77AF6
	;	move.l	#loc_77A98,(a0)
	;	lea	(Player_2).w,a1
	;	bclr	#7,$A(a1)
	;	move.b	#-$7F,$2E(a1)
	;	move.b	#$1A,$20(a1)
	;	clr.b	(Ctrl_2_locked).w

loc_77A98:
	;	lea	(Player_1).w,a1
	;	lea	(Player_2).w,a2
	;	move.w	$10(a1),$10(a2)
	;	move.w	$14(a1),d0
	;	subi.w	#$20,d0
	;	move.w	d0,$14(a2)
	;	rts
; ---------------------------------------------------------------------------

loc_77AB4:
		addq.b	#6,$2C(a0)

loc_77AB8:
		move.l	#Map_SOZEndBoss,$C(a0)
		move.w	#-$1C5C,$A(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	off_77AD4(pc,d0.w),d0
		jmp	off_77AD4(pc,d0.w)
; ---------------------------------------------------------------------------
off_77AD4:	dc.w loc_77AE0-off_77AD4

		dc.w loc_77B6C-off_77AD4
		dc.w loc_77C08-off_77AD4
		dc.w loc_77AF8-off_77AD4
		dc.w loc_77B7E-off_77AD4
		dc.w loc_77C1A-off_77AD4
; ---------------------------------------------------------------------------

loc_77AE0:
		lea	word_782AE(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_77B16,(a0)
		move.b	#$28,$43(a0)

locret_77AF6:

		rts
; ---------------------------------------------------------------------------

loc_77AF8:
		lea	word_782B4(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_77B50,(a0)
		move.b	#$28,$43(a0)
		bclr	#7,$A(a0)
		rts
; ---------------------------------------------------------------------------

loc_77B16:
		movea.w	$46(a0),a1
		move.b	$3C(a1),d0
		asr.b	#2,d0
		move.b	d0,$42(a0)
		move.w	$10(a0),-(sp)
		jsr	Refresh_ChildPosition.w
		moveq	#$1F,d1
		moveq	#$14,d2
		moveq	#$14,d3
		move.w	(sp)+,d4
		jsr	SolidObjectFull.w
		movea.w	$46(a0),a1
		btst	#4,$38(a1)
		bne.w	loc_77C7A
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_77B50:
		jsr	Refresh_ChildPosition.w
		movea.w	$46(a0),a1
		btst	#4,$38(a1)
		beq.w	locret_77AF6
		moveq	#0,d0
		jmp	loc_849D8.w
; ---------------------------------------------------------------------------

loc_77B6C:
		lea	word_782BA(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_77B9A,(a0)
		rts
; ---------------------------------------------------------------------------

loc_77B7E:
		lea	word_782C0(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_77BE0,(a0)
		bclr	#7,$A(a0)
		st	$3A(a0)
		rts
; ---------------------------------------------------------------------------

loc_77B9A:
		move.w	$10(a0),-(sp)
		movea.w	$44(a0),a1
		move.b	$3C(a1),d0
		tst.b	$3A(a0)
		beq.s	loc_77BAE
		neg.b	d0

loc_77BAE:
		move.b	d0,$3C(a0)
		lea	(AngleLookup_3).l,a2
		jsr	MoveSprite_AtAngleLookup.w
		moveq	#$1B,d1
		moveq	#$10,d2
		moveq	#$10,d3
		move.w	(sp)+,d4
		jsr	SolidObjectFull.w
		movea.w	$46(a0),a1
		btst	#7,$2A(a1)
		bne.w	loc_77C7A
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_77BE0:
		movea.w	$44(a0),a1
		move.b	$3C(a1),d0
		tst.b	$3A(a0)
		beq.s	loc_77BF0
		neg.b	d0

loc_77BF0:
		move.b	d0,$3C(a0)
		lea	(AngleLookup_3).l,a2
		jsr	MoveSprite_AtAngleLookup.w
		moveq	#0,d0
		jmp	Child_Draw_Sprite_FlickerMove.w
; ---------------------------------------------------------------------------

loc_77C08:
		lea	word_782C6(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_77C32,(a0)
		rts
; ---------------------------------------------------------------------------

loc_77C1A:
		lea	word_782CC(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_77C88,(a0)
		bclr	#7,$A(a0)
		rts
; ---------------------------------------------------------------------------

loc_77C32:
		move.w	$10(a0),-(sp)
		movea.w	$44(a0),a1
		move.b	$3C(a1),$3C(a0)
		lea	(AngleLookup_2).l,a2
		jsr	MoveSprite_AtAngleLookup.w
		subi.w	#$1C,$10(a0)
		subq.w	#4,$14(a0)
		moveq	#$2B,d1
		moveq	#$14,d2
		moveq	#$C,d3
		move.w	(sp)+,d4
		jsr	SolidObjectFull.w
		bsr.w	sub_7815A
		movea.w	$46(a0),a1
		btst	#7,$2A(a1)
		bne.s	loc_77C7A
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_77C7A:

		jsr	Displace_PlayerOffObject.w
		moveq	#0,d0
		jmp	loc_849D8.w
; ---------------------------------------------------------------------------

loc_77C88:
		movea.w	$44(a0),a1
		move.b	$3C(a1),d0
		neg.b	d0
		move.b	d0,$3C(a0)
		lea	(AngleLookup_2).l,a2
		jsr	MoveSprite_AtAngleLookup.w
		subi.w	#$1C,$10(a0)
		subq.w	#4,$14(a0)
		moveq	#0,d0
		jmp	Child_Draw_Sprite_FlickerMove.w
; ---------------------------------------------------------------------------

loc_77CB4:
		move.b	#$20,7(a0)
		move.b	#$50,6(a0)
		move.l	#loc_77CC6,(a0)

loc_77CC6:

		move.w	$10(a0),-(sp)
		movea.w	$46(a0),a1
		move.w	$10(a1),$10(a0)
		move.w	$14(a1),d0
		subi.w	#$14,d0
		move.w	d0,$14(a0)
		moveq	#$2B,d1
		moveq	#$28,d2
		moveq	#$28,d3
		move.w	(sp)+,d4
		jsr	SolidObjectFull2.w
		bsr.w	sub_780AC

loc_77CF2:

		movea.w	$46(a0),a1
		btst	#7,$2A(a1)
		bne.s	loc_77D00
		rts
; ---------------------------------------------------------------------------

loc_77D00:
		jsr	Displace_PlayerOffObject.w
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------

loc_77D0C:
		tst.w	(ScrEvents_7).w
		bne.s	loc_77D18
		move.l	#loc_77CC6,(a0)

loc_77D18:
		bra.s	loc_77CF2
; ---------------------------------------------------------------------------

loc_77D1A:
		move.b	#$30,7(a0)
		move.b	#$30,6(a0)
		move.l	#loc_77D2C,(a0)

loc_77D2C:

		tst.w	(ScrEvents_7).w
		bne.s	loc_77D60
		move.w	$10(a0),-(sp)
		movea.w	$46(a0),a1
		move.w	$10(a1),$10(a0)
		move.w	$14(a1),d0
		addi.w	#$44,d0
		move.w	d0,$14(a0)
		moveq	#$3B,d1
		moveq	#$30,d2
		moveq	#$30,d3
		move.w	(sp)+,d4
		jsr	SolidObjectFull2.w
		bsr.w	sub_78120
		bra.s	loc_77CF2
; ---------------------------------------------------------------------------

loc_77D60:
		move.l	#loc_77D6C,(a0)
		jsr	Displace_PlayerOffObject.w

loc_77D6C:
		tst.w	(ScrEvents_7).w
		bne.w	loc_77CF2
		move.l	#loc_77D2C,(a0)
		jsr	Displace_PlayerOffObject.w
		bra.s	loc_77D2C
; ---------------------------------------------------------------------------

loc_77D82:
		move.b	#$20,7(a0)
		move.b	#-1,6(a0)
		move.l	#loc_77D94,(a0)

loc_77D94:
		movea.w	$46(a0),a1
		move.w	$10(a1),d0
		addi.w	#$20,d0
		move.w	d0,$10(a0)
		move.w	$14(a1),$14(a0)
		moveq	#$2B,d1
		move.w	#$200,d2
		move.w	#$200,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull2.w
		movea.w	$46(a0),a1
		btst	#4,$38(a1)
		bne.s	loc_77DCC
		rts
; ---------------------------------------------------------------------------

loc_77DCC:
		jsr	Displace_PlayerOffObject.w
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------

loc_77DD8:
		lea	ObjDat3_78296(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_77DEA,(a0)
		rts
; ---------------------------------------------------------------------------

loc_77DEA:
		jsr	Refresh_ChildPosition.w
		moveq	#0,d0
		jmp	Child_Draw_Sprite2_FlickerMove.w
; ---------------------------------------------------------------------------

loc_77DF8:
		lea	ObjDat3_782D2(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_77E16,(a0)
		lea	ChildObjDat_78334(pc),a2
		jsr	CreateChild6_Simple.w
		move.w	a1,$44(a0)

loc_77E16:
		movea.w	$44(a0),a1
		btst	#4,$38(a1)
		bne.s	loc_77E56

loc_77E22:
		jsr	Refresh_ChildPosition.w
		movea.w	$46(a0),a1
		btst	#7,$2A(a1)
		bne.s	loc_77E4A
		tst.w	(ScrEvents_7).w
		bne.s	loc_77E4A
		btst	#0,(V_int_run_count+3).w
		bne.w	locret_77AF6
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_77E4A:

		bset	#7,$2A(a0)
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_77E56:
		move.l	#loc_77E74,(a0)
		move.w	#8,$2E(a0)
		moveq	#$5E,d0
		jsr	Play_Sound_2.w
		lea	ChildObjDat_7833A(pc),a2
		jsr	CreateChild1_Normal.w

loc_77E74:
		subq.w	#1,$2E(a0)
		bmi.s	loc_77E4A
		bra.s	loc_77E22
; ---------------------------------------------------------------------------

loc_77E7C:
		lea	word_782DE(pc),a1
		jsr	SetUp_ObjAttributes2.w
		move.l	#loc_77E90,(a0)
		bsr.w	sub_7819A

loc_77E90:
		subq.w	#1,$2E(a0)
		bmi.s	loc_77EAA
		movea.w	$46(a0),a1
		btst	#7,$2A(a1)
		bne.s	loc_77E4A
		tst.w	(ScrEvents_7).w
		bne.s	loc_77E4A
		rts
; ---------------------------------------------------------------------------

loc_77EAA:
		move.l	#loc_77EB8,(a0)
		move.l	#Go_Delete_Sprite_2,$34(a0)

loc_77EB8:
		lea	byte_78348(pc),a1
		jsr	Animate_RawNoSST.w
		move.w	$18(a0),d0
		addi.w	#$10,d0
		move.w	d0,$18(a0)
		add.w	d0,$3A(a0)
		btst	#2,$38(a0)
		bne.s	loc_77F02
		moveq	#$10,d0
		move.w	$3C(a0),d1
		bmi.s	loc_77EE4
		neg.w	d0

loc_77EE4:
		move.w	$1A(a0),d2
		add.w	d0,d2
		move.w	d2,$1A(a0)
		move.w	d1,d3
		add.w	d2,d1
		eor.w	d1,d3
		bpl.s	loc_77EFE
		moveq	#0,d1
		bset	#2,$38(a0)

loc_77EFE:
		move.w	d1,$3C(a0)

loc_77F02:
		movea.w	$46(a0),a1
		move.w	$10(a1),d0
		move.w	$14(a1),d1
		move.b	$3A(a0),d2
		ext.w	d2
		add.w	d2,d0
		move.w	d0,$10(a0)
		move.b	$3C(a0),d3
		ext.w	d3
		add.w	d3,d1
		move.w	d1,$14(a0)
		btst	#7,$2A(a1)
		bne.w	loc_77E4A
		tst.w	(ScrEvents_7).w
		bne.w	loc_77E4A
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_77F3E:
		lea	word_782E6(pc),a1
		jsr	SetUp_ObjAttributes2.w
		move.l	#loc_77F94,(a0)
		move.w	#7,$2E(a0)
		lea	(Player_1).w,a1
		move.w	$10(a0),d0
		sub.w	$10(a1),d0
		bpl.s	loc_77F64
		neg.w	d0

loc_77F64:
		cmpi.w	#$80,d0
		bhs.s	loc_77F7A
		move.w	#-$400,$18(a0)
		move.w	#$400,$1A(a0)
		bra.w	locret_77F92
; ---------------------------------------------------------------------------

loc_77F7A:
		move.b	#$F,$22(a0)
		move.w	#$8F8,$42(a0)
		move.w	#-$400,$18(a0)
		move.w	#$300,$1A(a0)

locret_77F92:
		rts
; ---------------------------------------------------------------------------

loc_77F94:
		subq.w	#1,$2E(a0)
		bmi.s	loc_77FB6
		move.b	$18(a0),d0
		add.b	d0,$42(a0)
		move.b	$1A(a0),d0
		add.b	d0,$43(a0)
		jsr	Refresh_ChildPosition.w
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_77FB6:
		move.l	#loc_77FBC,(a0)

loc_77FBC:
		jsr	MoveSprite2.w
		jsr	Add_SpriteToCollisionResponseList.w
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_77FCE:
		lea	ObjDat3_782EE(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_77FEC,(a0)
		move.w	#8,$2E(a0)
		move.l	#Go_Delete_Sprite,$34(a0)

loc_77FEC:
		st	(ScrEvents_10).w
		jsr	Refresh_ChildPosition.w
		jmp	Wait_Draw.w
; ---------------------------------------------------------------------------

loc_77FFC:
		lea	ObjDat3_782A2(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_78018,(a0)
		move.w	#$5260,$10(a0)
		move.w	#$710,$14(a0)

loc_78018:
		movea.w	$46(a0),a1
		cmpi.w	#$5180,$10(a0)
		blo.s	loc_78032
		btst	#7,$2A(a1)
		bne.s	loc_78032
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_78032:

		jmp	Delete_Current_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_78038:
		tst.b	$3C(a0)
		bpl.s	locret_7805E
		tst.w	$18(a0)
		bpl.s	loc_78054

		tst.b	PlayerSpawn.w		; NAT: Check if spawns are disabled
		bpl.s	.nodisable		; if not, branch
		cmp.b	#6,Player_1+routine.w	; check if dead
		blt.s	.nodisable		; if not, branch
		cmp.b	#6,Player_1+routine.w	; check if dead
		bgt.s	.backtrack		; if yes, branch

.nodisable	cmpi.w	#$4E80,$10(a0)
		bhs.s	locret_7805E
.backtrack	lea	word_78060(pc),a1
		bra.w	loc_7773C
; ---------------------------------------------------------------------------

loc_78054:
		cmpi.w	#$5210,$10(a0)
		bhs.w	loc_7772C

locret_7805E:

		rts
; End of function sub_78038

; ---------------------------------------------------------------------------
word_78060:	dc.w   $400,  $800, $FC00,   $1F,    $F,     7

; =============== S U B R O U T I N E =======================================


sub_7806C:

		subq.w	#1,(__u_FA82).w
		bpl.w	locret_77AF6
		move.w	#$200,(__u_FA82).w
		moveq	#$53,d0
		jsr	Play_Sound_2.w
		lea	ChildObjDat_7832C(pc),a2
		jmp	CreateChild1_Normal.w
; End of function sub_7806C


; =============== S U B R O U T I N E =======================================


sub_7808C:

		move.b	$26(a0),d0
		sub.b	$3E(a0),d0
		move.b	d0,$26(a0)
		jsr	GetSineCosine.w
		asr.w	#4,d0
		move.w	$3A(a0),d1
		add.w	d0,d1
		move.w	d1,$14(a0)

locret_78118:
		rts
; End of function sub_7808C


; =============== S U B R O U T I N E =======================================


sub_780AC:
		swap	d6
		moveq	#0,d0
		lea	(Player_1).w,a1
		bsr.w	sub_780BE
		moveq	#1,d0
		lea	(Player_2).w,a1
; End of function sub_780AC


; =============== S U B R O U T I N E =======================================


sub_780BE:
		btst	d0,d6
		beq.s	locret_78118
		move.w	$10(a0),d0
		sub.w	$10(a1),d0
		bcs.s	loc_7811A
		cmpi.b	#2,$20(a1)
		beq.s	loc_780E4
		cmpi.b	#2,$38(a1)
		bne.s	loc_780E4
		cmpi.b	#1,$2F(a1)
		bne.s	locret_78118

loc_780E4:

		move.w	$14(a1),(ScrEvents_7).w
		move.l	#loc_77D0C,(a0)
		move.w	#-$400,$18(a1)
		move.w	#-$300,$1A(a1)
		movea.w	$46(a0),a2
		move.b	5(a2),$42(a2)
		move.b	#$C,5(a2)
		move.b	#$F,$28(a2)
		jmp	Displace_PlayerOffObject.w
; ---------------------------------------------------------------------------

loc_7811A:
		jmp	sub_24280.w
; End of function sub_780BE


; =============== S U B R O U T I N E =======================================


sub_78120:
		swap	d6
		moveq	#0,d0
		moveq	#3,d1
		lea	(Player_1).w,a1
		bsr.w	sub_78136
		moveq	#1,d0
		moveq	#4,d1
		lea	(Player_2).w,a1
; End of function sub_78120


; =============== S U B R O U T I N E =======================================


sub_78136:
		btst	d0,d6
		bne.s	loc_78140
		bclr	d1,$2A(a0)
		beq.s	locret_78158

loc_78140:
		bclr	#3,$2A(a1)
		tst.b	$34(a1)
		bne.s	locret_78158
		andi.b	#-$61,$2A(a0)
		jmp	sub_24280.w

locret_78158:

		rts
; End of function sub_78136


; =============== S U B R O U T I N E =======================================


sub_7815A:
		movea.w	$44(a0),a1
		btst	#7,$2A(a1)
		bne.s	locret_78198
		swap	d6
		moveq	#0,d0
		lea	(Player_1).w,a1
		bsr.w	sub_78178
		moveq	#1,d0
		lea	(Player_2).w,a1
; End of function sub_7815A


; =============== S U B R O U T I N E =======================================


sub_78178:
		btst	d0,d6
		beq.s	locret_78198
		tst.b	$34(a1)
		bne.s	locret_78198
		move.w	$10(a0),d0
		sub.w	$10(a1),d0
		bcs.s	locret_78198
		andi.b	#-$61,$2A(a0)
		jmp	sub_24280.w

locret_78198:
		rts
; End of function sub_78178


; =============== S U B R O U T I N E =======================================


sub_7819A:
		moveq	#0,d0
		move.b	$2C(a0),d0
		lea	word_781BC(pc,d0.w),a1
		move.b	(a1)+,$3A(a0)
		move.b	(a1)+,$3C(a0)
		move.w	word_781BC(pc,d0.w),$42(a0)
		addq.w	#2,d0
		lsl.w	#2,d0
		move.w	d0,$2E(a0)
		rts
; End of function sub_7819A

; ---------------------------------------------------------------------------
word_781BC:	dc.w $EA02
		dc.w $F0F8
		dc.w $EC09
		dc.w $E5FC
		dc.w $F308
		dc.w $EAFB
		dc.w $E104
		dc.w $EE0D
		dc.w $E8F8
		dc.w $ECFF
		dc.w $E0FE
		dc.w $E40C
		dc.w $E6FF
		dc.w $DC09
		dc.w $E1F6
		dc.w $E604
		dc.w $EC02
		dc.w $EA06
		dc.w $E8F4
		dc.w $DA0C
; ---------------------------------------------------------------------------

loc_781E4:
		tst.b	$28(a0)
		bne.s	locret_7822E
		tst.b	$29(a0)
		beq.s	loc_78230
		tst.b	$20(a0)
		bne.s	loc_7820A
		bset	#6,$2A(a0)
		move.b	#$20,$20(a0)
		moveq	#$6E,d0
		jsr	Play_Sound_2.w

loc_7820A:
		moveq	#0,d0
		btst	#0,$20(a0)
		bne.s	loc_78218
		addi.w	#$A,d0

loc_78218:
		bsr.w	sub_7825E
		subq.b	#1,$20(a0)
		bne.s	locret_7822E
		bclr	#6,$2A(a0)
		move.b	$25(a0),$28(a0)

locret_7822E:

		rts
; ---------------------------------------------------------------------------

loc_78230:
		move.l	#Wait_FadeToLevelMusic,(a0)
		move.l	#loc_7780A,$34(a0)
		move.w	#$55,(ScrEvents_2).w
		lea	Child6_CreateBossExplosion.w,a2
		jsr	CreateChild6_Simple.w
		move.w	#$5140,(Camera_max_X_pos).w
		jmp	BossDefeated_StopTimer.w

; =============== S U B R O U T I N E =======================================


sub_7825E:

		lea	word_7826C(pc),a1
		lea	word_78276(pc,d0.w),a2
		jmp	CopyWordData_5.w		; NAT: https://s3unlocked.blogspot.com/2017/07/boss-flash-bloopers.html
; End of function sub_7825E

; ---------------------------------------------------------------------------
word_7826C:	dc.w $FC6C
		dc.w $FC6E
		dc.w $FC70
		dc.w $FC72
		dc.w $FC74
word_78276:	dc.w $6E
		dc.w $24C
		dc.w $28
		dc.w 4
		dc.w 2
		dc.w $AAA
		dc.w $CCC

		dc.w $CCC
		dc.w $EEE
		dc.w $EEE
ObjDat3_7828A:	dc.l Map_RobotnikShip
		dc.w $52E
		dc.w prio(6)
		dc.b $20
		dc.b $20
		dc.b $A
		dc.b 0
ObjDat3_78296:	dc.l Map_SOZEndBoss
		dc.w $23A4
		dc.w prio(5)
		dc.b $18
		dc.b $1C
		dc.b 6
		dc.b 0
ObjDat3_782A2:	dc.l Map_SOZEndBossBody
		dc.w 1
		dc.w prio(0)
		dc.b $10
		dc.b $30
		dc.b 0
		dc.b 0
word_782AE:	dc.w prio(5)
		dc.b $18
		dc.b $18
		dc.b 0
		dc.b 0
word_782B4:	dc.w prio(6)
		dc.b $18
		dc.b $18
		dc.b 3
		dc.b 0
word_782BA:	dc.w prio(3)
		dc.b $14
		dc.b $14
		dc.b 1
		dc.b 0
word_782C0:	dc.w prio(6)
		dc.b $14
		dc.b $14
		dc.b 4
		dc.b 0
word_782C6:	dc.w prio(2)
		dc.b $28
		dc.b $14
		dc.b 2
		dc.b 0
word_782CC:	dc.w prio(6)
		dc.b $28
		dc.b $14
		dc.b 5
		dc.b 0
ObjDat3_782D2:	dc.l Map_SOZEndBoss
		dc.w $A3A4
		dc.w prio(3)
		dc.b 8
		dc.b 8
		dc.b $D
		dc.b 0
word_782DE:	dc.w $23A4
		dc.w prio(4)
		dc.b 4
		dc.b 4
		dc.b $A
		dc.b 0
word_782E6:	dc.w $23A4
		dc.w prio(6)
		dc.b $14
		dc.b $14
		dc.b $E
		dc.b $98
ObjDat3_782EE:	dc.l Map_SpriteMask
		dc.w 0
		dc.w prio(5)
		dc.b $20
		dc.b $20
		dc.b 4
		dc.b 0
ChildObjDat_782FA:dc.w 5
		dc.l loc_77CB4
		dc.w $EC
		dc.l loc_77D1A
		dc.w $40
		dc.l loc_77D82
		dc.w $2000
		dc.l loc_77FFC
		dc.w 0
		dc.l loc_77DD8
		dc.w $24
		dc.l Obj_RobotnikHead4
		dc.w $E4
ChildObjDat_78320:dc.w 2
		dc.l loc_77AB8
ChildObjDat_78326:dc.w 2
		dc.l loc_77AB4
ChildObjDat_7832C:dc.w 0
		dc.l loc_77DF8
		dc.w $E8D2
ChildObjDat_78334:dc.w $13
		dc.l loc_77E7C
ChildObjDat_7833A:dc.w 1
		dc.l loc_77FCE
		dc.w $EC
		dc.l loc_77F3E
		dc.w $4F6
byte_78348:	dc.b 7
		dc.b $A
		dc.b $A
		dc.b $B
		dc.b $C
		dc.b $F4
Map_SOZEndBoss:	include "Levels/SOZ/Misc Object Data/Map - End Boss.asm"

Map_SOZEndBossBody:	include "Levels/SOZ/Misc Object Data/Map - End Boss Body.asm"

Pal_SOZEndBoss1:	binclude "Levels/SOZ/Palettes/End Boss 1.bin"
	even

Pal_SOZEndBoss2:	binclude "Levels/SOZ/Palettes/End Boss 2.bin"
	even

	dc.b "TEST 2, MR KIKKOMAN"
	EVEN

byte_784E0:	dc.b	6, $10
		dc.b	8, $10
		dc.b  $2B,   0
		dc.b  $2D,   0
byte_784E8:	dc.b	7, $10
		dc.b	7, $10
		dc.b  $2C,   0
		dc.b  $2C,   0
; ---------------------------------------------------------------------------

Obj_LRZ_Miniboss:
		btst	#5,OptionsBits.w		; NAT: Check if bosses are on
		bne.s	.enabled			; if are, branch
		lea	.screen(pc),a1			; else, lock screen
		jmp	Boss_Force_End_2		;

.screen		dc.w $2C00, $2C00, $710, $710

.enabled	lea	byte_784E0(pc),a1
		jsr	(Check_CameraInRange).l
		move.l	#loc_78522,(a0)
		move.l	#loc_78528,$34(a0)
		lea	byte_784E8(pc),a1
		move.b	#Mus_Minib_SK,$26(a0)
		jsr	sub_85D6A.w
		lea	Pal_LRZMiniboss1(pc),a1
		jmp	PalLoad_Line1.w
; ---------------------------------------------------------------------------

loc_78522:
		jmp	loc_85CA4.w
; ---------------------------------------------------------------------------

loc_78528:
		move.l	#loc_78538,(a0)
		lea	Pal_LRZMiniboss2(pc),a1
		bra.w	sub_78B38
; ---------------------------------------------------------------------------

loc_78538:
		move.w	#$2C10,PlayerSpawn.w		; NAT: Set left spawn
		cmp.w	#$2C88,x_pos(a0)		; check if boss is beyond middle
		bhs.s	.gotit				; yes? branch
		move.w	#$2D20,PlayerSpawn.w		; set right spawn

.gotit		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_7854C(pc,d0.w),d1
		jsr	off_7854C(pc,d1.w)

		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
off_7854C:	dc.w loc_78562-off_7854C

		dc.w loc_78592-off_7854C
		dc.w loc_785C2-off_7854C
		dc.w loc_785E4-off_7854C
		dc.w loc_785E4-off_7854C
		dc.w loc_78628-off_7854C
		dc.w loc_78666-off_7854C
		dc.w loc_785E4-off_7854C
		dc.w loc_786DA-off_7854C
		dc.w loc_7871A-off_7854C
		dc.w loc_78768-off_7854C
; ---------------------------------------------------------------------------

loc_78562:
		move.w	#$7A6,PlayerSpawn+2.w		; NAT: Set respawn y-pos
		jsr	Boss_EmptyRange(pc)

		lea	ObjDat3_78D5A(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.b	#6,$29(a0)
		move.w	#$7A8,(__u_FAB0).w
		move.w	$14(a0),(__u_FAB2).w
		move.b	#$70,BossHitMode.w		; NAT: Enable hit mode
		clr.w	BossHitsP1.w			; clear hits count

		lea	ChildObjDat_78D84(pc),a2
		jsr	(CreateChild8_TreeListRepeated).l
		lea	ChildObjDat_78D8A(pc),a2
		jmp	(CreateChild8_TreeListRepeated).l
; ---------------------------------------------------------------------------

loc_78592:
		tst.l	(Kos_module_queue).w
		bne.s	locret_785E2
		move.b	#4,5(a0)
		move.w	#$2F,$2E(a0)
		lea	(ArtKosM_LRZMiniboss).l,a1
		move.w	#$7F60,d2
		jsr	Queue_Kos_Module.w
		lea	PLC_83D64.w,a1
		jmp	Load_PLC_Raw.w
; ---------------------------------------------------------------------------

loc_785C2:
		subq.w	#1,$2E(a0)
		bpl.s	locret_785E2
		move.b	#6,5(a0)
		bset	#3,$38(a0)
		move.w	#$15F,$2E(a0)
		move.l	#loc_785EA,$34(a0)

locret_785E2:
		rts
; ---------------------------------------------------------------------------

loc_785E4:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_785EA:

		move.b	#8,5(a0)
		bclr	#3,$38(a0)
		move.w	#$4F,$2E(a0)
		move.l	#loc_78606,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_78606:
		move.b	#$A,5(a0)
		bsr.s	Obj_LRZMB_ChooseTarget
		clr.w	$18(a0)
		move.w	#-$400,$1A(a0)
		moveq	#-$6B,d0
		jsr	Play_Sound_2.w
		lea	byte_78DE2(pc),a1
		jmp	Set_Raw_Animation.w
; ---------------------------------------------------------------------------

Obj_LRZMB_ChooseTarget:
		moveq	#0,d0			; prepare 0
		move.w	#Player_1,$42(a0)	; select Sonic

		cmp.b	#6,Player_1+routine.w	; check if dead
		shs	d1			; if so, d1 = $FF
		sub.b	d1,d0			; add to d0

		cmp.b	#6,Player_2+routine.w	; check if dead
		shs	d1			; if so, d1 = $FF
		add.b	d1,d0			; sub from d0

		bgt.s	.tails			; if chose Tails, branch
		bmi.s	.rts			; if Sonic, branch

		jsr	Random_Number.w		; get a random number
		tst.b	d0			; check which player to choose
		bpl.s	.rts			; if Sonic, branch

.tails		move.w	#Player_2,$42(a0)	; select Tails
.rts		rts
; ---------------------------------------------------------------------------

loc_78628:
		jsr	Animate_RawMultiDelay.w
		bsr.w	sub_7867C
		jsr	MoveSprite2.w
		move.w	(__u_FAB0).w,d0
		cmp.w	$14(a0),d0
		blo.s	locret_786A0
		move.w	d0,$14(a0)
		move.b	#$C,5(a0)
		bsr.s	Obj_LRZMB_ChooseTarget
		clr.w	$1A(a0)
		move.w	#$BF,$2E(a0)
		move.l	#loc_786A6,$34(a0)
		jmp	Swing_Setup1.w
; ---------------------------------------------------------------------------

loc_78666:
		jsr	Swing_UpAndDown.w
		bsr.s	sub_7867C
		jsr	MoveSprite2.w
		jmp	Obj_Wait.w

; =============== S U B R O U T I N E =======================================


sub_7867C:

		move.b	(V_int_run_count+3).w,d0
		andi.w	#$F,d0
		bne.s	locret_786A0
		move.w	$42(a0),a1			; get selected player
		jsr	Find_OtherObject.w
		clr.w	$18(a0)
		cmpi.w	#8,d2
		bls.s	locret_786A0
		move.w	word_786A2(pc,d0.w),$18(a0)

locret_786A0:

		rts
; End of function sub_7867C

; ---------------------------------------------------------------------------
word_786A2:	dc.w $FE00
		dc.w $200
; ---------------------------------------------------------------------------

loc_786A6:
		move.b	#$E,5(a0)
		move.w	#$1F,$2E(a0)
		move.l	#loc_786BC,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_786BC:
		move.b	#$10,5(a0)
		move.b	#-$4B,$28(a0)
		move.l	#loc_786EA,$34(a0)
		lea	byte_78DF1(pc),a1
		jmp	Set_Raw_Animation.w
; ---------------------------------------------------------------------------

loc_786DA:
		st	PlayerSpawn.w
		addq.w	#4,$14(a0)
		jsr	Animate_RawMultiDelay.w
		jmp	Add_SpriteToCollisionResponseList.w
; ---------------------------------------------------------------------------

loc_786EA:
		move.b	#$12,5(a0)
		move.b	#5,$22(a0)
		move.b	#6,$28(a0)
		move.w	#$5F,$2E(a0)
		move.l	#loc_7873A,$34(a0)
		move.w	#$14,(ScrShake_Value).w
		moveq	#-$65,d0
		jmp	Play_Sound_2.w
; ---------------------------------------------------------------------------

loc_7871A:
		moveq	#$33,d1
		moveq	#4,d2
		moveq	#0,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		bsr.w	sub_78C14
		st	PlayerSpawn.w
		jsr	Add_SpriteToCollisionResponseList.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_7873A:
		move.b	#$14,5(a0)
		move.w	#$2F,$2E(a0)
		move.l	#loc_787AE,$34(a0)
		clr.w	$18(a0)
		move.w	#$400,$1A(a0)
		lea	byte_78DF8(pc),a1
		jsr	Set_Raw_Animation.w
		jmp	Displace_PlayerOffObject.w
; ---------------------------------------------------------------------------

loc_78768:
		st	PlayerSpawn.w
		jsr	Animate_RawMultiDelay.w
		cmpi.b	#6,$23(a0)
		bhs.s	loc_78784
		bsr.w	sub_78C14
		jsr	Add_SpriteToCollisionResponseList.w
		bra.w	loc_7878C
; ---------------------------------------------------------------------------

loc_78784:
		bsr.w	sub_78CCA
		clr.b	$28(a0)

loc_7878C:
		jsr	MoveSprite2.w
		jsr	Obj_Wait.w
		move.w	(__u_FAB2).w,d0
		cmp.w	$14(a0),d0
		bhi.s	locret_787AC
		move.w	d0,$14(a0)
		move.b	#6,5(a0)

locret_787AC:
		rts
; ---------------------------------------------------------------------------

loc_787AE:
		move.l	#loc_785EA,$34(a0)
		move.b	$38(a0),d0
		andi.b	#-$40,d0
		cmpi.b	#-$40,d0
		beq.s	loc_787D8
		move.w	#$15F,$2E(a0)
		bset	#3,$38(a0)
		bclr	#2,$38(a0)
		rts
; ---------------------------------------------------------------------------

loc_787D8:
		move.w	#$1F,$2E(a0)
		rts
; ---------------------------------------------------------------------------

loc_787E0:
		jsr	Create_New_Sprite.w
		bne.s	loc_787EE
		move.l	#loc_78AA8,(a1)

loc_787EE:
		lea	ChildObjDat_78D9E(pc),a2
		jsr	CreateChild1_Normal.w
		jmp	Obj_EndSignControl_HitHUD	; NAT: do extra stuff here
; ---------------------------------------------------------------------------

loc_787FE:
		bset	#0,4(a0)
		move.w	#$10,$2E(a0)

loc_7880A:
		moveq	#0,d0
		moveq	#0,d1
		move.b	$2C(a0),d1
		beq.s	loc_7881E
		cmpi.b	#$16,d1
		bne.s	loc_7881C
		addq.w	#4,d0

loc_7881C:
		addq.w	#4,d0

loc_7881E:
		movea.l	off_7882C(pc,d0.w),a1
		move.l	a1,(a0)
		add.w	d1,d1
		add.w	d1,$2E(a0)
		jmp	(a1)
; ---------------------------------------------------------------------------
off_7882C:	dc.l loc_78838
		dc.l loc_788DE
		dc.l loc_78922
; ---------------------------------------------------------------------------

loc_78838:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_78850(pc,d0.w),d1
		jsr	off_78850(pc,d1.w)
		bsr.w	sub_78B46
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
off_78850:	dc.w loc_7885A-off_78850

		dc.w loc_78868-off_78850
		dc.w loc_78890-off_78850
		dc.w loc_788A4-off_78850
		dc.w loc_78890-off_78850
; ---------------------------------------------------------------------------

loc_7885A:
		lea	word_78D66(pc),a1
		jsr	SetUp_ObjAttributes3.w
		bsr.w	sub_78BEE

loc_78868:
		movea.w	$44(a0),a1
		btst	#3,$38(a1)
		beq.s	locret_7888E
		move.b	#4,5(a0)
		move.w	#-$200,$1A(a0)
		move.w	#$6F,$2E(a0)
		move.l	#loc_7889C,$34(a0)

locret_7888E:
		rts
; ---------------------------------------------------------------------------

loc_78890:
		st	PlayerSpawn.w			; NAT: disable respawn
		jsr	MoveSprite2.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_7889C:
		move.b	#6,5(a0)
		rts
; ---------------------------------------------------------------------------

loc_788A4:
		movea.w	$44(a0),a1
		btst	#3,$38(a1)
		bne.s	locret_788CA
		move.b	#8,5(a0)
		move.w	#$200,$1A(a0)
		move.w	#$6F,$2E(a0)
		move.l	#loc_788CC,$34(a0)

locret_788CA:
		rts
; ---------------------------------------------------------------------------

loc_788CC:
		move.b	#2,5(a0)
		movea.w	$44(a0),a1
		bset	#2,$38(a1)
		rts
; ---------------------------------------------------------------------------

loc_788DE:
		lea	word_78D66(pc),a1
		jsr	SetUp_ObjAttributes3.w
		bsr.w	sub_78BD6
		move.l	#loc_788F4,(a0)
		rts
; ---------------------------------------------------------------------------

loc_788F4:
		move.b	$3C(a0),d0
		add.b	$40(a0),d0
		cmpi.b	#$70,d0
		blo.s	loc_78908
		cmpi.b	#-$70,d0
		bls.s	loc_7890C

loc_78908:
		neg.b	$40(a0)

loc_7890C:
		move.b	d0,$3C(a0)
		moveq	#4,d2
		jsr	MoveSprite_CircularSimple.w
		bsr.w	sub_78B46
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_78922:
		lea	word_78D6C(pc),a1
		jsr	SetUp_ObjAttributes3.w
		bsr.w	sub_78BD6
		move.l	#loc_78946,(a0)
		move.l	#byte_78E05,$30(a0)
		move.b	#4,$29(a0)
		rts
; ---------------------------------------------------------------------------

loc_78946:

		movea.w	$44(a0),a1
		btst	#3,$38(a1)
		beq.s	loc_78976
		move.l	#loc_7897A,(a0)
		moveq	#$7F,d0
		btst	#0,4(a0)
		beq.s	loc_78966
		move.w	#$DF,d0

loc_78966:
		move.w	d0,$2E(a0)
		move.l	#loc_789CA,$34(a0)
		clr.b	$39(a0)

loc_78976:
		bra.w	sub_78B46
; ---------------------------------------------------------------------------

loc_7897A:
		movea.w	$44(a0),a1
		btst	#2,$38(a1)
		beq.s	loc_7898C
		move.l	#loc_78946,(a0)

loc_7898C:
		jsr	Animate_Raw.w
		lea	(AngleLookup_2).l,a2
		jsr	MoveSprite_AtAngleLookup.w
		jsr	Obj_Wait.w
		bsr.w	sub_78B46
		bsr.w	sub_78CF4
		move.b	$20(a0),d0
		beq.s	loc_789BE
		btst	#0,d0
		bne.s	locret_78A00
		bra.w	loc_789C4
; ---------------------------------------------------------------------------

loc_789BE:
		jsr	Add_SpriteToCollisionResponseList.w

loc_789C4:
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_789CA:
		move.b	$39(a0),d0
		addq.b	#1,d0
		move.b	d0,$39(a0)
		move.w	#$13,$2E(a0)
		cmpi.b	#3,d0
		blo.s	loc_789E6
		move.w	#$FFF,$2E(a0)

loc_789E6:
		moveq	#-$68,d0
		jsr	Play_Sound_2.w
		lea	ChildObjDat_78D90(pc),a2
		jsr	(CreateChild10_NormalAdjusted).l
		bne.s	locret_78A00
		move.b	$39(a0),$2C(a1)

locret_78A00:
		rts
; ---------------------------------------------------------------------------

loc_78A02:
		lea	word_78D72(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_78A1C,(a0)
		bset	#3,$2B(a0)
		bsr.w	sub_78BAA

loc_78A1C:
		jsr	MoveSprite2.w
		jmp	Sprite_CheckDeleteTouchXY.w
; ---------------------------------------------------------------------------

loc_78A28:
		lea	word_78D78(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_78A46,(a0)
		move.w	#$1F,$2E(a0)
		move.l	#Go_Delete_Sprite,$34(a0)

loc_78A46:
		jsr	Obj_Wait.w
		movea.w	$46(a0),a1
		move.w	$10(a1),$10(a0)
		move.w	$14(a1),$14(a0)
		btst	#7,$2A(a1)
		bne.s	loc_78A6A
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_78A6A:
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------

loc_78A70:

		lea	word_78D7E(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#Obj_FlickerMove,(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		lsr.w	#1,d0
		move.b	RawAni_78A9C(pc,d0.w),$22(a0)
		moveq	#$5C,d0
		jsr	Set_IndexedVelocity.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
RawAni_78A9C:	dc.b   $C,  $C,	 $C, $11, $11, $12, $13,  $D,  $E,  $F,	$10,   0
; ---------------------------------------------------------------------------

loc_78AA8:
	;	tst.b	(Title_Card_Out_Flag).w		; NAT: rework this to only cycle palette and nothing else
	;	beq.s	loc_78B06
		move.l	#loc_78AE0,(a0)
		lea	word_78EAA(pc),a1
		lea	(PalRotation_Data).w,a2
		move.l	(a1)+,(a2)+
		move.l	(a1)+,(a2)+
		clr.w	(a2)
		move.l	#loc_78B06,(__u_FADA).w
		move.w	#$7FFF,(PalCyc_Counters+$2).w
	;	jsr	Create_New_Sprite.w
	;	bne.s	loc_78AE0
	;	move.l	#loc_78B08,(a1)

loc_78AE0:
		tst.w	(__u_FADA+$2).w			; check if rotation script is disabled
		beq.s	loc_78AE6			; if so, delete
		jmp	Run_PalRotationScript.w

loc_78AE6:
	;	cmpi.w	#$940,(Camera_X_pos).w
	;	blo.s	loc_78B06
	;	move.w	#$940,(Camera_min_X_pos).w
	;	clr.w	(PalCyc_Counters+$2).w
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_78B00:
	;	move.l	#loc_78AE6,(a0)

loc_78B06:
		clr.l	(__u_FADA).w		; NAT: Remove event
		rts
; ---------------------------------------------------------------------------

loc_78B08:
	;	cmpi.w	#$2C0,(Camera_X_pos).w
	;	blo.s	loc_78B06
	;	move.w	#$2C0,(Camera_min_X_pos).w
	;	lea	(Pal_LRZ2).l,a1
	;	lea	(Normal_palette_line_2).w,a2
	;	moveq	#7,d6

loc_78B24:
	;	move.l	(a1)+,(a2)+
	;	dbf	d6,loc_78B24
	;	lea	Pal_LRZMiniboss3(pc),a1
	;	bsr.w	sub_78B38
	;	jmp	Delete_Current_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_78B38:

		lea	(Normal_palette_line_3).w,a2
		moveq	#$F,d0

loc_78B3E:
		move.l	(a1)+,(a2)+
		dbf	d0,loc_78B3E
		rts

; =============== S U B R O U T I N E =======================================

sub_78B46:

		movea.w	$44(a0),a1
		moveq	#6,d0
		btst	#0,4(a0)
		beq.s	loc_78B56
		moveq	#7,d0

loc_78B56:
		btst	d0,$38(a1)
		beq.s	locret_78BA8
		move.l	#Wait_Draw,(a0)
		move.w	#prio(1),8(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		add.w	d0,d0
		move.w	#$2C,d1
		sub.w	d0,d1
		move.w	d1,$2E(a0)
		move.l	#loc_78B86,$34(a0)
		rts
; End of function sub_78B46

; ---------------------------------------------------------------------------

loc_78B86:
		move.w	#$F,$2E(a0)
		move.l	#Go_Delete_Sprite,$34(a0)
		lea	Child6_CreateBossExplosion.w,a2
		jsr	CreateChild1_Normal.w
		bne.s	locret_78BA8
		move.b	#6,$2C(a1)

locret_78BA8:
		rts

; =============== S U B R O U T I N E =======================================


sub_78BAA:
		moveq	#0,d0
		move.b	$2C(a0),d0
		lsl.w	#2,d0
		move.l	loc_78BC4+2(pc,d0.w),$18(a0)
		movea.w	$46(a0),a1
		btst	#0,4(a1)
		beq.s	locret_78BC8

loc_78BC4:
		neg.w	$18(a0)

locret_78BC8:
		rts
; End of function sub_78BAA

; ---------------------------------------------------------------------------
		dc.w   $200,  $300
		dc.w   $200,  $200
		dc.w   $200,  $100

; =============== S U B R O U T I N E =======================================


sub_78BD6:

		move.l	(sp)+,$34(a0)
		move.l	#Wait_Draw,(a0)
		move.b	#-$80,$3C(a0)
		move.b	#1,$40(a0)
		rts
; End of function sub_78BD6


; =============== S U B R O U T I N E =======================================


sub_78BEE:
		move.w	#$20,d0
		btst	#0,4(a0)
		beq.s	loc_78BFE
		move.w	#$120,d0

loc_78BFE:
		add.w	(Camera_X_pos).w,d0
		move.w	d0,$10(a0)
		move.w	(Camera_Y_pos).w,d0
		addi.w	#$1B8,d0
		move.w	d0,$14(a0)
		rts
; End of function sub_78BEE


; =============== S U B R O U T I N E =======================================


sub_78C14:

		tst.b	$28(a0)
		bne.s	locret_78C5E
		move.b	$29(a0),d0
		beq.s	loc_78C60
		tst.b	$20(a0)
		bne.s	loc_78C3A
		move.b	#$20,$20(a0)
		moveq	#$6E,d0
		jsr	Play_Sound_2.w
		bset	#6,$2A(a0)

loc_78C3A:
		moveq	#0,d0
		btst	#0,$20(a0)
		bne.s	loc_78C48
		addi.w	#2*6,d0		; NAT: https://s3unlocked.blogspot.com/2017/07/boss-flash-bloopers.html

loc_78C48:
		bsr.w	sub_78C98
		subq.b	#1,$20(a0)
		bne.s	locret_78C5E
		bclr	#6,$2A(a0)
		move.b	$25(a0),$28(a0)

locret_78C5E:

		rts
; ---------------------------------------------------------------------------

loc_78C60:
		move.l	#Wait_FadeToLevelMusic,(a0)
	;	move.w	#prio(1),8(a0)
		bset	#6,$38(a0)
		bset	#7,$38(a0)
		move.l	#loc_787E0,$34(a0)
		lea	Child6_CreateBossExplosion.w,a2
		jsr	CreateChild1_Normal.w
		jsr	Displace_PlayerOffObject.w
		jmp	BossDefeated_StopTimer.w
; End of function sub_78C14


; =============== S U B R O U T I N E =======================================


sub_78C98:

		lea	word_78CA6(pc),a1
		lea	word_78CB2(pc,d0.w),a2
		jmp	CopyWordData_6.w
; End of function sub_78C98

; ---------------------------------------------------------------------------
word_78CA6:	dc.w $FC26, $FC28, $FC30, $FC38, $FC3A, $FC3C
word_78CB2:	dc.w $2A, 6, 2, $644, $422, 0
		dc.w $888, $AAA, $CCC, $AAA, $CCC, $EEE

; =============== S U B R O U T I N E =======================================


sub_78CCA:
		tst.b	$29(a0)
		beq.s	loc_78C60
		tst.b	$20(a0)
		beq.s	locret_78CF2
		moveq	#0,d0
		btst	#0,$20(a0)
		bne.s	loc_78CE4
		addi.w	#4,d0

loc_78CE4:
		bsr.s	sub_78C98
		subq.b	#1,$20(a0)
		bne.s	locret_78CF2
		bclr	#6,$2A(a0)

locret_78CF2:

		rts
; End of function sub_78CCA


; =============== S U B R O U T I N E =======================================


sub_78CF4:
		tst.b	$28(a0)
		bne.s	locret_78D2A
		move.b	$29(a0),d0
		beq.s	loc_78D2C
		tst.b	$20(a0)
		bne.s	loc_78D1E
		move.b	#$20,$20(a0)
		moveq	#$6E,d0
		jsr	Play_Sound_2.w
		lea	ChildObjDat_78D98(pc),a2
		jsr	CreateChild6_Simple.w

loc_78D1E:
		subq.b	#1,$20(a0)
		bne.s	locret_78D2A
		move.b	$25(a0),$28(a0)

locret_78D2A:

		rts
; ---------------------------------------------------------------------------

loc_78D2C:
		movea.w	$44(a0),a1
		move.w	#6,d0
		btst	#0,4(a0)
		beq.s	loc_78D40
		move.w	#7,d0

loc_78D40:
		bset	d0,$38(a1)
		move.b	$38(a1),d0
		andi.b	#-$40,d0
		cmpi.b	#-$40,d0
		bne.s	locret_78D2A
		move.w	#$1F,$2E(a1)
		rts
; End of function sub_78CF4

; ---------------------------------------------------------------------------
ObjDat3_78D5A:	dc.l Map_LRZMiniboss
		dc.w $A3FB
		dc.w prio(0)
		dc.b $30
		dc.b $80
		dc.b 1
		dc.b 0
word_78D66:	dc.w prio(0)

		dc.b 8
		dc.b 8
		dc.b 8
		dc.b 0
word_78D6C:	dc.w prio(0)
		dc.b $10
		dc.b $10
		dc.b 6
		dc.b 6
word_78D72:	dc.w prio(0)
		dc.b 4
		dc.b 4
		dc.b 9
		dc.b $98
word_78D78:	dc.w prio(0)
		dc.b $10
		dc.b $10
		dc.b $A
		dc.b 0
word_78D7E:	dc.w prio(1)
		dc.b $18
		dc.b $14
		dc.b $C
		dc.b 0
ChildObjDat_78D84:dc.w $B
		dc.l loc_7880A
ChildObjDat_78D8A:dc.w $B
		dc.l loc_787FE
ChildObjDat_78D90:dc.w 0
		dc.l loc_78A02
		dc.w $800
ChildObjDat_78D98:dc.w 0
		dc.l loc_78A28
ChildObjDat_78D9E:dc.w $A
		dc.l loc_78A70
		dc.w $F4
		dc.l loc_78A70
		dc.w $E7F4
		dc.l loc_78A70
		dc.w $19F4
		dc.l loc_78A70
		dc.w $F422
		dc.l loc_78A70
		dc.w $C22
		dc.l loc_78A70
		dc.w $F836
		dc.l loc_78A70
		dc.w $836
		dc.l loc_78A70
		dc.w $EE04
		dc.l loc_78A70
		dc.w $1204
		dc.l loc_78A70
		dc.w $EE0C
		dc.l loc_78A70
		dc.w $120C
byte_78DE2:	dc.b	5,   0
		dc.b	5,   5
		dc.b	4,   1
		dc.b	3,   2
		dc.b	2,   3
		dc.b	1, $7F
		dc.b	1, $7F
		dc.b  $FC
byte_78DF1:	dc.b	3,   0
		dc.b	3,   0
		dc.b	4,   0
		dc.b  $F4
byte_78DF8:	dc.b	4,   3
		dc.b	4,   3
		dc.b	3,   3
		dc.b	2,   3
		dc.b	1, $7F
		dc.b	1, $7F
		dc.b  $FC
byte_78E05:	dc.b	1,   6
		dc.b	7,  $B
		dc.b  $FC
Pal_LRZMiniboss1:	binclude "Levels/LRZ/Palettes/Miniboss 1.bin"
	even

Pal_LRZMiniboss2:	binclude "Levels/LRZ/Palettes/Miniboss 2.bin"
	even

Pal_LRZMiniboss3:	binclude "Levels/LRZ/Palettes/Miniboss 3.bin"
	even
word_78EAA:	dc.w 4

		dc.w 0
		dc.l word_78EB4
		dc.w 0
word_78EB4:	dc.w $FC42
		dc.w   $401,   $EE,   $AE,   $6E,    $E,    $A,	    3,	 $CC,	$8C,   $4A,    $A,     8,     3,   $AA,	  $6A,	 $26
		dc.w	$28,	 6,	3,   $CC,   $8C,   $4A,	   $A,	   8,	  3,   $EE,   $AE,   $6E,    $E,    $A,	   $F,	 $CC
		dc.w	$AC,   $6C,    $C,  $208,     3,   $CC,	  $8C,	 $6C,  $22A,  $226,	3,   $AA,  $28A,  $24A,	 $228,	$224
		dc.w	  3,  $288,  $268,  $248,  $424,  $222,	    3,	$266,  $246,  $226,  $422,  $222,     3,  $266,	 $244,	$224
		dc.w   $422,  $222,	3,  $244,  $222,  $224,	 $422,	$222,	  3,  $222,  $222,  $224,  $422,  $222,	    7, $FFF4
; ---------------------------------------------------------------------------

Obj_9E_2:
		move.l	#loc_78F82,(a0)
		move.w	#$3B,$2E(a0)
		lea	(ArtKosM_LRZ3DeathEggFlash).l,a1
		move.w	#$7560,d2
		jsr	Queue_Kos_Module.w
		lea	(ArtKosM_LRZ3PlatformDebris).l,a1
		move.w	#-$6F20,d2
		jmp	Queue_Kos_Module.w
; ---------------------------------------------------------------------------

loc_78F82:
		st	(Ctrl_1_locked).w
		st	(Ctrl_2_locked).w
		clr.w	(Ctrl_1_logical).w
		clr.w	(Ctrl_2_logical).w
		subq.w	#1,$2E(a0)
		bpl.s	locret_78FAC
		move.l	#loc_78FAE,(a0)
		jsr	Create_New_Sprite.w
		bne.s	locret_78FAC
		move.l	#loc_793E2,(a1)

locret_78FAC:

		rts
; ---------------------------------------------------------------------------

loc_78FAE:
		btst	#0,(__u_FAB8).w
		beq.s	locret_78FAC
		move.l	#loc_79002,(a0)
		clr.b	(Ctrl_1_locked).w
		clr.b	(Ctrl_2_locked).w
		lea	ObjDat3_795D2(pc),a1
		jsr	SetUp_ObjAttributes.w
		clr.b	5(a0)
		move.w	#-$40,$10(a0)
		move.w	#$460,$14(a0)
		move.w	#$100,$18(a0)
		jsr	Swing_Setup1.w
		move.w	#$11F,$2E(a0)
		move.l	#loc_79034,$34(a0)
		lea	ChildObjDat_7961A(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_79002:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_79016(pc,d0.w),d1
		jsr	off_79016(pc,d1.w)
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
off_79016:	dc.w loc_7901A-off_79016

		dc.w loc_79022-off_79016
; ---------------------------------------------------------------------------

loc_7901A:
		moveq	#-$42,d0
		jsr	sub_85E52.w

loc_79022:
		jsr	Swing_UpAndDown.w
		jsr	MoveSprite2.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_79034:
		move.b	#2,5(a0)
		bset	#1,(__u_FAB8).w
		clr.w	$18(a0)
		move.w	#$BF,$2E(a0)
		move.l	#loc_79054,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_79054:
		move.l	#loc_79072,(a0)
		st	(ScrEvents_1).w
		clr.w	$2E(a0)
		move.w	#$200,$18(a0)
		lea	ChildObjDat_79652(pc),a2
		jmp	CreateChild6_Simple.w
; ---------------------------------------------------------------------------

loc_79072:
		tst.b	4(a0)
		bpl.s	loc_790A6
		moveq	#-$42,d0
		jsr	sub_85E52.w
		jsr	Swing_UpAndDown.w
		jsr	MoveSprite2.w
		move.w	$2E(a0),d0
		addq.w	#1,d0
		move.w	d0,$2E(a0)
		cmpi.w	#$1B0,d0
		blo.s	loc_790A0
		addq.w	#1,$14(a0)

loc_790A0:
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_790A6:
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------

loc_790AC:
		lea	word_795F0(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_790D8,(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	byte_790D0(pc,d0.w),$10(a0)
		move.w	#$4C0,$14(a0)
		rts
; ---------------------------------------------------------------------------
byte_790D0:	dc.b	1,   8
		dc.b	2,   8
		dc.b	3,   8
		dc.b	3, $F8
; ---------------------------------------------------------------------------

loc_790D8:
		move.w	(Camera_X_pos).w,d0
		addi.w	#$120,d0
		cmp.w	$10(a0),d0
		bhs.s	loc_790E8
		rts
; ---------------------------------------------------------------------------

loc_790E8:
		move.l	#loc_7910A,(a0)
		moveq	#-$63,d0
		jsr	Play_Sound_2.w
		lea	ChildObjDat_79672(pc),a2
		jsr	CreateChild6_Simple.w
		lea	ChildObjDat_79658(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_7910A:
		btst	#1,$38(a0)
		bne.s	loc_79118
		jmp	Sprite_CheckDelete.w
; ---------------------------------------------------------------------------

loc_79118:
		move.w	$10(a0),d0
		subi.w	#$40,d0
		move.w	d0,(ScrEvents_8).w
		move.w	#$480,(ScrEvents_9).w
		moveq	#$4E,d0
		jsr	Play_Sound_2.w
		lea	ChildObjDat_79686(pc),a2
		jsr	CreateChild6_Simple.w
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------

loc_79142:

		lea	word_795F6(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_79192,(a0)
		move.w	$10(a0),$3A(a0)
		move.w	$14(a0),$3C(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	d0,d1
		lsr.w	#1,d0
		move.b	RawAni_7917E(pc,d0.w),$22(a0)
		add.w	d1,d1
		move.l	dword_79182(pc,d1.w),$18(a0)
		move.w	#$B,$2E(a0)
		rts
; ---------------------------------------------------------------------------
RawAni_7917E:	dc.b   $E,  $F,	$10, $11
dword_79182:	dc.l $1000000
		dc.l $FF000000
		dc.l $100
		dc.l $FF00
; ---------------------------------------------------------------------------

loc_79192:

		jsr	MoveSprite2.w
		subq.w	#1,$2E(a0)
		bpl.s	loc_791AA
		move.l	#loc_791B0,(a0)
		move.w	#$F,$2E(a0)

loc_791AA:
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_791B0:
		subq.w	#1,$2E(a0)
		bpl.s	loc_791CE
		move.l	#loc_79192,(a0)
		move.w	$3A(a0),$10(a0)
		move.w	$3C(a0),$14(a0)
		move.w	#$B,$2E(a0)

loc_791CE:
		jmp	Child_CheckParent.w
; ---------------------------------------------------------------------------

loc_791D4:
		lea	word_795FC(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_791FE,(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	word_791FA(pc,d0.w),$14(a0)
		lea	ChildObjDat_79678(pc),a2
		jmp	CreateChild6_Simple.w
; ---------------------------------------------------------------------------
word_791FA:	dc.w $340
		dc.w $2C0
; ---------------------------------------------------------------------------

loc_791FE:
		addq.w	#4,$14(a0)
		movea.w	$46(a0),a1
		move.w	$14(a1),d0
		subi.w	#$10,d0
		cmp.w	$14(a0),d0
		bls.s	loc_7921A
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_7921A:
		move.l	#loc_79266,(a0)
		bclr	#7,4(a0)
		move.b	#-$6F,$28(a0)
		move.w	#$1F,$2E(a0)
		addq.w	#8,$14(a0)
		lea	(ChildObjDat_690D8).l,a2
		jsr	CreateChild1_Normal.w
		addi.w	#$18,$14(a0)
		lea	Child6_CreateBossExplosion.w,a2
		jsr	CreateChild6_Simple.w
		tst.b	$2C(a0)
		beq.s	locret_79264
		movea.w	$46(a0),a1
		bset	#1,$38(a1)

locret_79264:
		rts
; ---------------------------------------------------------------------------

loc_79266:
		subq.w	#1,$2E(a0)
		bmi.s	loc_79272
		jmp	Add_SpriteToCollisionResponseList.w
; ---------------------------------------------------------------------------

loc_79272:
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------

loc_79278:
		lea	word_795E4(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_79290,(a0)
		move.l	#byte_796B5,$30(a0)

loc_79290:
		movea.w	$46(a0),a1
		move.w	$10(a1),$10(a0)
		move.w	$14(a1),$14(a0)
		jsr	Animate_Raw.w
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_792AC:

		lea	word_795DE(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_792F0,(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	word_792D0(pc,d0.w),$2E(a0)
		move.w	word_792E0(pc,d0.w),$18(a0)
		rts
; ---------------------------------------------------------------------------
word_792D0:	dc.w $24
		dc.w $64
		dc.w $18
		dc.w $58
		dc.w $C
		dc.w $4C
		dc.w 0
		dc.w $40
word_792E0:	dc.w $FF80
		dc.w $80
		dc.w $FF40
		dc.w $C0
		dc.w $FF00
		dc.w $100
		dc.w $FEC0
		dc.w $140
; ---------------------------------------------------------------------------

loc_792F0:
		btst	#1,(__u_FAB8).w
		bne.s	loc_79304
		jsr	Refresh_ChildPosition.w
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------

loc_79304:
		move.l	#loc_7931E,$34(a0)
		jsr	Refresh_ChildPosition.w
		jsr	Obj_Wait.w
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------

loc_7931E:
		move.l	#loc_79334,(a0)
		move.w	#$14,$2E(a0)
		move.l	#loc_79346,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_79334:
		jsr	MoveSprite_LightGravity.w
		jsr	Obj_Wait.w
		jmp	Sprite_CheckDeleteXY.w
; ---------------------------------------------------------------------------

loc_79346:
		move.l	#loc_7935E,(a0)
		moveq	#-$60,d0
		jsr	Play_Sound_2.w
		lea	ChildObjDat_7964C(pc),a2
		jmp	CreateChild6_Simple.w
; ---------------------------------------------------------------------------

loc_7935E:
		addi.w	#-$40,$1A(a0)
		jsr	MoveSprite2.w
		bsr.w	sub_794F8
		jmp	Sprite_CheckDeleteXY.w
; ---------------------------------------------------------------------------

loc_79374:
		lea	word_795E4(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_7938C,(a0)
		move.l	#byte_79694,$30(a0)

loc_7938C:
		movea.w	$46(a0),a1
		move.w	$10(a1),$10(a0)
		move.w	$14(a1),$14(a0)
		jsr	Animate_RawMultiDelay.w
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_793A8:
		lea	word_795EA(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_793C6,(a0)
		move.l	#Go_Delete_Sprite,$34(a0)
		move.w	#$100,$1A(a0)

loc_793C6:
		lea	byte_796B9(pc),a1
		jsr	Animate_RawNoSSTMultiDelay.w
		addi.w	#-$10,$1A(a0)
		jsr	MoveSprite2.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_793E2:
		lea	ObjDat3_79602(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_79406,(a0)
		move.w	#$B0,$10(a0)
		move.w	#$449,$14(a0)
		move.l	#loc_79416,$34(a0)

loc_79406:
		lea	byte_7968C(pc),a1
		jsr	Animate_RawNoSST.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_79416:
		move.l	#loc_79486,(a0)
		move.b	#-$80,(PalCyc_Counters2).w
		move.w	#$F,$2E(a0)
		moveq	#-$61,d0
		jsr	Play_Sound_2.w
		lea	(Normal_palette).w,a1
		lea	(Target_palette).w,a2
		moveq	#7,d6

loc_7943A:
		move.l	(a1)+,(a2)+
		dbf	d6,loc_7943A
		lea	(Pal_LRZBossFire).l,a1
		lea	(Target_palette_line_2).w,a2
		moveq	#$17,d6

loc_7944C:
		move.l	(a1)+,(a2)+
		dbf	d6,loc_7944C
		jsr	Create_New_Sprite.w
		bne.s	loc_7946A
		move.l	#loc_85E64,(a1)
		move.w	a1,$44(a0)
		move.w	#3,$3A(a1)

loc_7946A:
		lea	(ArtKosM_LRZ3Autoscroll).l,a1
		move.w	#-$7B80,d2
		jsr	Queue_Kos_Module.w
		lea	PLC_83D64.w,a1
		jmp	Load_PLC_Raw.w
; ---------------------------------------------------------------------------

loc_79486:
		movea.w	$44(a0),a1
		btst	#7,$2A(a1)
		beq.w	locret_78FAC
		move.b	#1,(PalCyc_Counters2).w
		bset	#0,(__u_FAB8).w
		st	(ScrEvents_1).w
		moveq	#-$64,d0
		jsr	Play_Sound_2.w
		jsr	Create_New_Sprite.w
		bne.s	loc_794BE
		move.l	#loc_85EE6,(a1)
		move.w	a1,$44(a0)

loc_794BE:
		jsr	Create_New_Sprite.w
		bne.s	loc_794D8
		move.l	#Obj_CollapsingBridge,(a1)
		move.w	#$60,$10(a1)
		move.w	#$4D0,$14(a1)

loc_794D8:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_794DE:
		lea	ObjDat3_7960E(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#Obj_FlickerMove,(a0)
		bsr.w	sub_79516
		jmp	Draw_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_794F8:
		tst.w	$1A(a0)
		bpl.w	locret_78FAC
		move.b	(V_int_run_count+3).w,d0
		andi.b	#3,d0
		bne.w	locret_78FAC
		lea	ChildObjDat_7967E(pc),a2
		jmp	CreateChild1_Normal.w
; End of function sub_794F8


; =============== S U B R O U T I N E =======================================


sub_79516:
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	d0,d1
		lsr.w	#1,d0
		move.b	byte_79554(pc,d0.w),$22(a0)
		movea.w	$46(a0),a1
		move.w	$10(a1),d2
		move.w	$14(a1),d3
		lea	byte_79566(pc,d1.w),a2
		move.b	(a2)+,d0
		ext.w	d0
		add.w	d0,d2
		move.b	(a2)+,d0
		ext.w	d0
		add.w	d0,d3
		move.w	d2,$10(a0)
		move.w	d3,$14(a0)
		add.w	d1,d1
		move.l	word_7958A(pc,d1.w),$18(a0)
		rts
; End of function sub_79516

; ---------------------------------------------------------------------------
byte_79554:	dc.b 0
		dc.b 0
		dc.b 0
		dc.b 0
		dc.b 0
		dc.b 0
		dc.b 1
		dc.b 1
		dc.b 1
		dc.b 1
		dc.b 3
		dc.b 3
		dc.b 2
		dc.b 2
		dc.b 3
		dc.b 2
		dc.b 2
		dc.b 3
byte_79566:	dc.b  $20, $F8
		dc.b  $E0, $10
		dc.b	0, $10
		dc.b  $20, $10
		dc.b  $F0, $28
		dc.b  $10, $28
		dc.b  $F0, $10
		dc.b  $10, $10
		dc.b  $D8, $28
		dc.b  $28, $28
		dc.b  $D4,   4
		dc.b  $F0,   4
		dc.b  $10,   4
		dc.b  $2C,   4
		dc.b  $E0, $20
		dc.b	0, $20
		dc.b  $20, $20
		dc.b	0, $2C
word_7958A:	dc.w   $200, $FE00
		dc.w  $FE80, $FE80
		dc.w	$80, $FF00
		dc.w   $180, $FE00
		dc.w  $FE80, $FE00
		dc.w   $100, $FF00
		dc.w  $FE00, $FD80
		dc.w   $200, $FD80
		dc.w  $FE00, $FE00
		dc.w   $200, $FE00
		dc.w  $FD00, $FC00
		dc.w  $FE00, $FD00
		dc.w   $200, $FD00
		dc.w   $300, $FC00
		dc.w  $FE00, $FC80
		dc.w   $100, $FE00
		dc.w   $200, $FC80
		dc.w	$80, $FF00
ObjDat3_795D2:	dc.l Map_LRZ3Autoscroll
		dc.w $2424
		dc.w prio(6)
		dc.b $20
		dc.b $20
		dc.b 0
		dc.b 0
word_795DE:	dc.w prio(5)
		dc.b 4
		dc.b $10
		dc.b 1
		dc.b 0
word_795E4:	dc.w prio(5)

		dc.b $10
		dc.b $10
		dc.b 2
		dc.b 0
word_795EA:	dc.w prio(5)
		dc.b 8
		dc.b 8
		dc.b 7
		dc.b 0
word_795F0:	dc.w prio(5)
		dc.b $C
		dc.b $C
		dc.b $D
		dc.b 0
word_795F6:	dc.w prio(5)
		dc.b 4
		dc.b 4
		dc.b $E
		dc.b 0
word_795FC:	dc.w prio(5)
		dc.b 8
		dc.b $1C
		dc.b $C
		dc.b $92
ObjDat3_79602:	dc.l Map_LRZ3DeathEggFlash
		dc.w $23AB
		dc.w prio(6)
		dc.b $2C
		dc.b $28
		dc.b 0
		dc.b 0
ObjDat3_7960E:	dc.l Map_LRZ3Debris

		dc.w $E487
		dc.w prio(1)
		dc.b $C
		dc.b $C
		dc.b 0
		dc.b 0
ChildObjDat_7961A:dc.w 7
		dc.l loc_792AC
		dc.w $F40C
		dc.l loc_792AC
		dc.w $C0C
		dc.l loc_792AC
		dc.w $EC0C
		dc.l loc_792AC
		dc.w $140C
		dc.l loc_792AC
		dc.w $EC04
		dc.l loc_792AC
		dc.w $1404
		dc.l loc_792AC
		dc.w $E804
		dc.l loc_792AC
		dc.w $1804
ChildObjDat_7964C:dc.w 0
		dc.l loc_79374
ChildObjDat_79652:dc.w 3
		dc.l loc_790AC
ChildObjDat_79658:dc.w 3
		dc.l loc_79142
		dc.w $F000
		dc.l loc_79142
		dc.w $1000
		dc.l loc_79142
		dc.w $F0
		dc.l loc_79142
		dc.w $10
ChildObjDat_79672:dc.w 1
		dc.l loc_791D4
ChildObjDat_79678:dc.w 0
		dc.l loc_79278
ChildObjDat_7967E:dc.w 0
		dc.l loc_793A8
		dc.w $18
ChildObjDat_79686:dc.w $11
		dc.l loc_794DE
byte_7968C:	dc.b	4,   0
		dc.b	0,   1
		dc.b	2,   3
		dc.b	4, $F4
byte_79694:	dc.b	2,   1
		dc.b	2,   1
		dc.b	3,   1
		dc.b	2,   1
		dc.b	3,   1
		dc.b	4,   1
		dc.b	3,   1
		dc.b	4,   1
		dc.b	5,   0
		dc.b	4,   1
		dc.b	5,   0
		dc.b	6,   0
		dc.b	5,   0
		dc.b  $F8, $1C
		dc.b	6,   0
		dc.b  $12,   0
		dc.b  $FC
byte_796B5:	dc.b	0, $12
		dc.b  $13, $FC
byte_796B9:	dc.b	6,   2
		dc.b	7,   2
		dc.b	8,   3
		dc.b	9,   4
		dc.b   $A,   5
		dc.b   $B,   5
		dc.b  $F4,   0
		dc.b	0,  $E
		dc.b  $EE,  $C
		dc.b  $EE,  $C
		dc.b  $EE,  $C
		dc.b  $EE,  $C
		dc.b  $EE,  $C
		dc.b  $EE,  $E
		dc.b  $EE,  $E
		dc.b  $EE,   8
		dc.b  $EE,  $C
		dc.b  $EE,  $E
		dc.b  $EE,  $E
		dc.b  $EE,  $E
		dc.b  $EE,  $E
		dc.b  $EE,  $E
		dc.b  $EE,   0
		dc.b	0,  $E
		dc.b  $EE,  $C
		dc.b  $EE,   8
		dc.b  $EE,   8
		dc.b  $EE,  $C
		dc.b  $EE,  $E
		dc.b  $EE,  $C
		dc.b  $EE,   8
		dc.b  $EE,  $E
		dc.b  $EE,  $E
		dc.b  $EE,  $E
		dc.b  $EE,  $C
		dc.b  $EE,   8
		dc.b  $EE,   4
		dc.b  $EE,   0
		dc.b  $EE,   0
		dc.b	0,  $E
		dc.b  $EE,  $E
		dc.b  $EE,  $E
		dc.b  $EE,  $E
		dc.b  $EE,  $E
		dc.b  $EE,  $E
		dc.b  $EE,  $E
		dc.b  $EE,  $E
		dc.b  $EE,  $E
		dc.b  $EE,  $E
		dc.b  $EE,  $C
		dc.b  $EE,   8
		dc.b  $EE,   4
		dc.b  $EE,   0
		dc.b  $EE,   0
		dc.b  $AE
Pal_LRZBossFire:	binclude "Levels/LRZ/Palettes/Boss Act Fire.bin"
	even


; ---------------------------------------------------------------------------

Obj_LRZEndBoss:
		move.w	a0,(__u_FAA4).w
		move.l	#loc_797C6,(a0)
		lea	(ArtKosM_LRZEndBoss).l,a1
		move.w	#$7980,d2
		jsr	Queue_Kos_Module.w
		lea	(ArtKosM_LRZ3PlatformDebris).l,a1
		move.w	#-$6F20,d2
		jsr	Queue_Kos_Module.w
		lea	PLC_83D64.w,a1
		jsr	Load_PLC_Raw.w
		lea	Pal_LRZEndBoss(pc),a1
		jmp	PalLoad_Line1.w
; ---------------------------------------------------------------------------

loc_797C6:
		btst	#0,(__u_FA88).w
		beq.w	locret_797F8
		st	Boss_flag.w
		move.l	#Obj_Wait,(a0)
		move.w	#$78,$2E(a0)
		move.l	#loc_797EC,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_797EC:
		move.l	#loc_797FA,(a0)
		move.b	#$19,(Level_music+$1).w

locret_797F8:

		rts
; ---------------------------------------------------------------------------

loc_797FA:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_79812(pc,d0.w),d1
		jsr	off_79812(pc,d1.w)
		bsr.w	sub_79F58
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------
off_79812:	dc.w loc_7981E-off_79812

		dc.w loc_79858-off_79812
		dc.w loc_798B8-off_79812
		dc.w loc_7990A-off_79812
		dc.w loc_79936-off_79812
		dc.w loc_79958-off_79812
; ---------------------------------------------------------------------------

loc_7981E:
		lea	ObjDat3_7A140(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.w	#$B10,$10(a0)
		move.w	#$640,$14(a0)
		move.b	#$E,$29(a0)
		move.w	#-$12,$26(a0)
		move.w	#-$580,$1A(a0)
		moveq	#$7A,d0
		jsr	Play_Sound_2.w
		lea	ChildObjDat_7A18C(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_79858:
		jsr	MoveSprite.w
		tst.w	$1A(a0)
		bmi.s	locret_7986E
		move.w	#$600,d0
		cmp.w	$14(a0),d0
		bls.s	loc_79870

locret_7986E:
		rts
; ---------------------------------------------------------------------------

loc_79870:
		move.w	d0,$14(a0)
		move.b	#4,5(a0)
		move.b	#3,$39(a0)
		move.w	#$7F,d0
		move.w	d0,$2E(a0)
		move.w	d0,$3A(a0)
		move.l	#loc_798C6,$34(a0)
		moveq	#1,d0
		btst	#0,4(a0)
		bne.s	loc_798A0
		moveq	#-1,d0

loc_798A0:
		move.w	d0,(__u_FAA2).w
		move.w	d0,(ScrEvents_6).w
		jsr	Create_New_Sprite.w
		bne.s	locret_798B6
		move.l	#loc_79A54,(a1)

locret_798B6:
		rts
; ---------------------------------------------------------------------------

loc_798B8:
		addq.w	#1,(__u_FA84).w
		bsr.w	sub_79F30
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_798C6:
		subq.b	#1,$39(a0)
		bmi.s	loc_798EA
		subi.w	#$10,$3A(a0)
		move.w	$3A(a0),$2E(a0)
		moveq	#-$68,d0
		jsr	Play_Sound_2.w
		lea	ChildObjDat_7A19A(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_798EA:
		move.w	#$F7,$2E(a0)
		move.l	#loc_798FA,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_798FA:
		move.b	#6,5(a0)
		clr.b	(ScrEvents_6+$1).w
		clr.w	(__u_FA84).w
		rts
; ---------------------------------------------------------------------------

loc_7990A:
		bsr.w	sub_79F30
		tst.w	(ScrEvents_7).w
		bne.w	locret_797F8
		move.b	#8,5(a0)
		clr.b	(__u_FAA3).w
		move.w	#$100,$1A(a0)
		move.w	#$3F,$2E(a0)
		move.l	#loc_79942,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_79936:
		jsr	MoveSprite2.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_79942:
		move.b	#$A,5(a0)
		move.w	#$3F,$2E(a0)
		move.l	#loc_7995E,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_79958:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_7995E:
		move.b	#2,5(a0)
		move.w	#-$580,$1A(a0)
		move.w	#$A30,d1
		bchg	#0,4(a0)
		beq.s	loc_7997A
		move.w	#$B10,d1

loc_7997A:
		move.w	d1,$10(a0)
		moveq	#$7A,d0
		jmp	Play_Sound_2.w
; ---------------------------------------------------------------------------

loc_79988:
		subq.w	#1,$2E(a0)
		bmi.s	loc_79998
		addq.w	#1,$14(a0)
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_79998:
		move.l	#loc_799E0,(a0)
		ori.b	#$30,$38(a0)
		bclr	#7,4(a0)
		st	(End_Of_Level_Flag).w
		clr.b	(Boss_flag).w
		jsr	Create_New_Sprite.w
		bne.s	loc_799C6
		move.l	#Obj_81,(a1)
		bset	#1,4(a1)

loc_799C6:
		jsr	Create_New_Sprite.w
		bne.s	loc_799D4
		move.l	#loc_7A100,(a1)

loc_799D4:
		lea	(PLC_CNZ2KnuxEnd).l,a1
		jmp	Load_PLC_Raw.w
; ---------------------------------------------------------------------------

loc_799E0:
		tst.b	(End_Of_Level_Flag).w
		bne.s	locret_79A50
		move.l	#locret_79A52,(a0)
		bset	#1,(__u_FA88).w
		jsr	Create_New_Sprite.w
		bne.s	loc_79A08
		move.l	#Obj_Song_Fade_Transition,(a1)
		move.b	#Mus_LRZ2,$2C(a1)

loc_79A08:
		jsr	Restore_PlayerControl.w
		lea	(Player_2).w,a1
		jsr	Restore_PlayerControl2.w
		clr.w	(Ctrl_1_logical).w
		move.w	#$EC0,(__u_FA92).w
		jsr	Create_New_Sprite.w
		bne.s	loc_79A30
		move.l	#Obj_IncLevEndXGradual,(a1)

loc_79A30:
		jsr	Create_New_Sprite.w
		bne.s	locret_79A50
		move.l	#Obj_B3_2,(a1)
		move.b	#$2D,$2C(a1)
		move.w	#$FE8,$10(a1)
		move.w	#$5E0,$14(a1)

locret_79A50:
locret_79A52:
		rts
; ---------------------------------------------------------------------------

loc_79A54:
		move.l	#loc_79A70,(a0)
		move.w	#$9E0,d0
		tst.b	(__u_FAA3).w
		bmi.s	loc_79A68
		move.w	#$B60,d0

loc_79A68:
		move.w	d0,$10(a0)
		bsr.w	sub_79A8E

loc_79A70:
		tst.b	(__u_FAA3).w
		beq.s	loc_79AA8
		movea.w	$44(a0),a1
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		bpl.s	loc_79A86
		neg.w	d0

loc_79A86:
		cmpi.w	#$80,d0
		blo.s	locret_79AA6

; =============== S U B R O U T I N E =======================================


sub_79A8E:
		jsr	Create_New_Sprite.w
		bne.s	locret_79AA6
		move.l	#loc_79E5A,(a1)
		move.w	$10(a0),$10(a1)
		move.w	a1,$44(a0)

locret_79AA6:
		rts
; ---------------------------------------------------------------------------

loc_79AA8:

		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_79AAE:
		lea	word_7A14C(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_79AC4,(a0)
		move.w	#-$800,$1A(a0)

loc_79AC4:
		bsr.w	sub_79EB6
		tst.w	$1A(a0)
		bmi.s	loc_79B02
		move.l	#loc_79B22,(a0)
		move.w	#prio(2),8(a0)
		moveq	#$40,d0
		movea.w	$46(a0),a1
		btst	#0,4(a1)
		beq.s	loc_79AEC
		move.w	#$140,d0

loc_79AEC:
		move.w	d0,d1
		addi.w	#$9E0,d0
		move.w	d0,$10(a0)
		lsr.w	#1,d1
		lea	(Block_table+$1900).w,a1
		adda.w	d1,a1
		move.w	a1,$44(a0)

loc_79B02:
		move.b	(V_int_run_count+3).w,d0
		andi.b	#3,d0
		bne.s	loc_79B16
		lea	ChildObjDat_7A1A8(pc),a2
		jsr	CreateChild1_Normal.w

loc_79B16:
		jsr	MoveSprite_LightGravity.w
		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------

loc_79B22:
		bsr.w	sub_79EB6
		jsr	MoveSprite_LightGravity.w
		movea.w	$44(a0),a1
		moveq	#0,d0
		move.b	(a1),d0
		subi.w	#$30,d0
		neg.w	d0
		addi.w	#$612,d0
		cmp.w	$14(a0),d0
		bls.s	loc_79B4A
		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------

loc_79B4A:
		move.l	#loc_79B54,(a0)
		clr.w	$1A(a0)

loc_79B54:
		bsr.w	sub_79EB6
		tst.b	(__u_FAA3).w
		bne.s	loc_79B66
		tst.b	4(a0)
		bpl.w	loc_79AA8

loc_79B66:
		bsr.w	sub_79F14
		jsr	MoveSprite2.w
		bsr.w	sub_79F30
		bsr.w	loc_79EC4
		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------

loc_79B7E:
		lea	word_7A152(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_79B96,(a0)
		move.l	#Go_Delete_Sprite,$34(a0)

loc_79B96:
		jsr	Refresh_ChildPosition.w
		lea	byte_7A1C7(pc),a1
		jsr	Animate_RawNoSSTMultiDelay.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_79BAC:
		lea	word_7A158(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_79BCA,(a0)
		move.l	#Go_Delete_Sprite,$34(a0)
		move.w	#$100,$1A(a0)

loc_79BCA:
		lea	byte_7A1D8(pc),a1
		jsr	Animate_RawNoSSTMultiDelay.w
		addi.w	#-$10,$1A(a0)
		jsr	MoveSprite2.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_79BE6:
		lea	word_7A15E(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_79BF6,(a0)

loc_79BF6:
		jsr	Refresh_ChildPosition.w
		lea	byte_7A1C2(pc),a1
		jsr	Animate_RawNoSST.w
		jmp	Child_Draw_Sprite2.w
; ---------------------------------------------------------------------------

loc_79C0C:
		lea	word_7A164(pc),a1
		jsr	SetUp_ObjAttributes2.w
		move.l	#loc_79C1C,(a0)

loc_79C1C:
		jsr	Refresh_ChildPositionAdjusted.w
		movea.w	$46(a0),a1
		move.b	#$F,$22(a0)
		btst	#6,$2A(a1)
		beq.s	loc_79C3E
		move.b	#$10,$22(a0)
		bra.w	loc_79C4C
; ---------------------------------------------------------------------------

loc_79C3E:
		btst	#7,$2A(a1)
		beq.s	loc_79C4C
		move.b	#$11,$22(a0)

loc_79C4C:

		jmp	Child_Draw_Sprite2.w
; ---------------------------------------------------------------------------

Obj_AD_2:
		moveq	#0,d0
		move.b	$2C(a0),d0
		lsl.w	#2,d0
		jmp	loc_79C5E(pc,d0.w)
; ---------------------------------------------------------------------------

loc_79C5E:
		bra.w	loc_79C72
; ---------------------------------------------------------------------------
		bra.w	loc_79CCE
; ---------------------------------------------------------------------------
		bra.w	loc_79CCE
; ---------------------------------------------------------------------------
		bra.w	loc_79CDE
; ---------------------------------------------------------------------------
		bra.w	loc_79CF8
; ---------------------------------------------------------------------------

loc_79C72:
		bsr.w	sub_7A040
		beq.w	locret_797F8
		move.l	#loc_79C9E,(a0)
		lea	ChildObjDat_7A1B0(pc),a2
		jsr	CreateChild6_Simple.w
		bne.s	loc_79C9E
		addi.w	#$C0,$14(a1)
		move.b	$2C(a0),$2C(a1)
		move.w	#$37F,$2E(a1)

loc_79C9E:

		tst.w	(__u_FAA4).w
		bne.w	loc_79DB6
		subq.w	#1,$2E(a0)
		bpl.w	locret_797F8
		move.w	#$17F,$2E(a0)

; =============== S U B R O U T I N E =======================================


sub_79CB4:
		lea	ChildObjDat_7A1B0(pc),a2
		jsr	CreateChild6_Simple.w
		bne.s	locret_79CCC
		move.b	$2C(a0),$2C(a1)
		move.w	#$4FF,$2E(a1)

locret_79CCC:
		rts
; End of function sub_79CB4

; ---------------------------------------------------------------------------

loc_79CCE:

		bsr.w	sub_7A040
		beq.w	locret_797F8
		bsr.s	sub_79CB4
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_79CDE:
		lea	ObjDat3_7A16C(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_79CEE,(a0)

loc_79CEE:
		bsr.w	sub_7A064
		jmp	Sprite_CheckDelete.w
; ---------------------------------------------------------------------------

loc_79CF8:
		lea	ObjDat3_7A178(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_79D08,(a0)

loc_79D08:
		lea	byte_7A1E9(pc),a1
		jsr	Animate_RawNoSST.w
		moveq	#$2B,d1
		moveq	#$18,d2
		moveq	#$19,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		jmp	Sprite_CheckDelete.w
; ---------------------------------------------------------------------------

loc_79D28:
		lea	ObjDat3_7A16C(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_79D44,(a0)
		move.w	#-$80,$1A(a0)
		move.w	#$20,$3A(a0)

loc_79D44:
		subq.w	#1,$3A(a0)
		bmi.s	loc_79D52
		bsr.w	sub_7A064
		bra.w	loc_79D82
; ---------------------------------------------------------------------------

loc_79D52:
		move.l	#loc_79D6E,(a0)
		move.w	#prio(3),8(a0)
		move.w	#$80,$1A(a0)
		lea	ChildObjDat_7A1B6(pc),a2
		jsr	CreateChild6_Simple.w

loc_79D6E:
		bsr.w	sub_7A064
		move.b	$2C(a0),d0
		cmpi.b	#1,d0
		beq.s	loc_79DB0
		subq.w	#1,$2E(a0)
		bmi.s	loc_79DB6

loc_79D82:
		tst.w	(__u_FAA4).w
		beq.s	loc_79DAA
		tst.b	4(a0)
		bpl.s	loc_79DB6
		tst.b	d0
		bne.s	loc_79DAA
		tst.b	(__u_FAA9).w
		bne.s	loc_79DAA
		cmpi.w	#$612,$14(a0)
		bhi.s	loc_79DAA
		move.l	#loc_79DC2,(a0)
		st	(__u_FAA9).w

loc_79DAA:

		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_79DB0:
		tst.b	4(a0)
		bmi.s	loc_79DAA

loc_79DB6:

		jsr	Displace_PlayerOffObject.w
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------

loc_79DC2:
		bsr.w	sub_7A064
		cmpi.w	#$612,$14(a0)
		blo.s	loc_79DAA
		move.l	#loc_79DEA,(a0)
		bset	#0,(__u_FA88).w
		clr.w	$1A(a0)
		bset	#7,$2A(a0)
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_79DEA:

		bsr.w	sub_79FFE
		tst.b	(__u_FAA3).w
		bne.s	loc_79DFC
		tst.b	4(a0)
		bpl.w	loc_79DB6

loc_79DFC:
		bsr.w	sub_79F14
		bsr.w	sub_7A064
		bsr.w	sub_79F30
		jmp	Sprite_CheckDelete.w
; ---------------------------------------------------------------------------
		move.l	#loc_79E34,(a0)
		move.w	#$80,$18(a0)
		move.w	#$40,d0
		move.w	d0,$3E(a0)
		move.w	d0,$1A(a0)
		move.w	#8,$40(a0)
		bclr	#0,$38(a0)
		rts
; ---------------------------------------------------------------------------

loc_79E34:
		jsr	Swing_UpAndDown.w
		cmpi.w	#$B60,$10(a0)
		blo.s	loc_79E50
		move.l	#loc_79E50,(a0)
		clr.w	$18(a0)
		clr.w	$1A(a0)

loc_79E50:

		bsr.w	sub_7A064
		jmp	Sprite_CheckDelete.w
; ---------------------------------------------------------------------------

loc_79E5A:
		lea	ObjDat3_7A16C(pc),a1
		jsr	SetUp_ObjAttributes.w
		lea	loc_79DEA(pc),a1
		move.l	a1,(a0)
		jmp	(a1)
; ---------------------------------------------------------------------------

loc_79E6C:
		lea	word_7A184(pc),a1
		jsr	SetUp_ObjAttributes2.w
		move.l	#loc_79E7C,(a0)

loc_79E7C:
		movea.w	$46(a0),a1
		move.w	$10(a1),$10(a0)
		move.w	$14(a1),$14(a0)
		lea	byte_7A1E5(pc),a1
		jsr	Animate_RawNoSST.w
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_79E9C:
		lea	ObjDat3_7960E(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#Obj_FlickerMove,(a0)
		bsr.w	sub_7A07C
		jmp	Draw_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_79EB6:

		movea.w	$46(a0),a1
		btst	#7,$2A(a1)
		bne.s	loc_79EE6
		rts
; ---------------------------------------------------------------------------

loc_79EC4:
		movea.w	$46(a0),a1
		btst	#6,$2A(a1)
		bne.w	locret_797F8
		lea	word_79F0C(pc),a2
		jsr	(Check_InTheirRange).l
		beq.w	locret_797F8
		bset	#6,$2A(a1)

loc_79EE6:
		lea	Child6_CreateBossExplosion.w,a2
		jsr	CreateChild6_Simple.w
		bne.s	loc_79EFA
		move.b	#6,$2C(a1)

loc_79EFA:
		jsr	Delete_Current_Sprite.w
		moveq	#-$65,d0
		jsr	Play_Sound_2.w
		addq.w	#4,sp
		rts
; End of function sub_79EB6

; ---------------------------------------------------------------------------
word_79F0C:	dc.w  $FFD0,   $60, $FFD0,   $60
; =============== S U B R O U T I N E =======================================


sub_79F14:

		move.w	(ScrEvents_7).w,d0
		move.w	(__u_FA84).w,d1
		lsr.w	#2,d1
		add.w	d1,d0
		add.w	d0,d0
		tst.b	(__u_FAA2).w
		bne.s	loc_79F2A
		neg.w	d0

loc_79F2A:
		move.w	d0,$18(a0)
		rts
; End of function sub_79F14


; =============== S U B R O U T I N E =======================================


sub_79F30:

		move.w	$10(a0),d0
		subi.w	#$9E0,d0
		lsr.w	#1,d0
		lea	(Block_table+$1900).w,a1
		moveq	#0,d1
		move.b	(a1,d0.w),d1
		subi.w	#$30,d1
		neg.w	d1
		addi.w	#$612,d1
		add.w	$26(a0),d1
		move.w	d1,$14(a0)
		rts
; End of function sub_79F30


; =============== S U B R O U T I N E =======================================


sub_79F58:
		btst	#6,$2A(a0)
		beq.s	locret_79F98
		tst.b	$20(a0)
		bne.s	loc_79F7A
		subq.b	#1,$29(a0)
		beq.s	loc_79F9A
		move.b	#$20,$20(a0)
		moveq	#$6E,d0
		jsr	Play_Sound_2.w

loc_79F7A:
		moveq	#0,d0
		btst	#0,$20(a0)
		bne.s	loc_79F88
		addi.w	#8,d0

loc_79F88:
		bsr.w	sub_79FD8
		subq.b	#1,$20(a0)
		bne.s	locret_79F98
		bclr	#6,$2A(a0)

locret_79F98:

		rts
; ---------------------------------------------------------------------------

loc_79F9A:
		move.l	#loc_79988,(a0)
		bset	#7,$2A(a0)
		clr.b	(__u_FAA3).w
		clr.w	(__u_FA84).w
		st	(ScrEvents_2).w
		lea	Child6_CreateBossExplosion.w,a2
		jsr	CreateChild6_Simple.w
		bne.s	loc_79FC6
		move.b	#4,$2C(a1)

loc_79FC6:
		clr.b	(ScrEvents_6+$1).w
		jsr	BossDefeated_StopTimer.w
		move.w	#$7F,$2E(a0)
		rts
; End of function sub_79F58


; =============== S U B R O U T I N E =======================================


sub_79FD8:
		lea	word_79FE6(pc),a1
		lea	word_79FEE(pc,d0.w),a2
		jmp	CopyWordData_4.w
; End of function sub_79FD8

; ---------------------------------------------------------------------------
word_79FE6:	dc.w $FC28
		dc.w $FC38
		dc.w $FC3A
		dc.w $FC3C
word_79FEE:	dc.w $406
		dc.w $646
		dc.w $424
		dc.w 0
		dc.w $EEE
		dc.w $EEE
		dc.w $EEE
		dc.w $EEE

; =============== S U B R O U T I N E =======================================


sub_79FFE:
		movea.w	(__u_FAA4).w,a1
		tst.w	(a1)
		beq.w	locret_797F8
		lea	word_7A038(pc),a2
		jsr	(Check_InTheirRange).l
		beq.w	locret_797F8
		lea	ChildObjDat_7A1BC(pc),a2
		jsr	CreateChild6_Simple.w
		jsr	Go_Delete_Sprite.w
		jsr	Displace_PlayerOffObject.w
		moveq	#-$62,d0
		jsr	Play_Sound_2.w
		addq.w	#4,sp
		rts
; End of function sub_79FFE

; ---------------------------------------------------------------------------
word_7A038:	dc.w  $FFC0,   $80, $FFC0,   $80

; =============== S U B R O U T I N E =======================================


sub_7A040:

		move.w	$10(a0),d0
		sub.w	(Camera_X_pos).w,d0
		cmpi.w	#$140,d0
		bhs.s	loc_7A060
		move.w	$14(a0),d0
		sub.w	(Camera_Y_pos).w,d0
		cmpi.w	#$E0,d0
		bhs.s	loc_7A060
		moveq	#1,d0
		rts
; ---------------------------------------------------------------------------

loc_7A060:

		moveq	#0,d0
		rts
; End of function sub_7A040


; =============== S U B R O U T I N E =======================================


sub_7A064:

		move.w	$10(a0),-(sp)
		jsr	MoveSprite2.w
		moveq	#$23,d1
		moveq	#$10,d2
		moveq	#$D,d3
		move.w	(sp)+,d4
		jmp	SolidObjectTop.w
; End of function sub_7A064


; =============== S U B R O U T I N E =======================================


sub_7A07C:
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	d0,d1
		lsr.w	#1,d0
		move.b	RawAni_7A0BA(pc,d0.w),$22(a0)
		movea.w	$46(a0),a1
		move.w	$10(a1),d2
		move.w	$14(a1),d3
		lea	byte_7A0C4(pc,d1.w),a2
		move.b	(a2)+,d0
		ext.w	d0
		add.w	d0,d2
		move.b	(a2)+,d0
		ext.w	d0
		add.w	d0,d3
		move.w	d2,$10(a0)
		move.w	d3,$14(a0)
		add.w	d1,d1
		move.l	word_7A0D8(pc,d1.w),$18(a0)
		rts
; End of function sub_7A07C

; ---------------------------------------------------------------------------
RawAni_7A0BA:	dc.b	1,   1,	  1,   1,   1,	 3,   2,   3,	2,   3
byte_7A0C4:	dc.b  $F0, $F8
		dc.b	0, $F8
		dc.b  $10, $F8
		dc.b  $F8,   8
		dc.b	8,   8
		dc.b  $F4, $FC
		dc.b   $C, $FC
		dc.b  $EC,   8
		dc.b  $14,   8
		dc.b	0,  $C
word_7A0D8:	dc.w  $FD80, $FD00
		dc.w	$80, $FC80
		dc.w   $280, $FD00
		dc.w  $FE00, $FD80
		dc.w   $200, $FD80
		dc.w  $FD00, $FD00
		dc.w   $300, $FD80
		dc.w  $FD00, $FC80
		dc.w   $300, $FC80
		dc.w  $FF80, $FC00
; ---------------------------------------------------------------------------

loc_7A100:
		tst.b	(__u_FACD).w
		beq.w	locret_797F8
		move.l	#loc_7A12A,(a0)
		lea	word_78EAA(pc),a1
		lea	(PalRotation_Data).w,a2
		move.l	(a1)+,(a2)+
		move.l	(a1)+,(a2)+
		clr.w	(a2)
		move.l	#loc_7A138,(__u_FADA).w
		move.w	#$7FFF,(PalCyc_Counters+$2).w

loc_7A12A:
		jsr	Run_PalRotationScript.w

loc_7A130:
		move.w	#$7FFF,(PalCyc_Counters+$2).w
		rts
; ---------------------------------------------------------------------------

loc_7A138:
		move.l	#loc_7A130,(a0)
		rts
; ---------------------------------------------------------------------------
ObjDat3_7A140:	dc.l Map_LRZEndBoss
		dc.w $23CC
		dc.w prio(5)
		dc.b $28
		dc.b $2C
		dc.b 0
		dc.b $B8
word_7A14C:	dc.w prio(5)
		dc.b $10
		dc.b $10
		dc.b 4
		dc.b $9A
word_7A152:	dc.w prio(5)
		dc.b $10
		dc.b $10
		dc.b 5
		dc.b 0
word_7A158:	dc.w prio(5)
		dc.b 8
		dc.b 8
		dc.b $A
		dc.b 0
word_7A15E:	dc.w prio(4)
		dc.b $28
		dc.b 4
		dc.b 1
		dc.b 0
word_7A164:	dc.w $3CC
		dc.w prio(4)
		dc.b $C
		dc.b 8
		dc.b $F
		dc.b 0
ObjDat3_7A16C:	dc.l Map_LRZ3Platform

		dc.w $6001
		dc.w prio(5)
		dc.b $18
		dc.b $10
		dc.b 1
		dc.b 0
ObjDat3_7A178:	dc.l Map_LRZ3Platform
		dc.w $6001
		dc.w prio(5)
		dc.b $20
		dc.b $18
		dc.b 4
		dc.b 0
word_7A184:	dc.w $4001
		dc.w prio(2)
		dc.b $20
		dc.b 8
		dc.b 2
		dc.b 0
ChildObjDat_7A18C:dc.w 1
		dc.l loc_79BE6
		dc.w $EE
		dc.l loc_79C0C
		dc.w $EB01
ChildObjDat_7A19A:dc.w 1
		dc.l loc_79AAE
		dc.w $E8
		dc.l loc_79B7E
		dc.w $C9
ChildObjDat_7A1A8:dc.w 0
		dc.l loc_79BAC
		dc.w $10
ChildObjDat_7A1B0:dc.w 0
		dc.l loc_79D28
ChildObjDat_7A1B6:dc.w 0
		dc.l loc_79E6C
ChildObjDat_7A1BC:dc.w 9
		dc.l loc_79E9C
byte_7A1C2:	dc.b	2,   1
		dc.b	2,   3
		dc.b  $FC
byte_7A1C7:	dc.b	5,   0
		dc.b	5,   0
		dc.b	6,   1
		dc.b	5,   0
		dc.b	6,   1
		dc.b	7,   3
		dc.b	8,   4
		dc.b	9,   5
		dc.b  $F4
byte_7A1D8:	dc.b   $A,   2
		dc.b   $A,   2
		dc.b   $B,   3
		dc.b   $C,   4
		dc.b   $D,   5
		dc.b   $E,   5
		dc.b  $F4
byte_7A1E5:	dc.b	3,   2
		dc.b	3, $FC
byte_7A1E9:	dc.b	7,   4
		dc.b	5, $FC
		dc.b	0
Pal_LRZEndBoss:	binclude "Levels/LRZ/Palettes/End Boss.bin"
	even

; ---------------------------------------------------------------------------

Obj_SSZGHZBoss:
		st	BossHitMode.w		; NAT: Enable hit mode
		clr.w	BossHitsP1.w		; clear hits count

		move.l	#Obj_Wait,(a0)
		st	Boss_flag.w
		move.w	#$1F,$2E(a0)
		move.l	#loc_7A294,$34(a0)
		moveq	#-$1F,d0
		jsr	Play_Sound.w
		jsr	Create_New_Sprite.w
		bne.s	loc_7A244
		move.l	#Obj_Song_Fade_Transition,(a1)
		move.b	#Mus_Boss,$2C(a1)

loc_7A244:
		move.w	(Camera_X_pos).w,d0
		addi.w	#$110,d0
		move.w	d0,$10(a0)
		move.w	(Camera_Y_pos).w,d0
		subi.w	#$40,d0
		move.w	d0,$14(a0)
		clr.w	(__u_FA88).w
		moveq	#$7B,d0
		jsr	Load_PLC.w
		lea	(ArtKosM_SSZGHZMisc).l,a1
		move.w	#-$7300,d2
		jsr	Queue_Kos_Module.w
		lea	(Normal_palette_line_2).w,a1
		lea	(Target_palette_line_2).w,a2
		moveq	#7,d6

loc_7A282:
		move.l	(a1)+,(a2)+
		dbf	d6,loc_7A282
		lea	(Pal_SSZGHZMisc).l,a1
		jmp	PalLoad_Line1.w
; ---------------------------------------------------------------------------

loc_7A294:
		move.l	#loc_7A29C,(a0)

locret_7A29A:

		rts
; ---------------------------------------------------------------------------

loc_7A29C:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_7A2B4(pc,d0.w),d1
		jsr	off_7A2B4(pc,d1.w)
		bsr.w	sub_7A5A0
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------
off_7A2B4:	dc.w loc_7A2C0-off_7A2B4

		dc.w loc_7A2F0-off_7A2B4
		dc.w loc_7A32C-off_7A2B4
		dc.w loc_7A35E-off_7A2B4
		dc.w loc_7A388-off_7A2B4
		dc.w loc_7A3A8-off_7A2B4
; ---------------------------------------------------------------------------

loc_7A2C0:
		lea	ObjDat3_7A64E(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.b	#8,$29(a0)
		move.w	#$100,$1A(a0)
		move.w	#$67,$2E(a0)
		move.l	#loc_7A2FC,$34(a0)
		lea	(Child1_MakeMechaHead).l,a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_7A2F0:
		jsr	MoveSprite2.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_7A2FC:
		move.b	#4,5(a0)
		move.w	#-$100,$18(a0)
		lea	ChildObjDat_7A69E(pc),a2
		jsr	CreateChild1_Normal.w
		move.w	#$C0,d0
		move.w	d0,$3E(a0)
		move.w	d0,$1A(a0)
		move.w	#$10,$40(a0)
		bclr	#0,$38(a0)
		rts
; ---------------------------------------------------------------------------

loc_7A32C:
		jsr	Swing_UpAndDown.w
		jsr	MoveSprite2.w
		move.w	(Camera_X_pos).w,d0
		addi.w	#$A0,d0
		cmp.w	$10(a0),d0
		blo.s	locret_7A35C
		move.b	#6,5(a0)
		bset	#6,$38(a0)
		lea	ChildObjDat_7A684(pc),a2
		jsr	(CreateChild9_TreeList).l

locret_7A35C:
		rts
; ---------------------------------------------------------------------------

loc_7A35E:
		btst	#2,$38(a0)
		beq.s	locret_7A386
		move.b	#8,5(a0)
		bclr	#6,$38(a0)
		move.w	#-$100,$18(a0)
		move.w	#$1F,$2E(a0)
		move.l	#loc_7A39A,$34(a0)

locret_7A386:
		rts
; ---------------------------------------------------------------------------

loc_7A388:
		jsr	Swing_UpAndDown.w
		jsr	MoveSprite2.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_7A39A:
		move.b	#$A,5(a0)
		bset	#6,$38(a0)
		rts
; ---------------------------------------------------------------------------

loc_7A3A8:
		bclr	#3,$38(a0)
		beq.s	locret_7A3CC
		move.b	#8,5(a0)
		bclr	#6,$38(a0)
		neg.w	$18(a0)
		bchg	#0,4(a0)
		move.w	#$3F,$2E(a0)

locret_7A3CC:
		rts
; ---------------------------------------------------------------------------

loc_7A3CE:
		move.l	#loc_7A3E6,(a0)
		bset	#0,4(a0)
		move.w	#$400,$18(a0)
		clr.w	$1A(a0)
		rts
; ---------------------------------------------------------------------------

loc_7A3E6:
		subq.w	#1,$2E(a0)
		bmi.s	loc_7A3F8
		jsr	MoveSprite2.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_7A3F8:
		jsr	Boss_DisableHitMode		; NAT: Disable hit mode
		clr.b	(Boss_flag).w
		bset	#4,$38(a0)
		st	(MechaHead_DeleteFlag).w
		st	(ScrEvents_Routine2).w
		lea	(Target_palette_line_2).w,a1
		lea	(Normal_palette_line_2).w,a2
		moveq	#7,d6

loc_7A414:
		move.l	(a1)+,(a2)+
		dbf	d6,loc_7A414
		moveq	#$32,d0
		jsr	Load_PLC.w
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------

loc_7A428:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_7A43E(pc,d0.w),d1
		jsr	off_7A43E(pc,d1.w)
		moveq	#0,d0
		jmp	Child_Draw_Sprite_FlickerMove.w
; ---------------------------------------------------------------------------
off_7A43E:	dc.w loc_7A446-off_7A43E

		dc.w loc_7A460-off_7A43E
		dc.w loc_7A482-off_7A43E
		dc.w loc_7A496-off_7A43E
; ---------------------------------------------------------------------------

loc_7A446:
		lea	ObjDat3_7A660(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.b	#$1A,$43(a0)
		move.b	#1,$3A(a0)
		bra.w	sub_7A634
; ---------------------------------------------------------------------------

loc_7A460:

		addq.w	#2,$14(a0)
		subq.w	#1,$2E(a0)
		bpl.s	locret_7A480
		addq.b	#2,5(a0)
		cmpi.b	#$A,$2C(a0)
		bne.s	locret_7A480
		movea.w	$44(a0),a1
		bset	#2,$38(a1)

locret_7A480:

		rts
; ---------------------------------------------------------------------------

loc_7A482:
		movea.w	$44(a0),a1
		btst	#2,$38(a1)
		beq.s	locret_7A494
		move.b	#6,5(a0)

locret_7A494:
		rts
; ---------------------------------------------------------------------------

loc_7A496:
		move.b	$3C(a0),d0
		subi.b	#$40,d0
		sls	d1
		cmpi.b	#-$80,d0
		bhs.s	loc_7A4C2
		neg.b	$3A(a0)
		movea.w	$44(a0),a1
		btst	#0,4(a1)
		beq.s	loc_7A4B8
		not.b	d1

loc_7A4B8:
		tst.b	d1
		bne.s	loc_7A4C2
		bset	#3,$38(a1)

loc_7A4C2:

		move.b	$3A(a0),d0
		add.b	d0,$3C(a0)
		jmp	Refresh_ChildPosition.w
; ---------------------------------------------------------------------------

loc_7A4D0:

		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_7A4E6(pc,d0.w),d1
		jsr	off_7A4E6(pc,d1.w)
		moveq	#0,d0
		jmp	Child_Draw_Sprite_FlickerMove.w
; ---------------------------------------------------------------------------
off_7A4E6:	dc.w loc_7A4EC-off_7A4E6

		dc.w loc_7A460-off_7A4E6
		dc.w loc_7A500-off_7A4E6
; ---------------------------------------------------------------------------

loc_7A4EC:
		bsr.w	sub_7A634
		move.b	#4,$3A(a0)
		lea	ObjDat3_7A66C(pc),a1
		jmp	SetUp_ObjAttributes.w
; ---------------------------------------------------------------------------

loc_7A500:

		movea.w	$46(a0),a1
		move.b	$3C(a1),$3C(a0)
		move.b	$3A(a0),d2
		jmp	MoveSprite_CircularSimple.w
; ---------------------------------------------------------------------------

loc_7A514:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_7A53E(pc,d0.w),d1
		jsr	off_7A53E(pc,d1.w)
		move.b	#0,$22(a0)
		btst	#0,(V_int_run_count+3).w
		beq.s	loc_7A536
		move.b	#1,$22(a0)

loc_7A536:
		moveq	#0,d0
		jmp	Child_DrawTouch_Sprite_FlickerMove.w
; ---------------------------------------------------------------------------
off_7A53E:	dc.w loc_7A544-off_7A53E

		dc.w loc_7A460-off_7A53E
		dc.w loc_7A500-off_7A53E
; ---------------------------------------------------------------------------

loc_7A544:
		bsr.w	sub_7A634
		move.b	#3,$3A(a0)
		lea	ObjDat3_7A678(pc),a1
		jmp	SetUp_ObjAttributes.w
; ---------------------------------------------------------------------------

loc_7A558:
		lea	word_7A65A(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_7A568,(a0)

loc_7A568:
		movea.w	$46(a0),a1
		btst	#7,$2A(a1)
		bne.s	loc_7A59A
		btst	#6,$38(a1)
		bne.w	locret_7A29A
		btst	#0,(V_int_run_count+3).w
		bne.w	locret_7A29A
		jsr	Refresh_ChildPositionAdjusted.w
		jsr	Add_SpriteToCollisionResponseList.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_7A59A:
		jmp	Delete_Current_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_7A5A0:
		tst.b	$28(a0)
		bne.s	locret_7A5EA
		move.b	$29(a0),d0
		beq.s	loc_7A5EC
		tst.b	$20(a0)
		bne.s	loc_7A5C6
		move.b	#$20,$20(a0)
		moveq	#$6E,d0
		jsr	Play_Sound_2.w
		bset	#6,$2A(a0)

loc_7A5C6:
		moveq	#0,d0
		btst	#0,$20(a0)
		bne.s	loc_7A5D4
		addi.w	#3*2,d0		; NAT: https://s3unlocked.blogspot.com/2017/07/the-naked-boss-flash.html

loc_7A5D4:
		bsr.w	sub_7A614
		subq.b	#1,$20(a0)
		bne.s	locret_7A5EA
		bclr	#6,$2A(a0)
		move.b	$25(a0),$28(a0)

locret_7A5EA:

		rts
; ---------------------------------------------------------------------------

loc_7A5EC:
		move.l	#Wait_FadeToLevelMusic,(a0)
		move.l	#loc_7A3CE,$34(a0)
		lea	Child6_CreateBossExplosion.w,a2
		jsr	CreateChild1_Normal.w
		bne.s	loc_7A60E
		move.b	#4,$2C(a1)

loc_7A60E:
		jmp	BossDefeated.w
; End of function sub_7A5A0


; =============== S U B R O U T I N E =======================================


sub_7A614:

		lea	word_7A622(pc),a1
		lea	word_7A628(pc,d0.w),a2
		jmp	CopyWordData_3.w
; End of function sub_7A614

; ---------------------------------------------------------------------------
word_7A622:	dc.w $FC0E
		dc.w $FC1C
		dc.w $FC1E
word_7A628:	dc.w 8
		dc.w $866
		dc.w $222
		dc.w $888
		dc.w $CCC
		dc.w $EEE

; =============== S U B R O U T I N E =======================================


sub_7A634:

		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	word_7A642(pc,d0.w),$2E(a0)
		rts
; End of function sub_7A634

; ---------------------------------------------------------------------------
word_7A642:	dc.w $C
		dc.w $14
		dc.w $1C
		dc.w $24
		dc.w $2C
		dc.w $3C
ObjDat3_7A64E:	dc.l Map_RobotnikShip
		dc.w $52E
		dc.w prio(4)
		dc.b $1C
		dc.b $20
		dc.b $A
		dc.b $F
word_7A65A:	dc.w prio(4)
		dc.b 8
		dc.b 4
		dc.b 6
		dc.b 0
ObjDat3_7A660:	dc.l Map_SSZGHZMisc
		dc.w $2468
		dc.w prio(6)
		dc.b 8
		dc.b 8
		dc.b 2
		dc.b 0
ObjDat3_7A66C:	dc.l Map_SSZGHZMisc
		dc.w $2468
		dc.w prio(6)
		dc.b 8
		dc.b 8
		dc.b 3
		dc.b 0
ObjDat3_7A678:	dc.l Map_SSZGHZMisc
		dc.w $2468
		dc.w prio(5)
		dc.b 8
		dc.b 8
		dc.b 0
		dc.b $8F
ChildObjDat_7A684:dc.w 5
		dc.l loc_7A428
		dc.l loc_7A4D0
		dc.l loc_7A4D0
		dc.l loc_7A4D0
		dc.l loc_7A4D0
		dc.l loc_7A514
ChildObjDat_7A69E:dc.w 0
		dc.l loc_7A558
		dc.w $1E00
; ---------------------------------------------------------------------------

Obj_SSZMTZBoss:
		st	BossHitMode.w		; NAT: Enable hit mode
		clr.w	BossHitsP1.w		; clear hits count

		move.l	#Obj_Wait,(a0)
		st	Boss_flag.w
		move.w	#$1F,$2E(a0)
		move.l	#loc_7A712,$34(a0)
		moveq	#-$1F,d0
		jsr	Play_Sound.w
		jsr	Create_New_Sprite.w
		bne.s	loc_7A6DC
		move.l	#Obj_Song_Fade_Transition,(a1)
		move.b	#Mus_Boss,$2C(a1)

loc_7A6DC:
		clr.w	(__u_FA88).w
		moveq	#$7B,d0
		jsr	Load_PLC.w
		lea	(ArtKosM_SSZMTZOrbs).l,a1
		move.w	#$83E0,d2
		jsr	Queue_Kos_Module.w
		lea	(Normal_palette_line_2).w,a1
		lea	(Target_palette_line_2).w,a2
		moveq	#7,d6

loc_7A702:
		move.l	(a1)+,(a2)+
		dbf	d6,loc_7A702
		lea	Pal_SSZMTZOrbs(pc),a1
		jmp	PalLoad_Line1.w
; ---------------------------------------------------------------------------

loc_7A712:
		move.l	#loc_7A71A,(a0)

locret_7A718:
		rts
; ---------------------------------------------------------------------------

loc_7A71A:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_7A728(pc,d0.w),d1
		jmp	off_7A728(pc,d1.w)
; ---------------------------------------------------------------------------
off_7A728:	dc.w loc_7A72C-off_7A728

		dc.w loc_7A7E2-off_7A728
; ---------------------------------------------------------------------------

loc_7A72C:
		move.l	#Map_RobotnikShip,$C(a0)
		move.w	#$52E,$A(a0)
		ori.b	#4,4(a0)
		move.w	#prio(3),8(a0)
		move.w	#$1700,$10(a0)
		move.w	#$300,$14(a0)
		move.b	#$A,$22(a0)
		addq.b	#2,5(a0)
		move.b	#$11,$28(a0)
		move.b	#8,$29(a0)
		move.b	#7,$3C(a0)
		move.w	$10(a0),(__u_FAF0).w
		move.w	$14(a0),(__u_FAF4).w
		move.w	#0,(__u_FAF8).w
		move.w	#$100,(__u_FAFA).w
		move.b	#$20,7(a0)
		clr.b	$2E(a0)
		clr.b	$30(a0)
		move.b	#$40,$1D(a0)
		move.b	#$27,$38(a0)
		move.b	#$27,$3A(a0)
		lea	(Child1_MakeMechaHead).l,a2
		jsr	CreateChild1_Normal.w
		jsr	Create_New_Sprite.w
		bne.s	loc_7A7C4
		move.l	#loc_7AD8A,(a1)
		move.l	a0,$34(a1)

loc_7A7C4:
		lea	(__u_FA82).w,a2
		move.l	#$10000300,(a2)+
		move.w	#$100,(a2)+
		rts
; ---------------------------------------------------------------------------

loc_7A7E2:
		move.w	#$1670,PlayerSpawn.w		; NAT: Set left spawn
		cmp.w	#$16F8,x_pos(a0)		; check if boss is beyond middle
		bhs.s	.gotit				; yes? branch
		move.w	#$1780,PlayerSpawn.w		; set right spawn

.gotit		moveq	#0,d0
		move.b	$26(a0),d0
		move.w	off_7A7F0(pc,d0.w),d1
		jmp	off_7A7F0(pc,d1.w)
; ---------------------------------------------------------------------------
off_7A7F0:	dc.w loc_7A800-off_7A7F0

		dc.w loc_7A874-off_7A7F0
		dc.w loc_7A8F4-off_7A7F0
		dc.w loc_7A93C-off_7A7F0
		dc.w loc_7A95A-off_7A7F0
		dc.w loc_7A98A-off_7A7F0
		dc.w loc_7A9D4-off_7A7F0
		dc.w loc_7AA44-off_7A7F0
; ---------------------------------------------------------------------------

loc_7A800:
		move.w	#$42C,PlayerSpawn+2.w		; NAT: Set respawn y-pos

		bsr.w	sub_7B12E
		move.w	(__u_FAF4).w,$14(a0)
		cmpi.w	#$420,(__u_FAF4).w
		blo.s	loc_7A84A
		addq.b	#2,$26(a0)
		clr.w	(__u_FAFA).w
		move.w	#-$100,(__u_FAF8).w
		bclr	#7,$2E(a0)
		bclr	#0,4(a0)
		move.w	(Player_1+x_pos).w,d0
		cmp.w	(__u_FAF0).w,d0
		blo.s	loc_7A84A
		move.w	#$100,(__u_FAF8).w
		bset	#7,$2E(a0)
		bset	#0,4(a0)

loc_7A84A:

		bsr.w	sub_7AC06
		jsr	Add_SpriteToCollisionResponseList.w
		jmp	Draw_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_7A85A:
		move.b	$1D(a0),d0
		jsr	GetSineCosine.w
		asr.w	#6,d0
		add.w	(__u_FAF4).w,d0
		move.w	d0,$14(a0)
		addq.b	#4,$1D(a0)
		rts
; End of function sub_7A85A

; ---------------------------------------------------------------------------

loc_7A874:
		bsr.w	sub_7B12E
		btst	#7,$2E(a0)
		bne.s	loc_7A8AE
		cmpi.w	#$1680,(__u_FAF0).w
		bhs.s	loc_7A8DA
		bchg	#7,$2E(a0)
		move.w	#$100,(__u_FAF8).w
		bset	#0,4(a0)
		bset	#6,$2E(a0)
		beq.s	loc_7A8DA
		addq.b	#2,$26(a0)
		move.w	#-$100,(__u_FAFA).w
		bra.s	loc_7A8DA
; ---------------------------------------------------------------------------

loc_7A8AE:
		cmpi.w	#$1780,(__u_FAF0).w
		blo.s	loc_7A8DA
		bchg	#7,$2E(a0)
		move.w	#-$100,(__u_FAF8).w
		bclr	#0,4(a0)
		bset	#6,$2E(a0)
		beq.s	loc_7A8DA
		addq.b	#2,$26(a0)
		move.w	#-$100,(__u_FAFA).w

loc_7A8DA:

		move.w	(__u_FAF0).w,$10(a0)
		bsr.w	sub_7A85A

loc_7A8E4:
		bsr.w	sub_7AC06
		jsr	Add_SpriteToCollisionResponseList.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_7A8F4:
		bsr.w	sub_7B12E
		cmpi.w	#$3F0,(__u_FAF4).w
		bhs.s	loc_7A906
		move.w	#0,(__u_FAFA).w

loc_7A906:
		btst	#7,$2E(a0)
		bne.s	loc_7A91E
		cmpi.w	#$1700,(__u_FAF0).w
		bhs.s	loc_7A92C
		move.w	#0,(__u_FAF8).w
		bra.s	loc_7A92C
; ---------------------------------------------------------------------------

loc_7A91E:
		cmpi.w	#$1700,(__u_FAF0).w
		blo.s	loc_7A92C
		move.w	#0,(__u_FAF8).w

loc_7A92C:

		move.w	(__u_FAF8).w,d0
		or.w	(__u_FAFA).w,d0
		bne.s	loc_7A93A
		addq.b	#2,$26(a0)

loc_7A93A:
		bra.s	loc_7A8DA
; ---------------------------------------------------------------------------

loc_7A93C:
		cmpi.b	#$68,$38(a0)
		bhs.s	loc_7A94E
		addq.b	#1,$38(a0)
		addq.b	#1,$3A(a0)
		bra.s	loc_7A958
; ---------------------------------------------------------------------------

loc_7A94E:
		subq.b	#1,$3A(a0)
		bne.s	loc_7A958
		addq.b	#2,$26(a0)

loc_7A958:

		bra.s	loc_7A8DA
; ---------------------------------------------------------------------------

loc_7A95A:
		cmpi.b	#$27,$38(a0)
		blo.s	loc_7A968
		subq.b	#1,$38(a0)
		bra.s	loc_7A986
; ---------------------------------------------------------------------------

loc_7A968:
		addq.b	#1,$3A(a0)
		cmpi.b	#$27,$3A(a0)
		blo.s	loc_7A986
		move.w	#$100,(__u_FAFA).w
		move.b	#0,$26(a0)
		bclr	#6,$2E(a0)

loc_7A986:

		bra.w	loc_7A8DA
; ---------------------------------------------------------------------------

loc_7A98A:
		tst.b	$3A(a0)
		beq.s	loc_7A996
		subq.b	#1,$3A(a0)
		bra.s	loc_7A99C
; ---------------------------------------------------------------------------

loc_7A996:
		move.b	#-1,$3B(a0)

loc_7A99C:
		cmpi.b	#$27,$38(a0)
		blo.s	loc_7A9A8
		subq.b	#1,$38(a0)

loc_7A9A8:
		bsr.w	sub_7B12E
		cmpi.w	#$3A4,(__u_FAF4).w
		bhs.s	loc_7A9BA
		move.w	#0,(__u_FAFA).w

loc_7A9BA:
		tst.b	$30(a0)
		bne.s	loc_7A9D0
		tst.b	$3B(a0)
		beq.s	loc_7A9CC
		move.b	#-$80,$3B(a0)

loc_7A9CC:
		addq.b	#2,$26(a0)

loc_7A9D0:
		bra.w	loc_7A8DA
; ---------------------------------------------------------------------------

loc_7A9D4:
		tst.b	$3C(a0)
		beq.s	loc_7AA02
		tst.b	$3B(a0)
		bne.s	loc_7AA40
		cmpi.b	#$27,$3A(a0)
		bhs.s	loc_7A9EE
		addq.b	#1,$3A(a0)
		bra.s	loc_7AA40
; ---------------------------------------------------------------------------

loc_7A9EE:
		move.w	#$100,(__u_FAFA).w
		move.b	#0,$26(a0)
		bclr	#6,$2E(a0)
		bra.s	loc_7AA40
; ---------------------------------------------------------------------------

loc_7AA02:
		move.w	#-$180,(__u_FAFA).w
		move.w	#-$100,(__u_FAF8).w
		bclr	#0,4(a0)
		btst	#7,$2E(a0)
		beq.s	loc_7AA28
		move.w	#$100,(__u_FAF8).w
		bset	#0,4(a0)

loc_7AA28:
		move.b	#$E,$26(a0)
		move.b	#0,$32(a0)
		bclr	#6,$2E(a0)
		move.b	#0,$33(a0)

loc_7AA40:

		bra.w	loc_7A8DA
; ---------------------------------------------------------------------------

loc_7AA44:
		tst.b	$33(a0)
		beq.s	loc_7AA52
		subq.b	#1,$33(a0)
		bra.w	loc_7A8E4
; ---------------------------------------------------------------------------

loc_7AA52:
		moveq	#0,d0
		move.b	$32(a0),d0
		move.w	off_7AA60(pc,d0.w),d1
		jmp	off_7AA60(pc,d1.w)
; ---------------------------------------------------------------------------
off_7AA60:	dc.w loc_7AA66-off_7AA60

		dc.w loc_7AACE-off_7AA60
		dc.w loc_7AB1A-off_7AA60
; ---------------------------------------------------------------------------

loc_7AA66:
		bsr.w	sub_7B12E
		cmpi.w	#$3A4,(__u_FAF4).w
		bhs.s	loc_7AA78
		move.w	#0,(__u_FAFA).w

loc_7AA78:
		btst	#7,$2E(a0)
		bne.s	loc_7AAA6
		cmpi.w	#$16A0,(__u_FAF0).w
		bhs.s	loc_7AACA
		addq.b	#2,$32(a0)
		move.w	#$180,(__u_FAFA).w
		move.b	#3,$31(a0)
		move.w	#$1E,(__u_FAFC).w
		bset	#0,4(a0)
		bra.s	loc_7AACA
; ---------------------------------------------------------------------------

loc_7AAA6:
		cmpi.w	#$1760,(__u_FAF0).w
		blo.s	loc_7AACA
		addq.b	#2,$32(a0)
		move.w	#$180,(__u_FAFA).w
		move.b	#3,$31(a0)
		move.w	#$1E,(__u_FAFC).w
		bclr	#0,4(a0)

loc_7AACA:

		bra.w	loc_7A8DA
; ---------------------------------------------------------------------------

loc_7AACE:
		bsr.w	sub_7B12E
		cmpi.w	#$420,(__u_FAF4).w
		blo.s	loc_7AAEC
		move.w	#-$180,(__u_FAFA).w
		addq.b	#2,$32(a0)
		bchg	#7,$2E(a0)
		bra.s	loc_7AB12
; ---------------------------------------------------------------------------

loc_7AAEC:
		btst	#7,$2E(a0)
		bne.s	loc_7AB04
		cmpi.w	#$1680,(__u_FAF0).w
		bhs.s	loc_7AB12
		move.w	#0,(__u_FAF8).w
		bra.s	loc_7AB12
; ---------------------------------------------------------------------------

loc_7AB04:
		cmpi.w	#$1780,(__u_FAF0).w
		blo.s	loc_7AB12
		move.w	#0,(__u_FAF8).w

loc_7AB12:

		bsr.w	sub_7AB56
		bra.w	loc_7A8DA
; ---------------------------------------------------------------------------

loc_7AB1A:
		bsr.w	sub_7B12E
		cmpi.w	#$3F0,(__u_FAF4).w
		bhs.s	loc_7AB3A
		move.w	#$100,(__u_FAF8).w
		btst	#7,$2E(a0)
		bne.s	loc_7AB3A
		move.w	#-$100,(__u_FAF8).w

loc_7AB3A:

		cmpi.w	#$3A4,(__u_FAF4).w
		bhs.s	loc_7AB4E
		move.w	#0,(__u_FAFA).w
		move.b	#0,$32(a0)

loc_7AB4E:
		bsr.w	sub_7AB56
		bra.w	loc_7A8DA

; =============== S U B R O U T I N E =======================================


sub_7AB56:

		subi.w	#1,(__u_FAFC).w
		bne.s	locret_7AB7E
		tst.b	$31(a0)
		beq.s	locret_7AB7E
		subq.b	#1,$31(a0)
		move.b	#$10,$33(a0)
		move.w	#$1E,(__u_FAFC).w
		lea	ChildObjDat_7AB80(pc),a2
		jsr	CreateChild1_Normal.w

locret_7AB7E:
		rts
; End of function sub_7AB56

; ---------------------------------------------------------------------------
ChildObjDat_7AB80:dc.w 1
		dc.l loc_7AB8E
		dc.w $F4FC
		dc.l loc_7AB8E
		dc.w $E8FC
; ---------------------------------------------------------------------------

loc_7AB8E:

		lea	ObjDat3_7ABFA(pc),a1
		jsr	SetUp_ObjAttributes.w
		movea.w	$46(a0),a1
		jsr	Refresh_ChildPositionAdjusted.w
		moveq	#0,d0
		tst.b	$2C(a0)
		beq.s	loc_7ABB8
		moveq	#8,d0
		move.b	#$C,$22(a0)
		move.w	#prio(2),8(a0)

loc_7ABB8:
		move.w	d0,$2E(a0)
		move.l	#loc_7ABC2,(a0)

loc_7ABC2:
		subq.w	#1,$2E(a0)
		bmi.s	loc_7ABCE
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_7ABCE:
		move.l	#loc_7ABEE,(a0)
		move.w	#-$400,d0
		btst	#0,4(a0)
		beq.s	loc_7ABE2
		neg.w	d0

loc_7ABE2:
		move.w	d0,$18(a0)
		moveq	#$5E,d0
		jsr	Play_Sound_2.w

loc_7ABEE:
		jsr	MoveSprite2.w
		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------
ObjDat3_7ABFA:	dc.l Map_SSZMTZOrbs
		dc.w $A41F
		dc.w prio(5)
		dc.b $28
		dc.b 8
		dc.b $D
		dc.b $9C

; =============== S U B R O U T I N E =======================================


sub_7AC06:

		bsr.w	sub_7ACF2
		cmpi.b	#$1F,$1C(a0)
		bne.s	loc_7AC4A
		st	$39(a0)
		lea	(__u_FA82).w,a1
		andi.b	#-$10,2(a1)
		ori.b	#5,2(a1)
		tst.b	$3C(a0)
		beq.s	loc_7AC42
		move.b	#$A,$26(a0)
		move.w	#-$180,(__u_FAFA).w
		subq.b	#1,$3C(a0)

loc_7AC42:
		clr.w	(__u_FAF8).w
		rts
; ---------------------------------------------------------------------------

loc_7AC4A:
		cmpi.b	#4,Player_1+routine.w
		beq.s	loc_7AC5A
		cmpi.b	#4,Player_2+routine.w
		bne.s	locret_7AC78

loc_7AC5A:
		lea	(__u_FA82).w,a1
		move.b	2(a1),d0
		andi.b	#$F,d0
		cmpi.b	#4,d0
		beq.s	locret_7AC78
		andi.b	#-$10,2(a1)
		ori.b	#4,2(a1)

locret_7AC78:

		rts
; End of function sub_7AC06

; ---------------------------------------------------------------------------

loc_7AC7A:
		move.l	#loc_7AC92,(a0)
		bset	#0,4(a0)
		move.w	#$400,$18(a0)
		clr.w	$1A(a0)
		rts
; ---------------------------------------------------------------------------

loc_7AC92:
		subq.w	#1,$2E(a0)
		bmi.s	loc_7ACA4
		jsr	MoveSprite2.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_7ACA4:
		clr.b	(Boss_flag).w
		bset	#4,$38(a0)
		st	(MechaHead_DeleteFlag).w
		st	(ScrEvents_3).w
		lea	(Target_palette_line_2).w,a1
		lea	(Normal_palette_line_2).w,a2
		moveq	#7,d6

loc_7ACC0:
		move.l	(a1)+,(a2)+
		dbf	d6,loc_7ACC0
		moveq	#$32,d0
		jsr	Load_PLC.w
		jsr	Boss_DisableHitMode		; NAT: Disable hit mode
		jmp	Go_Delete_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_7ACF2:
		cmpi.b	#$10,$26(a0)
		bhs.s	locret_7AD38
		tst.b	$29(a0)
		beq.s	loc_7AD3A
		tst.b	$28(a0)
		bne.s	locret_7AD38

		cmp.b	#$4A,$1C(a0)		; NAT: FUCKING
		beq.s	.sex			; if tails, branch
		tst.b	$1C(a0)
		bne.s	loc_7AD1A
.sex		move.b	#$20,$1C(a0)
		moveq	#$6E,d0
		jsr	Play_Sound_2.w

loc_7AD1A:
		moveq	#0,d0
		btst	#0,$1C(a0)
		bne.s	loc_7AD28
		addi.w	#3*2,d0		; NAT: https://s3unlocked.blogspot.com/2017/07/the-naked-boss-flash.html

loc_7AD28:
		bsr.w	sub_7AD6A
		subq.b	#1,$1C(a0)
		bne.s	locret_7AD38
		move.b	#$F,$28(a0)

locret_7AD38:

		rts
; ---------------------------------------------------------------------------

loc_7AD3A:
		move.l	#Wait_FadeToLevelMusic,(a0)
		move.l	#loc_7AC7A,$34(a0)
		st	(__u_FA88).w
		clr.b	$38(a0)
		lea	Child6_CreateBossExplosion.w,a2
		jsr	CreateChild1_Normal.w
		bne.s	loc_7AD64
		move.b	#4,$2C(a1)

loc_7AD64:
		jmp	BossDefeated.w
; End of function sub_7ACF2


; =============== S U B R O U T I N E =======================================


sub_7AD6A:
		lea	word_7AD78(pc),a1
		lea	word_7AD7E(pc,d0.w),a2
		jmp	CopyWordData_3.w
; End of function sub_7AD6A

; ---------------------------------------------------------------------------
word_7AD78:	dc.w $FC0E
		dc.w $FC1C
		dc.w $FC1E
word_7AD7E:	dc.w 8
		dc.w $866
		dc.w $222
		dc.w $888
		dc.w $CCC
		dc.w $EEE
; ---------------------------------------------------------------------------

loc_7AD8A:

		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_7AD98(pc,d0.w),d1
		jmp	off_7AD98(pc,d1.w)
; ---------------------------------------------------------------------------
off_7AD98:	dc.w loc_7ADA2-off_7AD98

		dc.w loc_7AE22-off_7AD98
		dc.w loc_7AFA4-off_7AD98
		dc.w loc_7B02A-off_7AD98
		dc.w loc_7B116-off_7AD98
; ---------------------------------------------------------------------------

loc_7ADA2:
		movea.l	a0,a1
		moveq	#6,d3
		moveq	#0,d2
		bra.s	loc_7ADB2
; ---------------------------------------------------------------------------

loc_7ADAA:
		jsr	Create_New_Sprite.w
		bne.s	locret_7AE12

loc_7ADB2:
		move.b	#$20,7(a1)
		move.l	$34(a0),$34(a1)
		move.l	#loc_7AD8A,(a1)
		move.l	#Map_SSZMTZOrbs,$C(a1)
		move.w	#$41F,$A(a1)
		ori.b	#4,4(a1)
		move.w	#prio(3),8(a1)
		addq.b	#2,5(a1)
		clr.b	$22(a1)
		move.b	byte_7AE14(pc,d2.w),$2E(a1)
		move.b	byte_7AE14(pc,d2.w),$41(a1)
		move.b	byte_7AE1B(pc,d2.w),$40(a1)
		move.b	#$40,$2F(a1)
		move.b	#-$79,$28(a1)
		clr.b	$42(a1)
		addq.w	#1,d2
		dbf	d3,loc_7ADAA

locret_7AE12:
		rts
; ---------------------------------------------------------------------------
byte_7AE14:	dc.b $24
		dc.b $6C
		dc.b $B4
		dc.b $FC
		dc.b $48
		dc.b $90
		dc.b $D8
byte_7AE1B:	dc.b 0
		dc.b 1
		dc.b 1
		dc.b 0
		dc.b 1
		dc.b 1
		dc.b 0
; ---------------------------------------------------------------------------

loc_7AE22:
		tst.b	(__u_FA88).w		; NAT: make object explode if boss is defeated
		beq.s	.noexp
		move.l	#Obj_Explosion,(a0)
		move.b	#6,5(a0)
		jmp	Draw_Sprite.w

.noexp		movea.l	$34(a0),a1
		move.w	$14(a1),$30(a0)
		subi.w	#4,$30(a0)
		move.w	$10(a1),$3E(a0)
		tst.b	$39(a1)
		beq.s	loc_7AE9C
		move.b	#0,$39(a1)
		addi.b	#1,$30(a1)
		addq.b	#2,5(a0)
		move.b	#$3C,$3C(a0)
		move.b	#2,$20(a0)
		move.w	#-$400,$1A(a0)
		moveq	#-$80,d1
		move.w	(Player_1+x_pos).w,d0
		sub.w	$10(a0),d0
		bpl.s	loc_7AE70
		neg.w	d1

loc_7AE70:
		cmpi.w	#$16A0,$10(a0)
		bhs.s	loc_7AE7C
		move.w	#$80,d1

loc_7AE7C:
		cmpi.w	#$1760,$10(a0)
		blo.s	loc_7AE88
		moveq	#-$80,d1

loc_7AE88:
		bclr	#0,4(a0)
		tst.w	d1
		bmi.s	loc_7AE98
		bset	#0,4(a0)

loc_7AE98:
		move.w	d1,$18(a0)

loc_7AE9C:
		bsr.w	sub_7AEB0
		bsr.w	sub_7AF5A
		jsr	Add_SpriteToCollisionResponseList.w
		jmp	Draw_Sprite.w

; =============== S U B R O U T I N E =======================================

sub_7AEB0:
		move.b	$2F(a0),d0
		jsr	GetSineCosine.w
		move.w	d0,d3
		moveq	#0,d1
		move.b	$38(a1),d1
		muls.w	d1,d0
		move.w	d0,d5
		move.w	d0,d4
		move.b	$3A(a1),d2
		tst.b	$3B(a1)
		beq.s	loc_7AED6
		move.w	#$10,d2

loc_7AED6:
		muls.w	d3,d2
		move.w	$3E(a0),d6
		move.b	$2E(a0),d0
		jsr	GetSineCosine.w
		muls.w	d0,d5
		swap	d5
		add.w	d6,d5
		move.w	d5,$10(a0)
		muls.w	d1,d4
		swap	d4
		move.w	d4,$3A(a0)
		move.w	$30(a0),d6
		move.b	$41(a0),d0
		tst.b	$3B(a1)
		beq.s	loc_7AF0A
		move.b	$42(a0),d0

loc_7AF0A:
		jsr	GetSineCosine.w
		muls.w	d0,d2
		swap	d2
		add.w	d6,d2
		move.w	d2,$14(a0)
		addq.b	#4,$2E(a0)
		tst.b	$3B(a1)
		bne.s	loc_7AF2A
		addq.b	#8,$41(a0)
		rts
; ---------------------------------------------------------------------------

loc_7AF2A:
		cmpi.b	#-1,$3B(a1)
		beq.s	loc_7AF4C
		cmpi.b	#-$80,$3B(a1)
		bne.s	loc_7AF44
		subq.b	#2,$42(a0)
		bpl.s	locret_7AF58
		clr.b	$42(a0)

loc_7AF44:
		clr.b	$3B(a1)
		rts
; ---------------------------------------------------------------------------

loc_7AF4C:
		cmpi.b	#$40,$42(a0)
		bhs.s	locret_7AF58
		addq.b	#2,$42(a0)

locret_7AF58:
		rts

; =============== S U B R O U T I N E =======================================


sub_7AF5A:
		move.w	$3A(a0),d0
		bmi.s	loc_7AF82
		cmpi.w	#$C,d0
		blt.s	loc_7AF74
		clr.b	$22(a0)
		move.w	#prio(1),8(a0)
		rts
; ---------------------------------------------------------------------------

loc_7AF74:
		move.b	#1,$22(a0)
		move.w	#prio(2),8(a0)
		rts
; ---------------------------------------------------------------------------

loc_7AF82:
		cmpi.w	#-$C,d0
		blt.s	loc_7AF96
		move.b	#1,$22(a0)
		move.w	#prio(6),8(a0)
		rts
; ---------------------------------------------------------------------------

loc_7AF96:
		move.b	#2,$22(a0)
		move.w	#prio(7),8(a0)
		rts
; End of function sub_7AF5A

; ---------------------------------------------------------------------------

loc_7AFA4:
		tst.b	$3C(a0)
		bmi.s	loc_7AFB6
		subq.b	#1,$3C(a0)
		bpl.s	loc_7AFB6
		move.b	#-$3A,$28(a0)

loc_7AFB6:

		jsr	MoveSprite.w
		subi.w	#$20,$1A(a0)
		cmpi.w	#$180,$1A(a0)
		blt.s	loc_7AFD0
		move.w	#$180,$1A(a0)

loc_7AFD0:
		tst.w	$1A(a0)
		bmi.s	loc_7AFF8
		cmpi.w	#$42C,$14(a0)
		blo.s	loc_7AFF8
		move.w	#$42C,$14(a0)
		move.w	#$42C,$38(a0)
		move.b	#1,$32(a0)
		addq.b	#2,5(a0)
		bsr.w	sub_7B0A8

loc_7AFF8:

		bsr.w	sub_7B0C2

loc_7AFFC:
		lea	Ani_SSZMTZOrbs(pc),a1
		jsr	Animate_Sprite.w
		jsr	Add_SpriteToCollisionResponseList.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
	;	tst.b	$29(a0)
	;	beq.s	locret_7B028
	;	move.b	#$E,$22(a0)
	;	move.b	#6,$20(a0)
	;	addq.b	#2,5(a0)

;locret_7B028:
	;	rts
; ---------------------------------------------------------------------------

loc_7B02A:
		tst.b	$3C(a0)
		bmi.s	loc_7B03C
		subq.b	#1,$3C(a0)
		bpl.s	loc_7B03C
		move.b	#-$26,$28(a0)

loc_7B03C:

		bsr.w	sub_7B0C2
		cmpi.b	#8,$22(a0)
		bne.s	loc_7AFFC
		move.b	$32(a0),d0
		jsr	GetSineCosine.w
		neg.w	d0
		asr.w	#2,d0
		add.w	$38(a0),d0
		cmpi.w	#$42C,d0
		bhs.s	loc_7B08C
		move.w	d0,$14(a0)
		addq.b	#1,$32(a0)
		btst	#0,$32(a0)
		beq.s	loc_7B080
		moveq	#-1,d0
		btst	#0,4(a0)
		beq.s	loc_7B07C
		neg.w	d0

loc_7B07C:
		add.w	d0,$10(a0)

loc_7B080:
		jsr	Add_SpriteToCollisionResponseList.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_7B08C:
		move.w	#$42C,$14(a0)
		bsr.w	sub_7B0A8
		move.b	#1,$32(a0)
		jsr	Add_SpriteToCollisionResponseList.w
		jmp	Draw_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_7B0A8:

		move.w	(Player_1+x_pos).w,d0
		sub.w	$10(a0),d0
		bpl.s	loc_7B0BA
		bclr	#0,4(a0)
		rts
; ---------------------------------------------------------------------------

loc_7B0BA:
		bset	#0,4(a0)
		rts
; End of function sub_7B0A8


; =============== S U B R O U T I N E =======================================


sub_7B0C2:

		moveq	#0,d0
		move.b	$29(a0),d0
		bne.s	loc_7B0D2
		tst.b	(__u_FA88).w
		bne.s	loc_7B0F6
		rts
; ---------------------------------------------------------------------------

loc_7B0D2:
		clr.b	$29(a0)
		andi.b	#3,d0
		add.w	d0,d0
		movea.w	word_7B10E(pc,d0.w),a1
		tst.b	$34(a1)
		bne.w	locret_7A718
		jsr	Check_PlayerAttack.w
		bne.s	loc_7B0F6
		jsr	HurtCharacter_Directly.w

loc_7B0F6:

		clr.b	$28(a0)
		move.b	#$E,$22(a0)
		move.b	#6,$20(a0)
		move.b	#8,5(a0)
		rts
; End of function sub_7B0C2

; ---------------------------------------------------------------------------
word_7B10E:	dc.w $B000
		dc.w $B000
		dc.w $B04A
		dc.w $B04A
; ---------------------------------------------------------------------------

loc_7B116:
		moveq	#$77,d0
		jsr	Play_Sound_2.w
		movea.l	$34(a0),a1
		subi.b	#1,$30(a1)
		jmp	Delete_Current_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_7B12E:

		move.l	(__u_FAF0).w,d2
		move.l	(__u_FAF4).w,d3
		move.w	(__u_FAF8).w,d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d2
		move.w	(__u_FAFA).w,d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d3
		move.l	d2,(__u_FAF0).w
		move.l	d3,(__u_FAF4).w
		rts
; End of function sub_7B12E

; ---------------------------------------------------------------------------
		moveq	#0,d6
		movea.l	a1,a4
		lea	(__u_FA82).w,a2
		lea	$22(a0),a3
		tst.b	(a3)
		bne.s	loc_7B168
		addq.w	#2,a2
		bra.s	loc_7B16C
; ---------------------------------------------------------------------------

loc_7B168:
		bsr.w	sub_7B17A

loc_7B16C:
		moveq	#0,d6
		move.b	$16(a0),d6
		subq.w	#1,d6
		bmi.s	locret_7B1E0
		lea	$1D(a0),a3

; =============== S U B R O U T I N E =======================================


sub_7B17A:

		movea.l	a4,a1
		moveq	#0,d0
		moveq	#0,d1
		moveq	#0,d2
		moveq	#0,d4
		move.b	(a2)+,d0
		move.b	d0,d1
		lsr.b	#4,d1
		andi.b	#$F,d0
		move.b	d0,d2
		cmp.b	d0,d1
		beq.s	loc_7B196
		st	d4

loc_7B196:
		move.b	d0,d5
		lsl.b	#4,d5
		or.b	d0,d5
		move.b	(a2)+,d0
		move.b	d0,d1
		lsr.b	#4,d1
		tst.b	d4
		beq.s	loc_7B1AA
		moveq	#0,d0
		moveq	#0,d1

loc_7B1AA:
		andi.b	#$F,d0
		subi.b	#1,d0
		bpl.s	loc_7B1CC
		add.w	d2,d2
		adda.w	(a1,d2.w),a1
		move.b	(a1),d0
		move.b	1(a1,d1.w),d2
		bmi.s	loc_7B1E2

loc_7B1C2:

		andi.b	#$7F,d2
		move.b	d2,(a3)
		addi.b	#1,d1

loc_7B1CC:

		lsl.b	#4,d1
		or.b	d1,d0
		move.b	d0,-1(a2)
		move.b	d5,-2(a2)
		adda.w	#6,a3
		dbf	d6,sub_7B17A

locret_7B1E0:
		rts
; ---------------------------------------------------------------------------

loc_7B1E2:
		addq.b	#1,d2
		bne.s	loc_7B1F0
		move.b	#0,d1
		move.b	1(a1),d2
		bra.s	loc_7B1C2
; ---------------------------------------------------------------------------

loc_7B1F0:
		addq.b	#1,d2
		bne.s	loc_7B1FC
		addi.b	#2,$26(a0)
		rts
; ---------------------------------------------------------------------------

loc_7B1FC:
		addq.b	#1,d2
		bne.s	loc_7B20A
		andi.b	#-$10,d5
		or.b	2(a1,d1.w),d5
		bra.s	loc_7B1CC
; ---------------------------------------------------------------------------

loc_7B20A:
		addq.b	#1,d2
		bne.s	locret_7B21A
		moveq	#0,d3
		move.b	2(a1,d1.w),d1
		move.b	1(a1,d1.w),d2
		bra.s	loc_7B1C2
; ---------------------------------------------------------------------------

locret_7B21A:
		rts
; End of function sub_7B17A

; ---------------------------------------------------------------------------
Ani_SSZMTZOrbs:	include "Levels/SSZ/Misc Object Data/Anim - MTZOrbs.asm"

Pal_SSZMTZOrbs:	binclude "Levels/SSZ/Palettes/MTZOrbs.bin"
	even

; ---------------------------------------------------------------------------

Obj_A3_2:
		btst	#5,OptionsBits.w		; NAT: Check if bosses are on
		bne.s	.enabled			; if are, branch
		lea	PLC_83D64.w,a1
		jsr	Load_PLC_Raw.w
		lea	.screen(pc),a1			; else, lock screen
		jmp	Boss_Force_End_2		;

.screen		dc.w $19A0, $19A0, $5C0, $5C0

.enabled	moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_7B2B2(pc,d0.w),d1
		jsr	off_7B2B2(pc,d1.w)
		lea	sub_7D35A(pc),a4
		bsr.w	sub_7D312
		bsr.w	sub_7D2D8
		lea	DPLCPtr_7D4D6(pc),a2
		jsr	Perform_DPLC.w

		move.w	#$19B0,PlayerSpawn.w		; NAT: Set left spawn
		cmp.w	#$1A38,x_pos(a0)		; check if boss is beyond middle
		bhs.s	.gotit				; yes? branch
		move.w	#$1AC0,PlayerSpawn.w		; set right spawn
.gotit
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------
off_7B2B2:	dc.w loc_7B2DC-off_7B2B2

		dc.w loc_7B3AC-off_7B2B2
		dc.w loc_7B3E6-off_7B2B2
		dc.w loc_7B416-off_7B2B2
		dc.w loc_7B44A-off_7B2B2
		dc.w loc_7B478-off_7B2B2
		dc.w loc_7B4DA-off_7B2B2
		dc.w loc_7B53E-off_7B2B2
		dc.w loc_7B5AC-off_7B2B2
		dc.w loc_7B53E-off_7B2B2
		dc.w loc_7B53E-off_7B2B2
		dc.w loc_7B63A-off_7B2B2
		dc.w loc_7B67C-off_7B2B2
		dc.w loc_7B6A0-off_7B2B2
		dc.w loc_7B6DA-off_7B2B2
		dc.w loc_7B6EE-off_7B2B2
		dc.w loc_7B748-off_7B2B2
		dc.w loc_7B77E-off_7B2B2
		dc.w loc_7B7BA-off_7B2B2
		dc.w loc_7B748-off_7B2B2
		dc.w loc_7B804-off_7B2B2
; ---------------------------------------------------------------------------

loc_7B2DC:
		st	BossHitMode.w			; NAT: Enable hit mode
		clr.w	BossHitsP1.w			; clear hits count
		st	Boss_flag.w			; NAT: Enable boss mode
		move.w	#$66C,PlayerSpawn+2.w		; NAT: Set respawn y-pos

		lea	ObjDat4_7D3EA(pc),a1
		jsr	SetUp_ObjAttributesSlotted.w
		move.b	#8,$29(a0)
		move.l	(V_int_run_count).w,(RNG_seed).w

loc_7B308:
		move.b	#4,5(a0)
		move.b	#2,$22(a0)
		move.w	#-$800,$18(a0)
		bset	#2,$38(a0)
		lea	ChildObjDat_7D47A(pc),a2
		jsr	CreateChild6_Simple.w
		move.w	(Camera_X_pos).w,d0
		addi.w	#$20,d0
		move.w	d0,(__u_FAB4).w
		addi.w	#$100,d0
		move.w	d0,(__u_FAB6).w
		addi.w	#$40,d0
		move.w	d0,$10(a0)
		move.w	(Camera_Y_pos).w,d0
		addi.w	#$30,d0
		move.w	d0,(__u_FAB0).w
		addi.w	#$70,d0
		move.w	d0,$14(a0)

loc_7B35A:
		lea	(ArtKosM_MechaSonicExtra).l,a1
		move.w	#-$7C80,d2
		jsr	Queue_Kos_Module.w
		lea	PLC_83D64.w,a1
		jsr	Load_PLC_Raw.w
		lea	(Pal_SSZGHZMisc).l,a1
		jsr	PalLoad_Line1.w
		tst.b	(Current_act).w
		bne.s	loc_7B39C
		jsr	Create_New_Sprite.w
		bne.s	loc_7B39C
		move.l	#Obj_Song_Fade_Transition,(a1)
		move.b	#Mus_Boss,$2C(a1)

loc_7B39C:

		lea	ChildObjDat_7D474(pc),a2
		jsr	CreateChild6_Simple.w
		jmp	Create_New_Sprite.w
; ---------------------------------------------------------------------------

loc_7B3AC:
		btst	#4,(__u_FAB8).w
		beq.w	locret_7B448
		move.b	#$14,5(a0)
		move.b	#2,$3B(a0)
		move.w	(Camera_X_pos).w,d0
		addi.w	#$20,d0
		move.w	d0,(__u_FAB4).w
		addi.w	#$100,d0
		move.w	d0,(__u_FAB6).w
		move.w	(Camera_Y_pos).w,d0
		addi.w	#$30,d0
		move.w	d0,(__u_FAB0).w
		bra.w	loc_7B57A
; ---------------------------------------------------------------------------

loc_7B3E6:
		jsr	MoveSprite2.w
		move.w	(Camera_X_pos).w,d0
		subi.w	#$20,d0
		cmp.w	$10(a0),d0
		blo.s	locret_7B414
		move.b	#6,5(a0)
		bclr	#2,$38(a0)
		move.w	#$3F,$2E(a0)
		move.l	#loc_7B41C,$34(a0)

locret_7B414:
		rts
; ---------------------------------------------------------------------------

loc_7B416:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_7B41C:
		move.b	#8,5(a0)
		bset	#0,4(a0)
		move.w	(Camera_Y_pos).w,d0
		addi.w	#$40,d0
		move.w	d0,$14(a0)
		move.w	#$400,$18(a0)
		move.b	#3,$22(a0)
		move.l	#byte_7D523,$30(a0)

locret_7B448:

		rts
; ---------------------------------------------------------------------------

loc_7B44A:
		jsr	Animate_RawMultiDelay.w
		jsr	MoveSprite2.w
		move.w	$10(a0),d0
		cmp.w	(__u_FAB6).w,d0
		bhs.s	loc_7B462
		rts
; ---------------------------------------------------------------------------

loc_7B462:

		move.b	#$A,5(a0)
		move.w	#$1F,$2E(a0)
		move.l	#loc_7B484,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_7B478:
		jsr	Animate_RawMultiDelay.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_7B484:
		move.b	#$C,5(a0)
		move.b	#$1F,$1E(a0)
		clr.w	$18(a0)
		clr.w	$1A(a0)
		clr.b	$23(a0)
		clr.b	$24(a0)
		move.l	#loc_7B4EC,$34(a0)
		jsr	Random_Number.w
		tst.w	d0
		bmi.s	loc_7B4CA
		bclr	#4,(__u_FAB8).w
		bne.s	loc_7B4CA
		move.l	#byte_7D4DE,$30(a0)
		bclr	#3,$38(a0)
		rts
; ---------------------------------------------------------------------------

loc_7B4CA:

		move.l	#byte_7D4EF,$30(a0)
		bset	#3,$38(a0)
		rts
; ---------------------------------------------------------------------------

loc_7B4DA:
		jsr	Animate_RawMultiDelay.w
		jsr	MoveSprite_LightGravity.w
		jmp	ObjHitFloor_DoRoutine.w
; ---------------------------------------------------------------------------

loc_7B4EC:
		move.b	#$E,5(a0)
		clr.w	$16(a0)
		clr.b	$23(a0)
		clr.b	$24(a0)
		moveq	#-$6A,d0
		jsr	Play_Sound_2.w
		btst	#3,$38(a0)
		bne.s	loc_7B520
		move.l	#byte_7D596,$30(a0)
		move.l	#loc_7B544,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_7B520:
		bchg	#0,4(a0)
		move.b	#1,$22(a0)
		move.l	#byte_7D5A2,$30(a0)
		move.l	#loc_7B57A,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_7B53E:
		jmp	Animate_RawMultiDelay.w
; ---------------------------------------------------------------------------

loc_7B544:
		move.b	#$10,5(a0)
		move.w	#$820,d0
		move.w	#-$20,d1
		btst	#0,4(a0)
		beq.s	loc_7B55E
		neg.w	d0
		neg.w	d1

loc_7B55E:
		move.w	d0,$18(a0)
		move.w	d1,$40(a0)
		clr.w	$1A(a0)
		bset	#2,$38(a0)
		lea	ChildObjDat_7D486(pc),a2
		jmp	CreateChild6_Simple.w
; ---------------------------------------------------------------------------

loc_7B57A:

		move.b	#$14,5(a0)
		move.l	#byte_7D541,$30(a0)
		move.l	#loc_7B5E8,$34(a0)
		move.w	(Camera_X_pos).w,d0
		addi.w	#$A0,d0
		bset	#0,4(a0)
		cmp.w	$10(a0),d0
		bhs.s	locret_7B5AA
		bclr	#0,4(a0)

locret_7B5AA:
		rts
; ---------------------------------------------------------------------------

loc_7B5AC:
		move.w	$40(a0),d0
		add.w	d0,$18(a0)
		jsr	MoveSprite2.w
		lea	loc_7B5C2(pc),a1
		bra.w	loc_7D216
; ---------------------------------------------------------------------------

loc_7B5C2:
		move.b	#$12,5(a0)
		move.w	d0,$10(a0)
		clr.w	$12(a0)
		bclr	#2,$38(a0)
		move.l	#byte_7D59B,$30(a0)
		move.l	#loc_7B57A,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_7B5E8:
		move.b	#$F,$1E(a0)
		lea	byte_7D54A(pc),a1
		jsr	Set_Raw_Animation.w
		move.w	#$200,d0
		btst	#0,4(a0)
		bne.s	loc_7B606
		neg.w	d0

loc_7B606:
		move.w	d0,$18(a0)
		move.w	#-$600,$1A(a0)
		move.b	$3B(a0),d0
		addq.b	#1,$3B(a0)
		andi.w	#7,d0
		moveq	#0,d1
		move.b	byte_7B62E(pc,d0.w),d1
		move.b	d1,$3A(a0)
		move.b	byte_7B636(pc,d1.w),5(a0)
		rts
; ---------------------------------------------------------------------------
byte_7B62E:	dc.b 0
		dc.b 1
		dc.b 2
		dc.b 0
		dc.b 1
		dc.b 2
		dc.b 0
		dc.b 1
byte_7B636:	dc.b $16
		dc.b $1A
		dc.b $1E
		dc.b 0
; ---------------------------------------------------------------------------

loc_7B63A:
		jsr	Animate_RawMultiDelay.w
		jsr	MoveSprite.w
		tst.w	$1A(a0)
		bpl.s	loc_7B64E
		rts
; ---------------------------------------------------------------------------

loc_7B64E:
		move.b	#$18,5(a0)
		move.w	#$780,d0
		moveq	#-$20,d1
		btst	#0,4(a0)
		bne.s	loc_7B666
		neg.w	d0
		neg.w	d1

loc_7B666:
		move.w	d0,$18(a0)
		move.w	d1,$40(a0)
		clr.w	$1A(a0)
		moveq	#-$4A,d0
		jsr	Play_Sound_2.w
		rts
; ---------------------------------------------------------------------------

loc_7B67C:
		jsr	Animate_RawMultiDelay.w
		move.w	$40(a0),d0
		add.w	d0,$18(a0)
		jsr	MoveSprite2.w
		lea	loc_7B698(pc),a1
		bra.w	loc_7D216
; ---------------------------------------------------------------------------

loc_7B698:
		move.w	d0,$10(a0)
		bra.w	loc_7B462
; ---------------------------------------------------------------------------

loc_7B6A0:
		jsr	Animate_RawMultiDelay.w
		jsr	MoveSprite.w
		tst.w	$1A(a0)
		bmi.s	locret_7B6BE
		jsr	ObjCheckFloorDist.w
		tst.w	d1
		bmi.s	loc_7B6C0
		beq.s	loc_7B6C0

locret_7B6BE:
		rts
; ---------------------------------------------------------------------------

loc_7B6C0:

		add.w	d1,$14(a0)
		move.b	#$1C,5(a0)
		move.w	#-$900,$1A(a0)
		moveq	#$49,d0
		jmp	Play_Sound_2.w
; ---------------------------------------------------------------------------

loc_7B6DA:
		jsr	Animate_RawMultiDelay.w
		jsr	MoveSprite.w
		lea	loc_7B462(pc),a1
		bra.w	loc_7D216
; ---------------------------------------------------------------------------

loc_7B6EE:
		jsr	Animate_RawMultiDelay.w
		jsr	MoveSprite.w
		tst.w	$1A(a0)
		bmi.s	locret_7B70C
		jsr	ObjCheckFloorDist.w
		tst.w	d1
		bmi.s	loc_7B70E
		beq.s	loc_7B70E

locret_7B70C:

		rts
; ---------------------------------------------------------------------------

loc_7B70E:

		add.w	d1,$14(a0)
		move.b	#$20,5(a0)
		move.w	#$F,$2E(a0)
		move.l	#loc_7B754,$34(a0)
		bset	#2,$38(a0)
		moveq	#-$6A,d0
		jsr	Play_Sound_2.w
		lea	ChildObjDat_7D480(pc),a2
		jsr	CreateChild6_Simple.w
		bne.s	locret_7B70C
		move.b	#8,$2C(a1)
		rts
; ---------------------------------------------------------------------------

loc_7B748:
		jsr	Animate_RawMultiDelay.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_7B754:
		move.b	#$22,5(a0)
		move.w	#$100,d0
		tst.w	$18(a0)
		bmi.s	loc_7B766
		neg.w	d0

loc_7B766:
		move.w	d0,$18(a0)
		clr.w	$1A(a0)
		move.w	#7,$2E(a0)
		move.l	#loc_7B790,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_7B77E:
		jsr	Animate_RawMultiDelay.w
		jsr	MoveSprite2.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_7B790:
		move.b	#$24,5(a0)
		move.w	#$640,d0
		move.w	#-$20,d1
		tst.w	$18(a0)
		bmi.s	loc_7B7A8
		neg.w	d0
		neg.w	d1

loc_7B7A8:
		move.w	d0,$18(a0)
		move.w	d1,$40(a0)
		moveq	#-$4A,d0
		jsr	Play_Sound_2.w
		rts
; ---------------------------------------------------------------------------

loc_7B7BA:
		jsr	Animate_RawMultiDelay.w
		move.w	$40(a0),d0
		add.w	d0,$18(a0)
		jsr	MoveSprite2.w
		lea	loc_7B7D6(pc),a1
		bra.w	loc_7D216
; ---------------------------------------------------------------------------

loc_7B7D6:
		move.b	#$26,5(a0)
		move.w	#$F,$2E(a0)
		move.l	#loc_7B7EC,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_7B7EC:
		move.b	#$28,5(a0)
		bclr	#2,$38(a0)
		clr.w	$18(a0)
		move.w	#-$640,$1A(a0)
		rts
; ---------------------------------------------------------------------------

loc_7B804:
		jsr	Animate_RawMultiDelay.w
		jsr	MoveSprite.w
		tst.w	$1A(a0)
		bpl.w	loc_7B462
		rts
; ---------------------------------------------------------------------------

loc_7B81A:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_7B838(pc,d0.w),d1
		jsr	off_7B838(pc,d1.w)
		lea	DPLCPtr_7D4D6(pc),a2
		jsr	Perform_DPLC.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
off_7B838:	dc.w loc_7B852-off_7B838

		dc.w loc_7B87C-off_7B838
		dc.w loc_7B93E-off_7B838
		dc.w loc_7B972-off_7B838
		dc.w loc_7B984-off_7B838
		dc.w loc_7B9D2-off_7B838
		dc.w loc_7B9FA-off_7B838
		dc.w loc_7BA28-off_7B838
		dc.w loc_7BA90-off_7B838
		dc.w loc_7BABE-off_7B838
		dc.w loc_7BB06-off_7B838
		dc.w loc_7BBAC-off_7B838
		dc.w loc_7BBE0-off_7B838
; ---------------------------------------------------------------------------

loc_7B852:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_7B858:
		move.b	#2,5(a0)
		move.b	#$E,$22(a0)
		move.b	#$1F,$1E(a0)
		clr.w	$18(a0)
		clr.w	$1A(a0)
		move.l	#loc_7B888,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_7B87C:
		jsr	MoveSprite_LightGravity.w
		jmp	ObjHitFloor_DoRoutine.w
; ---------------------------------------------------------------------------

loc_7B888:
		move.b	#$23,$1E(a0)
		lea	byte_7D5E4(pc),a1
		jsr	Set_Raw_Animation.w
		lea	(word_7D842).l,a1
		bsr.w	sub_7C678
		lea	ChildObjDat_7D48C(pc),a2
		jsr	CreateChild6_Simple.w
		moveq	#-$6A,d0
		jsr	Play_Sound_2.w
	;	tst.b	(Current_act).w
	;	bne.s	loc_7B8E6
		move.b	#4,5(a0)
	;	st	(End_Of_Level_Flag).w
		bset	#5,$38(a0)
		bclr	#3,$38(a0)
		move.w	#$77,$2E(a0)

		jsr	Create_New_Sprite.w
		bne.s	locret_7B8E4
		move.l	#Obj_EndSignControl_HitHUD,(a1)		; NAT: use different object
		move.w	#$1A40,x_pos(a1)
		move.w	#$660,y_pos(a1)
		clr.b	(__u_FA9A).w; NAT: No fucking idea why this cunt object needs this shit! Fuck me.

locret_7B8E4:
		rts
; ---------------------------------------------------------------------------

loc_7B8E6:
		btst	#7,$38(a0)
		bne.s	loc_7B916
		bset	#5,$38(a0)
		move.b	#8,5(a0)
		move.w	#$BF,$2E(a0)
		move.l	#loc_7B996,$34(a0)
		st	(Ctrl_2_locked).w
		moveq	#-$1F,d0
		jmp	Play_Sound.w
; ---------------------------------------------------------------------------

loc_7B916:
		move.l	#loc_7BC32,(a0)
		clr.b	(Update_HUD_timer).w
		move.w	#$BF,$2E(a0)
		jsr	Create_New_Sprite.w
		bne.s	loc_7B934
		move.l	#loc_8642E,(a1)

loc_7B934:
		lea	ChildObjDat_7D4D0(pc),a2
		jmp	CreateChild6_Simple.w
; ---------------------------------------------------------------------------

loc_7B93E:
		jsr	Run_PalRotationScript.w
		jmp	Animate_RawMultiDelay.w
; ---------------------------------------------------------------------------

loc_7B972:
		tst.b	4(a0)
		bpl.s	loc_7B97E
		jmp	MoveSprite.w
; ---------------------------------------------------------------------------

loc_7B97E:
		jmp	Go_Delete_Sprite_2.w
; ---------------------------------------------------------------------------

loc_7B984:
		jsr	Run_PalRotationScript.w
		jsr	Animate_RawMultiDelay.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_7B996:
		move.b	#$A,5(a0)
		move.b	#1,(Update_HUD_timer).w
		clr.b	$2A(a0)
		clr.b	$38(a0)
		ori.b	#$50,$38(a0)
		moveq	#Mus_Continue,d0		; was DDZ
		jsr	Play_Sound.w
		lea	ChildObjDat_7D492(pc),a2
		jsr	CreateChild1_Normal.w
		lea	(ArtKosM_HPZMasterEmerald).l,a1
		move.w	#-$5A40,d2
		jmp	Queue_Kos_Module.w
; ---------------------------------------------------------------------------

loc_7B9D2:
		btst	#6,$38(a0)
		bne.s	locret_7B9F8
		move.b	#$C,5(a0)
		lea	byte_7D5EF(pc),a1
		jsr	Set_Raw_Animation.w
		move.b	#$E,$22(a0)
		move.l	#loc_7BA00,$34(a0)

locret_7B9F8:
		rts
; ---------------------------------------------------------------------------

loc_7B9FA:
		jmp	Animate_RawMultiDelay.w
; ---------------------------------------------------------------------------

loc_7BA00:
		move.b	#$E,5(a0)
		move.w	#$3B,$2E(a0)
		bset	#2,$38(a0)
		lea	ChildObjDat_7D486(pc),a2
		btst	#0,4(a0)
		beq.s	loc_7BA22
		lea	ChildObjDat_7D47A(pc),a2

loc_7BA22:
		jmp	CreateChild6_Simple.w
; ---------------------------------------------------------------------------

loc_7BA28:
		moveq	#-$55,d0
		jsr	sub_85E52.w
		subq.w	#1,$2E(a0)
		bmi.s	loc_7BA38
		rts
; ---------------------------------------------------------------------------

loc_7BA38:
		move.b	#$10,5(a0)
		clr.w	(Ctrl_1_logical).w
		st	(Ctrl_1_locked).w
		lea	(Player_1).w,a1
		jsr	Stop_Object.w
		move.w	(Camera_max_X_pos).w,d0
		addi.w	#$140,d0
		move.w	d0,(Camera_max_X_pos).w
		addi.w	#$100,d0
		move.w	d0,(__u_FAB6).w
		move.w	#$600,$18(a0)
		clr.w	$1A(a0)
		jsr	Create_New_Sprite.w
		bne.s	loc_7BA80
		move.l	#loc_7C818,(a1)
		move.w	a1,$44(a0)

loc_7BA80:
		jsr	Create_New_Sprite3.w
		bne.s	locret_7BA8E
		move.l	#loc_7C9E8,(a1)

locret_7BA8E:
		rts
; ---------------------------------------------------------------------------

loc_7BA90:
		jsr	MoveSprite2.w
		move.w	(__u_FAB6).w,d0
		subi.w	#$AA,d0
		cmp.w	$10(a0),d0
		bls.s	loc_7BAA6
		rts
; ---------------------------------------------------------------------------

loc_7BAA6:
		move.b	#$12,5(a0)
		move.l	#loc_7BAD0,$34(a0)
		lea	byte_7D5F6(pc),a1
		jmp	Set_Raw_Animation.w
; ---------------------------------------------------------------------------

loc_7BABE:
		addi.w	#-$30,$18(a0)
		jsr	MoveSprite2.w
		jmp	Animate_RawMultiDelay.w
; ---------------------------------------------------------------------------

loc_7BAD0:
		move.b	#$14,5(a0)
		bclr	#2,$38(a0)
		move.w	#-$400,$1A(a0)
		move.b	#$4B,$1E(a0)
		move.l	#loc_7BB20,$34(a0)
		lea	byte_7D61A(pc),a1
		btst	#0,4(a0)
		beq.s	loc_7BB00
		lea	byte_7D60A(pc),a1

loc_7BB00:
		jmp	Set_Raw_Animation.w
; ---------------------------------------------------------------------------

loc_7BB06:
		jsr	Animate_RawMultiDelayFlipX.w
		jsr	MoveSprite_LightGravity.w
		tst.w	$1A(a0)
		bmi.w	locret_7B448
		jmp	ObjHitFloor_DoRoutine.w
; ---------------------------------------------------------------------------

loc_7BB20:
		move.w	(Camera_min_X_pos).w,d0
		addi.w	#$A0,d0
		move.w	d0,(Camera_min_X_pos).w
		addi.w	#$10,d0
		move.w	d0,(__u_FA82).w
		addi.w	#$50,d0
		move.w	d0,(__u_FA84).w
		addi.w	#$50,d0
		move.w	d0,(__u_FA86).w
		addi.w	#$40,d0
		move.w	d0,(__u_FA88).w
		addi.w	#$40,d0
		move.w	d0,(__u_FA8A).w
		addi.w	#$50*2,d0
		move.b	#$16,5(a0)
		move.l	#loc_7BBC6,$34(a0)
		lea	byte_7D5AB(pc),a1
		jsr	Set_Raw_Animation.w

loc_7BB7C:
		clr.b	$38(a0)
		bset	#7,$38(a0)
		moveq	#-$6A,d0
		jsr	Play_Sound_2.w
		lea	(word_7D9EA).l,a1
		bsr.w	sub_7C678
		lea	ChildObjDat_7D48C(pc),a2
		jsr	CreateChild6_Simple.w
		bne.s	locret_7BBAA
		move.b	#8,$2C(a1)

locret_7BBAA:
		rts
; ---------------------------------------------------------------------------

loc_7BBAC:
		moveq	#-$5C,d0
		jsr	sub_85E52.w
		jsr	Run_PalRotationScript.w
		bchg	#6,(__u_FAB8).w
		jmp	Animate_RawMultiDelay.w
; ---------------------------------------------------------------------------

loc_7BBC6:
		move.b	#$18,5(a0)
		lea	(Player_1).w,a1
		clr.b	$2A(a1)
		clr.b	$3D(a1)
		move.w	#$782,$3E(a1)
		rts
; ---------------------------------------------------------------------------

loc_7BBE0:
	illegal
; ---------------------------------------------------------------------------

loc_7BC32:
		subq.w	#1,$2E(a0)
		bmi.s	loc_7BC3E
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_7BC3E:
		move.l	#Obj_Wait,(a0)
		move.w	#$1F,$2E(a0)
		move.l	#loc_7BC70,$34(a0)
		bclr	#7,4(a0)
		moveq	#-$1F,d0
		jsr	Play_Sound.w
		addi.w	#$20,$14(a0)
		lea	ChildObjDat_7D4CA(pc),a2
		jmp	CreateChild6_Simple.w
; ---------------------------------------------------------------------------

loc_7BC70:
		move.l	#loc_7BCB0,(a0)
		bset	#5,$38(a0)
		clr.w	$3A(a0)
		move.b	#4,$39(a0)
		lea	(Normal_palette).w,a1
		lea	(Target_palette).w,a2
		moveq	#$1F,d6

loc_7BC90:
		move.l	(a1)+,(a2)+
		dbf	d6,loc_7BC90
		jsr	Create_New_Sprite.w
		bne.s	locret_7BCAE
		move.w	a1,$44(a0)
		move.l	#loc_85E64,(a1)
		move.w	#7,$3A(a1)

locret_7BCAE:
		rts
; ---------------------------------------------------------------------------

loc_7BCB0:
		bsr.w	sub_7BD30
		movea.w	$44(a0),a1
		btst	#7,$2A(a1)
		beq.w	locret_7B448
		move.l	#loc_7BCFC,(a0)
		move.w	#$77,$2E(a0)
		st	(__u_FAA2).w
		st	(ScrEvents_1+$1).w
		lea	(Player_1).w,a1
		move.b	#-$7D,$2E(a1)
		clr.b	$22(a1)
		bclr	#3,$2A(a1)
		clr.b	$40(a1)
		clr.b	$3D(a1)

locret_7BD4A:
		rts
; ---------------------------------------------------------------------------

loc_7BCFC:
		jmp	Delete_Current_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_7BD30:

		subq.w	#1,$3A(a0)
		bpl.s	locret_7BD4A
		move.w	#$1F,$3A(a0)
		subq.b	#1,$39(a0)
		bmi.s	locret_7BD4A
		moveq	#$4E,d0
		jmp	Play_Sound_2.w

; ---------------------------------------------------------------------------

sub_7C678:

		lea	(PalRotation_Data).w,a2
		move.l	(a1)+,(a2)+
		move.l	(a1)+,(a2)+
		clr.w	(a2)
		rts
; End of function sub_7C678

; ---------------------------------------------------------------------------

loc_7C726:
		lea	ObjDat3_7D444(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_7C738,(a0)
		bsr.w	sub_7D162

loc_7C738:
		jsr	MoveSprite2.w
		jmp	Sprite_CheckDeleteTouchXY.w
; ---------------------------------------------------------------------------

loc_7C744:
		lea	ObjDat3_7D438(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_7C756,(a0)
		bsr.w	sub_7D192

loc_7C756:
		jsr	Animate_Raw.w
		jsr	Refresh_ChildPositionAdjusted.w
		jmp	Child_DrawTouch_Sprite.w
; ---------------------------------------------------------------------------

loc_7C764:
		move.l	#loc_7C77A,(a0)
		moveq	#$54,d0
		jsr	Play_Sound_2.w
		moveq	#2,d5
		jmp	(loc_861C0).l
; ---------------------------------------------------------------------------

loc_7C77A:
		lea	byte_7D6A3(pc),a1
		jsr	Animate_RawNoSST.w
		jsr	MoveSprite2.w
		jmp	Sprite_CheckDeleteTouchXY.w
; ---------------------------------------------------------------------------

loc_7C78E:
		lea	ObjDat3_7D426(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_7C79C,(a0)

loc_7C79C:
		lea	byte_7D67B(pc),a1
		jsr	Animate_RawNoSST.w
		jsr	Refresh_ChildPositionAdjusted.w
		movea.w	$46(a0),a1
		btst	#6,$38(a1)
		beq.w	loc_7C8F8
		cmpi.b	#$12,$22(a1)
		bne.w	locret_7B448
		btst	#0,(V_int_run_count+3).w
		lea	byte_7D4A2(pc),a2
		jsr	CreateChild6_Simple.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_7C7D4:
		lea	word_7D432(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_7C80A,(a0)
		move.l	#Go_Delete_Sprite,$34(a0)
		jsr	Random_Number.w
		andi.w	#$1F,d0
		subi.w	#$F,d0
		add.w	d0,$10(a0)
		swap	d0
		andi.w	#$1F,d0
		subi.w	#$F,d0
		add.w	d0,$14(a0)

loc_7C80A:
		lea	byte_7D683(pc),a1
		jsr	Animate_RawNoSSTMultiDelay.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_7C818:

		lea	ObjDat3_7D450(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.w	(Camera_max_X_pos).w,d0
		addi.w	#$100,d0
		move.w	d0,$10(a0)
		move.w	(Camera_Y_pos).w,d0
		addi.w	#$A8,d0
		move.w	d0,$14(a0)
		move.l	#loc_7C864,(a0)
		lea	(Collected_emeralds_array).w,a1
		moveq	#3,d0
		moveq	#6,d1

loc_7C846:
		cmp.b	(a1)+,d0
		bne.s	locret_7C854
		dbf	d1,loc_7C846
		move.l	#loc_7C856,(a0)

locret_7C854:
		rts
; ---------------------------------------------------------------------------

loc_7C856:
		lea	off_7DD5A(pc),a1
		lea	(Normal_palette_line_3+$1C).w,a2
		jsr	(Run_PalRotationScript2).l

loc_7C864:
		move.b	#0,$22(a0)
		btst	#6,(__u_FAB8).w
		beq.s	loc_7C878
		move.b	#1,$22(a0)

loc_7C878:
		tst.b	(__u_FAA2).w
		bne.w	loc_7C8F8
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_7C886:
		lea	ObjDat3_7D41A(pc),a1
		jsr	SetUp_ObjAttributes.w
		movea.w	$46(a0),a1
		btst	#2,4(a1)
		bne.s	loc_7C8A0
		bclr	#2,4(a0)

loc_7C8A0:
		move.l	#loc_7C8BA,(a0)
		move.l	#byte_7D668,$30(a0)
		move.l	#loc_7C8C4,$34(a0)
		jsr	Refresh_ChildPositionAdjusted.w

loc_7C8BA:
		jsr	Animate_RawMultiDelay.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_7C8C4:
		move.l	#loc_7C8D6,(a0)
		movea.w	$46(a0),a1
		bclr	#6,$38(a1)
		rts
; ---------------------------------------------------------------------------

loc_7C8D6:
		move.b	#-7,$42(a0)
		move.b	#3,$43(a0)
		jsr	Refresh_ChildPositionAdjusted.w
		movea.w	$46(a0),a1
		cmpi.b	#$E,$22(a1)
		bne.s	loc_7C8F8
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_7C8F8:

		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_7C8FE:
		addq.b	#4,$2C(a0)

loc_7C902:

		lea	ObjDat3_7D402(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_7C91C,(a0)
		bsr.w	sub_7D236
		moveq	#$3C,d0
		jsr	Play_Sound_2.w

loc_7C91C:
		lea	byte_7D65F(pc),a1
		jsr	Animate_RawNoSSTMultiDelay.w
		jsr	Refresh_ChildPositionAdjusted.w
		movea.w	$46(a0),a1
		btst	#7,$2A(a1)
		bne.s	loc_7C942
		btst	#2,$38(a1)
		beq.s	loc_7C942
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_7C942:

		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------

Obj_MetalSonic_Sparks:
		lea	ObjDat3_7D40E(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_7C964,(a0)
		bclr	#7,$2C(a0)
		beq.s	loc_7C964
		bclr	#2,4(a0)

loc_7C964:

		movea.w	$46(a0),a1
		btst	#6,$38(a1)
		bne.w	loc_7C8F8
		cmpi.w	#$E88,(Normal_palette_line_2+$12).w
		bne.w	locret_7B448
		moveq	#$5C,d0
		jsr	Play_Sound_2.w
		moveq	#0,d0
		bchg	#0,$39(a0)
		bne.s	loc_7C990
		moveq	#4,d0

loc_7C990:
		add.b	$2C(a0),d0
		lea	word_7C9AA(pc,d0.w),a2
		move.w	(a2)+,$42(a0)
		move.b	(a2)+,$22(a0)
		jsr	Refresh_ChildPositionAdjusted.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
word_7C9AA:	dc.w $FC0C
		dc.b 4
		dc.w 0
		dc.b 8
		dc.w $500
		dc.b 8
		dc.w $406
		dc.b 0
		dc.w $804
		dc.b 7
		dc.b 0
; ---------------------------------------------------------------------------

loc_7C9BA:
		lea	word_7D3FC(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_7C9C8,(a0)

loc_7C9C8:
		bsr.w	sub_7D260
		jsr	Refresh_ChildPositionAdjusted.w
		movea.w	$46(a0),a1
		btst	#7,$2A(a1)
		bne.s	loc_7C9E2
		jmp	Add_SpriteToCollisionResponseList.w
; ---------------------------------------------------------------------------

loc_7C9E2:
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------

loc_7C9E8:
		move.b	#1,(Scroll_lock).w
		move.l	#loc_7C9F6,(a0)
		rts
; ---------------------------------------------------------------------------

loc_7C9F6:
		bsr.w	sub_7D150
		move.w	(Camera_X_pos).w,d0
		move.w	$18(a0),d1
		move.w	(Camera_max_X_pos).w,d2
		addq.w	#6,d0
		cmp.w	d2,d0
		bhs.s	loc_7CA12
		move.w	d0,(Camera_X_pos).w
		rts
; ---------------------------------------------------------------------------

loc_7CA12:
		move.w	d2,(Camera_X_pos).w
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

Obj_B2_2:
		move.l	#loc_7CA3A,(a0)
		move.w	(Camera_min_X_pos).w,(Camera_max_X_pos).w
		lea	PLC_7CA32(pc),a1
		jmp	Load_PLC_Raw.w
; ---------------------------------------------------------------------------
PLC_7CA32:	dc.w 0
		dc.l ArtNem_RobotnikShip
		dc.w $A5C0
; ---------------------------------------------------------------------------

loc_7CA3A:
		lea	(Player_1).w,a1
		btst	#1,$2A(a1)
		beq.w	locret_7B448
		move.l	#loc_7CAAA,(a0)
		lea	(ObjDat3_664EE).l,a1
		jsr	SetUp_ObjAttributes.w
		move.w	#-$80,$18(a0)
		jsr	Swing_Setup1.w
		jsr	Create_New_Sprite.w
		bne.s	loc_7CA78
		move.l	#Obj_Song_Fade_Transition,(a1)
		move.b	#Mus_Boss,$2C(a1)

loc_7CA78:
		lea	(Child1_MakeRoboHead4).l,a2
		jsr	CreateChild1_Normal.w
		lea	ChildObjDat_7D4BC(pc),a2
		jsr	CreateChild1_Normal.w
		lea	(Child1_MakeRoboShipFlame).l,a2
		jsr	CreateChild1_Normal.w
		lea	(ArtKosM_KnuxFinalBossCrane).l,a1
		move.w	#$94E0,d2
		jsr	Queue_Kos_Module.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_7CAAA:
		jsr	Swing_UpAndDown.w
		jsr	MoveSprite2.w
		cmpi.w	#$120,$10(a0)
		bhs.s	loc_7CACC
		move.l	#loc_7CAD2,(a0)
		clr.w	$18(a0)
		bset	#0,(__u_FAB8).w

loc_7CACC:
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_7CAD2:
		btst	#1,(__u_FAB8).w
		beq.s	loc_7CAE6
		move.l	#loc_7CAE6,(a0)
		move.w	#-$80,$18(a0)

loc_7CAE6:

		btst	#2,(__u_FAB8).w
		beq.s	loc_7CAF8
		move.l	#loc_7CAF8,(a0)
		clr.w	$18(a0)

loc_7CAF8:

		btst	#3,(__u_FAB8).w
		beq.s	loc_7CB18
		move.l	#loc_7CB28,(a0)
		move.w	#$80,$18(a0)
		bset	#0,4(a0)
		bclr	#0,(Player_1+$4).w

loc_7CB18:
		jsr	Swing_UpAndDown.w
		jsr	MoveSprite2.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_7CB28:
		jsr	Swing_UpAndDown.w
		jsr	MoveSprite2.w
		cmpi.w	#$120,$10(a0)
		blo.s	loc_7CB5E
		move.l	#loc_7CB64,(a0)
		clr.w	$18(a0)
		move.w	#$3B,$2E(a0)
		jsr	Create_New_Sprite.w
		bne.s	loc_7CB5E
		move.l	#Obj_Song_Fade_Transition,(a1)
		move.b	#Mus_FinalBoss,$2C(a1)

loc_7CB5E:

		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_7CB64:
		subq.w	#1,$2E(a0)
		bne.s	loc_7CB94
		move.l	#loc_7CBA4,(a0)
		st	(Scroll_lock).w
		jsr	Create_New_Sprite.w
		bne.s	loc_7CB82
		move.l	#loc_7D11C,(a1)

loc_7CB82:
		jsr	Create_New_Sprite.w
		bne.s	loc_7CB90
		move.l	#Obj_A3_2,(a1)

loc_7CB90:
		move.w	a1,(__u_FAA4).w

loc_7CB94:
		jsr	Swing_UpAndDown.w
		jsr	MoveSprite2.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_7CBA4:
		movea.w	(__u_FAA4).w,a1
		lea	word_7CC16(pc),a2
		jsr	(Check_InMyRange).l
		beq.s	loc_7CBCE
		move.l	#loc_7CBCE,(a0)
		jsr	Create_New_Sprite.w
		bne.s	loc_7CBC8
		move.l	#loc_7CC3A,(a1)

loc_7CBC8:
		bset	#5,(__u_FAB8).w

loc_7CBCE:

		jsr	Swing_UpAndDown.w
		jsr	MoveSprite2.w
		movea.w	(__u_FAA4).w,a1
		lea	word_7CC1E(pc),a2
		jsr	(Check_InMyRange).l
		beq.s	loc_7CC10
		move.l	#Wait_Draw,(a0)
		move.w	#prio(1),8(a0)
		move.w	#$3F,$2E(a0)
		move.l	#loc_7CC26,$34(a0)
		lea	Child6_CreateBossExplosion.w,a2
		jsr	CreateChild6_Simple.w

loc_7CC10:
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
word_7CC16:	dc.w  $FFE0,   $40,	0,   $78
word_7CC1E:	dc.w  $FFE0,   $40,	0,   $30
; ---------------------------------------------------------------------------

loc_7CC26:
		lea	word_7D4C4(pc),a2
		jsr	CreateChild6_Simple.w
		ori.b	#$30,$38(a0)
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------

loc_7CC3A:
		move.l	#loc_7CC68,(a0)
		lea	(Player_1).w,a1
		move.w	$10(a1),$10(a0)
		move.w	$14(a1),$14(a0)
		move.b	#-$40,$22(a1)
		move.w	#$400,$18(a0)
		move.w	#$80,$1A(a0)
		jsr	Player_Load_PLC.w

loc_7CC68:
		jsr	MoveSprite2.w
		lea	(Player_1).w,a1
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		move.w	$10(a0),d0
		cmp.w	(__u_FAB6).w,d0
		blo.w	locret_7B448
		move.l	#loc_7CCB0,(a0)
		move.w	#6,$2E(a0)
		clr.w	$18(a0)
		clr.w	$1A(a0)
		move.b	#$13,$1E(a0)
		move.b	#-$36,$22(a1)
		jmp	Player_Load_PLC.w
; ---------------------------------------------------------------------------

loc_7CCB0:
		subq.w	#1,$2E(a0)
		bne.s	loc_7CCC6
		lea	(Player_1).w,a1
		move.b	#-$35,$22(a1)
		jsr	Player_Load_PLC.w

loc_7CCC6:
		jsr	MoveSprite.w
		lea	(Player_1).w,a1
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		jsr	ObjCheckFloorDist.w
		tst.w	d1
		bpl.w	locret_7B448
		lea	(Player_1).w,a1
		add.w	d1,$14(a1)
		clr.b	$2E(a1)
		jsr	Stop_Object.w
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_7CCFE:
		lea	(ObjDat3_664FA).l,a1
		jsr	SetUp_ObjAttributes.w
		move.w	#prio(0),8(a0)
		move.l	#loc_7CD22,(a0)
		lea	(ChildObjDat_66610).l,a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_7CD22:
		btst	#0,(__u_FAB8).w
		bne.s	loc_7CD36
		jsr	Refresh_ChildPositionAdjusted.w
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_7CD36:
		move.l	#loc_7CD42,(a0)
		move.b	$43(a0),$3A(a0)

loc_7CD42:
		lea	(Player_1).w,a1
		move.w	$14(a1),d0
		subi.w	#$10,d0
		cmp.w	$14(a0),d0
		bls.s	loc_7CD76
		move.b	$1A(a0),d0
		addi.b	#1,d0
		move.b	d0,$1A(a0)
		move.b	$3A(a0),d1
		add.b	d0,d1
		move.b	d1,$43(a0)
		jsr	Refresh_ChildPositionAdjusted.w
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_7CD76:
		move.l	#loc_7CD82,(a0)
		bset	#1,(__u_FAB8).w

loc_7CD82:
		move.b	$3A(a0),d0
		ext.w	d0
		movea.w	$46(a0),a1
		move.w	$14(a1),d1
		add.w	d0,d1
		lea	(Player_1).w,a1
		move.w	$14(a1),d2
		subi.w	#$10,d2
		sub.w	d1,d2
		bpl.s	loc_7CDA4
		moveq	#0,d2

loc_7CDA4:
		move.b	d2,$1A(a0)
		add.b	d2,d0
		bpl.s	loc_7CDB0
		move.b	#$7F,d0

loc_7CDB0:
		move.b	d0,$43(a0)
		move.w	$10(a0),d0
		cmpi.w	#8,d0
		bls.s	loc_7CDD2
		move.w	$10(a1),d1
		subi.w	#$C,d0
		cmp.w	d0,d1
		blo.s	loc_7CE12
		addi.w	#$18,d0
		cmp.w	d0,d1
		bhs.s	loc_7CE12

loc_7CDD2:
		move.l	#loc_7CE1E,(a0)
		bset	#2,(__u_FAB8).w
		move.b	#2,$22(a0)
		move.b	#-$7D,$2E(a1)
		move.b	#-$35,$22(a1)
		bset	#0,4(a1)
		bclr	#3,$2A(a1)
		clr.b	$40(a1)
		clr.b	$3D(a1)
		jsr	Player_Load_PLC.w
		moveq	#$4A,d0
		jsr	Play_Sound_2.w

loc_7CE12:

		jsr	Refresh_ChildPositionAdjusted.w
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_7CE1E:
		move.b	$1A(a0),d0
		subq.b	#1,d0
		bpl.s	loc_7CE34
		move.l	#loc_7CE42,(a0)
		bset	#3,(__u_FAB8).w
		moveq	#0,d0

loc_7CE34:
		move.b	d0,$1A(a0)
		move.b	$3A(a0),d1
		add.b	d0,d1
		move.b	d1,$43(a0)

loc_7CE42:
		jsr	Refresh_ChildPositionAdjusted.w
		btst	#5,(__u_FAB8).w
		bne.s	loc_7CE66
		lea	(Player_1).w,a1
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),d0
		addi.w	#$16,d0
		move.w	d0,$14(a1)

loc_7CE66:
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_7CE6C:
		lea	ObjDat3_7D45C(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#Obj_FlickerMove,(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		lsr.w	#1,d0
		move.b	d0,$22(a0)
		moveq	#8,d0
		jmp	Set_IndexedVelocity.w
; ---------------------------------------------------------------------------

loc_7CE90:
		lea	ObjDat3_7D468(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_7CF02,(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		lea	byte_7CEE2(pc,d0.w),a1
		move.b	(a1)+,d1
		ext.w	d1
		movea.w	$46(a0),a2
		btst	#0,4(a2)
		beq.s	loc_7CEC2
		neg.w	d2
		bset	#0,4(a0)

loc_7CEC2:
		add.w	d1,$10(a0)
		move.b	(a1)+,d2
		ext.w	d2
		add.w	d2,$14(a0)
		asl.w	#5,d1
		move.w	d1,$18(a0)
		asl.w	#4,d2
		move.w	d2,$1A(a0)
		lsr.w	#1,d0
		move.b	d0,$22(a0)
		rts
; ---------------------------------------------------------------------------
byte_7CEE2:	dc.b  $EC, $DC
		dc.b  $F4, $D8
		dc.b  $F4, $E8
		dc.b  $FC, $D8
		dc.b  $FC, $E8
		dc.b	4, $D8
		dc.b	4, $E8
		dc.b   $C, $D8
		dc.b   $C, $E8
		dc.b  $14, $E0
		dc.b  $14, $F0
		dc.b  $EC, $FC
		dc.b  $F4, $F8
		dc.b  $FC, $F8
		dc.b	4, $F8
		dc.b   $C, $F8
; ---------------------------------------------------------------------------

loc_7CF02:
		tst.b	(__u_FAA2).w
		bne.s	loc_7CF0E
		jmp	Obj_FlickerMove.w
; ---------------------------------------------------------------------------

loc_7CF0E:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_7CF14:
		move.b	$2C(a0),d0
		subq.b	#2,d0
		bpl.s	loc_7CF4E
		move.w	(Camera_X_pos).w,d0
		addi.w	#$A0,d0
		move.w	d0,$10(a0)
		move.w	(Camera_Y_pos).w,d0
		addi.w	#$D0,d0
		move.w	d0,$14(a0)
		lea	Child6_CreateBossExplosion.w,a2
		jsr	CreateChild6_Simple.w
		bne.s	loc_7CF48
		move.b	#$C,$2C(a1)

loc_7CF48:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_7CF4E:
		move.l	#loc_7CF7C,(a0)
		addi.w	#$30,$14(a0)
		moveq	#2,d1
		tst.b	d0
		bne.s	loc_7CF62
		neg.w	d1

loc_7CF62:
		move.w	d1,$18(a0)
		lea	Child6_CreateBossExplosion.w,a2
		jsr	CreateChild6_Simple.w
		bne.s	locret_7CF7A
		move.b	#$1E,$2C(a1)

locret_7CF7A:
		rts
; ---------------------------------------------------------------------------

loc_7CF7C:
		move.w	$18(a0),d0
		move.w	$10(a0),d1
		add.w	d0,d1
		move.w	d1,$10(a0)
		move.w	(Camera_X_pos).w,d0
		subi.w	#$10,d0
		cmp.w	d0,d1
		blo.w	loc_7C8F8
		addi.w	#$160,d0
		cmp.w	d0,d1
		bhi.w	loc_7C8F8
		rts
; ---------------------------------------------------------------------------

Obj_Difficulty_7CFA4:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_7CFC2(pc,d0.w),d1
		jsr	off_7CFC2(pc,d1.w)
		lea	DPLCPtr_7D4D6(pc),a2
		jsr	Perform_DPLC.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
off_7CFC2:	dc.w loc_7CFC6-off_7CFC2

		dc.w locret_7CFEE-off_7CFC2
; ---------------------------------------------------------------------------

loc_7CFC6:
		lea	ObjDat4_7D3EA(pc),a1
		jsr	SetUp_ObjAttributesSlotted.w
		move.w	#$43F4,$A(a0)
		bclr	#2,4(a0)
		bset	#0,4(a0)
		move.w	#$D8,$10(a0)
		move.w	#$104,$14(a0)

locret_7CFEE:
		rts
; ---------------------------------------------------------------------------

Obj_Difficulty_7CFF0:
		move.l	#Map_SSZMasterEmerald,$C(a0)
		move.w	#$61EE,$A(a0)
		move.w	#prio(5),8(a0)
		move.b	#$20,7(a0)
		move.b	#$18,6(a0)
		move.b	#2,$22(a0)
		move.w	#$120,$10(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	word_7D03E(pc,d0.w),$14(a0)
		move.l	#loc_7D042,(a0)
		cmpi.b	#7,(Super_emerald_count).w
		beq.s	locret_7D03C
		move.l	#loc_7D050,(a0)

locret_7D03C:
		rts
; ---------------------------------------------------------------------------
word_7D03E:	dc.w $F0
		dc.w $120
; ---------------------------------------------------------------------------

loc_7D042:
		lea	off_7DD5A(pc),a1
		lea	(Normal_palette_line_4+$1C).w,a2
		jsr	(Run_PalRotationScript2).l

loc_7D050:
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_7D056:
		move.l	#loc_7D062,(a0)
		move.w	#$77,$2E(a0)

loc_7D062:
		moveq	#2,d0
		jsr	(sub_868F8).l
		tst.b	5(a0)
		beq.s	locret_7D076
		move.l	#loc_7D078,(a0)

locret_7D076:
		rts
; ---------------------------------------------------------------------------

loc_7D078:
		jsr	(Check_TailsEndPose).l
		tst.b	(End_Of_Level_Flag).w
		bne.s	locret_7D076
		jsr	Restore_PlayerControl.w
		lea	(Player_2).w,a1
		jsr	Restore_PlayerControl2.w
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_7D09C:
		move.b	#2,$39(a0)
		move.l	#loc_7D0A8,(a0)

loc_7D0A8:
		subq.w	#1,$2E(a0)
		bpl.s	locret_7D0CA
		move.w	#5,$2E(a0)
		lea	(Normal_palette).w,a1
		moveq	#$3F,d0

loc_7D0BA:
		jsr	(sub_85EB4).l
		dbf	d0,loc_7D0BA
		subq.b	#1,$39(a0)
		bmi.s	loc_7D0CC

locret_7D0CA:

		rts
; ---------------------------------------------------------------------------

loc_7D0CC:
		move.l	#loc_7D0E0,(a0)
		move.b	#2,$39(a0)
		move.w	#$1D,$2E(a0)
		rts
; ---------------------------------------------------------------------------

loc_7D0E0:
		subq.w	#1,$2E(a0)
		bpl.s	locret_7D0CA
		move.w	#3,$2E(a0)
		lea	(Normal_palette).w,a1
		lea	(Target_palette).w,a2
		moveq	#$3F,d0

loc_7D0F6:
		jsr	(sub_85F2A).l
		dbf	d0,loc_7D0F6
		subq.b	#1,$39(a0)
		bpl.s	locret_7D0CA
		lea	(Target_palette).w,a1
		lea	(Normal_palette).w,a2
		moveq	#$1F,d6

loc_7D110:
		move.l	(a1)+,(a2)+
		dbf	d6,loc_7D110
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------

loc_7D11C:
		move.w	#$100,d0
		cmp.w	(Camera_X_pos).w,d0
		bls.s	loc_7D134
		addq.w	#1,(Camera_X_pos).w
		addq.w	#1,(Camera_min_X_pos).w
		addq.w	#1,(Camera_max_X_pos).w
		rts
; ---------------------------------------------------------------------------

loc_7D134:
		move.w	d0,(Camera_X_pos).w
		move.w	d0,(Camera_min_X_pos).w
		move.w	d0,(Camera_max_X_pos).w
		clr.b	(Scroll_lock).w
		bset	#4,(__u_FAB8).w
		jmp	Delete_Current_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_7D150:

		lea	(Player_1).w,a1
		clr.w	$18(a1)
		clr.w	$1A(a1)
		clr.w	$1C(a1)
		rts
; End of function sub_7D150


; =============== S U B R O U T I N E =======================================


sub_7D162:
		moveq	#0,d0
		move.b	$2C(a0),d0
		add.w	d0,d0
		move.l	word_7D172(pc,d0.w),$18(a0)
		rts
; End of function sub_7D162

; ---------------------------------------------------------------------------
word_7D172:	dc.w	  0,  $400
		dc.w   $2D4,  $2D4
		dc.w   $400,	 0
		dc.w   $2D4, $FD2C
		dc.w	  0, $FC00
		dc.w  $FD2C, $FD2C
		dc.w  $FC00,	 0
		dc.w  $FD2C,  $2D4

; =============== S U B R O U T I N E =======================================


sub_7D192:
		moveq	#0,d0
		move.b	$2C(a0),d0
		lea	off_7D1A6(pc,d0.w),a1
		move.l	(a1)+,$30(a0)
		move.l	(a1)+,$34(a0)
		rts
; End of function sub_7D192

; ---------------------------------------------------------------------------
off_7D1A6:	dc.l byte_7D68C
		dc.l loc_7C764
		dc.l byte_7D6B3
		dc.l Go_Delete_Sprite

; =============== S U B R O U T I N E =======================================


sub_7D1B6:
		bsr.w	sub_7D1EA
		moveq	#0,d0
		move.b	$42(a0),d0
		lsl.w	#2,d0
		lea	loc_7D1CE(pc,d0.w),a1

loc_7D1C6:
		move.b	(a1)+,d1
		beq.s	locret_7D1D0
		cmp.b	d1,d2
		bne.s	loc_7D1C6

loc_7D1CE:
		moveq	#1,d0

locret_7D1D0:
		rts
; End of function sub_7D1B6

; ---------------------------------------------------------------------------
		dc.b 1
		dc.b 0
		dc.b 0
		dc.b 0
		dc.b 1
		dc.b 2
		dc.b 0
		dc.b 0
		dc.b 1
		dc.b 2
		dc.b 3
		dc.b 0
		dc.b 4
		dc.b 5
		dc.b 6
		dc.b 0
		dc.b 5
		dc.b 6
		dc.b 0
		dc.b 0
		dc.b 6
		dc.b 0
		dc.b 0
		dc.b 0

; =============== S U B R O U T I N E =======================================


sub_7D1EA:
		move.w	(Player_1+x_pos).w,d0
		sub.w	(Camera_min_X_pos).w,d0
		move.w	d0,d1
		subi.w	#$F0,d1
		scc	d3
		bcc.s	loc_7D202
		moveq	#1,d2
		bra.w	loc_7D204
; ---------------------------------------------------------------------------

loc_7D202:
		moveq	#4,d2

loc_7D204:
		cmpi.w	#$50,d0
		blo.s	locret_7D214
		addq.w	#1,d2
		cmpi.w	#$A0,d0
		blo.s	locret_7D214
		addq.w	#1,d2

locret_7D214:

		rts
; End of function sub_7D1EA

; ---------------------------------------------------------------------------

loc_7D216:

		tst.w	$18(a0)
		bmi.s	loc_7D228
		move.w	(__u_FAB6).w,d0
		cmp.w	$10(a0),d0
		bls.s	loc_7D234
		rts
; ---------------------------------------------------------------------------

loc_7D228:
		move.w	(__u_FAB4).w,d0
		cmp.w	$10(a0),d0
		bhs.s	loc_7D234
		rts
; ---------------------------------------------------------------------------

loc_7D234:

		jmp	(a1)

; =============== S U B R O U T I N E =======================================


sub_7D236:
		moveq	#0,d0
		move.b	$2C(a0),d0
		add.w	d0,d0
		lea	word_7D24C(pc,d0.w),a1
		move.w	(a1)+,$42(a0)
		move.w	(a1)+,8(a0)
		rts
; End of function sub_7D236

; ---------------------------------------------------------------------------
word_7D24C:	dc.w  $FC1C,  prio(6)
		dc.w   $81C,  prio(5)
		dc.w  $F81C,  prio(5)
		dc.w   $41C,  prio(6)
		dc.w   $C0C,  prio(5)

; =============== S U B R O U T I N E =======================================


sub_7D260:
		lea	word_7D280(pc),a1
		movea.w	$46(a0),a2
		moveq	#0,d0
		move.b	$22(a2),d0
		lsl.w	#2,d0
		adda.w	d0,a1
		move.w	(a1)+,$42(a0)
		move.b	(a1)+,$28(a0)
		move.b	(a1)+,$22(a0)
		rts
; End of function sub_7D260

; ---------------------------------------------------------------------------
word_7D280:	dc.w $10F4
		dc.b $B4
		dc.b 2
		dc.w $10FC
		dc.b $B4
		dc.b 2
		dc.w $1000
		dc.b $B4
		dc.b 2
		dc.w 0
		dc.b 0
		dc.b 0
		dc.w 0
		dc.b 0
		dc.b 0
		dc.w 0
		dc.b 0
		dc.b 0
		dc.w 0
		dc.b 0
		dc.b 0
		dc.w $14F8
		dc.b $9E
		dc.b 1
		dc.w $10F4
		dc.b $9E
		dc.b 1
		dc.w $CEC
		dc.b $98
		dc.b 0
		dc.w $EC
		dc.b $B3
		dc.b 8
		dc.w $F4EC
		dc.b $98
		dc.b 0
		dc.w $F0F4
		dc.b $B4
		dc.b 2
		dc.w $10F4
		dc.b $B4
		dc.b 2
		dc.w $1004
		dc.b $B4
		dc.b 2
		dc.w $140C
		dc.b $B4
		dc.b 2
		dc.w $1705
		dc.b $B4
		dc.b 2
		dc.w $10F4
		dc.b $B4
		dc.b 2
		dc.w $CF4
		dc.b $9E
		dc.b 1
		dc.w $10F4
		dc.b $B4
		dc.b 2
		dc.w $10F4
		dc.b $B4
		dc.b 2
		dc.w $10F4
		dc.b $B4
		dc.b 2

; =============== S U B R O U T I N E =======================================


sub_7D2D8:

		btst	#6,$2A(a0)
		bne.s	locret_7D2FA
		moveq	#0,d0
		move.b	$22(a0),d0
		move.b	byte_7D2FC(pc,d0.w),d0
		btst	#7,$38(a0)
		beq.s	loc_7D2F6
		ori.b	#-$80,d0

loc_7D2F6:
		move.b	d0,$28(a0)

locret_7D2FA:
		rts
; End of function sub_7D2D8

; ---------------------------------------------------------------------------
byte_7D2FC:	dc.b $23
		dc.b $23
		dc.b 9
		dc.b $86
		dc.b $86
		dc.b $86
		dc.b $86
		dc.b $1A
		dc.b $23
		dc.b $23
		dc.b $23
		dc.b $23
		dc.b $23
		dc.b $23
		dc.b 9
		dc.b 0
		dc.b 9
		dc.b $23
		dc.b 6
		dc.b $23
		dc.b $23
		dc.b $23

; =============== S U B R O U T I N E =======================================


sub_7D312:

		tst.b	$28(a0)
		bne.s	locret_7D356
		move.b	$29(a0),d0
		beq.s	loc_7D358
		tst.b	$20(a0)
		bne.s	loc_7D338
		move.b	#$20,$20(a0)
		moveq	#$6E,d0
		jsr	Play_Sound_2.w
		bset	#6,$2A(a0)

loc_7D338:
		moveq	#0,d0
		btst	#0,$20(a0)
		bne.s	loc_7D346
		addi.w	#2*5,d0		; NAT: https://s3unlocked.blogspot.com/2017/07/boss-flash-bloopers.html

loc_7D346:
		bsr.w	sub_7D3BE
		subq.b	#1,$20(a0)
		bne.s	locret_7D356
		bclr	#6,$2A(a0)

locret_7D356:

		rts
; ---------------------------------------------------------------------------

loc_7D358:
		jmp	(a4)
; End of function sub_7D312


; =============== S U B R O U T I N E =======================================


sub_7D35A:

		move.l	#loc_7B81A,(a0)
		clr.b	5(a0)
		move.l	#loc_7B858,$34(a0)
		bset	#6,$2A(a0)
		clr.b	(Update_HUD_timer).w
		move.w	#$7F,$2E(a0)
		moveq	#$64,d0
		jsr	(HUD_AddToScore).l
		bclr	#7,4(a0)
		lea	Child6_CreateBossExplosion.w,a2
		jsr	CreateChild1_Normal.w
		bne.s	locret_7D39C
		move.b	#4,$2C(a1)

locret_7D39C:
		rts
; End of function sub_7D35A

; ---------------------------------------------------------------------------

loc_7D39E:
		bset	#7,$38(a0)
		bsr.s	sub_7D35A
		move.w	(Camera_X_pos).w,d0
		move.w	d0,(Camera_min_X_pos).w
		move.w	d0,(Camera_max_X_pos).w
		lea	(Pal_SSZGHZMisc).l,a1
		jmp	PalLoad_Line1.w

; =============== S U B R O U T I N E =======================================


sub_7D3BE:
		lea	word_7D3CC(pc),a1
		lea	word_7D3D6(pc,d0.w),a2
		jmp	CopyWordData_5.w
; End of function sub_7D3BE

; ---------------------------------------------------------------------------
word_7D3CC:	dc.w $FC28
		dc.w $FC34
		dc.w $FC36
		dc.w $FC38
		dc.w $FC3C
word_7D3D6:	dc.w 8
		dc.w $A24
		dc.w $624
		dc.w $422
		dc.w $20
		dc.w $888
		dc.w $666
		dc.w $888
		dc.w $AAA
		dc.w $EEE
ObjDat4_7D3EA:	dc.w 2

		dc.w $A3F4
		dc.w $28
		dc.w 0
		dc.l Map_MechaSonic
		dc.w prio(5)
		dc.b $20
		dc.b $20
		dc.b 0
		dc.b $23
word_7D3FC:	dc.w prio(1)
		dc.b $10
		dc.b $10
		dc.b 0
		dc.b 0
ObjDat3_7D402:	dc.l Map_MechaSonicExtra
		dc.w $841C
		dc.w prio(4)
		dc.b $C
		dc.b 4
		dc.b 0
		dc.b 0
ObjDat3_7D40E:	dc.l Map_MechaSonicExtra
		dc.w $A41C
		dc.w prio(4)
		dc.b $14
		dc.b $10
		dc.b 4
		dc.b 0
ObjDat3_7D41A:	dc.l Map_MechaSonicExtra
		dc.w $A41C
		dc.w prio(4)
		dc.b 4
		dc.b 4
		dc.b $11
		dc.b 0
ObjDat3_7D426:	dc.l Map_MechaSonicExtra
		dc.w $A41C
		dc.w prio(5)
		dc.b $18
		dc.b $18
		dc.b 8
		dc.b 0
word_7D432:	dc.w prio(5)
		dc.b 4
		dc.b 4
		dc.b 8
		dc.b 0
ObjDat3_7D438:	dc.l Map_MechaSonicExtra
		dc.w $A41C
		dc.w prio(4)
		dc.b $18
		dc.b $18
		dc.b $A
		dc.b $86
ObjDat3_7D444:	dc.l Map_MechaSonicExtra
		dc.w $A41C
		dc.w prio(5)
		dc.b 8
		dc.b 8
		dc.b $15
		dc.b $87
ObjDat3_7D450:	dc.l Map_SSZMasterEmerald

		dc.w $852E
		dc.w prio(6)
		dc.b $20
		dc.b $18
		dc.b 0
		dc.b 0
ObjDat3_7D45C:	dc.l Map_RoboshipPieces
		dc.w $852E
		dc.w prio(0)
		dc.b $1C
		dc.b $20
		dc.b 0
		dc.b 0
ObjDat3_7D468:	dc.l Map_MechaSonicPieces
		dc.w $A3F4
		dc.w prio(0)
		dc.b 4
		dc.b 8
		dc.b 0
		dc.b 0
ChildObjDat_7D474:dc.w 0
		dc.l loc_7C9BA
ChildObjDat_7D47A:dc.w 1

		dc.l loc_7C902
ChildObjDat_7D480:dc.b 0
		dc.b 0
		dc.l loc_7C902
ChildObjDat_7D486:dc.w 1

		dc.l loc_7C8FE
ChildObjDat_7D48C:dc.w 0

		dc.l Obj_MetalSonic_Sparks
ChildObjDat_7D492:dc.w 0

		dc.l loc_7C886
		dc.b $FC
		dc.b $C
ChildObjDat_7D49A:dc.w 0

		dc.l loc_7C78E
		dc.w $14FC
byte_7D4A2:	dc.b 0
		dc.b 0
		dc.l loc_7C7D4
ChildObjDat_7D4A8:dc.w 7
		dc.l loc_7C726
ChildObjDat_7D4AE:dc.b 0
		dc.b 0
		dc.l loc_7C744
		dc.w $F9F8
		dc.w 0
		dc.l loc_7C818
ChildObjDat_7D4BC:dc.w 0
		dc.l loc_7CCFE
		dc.w $23
word_7D4C4:	dc.w 3
		dc.l loc_7CE6C
ChildObjDat_7D4CA:dc.w $F
		dc.l loc_7CE90
ChildObjDat_7D4D0:dc.b 0
		dc.b 2
		dc.l loc_7CF14
DPLCPtr_7D4D6:	dc.l ArtUnc_MechaSonic

		dc.l DPLC_MechaSonic
byte_7D4DE:	dc.b	3,   0
		dc.b	4,   1
		dc.b	5,   2
		dc.b	6,   3
		dc.b	7,   4
		dc.b	8,   5
		dc.b  $F8,  $E
		dc.b	8, $7F
		dc.b  $FC
byte_7D4EF:	dc.b	3,   0
		dc.b	4,   1
		dc.b	5,   2
		dc.b	6,   3
		dc.b	7,   4
		dc.b	8,   4
		dc.b	9,   4
		dc.b   $A,   4
		dc.b   $B,   4
		dc.b   $C,   4
		dc.b  $F8, $16
		dc.b   $C, $7F
		dc.b  $FC
byte_7D508:	dc.b  $13,   5
		dc.b  $13,   5
		dc.b	8, $7F
		dc.b  $F8, $E4
byte_7D510:	dc.b	1,   5
		dc.b	1,   5
		dc.b	2,   9
		dc.b	1,   5
		dc.b  $F4
byte_7D519:	dc.b	3,   1
		dc.b	3,   1
		dc.b	4,   1
		dc.b	5,   1
		dc.b  $F8,  $A
byte_7D523:	dc.b	3,   0
		dc.b	4,   0
		dc.b	5,   0
		dc.b  $FC
byte_7D52A:	dc.b	8,   0
		dc.b	7,   3
		dc.b	6,   3
		dc.b	3,   1
		dc.b	4,   1
		dc.b	5,   1
		dc.b  $F8, $F9
byte_7D538:	dc.b	6,   3
		dc.b	6,   3
		dc.b	7,   3
		dc.b	8, $1F
		dc.b  $F4
byte_7D541:	dc.b	0,   0
		dc.b	1,   5
		dc.b	2,   9
		dc.b	1,   0
		dc.b  $F4
byte_7D54A:	dc.b	1,   0
		dc.b	1,   1
		dc.b	3,   1
		dc.b	4,   1
		dc.b	5,   1
		dc.b  $F8, $D9
byte_7D556:	dc.b  $12,   0
		dc.b  $12,   5
		dc.b   $D,   3
		dc.b	8,   5
		dc.b	1,   1
		dc.b  $F4
byte_7D561:	dc.b	1,   3
		dc.b	1,   7
		dc.b	2,   7
		dc.b	1,   3
		dc.b	8,   0
		dc.b  $F4
byte_7D56C:	dc.b	8,   5
		dc.b	8,   5
		dc.b	9,   3
		dc.b   $A,   3
		dc.b   $B,   3
		dc.b   $C,   3
		dc.b  $48, $7F
		dc.b  $F8, $80
byte_7D57C:	dc.b	8,   5
		dc.b  $13,   5
		dc.b  $14, $7F
		dc.b  $F8,   8
		dc.b  $15, $7F
		dc.b  $FC
byte_7D587:	dc.b	1,   5
		dc.b	1,   5
		dc.b  $10,  $F
		dc.b	1,   5
		dc.b  $11, $17
		dc.b	0,   5
		dc.b	8,   3
		dc.b  $F4
byte_7D596:	dc.b	1,   5
		dc.b	2, $1F
		dc.b  $F4
byte_7D59B:	dc.b	2,   0
		dc.b	1,   5
		dc.b	0, $3F
		dc.b  $F4
byte_7D5A2:	dc.b	1,   5
		dc.b	2,   9
		dc.b	1,   5
		dc.b	0, $3F
		dc.b  $F4
byte_7D5AB:	dc.b	1,   5

		dc.b	1,   5
		dc.b	2,   9
		dc.b  $13,   5
		dc.b  $15,   3
		dc.b  $F4
byte_7D5B6:	dc.b	1,   5
		dc.b	1,   5
		dc.b	2,   9
		dc.b  $13,   5
		dc.b  $15, $7F
		dc.b  $F4
byte_7D5C1:	dc.b	3,   1
		dc.b	3,   1
		dc.b	4,   1
		dc.b	5,   1
		dc.b	6,   3
		dc.b	7,   4
		dc.b	8,   3
		dc.b	1,   5
		dc.b	2,   9
		dc.b	1,   5
		dc.b	0,   3
		dc.b  $F4
byte_7D5D8:	dc.b   $C,   3
		dc.b   $C,   3
		dc.b   $A,   3
		dc.b	9,   3
		dc.b	8,   3
		dc.b  $F8, $42
byte_7D5E4:	dc.b   $E,   5
		dc.b   $E,   5
		dc.b   $F,   3
		dc.b  $F8,   8
		dc.b   $F, $7F
		dc.b  $FC
byte_7D5EF:	dc.b   $F,   5

		dc.b   $E,   5
		dc.b	2,   1
		dc.b  $F4
byte_7D5F6:	dc.b	2,   5

		dc.b	2,  $F
		dc.b	1,   5
		dc.b	8,   0
		dc.b  $F4
byte_7D5FF:	dc.b	1,   3
		dc.b	1,   3
		dc.b	2,  $F
		dc.b	1,   3
		dc.b	8,   0
		dc.b  $F4
byte_7D60A:	dc.b	8,   7
		dc.b	8,   7
		dc.b	9,   5
		dc.b   $A,   5
		dc.b   $B,   5
		dc.b   $C,   5
		dc.b  $48, $7F
		dc.b  $F8, $10
byte_7D61A:	dc.b	8, $7F

		dc.b  $FC,   2
		dc.b	5,   2
		dc.b	5,   1
		dc.b	5,   8
		dc.b	0, $F4
byte_7D626:	dc.b	8,   1
		dc.b	8,   1
		dc.b	9,   1
		dc.b   $A,   1
		dc.b   $B,   1
		dc.b   $C,   0
		dc.b  $48, $7F
		dc.b  $F8, $24
byte_7D636:	dc.b	8,   3
		dc.b	8,   3
		dc.b	9,   3
		dc.b   $A,   3
		dc.b   $B,   3
		dc.b   $C,   3
		dc.b  $48,   3
		dc.b  $F4
byte_7D645:	dc.b	8,   3
		dc.b	8,  $F
		dc.b	1,   5
		dc.b  $10,  $F
		dc.b	1,   5
		dc.b  $11,   0
		dc.b  $F4
byte_7D652:	dc.b	8,   1

		dc.b	8,   1
		dc.b   $D,   5
		dc.b  $12, $7F
		dc.b  $F8,  $A
		dc.b  $12, $7F
		dc.b  $FC
byte_7D65F:	dc.b	1,   1
		dc.b	2,   1
		dc.b	3,   1
		dc.b	0,   0
		dc.b  $FC
byte_7D668:	dc.b  $11,   3
		dc.b  $11,   3
		dc.b	0,   3
		dc.b  $11,   3
		dc.b	0,   3
		dc.b  $11,   3
		dc.b  $12, $1B
		dc.b  $13,   5
		dc.b  $14, $3F
		dc.b  $F4
byte_7D67B:	dc.b	0,   0,	  8,   9
		dc.b	0, $17,	$18, $FC
byte_7D683:	dc.b   $E,   1
		dc.b   $E,   1
		dc.b   $F,   2
		dc.b  $10,   3
		dc.b  $F4
byte_7D68C:	dc.b	0,  $A,	 $A,   0
		dc.b   $A,  $B,	  0,  $A
		dc.b   $C,   0,	 $A,  $B
		dc.b	0,  $A,	 $D,   0
		dc.b  $19,  $D,	  0,  $B
		dc.b   $D,   0,	$F4
byte_7D6A3:	dc.b	0,   0,	 $D, $16
		dc.b	0,  $D,	 $C, $16
		dc.b	0,  $D,	$16,   0
		dc.b   $D, $19,	$16, $FC
byte_7D6B3:	dc.b	0,  $B,	 $B,  $D
		dc.b	0,  $B,	 $D,   0
		dc.b   $B,  $D,	  0,  $A
		dc.b   $B,   0,	 $A,  $B
		dc.b	0,  $A,	 $B,   0
		dc.b   $A,   0,	 $A,   0
		dc.b   $A,   0,	 $A,   0
		dc.b   $A,   0,	 $A,   0
		dc.b   $A,   0,	 $A,   0
		dc.b  $F4
Map_RoboshipPieces:	include "Levels/SSZ/Misc Object Data/Map - Robotnik Ship Pieces.asm"

Map_SSZMasterEmerald:	include "Levels/SSZ/Misc Object Data/Map - Master Emerald.asm"

Map_MechaSonicPieces:	include "General/Sprites/Mecha Sonic/Map - Mecha Sonic Pieces.asm"

word_7D842:	dc.w 4

		dc.w 0
		dc.l word_7D84C
		dc.w 0
word_7D84C:	dc.w $FC20
		dc.w $F00
Pal_SSZGHZMisc:	binclude "Levels/SSZ/Palettes/GHZMisc.bin"
	even


word_7D9EA:	dc.w 4
		dc.w 0
		dc.l word_7D9F4
		dc.w 0
word_7D9F4:	dc.w $FC20
		dc.w $F00
		dc.w	  0,  $EEE,   $4E,   $2A,     8,   $EE,	  $88,	   4,  $E88,  $C44,  $A24,  $624,  $422,  $ECC,	  $20,	 $44
		dc.w	  2,	 0,  $EEE,   $8E,   $4E,   $2C,	  $EE,	 $88,	$28,  $EEE,  $EEE,  $E88,  $C66,  $A24,	 $ECC,	$642
		dc.w	$44,	 1,	0,  $EEE,   $4E,   $2A,	    8,	 $EE,	$88,	 4,  $EEE,  $E88,  $C44,  $A24,	 $624,	$ECC
		dc.w   $422,   $44,	0, $FFFC
word_7DA60:	dc.w 4
		dc.w 0
		dc.l word_7DA6A
		dc.w 0
word_7DA6A:	dc.w $FC20
		dc.w $F01
		dc.w	  0,  $EEE,   $4E,   $2A,     8,   $EE,	  $88,	   4,  $EEE,  $E88,  $C44,  $A24,  $624,  $ECC,	 $422,	 $44
		dc.w	  5,	 0,  $EEE,   $8E,   $4E,   $2C,	  $EE,	 $88,	$28,  $EEE,  $EEE,  $E88,  $C66,  $A24,	 $ECC,	$642
		dc.w	$44,	 5,	0,  $EEE,   $8E,   $4E,	  $2C,	 $EE,	$88,   $28,  $EEE,  $EEE,  $EEE,  $EEE,	 $EEE,	$ECC
		dc.w   $642,   $44,   $1D, $FFF8,   $6E, $FC20,	 $F00,	   0,  $EEE,   $4E,   $2A,     8,   $EE,   $88,	    4,	$4EE
		dc.w   $4AE,   $6E,  $24A,  $228,  $ECC,     4,	  $44,	   5,	  0,  $EEE,   $4E,   $2A,     8,   $EE,	  $88,	   4
		dc.w   $2EE,  $2AE,   $6C,  $248,  $226,  $ECC,	    4,	 $44,	  5,	 0,  $EEE,   $4E,   $2A,     8,	  $EE,	 $88
		dc.w	  4,   $EE,   $AE,   $6A,  $246,  $224,	 $ECC,	   2,	$44,	 5,	0,  $EEE,   $4E,   $2A,	    8,	 $EE
		dc.w	$88,	 4,  $2EE,  $2AE,   $6C,  $248,	 $226,	$ECC,	  4,   $44,	5, $FFFC
word_7DB66:	dc.w 4
		dc.w 0
		dc.l word_7DB70
		dc.w 0
word_7DB70:	dc.w $FC20
		dc.w $F01
		dc.w	  0,  $EEE,   $8E,   $4E,   $2C,   $EE,	  $88,	 $28,  $EEE,  $EEE,  $E88,  $C66,  $A24,  $ECC,	 $642,	 $44
		dc.w	  5,	 0,  $EEE,   $4E,   $2A,     8,	  $EE,	 $88,	  4,  $EEE,  $E88,  $C44,  $A24,  $624,	 $ECC,	$422
		dc.w	$44,	 5,	0,  $EEE,   $4E,   $2A,	    8,	 $EE,	$88,	 4,  $E88,  $C44,  $A24,  $624,	 $422,	$ECC
		dc.w	$20,   $44,   $7F, $FFF8,   $6E, $FC20,	 $F00,	   0,  $EEE,   $4E,   $2A,     8,   $EE,   $88,	    4,	$E88
		dc.w   $C44,  $A24,  $624,  $422,  $ECC,   $20,	  $44,	 $7F, $FFFC
word_7DC06:	dc.w 4
		dc.w 0
		dc.l word_7DC10
		dc.w 0
word_7DC10:	dc.w $FC20

		dc.w $F01
		dc.w	  0,  $EEE,   $4E,   $2A,     8,   $EE,	  $88,	   4,  $E88,  $C44,  $A24,  $624,  $422,  $ECC,	  $20,	 $44
		dc.w	  7,	 0,  $EEE,   $8E,   $4E,   $2C,	  $EE,	 $88,	$28,  $EEE,  $EEE,  $E88,  $C66,  $A24,	 $ECC,	$642
		dc.w	$44,	 7,	0,  $EEE,   $4E,   $2A,	    8,	 $EE,	$88,	 4,  $EEE,  $E88,  $C44,  $A24,	 $624,	$ECC
		dc.w   $422,   $44,	7, $FFF8, $FEC8
word_7DC7E:	dc.w 4
		dc.w 0
		dc.l word_7DC88
		dc.w 0
word_7DC88:	dc.w $FC20
		dc.w $F01
		dc.w	  0,  $EEE,   $8E,   $4E,   $2C,   $EE,	  $88,	 $28,  $EEE,  $EEE,  $E88,  $C66,  $A24,  $ECC,	 $642,	 $44
		dc.w	  1,	 0,  $EEE,   $4E,   $2A,     8,	  $EE,	 $88,	  4,  $EEE,  $E88,  $C44,  $A24,  $624,	 $ECC,	$422
		dc.w	$44,	 1,	0,  $EEE,   $4E,   $2A,	    8,	 $EE,	$88,	 4,  $E88,  $C44,  $A24,  $624,	 $422,	$ECC
		dc.w	$20,   $44,	1,     0,  $EEE,   $8E,	  $4E,	 $2C,	$EE,   $88,   $28,  $EEE,  $EEE,  $E88,	 $C66,	$A24
		dc.w   $ECC,  $642,   $44,     3,     0,  $EEE,	  $4E,	 $2A,	  8,   $EE,   $88,     4,  $EEE,  $E88,	 $C44,	$A24
		dc.w   $624,  $ECC,  $422,   $44,     3,     0,	 $EEE,	 $4E,	$2A,	 8,   $EE,   $88,     4,  $E88,	 $C44,	$A24
		dc.w   $624,  $422,  $ECC,   $20,   $44,     3,	$FFF4
off_7DD5A:	dc.l off_7DD7A

		dc.w 1
		dc.b 0
		dc.b $F
		dc.w $109
		dc.w $209
		dc.w $307
		dc.w $407
		dc.w $505
		dc.w $605
		dc.w $505
		dc.w $407
		dc.w $307
		dc.w $209
		dc.w $109
		dc.w $FFFC
off_7DD7A:	dc.w word_7DD88-off_7DD7A

		dc.w word_7DD8C-off_7DD7A
		dc.w word_7DD90-off_7DD7A
		dc.w word_7DD94-off_7DD7A
		dc.w word_7DD98-off_7DD7A
		dc.w word_7DD9C-off_7DD7A
		dc.w word_7DDA0-off_7DD7A
word_7DD88:	dc.w $480
		dc.w $6A0
word_7DD8C:	dc.w $680
		dc.w $8A0
word_7DD90:	dc.w $680
		dc.w $8C0
word_7DD94:	dc.w $6A0
		dc.w $AC0
word_7DD98:	dc.w $8A0
		dc.w $AE0
word_7DD9C:	dc.w $8C0
		dc.w $CE0
word_7DDA0:	dc.w $AC0
		dc.w $EE0
word_7DDA4:	dc.w $18C
		dc.w $38C
		dc.w $3400
		dc.w $3780
		dc.w $28C
		dc.w $28C
		dc.w $3680
		dc.w $36C0
; ---------------------------------------------------------------------------

Obj_DEZ_Miniboss:
		lea	word_7DDA4(pc),a1
		jsr	(Check_CameraInRange).l
		lea	Pal_DEZMiniboss1(pc),a1		; NAT: Load palette anyway
		jsr	PalLoad_Line1.w

		btst	#5,OptionsBits.w		; NAT: Check if bosses are on
		bne.s	.enabled			; if are, branch
		lea	.screen(pc),a1			; else, lock screen
		jmp	Boss_Force_End_2		;

.screen		dc.w $3680, $36C0, $28C, $28C

.enabled	move.b	#Mus_Minib_SK,$26(a0)
		lea	word_7DDA4+8(pc),a1		; NAT: oops, need a1 anyway
		jsr	sub_85D6A.w

		move.b	#$7F,BossHitMode.w		; NAT: Enable hit mode
		clr.w	BossHitsP1.w			; clear hits count
		jsr	Boss_EmptyRange(pc)		; clear range
		move.w	#$32C,PlayerSpawn+2.w		; set spawn y-position

		move.l	#loc_7DE28,(a0)
		move.l	#loc_7DE2C,$34(a0)
		lea	ObjDat3_7EF46(pc),a1
		jsr	SetUp_ObjAttributes.w
		clr.b	5(a0)
		move.b	#7,$29(a0)
		move.b	#7,$42(a0)
		move.w	#$4000,$3A(a0)
		move.w	#-$8000,$3C(a0)
		lea	ChildObjDat_7EF8E(pc),a2
		jsr	CreateChild1_Normal.w
		lea	ChildObjDat_7EF96(pc),a2
		jsr	CreateChild6_Simple.w
		moveq	#$7B,d0
		jsr	Load_PLC.w
		lea	(ArtKosM_DEZMinibossMisc).l,a1
		move.w	#-$8000,d2
		jmp	Queue_Kos_Module.w
; ---------------------------------------------------------------------------

loc_7DE28:
		jmp	loc_85CA4.w
; ---------------------------------------------------------------------------

loc_7DE2C:
		move.l	#loc_7DE46,(a0)
		addi.w	#$E0,(__u_FAB2).w
		addi.w	#$40,(__u_FAB4).w
		addi.w	#$100,(__u_FAB6).w

locret_7DE44:

		rts
; ---------------------------------------------------------------------------

loc_7DE46:
		addq.b	#4,$3C(a0)
		bpl.s	loc_7DE4E
		rts
; ---------------------------------------------------------------------------

loc_7DE4E:
		move.l	#loc_7DE6E,(a0)

loc_7DE54:
		move.b	#0,5(a0)
		clr.w	$3C(a0)
		move.w	#$7F,$2E(a0)
		move.l	#loc_7DEA6,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_7DE6E:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_7DE92(pc,d0.w),d1
		jsr	off_7DE92(pc,d1.w)
		move.b	(V_int_run_count+3).w,d0
		andi.b	#$1F,d0
		bne.s	loc_7DE8E
		moveq	#-$3D,d0
		jsr	Play_Sound_2.w

loc_7DE8E:
		bra.w	loc_7EE36
; ---------------------------------------------------------------------------
off_7DE92:	dc.w loc_7DEA2-off_7DE92

		dc.w loc_7DEC6-off_7DE92
		dc.w loc_7DEA2-off_7DE92
		dc.w loc_7DF14-off_7DE92
		dc.w loc_7DEA2-off_7DE92
		dc.w loc_7DF40-off_7DE92
		dc.w loc_7DEA2-off_7DE92
		dc.w loc_7DF84-off_7DE92
; ---------------------------------------------------------------------------

loc_7DEA2:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_7DEA6:
		move.b	#2,5(a0)
		move.w	#$F,$2E(a0)
		move.l	#sub_7DEF6,$34(a0)
		move.b	#2,$39(a0)
		clr.w	$40(a0)
		rts
; ---------------------------------------------------------------------------

loc_7DEC6:
		move.w	$40(a0),d0
		move.w	$3C(a0),d1
		addi.w	#$20,d0
		add.w	d0,d1
		cmpi.w	#$7000,d1
		blo.s	loc_7DEEC
		move.w	#$7000,d1
		lsr.w	#1,d0
		neg.w	d0
		subq.b	#1,$39(a0)
		bpl.s	loc_7DEEC
		bsr.w	sub_7DEF6

loc_7DEEC:

		move.w	d0,$40(a0)
		move.w	d1,$3C(a0)
		rts

; =============== S U B R O U T I N E =======================================


sub_7DEF6:

		move.b	#4,5(a0)
		move.w	#$9F,$2E(a0)
		move.l	#loc_7DF0C,$34(a0)
		rts
; End of function sub_7DEF6

; ---------------------------------------------------------------------------

loc_7DF0C:
		move.b	#6,5(a0)
		rts
; ---------------------------------------------------------------------------

loc_7DF14:
		move.b	$3A(a0),d0
		addq.b	#2,d0
		bmi.s	loc_7DF22
		move.b	d0,$3A(a0)
		rts
; ---------------------------------------------------------------------------

loc_7DF22:
		move.b	#8,5(a0)
		move.w	#$1F,$2E(a0)
		move.l	#loc_7DF38,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_7DF38:
		move.b	#$A,5(a0)
		rts
; ---------------------------------------------------------------------------

loc_7DF40:
		move.b	$3A(a0),d0
		subq.b	#4,d0
		cmpi.b	#$40,d0
		bls.s	loc_7DF52
		move.b	d0,$3A(a0)
		rts
; ---------------------------------------------------------------------------

loc_7DF52:
		move.b	#$40,$3A(a0)
		move.b	#$C,5(a0)
		move.w	#$9F,$2E(a0)
		move.l	#loc_7DF6E,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_7DF6E:
		move.b	#$E,5(a0)
		move.w	#$1B,$2E(a0)
		move.l	#loc_7DE54,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_7DF84:
		subq.b	#4,$3C(a0)
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_7DF8C:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_7DF9A(pc,d0.w),d1
		jmp	off_7DF9A(pc,d1.w)
; ---------------------------------------------------------------------------
off_7DF9A:	dc.w loc_7DFA2-off_7DF9A

		dc.w loc_7E00C-off_7DF9A
		dc.w loc_7E006-off_7DF9A
		dc.w loc_7E00C-off_7DF9A
; ---------------------------------------------------------------------------

loc_7DFA2:
		move.b	(V_int_run_count+3).w,d0
		andi.b	#7,d0
		bne.s	loc_7DFB4
		lea	ChildObjDat_7EFA2(pc),a2
		jsr	CreateChild6_Simple.w

loc_7DFB4:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_7DFB8:
		move.b	#2,5(a0)
		move.w	#$5F,$2E(a0)
		move.l	#loc_7DFDE,$34(a0)
		st	(ScrEvents_1).w
		lea	ChildObjDat_7EFA8(pc),a2
		jsr	CreateChild1_Normal.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_7DFDE:
		move.b	#4,5(a0)
		bset	#5,$38(a0)
		move.w	#-$80,$18(a0)
		move.w	#$40,$1A(a0)
		move.w	#$1F,$2E(a0)
		move.l	#loc_7E016,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_7E006:
		jsr	MoveSprite2.w

loc_7E00C:
		jsr	Obj_Wait.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_7E016:
		move.b	#6,5(a0)
		move.w	#$1F,$2E(a0)
		move.l	#loc_7E044,$34(a0)
		move.w	#0,$3A(a0)
		move.w	#$200,$3C(a0)
		move.w	#$100,$26(a0)
		lea	ChildObjDat_7EFB6(pc),a2
		jmp	CreateChild8_TreeListRepeated(pc)
; ---------------------------------------------------------------------------

loc_7E044:
		move.l	#loc_7E0A6,(a0)
		clr.b	5(a0)
		bclr	#6,$2A(a0)
		move.b	#8,$29(a0)
		move.b	#8,$42(a0)
		move.w	$14(a0),$30(a0)
		bclr	#5,$38(a0)
		jsr	Create_New_Sprite.w
		bne.s	sub_7E08C
		move.w	a0,$46(a1)
		move.l	#Obj_8B,(a1)
		move.w	#$3740,$10(a1)
		move.w	#$360,$14(a1)
		move.b	#-$77,$2C(a1)

; =============== S U B R O U T I N E =======================================


sub_7E08C:

		move.w	#$80,d0
		move.w	d0,$3E(a0)
		move.w	d0,$1A(a0)
		move.w	#8,$40(a0)
		bclr	#0,$38(a0)
		rts
; End of function sub_7E08C

; ---------------------------------------------------------------------------

loc_7E0A6:
		move.b	(V_int_run_count+3).w,d0
		andi.b	#$3F,d0
		bne.s	loc_7E0B8
		moveq	#-$3A,d0
		jsr	Play_Sound_2.w

loc_7E0B8:
		bsr.w	sub_7EE88
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_7E0CA(pc,d0.w),d1
		jmp	off_7E0CA(pc,d1.w)
; ---------------------------------------------------------------------------
off_7E0CA:	dc.w loc_7E0D6-off_7E0CA

		dc.w loc_7E108-off_7E0CA
		dc.w loc_7E13C-off_7E0CA
		dc.w loc_7E186-off_7E0CA
		dc.w loc_7E1AC-off_7E0CA
		dc.w loc_7E1FC-off_7E0CA
; ---------------------------------------------------------------------------

loc_7E0D6:
		jsr	Swing_UpAndDown.w
		jsr	MoveSprite2.w
		bsr.w	sub_7EC64
		bsr.w	sub_7EB8E
		btst	#1,$38(a0)
		beq.s	loc_7E0F4
		bsr.w	sub_7E0FA

loc_7E0F4:
		jmp	Draw_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_7E0FA:

		move.b	#2,5(a0)
		bset	#7,$38(a0)
		rts
; End of function sub_7E0FA

; ---------------------------------------------------------------------------

loc_7E108:
		jsr	Run_PalRotationScript.w
		jsr	Swing_UpAndDown.w
		jsr	MoveSprite2.w
		bsr.w	sub_7EC84
		bsr.w	sub_7EB8E
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_7E124:
		move.b	#4,5(a0)
		clr.w	$18(a0)
		bclr	#1,$38(a0)
		bset	#3,$38(a0)
		rts
; ---------------------------------------------------------------------------

loc_7E13C:
		jsr	Swing_UpAndDown.w
		jsr	MoveSprite2.w
		btst	#1,$38(a0)
		bne.s	loc_7E15C
		btst	#3,$38(a0)
		beq.s	loc_7E16A
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_7E15C:
		bsr.s	sub_7E0FA
		bclr	#3,$38(a0)
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_7E16A:
		move.b	#6,5(a0)
		clr.w	$18(a0)
		move.w	#-$400,$1A(a0)
		bset	#2,$38(a0)
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_7E186:
		btst	#1,$38(a0)
		bne.s	loc_7E1A0
		addi.w	#$20,$1A(a0)
		jsr	MoveSprite2.w
		tst.w	$1A(a0)
		bmi.s	loc_7E1A6

loc_7E1A0:
		move.b	#8,5(a0)

loc_7E1A6:
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_7E1AC:
		btst	#2,$38(a0)
		bne.s	loc_7E1DE
		move.b	#$A,5(a0)
		move.w	#$100,$1A(a0)
		clr.w	$3A(a0)
		btst	#1,$38(a0)
		bne.s	loc_7E1E4
		bset	#6,$38(a0)
		move.w	#$100,$26(a0)
		move.w	#$100,$3C(a0)

loc_7E1DE:
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_7E1E4:
		bset	#7,$38(a0)
		move.w	#$800,$26(a0)
		move.w	#$800,$3C(a0)
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_7E1FC:
		jsr	MoveSprite2.w
		move.w	$30(a0),d0
		cmp.w	$14(a0),d0
		bhi.s	loc_7E236
		move.w	d0,$14(a0)
		move.b	#0,5(a0)
		bclr	#6,$38(a0)
		lea	(Player_1).w,a1
		jsr	Find_OtherObject.w
		move.w	#-$80,d1
		tst.w	d0
		beq.s	loc_7E22E
		neg.w	d1

loc_7E22E:
		move.w	d1,$18(a0)
		bsr.w	sub_7E08C

loc_7E236:
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_7E23C:
	;	jsr	Create_New_Sprite.w
	;	bne.s	loc_7E24A
	;	move.l	#loc_7E25C,(a1)

loc_7E24A:
		bset	#5,$38(a0)
		lea	ChildObjDat_7EFD2(pc),a2
		jsr	CreateChild1_Normal.w
		jmp	Obj_EndSignControl_HitHUD(pc)
; ---------------------------------------------------------------------------

loc_7E25C:
		tst.b	(End_Of_Level_Flag).w
		beq.s	locret_07E2C8
		move.l	#loc_7E26A,(a0)

loc_7E26A:
		tst.b	(End_Of_Level_Flag).w
		bne.s	locret_07E2C8
		move.l	#loc_7E298,(a0)
		st	(Ctrl_1_locked).w
		jsr	Create_New_Sprite.w
		bne.s	loc_7E28A
		move.l	#loc_863C0,(a1)

loc_7E28A:
		cmpi.w	#$140,(Player_1+x_pos).w
		blo.s	loc_7E298
		bset	#3,$38(a0)

loc_7E298:

		lea	(Player_1).w,a1
		move.w	#$140,d0
		tst.w	$18(a0)
		btst	#3,$38(a0)
		bne.s	loc_7E2CA
		cmp.w	$10(a1),d0
		bls.s	loc_7E2E8
		moveq	#0,d1
		btst	#5,$2A(a1)
		beq.s	loc_7E2C0
		ori.w	#$4040,d1

loc_7E2C0:
		ori.w	#$808,d1
		move.w	d1,(Ctrl_1_logical).w

locret_07E2C8;
		rts
; ---------------------------------------------------------------------------

loc_7E2CA:
		cmp.w	$10(a1),d0
		bhs.s	loc_7E2E8
		moveq	#0,d1
		btst	#5,$2A(a1)
		beq.s	loc_7E2DE
		ori.w	#$4040,d1

loc_7E2DE:
		ori.w	#$404,d1
		move.w	d1,(Ctrl_1_logical).w
		rts
; ---------------------------------------------------------------------------

loc_7E2E8:

		move.w	d0,$10(a1)
		move.l	#loc_7E342,(a0)
		jsr	Stop_Object.w
		clr.w	(Ctrl_1_logical).w
		move.w	#$1F,$2E(a0)
		jsr	Create_New_Sprite.w
		bne.s	loc_7E320
		move.l	#Obj_CreateBossExplosion,(a1)
		move.w	#$100,$10(a1)
		move.w	#$760,$14(a1)
		move.b	#$14,$2C(a1)

loc_7E320:
		jsr	Create_New_Sprite.w
		bne.s	locret_7E340
		move.l	#Obj_CreateBossExplosion,(a1)
		move.w	#$180,$10(a1)
		move.w	#$760,$14(a1)
		move.b	#$14,$2C(a1)

locret_7E340:
		rts
; ---------------------------------------------------------------------------

loc_7E342:
		subq.w	#1,$2E(a0)
		bpl.s	locret_7E382
		move.l	#loc_7E384,(a0)
		st	(ScrEvents_1).w
		move.w	#0,(__u_FA96).w
		jsr	Create_New_Sprite.w
		bne.s	loc_7E366
		move.l	#Obj_DecLevStartYGradual,(a1)

loc_7E366:
		move.w	#$2000,(__u_FA98).w
		jsr	Create_New_Sprite.w
		bne.s	loc_7E37A
		move.l	#Obj_IncLevEndYGradual,(a1)

loc_7E37A:
		moveq	#-$34,d0
		jsr	Play_Sound_2.w

locret_7E382:
		rts
; ---------------------------------------------------------------------------

loc_7E384:
		lea	(Player_1).w,a1
		cmpi.w	#$360,$14(a1)
		blo.s	locret_7E3C8
		btst	#1,$2A(a1)
		bne.s	locret_7E3C8
		move.l	#loc_7E3CA,(a0)
		move.b	#-$7D,$2E(a1)
		move.b	#0,$20(a1)
		jsr	Stop_Object.w
		bclr	#5,$2A(a1)
		bset	#1,$2A(a1)
		bclr	#0,$2A(a1)
		bclr	#0,4(a1)

locret_7E3C8:

		rts
; ---------------------------------------------------------------------------

loc_7E3CA:
		addq.w	#8,$1C(a0)
		cmpi.w	#$300,$1C(a0)
		bne.s	loc_7E3E8
		move.l	#loc_7E3EC,(a0)
		move.w	#$24,$2E(a0)
		bclr	#7,(Player_1+$A).w

loc_7E3E8:
		bra.w	sub_7EEEE
; ---------------------------------------------------------------------------

loc_7E3EC:
		subq.w	#1,$2E(a0)
		bpl.s	loc_7E416
		move.l	#loc_7E420,(a0)
		move.w	#-$1000,$1A(a0)
		lea	(Player_1).w,a1
		move.w	$10(a1),$10(a0)
		move.w	$14(a1),$14(a0)
		moveq	#-$61,d0
		jsr	Play_Sound_2.w

loc_7E416:
		subi.w	#$10,(Player_1+y_pos).w
		bra.w	sub_7EEEE
; ---------------------------------------------------------------------------

loc_7E420:
		bsr.w	sub_7EEEE
		tst.w	$1A(a0)
		bmi.s	loc_7E44C
		move.l	#loc_7E44C,(a0)
		jsr	(sub_5FD88).l
		lea	(Player_1).w,a1
		bclr	#0,4(a1)
		bclr	#0,$2A(a1)
		move.w	#$500,$20(a1)

loc_7E44C:

		jsr	MoveSprite.w
		tst.w	$1A(a0)
		bmi.s	loc_7E490
		move.w	#$3AC,d0
		cmpi.w	#2,(Player_mode).w
		bne.s	loc_7E468
		move.w	#$3B0,d0

loc_7E468:
		cmp.w	$14(a0),d0
		bhi.s	loc_7E490
		move.w	d0,$14(a0)
		move.l	#loc_7E4A2,(a0)
		move.w	#$77,$2E(a0)
		jsr	Create_New_Sprite.w
		bne.s	loc_7E490
		move.l	#Obj_TitleCard,(a1)
		st	$3E(a1)

loc_7E490:

		lea	(Player_1).w,a1
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		rts
; ---------------------------------------------------------------------------

loc_7E4A2:
		subq.w	#1,$2E(a0)
		bpl.w	locret_7DE44
		lea	(Pal_DEZMiniboss2).l,a1
		lea	(Normal_palette_line_2).w,a2
		moveq	#7,d6

loc_7E4B6:
		move.l	(a1)+,(a2)+
		dbf	d6,loc_7E4B6
		clr.b	(Player_1+$2E).w
		clr.b	(Ctrl_1_locked).w
		clr.b	(Ctrl_2_locked).w
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_7E4CE:
		lea	word_7EF70(pc),a1
		jsr	SetUp_ObjAttributes3.w
		addi.w	#$C,$14(a0)
		move.b	#0,$42(a0)
		move.b	#$C,$43(a0)
		move.w	#-$200,d0
		moveq	#-$40,d1
		tst.b	$2C(a0)
		beq.s	loc_7E4F8
		neg.w	d0
		moveq	#$40,d1

loc_7E4F8:
		move.w	d0,$18(a0)
		move.b	d1,$3C(a0)
		move.w	#$1F,$2E(a0)
		move.l	#loc_7E52A,$34(a0)
		move.l	#loc_7E51C,(a0)
		lea	ChildObjDat_7EFBC(pc),a2
		jsr	CreateChild1_Normal.w

loc_7E51C:
		jsr	MoveSprite2.w
		jsr	Obj_Wait.w
		bra.w	loc_7EC46
; ---------------------------------------------------------------------------

loc_7E52A:
		move.l	#loc_7E566,(a0)
		tst.b	$2C(a0)
		beq.s	locret_7E54A
		move.l	#loc_7E54C,(a0)
		movea.w	$46(a0),a1
		move.w	a0,$44(a1)
		move.w	$44(a0),$46(a0)

locret_7E54A:
		rts
; ---------------------------------------------------------------------------

loc_7E54C:

		movea.w	$46(a0),a1
		btst	#7,$38(a1)
		bne.s	loc_7E582
		bclr	#3,$38(a0)
		bne.w	loc_7E63E
		bra.w	loc_7EBF2
; ---------------------------------------------------------------------------

loc_7E566:
		movea.w	$46(a0),a1
		btst	#7,$38(a1)
		bne.s	loc_7E582
		btst	#3,$38(a1)
		bne.s	loc_7E590

loc_7E57A:

		bsr.w	sub_7EBC2
		bra.w	loc_7EBF2
; ---------------------------------------------------------------------------

loc_7E582:

		move.l	#loc_7E6E8,(a0)
		move.w	#$4000,$3A(a0)
		bra.s	loc_7E57A
; ---------------------------------------------------------------------------

loc_7E590:
		move.l	#loc_7E598,(a0)
		bra.s	loc_7E57A
; ---------------------------------------------------------------------------

loc_7E598:
		movea.w	$46(a0),a1
		btst	#7,$38(a1)
		bne.s	loc_7E582
		bsr.w	sub_7EBC2
		movea.w	$46(a0),a1
		move.b	$3C(a0),d0
		tst.w	$3C(a1)
		bmi.s	loc_7E5C4
		subi.b	#$40,d0
		cmpi.b	#$10,d0
		bls.s	loc_7E5CE
		bra.w	loc_7E5D4
; ---------------------------------------------------------------------------

loc_7E5C4:
		subi.b	#$30,d0
		cmpi.b	#$10,d0
		bhi.s	loc_7E5D4

loc_7E5CE:
		move.l	#loc_7E5D8,(a0)

loc_7E5D4:

		bra.w	loc_7EBF2
; ---------------------------------------------------------------------------

loc_7E5D8:
		movea.w	$46(a0),a1
		move.w	$3C(a0),d0
		btst	#7,$38(a1)
		bne.s	loc_7E582
		move.w	$3A(a1),d1
		move.w	$3C(a1),d2
		bmi.s	loc_7E606
		subi.w	#$100,d1
		add.w	d1,d0
		tst.w	d1
		bpl.s	loc_7E616
		cmpi.w	#$4000,d0
		blo.s	loc_7E622
		bra.w	loc_7E616
; ---------------------------------------------------------------------------

loc_7E606:
		addi.w	#$100,d1
		add.w	d1,d0
		tst.w	d1
		bmi.s	loc_7E616
		cmpi.w	#$4000,d0
		bhi.s	loc_7E622

loc_7E616:

		move.w	d0,$3C(a0)
		move.w	d1,$3A(a1)
		bra.w	loc_7EBF2
; ---------------------------------------------------------------------------

loc_7E622:

		move.w	#$4000,d0
		move.w	d0,$3C(a0)
		move.w	d1,$3A(a1)
		bclr	#3,$38(a1)
		movea.w	$44(a0),a2
		bset	#3,$38(a2)

loc_7E63E:
		move.l	#loc_7E64C,(a0)
		clr.w	$18(a0)
		bra.w	loc_7EBF2
; ---------------------------------------------------------------------------

loc_7E64C:
		movea.w	$46(a0),a1
		btst	#2,$38(a1)
		beq.s	loc_7E664
		move.l	#loc_7E668,(a0)
		move.w	#7,$2E(a0)

loc_7E664:
		bra.w	loc_7EC46
; ---------------------------------------------------------------------------

loc_7E668:
		subq.w	#1,$2E(a0)
		bpl.s	loc_7E67A
		move.l	#loc_7E67E,(a0)
		move.w	#-$400,$1A(a0)

loc_7E67A:
		bra.w	loc_7EC46
; ---------------------------------------------------------------------------

loc_7E67E:
		addi.w	#$20,$1A(a0)
		jsr	MoveSprite2.w
		movea.w	$46(a0),a1
		move.w	$14(a1),d0
		addi.w	#$C,d0
		tst.w	$1A(a0)
		bpl.s	loc_7E6A2
		cmp.w	$14(a0),d0
		blo.s	loc_7E6B2

loc_7E6A2:
		move.w	d0,$14(a0)
		move.l	#loc_7E6B6,(a0)
		bclr	#2,$38(a1)

loc_7E6B2:
		bra.w	loc_7EC46
; ---------------------------------------------------------------------------

loc_7E6B6:
		movea.w	$46(a0),a1
		btst	#7,$38(a1)
		bne.w	loc_7E582
		btst	#6,$38(a1)
		beq.s	loc_7E6D0
		bsr.w	sub_7E6D4

loc_7E6D0:
		bra.w	loc_7EBF2

; =============== S U B R O U T I N E =======================================


sub_7E6D4:

		move.l	#loc_7E566,(a0)
		tst.b	$2C(a0)
		beq.s	locret_7E6E6
		move.l	#loc_7E54C,(a0)

locret_7E6E6:
		rts
; ---------------------------------------------------------------------------

loc_7E6E8:
		bsr.w	sub_7EBC2
		move.b	$3A(a0),d0
		addq.b	#1,d0
		cmpi.b	#$60,d0
		bhs.s	loc_7E700
		move.b	d0,$3A(a0)
		bra.w	loc_7EC52
; ---------------------------------------------------------------------------

loc_7E700:
		move.l	#loc_7E710,(a0)
		move.w	#$3F,$2E(a0)
		bra.w	loc_7EC52
; ---------------------------------------------------------------------------

loc_7E710:
		subq.w	#1,$2E(a0)
		bpl.s	loc_7E71C
		move.l	#loc_7E724,(a0)

loc_7E71C:
		bsr.w	sub_7EBC2
		bra.w	loc_7EC52
; ---------------------------------------------------------------------------

loc_7E724:
		bsr.w	sub_7EBC2
		move.b	$3A(a0),d0
		subq.b	#1,d0
		cmpi.b	#$40,d0
		bhi.s	loc_7E742
		bsr.s	sub_7E6D4
		movea.w	$46(a0),a1
		bclr	#7,$38(a1)
		moveq	#$40,d0

loc_7E742:
		move.b	d0,$3A(a0)
		bra.w	loc_7EC52
; End of function sub_7E6D4

; ---------------------------------------------------------------------------

loc_7E74A:
		lea	word_7EF76(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_7E758,(a0)

loc_7E758:
		lea	byte_7EFEC(pc),a1
		jsr	Animate_RawNoSST.w
		jsr	Refresh_ChildPosition.w
		jmp	Child_DrawTouch_Sprite2.w
; ---------------------------------------------------------------------------

sub_5FD88:

		lea	(Player_1).w,a1
		move.w	(Player_mode).w,d0
		andi.w	#3,d0
		move.b	byte_5FDA0(pc,d0.w),$22(a1)
		jmp	Player_Load_PLC.w

; ---------------------------------------------------------------------------
byte_5FDA0:	dc.b $BA
		dc.b $BA
		dc.b $AD
		dc.b $56
; ---------------------------------------------------------------------------

loc_7E768:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_7E77C(pc,d0.w),d1
		jsr	off_7E77C(pc,d1.w)

		move.w	#$3690,PlayerSpawn.w		; NAT: Set left spawn
		cmp.w	#$3738,x_pos(a0)		; check if boss is beyond middle
		bhs.s	.gotit				; yes? branch
		move.w	#$37E0,PlayerSpawn.w		; set right spawn

.gotit		moveq	#$14,d0
		jmp	Child_Draw_Sprite_FlickerMove.w
; ---------------------------------------------------------------------------
off_7E77C:	dc.w loc_7E786-off_7E77C

		dc.w loc_7E79C-off_7E77C
		dc.w loc_7E7B4-off_7E77C
		dc.w loc_7E7D6-off_7E77C
		dc.w loc_7E800-off_7E77C
; ---------------------------------------------------------------------------

loc_7E786:
		lea	word_7EF52(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.b	#-1,$29(a0)
		movea.w	$46(a0),a1
		move.w	d0,$44(a1)

loc_7E79C:
		bsr.w	sub_7ED6C
		movea.w	$46(a0),a1
		cmpi.l	#loc_7DE6E,(a1)
		beq.s	loc_7E7AE
		rts
; ---------------------------------------------------------------------------

loc_7E7AE:
		move.b	#4,5(a0)

loc_7E7B4:
		bsr.w	sub_7ED6C
		bsr.w	sub_7EDD0
		movea.w	$46(a0),a1
		btst	#6,$2A(a1)
		bne.s	loc_7E7CE
		jmp	Add_SpriteToCollisionResponseList.w
; ---------------------------------------------------------------------------

loc_7E7CE:
		move.b	#6,5(a0)
		rts
; ---------------------------------------------------------------------------

loc_7E7D6:
		bsr.w	sub_7ED6C
		movea.w	$46(a0),a1
		btst	#6,$2A(a1)
		beq.s	loc_7E7E8
		rts
; ---------------------------------------------------------------------------

loc_7E7E8:
		move.b	#8,5(a0)
		move.b	#-1,$29(a0)
		move.b	#$17,$28(a0)
		clr.b	$20(a0)
		rts
; ---------------------------------------------------------------------------

loc_7E800:
		bsr.w	sub_7ED6C
		bsr.w	sub_7EDD0
		jmp	Add_SpriteToCollisionResponseList.w
; ---------------------------------------------------------------------------

loc_7E80E:
		lea	word_7EF58(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_7E820,(a0)
		bsr.w	sub_7ED54

loc_7E820:
		bsr.w	sub_7EB76
		addq.b	#4,$3C(a0)
		movea.w	$46(a0),a1
		btst	#1,$38(a1)
		bne.s	loc_7E89C
		move.b	$3C(a0),d0
		jsr	GetSineCosine.w
		move.w	$3A(a1),d1
		muls.w	d1,d0
		swap	d0
		move.w	d0,d1
		add.w	$10(a1),d0
		move.w	d0,$10(a0)
		addi.w	#$20,d1
		cmpi.w	#$40,d1
		scs	d5
		move.b	$3C(a1),d0
		ext.w	d0
		add.w	$14(a1),d0
		move.w	d0,$14(a0)
		move.b	$3C(a0),d0
		bpl.s	loc_7E870
		not.b	d0

loc_7E870:
		lsr.w	#2,d0
		andi.w	#$1C,d0
		lea	byte_7E8C2(pc,d0.w),a2
		move.b	(a2)+,$22(a0)
		bclr	#7,$A(a0)
		move.b	(a2)+,d1
		or.b	d1,$A(a0)
		move.w	(a2)+,8(a0)
		tst.b	d5
		beq.s	loc_7E898
		tst.b	d1
		beq.w	locret_7DE44

loc_7E898:
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------

loc_7E89C:
		bclr	#1,$38(a1)
		move.l	#loc_7E8E2,(a0)
		move.b	#$15,$22(a0)
		bset	#7,$A(a0)
		move.w	#prio(3),8(a0)
		move.w	#-$400,$1A(a0)
		rts
; ---------------------------------------------------------------------------
byte_7E8C2:	dc.w $1580, prio(3)
		dc.w $1580, prio(3)
		dc.w $1580, prio(3)
		dc.w $1680, prio(3)
		dc.w $1600, prio(6)
		dc.w $1700, prio(6)
		dc.w $1700, prio(6)
		dc.w $1700, prio(6)
; ---------------------------------------------------------------------------

loc_7E8E2:
		bsr.w	sub_7EB76
		jsr	MoveSprite.w
		tst.w	$1A(a0)
		bpl.s	loc_7E8F6
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------

loc_7E8F6:
		lea	Child6_CreateBossExplosion.w,a2
		jsr	CreateChild1_Normal.w
		bne.s	loc_7E908
		move.b	#6,$2C(a1)

loc_7E908:
		lea	ChildObjDat_7EF9C(pc),a2
		jsr	CreateChild6_Simple.w
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------

loc_7E916:
		lea	word_7EF5E(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_7E972,(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		lea	byte_7E942(pc,d0.w),a1
		move.b	(a1)+,$22(a0)
		move.b	(a1)+,d1
		or.b	d1,4(a0)
		add.w	d0,d0
		move.l	word_7E952(pc,d0.w),$18(a0)
		rts
; ---------------------------------------------------------------------------
byte_7E942:	dc.b  $19,   2
		dc.b  $18,   3
		dc.b  $1A,   1
		dc.b  $18,   1
		dc.b  $19,   0
		dc.b  $18,   0
		dc.b  $1A,   0
		dc.b  $18,   2
word_7E952:	dc.w	  0,  $200
		dc.w   $16A,  $16A
		dc.w   $200,	 0
		dc.w   $16A, $FE96
		dc.w	  0, $FE00
		dc.w  $FE96, $FE96
		dc.w  $FE00,	 0
		dc.w  $FE96,  $16A
; ---------------------------------------------------------------------------

loc_7E972:
		jsr	MoveSprite2.w
		jmp	Sprite_CheckDeleteTouchXY.w
; ---------------------------------------------------------------------------

loc_7E97E:
		lea	word_7EF7C(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_7E98C,(a0)

loc_7E98C:
		jsr	Refresh_ChildPosition.w
		movea.w	$46(a0),a1
		btst	#7,$2A(a1)
		bne.s	loc_7E9D0
		btst	#0,(V_int_run_count+3).w
		bne.w	locret_7DE44
		move.b	$43(a0),d0
		addq.b	#1,d0
		move.b	d0,$43(a0)
		cmpi.b	#$24,d0
		blo.s	loc_7E9CA
		move.l	#loc_7E9D4,(a0)
		move.w	#$3F,$2E(a0)
		move.l	#loc_7E9FC,$34(a0)

loc_7E9CA:
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_7E9D0:
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------

loc_7E9D4:
		jsr	Refresh_ChildPosition.w
		jsr	Obj_Wait.w
		movea.w	$46(a0),a1
		btst	#7,$2A(a1)
		bne.s	loc_7E9F8
		btst	#0,(V_int_run_count+3).w
		bne.w	locret_7DE44
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_7E9F8:
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------

loc_7E9FC:
		move.l	#loc_7EA12,(a0)
		move.b	#$1B,$22(a0)
		clr.b	$39(a0)
		subq.b	#4,$43(a0)
		rts
; ---------------------------------------------------------------------------

loc_7EA12:
		move.b	$22(a0),d0
		addq.b	#1,d0
		move.b	d0,$22(a0)
		cmpi.b	#$22,d0
		blo.s	loc_7EA30
		move.l	#loc_7EA3C,(a0)
		lea	ChildObjDat_7EFCC(pc),a2
		jsr	CreateChild6_Simple.w

loc_7EA30:
		addq.b	#8,$43(a0)
		jsr	Refresh_ChildPosition.w
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_7EA3C:
		movea.w	$46(a0),a1
		btst	#1,$38(a1)
		beq.s	loc_7EA66
		jsr	Refresh_ChildPosition.w
		move.b	(V_int_run_count+3).w,d0
		andi.b	#$1F,d0
		bne.s	loc_7EA5E
		moveq	#-$3C,d0
		jsr	Play_Sound_2.w

loc_7EA5E:
		bsr.w	sub_7EB34
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_7EA66:
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------

loc_7EA6C:
		lea	word_7EF82(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_7EA9A,(a0)
		move.w	(__u_FAB0).w,d0
		addi.w	#$B0,d0
		move.w	d0,$14(a0)
		moveq	#-$10,d0
		tst.b	$2C(a0)
		beq.s	loc_7EA96
		neg.w	d0
		bset	#0,4(a0)

loc_7EA96:
		move.w	d0,$3A(a0)

loc_7EA9A:
		lea	byte_7EFF4(pc),a1
		jsr	Animate_RawNoSST.w
		movea.w	$46(a0),a1
		move.w	$10(a1),d0
		add.w	$3A(a0),d0
		move.w	d0,$10(a0)
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_7EAB6:
		lea	word_7EF64(pc),a1
		jsr	SetUp_ObjAttributes3.w
		bsr.w	sub_7ECF4
		move.l	#loc_7EAC8,(a0)

loc_7EAC8:
		jmp	Obj_FlickerMove.w
; ---------------------------------------------------------------------------

loc_7EACC:

		lea	word_7EF6A(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_7EAFC,(a0)
		move.w	#-$200,$1A(a0)
		move.w	#-$200,d0
		tst.b	$2C(a0)
		beq.s	loc_7EAF2
		bset	#0,4(a0)
		neg.w	d0

loc_7EAF2:
		move.w	d0,$18(a0)
		move.w	#$3F,$2E(a0)

loc_7EAFC:
		subq.w	#1,$2E(a0)
		bpl.s	loc_7EB08
		move.l	#Obj_FlickerMove,(a0)

loc_7EB08:
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_7EB0E:

		lea	word_7EF88(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#Obj_FlickerMove,(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		lsr.w	#1,d0
		addi.b	#$23,d0
		move.b	d0,$22(a0)
		moveq	#8,d0
		jmp	Set_IndexedVelocity.w

; =============== S U B R O U T I N E =======================================


sub_7EB34:
		lea	word_7EB6E(pc),a1
		jsr	Check_PlayerInRange.w
		tst.w	d0
		beq.s	loc_7EB46
		bsr.w	sub_7EB4C

loc_7EB46:
		swap	d0
		tst.w	d0
		beq.s	locret_7EB6C
; End of function sub_7EB34


; =============== S U B R O U T I N E =======================================


sub_7EB4C:
		movea.w	d0,a1
		cmp.b	#6,5(a1)		; NAT: Check if pl is dead
		bhs.s	locret_7EB6C		; if yes, branch

		tst.b	$34(a1)
		bne.s	locret_7EB6C
		btst	#3,$2A(a1)
		bne.s	locret_7EB6C
		btst	#1,$2B(a1)
		bne.s	locret_7EB6C
		move.l	d0,-(sp)
		jsr	HurtCharacter_Directly.w
		move.l	(sp)+,d0

locret_7EB6C:

		rts
; End of function sub_7EB4C

; ---------------------------------------------------------------------------
word_7EB6E:	dc.w  $FFE8,   $30, $FFB8,   $90

; =============== S U B R O U T I N E =======================================


sub_7EB76:

		move.b	#-$7A,$28(a0)
		movea.w	$46(a0),a1
		btst	#6,$2A(a1)
		beq.s	locret_7EB8C
		clr.b	$28(a0)

locret_7EB8C:
		rts
; End of function sub_7EB76


; =============== S U B R O U T I N E =======================================


sub_7EB8E:

		btst	#3,(Player_1+$2A).w
		bne.s	loc_7EBBA
		move.b	(V_int_run_count+3).w,d0
		andi.w	#$1F,d0
		bne.s	locret_7EBB8
		lea	(Player_1).w,a1
		jsr	Find_OtherObject.w
		move.w	$26(a0),d1
		tst.w	d0
		beq.s	loc_7EBB4
		neg.w	d1

loc_7EBB4:
		move.w	d1,$3C(a0)

locret_7EBB8:
		rts
; ---------------------------------------------------------------------------

loc_7EBBA:
		move.w	$26(a0),$3C(a0)
		rts
; End of function sub_7EB8E


; =============== S U B R O U T I N E =======================================


sub_7EBC2:

		movea.w	$46(a0),a1
		moveq	#8,d0
		move.w	$3A(a1),d1
		move.w	$3C(a1),d2
		bmi.s	loc_7EBDE
		add.w	d0,d1
		cmp.w	d2,d1
		blt.s	loc_7EBE8
		move.w	d2,d1
		bra.w	loc_7EBE8
; ---------------------------------------------------------------------------

loc_7EBDE:
		neg.w	d0
		add.w	d0,d1
		cmp.w	d2,d1
		bgt.s	loc_7EBE8
		move.w	d2,d1

loc_7EBE8:

		add.w	d1,$3C(a0)
		move.w	d1,$3A(a1)
		rts
; End of function sub_7EBC2

; ---------------------------------------------------------------------------

loc_7EBF2:

		movea.w	$46(a0),a1
		tst.b	$2C(a0)
		bne.s	loc_7EC06
		move.b	$3C(a0),$43(a1)
		bra.w	loc_7EC12
; ---------------------------------------------------------------------------

loc_7EC06:
		move.b	$43(a1),d0
		addi.b	#-$80,d0
		move.b	d0,$3C(a0)

loc_7EC12:
		move.w	$10(a0),-(sp)
		moveq	#2,d2
		jsr	MoveSprite_CircularSimpleOffset(pc)
		moveq	#$23,d1
		moveq	#8,d2
		moveq	#$15,d3
		move.w	(sp)+,d4

loc_7EC24:

		movea.w	$46(a0),a1
		btst	#7,$2A(a1)
		bne.s	loc_7EC3C
		jsr	SolidObjectTop.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_7EC3C:
		jsr	Displace_PlayerOffObject.w
		moveq	#0,d0
		jmp	loc_849D8.w
; ---------------------------------------------------------------------------

loc_7EC46:

		moveq	#$23,d1
		moveq	#8,d2
		moveq	#$15,d3
		move.w	$10(a0),d4
		bra.s	loc_7EC24
; ---------------------------------------------------------------------------

loc_7EC52:

		move.w	$10(a0),-(sp)
		jsr	MoveSprite_Circular(pc)
		moveq	#$23,d1
		moveq	#8,d2
		moveq	#$15,d3
		move.w	(sp)+,d4
		bra.s	loc_7EC24

; =============== S U B R O U T I N E =======================================


sub_7EC64:
		move.w	$10(a0),d0
		tst.w	$18(a0)
		beq.s	locret_7EC82
		bmi.s	loc_7EC78
		cmp.w	(__u_FAB6).w,d0
		bhi.s	loc_7EC7E
		rts
; ---------------------------------------------------------------------------

loc_7EC78:
		cmp.w	(__u_FAB4).w,d0
		bhs.s	locret_7EC82

loc_7EC7E:
		neg.w	$18(a0)

locret_7EC82:

		rts
; End of function sub_7EC64


; =============== S U B R O U T I N E =======================================


sub_7EC84:
		move.w	$10(a0),d0
		move.w	#-$80,d1
		move.w	(Player_1+x_pos).w,d2
		sub.w	d0,d2
		bls.s	loc_7EC96
		neg.w	d1

loc_7EC96:
		move.w	d1,$18(a0)
		beq.s	locret_7ECB0
		bmi.s	loc_7ECA6
		cmp.w	(__u_FAB6).w,d0
		bhs.s	loc_7ECAC
		rts
; ---------------------------------------------------------------------------

loc_7ECA6:
		cmp.w	(__u_FAB4).w,d0
		bhi.s	locret_7ECB0

loc_7ECAC:
		clr.w	$18(a0)

locret_7ECB0:

		rts
; End of function sub_7EC84

; ---------------------------------------------------------------------------
		move.w	$10(a0),d0
		tst.w	$18(a0)
		beq.s	loc_7ECD2
		bmi.s	loc_7ECC8
		cmp.w	(__u_FAB6).w,d0
		bhs.s	loc_7ECCE
		bra.w	loc_7ECD2
; ---------------------------------------------------------------------------

loc_7ECC8:
		cmp.w	(__u_FAB4).w,d0
		bhi.s	loc_7ECD2

loc_7ECCE:
		clr.w	$18(a0)

loc_7ECD2:

		move.w	$14(a0),d0
		tst.w	$1A(a0)
		beq.s	locret_7ECF2
		bmi.s	loc_7ECE8
		cmp.w	(__u_FAB2).w,d0
		bhs.s	loc_7ECEE
		bra.w	locret_7ECF2
; ---------------------------------------------------------------------------

loc_7ECE8:
		cmp.w	(__u_FAB0).w,d0
		bhi.s	locret_7ECF2

loc_7ECEE:
		clr.w	$1A(a0)

locret_7ECF2:

		rts

; =============== S U B R O U T I N E =======================================


sub_7ECF4:
		jsr	Random_Number.w
		move.w	d0,d1
		andi.w	#$C,d1
		move.l	byte_7ED40(pc,d1.w),$18(a0)
		andi.w	#$1F,d0
		btst	#0,d0
		beq.s	loc_7ED1C
		neg.w	d0
		neg.w	$18(a0)
		bset	#0,4(a0)

loc_7ED1C:
		add.w	d0,$10(a0)
		swap	d0
		move.w	d0,d1
		andi.w	#3,d1
		move.b	byte_7ED50(pc,d1.w),$22(a0)
		andi.w	#$1F,d0
		btst	#0,d0
		beq.s	loc_7ED3A
		neg.w	d0

loc_7ED3A:
		add.w	d0,$14(a0)
		rts
; End of function sub_7ECF4

; ---------------------------------------------------------------------------
byte_7ED40:	dc.b	3,   0,	$FC,   0
		dc.b	2,   0,	$FD,   0
		dc.b	4,   0,	$FB,   0
		dc.b	3,   0,	$FE,   0
byte_7ED50:	dc.b $12
		dc.b $13
		dc.b $14
		dc.b $12

; =============== S U B R O U T I N E =======================================


sub_7ED54:
		moveq	#0,d0
		move.b	$2C(a0),d0
		lsr.w	#1,d0
		move.b	byte_7ED64(pc,d0.w),$3C(a0)
		rts
; End of function sub_7ED54

; ---------------------------------------------------------------------------
byte_7ED64:	dc.b 0
		dc.b $80
		dc.b $20
		dc.b $A0
		dc.b $40
		dc.b $C0
		dc.b $60
		dc.b $E0

; =============== S U B R O U T I N E =======================================


sub_7ED6C:

		movea.w	$46(a0),a1
		move.w	$14(a1),$14(a0)
		move.w	(Player_1+x_pos).w,d0
		move.w	$10(a1),d1
		sub.w	d1,d0
		smi	d2
		bpl.s	loc_7ED86
		neg.w	d0

loc_7ED86:
		cmpi.w	#$A0,d0
		bls.s	loc_7ED90
		move.w	#$A0,d0

loc_7ED90:
		lsr.w	#3,d0
		andi.w	#$FE,d0
		lea	byte_7EDBA(pc,d0.w),a2
		move.b	(a2)+,d0
		bclr	#0,4(a0)
		tst.b	d2
		beq.s	loc_7EDAE
		bset	#0,4(a0)
		neg.w	d0

loc_7EDAE:
		add.w	d0,d1
		move.w	d1,$10(a0)
		move.b	(a2)+,$22(a0)
		rts
; End of function sub_7ED6C

; ---------------------------------------------------------------------------
byte_7EDBA:	dc.b	0,   2
		dc.b	1,   2
		dc.b	2,   3
		dc.b	4,   3
		dc.b	5,   3
		dc.b	6,   4
		dc.b	8,   4
		dc.b	9,   4
		dc.b   $A,   5
		dc.b   $B,   5
		dc.b   $C,   5

; =============== S U B R O U T I N E =======================================


sub_7EDD0:

		tst.b	$28(a0)
		bne.s	locret_7EE10
		tst.b	$20(a0)
		bne.s	loc_7EDF2
		move.b	#$20,$20(a0)
		moveq	#$6E,d0
		jsr	Play_Sound_2.w
		movea.w	$46(a0),a1
		subq.b	#1,$29(a1)
		move.b	$1C(a0),$1C(a1)		; NAT: Copy hitler

loc_7EDF2:
		moveq	#0,d0
		btst	#0,$20(a0)
		bne.s	loc_7EE00
		addi.w	#8,d0

loc_7EE00:
		bsr.w	sub_7EE12
		subq.b	#1,$20(a0)
		bne.s	locret_7EE10
		move.b	$25(a0),$28(a0)

locret_7EE10:

		rts
; End of function sub_7EDD0


; =============== S U B R O U T I N E =======================================


sub_7EE12:
		lea	word_7EE1E(pc),a1
		lea	word_7EE26(pc,d0.w),a2
		jmp	CopyWordData_4.w
; End of function sub_7EE12

; ---------------------------------------------------------------------------
word_7EE1E:	dc.w $FC36
		dc.w $FC38
		dc.w $FC3A
		dc.w $FC3C
word_7EE26:	dc.w $666
		dc.w $444
		dc.w $222
		dc.w 0
		dc.w $888
		dc.w $AAA
		dc.w $CCC
		dc.w $EEE
; ---------------------------------------------------------------------------

loc_7EE36:
		move.b	$29(a0),d0
		cmp.b	$42(a0),d0
		bne.s	loc_7EE42
		rts
; ---------------------------------------------------------------------------

loc_7EE42:
		move.b	d0,$42(a0)
		bset	#1,$38(a0)

		move.b	$1C(a0),d6			; NAT: get hitter to d6
		jsr	Boss_AddPlayerScore		; handle hits
		cmpi.b	#8,d0
		blo.s	locret_7EE86

		move.l	#loc_7DF8C,(a0)
		clr.b	5(a0)
		move.w	#$7F,$2E(a0)
		move.l	#loc_7DFB8,$34(a0)
		bset	#6,$2A(a0)
		bsr.w	loc_7EE74
loc_7EE74:
		lea	Child6_CreateBossExplosion.w,a2
		jsr	CreateChild1_Normal.w
		bne.s	locret_7EE86
		move.b	#$E,$2C(a1)

locret_7EE86:

		rts

; =============== S U B R O U T I N E =======================================


sub_7EE88:
		move.b	$29(a0),d0
		cmp.b	$42(a0),d0
		bne.s	loc_7EE94

locret_7EE92:
		rts
; ---------------------------------------------------------------------------

loc_7EE94:
		move.b	d0,$42(a0)
		lea	$42(a0),a5		; NAT: Check player hits
		move.b	$1C(a0),d6
		jsr	Boss_HandlePlayerHit
		ble.s	loc_7EECC		; if dead, branch
		addq.b	#1,(a5)			; Do not remove a hit!

		move.w	#$800,$26(a0)
		lea	(word_7F03C).l,a1
		lea	(PalRotation_Data).w,a2
		move.l	(a1)+,(a2)+
		move.l	(a1)+,(a2)+
		clr.w	(a2)
		move.l	#loc_7E124,(__u_FADA).w
		bset	#1,$38(a0)
		bne.s	locret_7EE92
		lea	ChildObj_7EFC4(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_7EECC:
		bset	#7,$2A(a0)
		move.l	#Wait_FadeToLevelMusic,(a0)
		move.l	#loc_7E23C,$34(a0)
		lea	Child6_CreateBossExplosion.w,a2
		jsr	CreateChild1_Normal.w
		jmp	BossDefeated_StopTimer.w
; End of function sub_7EE88


; =============== S U B R O U T I N E =======================================


sub_7EEEE:

		move.w	$3C(a0),d0
		add.w	$1C(a0),d0
		cmpi.w	#$C00,d0
		blo.s	loc_7EF00
		subi.w	#$C00,d0

loc_7EF00:
		move.w	d0,$3C(a0)
		moveq	#0,d0
		move.b	$3C(a0),d0
		lea	(Player_1).w,a1
		move.b	byte_7EF2E(pc,d0.w),$22(a1)
		andi.b	#-4,4(a1)
		move.b	byte_7EF3A(pc,d0.w),d0
		or.b	d0,4(a1)
		moveq	#0,d0
		move.b	$22(a1),d0
		jmp	Player_Load_PLC.w
; End of function sub_7EEEE

; ---------------------------------------------------------------------------
byte_7EF2E:	dc.b $55
		dc.b $59
		dc.b $5A
		dc.b $5B
		dc.b $5A
		dc.b $59
		dc.b $55
		dc.b $56
		dc.b $57
		dc.b $58
		dc.b $57
		dc.b $56
byte_7EF3A:	dc.b 0
		dc.b 1
		dc.b 1
		dc.b 0
		dc.b 0
		dc.b 0
		dc.b 1
		dc.b 1
		dc.b 1
		dc.b 0
		dc.b 0
		dc.b 0
ObjDat3_7EF46:	dc.l Map_DEZMiniboss
		dc.w $A400
		dc.w prio(5)
		dc.b $20
		dc.b $20
		dc.b 0
		dc.b 0
word_7EF52:	dc.w prio(4)
		dc.b $C
		dc.b $C
		dc.b 2
		dc.b $17
word_7EF58:	dc.w prio(3)
		dc.b $10
		dc.b $10
		dc.b $15
		dc.b $86
word_7EF5E:	dc.w prio(2)
		dc.b 4
		dc.b 4
		dc.b $15
		dc.b $98
word_7EF64:	dc.w prio(1)
		dc.b 8
		dc.b 8
		dc.b $12
		dc.b 0
word_7EF6A:	dc.w prio(3)
		dc.b $10
		dc.b $18
		dc.b $11
		dc.b 0
word_7EF70:	dc.w prio(6)
		dc.b $18
		dc.b $10
		dc.b 1
		dc.b 0
word_7EF76:	dc.w prio(5)
		dc.b $18
		dc.b 4
		dc.b $B
		dc.b $9E
word_7EF7C:	dc.w prio(7)
		dc.b $10
		dc.b $80
		dc.b 6
		dc.b 0
word_7EF82:	dc.w prio(6)
		dc.b 8
		dc.b 4
		dc.b 8
		dc.b 0
word_7EF88:	dc.w prio(2)
		dc.b $10
		dc.b $14
		dc.b $23
		dc.b 0
ChildObjDat_7EF8E:dc.w 0
		dc.l loc_7E768
		dc.w $FC
ChildObjDat_7EF96:dc.w 7
		dc.l loc_7E80E
ChildObjDat_7EF9C:dc.w 7
		dc.l loc_7E916
ChildObjDat_7EFA2:dc.w 0
		dc.l loc_7EAB6
ChildObjDat_7EFA8:dc.w 1
		dc.l loc_7EACC
		dc.w $D800
		dc.l loc_7EACC
		dc.w $2800
ChildObjDat_7EFB6:dc.w 1
		dc.l loc_7E4CE
ChildObjDat_7EFBC:dc.w 0
		dc.l loc_7E74A
		dc.w 4
ChildObj_7EFC4:	dc.w 0
		dc.l loc_7E97E
		dc.w $1E
ChildObjDat_7EFCC:dc.w 1
		dc.l loc_7EA6C
ChildObjDat_7EFD2:dc.w 3
		dc.l loc_7EB0E
		dc.w $F000
		dc.l loc_7EB0E
		dc.w $1000
		dc.l loc_7EB0E
		dc.w $F418
		dc.l loc_7EB0E
		dc.w $C18
byte_7EFEC:	dc.b 1
		dc.b $B
		dc.b $C
		dc.b $D
		dc.b $E
		dc.b $F
		dc.b $10
		dc.b $FC
byte_7EFF4:	dc.b	0,   8
		dc.b	7,   9
		dc.b	7,  $A
		dc.b	7, $FC
Pal_DEZMiniboss1:	binclude "Levels/DEZ/Palettes/Miniboss 1.bin"
	even

Pal_DEZMiniboss2:	binclude "Levels/DEZ/Palettes/Miniboss 2.bin"
	even

word_7F03C:	dc.w 4
		dc.w 0
		dc.l word_7F046
		dc.w 0
word_7F046:	dc.w $FC36
		dc.w $20A
		dc.w   $66A,  $448,  $226,     7,  $66C,  $44A,	 $228,	   7,  $66A,  $448,  $226,     7,  $666,  $444,	 $222,	   7
		dc.w  $FFF4
; ---------------------------------------------------------------------------

Obj_DEZ_EndBoss:
		move.w	#$34B0,Camera_max_X_pos.w
		lea	word_7F0BE(pc),a1		; NAT: We have totally fucked the stuff
		jsr	(Check_CameraInRange).l		; here. Whole boss is gone!
		btst	#5,OptionsBits.w		; NAT: Check if bosses are on
		bne.s	loc_7F2FE			; if are, branch

		jmp	Boss_Force_End_2		; lock screen
; ---------------------------------------------------------------------------
word_7F0BE:	dc.w $098,  $2D0,  $3200, $3500		; NAT: Move camera up
		dc.w $3470, $3470, $290,  $290
; ---------------------------------------------------------------------------

loc_7F2FE:
		move.l	#.ok,(a0)
.ok		move.w	#$3680+$120,d0
		cmp.w	Player_1+x_pos.w,d0
		blo.s	loc_7F310
		cmp.w	Player_2+x_pos.w,d0
		bhs.w	locret_7FE2A

loc_7F310:
		st	(Act_3_flag).w
		move.w	(Ring_count).w,(Act3_TempRings).w
		move.l	(Timer).w,(Act3_TempTime).w
	;	move.b	(Player_1+status_secondary).w,(Saved2_status_secondary).w
		move.w	#$1700,d0
		jsr	StartNewLevel.w
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

Obj_DEZ3_Boss:
		moveq	#0,d0
		move.b	5(a0),d0
		cmp.b	#$14,d0				; NAT: Check if moving left
		blt.s	.nop				; if not, skip
		jsr	Obj_DEZ3B_SetSpawn(pc)

.nop		move.w	off_7FD84(pc,d0.w),d1
		jsr	off_7FD84(pc,d1.w)
		move.w	$10(a0),(ScrEvents_3).w
		move.w	$14(a0),(ScrEvents_4).w
		rts
; ---------------------------------------------------------------------------
off_7FD84:	dc.w loc_7FD9E-off_7FD84

		dc.w loc_7FE2C-off_7FD84
		dc.w loc_7FE74-off_7FD84
		dc.w loc_7FE96-off_7FD84
		dc.w loc_7FEE2-off_7FD84
		dc.w loc_7FEF6-off_7FD84
		dc.w sub_7FF3E-off_7FD84
		dc.w loc_7FFD2-off_7FD84
		dc.w loc_8001C-off_7FD84	; $10
		dc.w loc_80058-off_7FD84
		dc.w loc_80082-off_7FD84
		dc.w loc_800DE-off_7FD84
		dc.w loc_800EE-off_7FD84
; ---------------------------------------------------------------------------

loc_7FD9E:
		move.b	#$70,BossHitMode.w		; NAT: Enable hit mode
		clr.w	BossHitsP1.w			; clear hits count
		move.l	#$05C000CC,PlayerSpawn.w	; NAT: set player spawn pos
		st	Boss_flag.w			; NAT: Enable boss mode
		moveq	#0,d0				; NAT: Reset speed shoes tempo
		jsr	Change_Music_Tempo.w		; update music tempo

		move.b	#2,5(a0)
		bset	#2,4(a0)
		move.w	a0,(__u_FAA4).w
		clr.l	(__u_FA84).w
		lea	(ArtKosM_DEZFinalBossMisc).l,a1
		move.w	#$71E0,d2
		jsr	Queue_Kos_Module.w
		jsr	Create_New_Sprite.w
		bne.s	loc_7FDD0
		move.l	#loc_80DE0,(a1)

loc_7FDD0:
		jsr	Create_New_Sprite.w
		bne.s	loc_7FDE2
		move.l	#loc_80D72,(a1)
		move.w	a0,$46(a1)

loc_7FDE2:
		lea	(Player_1).w,a1
		move.w	#$30,$10(a1)
		move.w	#$CD,$14(a1)
		bsr.w	sub_7FE06
		lea	(Player_2).w,a1
		move.w	#$10,$10(a1)
		move.w	#$CD,$14(a1)

; =============== S U B R O U T I N E =======================================


sub_7FE06:
		move.b	#-$7F,$2E(a1)
		move.b	#0,$20(a1)
		move.w	#$600,$18(a1)
		move.w	#$600,$1C(a1)
	;	cmpi.b	#1,$38(a1)		; NAT: No u
	;	bne.s	locret_7FE2A
	;	addq.w	#4,$14(a1)

locret_7FE2A:
		rts
; End of function sub_7FE06

; ---------------------------------------------------------------------------

loc_7FE2C:
		bsr.s	sub_7FE5C
		move.w	(Camera_X_pos).w,d1
		addi.w	#$98,d1
		cmp.w	d1,d0
		blo.s	locret_7FE2A
		move.b	#4,5(a0)
		clr.b	(Scroll_lock).w

		moveq	#Mus_FinalBoss,d0			; NAT: Just play it niglet
		move.b	d0,(Level_music+$1).w
		jmp	Play_Sound.w

; =============== S U B R O U T I N E =======================================


sub_7FE5C:

		lea	(Player_2).w,a1
		bsr.w	sub_7FE68
		lea	(Player_1).w,a1
; End of function sub_7FE5C


; =============== S U B R O U T I N E =======================================


sub_7FE68:
		move.w	$10(a1),d0
		addq.w	#6,d0
		move.w	d0,$10(a1)
		rts
; End of function sub_7FE68

; ---------------------------------------------------------------------------

loc_7FE74:
		bsr.s	sub_7FE5C
		cmpi.w	#$368,d0		; NAT: Make sure the camera is scrolled right
		blo.s	locret_7FE94
		move.b	#6,5(a0)
		bsr.w	sub_7FE8A
		lea	(Player_2).w,a1

; =============== S U B R O U T I N E =======================================


sub_7FE8A:
		jsr	Stop_Object.w
		move.b	#5,$20(a1)

locret_7FE94:
		rts
; End of function sub_7FE8A

; ---------------------------------------------------------------------------

loc_7FE96:
		btst	#1,(__u_FAB8).w
		beq.s	locret_7FEE0
		move.b	#8,5(a0)
		move.w	#$BF,$2E(a0)
		move.w	#-$80,$1A(a0)
		clr.b	(Player_1+$2E).w
		clr.b	(Player_2+$2E).w
		jsr	Create_New_Sprite.w
		bne.s	loc_7FEC6
		move.l	#loc_8642E,(a1)

loc_7FEC6:
		lea	PLC_83D64.w,a1
		jsr	Load_PLC_Raw.w
		jsr	Create_New_Sprite.w
		bne.s	locret_7FEE0
		move.l	#loc_810A0,(a1)

locret_7FEE0:

		rts
; ---------------------------------------------------------------------------

loc_7FEE2:
		jsr	MoveSprite2.w
		subq.w	#1,$2E(a0)
		bpl.s	locret_7FEF4
		move.b	#$A,5(a0)

locret_7FEF4:
		rts
; ---------------------------------------------------------------------------

loc_7FEF6:
		btst	#2,(__u_FAB8).w
		beq.s	locret_7FEF4
		move.b	#$C,5(a0)
		move.w	$14(a0),$3A(a0)
		move.w	#1,$40(a0)
		jsr	Create_New_Sprite.w
		bne.s	loc_7FF22
		move.l	#loc_804F0,(a1)
		move.w	a0,$46(a1)

loc_7FF22:
		jsr	Create_New_Sprite.w
		bne.s	loc_7FF34
		move.l	#loc_806DA,(a1)
		move.w	a0,$46(a1)

loc_7FF34:
		lea	ChildObjDat_81310(pc),a2
		jmp	CreateChild6_Simple.w

; =============== S U B R O U T I N E =======================================


sub_7FF3E:

		move.w	$40(a0),d0
		add.w	d0,$10(a0)
		move.b	$26(a0),d0
		addq.b	#2,d0
		andi.b	#$7F,d0
		move.b	d0,$26(a0)
		beq.s	loc_7FF6A
		jsr	GetSineCosine.w
		asr.w	#4,d0
		move.w	$3A(a0),d1
		sub.w	d0,d1
		move.w	d1,$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_7FF6A:
		move.b	#$E,5(a0)
		move.w	#$1F,$2E(a0)
		move.w	#$14,(ScrShake_Value).w
		moveq	#-$65,d0
		jsr	Play_Sound_2.w
		moveq	#0,d0
		move.b	$30(a0),d0
		jmp	loc_7FF8E(pc,d0.w)
; End of function sub_7FF3E

; ---------------------------------------------------------------------------

loc_7FF8E:
		bra.w	loc_7FF9A
; ---------------------------------------------------------------------------
		bra.w	loc_7FFB2
; ---------------------------------------------------------------------------
		bra.w	loc_7FFBC
; ---------------------------------------------------------------------------

loc_7FF9A:
		move.l	#loc_7FFD8,$34(a0)
		cmpi.w	#$540,$10(a0)
		blo.s	locret_7FFD0
		move.b	#4,$30(a0)
		rts
; ---------------------------------------------------------------------------

loc_7FFB2:
		move.l	#loc_8000E,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_7FFBC:
		move.b	#$18,5(a0)
		move.w	#$F,$2E(a0)
		move.l	#loc_800D0,$34(a0)

locret_7FFD0:
		rts
; ---------------------------------------------------------------------------

loc_7FFD2:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_7FFD8:

		move.b	#$C,5(a0)
		moveq	#1,d2
		move.w	(Player_1+x_pos).w,d0
		cmpi.w	#$610,d0
		bhs.s	loc_7FFFA
		move.w	$10(a0),d1
		subi.w	#$80,d1
		cmp.w	d1,d0
		bhs.s	loc_80008
		bra.w	loc_80006
; ---------------------------------------------------------------------------

loc_7FFFA:
		move.w	$10(a0),d1

loc_7FFFE:
		addi.w	#$80,d1
		cmp.w	d1,d0
		bhs.s	loc_80008

loc_80006:
		neg.w	d2

loc_80008:

		move.w	d2,$40(a0)
		rts
; ---------------------------------------------------------------------------

loc_8000E:
		move.b	#$10,5(a0)

loc_80014:
		bset	#1,$38(a0)
		rts
; ---------------------------------------------------------------------------

loc_8001C:
		cmpi.w	#-1,(__u_FA82).w
		beq.s	loc_80030
		btst	#1,$38(a0)
		beq.s	loc_7FFD8
		rts
; ---------------------------------------------------------------------------

loc_80030:
		move.b	#$12,5(a0)
		bset	#5,$38(a0)
		jsr	Create_New_Sprite.w
		bne.s	loc_8004A
		move.l	#loc_8642E,(a1)

loc_8004A:
		move.w	(Camera_X_pos).w,d0
		move.w	d0,(Camera_max_X_pos).w
		move.w	d0,(Camera_min_X_pos).w
		rts
; ---------------------------------------------------------------------------

loc_80058:
		move.w	$14(a0),d0
		addq.w	#1,d0
		move.w	d0,$14(a0)
		cmpi.w	#$18F,d0
		blo.s	locret_80080
		move.b	#$14,5(a0)
		move.w	#$6C0,(ScrEvents_Routine2).w
		move.w	(Camera_X_pos).w,d0
		subi.w	#$40,d0
		move.w	d0,$10(a0)

locret_80080:
		rts
; ---------------------------------------------------------------------------

loc_80082:
		move.w	$14(a0),d0
		subq.w	#1,d0
		move.w	d0,$14(a0)
		cmpi.w	#$AF,d0
		bhi.w	locret_80C88
		move.b	#8,$30(a0)
		move.w	#$80,$1C(a0)
		move.w	$14(a0),$3A(a0)
		clr.w	$26(a0)
		st	(Scroll_lock).w
		jsr	Create_New_Sprite.w
		bne.s	loc_800C0
		move.l	#loc_80590,(a1)
		move.w	a0,$46(a1)

loc_800C0:
		lea	(ArtKosM_MasterEmerald).l,a1
		move.w	#-$6600,d2
		jsr	Queue_Kos_Module.w

loc_800D0:
		move.b	#$16,5(a0)
		move.w	#1,$40(a0)
		rts
; ---------------------------------------------------------------------------

loc_800DE:
		bsr.w	sub_80F3A
		bsr.w	sub_81046
		bsr.w	sub_7FF3E
		bra.w	sub_8100E
; ---------------------------------------------------------------------------

loc_800EE:
		bsr.w	sub_80F3A
		bsr.w	sub_81046
		addq.w	#1,$10(a0)
		bsr.w	sub_8100E
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_80102:
		jsr	MoveSprite2.w
		cmpi.w	#$18F,$14(a0)
		bhs.s	loc_8011E
		move.w	$10(a0),(ScrEvents_3).w
		move.w	$14(a0),(ScrEvents_4).w
		rts
; ---------------------------------------------------------------------------

loc_8011E:
		clr.w	(ScrShake_Value).w
		clr.w	(ScrEvents_Routine2).w
		bset	#5,$38(a0)
		jsr	Create_New_Sprite.w
		bne.s	loc_8013A
		move.l	#loc_80160,(a1)

loc_8013A:
		lea	(ArtKosM_KnuxFinalBossCrane).l,a1
		move.w	#-$6C60,d2
		jsr	Queue_Kos_Module.w
		lea	(ArtKosM_DEZFinalBossDebris).l,a1
		move.w	#$2000,d2
		jsr	Queue_Kos_Module.w
		jmp	Go_Delete_Sprite_2.w
; ---------------------------------------------------------------------------

loc_80160:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_8017A(pc,d0.w),d1
		jsr	off_8017A(pc,d1.w)
		jsr	(sub_80E2C).l
		jsr	Draw_And_Touch_Sprite.w

Obj_DEZ3B_SetSpawn:
		move.w	Camera_X_pos.w,d1		; NAT: get camera
		add.w	#$130,d1			; with offset
		move.w	d1,PlayerSpawn.w		; set respawn xpos
		rts
; ---------------------------------------------------------------------------
off_8017A:	dc.w loc_80184-off_8017A

		dc.w loc_801D8-off_8017A
		dc.w loc_80208-off_8017A
		dc.w loc_8023E-off_8017A
		dc.w loc_80264-off_8017A
; ---------------------------------------------------------------------------

loc_80184:
		lea	ObjDat3_812EC(pc),a1
		jsr	SetUp_ObjAttributes.w
		bset	#0,4(a0)
		move.b	#$F,$28(a0)
		move.b	#8,$29(a0)
		move.w	(Camera_X_pos_copy).w,d0
		addi.w	#$60,d0
		move.w	d0,$10(a0)
		move.w	(Camera_Y_pos_copy).w,d0
		addi.w	#$140,d0
		move.w	d0,$14(a0)
		jsr	Create_New_Sprite.w
		bne.s	loc_801C6
		move.l	#loc_8642E,(a1)

loc_801C6:
		lea	(Child1_MakeRoboHead3).l,a2
		jsr	CreateChild1_Normal.w
		lea	ChildObjDat_81330(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_801D8:
		subq.w	#1,$14(a0)
		move.w	(Camera_Y_pos).w,d0
		addi.w	#$50,d0
		cmp.w	$14(a0),d0
		blo.w	locret_80C88
		move.b	#4,5(a0)
		move.w	#$500,$18(a0)
		lea	(Child1_MakeRoboShipFlame).l,a2
		jsr	CreateChild1_Normal.w
		jmp	Swing_Setup1.w
; ---------------------------------------------------------------------------

loc_80208:
		bsr.w	sub_80F0E
		jsr	Swing_UpAndDown.w
		jsr	MoveSprite2.w
		move.w	(Camera_X_pos).w,d0
		addi.w	#$100,d0
		cmp.w	$10(a0),d0
		bhi.s	locret_8023C
		move.b	#6,5(a0)
		clr.w	$18(a0)
		move.w	#$1F,$2E(a0)
		move.l	#loc_80250,$34(a0)

locret_8023C:
		rts
; ---------------------------------------------------------------------------

loc_8023E:
		bsr.w	sub_80EF4
		jsr	Swing_UpAndDown.w
		jsr	MoveSprite2.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_80250:
		move.b	#8,5(a0)
		move.w	#$500,$18(a0)
		bset	#7,$38(a0)
		rts
; ---------------------------------------------------------------------------

loc_80264:
		bsr.w	sub_80F0E
		bsr.w	sub_80EF4
		jsr	Swing_UpAndDown.w
		move.w	$18(a0),d0
		cmpi.w	#$280,d0
		bls.s	loc_80282
		subi.w	#$10,d0
		move.w	d0,$18(a0)

loc_80282:
		jsr	MoveSprite2.w
		move.w	(Camera_X_pos).w,d0
		addi.w	#$100,d0
		cmp.w	$10(a0),d0
		bls.s	locret_8029A
		move.w	d0,$10(a0)

locret_8029A:
		rts
; ---------------------------------------------------------------------------

loc_8029C:
		bset	#3,(__u_FAB8).w
		move.w	#$F,$2E(a0)
		move.l	#loc_802B2,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_802B2:
		move.l	#loc_802C0,(a0)
		bset	#4,(__u_FAB8).w
		rts
; ---------------------------------------------------------------------------

loc_802C0:
		jsr	Swing_UpAndDown.w
		jsr	MoveSprite2.w
		move.w	(Camera_X_pos).w,d0
		addi.w	#$180,d0
		cmp.w	$10(a0),d0
		blo.s	loc_802DE
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_802DE:
		move.l	#loc_8030E,(a0)
		bset	#5,(__u_FAB8).w
		ori.b	#$30,$38(a0)
		jsr	Create_New_Sprite.w
		bne.s	loc_802FE
		move.l	#loc_8642E,(a1)

loc_802FE:
;		lea	(ArtKosM_BadnikExplosion).l,a1	; NAT: WTF why is this even a thing anyway???
;		lea	(ArtNem_Explosion).l,a1
;		move.w	#$5A0*32,d2
;		jmp	Queue_Kos_Module.w
		moveq	#2,d0
		jmp	Load_PLC.w		; NAT: Instead, just load the PLC version.
; ---------------------------------------------------------------------------

loc_8030E:
		move.l	#loc_80382,(a0)
		clr.b	$38(a0)
		move.w	(Camera_X_pos).w,d0
		subi.w	#$80,d0
		move.w	d0,$10(a0)
		move.w	(Camera_Y_pos).w,d0
		addi.w	#$80,d0
		move.w	d0,$14(a0)
;		lea	Child6_CreateBossExplosion.w,a2
;		jsr	CreateChild6_Simple.w
;		bne.s	loc_80344
;		move.b	#$16,$2C(a1)

loc_80344:
;		lea	Child6_CreateBossExplosion.w,a2
;		jsr	CreateChild6_Simple.w
;		bne.s	loc_80358
;		move.b	#$16,$2C(a1)

loc_80358:
;		lea	Child6_CreateBossExplosion.w,a2
;		jsr	CreateChild6_Simple.w
;		bne.s	loc_8036C
;		move.b	#$18,$2C(a1)

loc_8036C:
;		lea	Child6_CreateBossExplosion.w,a2
;		jsr	CreateChild6_Simple.w
;		bne.s	locret_80380
;		move.b	#$18,$2C(a1)

locret_80380:
		rts
; ---------------------------------------------------------------------------

loc_80382:
		addq.w	#2,$10(a0)
		move.w	(Camera_X_pos).w,d0
		addi.w	#$80,d0
		cmp.w	$10(a0),d0
		bhs.s	locret_803D4
		move.l	#loc_803D6,(a0)
	;	jsr	Create_New_Sprite.w
	;	bne.s	loc_803B4
	;	move.l	#loc_85E64,(a1)
	;	move.w	a1,$44(a0)
	;	move.w	#3,$3A(a1)
	;	rts
; ---------------------------------------------------------------------------

;loc_803B4:
;		lea	(Dynamic_object_RAM+$11A2).w,a1
;		movea.l	a1,a2
;		moveq	#0,d0
;		moveq	#$24,d1

;loc_803BE:
;		move.w	d0,(a1)+
;		dbf	d1,loc_803BE
;		move.l	#loc_85E64,(a2)
;		move.w	a2,$44(a0)
;		move.w	#3,$3A(a2)

locret_803D4:
		rts
; ---------------------------------------------------------------------------

loc_803D6:
		clr.w	(ScrShake_Value).w			; stop yer shakin'
		move.w	Camera_X_pos.w,d4
		move.w	d4,d3
		add.w	#$C0,d3
		move.w	d3,x_pos(a0)

		lea	.monitordata(pc),a2		; load monitor data to a2
		moveq	#3-1,d6
		move.l	#Obj_HiddenMonitor,d5

.load		jsr	Create_New_Sprite.w		; NAT: Load hidden monitors
		bne.s	.exit
		move.l	d5,(a1)
		addq.b	#1,$2C(a1)			; load +1
		move.w	#$FE,y_pos(a1)

		add.w	(a2)+,d4
		move.w	d4,x_pos(a1)
		dbf	d6,.load
.exit		jmp	Obj_EndSignControl_HitHUD	; NAT: do extra stuff here

.monitordata	dc.w $60, $50, $60
; ---------------------------------------------------------------------------

loc_80426:
		lea	ObjDat3_81304(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_80494,(a0)
		jsr	Random_Number.w
		move.w	#prio(0),8(a0)
		tst.w	d0
		bpl.s	loc_8044C
		move.w	#prio(6),8(a0)

loc_8044C:
		andi.w	#$1FF,d0
		move.w	(Camera_X_pos).w,d1
		add.w	d0,d1
		addi.w	#$20,d1
		move.w	d1,$10(a0)
		move.w	(Camera_Y_pos).w,d1
		subi.w	#$20,d1
		move.w	d1,$14(a0)
		andi.b	#3,d0
		or.b	d0,4(a0)
		swap	d0
		move.w	d0,d1
		andi.w	#3,d0
		lea	RawAni_80490(pc,d0.w),a1
		move.b	(a1)+,$22(a0)
		andi.w	#$300,d1
		addi.w	#$100,d1
		move.w	d1,$1A(a0)
		rts
; ---------------------------------------------------------------------------
RawAni_80490:	dc.b	0,   1,	  2,   1
; ---------------------------------------------------------------------------

loc_80494:
		jsr	MoveSprite2.w
		move.w	(Camera_Y_pos).w,d0
		addi.w	#$108,d0
		cmp.w	$14(a0),d0
		blt.w	loc_810D0
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------

loc_804B0:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_804C4(pc,d0.w),d1
		jsr	off_804C4(pc,d1.w)
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
off_804C4:	dc.w loc_804C8-off_804C4

		dc.w loc_804D2-off_804C4
; ---------------------------------------------------------------------------

loc_804C8:
		lea	ObjDat3_812F8(pc),a1
		jmp	SetUp_ObjAttributes.w
; ---------------------------------------------------------------------------

loc_804D2:
		btst	#3,(__u_FAB8).w
		bne.s	loc_804E0
		jmp	Refresh_ChildPositionAdjusted.w
; ---------------------------------------------------------------------------

loc_804E0:
		move.l	#Wait_Draw,(a0)
		move.l	#Go_Delete_Sprite,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_804F0:
		lea	ObjDat3_812C8(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_80512,(a0)
		move.w	#$6C,$42(a0)
		move.w	#8,$44(a0)
		move.b	#8,$29(a0)

loc_80512:

		tst.b	(__u_FAA9).w
		bne.s	loc_8051C
		bra.w	sub_8125C
; ---------------------------------------------------------------------------

loc_8051C:
		move.l	#loc_80522,(a0)

loc_80522:
		tst.b	(__u_FAA9).w
		bmi.s	loc_80536
		bsr.w	sub_8125C
		bsr.w	sub_81024
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_80536:
		move.l	#loc_80542,(a0)
		move.b	#$16,$28(a0)

loc_80542:
		tst.b	(__u_FAA9).w
		bpl.s	loc_8055C
		bsr.w	sub_81024
		bsr.w	sub_8119A
		jsr	Add_SpriteToCollisionResponseList.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_8055C:
		move.l	#loc_80562,(a0)

loc_80562:
		tst.b	(__u_FAA9).w
		beq.s	loc_80576
		bsr.w	sub_81024
		bsr.w	sub_8125C
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_80576:
		move.l	#loc_80512,(a0)
		bclr	#7,4(a0)
		rts
; ---------------------------------------------------------------------------

loc_80584:
		clr.w	(ScrEvents_A).w
		bsr.w	sub_81024
		jmp	Child_Draw_Sprite2.w
; ---------------------------------------------------------------------------

loc_80590:
		move.l	#loc_805AE,(a0)
		move.b	#8,$28(a0)
		move.b	#-1,$29(a0)
		move.w	#$A0,$42(a0)
		move.w	#-$34,$44(a0)

loc_805AE:

		tst.b	$28(a0)
		beq.s	loc_805C2
		bsr.w	sub_81024
		jsr	Add_SpriteToCollisionResponseList.w
		jmp	Child_CheckParent.w
; ---------------------------------------------------------------------------

loc_805C2:
		move.l	#loc_805F0,(a0)
		move.b	#-1,$29(a0)
		movea.w	$46(a0),a1
		bset	#2,$38(a1)
		st	(ScrEvents_2).w
		jsr	Create_New_Sprite3.w
		bne.s	loc_805F0
		move.l	#loc_8060C,(a1)
		move.w	$46(a0),$46(a1)

loc_805F0:

		movea.w	$46(a0),a1
		btst	#2,$38(a1)
		bne.s	loc_80608
		move.l	#loc_805AE,(a0)
		move.b	$25(a0),$28(a0)

loc_80608:
		jmp	Child_CheckParent.w
; ---------------------------------------------------------------------------

loc_8060C:
		lea	ObjDat3_812AA(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_80634,(a0)
		bset	#0,4(a0)
		move.w	#$7C,$42(a0)
		move.w	#$28,$44(a0)
		move.b	#1,(__u_FAA9).w

loc_80634:
		move.w	$44(a0),d0
		addq.w	#4,d0
		move.w	d0,$44(a0)
		cmpi.w	#$68,d0
		blo.s	loc_80672
		move.l	#loc_8067A,(a0)
		bset	#2,$38(a0)
		move.b	#-$80,(__u_FAA9).w
		st	(ScrEvents_2).w
		jsr	Create_New_Sprite.w
		bne.s	loc_80672
		move.l	#loc_807BC,(a1)
		move.w	$46(a0),$46(a1)
		move.w	a0,$3A(a1)

loc_80672:

		bsr.w	sub_81024
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_8067A:
		btst	#2,$38(a0)
		beq.s	loc_8068A
		bsr.w	sub_81024
		jmp	Child_CheckParent.w
; ---------------------------------------------------------------------------

loc_8068A:
		move.l	#loc_806A6,(a0)
		move.w	#$80,$2E(a0)
		move.b	#1,(__u_FAA9).w
		st	(ScrEvents_2).w
		move.b	#1,(__u_FAA9).w

loc_806A6:
		move.w	$44(a0),d0
		subq.w	#4,d0
		move.w	d0,$44(a0)
		cmpi.w	#$28,d0
		bhi.s	loc_806D2
		movea.w	$46(a0),a1
		bclr	#2,$38(a1)
		clr.w	$1C(a1)
		clr.b	(__u_FAA9).w
		st	(ScrEvents_2).w
		jsr	Go_Delete_Sprite.w

loc_806D2:
		bsr.w	sub_81024
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_806DA:

		lea	ObjDat3_812D4(pc),a1
		jsr	SetUp_ObjAttributes.w
		lea	(Collected_emeralds_array).w,a1
		moveq	#3,d0
		moveq	#6,d1

loc_806EC:
		cmp.b	(a1)+,d0
		bne.s	loc_8070A
		dbf	d1,loc_806EC
		st	$3A(a0)
		lea	word_813AA(pc),a1
		lea	(PalRotation_Data).w,a2
		moveq	#3,d0

loc_80702:
		move.l	(a1)+,(a2)+
		dbf	d0,loc_80702
		clr.w	(a2)

loc_8070A:
		tst.b	$2C(a0)
		bne.s	loc_80724
		move.l	#loc_80730,(a0)
		move.w	#$58,$42(a0)
		move.w	#8,$44(a0)
		rts
; ---------------------------------------------------------------------------

loc_80724:
		move.l	#loc_80760,(a0)
		clr.b	$22(a0)
		rts
; ---------------------------------------------------------------------------

loc_80730:
		tst.b	$3A(a0)
		beq.s	loc_8073A
		jsr	Run_PalRotationScript.w

loc_8073A:
		bsr.w	sub_81024
		movea.w	$46(a0),a1
		btst	#4,$38(a1)
		bne.w	loc_810D0
		tst.b	(__u_FAA9).w
		beq.s	loc_80758
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_80758:
		bclr	#7,4(a0)
		rts
; ---------------------------------------------------------------------------

loc_80760:
		tst.b	$3A(a0)
		beq.s	loc_8076A
		jsr	Run_PalRotationScript.w

loc_8076A:
		jsr	Refresh_ChildPosition.w
		btst	#4,(__u_FAB8).w
		beq.s	loc_8077C
		move.l	#loc_80782,(a0)


loc_8077C:
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_80782:
		tst.b	$3A(a0)
		beq.s	loc_8078C
		jsr	Run_PalRotationScript.w

loc_8078C:
		jsr	MoveSprite.w
		cmpi.w	#$140,$14(a0)
		blo.s	loc_807A6
		jmp	Delete_Current_Sprite.w	; NAT: ROFLMAO GET REKT
	;	move.l	#loc_807AC,(a0)
	;	move.w	#$CF,$14(a0)

loc_807A6:
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_807AC:
		tst.b	$3A(a0)
		beq.s	loc_807B6
		jsr	Run_PalRotationScript.w

loc_807B6:
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_807BC:
		lea	ObjDat3_812B6(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_807EE,(a0)
		move.w	#$58,$42(a0)
		move.w	#4,$44(a0)
		move.l	#loc_80802,$34(a0)
		move.b	#$13,$39(a0)
		moveq	#$53,d0
		jsr	Play_Sound_2.w

loc_807EE:
		bsr.w	sub_80FFA
		lea	byte_8135A(pc),a1
		jsr	Animate_RawNoSSTMultiDelay.w
		bsr.w	sub_81024
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_80802:
		move.l	#loc_80810,(a0)
		move.w	#$78,$2E(a0)
		rts
; ---------------------------------------------------------------------------

loc_80810:
		subq.w	#1,$2E(a0)
		bmi.s	loc_8083C
		cmpi.w	#$28,$2E(a0)
		blo.s	loc_80822
		bsr.w	sub_80FFA

loc_80822:
		move.b	#$1A,$22(a0)
		btst	#0,d0
		bne.s	loc_80834
		move.b	#$1F,$22(a0)

loc_80834:
		bsr.w	sub_81024
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_8083C:
		move.l	#loc_8086C,(a0)
		addi.w	#$34,$42(a0)
		addi.w	#4,$44(a0)
		lea	byte_81397(pc),a1
		jsr	Set_Raw_Animation.w
		move.l	#loc_80888,$34(a0)
		bclr	#7,4(a0)
		moveq	#$4E,d0
		jsr	Play_Sound_2.w

loc_8086C:
		jsr	Animate_RawMultiDelay.w
		beq.s	loc_8087C
		moveq	#0,d0
		move.b	$22(a0),d0
		move.w	d0,(ScrEvents_A).w

loc_8087C:
		bsr.w	sub_80FA6
		bsr.w	sub_81024
		jmp	Child_CheckParent.w
; ---------------------------------------------------------------------------

loc_80888:
		move.l	#loc_80894,(a0)
		move.w	#$5F,$2E(a0)

loc_80894:
		subq.w	#1,$2E(a0)
		bmi.s	loc_8089E
		jmp	Child_CheckParent.w
; ---------------------------------------------------------------------------

loc_8089E:
		movea.w	$3A(a0),a1
		bclr	#2,$38(a1)
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_808AE:
		lea	word_812C2(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_808FA,(a0)
		move.l	#Go_Delete_Sprite,$34(a0)
		movea.w	$46(a0),a1
		move.w	$10(a1),d2
		addi.w	#$64,d2
		move.w	$14(a1),d3
		addq.w	#4,d3
		jsr	Random_Number.w
		andi.w	#$1F,d0
		add.w	d0,d2
		swap	d0
		andi.w	#$7F,d0
		subi.w	#$40,d0
		add.w	d0,d3
		move.w	d2,$10(a0)
		move.w	d3,$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_808FA:
		lea	byte_8138E(pc),a1
		jsr	Animate_RawNoSSTMultiDelay.w
		subi.w	#$40,$18(a0)
		movea.w	$46(a0),a1
		move.w	$14(a1),d0
		sub.w	$14(a0),d0
		jsr	GetSineCosine.w
		add.w	d0,d0
		move.w	d0,$1A(a0)
		jsr	MoveSprite2.w
		move.w	$10(a1),d0
		addi.w	#$3C,d0
		cmp.w	$10(a0),d0
		blo.s	loc_8093A
		jsr	Go_Delete_Sprite.w

loc_8093A:
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

Obj_DEZ3_Boss_Fireball:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_80952(pc,d0.w),d1
		jsr	off_80952(pc,d1.w)
		bra.w	sub_81024
; ---------------------------------------------------------------------------
off_80952:	dc.w loc_80956-off_80952

		dc.w loc_80980-off_80952
; ---------------------------------------------------------------------------

loc_80956:
		move.b	#2,5(a0)
		bset	#2,4(a0)
		clr.b	$39(a0)
		clr.b	$23(a0)
		move.w	#$B0,$42(a0)
		move.w	#-$18,$44(a0)
		moveq	#$48,d0
		jsr	Play_Sound_2.w
		rts
; ---------------------------------------------------------------------------

loc_80980:
		subq.w	#1,$2E(a0)
		bpl.w	locret_80C88
		cmpi.w	#$C7,$14(a0)
		bhs.s	loc_809CA
		move.w	#1,$2E(a0)
		move.b	$23(a0),d0
		move.b	d0,d1
		addq.b	#1,d0
		cmpi.b	#3,d0
		blo.s	loc_809A6
		moveq	#0,d0

loc_809A6:
		move.b	d0,$23(a0)
		andi.w	#3,d1
		add.w	d1,d1
		lea	byte_809EE(pc,d0.w),a1
		move.b	(a1)+,d0
		ext.w	d0
		add.w	d0,$42(a0)
		move.b	(a1)+,d0
		ext.w	d0
		add.w	d0,$44(a0)
		moveq	#0,d2
		bra.w	sub_8106E
; ---------------------------------------------------------------------------

loc_809CA:
		move.l	#loc_809F4,(a0)
		move.w	#$CF,$14(a0)
		clr.b	$23(a0)
		move.w	#2,$2E(a0)
		bsr.w	sub_80A26
		moveq	#2,d2
		bsr.w	sub_8106E
		addq.w	#4,sp
		rts
; ---------------------------------------------------------------------------
byte_809EE:	dc.b	8,   8
		dc.b  $FC,   4
		dc.b   $C,  $C
; ---------------------------------------------------------------------------

loc_809F4:
		subq.w	#1,$2E(a0)
		bpl.s	sub_80A26
		move.w	#2,$2E(a0)
		addq.w	#8,$42(a0)
		cmpi.w	#$300,$42(a0)
		bhs.w	loc_810D0
		moveq	#8,d0
		moveq	#1,d2
		bchg	#0,$23(a0)
		beq.s	loc_80A1E
		neg.w	d0
		moveq	#2,d2

loc_80A1E:
		add.w	d0,$14(a0)
		bsr.w	sub_8106E

; =============== S U B R O U T I N E =======================================


sub_80A26:

		movea.w	$46(a0),a1
		move.w	$42(a0),d0
		move.w	$10(a1),d1
		add.w	d0,d1
		move.w	d1,$10(a0)
		rts
; End of function sub_80A26

; ---------------------------------------------------------------------------

loc_80A3A:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_80A5C(pc,d0.w),d1
		jsr	off_80A5C(pc,d1.w)
		tst.b	$2C(a0)
		bne.s	loc_80A56
		bsr.w	sub_81024
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------

loc_80A56:
		bsr.s	sub_80A26
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------
off_80A5C:	dc.w loc_80A60-off_80A5C

		dc.w loc_80A98-off_80A5C
; ---------------------------------------------------------------------------

loc_80A60:
		lea	ObjDat3_8129E(pc),a1
		jsr	SetUp_ObjAttributes.w
		bset	#4,$2B(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		cmpi.b	#2,d0
		bne.s	loc_80A82
		bset	#0,4(a0)

loc_80A82:
		lsl.w	#2,d0
		move.l	off_80A8C(pc,d0.w),$30(a0)
		rts
; ---------------------------------------------------------------------------
off_80A8C:	dc.l byte_80AD4
		dc.l byte_80AEE
		dc.l byte_80B08
; ---------------------------------------------------------------------------

loc_80A98:
		subq.b	#1,$24(a0)
		bpl.s	locret_80ACE
		moveq	#0,d0
		move.b	$23(a0),d0
		addq.b	#4,d0
		move.b	d0,$23(a0)
		movea.l	$30(a0),a1
		lea	(a1,d0.w),a1
		move.b	(a1)+,d1
		bmi.s	loc_80AD0
		move.b	d1,$22(a0)
		move.b	(a1)+,$24(a0)
		move.b	(a1)+,d0
		ext.w	d0
		add.w	d0,$42(a0)
		move.b	(a1)+,d0
		ext.w	d0
		add.w	d0,$44(a0)

locret_80ACE:
		rts
; ---------------------------------------------------------------------------

loc_80AD0:
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------
byte_80AD4:	dc.b    6,   0,   0,   0,   7,   1,   0,   4,   8,   4,   0,   4,   9,   4,   0,   0,  $A,   5,   0,   4
		dc.b   $B,   5,   0,   0, $FF, $F4
byte_80AEE:	dc.b   $C,   0,   0,   0,  $D,   1,   4, $FC,  $E,   4,   4, $FC,  $F,   4,   0,   0, $10,   5,   0,   0
		dc.b  $11,   5,   0,   4, $FF, $F4
byte_80B08:	dc.b   $C,   0,   0,   0,  $D,   1,   4, $FC,  $E,   4,   4, $FC,  $F,   4,   0,   0, $10,   5,   0,   0
		dc.b  $12,   5,   4, $FC, $FF, $F4
; ---------------------------------------------------------------------------

loc_80B22:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_80B58(pc,d0.w),d1
		jsr	off_80B58(pc,d1.w)
		move.b	$3A(a0),d0
		andi.b	#7,d0
		cmpi.b	#7,d0
		beq.s	loc_80B42
		bra.w	sub_80A26
; ---------------------------------------------------------------------------

loc_80B42:
		lea	(__u_FA82).w,a1
		tst.b	$2C(a0)
		beq.s	loc_80B50
		lea	(__u_FA82+$1).w,a1

loc_80B50:
		st	(a1)
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------
off_80B58:	dc.w loc_80B66-off_80B58

		dc.w loc_80B90-off_80B58
		dc.w loc_80C2A-off_80B58
		dc.w loc_80C58-off_80B58
		dc.w loc_80C8A-off_80B58
		dc.w loc_80CA6-off_80B58
		dc.w loc_80C2A-off_80B58
; ---------------------------------------------------------------------------

loc_80B66:
		move.b	#2,5(a0)
		move.b	#3,$39(a0)
		lea	ChildObjDat_81316(pc),a2
		jsr	CreateChild1_Normal.w
		move.w	#-$80,d0
		tst.b	$2C(a0)
		beq.s	loc_80B86
		neg.w	d0

loc_80B86:
		move.w	d0,$42(a0)
		move.w	#$E3,$14(a0)

loc_80B90:
		movea.w	$46(a0),a1
		btst	#1,$38(a1)
		bne.s	loc_80C0E

		jsr	Find_SonicTails.w	 ; NAT: Target closest player
		move.w	$10(a1),d0		; get x-pos

		move.w	$10(a0),d1
		move.b	$3A(a0),d2
		moveq	#0,d3
		lsr.b	#1,d2
		bcc.s	loc_80BB6
		moveq	#-$20,d3
		lsr.b	#1,d2
		bcc.s	loc_80BB6
		moveq	#$20,d3

loc_80BB6:

		add.w	d3,d1
		sub.w	d1,d0
		smi	d1
		bpl.s	loc_80BC0
		neg.w	d0

loc_80BC0:
		cmpi.w	#$80,d0
		bhs.s	locret_80C0C
		cmpi.w	#4,d0
		bls.s	locret_80C0C
		move.w	#-$80,d0
		tst.b	$2C(a0)
		beq.s	loc_80BD8
		neg.w	d0

loc_80BD8:
		move.w	$42(a0),d2
		move.b	$3A(a0),d3
		moveq	#2,d4
		moveq	#2,d5

loc_80BE4:
		lsr.b	#1,d3
		bcc.s	loc_80BEA
		addq.w	#2,d4

loc_80BEA:
		dbf	d5,loc_80BE4
		tst.b	d1
		bne.s	loc_80C00
		addi.w	#$40,d0
		cmp.w	d0,d2
		bge.s	locret_80C0C
		add.w	d4,$42(a0)
		rts
; ---------------------------------------------------------------------------

loc_80C00:
		subi.w	#$40,d0
		cmp.w	d0,d2
		blt.s	locret_80C0C
		sub.w	d4,$42(a0)

locret_80C0C:

		rts
; ---------------------------------------------------------------------------

loc_80C0E:
		move.b	#4,5(a0)
		move.w	#-$80,$1A(a0)
		move.w	#7,$2E(a0)
		move.l	#loc_80C34,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_80C2A:
		jsr	MoveSprite2.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_80C34:
		move.w	#$10,$2E(a0)
		clr.w	$1A(a0)
		move.l	#loc_80C48,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_80C48:
		move.b	#6,5(a0)
		move.l	#loc_80C60,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_80C58:
		lea	byte_8133E(pc),a1
		jmp	Animate_RawNoSSTMultiDelay.w
; ---------------------------------------------------------------------------

loc_80C60:
		move.b	#8,5(a0)
		move.w	#$2F,$2E(a0)
		bset	#1,$38(a0)
		move.b	$39(a0),d0
		lsl.w	#2,d0
		andi.w	#$C,d0
		move.w	d0,(ScrShake_Value).w
		moveq	#-$65,d0
		jsr	Play_Sound_2.w

locret_80C88:

		rts
; ---------------------------------------------------------------------------

loc_80C8A:
		subq.w	#1,$2E(a0)
		bpl.s	locret_80CA4
		move.b	#$A,5(a0)
		bclr	#1,$38(a0)
		move.l	#loc_80CAE,$34(a0)

locret_80CA4:
		rts
; ---------------------------------------------------------------------------

loc_80CA6:
		lea	byte_81349(pc),a1
		jmp	Animate_RawNoSSTMultiDelay.w
; ---------------------------------------------------------------------------

loc_80CAE:
		move.b	#$C,5(a0)
		move.w	#$80,$1A(a0)
		move.w	#7,$2E(a0)
		move.l	#loc_80CCA,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_80CCA:
		move.b	#2,5(a0)
		move.w	#$E3,$14(a0)
		movea.w	$46(a0),a1
		bclr	#1,$38(a1)
		rts
; ---------------------------------------------------------------------------

loc_80CE2:

		lea	ObjDat3_81292(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_80CF8,(a0)
		move.b	#3,$29(a0)

loc_80CF8:

		movea.w	$46(a0),a1
		move.b	$22(a1),$22(a0)
		btst	#1,$38(a1)
		bne.s	loc_80D18
		jsr	Refresh_ChildPosition.w
		bsr.w	sub_810D6
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_80D18:
		move.l	#loc_80D30,(a0)
		move.b	#$1A,$28(a0)
		bset	#7,$A(a0)
		move.w	#prio(1),8(a0)

loc_80D30:
		movea.w	$46(a0),a1
		move.b	$22(a1),$22(a0)
		btst	#1,$38(a1)
		beq.s	loc_80D50
		jsr	Refresh_ChildPosition.w
		bsr.w	sub_810FA
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------

loc_80D50:
		move.l	#loc_80CF8,(a0)
		bclr	#7,$A(a0)
		move.w	#prio(5),8(a0)
		bra.s	loc_80CF8
; ---------------------------------------------------------------------------

loc_80D64:
		jsr	Refresh_ChildPosition.w
		jsr	Obj_Wait.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_80D72:
		lea	ObjDat3_81286(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_80D9E,(a0)
		movea.w	$46(a0),a1
		move.w	$10(a1),d0
		subi.w	#$10,d0
		move.w	d0,$10(a0)
		move.w	$14(a1),d0
		subi.w	#$3C,d0
		move.w	d0,$14(a0)

loc_80D9E:
		btst	#0,(__u_FAB8).w
		beq.s	loc_80DB8
		move.l	#loc_80DBE,(a0)
		move.w	#$1F,$2E(a0)
		move.w	#-$80,$18(a0)

loc_80DB8:
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_80DBE:
		subq.w	#1,$2E(a0)
		bmi.s	loc_80DD0
		jsr	MoveSprite2.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_80DD0:
		bset	#1,(__u_FAB8).w
		st	(ScrEvents_2).w
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_80DE0:
		lea	ObjDat3_812E0(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_80E02,(a0)
		move.w	#$70,$10(a0)
		move.w	#$C0,$14(a0)
		bset	#0,4(a0)

loc_80E02:
		lea	byte_81354(pc),a1
		jsr	Animate_RawNoSST.w
		move.w	$10(a0),d0
		addq.w	#6,d0
		move.w	d0,$10(a0)
		cmpi.w	#$3D0,d0
		bhs.s	loc_80E20
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_80E20:
		bset	#0,(__u_FAB8).w
		jmp	Delete_Current_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_80E2C:
		tst.b	$28(a0)
		bne.s	locret_80EA2
		move.b	$29(a0),d0
		beq.s	loc_80EA4
		tst.b	$20(a0)
		bne.s	loc_80E70
		move.b	#$20,$20(a0)
		moveq	#$6E,d0
		jsr	Play_Sound_2.w
		bset	#6,$2A(a0)
		btst	#7,$38(a0)
		beq.s	loc_80E70

		lea	(Player_1).w,a1
		move.b	$1C(a0),d0		; NAT: yes
		beq.s	loc_80E68
		lea	(Player_2).w,a1

loc_80E68:
		clr.w	$18(a1)
		clr.w	$1C(a1)
		jsr	Boss_AddPlayerScore	; NAT: Score!

loc_80E70:

		moveq	#0,d0
		btst	#0,$20(a0)
		bne.s	loc_80E7E
		addi.w	#3*2,d0		; NAT: https://s3unlocked.blogspot.com/2017/07/boss-flash-bloopers.html

loc_80E7E:
		bsr.w	sub_80ED6
		subq.b	#1,$20(a0)
		bne.s	locret_80EA2
		bclr	#6,$2A(a0)
		move.b	$25(a0),$28(a0)
		cmpi.b	#8,5(a0)
		blo.s	locret_80EA2
		move.w	#$800,$18(a0)

locret_80EA2:

		rts
; ---------------------------------------------------------------------------

loc_80EA4:
		move.l	#Wait_Draw,(a0)
		move.w	#$2F,$2E(a0)
		move.l	#loc_8029C,$34(a0)
		lea	Child6_CreateBossExplosion.w,a2
		jsr	CreateChild6_Simple.w
		bne.s	loc_80ECC
		move.b	#4,$2C(a1)

loc_80ECC:
		jsr	Create_New_Sprite.w		; NAT: Load barriers
		bne.s	.noload
		move.l	#Obj_28_Invisible_Barrier,(a1)
		move.b	#$F1,subtype(a1)		; create sub
		move.w	#$110,y_pos(a1)			; set y-pos

		move.w	Camera_X_pos.w,d0		; get cam x to d0
		add.w	#$90,d0				; shift by $90px
		move.w	d0,x_pos(a1)			; set x-pos

		jsr	Create_New_Sprite.w		; NAT: Load barriers
		bne.s	.noload
		move.l	#Obj_28_Invisible_Barrier,(a1)
		move.b	#$31,subtype(a1)		; create sub
		move.w	#$110,y_pos(a1)			; set y-pos

		move.w	Camera_X_pos.w,d0		; get cam x to d0
		add.w	#$120,d0				; shift by $F0px
		move.w	d0,x_pos(a1)			; set x-pos

.noload		moveq	#$64,d0
		jmp	(HUD_AddToScore).l

; =============== S U B R O U T I N E =======================================


sub_80ED6:
		lea	word_80EE2(pc),a1
		lea	word_80EE8(pc,d0.w),a2
		jmp	CopyWordData_3.w
; End of function sub_80ED6

; ---------------------------------------------------------------------------
word_80EE2:	dc.w $FC0E
		dc.w $FC1C
		dc.w $FC1E
word_80EE8:	dc.w 8
		dc.w $866
		dc.w $222
		dc.w $888
		dc.w $CCC
		dc.w $EEE

; =============== S U B R O U T I N E =======================================


sub_80EF4:

		move.b	(V_int_run_count+3).w,d0
		andi.b	#$F,d0
		bne.s	locret_80F0C
		jsr	Create_New_Sprite.w
		bne.s	locret_80F0C
		move.l	#loc_80426,(a1)

locret_80F0C:

		rts
; End of function sub_80EF4


; =============== S U B R O U T I N E =======================================


sub_80F0E:

		move.l	(__u_FA84).w,d0
		addi.l	#$1000,d0
		cmpi.l	#$40000,d0
		bhi.s	loc_80F24
		move.l	d0,(__u_FA84).w

loc_80F24:
		move.l	(Camera_X_pos).w,d1
		add.l	d0,d1
		move.l	d1,(Camera_X_pos).w
		swap	d1
		move.w	d1,(Camera_min_X_pos).w
		move.w	d1,(Camera_max_X_pos).w
		rts
; End of function sub_80F0E


; =============== S U B R O U T I N E =======================================


sub_80F3A:

		btst	#7,$2A(a0)
		beq.s	locret_80F9C
		move.l	#loc_80102,(a0)
		move.w	#$80,$18(a0)
		move.w	#$80,$1A(a0)
		jsr	Create_New_Sprite.w
		bne.s	loc_80F62
		move.l	#loc_8642E,(a1)

loc_80F62:
		bclr	#5,$38(a0)
		lea	Child6_CreateBossExplosion.w,a2
		jsr	CreateChild6_Simple.w
		bne.s	loc_80F7C
		move.b	#$16,$2C(a1)

loc_80F7C:
		lea	Child6_CreateBossExplosion.w,a2
		jsr	CreateChild6_Simple.w
		bne.s	loc_80F90
		move.b	#$16,$2C(a1)

loc_80F90:
		lea	PLC_80F9E(pc),a1
		jsr	Load_PLC_Raw.w
		addq.w	#4,sp

locret_80F9C:
		rts
; End of function sub_80F3A

; ---------------------------------------------------------------------------
PLC_80F9E:	dc.w 0
		dc.l ArtNem_RobotnikShip
		dc.w $A5C0

; =============== S U B R O U T I N E =======================================


sub_80FA6:
		cmpi.b	#$1E,$22(a0)
		bne.s	locret_80FF0
		lea	word_80FF2(pc),a1
		jsr	Check_PlayerInRange.w
		tst.l	d0
		beq.s	locret_80FF0
		tst.w	d0
		beq.s	loc_80FD6
		movea.w	d0,a1
		tst.b	$34(a1)
		bne.s	loc_80FD6
		btst	#1,$2B(a1)
		bne.s	loc_80FD6
		move.l	d0,-(sp)
		jsr	HurtCharacter_Directly.w
		move.l	(sp)+,d0

loc_80FD6:

		swap	d0
		tst.w	d0
		beq.s	locret_80FF0
		movea.w	d0,a1
		tst.b	$34(a1)
		bne.s	locret_80FF0
		btst	#1,$2B(a1)
		bne.s	locret_80FF0
		jsr	HurtCharacter_Directly.w

locret_80FF0:
locret_8100C:
		rts
; End of function sub_80FA6

; ---------------------------------------------------------------------------
word_80FF2:	dc.w	  0,  $120, $FFE0,   $40

; =============== S U B R O U T I N E =======================================


sub_80FFA:

		move.b	(V_int_run_count+3).w,d0
		andi.b	#3,d0
		bne.s	locret_8100C
		lea	ChildObjDat_8132A(pc),a2
		jmp	CreateChild6_Simple.w


; =============== S U B R O U T I N E =======================================


sub_8100E:

		move.w	$10(a0),d0
		addi.w	#$40,d0
		move.w	d0,(Camera_min_X_pos).w
		move.w	d0,(Camera_max_X_pos).w
		addq.w	#1,(Camera_X_pos).w
		rts
; End of function sub_8100E


; =============== S U B R O U T I N E =======================================


sub_81024:

		movea.w	$46(a0),a1
		move.w	$42(a0),d0
		move.w	$10(a1),d1
		add.w	d0,d1
		move.w	d1,$10(a0)
		move.w	$44(a0),d0
		move.w	$14(a1),d1
		add.w	d0,d1
		move.w	d1,$14(a0)
		rts
; End of function sub_81024


; =============== S U B R O U T I N E =======================================


sub_81046:

		btst	#2,$38(a0)
		bne.s	locret_8106C
		subq.w	#1,$1C(a0)
		bpl.s	locret_8106C
		move.w	#$140,$1C(a0)
		jsr	Create_New_Sprite.w
		bne.s	locret_8106C
		move.l	#Obj_DEZ3_Boss_Fireball,(a1)
		move.w	a0,$46(a1)

locret_8106C:
		rts
; End of function sub_81046


; =============== S U B R O U T I N E =======================================


sub_8106E:

		jsr	Create_New_Sprite3.w
		bne.s	locret_8109E
		move.l	#loc_80A3A,(a1)
		move.w	$46(a0),$46(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		move.w	$42(a0),$42(a1)
		move.w	$44(a0),$44(a1)
		move.b	d2,$2C(a1)

locret_8109E:
		rts
; End of function sub_8106E

; ---------------------------------------------------------------------------

loc_810A0:
		move.w	(Camera_X_pos).w,d0
		move.w	d0,(Camera_min_X_pos).w
		move.w	#$520,d1
		cmp.w	d1,d0
		blo.w	locret_80C88
		bset	#2,(__u_FAB8).w
		move.w	d1,(Camera_min_X_pos).w
		addi.w	#$A0,d1
		move.w	d1,(Camera_max_X_pos).w
		move.w	#$2C0,(ScrEvents_Routine2).w
		addi.w	#$100,$10(a0)

loc_810D0:

		jmp	Delete_Current_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_810D6:

		move.b	$29(a0),d0
		beq.s	loc_81140
		tst.b	$20(a0)
		beq.s	locret_8113E
		bsr.w	sub_8117A
		subq.b	#1,$20(a0)
		bne.s	locret_8113E
		bclr	#6,$2A(a0)
		move.b	$25(a0),$28(a0)

		move.b	$1C(a0),d0
		jmp	Boss_AddPlayerScore	; NAT: Score!


; =============== S U B R O U T I N E =======================================


sub_810FA:
		cmpi.b	#4,$22(a0)
		bne.s	sub_810D6
		tst.b	$28(a0)
		bne.s	locret_8113E
		move.b	$29(a0),d0
		beq.s	loc_81140
		tst.b	$20(a0)
		bne.s	loc_81128
		move.b	#$20,$20(a0)
		moveq	#$6E,d0
		jsr	Play_Sound_2.w
		bset	#6,$2A(a0)

		move.b	$1C(a0),d0
		jsr	Boss_AddPlayerScore	; NAT: Score!

loc_81128:
		bsr.w	sub_8117A
		subq.b	#1,$20(a0)
		bne.s	locret_8113E
		bclr	#6,$2A(a0)
		move.b	$25(a0),$28(a0)

locret_8113E:

		rts
; ---------------------------------------------------------------------------

loc_81140:

		move.l	#loc_80D64,(a0)
		move.w	#$1F,$2E(a0)
		move.l	#Go_Delete_Sprite,$34(a0)
		lea	Child6_CreateBossExplosion.w,a2
		jsr	CreateChild6_Simple.w
		bne.s	loc_81168
		move.b	#6,$2C(a1)

loc_81168:
		moveq	#0,d0
		move.b	$2C(a0),d0
		lsr.w	#1,d0
		movea.w	$46(a0),a1
		bset	d0,$3A(a1)
		rts
; End of function sub_810FA


; =============== S U B R O U T I N E =======================================


sub_8117A:

		movea.w	$46(a0),a1
		move.b	$22(a1),d0
		btst	#0,$20(a0)
		beq.s	loc_81190
		move.b	d0,$22(a0)
		rts
; ---------------------------------------------------------------------------

loc_81190:
		addi.b	#$13,d0
		move.b	d0,$22(a0)
		rts
; End of function sub_8117A


; =============== S U B R O U T I N E =======================================


sub_8119A:
		tst.b	$28(a0)
		bne.s	locret_81204
		tst.b	$29(a0)
		beq.s	loc_81206
		tst.b	$20(a0)
		bne.s	loc_811DA
		move.b	#$20,$20(a0)
		moveq	#$6E,d0
		jsr	Play_Sound_2.w

		lea	(Player_1).w,a1
		move.b	$1C(a0),d0		; NAT: lotsa sex
		beq.s	loc_811C8
		lea	(Player_2).w,a1

loc_811C8:
		jsr	Boss_AddPlayerScore	; yes
		move.w	#$600,d0
		move.w	d0,$1C(a1)
		move.w	d0,$18(a1)
		move.w	#-$300,$1A(a1)

loc_811DA:
		bset	#6,$2A(a0)
		moveq	#0,d0
		btst	#0,$20(a0)
		bne.s	loc_811EE
		addi.w	#$A,d0

loc_811EE:
		bsr.w	sub_81230
		subq.b	#1,$20(a0)
		bne.s	locret_81204
		bclr	#6,$2A(a0)
		move.b	$25(a0),$28(a0)

locret_81204:

		rts
; ---------------------------------------------------------------------------

loc_81206:
		move.l	#loc_80584,(a0)
		lea	Child6_CreateBossExplosion.w,a2
		jsr	CreateChild6_Simple.w
		bne.s	loc_81220
		move.b	#4,$2C(a1)

loc_81220:
		movea.w	$46(a0),a1
		bset	#7,$2A(a1)
		jmp	BossDefeated_StopTimer.w
; End of function sub_8119A


; =============== S U B R O U T I N E =======================================


sub_81230:

		lea	word_8123E(pc),a1
		lea	word_81248(pc,d0.w),a2
		jmp	CopyWordData_5.w
; End of function sub_81230

; ---------------------------------------------------------------------------
word_8123E:	dc.w $FC34
		dc.w $FC36
		dc.w $FC38
		dc.w $FC3A
		dc.w $FC3C
word_81248:	dc.w $888
		dc.w $666
		dc.w $444
		dc.w $222
		dc.w 0
		dc.w $EEE
		dc.w $EEE
		dc.w $CCC
		dc.w $AAA
		dc.w $888

; =============== S U B R O U T I N E =======================================


sub_8125C:

		tst.b	$29(a0)
		beq.s	loc_81206
		tst.b	$20(a0)
		beq.s	locret_81284
		moveq	#0,d0
		btst	#0,$20(a0)
		bne.s	loc_81276
		addi.w	#$A,d0

loc_81276:
		bsr.s	sub_81230
		subq.b	#1,$20(a0)
		bne.s	locret_81284
		bclr	#6,$2A(a0)

locret_81284:

		rts
; End of function sub_8125C

; ---------------------------------------------------------------------------
ObjDat3_81286:	dc.l Map_DEZFinalBossMisc
		dc.w $238F
		dc.w prio(5)
		dc.b $20
		dc.b $20
		dc.b 5
		dc.b 0
ObjDat3_81292:	dc.l Map_DEZFinalBossMisc
		dc.w $238F
		dc.w prio(5)
		dc.b $10
		dc.b $60
		dc.b 0
		dc.b 0
ObjDat3_8129E:	dc.l Map_DEZFinalBossMisc
		dc.w $A38F
		dc.w prio(6)
		dc.b $10
		dc.b $10
		dc.b 6
		dc.b $8B
ObjDat3_812AA:	dc.l Map_DEZFinalBossMisc
		dc.w $2001
		dc.w prio(3)
		dc.b $40
		dc.b $40
		dc.b $1E
		dc.b 0
ObjDat3_812B6:	dc.l Map_DEZFinalBossMisc
		dc.w $238F
		dc.w prio(3)
		dc.b $10
		dc.b $24
		dc.b $1A
		dc.b 0
word_812C2:	dc.w prio(4)
		dc.b 4
		dc.b 4
		dc.b $1B
		dc.b 0
ObjDat3_812C8:	dc.l Map_DEZFinalBossMisc
		dc.w $238F
		dc.w prio(5)
		dc.b 4
		dc.b $20
		dc.b $18
		dc.b 0
ObjDat3_812D4:	dc.l Map_BossMasterEmerald
		dc.w $44D0
		dc.w prio(6)
		dc.b $20
		dc.b $18
		dc.b 1
		dc.b 0
ObjDat3_812E0:	dc.l Map_FBZRobotnikRun
		dc.w $55A
		dc.w prio(5)
		dc.b $20
		dc.b $20
		dc.b 0
		dc.b 0
ObjDat3_812EC:	dc.l Map_RobotnikShip
		dc.w $52E
		dc.w prio(4)
		dc.b $20
		dc.b $20
		dc.b 5
		dc.b 0
ObjDat3_812F8:	dc.l Map_KnuxFinalBossCrane
		dc.w $49D
		dc.w prio(4)
		dc.b $14
		dc.b $14
		dc.b 0
		dc.b 0
ObjDat3_81304:	dc.l Map_DEZFinalBossDebris
		dc.w $C100
		dc.w prio(6)
		dc.b $18
		dc.b $10
		dc.b 0
		dc.b 0
ChildObjDat_81310:dc.w 1
		dc.l loc_80B22
ChildObjDat_81316:dc.w 2
		dc.l loc_80CE2
		dc.w $F0
		dc.l loc_80CE2
		dc.w $E0F0
		dc.l loc_80CE2
		dc.w $20F0
ChildObjDat_8132A:dc.w 0
		dc.l loc_808AE
ChildObjDat_81330:dc.w 1
		dc.l loc_804B0
		dc.w $23
		dc.l loc_806DA
		dc.w $3B
byte_8133E:	dc.b	0,   1
		dc.b	1,   1
		dc.b	2,   1
		dc.b	3,   1
		dc.b	4,   0
		dc.b  $F4
byte_81349:	dc.b	4,   3
		dc.b	3,   3
		dc.b	2,   3
		dc.b	1,   3
		dc.b	0,  $F
		dc.b  $F4
byte_81354:	dc.b	2,   0
		dc.b	1,   2
		dc.b	1, $FC
byte_8135A:	dc.b  $1F,   5
		dc.b  $1A,   0
		dc.b  $1F,   5
		dc.b  $1A,   0
		dc.b  $1F,   5
		dc.b  $1A,   0
		dc.b  $1F,   4
		dc.b  $1A,   0
		dc.b  $1F,   4
		dc.b  $1A,   0
		dc.b  $1F,   3
		dc.b  $1A,   0
		dc.b  $1F,   3
		dc.b  $1A,   0
		dc.b  $1F,   2
		dc.b  $1A,   0
		dc.b  $1F,   2
		dc.b  $1A,   0
		dc.b  $1F,   1
		dc.b  $1A,   0
		dc.b  $1F,   1
		dc.b  $F4, $1A
		dc.b	0, $1F
		dc.b	0, $1A
		dc.b	0, $1F
		dc.b	0, $F4
byte_8138E:	dc.b  $1B,   7
		dc.b  $1B,   7
		dc.b  $1C,   5
		dc.b  $1D,   3
		dc.b  $F4
byte_81397:	dc.b	0,   0
		dc.b	6,   0
		dc.b   $E,   1
		dc.b  $16,   2
		dc.b  $1E,   3
		dc.b  $16,   1
		dc.b   $E,   2
		dc.b	6,   3
		dc.b	0,   0
		dc.b  $F4
word_813AA:	dc.w 4
		dc.w 0
		dc.l word_813BA
		dc.w 4
		dc.w 0
		dc.l word_813E8
word_813BA:	dc.w $FC52
		dc.w 0
		dc.w   $660,	$E,  $680,   $11,  $880,     6,	 $6A2,	   6,  $AC0,	 4,  $CE8,     4,  $AC0,     4,	 $6A2,	   6
		dc.w   $880,	 6,  $680,   $11, $FFFC
word_813E8:	dc.w $FC56
		dc.w 0
		dc.w   $6A0,	$E,  $8C0,     8,  $AC0,     8,	 $CE0,	   6,  $CE6,	 6,  $CE8,     4,  $EEC,     4,	 $CE8,	   4
		dc.w   $CE6,	 6,  $CE0,     6,  $AC0,     8,	 $8C0,	   8, $FFFC
word_8141E:	dc.w 4
		dc.w 0
		dc.l word_8142E
		dc.w 4
		dc.w 0
		dc.l word_8145C
word_8142E:	dc.w $FC72
		dc.w 0
		dc.w   $660,	$E,  $680,   $11,  $880,     6,	 $6A2,	   6,  $AC0,	 4,  $CE8,     4,  $AC0,     4,	 $6A2,	   6
		dc.w   $880,	 6,  $680,   $11, $FFFC
word_8145C:	dc.w $FC76
		dc.w 0
		dc.w   $6A0,	$E,  $8C0,     8,  $AC0,     8,	 $CE0,	   6,  $CE6,	 6,  $CE8,     4,  $EEC,     4,	 $CE8,	   4
		dc.w   $CE6,	 6,  $CE0,     6,  $AC0,     8,	 $8C0,	   8, $FFFC
; ---------------------------------------------------------------------------

loc_81492:
Obj_B6_2:
Obj_DDZMissile:
Obj_DDZAsteroid:
; ---------------------------------------------------------------------------

Obj_HiddenMonitor:
		btst	#1,OptionsBits.w			; check if ending monitors are on
		beq.s	Obj_HM_Del				; delete object if not
		lea	ObjDat_HiddenMonitor(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#Obj_HiddenMonitorMain,(a0)
		move.b	#$F,$1E(a0)
		move.b	#$F,$1F(a0)
		move.b	#$46,$28(a0)
		ori.b	#$20,4(a0)
		move.b	$2C(a0),$20(a0)	; Backup object subtype
		rts
; ---------------------------------------------------------------------------

Obj_HiddenMonitorMain:
		move.w	(Signpost_Ptr).w,d0
		beq.s	Obj_HM_NoDisp
		movea.w	d0,a1
		cmpi.l	#Obj_EndSign,(a1)
		bne.s	Obj_HM_Del			; If no signpost is active, branch
		btst	#0,$38(a1)
		beq.s	loc_8374C			; If signpost hasn't landed, branch

		lea	word_8379E(pc),a2
		move.w	$10(a0),d0
		move.w	$10(a1),d1
		add.w	(a2)+,d0
		cmp.w	d0,d1
		blo.s	loc_8374C
		add.w	(a2)+,d0
		cmp.w	d0,d1
		bhs.s	loc_8374C
		move.w	$14(a0),d0
		move.w	$14(a1),d1
		add.w	(a2)+,d0
		cmp.w	d0,d1
		blo.s	loc_8374C
		add.w	(a2)+,d0
		cmp.w	d0,d1
		blo.s	loc_83760

loc_8374C:
		cmp.b	#4,5(a1)			; check if sign has landed or in air
		ble.s	loc_8375A			; if landed, branch

Obj_HM_Del:
		jmp	Delete_Current_Sprite.w

loc_8375A:
		jsr	Draw_Sprite.w

Obj_HM_NoDisp:
		jmp	Delete_Sprite_If_Not_In_Range.w
; ---------------------------------------------------------------------------

loc_83760:
		bclr	#0,$38(a1)			; If signpost has landed and is in range
		move.l	#Obj_Monitor,(a0)	; make this object a monitor
		move.l	#Map_Monitor,$C(a0)
		and.b	#$8F,4(a0)
		move.b	#2,5(a0)
		move.b	#4,$3C(a0)
		move.w	#-$500,$1A(a0)
		move.b	#1,$20(a0)		; NAT3: Make a point monitor
		moveq	#$44,d0
		jsr	Play_Sound_2.w
		bclr	#0,4(a0)
		beq.s	loc_83798
		bset	#7,$A(a0)
		clr.b	$2A(a0)

loc_83798:
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------
word_8379E:	dc.w  -$14, $14*2, $FF80,   $C0
ObjDat_HiddenMonitor:	dc.l word_1DBD0+2
		dc.w $84C4
		dc.w prio(5)
		dc.b $E
		dc.b $10
		dc.b 0
		dc.b 0
; ---------------------------------------------------------------------------

Obj_EndSign:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	EndSign_Index(pc,d0.w),d1
		jsr	EndSign_Index(pc,d1.w)
		lea	PLCPtr_EndSigns(pc),a2
		jsr	Perform_DPLC.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
EndSign_Index:	dc.w Obj_EndSignInit-EndSign_Index

		dc.w Obj_EndSignFall-EndSign_Index
		dc.w Obj_EndSignLanded-EndSign_Index
		dc.w Obj_EndSignResults-EndSign_Index
		dc.w Obj_EndSignAfter-EndSign_Index
; ---------------------------------------------------------------------------

Obj_EndSignInit:
		lea	ObjSlot_EndSigns(pc),a1
		jsr	SetUp_ObjAttributesSlotted.w
		bset	#7,$A(a0)

loc_837EE:
		move.w	a0,(Signpost_Ptr).w	; Put RAM address here for use by hidden monitor object
		move.b	#$18,$1F(a0)
		move.b	#$1E,$1E(a0)
		move.l	#AniRaw_EndSigns1,$30(a0)

loc_83816:
		move.w	(Camera_Y_pos).w,d0
		subi.w	#$20,d0
		move.w	d0,$14(a0)			; Place vertical position at top of screen
		moveq	#-$48,d0
		jsr	Play_Sound_2.w
		lea	Child1_EndSignStub(pc),a2	; Make the little stub at the bottom of the signpost
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

Obj_EndSignFall:
		move.b	(V_int_run_count+3).w,d0
		andi.b	#3,d0
		bne.s	loc_83844
		lea	Child6_EndSignSparkle(pc),a2	; Create a signpost sparkle every 4 frames
		jsr	CreateChild6_Simple.w

loc_83844:
		bsr.w	EndSign_CheckPlayerHit
		addi.w	#$C,$1A(a0)
		jsr	MoveSprite2.w					; Move downward
		bsr.w	EndSign_CheckWall
		jsr	Animate_Raw.w
		move.w	(Camera_Y_pos).w,d0
		addi.w	#$50,d0
		cmp.w	$14(a0),d0
		bhi.s	locret_838BC		; Ensure that signpost can't land if too far up the screen itself
		tst.w	$1A(a0)
		bmi.s	locret_838BC		; And also when the signpost is still moving up

		cmp.w	#$1700,Current_Zone.w		; NAT: Special DEZ3 handle
		bne.s	.nodez
		cmpi.w	#$E0,$14(a0)
		bhs.s	loc_838AA			; if on ground, doit

.nodez		cmpi.b	#8,(Current_zone).w
		bne.s	loc_8389C
		moveq	#0,d0				; Special code for handling the landing on Sandopolis 1's sand
		cmpi.w	#$4210,$10(a0)
		blo.s	loc_83884
		moveq	#2,d0

loc_83884:
		cmp.w	$3E(a0),d0
		beq.s	loc_83894
		move.w	d0,$3E(a0)
		move.w	word_838BE(pc,d0.w),8(a0)

loc_83894:
		cmpi.w	#$9F2,$14(a0)
		bhs.s	loc_838AA

loc_8389C:
		jsr	ObjCheckFloorDist.w
		tst.w	d1
		bpl.s	locret_838BC
		add.w	d1,$14(a0)

loc_838AA:
		move.b	#4,5(a0)			; If signpost has landed
		bset	#0,$38(a0)
		move.w	#$40,$2E(a0)

locret_838BC:

		rts
; ---------------------------------------------------------------------------
word_838BE:	dc.w prio(3), prio(6)
; ---------------------------------------------------------------------------

Obj_EndSignLanded:
		btst	#0,$38(a0)
		beq.s	loc_838FA
		jsr	Animate_Raw.w
		subq.w	#1,$2E(a0)			; Keep animating while landing for X amount of frames
		bmi.s	loc_838D6
		rts
; ---------------------------------------------------------------------------

loc_838D6:
		move.b	#6,5(a0)
		clr.l	$18(a0)			; Null velocity

		bsr.s	SetLevelWinner		; set level winrar
		ext.w	d0			; extend to word(!)
		move.b	.winners+1(pc,d0.w),$22(a0); save frame

		st	(Ctrl_2_locked).w	; Null Tails' input
		st	(Ctrl_1_locked).w	; Null Sonic's input
		clr.w	Ctrl_1_logical.w
		clr.w	Ctrl_2_logical.w
		rts

.winners	dc.b 1, 2, 0, 'k'
; ---------------------------------------------------------------------------

loc_838FA:
		move.b	#2,5(a0)			; If a hidden monitor was hit, bounce ths signpost again
		move.b	#$20,$20(a0)
		move.w	#-$200,$1A(a0)
		rts
; ---------------------------------------------------------------------------

SetLevelWinner:
		move.b	Score+1.w,d1		; get Tails' score
		cmp.b	Score.w,d1		; check if Sonic has more score
		sgt	d0			; set if Tails wins, clear if not
		slt	d1			; set if Sonic wins, clear if not
		sub.b	d1,d0			; merge them (-1 for Tails, 0 for neither, 1 for Sonic)
		move.b	d0,LevelWinner.w	; Save winner
		rts
; ---------------------------------------------------------------------------

ChkOnFloorOrDead:
		cmp.b	#6,Player_1+routine.w		; check if p1 is alive
		bhs.s	.tails				; yes, branch
		btst	#1,Player_1+status.w		; check if on floor
		beq.s	.tails				; if yes, branch
		moveq	#0,d0				; set incomplete
		rts

.tails		cmp.b	#6,Player_2+routine.w		; check if p2 is alive
		bhs.s	.done				; yes, branch
		btst	#1,Player_2+status.w		; check if on floor
		beq.s	.done				; if yes, branch
		moveq	#0,d0				; set incomplete
		rts

.done		moveq	#-1,d0				; set as completed
		rts
; ---------------------------------------------------------------------------

Obj_EndSignResults2:
		tst.b	5(a0)			; NAT: Check routine
		beq.s	Obj_EndSignResults	; if zero, brah
		rts

Obj_EndSignResults:
		moveq	#0,d6			; NAT: Magic
		lea	Player_2.w,a1
		btst	#1,$2A(a1)
		bne.s	.sonic
		bsr.w	Set_PlayerEndingPose
		moveq	#-1,d6

.sonic		lea	Player_1.w,a1
		btst	#1,$2A(a1)
		bne.s	.chk			; If player is not standing on the ground, wait until he is
		bsr.w	Set_PlayerEndingPose
		moveq	#-1,d6

.chk		tst.b	d6			; check if either player is hit ground
		bmi.s	.ok			; if so, branch
		cmp.b	#6,Player_1+routine.w	; check if p1 is alive
		blo.s	.rts			; yes, branch
		cmp.b	#6,Player_2+routine.w	; check if p2 is alive
		blo.s	.rts			; yes, branch

.ok		clr.b	Player_1+$2B.w
		clr.b	Player_2+$2B.w
		move.b	#8,5(a0)
		jsr	Create_New_Sprite.w
		bne.s	.rts
		move.l	#Obj_LevelResults,(a1)
.rts		rts
; ---------------------------------------------------------------------------

Obj_EndSignAfter:
		cmpi.b	#$B,(Current_zone).w
		bne.s	loc_8395A
		jsr	ObjCheckFloorDist.w		; If Death Egg Zone, then check if there's still a floor
		tst.w	d1
		beq.s	loc_83956
		bmi.s	loc_83956
		jsr	MoveSprite.w		; Move sprite if there's no floor
		bra.w	loc_8395E
; ---------------------------------------------------------------------------

loc_83956:

		add.w	d1,$14(a0)

loc_8395A:
		clr.w	$1A(a0)		; Null vertical velocity

loc_8395E:
		move.w	$10(a0),d0			; Check for whether signpost goes out of range
		andi.w	#-$80,d0
		sub.w	(Camera_X_pos_coarse_back).w,d0
		cmpi.w	#$280,d0
		bhi.s	loc_83988
		move.w	$14(a0),d0
		sub.w	(Camera_Y_pos).w,d0
		addi.w	#$80,d0
		cmpi.w	#$200,d0
		bhi.s	loc_83988
		jmp	(Check_TailsEndPose).l
; ---------------------------------------------------------------------------

loc_83988:
		lea	PLC_SpikesSprings(pc),a1
		jsr	Load_PLC_Raw.w
		jsr	Remove_From_TrackingSlot.w
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------
PLC_SpikesSprings:	dc.w 0

		dc.l ArtNem_SpikesSprings
		dc.w $9280
; ---------------------------------------------------------------------------

Obj_SignpostSparkle:
		lea	ObjDat_SignpostSparkle(pc),a1
		jsr	SetUp_ObjAttributes.w
		btst	#7,(Player_1+$A).w
		beq.s	loc_839B8
		bset	#7,$A(a0)

loc_839B8:
		move.l	#Obj_SignpostSparkleMain,(a0)
		jsr	Random_Number.w
		andi.w	#$1F,d0
		subi.w	#$10,d0
		add.w	d0,$14(a0)			; Random vertical position
		move.w	$10(a0),$3A(a0)
		move.w	#$1000,$18(a0)
		move.w	#$20,$2E(a0)
		move.l	#Go_Delete_Sprite,$34(a0)

Obj_SignpostSparkleMain:
		move.w	#$400,d0
		move.w	$10(a0),d1
		cmp.w	$3A(a0),d1
		blo.s	loc_839FA
		neg.w	d0

loc_839FA:
		move.w	#prio(5),d1
		add.w	d0,$18(a0)		; Do rotation around sign
		bpl.s	loc_83A08
		move.w	#prio(7),d1

loc_83A08:
		move.w	d1,8(a0)
		jsr	MoveSprite2.w
		lea	AniRaw_SignpostSparkle(pc),a1
		jsr	Animate_RawNoSST.w
		jsr	Obj_Wait.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

Obj_SignpostStub:
		lea	ObjDat_SignpostStub(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#Obj_SignpostStubMain,(a0)
		btst	#7,(Player_1+$A).w
		beq.s	Obj_SignpostStubMain
		bset	#7,$A(a0)

Obj_SignpostStubMain:

		jsr	Refresh_ChildPosition.w
		jsr	(Child_GetPriority).l
		jmp	Child_Draw_Sprite.w

; =============== S U B R O U T I N E =======================================


EndSign_CheckPlayerHit:
		tst.b	$20(a0)
		bne.s	loc_83AB8
		lea	EndSign_Range(pc),a1
		jsr	Check_PlayerInRange.w
		tst.l	d0
		beq.s	locret_83ABC		; If neither player is in range, don't do anything
		tst.w	d0
		beq.s	loc_83A6A
		bsr.w	sub_83A70

loc_83A6A:
		swap	d0
		tst.w	d0
		beq.s	locret_83ABC
; End of function EndSign_CheckPlayerHit


; =============== S U B R O U T I N E =======================================


sub_83A70:
		movea.w	d0,a1				; This can be done up to twice depending on who hit the signpost
		cmpi.b	#2,$20(a1)
		bne.s	locret_83ABC		; only go on if Player is currently jumping
		tst.w	$1A(a1)
		bpl.s	locret_83ABC		; And if he's actually moving upwards
		move.b	#$20,$20(a0)		; Set delay for when it checks for the next hit
		move.w	$10(a0),d0
		sub.w	$10(a1),d0
		bne.s	loc_83A92
		moveq	#8,d0

loc_83A92:
		lsl.w	#4,d0
		move.w	d0,$18(a0)			; Modify strength of X velocity based on how far to the left/right player is
		move.w	#-$200,$1A(a0)		; New vertical velocity is always the same
		moveq	#-$48,d0
		jsr	Play_Sound_2.w
		lea	Child6_EndSignScore(pc),a2
		jsr	CreateChild6_Simple.w
		moveq	#$A,d0
		movea.l	a1,a3
		jmp	(HUD_AddToScore).l			; Add 100 points whenever hit
; ---------------------------------------------------------------------------

loc_83AB8:
		subq.b	#1,$20(a0)

locret_83ABC:

		rts
; End of function sub_83A70

; ---------------------------------------------------------------------------
EndSign_Range:	dc.w  $FFE0,   $40, $FFE8,   $30

; =============== S U B R O U T I N E =======================================

EndSign_CheckWall:
		tst.w	$18(a0)
		bmi.s	loc_83AE8
		move.w	(Camera_max_X_pos).w,d0		; NAT: Fix screen bug
		addi.w	#$128,d0
		cmp.w	$10(a0),d0
		blo.s	loc_83AFE
		moveq	#$20,d3
		jsr	ObjCheckRightWallDist.w
		tst.w	d1
		bmi.s	loc_83AFE
		rts
; ---------------------------------------------------------------------------

loc_83AE8:
		move.w	(Camera_min_X_pos).w,d0		; NAT: Fix screen bug
		addi.w	#$18,d0
		cmp.w	$10(a0),d0
		bhi.s	loc_83AFE
		moveq	#-$20,d3
		jsr	ObjCheckLeftWallDist.w
		tst.w	d1
		bpl.s	locret_83B02

loc_83AFE:
		neg.w	$18(a0)

locret_83B02:
		rts

; ---------------------------------------------------------------------------
ObjSlot_EndSigns:	dc.w 0, $4AC, $C, 0
		dc.l Map_EndSigns
		dc.w prio(6)
		dc.b $18
		dc.b $10
		dc.b 0
		dc.b 0
ObjDat_SignpostStub:	dc.l Map_SignpostStub
		dc.w $69A
		dc.w prio(6)
		dc.b 4
		dc.b 8
		dc.b 0
		dc.b 0
ObjDat_SignpostSparkle:	dc.l Map_Ring
		dc.w $25B0
		dc.w prio(5)
		dc.b 8
		dc.b 8
		dc.b 4
		dc.b 0
Child1_EndSignStub:dc.w 0
		dc.l Obj_SignpostStub
		dc.b 0, $18
Child6_EndSignSparkle:dc.w 0
		dc.l Obj_SignpostSparkle
Child6_EndSignScore:dc.w 0
		dc.l Obj_EnemyScore
PLCPtr_EndSigns:	dc.l ArtUnc_EndSigns
		dc.l DPLC_EndSigns
AniRaw_EndSigns1:	dc.b	1,   0
		dc.b	4,   5
		dc.b	6,   1
		dc.b	4,   5
		dc.b	6,   3
		dc.b	4,   5
		dc.b	6, $FC
AniRaw_EndSigns2:	dc.b	1,   1
		dc.b	4,   5
		dc.b	6,   2
		dc.b	4,   5
		dc.b	6,   3
		dc.b	4,   5
		dc.b	6, $FC
AniRaw_SignpostSparkle:	dc.b	1,   4
		dc.b	5,   6
		dc.b	7, $FC
DPLC_EndSigns:	include "General/Sprites/Signpost/DPLC - End Signs.asm"

Map_EndSigns:	include "General/Sprites/Signpost/Map - End Signs.asm"

Map_SignpostStub:	include "General/Sprites/Signpost/Map - Signpost Stub.asm"


; =============== S U B R O U T I N E =======================================

AfterBoss_Cleanup:


		moveq	#0,d0
		lea	(Current_zone_and_act).w,a1
		move.b	(a1)+,d0
		add.b	d0,d0
		add.b	(a1)+,d0
		add.b	d0,d0
		move.w	off_83C1C(pc,d0.w),d0
		jmp	off_83C1C(pc,d0.w)
; End of function AfterBoss_Cleanup

; ---------------------------------------------------------------------------
off_83C1C:	dc.w loc_83C7C-off_83C1C

		dc.w loc_83C90-off_83C1C
		dc.w locret_83CA6-off_83C1C
		dc.w locret_83CA6-off_83C1C
		dc.w loc_83CA8-off_83C1C
		dc.w loc_83CA8-off_83C1C
		dc.w locret_83CB2-off_83C1C
		dc.w locret_83CB2-off_83C1C
		dc.w locret_83CB2-off_83C1C
		dc.w locret_83CB2-off_83C1C
		dc.w locret_83CB2-off_83C1C
		dc.w loc_83CB4-off_83C1C
		dc.w loc_83CC0-off_83C1C
		dc.w loc_83CC0-off_83C1C
		dc.w loc_83CC0-off_83C1C
		dc.w loc_83CC0-off_83C1C
		dc.w locret_83CCC-off_83C1C
		dc.w locret_83CCC-off_83C1C
		dc.w locret_83CCC-off_83C1C
		dc.w locret_83CCC-off_83C1C
		dc.w locret_83CCC-off_83C1C
		dc.w locret_83CCC-off_83C1C
		dc.w locret_83CCC-off_83C1C
		dc.w locret_83CCC-off_83C1C
		dc.w locret_83CCC-off_83C1C
		dc.w locret_83CCC-off_83C1C
		dc.w locret_83CCC-off_83C1C
		dc.w locret_83CCC-off_83C1C
		dc.w locret_83CCC-off_83C1C
		dc.w locret_83CCC-off_83C1C
		dc.w locret_83CCC-off_83C1C
		dc.w locret_83CCC-off_83C1C
		dc.w locret_83CCC-off_83C1C
		dc.w locret_83CCC-off_83C1C
		dc.w locret_83CCC-off_83C1C
		dc.w locret_83CCC-off_83C1C
		dc.w locret_83CCC-off_83C1C
		dc.w locret_83CCC-off_83C1C
		dc.w locret_83CCC-off_83C1C
		dc.w locret_83CCC-off_83C1C
		dc.w locret_83CCC-off_83C1C
		dc.w locret_83CCC-off_83C1C
		dc.w locret_83CCC-off_83C1C
		dc.w locret_83CCC-off_83C1C
		dc.w locret_83CCC-off_83C1C
		dc.w locret_83CCC-off_83C1C
		dc.w locret_83CCC-off_83C1C
		dc.w locret_83CCC-off_83C1C
; ---------------------------------------------------------------------------

loc_83C7C:
		lea	(Pal_AIZ).l,a1
		lea	(Normal_palette_line_2).w,a2
		moveq	#$17,d0

loc_83C88:
		move.l	(a1)+,(a2)+
		dbf	d0,loc_83C88
		rts
; ---------------------------------------------------------------------------

loc_83C90:
		lea	(Pal_AIZFire).l,a1
		jsr	PalLoad_Line1.w
		lea	PLC_83CCE(pc),a1
		jmp	Load_PLC_Raw.w
; ---------------------------------------------------------------------------

locret_83CA6:
		rts
; ---------------------------------------------------------------------------

loc_83CA8:
		lea	PLC_83D3A(pc),a1
		jmp	Load_PLC_Raw.w
; ---------------------------------------------------------------------------

locret_83CB2:
		rts
; ---------------------------------------------------------------------------

loc_83CB4:
		lea	(Pal_ICZ2).l,a1
		jmp	PalLoad_Line1.w
; ---------------------------------------------------------------------------

loc_83CC0:
		lea	(Pal_MHZ2).l,a1
		jmp	PalLoad_Line1.w
; ---------------------------------------------------------------------------

locret_83CCC:
		rts
; ---------------------------------------------------------------------------
PLC_83CCE:	dc.w 7
		dc.l ArtNem_Monitors
		dc.w $9880
		dc.l ArtNem_FloatMonitors
		dc.w AT_FM*32
		dc.l ArtNem_AIZMisc2
		dc.w $5D20
		dc.l ArtNem_AIZSwingVine
		dc.w $8360
		dc.l ArtNem_AIZBackgroundTree
		dc.w $8700
		dc.l ArtNem_Bubbles
		dc.w $8B80
		dc.l ArtNem_GrayButton
		dc.w $8AC0
		dc.l ArtNem_AIZCorkFloor2
		dc.w $8800
		dc.w	  0,  $EEE,  $EC0,  $E60,  $C22,   $EE,	  $88,	$60A,	$8E,   $2E,  $844,   $20,  $EAA,  $A66,	 $ECC,	 $44
		dc.w	  0,  $EEE,  $EC0,  $E60,  $C22,   $EE,	  $88,	 $8E,	$2C,  $822,	0,   $20,  $CAA,  $866,	 $644,	 $44
PLC_83D3A:	dc.w 2

		dc.l ArtNem_Monitors
		dc.w $9880
		dc.l ArtNem_FloatMonitors
		dc.w AT_FM*32
		dc.l ArtNem_SpikesSprings
		dc.w $9280
PLC_83D48:	dc.w 1

		dc.l ArtNem_Monitors
		dc.w $9880
		dc.l ArtNem_FloatMonitors
		dc.w AT_FM*32
PLC_83D6C:	dc.w 0
		dc.l ArtNem_Explosion
		dc.w AT_Explosion*$20
PLC_CNZ2KnuxEnd:	dc.w 0

		dc.l ArtNem_EggCapsule
		dc.w $9280
PLC_83D7C:	dc.w 0
		dc.l ArtNem_RobotnikShip
		dc.w $A5C0
; ---------------------------------------------------------------------------

Obj_CreateBossExplosion:

		moveq	#0,d0
		move.b	$2C(a0),d0
		lea	CreateBossExpParameterIndex(pc),a1
		adda.w	(a1,d0.w),a1
		move.b	(a1)+,$39(a0)
		move.b	(a1)+,$3A(a0)
		move.b	(a1)+,$3B(a0)
		move.b	(a1)+,d0
		lea	CreateBossExpRoutineSet(pc,d0.w),a1
		movea.l	(a1)+,a2
		move.l	a2,(a0)
		move.l	(a1)+,$34(a0)
		jmp	(a2)
; ---------------------------------------------------------------------------
CreateBossExpRoutineSet:	dc.l Obj_Wait
		dc.l Obj_BossExpControl1
		dc.l Obj_WaitForParent
		dc.l Obj_BossExpControl1
		dc.l Obj_Wait
		dc.l Obj_NormalExpControl
		dc.l Obj_Wait
		dc.l Obj_BossExpControl2
		dc.l Obj_WaitForParent
		dc.l Obj_BossExpControl2
		dc.l Obj_WaitForParent
		dc.l Obj_NormalExpControl
		dc.l Obj_WaitForParent
		dc.l Obj_BossExpControlOff
CreateBossExpParameterIndex:	dc.w CreateBossExp_00-CreateBossExpParameterIndex

		dc.w CreateBossExp_02-CreateBossExpParameterIndex
		dc.w CreateBossExp_04-CreateBossExpParameterIndex
		dc.w CreateBossExp_06-CreateBossExpParameterIndex
		dc.w CreateBossExp_08-CreateBossExpParameterIndex
		dc.w CreateBossExp_0A-CreateBossExpParameterIndex
		dc.w CreateBossExp_0C-CreateBossExpParameterIndex
		dc.w CreateBossExp_0E-CreateBossExpParameterIndex
		dc.w CreateBossExp_10-CreateBossExpParameterIndex
		dc.w CreateBossExp_12-CreateBossExpParameterIndex
		dc.w CreateBossExp_14-CreateBossExpParameterIndex
		dc.w CreateBossExp_16-CreateBossExpParameterIndex
		dc.w CreateBossExp_18-CreateBossExpParameterIndex
		dc.w CreateBossExp_1A-CreateBossExpParameterIndex
		dc.w CreateBossExp_1C-CreateBossExpParameterIndex
		dc.w CreateBossExp_1E-CreateBossExpParameterIndex
		dc.w CreateBossExp_20-CreateBossExpParameterIndex
CreateBossExp_00:	dc.b  $20, $20,	$20,   0	; Explosion timer, X offset range, Y offset range, routine set
CreateBossExp_02:	dc.b  $28, $80,	$80, $18
CreateBossExp_04:	dc.b  $80, $20,	$20,   8
CreateBossExp_06:	dc.b	4, $10,	$10,   0
CreateBossExp_08:	dc.b	8, $20,	$20, $10
CreateBossExp_0A:	dc.b  $20, $20,	$20,   0
CreateBossExp_0C:	dc.b  $40, $80,	$20,   0
CreateBossExp_0E:	dc.b  $80, $40,	$40,   8
CreateBossExp_10:	dc.b  $20, $20,	$20, $18
CreateBossExp_12:	dc.b  $80, $20,	$20, $20
CreateBossExp_14:	dc.b	8, $80,	$20, $10
CreateBossExp_16:	dc.b  $80, $80,	$80,   8
CreateBossExp_18:	dc.b  $80, $80,	$80, $28
CreateBossExp_1A:	dc.b  $80, $40,	$40, $28
CreateBossExp_1C:	dc.b  $80, $80,	$40,   8
CreateBossExp_1E:	dc.b  $80, $10,	$10,   8
CreateBossExp_20:	dc.b  $80, $20,	$20, $30
; ---------------------------------------------------------------------------

Obj_WaitForParent:
		movea.w	$46(a0),a1
		btst	#5,$38(a1)
		bne.w	loc_83EC2
		tst.l	(a1)
		beq.w	loc_83EC2
		move.w	$10(a1),$10(a0)
		move.w	$14(a1),$14(a0)
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

Obj_BossExpControl1:

		move.b	$39(a0),d0
		bmi.s	loc_83E7E		; If negative, explosions are constantly created every three frames
		subq.b	#1,d0
		move.b	d0,$39(a0)		; Otherwise, continue making explosions until timer runs out
		beq.s	loc_83EC2

loc_83E7E:
		move.w	#2,$2E(a0)

; =============== S U B R O U T I N E =======================================


sub_83E84:

		lea	Child6_MakeBossExplosion1(pc),a2
		jsr	CreateChild6_Simple.w
		bne.w	locret_83EC0

loc_83E90:

		jsr	Random_Number.w		; Offset the explosion by a random amount capped by an effective range
		moveq	#0,d1
		move.b	$3A(a0),d1
		move.w	d1,d2
		add.w	d2,d2
		subq.w	#1,d2
		and.w	d2,d0
		sub.w	d1,d0
		add.w	d0,$10(a1)
		swap	d0
		moveq	#0,d1
		move.b	$3B(a0),d1
		move.w	d1,d2
		add.w	d2,d2
		subq.w	#1,d2
		and.w	d2,d0
		sub.w	d1,d0
		add.w	d0,$14(a1)

locret_83EC0:

		rts
; End of function sub_83E84

; ---------------------------------------------------------------------------

loc_83EC2:

		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------

Obj_NormalExpControl:
		subq.b	#1,$39(a0)				; Same as above, but uses regular explosions (no animals of course)
		beq.s	loc_83EC2
		move.w	#2,$2E(a0)
		lea	Child6_MakeNormalExplosion(pc),a2
		jsr	CreateChild6_Simple.w
		bne.w	locret_83EC0
		move.b	#2,5(a1)
		bset	#7,$A(a1)
		bra.s	loc_83E90
; ---------------------------------------------------------------------------

Obj_BossExpControl2:
		subq.b	#1,$39(a0)
		beq.s	loc_83EC2
		move.w	#2,$2E(a0)
		lea	Child6_MakeBossExplosion2(pc),a2
		jsr	CreateChild6_Simple.w
		bne.w	locret_83EC0
		bra.s	loc_83E90
; ---------------------------------------------------------------------------

Obj_BossExpControlOff:
		subq.b	#1,$39(a0)
		beq.s	loc_83EC2
		move.w	#2,$2E(a0)
		lea	Child6_MakeBossExplosionOff(pc),a2
		jsr	CreateChild6_Simple.w
		bne.w	locret_83EC0
		bra.w	loc_83E90
; ---------------------------------------------------------------------------

Obj_BossExplosionSpecial:
		move.w	#2,$2E(a0)
		move.w	(Camera_X_pos).w,d0
		addi.w	#$A0,d0
		move.w	d0,$10(a0)
		move.w	(Camera_Y_pos).w,d0
		addi.w	#$70,d0
		move.w	d0,$14(a0)
		move.b	#2,$2C(a0)
		bra.w	Obj_CreateBossExplosion
; ---------------------------------------------------------------------------

Obj_BossExplosion1:
		lea	ObjDat_BossExplosion1(pc),a1
		jsr	SetUp_ObjAttributes.w

loc_83F52:
		move.l	#Obj_BossExplosionAnim,(a0)
		move.l	#Go_Delete_Sprite,$34(a0)
		moveq	#-$4C,d0
		jsr	Play_Sound_2.w

Obj_BossExplosionAnim:

		lea	AniRaw_BossExplosion(pc),a1
		jsr	Animate_RawNoSSTMultiDelay.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

Obj_BossExplosion2:
		lea	ObjDat_BossExplosion2(pc),a1
		jsr	SetUp_ObjAttributes.w
		bra.s	loc_83F52
; ---------------------------------------------------------------------------

Obj_BossExplosionOffset:
		lea	ObjDat_BossExplosion1(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#Obj_BossExplosionOffsetAnim,(a0)
		move.l	#Go_Delete_Sprite,$34(a0)
		moveq	#-$4C,d0
		jsr	Play_Sound_2.w

Obj_BossExplosionOffsetAnim:
		move.w	(Displace_Obj_X).w,d0
		sub.w	d0,$10(a0)
		lea	AniRaw_BossExplosion(pc),a1
		jsr	Animate_RawNoSSTMultiDelay.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
ObjDat_BossExplosion1:	dc.l Map_BossExplosion

		dc.w $8500
		dc.w prio(0)
		dc.b $C
		dc.b $C
		dc.b 0
		dc.b 0
ObjDat_BossExplosion2:	dc.l Map_BossExplosion
		dc.w $84D2
		dc.w prio(0)
		dc.b $C
		dc.b $C
		dc.b 0
		dc.b 0
AniRaw_BossExplosion:	dc.b	0,   0

		dc.b	0,   1
		dc.b	1,   1
		dc.b	2,   2
		dc.b	3,   3
		dc.b	4,   4
		dc.b	5,   4
		dc.b  $F4,   0
Child6_MakeBossExplosion1:		dc.w 0
		dc.l Obj_BossExplosion1
Child6_MakeBossExplosion2:		dc.w 0
		dc.l Obj_BossExplosion2
Child6_MakeBossExplosionOff:	dc.w 0
		dc.l Obj_BossExplosionOffset
Child6_MakeNormalExplosion:dc.w 0
		dc.l Obj_Explosion
Map_BossExplosion:	include "General/Sprites/Boss Explosion/Map - Boss Explosion.asm"

; =============== S U B R O U T I N E =======================================


CreateChild2_Complex:
		moveq	#0,d2				; Includes positional offset data and velocity and CHECKLATER
		move.w	(a2)+,d6

loc_840B4:
		jsr	Create_New_Sprite3.w
		bne.s	locret_84112
		move.w	a0,$46(a1)			; Parent RAM address into $46
		move.l	$C(a0),$C(a1)
		move.w	$A(a0),$A(a1)		; Mappings and VRAM offset copied from parent object
		move.l	(a2)+,(a1)
		move.l	(a2)+,$3E(a1)
		move.l	(a2)+,$30(a1)
		move.l	(a2)+,$34(a1)
		move.b	d2,$2C(a1)
		move.w	$10(a0),d0
		move.b	(a2)+,d1
		move.b	d1,$42(a1)			; See offset information above
		ext.w	d1
		add.w	d1,d0
		move.w	d0,$10(a1)
		move.w	$14(a0),d0
		move.b	(a2)+,d1
		move.b	d1,$43(a1)			; See offset information above
		ext.w	d1
		add.w	d1,d0
		move.w	d0,$14(a1)
		move.w	(a2)+,$18(a1)		; X Velocity
		move.w	(a2)+,$1A(a1)		; Y Velocity
		addq.w	#2,d2
		dbf	d6,loc_840B4
		moveq	#0,d0

locret_84112:
		rts

; =============== S U B R O U T I N E =======================================


CreateChild5_ComplexAdjusted:

		moveq	#0,d2				; Same as child routine 2, but adjusts both X position and X velocity based on parent object's orientation
		move.w	(a2)+,d6

loc_841AA:
		jsr	Create_New_Sprite3.w
		bne.s	locret_8421E
		move.w	a0,$46(a1)
		move.l	$C(a0),$C(a1)
		move.w	$A(a0),$A(a1)
		move.l	(a2)+,(a1)
		move.l	(a2)+,$3E(a1)
		move.l	(a2)+,$30(a1)
		move.l	(a2)+,$34(a1)
		move.b	d2,$2C(a1)
		move.w	$10(a0),d0
		move.b	(a2)+,d1
		move.b	d1,$42(a1)
		ext.w	d1
		btst	#0,4(a0)
		beq.s	loc_841EA
		neg.w	d1

loc_841EA:
		add.w	d1,d0
		move.w	d0,$10(a1)
		move.w	$14(a0),d0
		move.b	(a2)+,d1
		move.b	d1,$43(a1)
		ext.w	d1
		add.w	d1,d0
		move.w	d0,$14(a1)
		move.w	(a2)+,d1
		btst	#0,4(a0)
		beq.s	loc_8420E
		neg.w	d1

loc_8420E:
		move.w	d1,$18(a1)
		move.w	(a2)+,$1A(a1)
		addq.w	#2,d2
		dbf	d6,loc_841AA
		moveq	#0,d0

locret_8421E:
		rts

; =============== S U B R O U T I N E =======================================


CreateChild7_Normal2:

		moveq	#0,d2				; Same as child routine 1, but does not limit children to object slots after the parent
		move.w	(a2)+,d6

loc_8425C:
		jsr	Create_New_Sprite.w
		bne.s	locret_842A6
		move.w	a0,$46(a1)
		move.l	$C(a0),$C(a1)
		move.w	$A(a0),$A(a1)
		move.l	(a2)+,(a1)
		move.b	d2,$2C(a1)
		move.w	$10(a0),d0
		move.b	(a2)+,d1
		move.b	d1,$42(a1)
		ext.w	d1
		add.w	d1,d0
		move.w	d0,$10(a1)
		move.w	$14(a0),d0
		move.b	(a2)+,d1
		move.b	d1,$43(a1)
		ext.w	d1
		add.w	d1,d0
		move.w	d0,$14(a1)
		addq.w	#2,d2
		dbf	d6,loc_8425C
		moveq	#0,d0

locret_842A6:
		rts
; End of function CreateChild7_Normal2


; =============== S U B R O U T I N E =======================================


CreateChild8_TreeListRepeated:

		movea.l	a0,a3				; Creates a linked object list like routine 4, but they only chain themselves one way. All maintain the calling object as their parent
		moveq	#0,d2
		move.w	(a2)+,d6

loc_842AE:
		jsr	Create_New_Sprite3.w
		bne.s	locret_842E6
		move.w	a3,$46(a1)
		move.w	a0,$44(a1)
		movea.l	a1,a3
		move.l	$C(a0),$C(a1)
		move.w	$A(a0),$A(a1)
		move.l	(a2),(a1)
		move.b	d2,$2C(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		addq.w	#2,d2
		dbf	d6,loc_842AE
		moveq	#0,d0

locret_842E6:
		rts
; End of function CreateChild8_TreeListRepeated


; =============== S U B R O U T I N E =======================================


CreateChild9_TreeList:
		movea.l	a0,a3				; Same as routine 8, but creates seperate objects in a list rather than repeating the same object
		moveq	#0,d2
		move.w	(a2)+,d6

loc_842EE:
		jsr	Create_New_Sprite3.w
		bne.s	locret_84326
		move.w	a3,$46(a1)
		move.w	a0,$44(a1)
		movea.l	a1,a3
		move.l	$C(a0),$C(a1)
		move.w	$A(a0),$A(a1)
		move.l	(a2)+,(a1)
		move.b	d2,$2C(a1)
		move.w	$10(a0),$10(a1)
		move.w	$14(a0),$14(a1)
		addq.w	#2,d2
		dbf	d6,loc_842EE
		moveq	#0,d0

locret_84326:
		rts
; End of function CreateChild9_TreeList


; =============== S U B R O U T I N E =======================================


CreateChild10_NormalAdjusted:

		moveq	#0,d2				; Same as child routine 1, but adjusts X position based on parent object's orientation
		move.w	(a2)+,d6

loc_8432C:
		jsr	Create_New_Sprite3.w
		bne.s	locret_84386
		move.w	a0,$46(a1)
		move.l	$C(a0),$C(a1)
		move.w	$A(a0),$A(a1)
		move.l	(a2)+,(a1)
		move.b	d2,$2C(a1)
		move.w	$10(a0),d0
		move.b	(a2)+,d1
		btst	#0,4(a0)
		beq.s	loc_84360
		bset	#0,4(a1)
		neg.b	d1

loc_84360:
		move.b	d1,$42(a1)
		ext.w	d1
		add.w	d1,d0
		move.w	d0,$10(a1)
		move.w	$14(a0),d0
		move.b	(a2)+,d1
		move.b	d1,$43(a1)
		ext.w	d1
		add.w	d1,d0
		move.w	d0,$14(a1)
		addq.w	#2,d2
		dbf	d6,loc_8432C
		moveq	#0,d0

locret_84386:
		rts

; =============== S U B R O U T I N E =======================================


Animate_RawAdjustFlipX:

		movea.l	$30(a0),a1
		subq.b	#1,$24(a0)
		bpl.s	locret_84496
		moveq	#0,d0
		move.b	$23(a0),d0
		addq.w	#1,d0
		move.b	d0,$23(a0)
		moveq	#0,d1
		move.b	1(a1,d0.w),d1
		bmi.s	locret_84496.jmp
		bclr	#6,d1
		beq.s	loc_8448E
		bchg	#0,4(a0)

loc_8448E:
		move.b	(a1),$24(a0)
		move.b	d1,$22(a0)

locret_84496:
		rts

.jmp		jmp	loc_84428.w

; ---------------------------------------------------------------------------

Animate_RawAdjustFlipY:
		movea.l	$30(a0),a1
		subq.b	#1,$24(a0)
		bpl.s	locret_844CC
		moveq	#0,d0
		move.b	$23(a0),d0
		addq.w	#1,d0
		move.b	d0,$23(a0)
		moveq	#0,d1
		move.b	1(a1,d0.w),d1
		bmi.s	locret_84496.jmp
		bclr	#6,d1
		beq.s	loc_844C4
		bchg	#1,4(a0)

loc_844C4:
		move.b	(a1),$24(a0)
		move.b	d1,$22(a0)

locret_844CC:
		rts

; =============== S U B R O U T I N E =======================================


Animate_ExternalPlayerSprite:

		subq.b	#1,$24(a1)
		bpl.s	loc_84500
		move.b	(a2),$24(a1)
		moveq	#0,d0
		move.b	$23(a1),d0
		addq.b	#2,d0
		move.b	d0,$23(a1)
		move.b	1(a2,d0.w),d1
		beq.s	loc_84504
		move.b	d1,$22(a1)
		bclr	#0,4(a1)
		tst.b	2(a2,d0.w)
		beq.s	loc_84500
		bset	#0,4(a1)

loc_84500:

		jmp	Player_Load_PLC2.w
; ---------------------------------------------------------------------------

loc_84504:
		jsr	Player_Load_PLC2.w
		movea.l	$34(a0),a1
		jmp	(a1)

; =============== S U B R O U T I N E =======================================


Animate_RawMultiDelayFlipY:
		movea.l	$30(a0),a1
		subq.b	#1,$24(a0)
		bpl.s	loc_84684
		moveq	#0,d0
		move.b	$23(a0),d0
		addq.w	#2,d0
		move.b	d0,$23(a0)
		moveq	#0,d1
		move.b	(a1,d0.w),d1
		bmi.s	loc_84684.jmp
		bclr	#6,d1
		beq.s	loc_84676
		bchg	#1,4(a0)

loc_84676:
		move.b	d1,$22(a0)
		move.b	1(a1,d0.w),$24(a0)
		moveq	#1,d2
		rts
; ---------------------------------------------------------------------------

loc_84684:
		moveq	#0,d2
		rts

.jmp		jmp	loc_845CC.w

; =============== S U B R O U T I N E =======================================

Animate_RawGetSlower:
		movea.l	$30(a0),a1
		bset	#5,$38(a0)
		bne.s	loc_84790
		clr.w	$2E(a0)

loc_84790:
		subq.b	#1,$24(a0)
		bpl.s	locret_847C4
		move.b	$2E(a0),d2
		moveq	#0,d0
		move.b	$23(a0),d0
		addq.b	#1,d0
		move.b	1(a1,d0.w),d1
		bpl.s	loc_847B0
		moveq	#0,d0
		move.b	1(a1),d1
		addq.b	#1,d2

loc_847B0:
		move.b	d0,$23(a0)
		move.b	d1,$22(a0)
		move.b	d2,$24(a0)
		cmp.b	(a1),d2
		bhs.s	loc_847C6
		move.b	d2,$2E(a0)

locret_847C4:

		rts
; ---------------------------------------------------------------------------

loc_847C6:
		move.b	$2F(a0),d0
		addq.b	#1,d0
		move.b	d0,$2F(a0)
		cmp.b	1(a1),d0
		blo.s	locret_847C4
		bclr	#5,$38(a0)
		clr.b	$2F(a0)
		movea.l	$34(a0),a2
		jmp	(a2)

; =============== S U B R O U T I N E =======================================

Obj_IncLevEndXGradual:
		move.w	(Camera_max_X_pos).w,d0
		move.l	$30(a0),d1
		addi.l	#$4000,d1
		move.l	d1,$30(a0)
		swap	d1
		add.w	d1,d0
		cmp.w	(__u_FA92).w,d0
		bhs.s	loc_84A6A
		move.w	d0,(Camera_max_X_pos).w
		rts
; ---------------------------------------------------------------------------

loc_84A6A:
		move.w	(__u_FA92).w,(Camera_max_X_pos).w
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

Obj_DecLevStartXGradual:
		move.w	(Camera_min_X_pos).w,d0
		move.l	$30(a0),d1
		addi.l	#$4000,d1
		move.l	d1,$30(a0)
		swap	d1
		sub.w	d1,d0
		cmp.w	(__u_FA94).w,d0
		ble.s	loc_84A98
		move.w	d0,(Camera_min_X_pos).w
		rts
; ---------------------------------------------------------------------------

loc_84A98:
		move.w	(__u_FA94).w,(Camera_min_X_pos).w
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

Obj_DecLevStartYGradual:
		move.w	(Camera_min_Y_pos).w,d0
		move.l	$30(a0),d1
		addi.l	#$4000,d1
		move.l	d1,$30(a0)
		swap	d1
		sub.w	d1,d0
		cmp.w	(__u_FA96).w,d0
		ble.s	loc_84AC6
		move.w	d0,(Camera_min_Y_pos).w
		rts
; ---------------------------------------------------------------------------

loc_84AC6:
		move.w	(__u_FA96).w,(Camera_min_Y_pos).w
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

Obj_IncLevEndYGradual:
		move.w	(Camera_max_Y_pos).w,d0
		move.l	$30(a0),d1
		addi.l	#$8000,d1
		move.l	d1,$30(a0)
		swap	d1
		add.w	d1,d0
		cmp.w	(__u_FA98).w,d0
		bgt.s	loc_84AF4
		move.w	d0,(Camera_max_Y_pos).w
		rts
; ---------------------------------------------------------------------------

loc_84AF4:
		move.w	(__u_FA98).w,(Camera_max_Y_pos).w
		jmp	Delete_Current_Sprite.w

; =============== S U B R O U T I N E =======================================


Change_FlipX:

		bclr	#0,4(a0)
		tst.w	d0
		beq.s	locret_84B6C
		bset	#0,4(a0)

locret_84B6C:
		rts

; =============== S U B R O U T I N E =======================================


Change_FlipXUseParent:

		bclr	#0,4(a0)
		movea.w	$46(a0),a1
		btst	#0,4(a1)
		beq.s	locret_84B9A
		bset	#0,4(a0)

locret_84B9A:
		rts

; =============== S U B R O U T I N E =======================================


MoveSprite_NormGravity:
		moveq	#$38,d1
		move.w	$18(a1),d0
		ext.l	d0
		lsl.l	#8,d0
		add.l	d0,$10(a1)
		move.w	$1A(a1),d0
		add.w	d1,$1A(a1)
		ext.l	d0
		lsl.l	#8,d0
		add.l	d0,$14(a1)
		rts
; End of function MoveSprite_NormGravity


; =============== S U B R O U T I N E =======================================


MoveSprite_Circular:
		move.b	$3C(a0),d0
		jsr	GetSineCosine.w
		move.w	$3A(a0),d2
		move.w	d2,d3
		muls.w	d0,d2
		swap	d2
		muls.w	d1,d3
		swap	d3
		movea.w	$46(a0),a1
		move.w	$10(a1),d0
		add.w	d2,d0
		move.b	$42(a0),d4
		ext.w	d4
		add.w	d4,d0
		move.w	d0,$10(a0)
		move.w	$14(a1),d1
		add.w	d3,d1
		move.b	$43(a0),d4
		ext.w	d4
		add.w	d4,d1
		move.w	d1,$14(a0)
		rts
; ---------------------------------------------------------------------------

MoveSprite_CircularSimpleCheckFlip:

		move.b	$3C(a0),d0
		jsr	GetSineCosine.w
		swap	d0
		clr.w	d0
		swap	d1
		clr.w	d1
		asr.l	d2,d0
		asr.l	d2,d1
		movea.w	$46(a0),a1
		move.l	$10(a1),d2
		move.l	$14(a1),d3
		btst	#0,4(a1)
		beq.s	loc_84C9E
		neg.l	d0

loc_84C9E:
		add.l	d0,d2
		add.l	d1,d3
		move.l	d2,$10(a0)
		move.l	d3,$14(a0)
		rts

; =============== S U B R O U T I N E =======================================


MoveSprite_CircularSimpleOffset:
		move.b	$3C(a0),d0
		jsr	GetSineCosine.w
		swap	d0
		clr.w	d0
		swap	d1
		clr.w	d1
		asr.l	d2,d0
		asr.l	d2,d1
		movea.w	$46(a0),a1
		move.l	$10(a1),d2
		move.l	$14(a1),d3
		move.b	$42(a0),d4
		ext.w	d4
		swap	d4
		clr.w	d4
		add.l	d4,d2
		move.b	$43(a0),d4
		ext.w	d4
		swap	d4
		clr.w	d4
		add.l	d4,d3
		add.l	d0,d2
		add.l	d1,d3
		move.l	d2,$10(a0)
		move.l	d3,$14(a0)
		rts

; =============== S U B R O U T I N E =======================================


MoveSprite_CircularLookup:

		moveq	#0,d0
		move.b	$3C(a0),d0
		move.w	d0,d1
		andi.w	#$3F,d0
		lsr.w	#5,d1
		andi.w	#6,d1
		movea.w	$46(a0),a1
		lea	$40(a2),a3
		move.w	$10(a1),d2
		move.w	$14(a1),d3
		move.b	$42(a0),d4
		ext.w	d4
		btst	#0,4(a0)
		beq.s	loc_84DAA
		neg.w	d4

loc_84DAA:
		add.w	d4,d2
		move.b	$43(a0),d4
		ext.w	d4
		add.w	d4,d3
		move.w	d0,d4
		not.w	d4
		lea	AtAngle_LookupIndex.w,a4
		move.w	(a4,d1.w),d1
		jsr	(a4,d1.w)
		btst	#0,4(a0)
		beq.s	loc_84DCE
		neg.w	d5

loc_84DCE:
		add.w	d5,d2
		add.w	d6,d3
		move.w	d2,$10(a0)
		move.w	d3,$14(a0)
		rts
; End of function MoveSprite_CircularLookup


; =============== S U B R O U T I N E =======================================


MoveSprite_AngleYLookup:

		moveq	#0,d0
		move.b	$3C(a0),d0
		move.w	d0,d1
		andi.w	#$3F,d0
		lsr.w	#5,d1
		andi.w	#6,d1
		movea.w	$46(a0),a1
		lea	$40(a2),a3
		move.w	$14(a1),d3
		move.w	d0,d4
		not.w	d4
		move.w	AngleY_LookupIndex(pc,d1.w),d1
		jsr	AngleY_LookupIndex(pc,d1.w)
		add.w	d1,d3
		move.w	d3,$14(a0)
		rts
; End of function MoveSprite_AngleYLookup

; ---------------------------------------------------------------------------
AngleY_LookupIndex:	dc.w loc_84E16-AngleY_LookupIndex
		dc.w loc_84E1E-AngleY_LookupIndex
		dc.w loc_84E28-AngleY_LookupIndex
		dc.w loc_84E32-AngleY_LookupIndex
; ---------------------------------------------------------------------------

loc_84E16:
		moveq	#0,d1
		move.b	(a3,d4.w),d1
		rts
; ---------------------------------------------------------------------------

loc_84E1E:
		moveq	#0,d1
		move.b	(a2,d0.w),d1
		neg.w	d1
		rts
; ---------------------------------------------------------------------------

loc_84E28:
		moveq	#0,d1
		move.b	(a3,d4.w),d1
		neg.w	d1
		rts
; ---------------------------------------------------------------------------

loc_84E32:
		moveq	#0,d1
		move.b	(a2,d0.w),d1
		rts

; =============== S U B R O U T I N E =======================================


MoveSprite_AngleXLookupOffset:

		moveq	#0,d0
		move.b	$3C(a0),d0
		move.b	d0,d1
		rol.b	#3,d1
		andi.w	#6,d1
		move.w	AngleX_LookupIndex(pc,d1.w),d2
		jmp	AngleX_LookupIndex(pc,d2.w)
; End of function MoveSprite_AngleXLookupOffset

; ---------------------------------------------------------------------------
AngleX_LookupIndex:	dc.w loc_84E58-AngleX_LookupIndex
		dc.w loc_84E60-AngleX_LookupIndex
		dc.w loc_84E6C-AngleX_LookupIndex
		dc.w loc_84E7C-AngleX_LookupIndex
; ---------------------------------------------------------------------------

loc_84E58:
		move.b	(a1,d0.w),d1
		bra.w	loc_84E8C
; ---------------------------------------------------------------------------

loc_84E60:
		moveq	#$7F,d1
		sub.w	d0,d1
		move.b	(a1,d1.w),d1
		bra.w	loc_84E8C
; ---------------------------------------------------------------------------

loc_84E6C:
		move.w	d0,d1
		andi.w	#$3F,d1
		move.b	(a1,d1.w),d1
		neg.w	d1
		bra.w	loc_84E8C
; ---------------------------------------------------------------------------

loc_84E7C:
		move.w	#$FF,d1
		sub.w	d0,d1
		move.b	(a1,d1.w),d1
		neg.w	d1
		bra.w	loc_84E8C

loc_84E8C:

		movea.w	$46(a0),a1
		move.w	$10(a1),d2
		move.b	$42(a0),d3
		ext.w	d3
		add.w	d3,d2
		btst	#0,4(a1)
		beq.s	loc_84EA6
		neg.w	d1

loc_84EA6:
		add.w	d1,d2
		move.w	d2,$10(a0)
		move.w	$14(a1),d2
		move.b	$43(a0),d3
		ext.w	d3
		add.w	d3,d2
		move.w	d2,$14(a0)
		rts
; ---------------------------------------------------------------------------

MoveDraw_SpriteTimed:
		subq.w	#1,$2E(a0)
		bmi.s	MoveDraw_SpriteTimed2.d
		jsr	MoveSprite2.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

MoveDraw_SpriteTimed2:
		subq.w	#1,$2E(a0)
		bmi.s	.d
		jsr	MoveSprite_LightGravity.w
		jmp	Draw_And_Touch_Sprite.w

.d		jmp	Go_Delete_Sprite.w

; =============== S U B R O U T I N E =======================================


TimedSprite_ScreenLock:
		subq.w	#1,$2E(a0)
		bmi.s	loc_84F88
		rts
; ---------------------------------------------------------------------------

loc_84F88:
		st	Boss_flag.w
.a		jmp	Go_Delete_Sprite_2.w

; =============== S U B R O U T I N E =======================================


BossFlash:
		lea	(Normal_palette_line_2+$2).w,a1
		moveq	#0,d0
		tst.w	(a1)
		bne.s	loc_84FA0
		move.w	#$EEE,d0

loc_84FA0:
		move.w	d0,(a1)
		rts

; =============== S U B R O U T I N E =======================================


Find_SonicTails8Way:
		jsr	Find_SonicTails.w		; This routine seems bugged slightly. Shouldn't the first two cmpi instructions look at d3 and not d2?
		cmp.w	d2,d3
		beq.s	loc_853E2
		bhi.s	loc_853BC
		swap	d3			; If Y distance is closer to object
		clr.w	d3
		divu.w	d2,d3
		tst.w	d0
		beq.s	loc_853AE
		cmpi.w	#-$8000,d2	; If Y was closer and Sonic is to right of object
		blo.s	loc_853FE
		tst.w	d0
		beq.s	loc_853FA
		bra.w	loc_85402
; ---------------------------------------------------------------------------

loc_853AE:
		cmpi.w	#-$8000,d2	; If Y was closer and Sonic is to left of object
		blo.s	loc_8540E
		tst.w	d1
		bne.s	loc_8540A
		bra.w	loc_85412
; ---------------------------------------------------------------------------

loc_853BC:
		swap	d2			; If X distance is closer to object
		clr.w	d2
		divu.w	d3,d2
		tst.w	d1
		bne.s	loc_853D4
		cmpi.w	#-$8000,d2
		blo.s	loc_853F6
		tst.w	d0
		bne.s	loc_853FA
		bra.w	loc_85412
; ---------------------------------------------------------------------------

loc_853D4:
		cmpi.w	#-$8000,d2
		blo.s	loc_85406
		tst.w	d0
		bne.s	loc_85402
		bra.w	loc_8540A
; ---------------------------------------------------------------------------

loc_853E2:
		tst.w	d0				; If X and Y distance are identical
		beq.s	loc_853EE
		tst.w	d1
		beq.s	loc_853FA
		bra.w	loc_85402
; ---------------------------------------------------------------------------

loc_853EE:
		tst.w	d1
		bne.s	loc_8540A
		bra.w	loc_85412
; ---------------------------------------------------------------------------

loc_853F6:
		moveq	#0,d4
		rts
; ---------------------------------------------------------------------------

loc_853FA:

		moveq	#1,d4
		rts
; ---------------------------------------------------------------------------

loc_853FE:
		moveq	#2,d4
		rts
; ---------------------------------------------------------------------------

loc_85402:

		moveq	#3,d4
		rts
; ---------------------------------------------------------------------------

loc_85406:
		moveq	#4,d4
		rts
; ---------------------------------------------------------------------------

loc_8540A:

		moveq	#5,d4
		rts
; ---------------------------------------------------------------------------

loc_8540E:
		moveq	#6,d4
		rts
; ---------------------------------------------------------------------------

loc_85412:

		moveq	#7,d4
		rts

; =============== S U B R O U T I N E =======================================


Chase_Object:

		move.w	d0,d2			; d0 = Maximum speed
		neg.w	d2
		move.w	d1,d3			; d1 = acceleration
		move.w	$10(a0),d4
		cmp.w	$10(a1),d4
		seq	d5
		beq.s	loc_8545E
		bcs.s	loc_8544C
		neg.w	d1

loc_8544C:
		move.w	$18(a0),d4
		add.w	d1,d4
		cmp.w	d2,d4
		blt.s	loc_8545E
		cmp.w	d0,d4
		bgt.s	loc_8545E
		move.w	d4,$18(a0)

loc_8545E:

		move.w	$14(a0),d4
		cmp.w	$14(a1),d4
		beq.s	loc_85480
		bcs.s	loc_8546C
		neg.w	d3

loc_8546C:
		move.w	$1A(a0),d4
		add.w	d3,d4
		cmp.w	d2,d4
		blt.s	locret_8547E
		cmp.w	d0,d4
		bgt.s	locret_8547E
		move.w	d4,$1A(a0)

locret_8547E:

		rts
; ---------------------------------------------------------------------------

loc_85480:
		tst.b	d5
		beq.s	locret_8547E
		clr.w	$18(a0)
		clr.w	$1A(a0)
		rts
; End of function Chase_Object


; =============== S U B R O U T I N E =======================================


Chase_ObjectXOnly:

		move.w	d0,d2
		neg.w	d2
		move.w	$10(a1),d3
		move.b	$42(a0),d4
		ext.w	d4
		add.w	d4,d3
		cmp.w	$10(a0),d3
		bhs.s	loc_854A6
		neg.w	d1

loc_854A6:
		move.w	$18(a0),d3
		add.w	d1,d3
		cmp.w	d2,d3
		blt.s	locret_854B8
		cmp.w	d0,d3
		bgt.s	locret_854B8
		move.w	d3,$18(a0)

locret_854B8:

		rts
; End of function Chase_ObjectXOnly


; =============== S U B R O U T I N E =======================================


Chase_ObjectYOnly:

		move.w	d0,d2
		neg.w	d2
		move.w	$14(a1),d3
		move.b	$43(a0),d4
		ext.w	d4
		add.w	d4,d3
		cmp.w	$14(a0),d3
		bhs.s	loc_854D2
		neg.w	d1

loc_854D2:
		move.w	$1A(a0),d3
		add.w	d1,d3
		cmp.w	d2,d3
		blt.s	locret_854E4
		cmp.w	d0,d3
		bgt.s	locret_854E4
		move.w	d3,$1A(a0)

locret_854E4:

		rts
; End of function Chase_ObjectYOnly

; ---------------------------------------------------------------------------

Obj_FadeSelectedToBlack:
		move.l	#loc_8555E,(a0)
		move.b	#7,$39(a0)
		st	(Update_PalRotation_Flag).w

loc_8555E:
		subq.w	#1,$2E(a0)
		bpl.s	locret_8558E
		move.w	$3A(a0),$2E(a0)
		movea.w	$30(a0),a1
		move.w	$3C(a0),d0
		moveq	#$E,d1
		moveq	#-$20,d2

loc_85576:
		bsr.w	DecColor_Obj
		dbf	d0,loc_85576
		subq.b	#1,$39(a0)
		bpl.s	locret_8558E
		clr.b	(Update_PalRotation_Flag).w
		jsr	Go_Delete_Sprite.w

locret_8558E:

		rts

; =============== S U B R O U T I N E =======================================


DecColor_Obj:

		move.b	(a1),d3
		and.b	d1,d3
		beq.s	loc_85598
		subq.b	#2,d3

loc_85598:
		move.b	d3,(a1)+
		move.b	(a1),d3
		move.b	d3,d4
		and.b	d2,d3
		beq.s	loc_855A6
		subi.b	#$20,d3

loc_855A6:
		and.b	d1,d4
		beq.s	loc_855AC
		subq.b	#2,d4

loc_855AC:
		or.b	d3,d4
		move.b	d4,(a1)+
		rts
; End of function DecColor_Obj

; ---------------------------------------------------------------------------

Obj_FadeSelectedFromBlack:

		move.l	#loc_855C2,(a0)
		move.b	#7,$39(a0)
		st	(Update_PalRotation_Flag).w

loc_855C2:
		subq.w	#1,$2E(a0)
		bpl.s	locret_855F6
		move.w	$3A(a0),$2E(a0)
		movea.w	$30(a0),a1
		movea.w	$32(a0),a2
		move.w	$3C(a0),d0
		moveq	#$E,d1
		moveq	#-$20,d2

loc_855DE:
		bsr.w	IncColor_Obj
		dbf	d0,loc_855DE
		subq.b	#1,$39(a0)
		bpl.s	locret_855F6
		clr.b	(Update_PalRotation_Flag).w
		jsr	Go_Delete_Sprite.w

locret_855F6:

		rts

; =============== S U B R O U T I N E =======================================


IncColor_Obj:
		move.b	(a1),d3
		and.b	d1,d3
		move.b	(a2)+,d4
		and.b	d1,d4
		cmp.b	d4,d3
		bhs.s	loc_85606
		addq.b	#2,d3

loc_85606:
		move.b	d3,(a1)+
		move.b	(a1),d3
		move.b	d3,d4
		and.b	d2,d3
		move.b	(a2)+,d5
		move.b	d5,d6
		and.b	d2,d5
		cmp.b	d5,d3
		bhs.s	loc_8561C
		addi.b	#$20,d3

loc_8561C:
		and.b	d1,d4
		and.b	d1,d6
		cmp.b	d6,d4
		bhs.s	loc_85626
		addq.b	#2,d4

loc_85626:
		or.b	d3,d4
		move.b	d4,(a1)+
		rts
; End of function IncColor_Obj

; ---------------------------------------------------------------------------

Wait_FadeToLevelMusic:

		subq.w	#1,$2E(a0)
		bmi.s	loc_85674
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_85674:
		bclr	#7,4(a0)
		move.w	#$77,$2E(a0)
		jsr	Create_New_Sprite.w
		bne.s	loc_8568E
		move.l	#Obj_Song_Fade_ToLevelMusic,(a1)

loc_8568E:
		movea.l	$34(a0),a1
		jmp	(a1)
; ---------------------------------------------------------------------------

Wait_NewDelay:

		subq.w	#1,$2E(a0)
		bmi.s	loc_856A0
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_856A0:
		bclr	#7,4(a0)
		move.w	#$77,$2E(a0)
		movea.l	$34(a0),a1
		jmp	(a1)

; =============== S U B R O U T I N E =======================================


EnemyDefeated:
		bsr.w	EnemyDefeat_Score
		movea.w	$44(a0),a1
		tst.w	$1A(a1)
		bmi.s	loc_85750
		move.w	$14(a1),d0
		cmp.w	$14(a0),d0
		bhs.s	loc_85758
		neg.w	$1A(a1)
		rts
; ---------------------------------------------------------------------------

loc_85750:
		addi.w	#$100,$1A(a1)
		rts
; ---------------------------------------------------------------------------

loc_85758:
		subi.w	#$100,$1A(a1)
		rts
; End of function EnemyDefeated


; =============== S U B R O U T I N E =======================================


EnemyDefeat_Score:
		bset	#7,$2A(a0)
		clr.b	$28(a0)
		moveq	#0,d0
		move.w	(Chain_bonus_counter).w,d0
		addq.w	#2,(Chain_bonus_counter).w
		cmpi.w	#6,d0
		blo.s	loc_8577C
		moveq	#6,d0

loc_8577C:
		move.w	d0,$3E(a0)
		move.w	word_857AC(pc,d0.w),d0
		cmpi.w	#$20,(Chain_bonus_counter).w
		blo.s	loc_85796
		move.w	#$3E8,d0		; 10000 points
		move.w	#$A,$3E(a0)

loc_85796:
		movea.w	a1,a3
		jsr	(HUD_AddToScore).l
		move.l	#Obj_Explosion,(a0)
		move.b	#0,5(a0)
		rts
; End of function EnemyDefeat_Score

; ---------------------------------------------------------------------------
word_857AC:	dc.w $A		;100 points
		dc.w $14		;200 points
		dc.w $32		;500 points
		dc.w $64		;1000 points

; =============== S U B R O U T I N E =======================================


Check_LRControllerShake:

		subq.b	#1,$3D(a0)
		bpl.s	loc_8584A
		move.b	#5,$3C(a0)
		move.b	#$3C,$3D(a0)

loc_8584A:
		movea.w	$3E(a0),a2
		move.w	(a2),d0
		andi.w	#$C,d0
		beq.s	locret_8586E
		move.w	$3A(a0),d1
		move.w	d0,$3A(a0)
		andi.w	#$C,d1
		eor.w	d1,d0
		beq.s	locret_8586E
		subq.b	#1,$3C(a0)
		bmi.s	locret_8586E
		moveq	#0,d0

locret_8586E:

		rts
; End of function Check_LRControllerShake


; =============== S U B R O U T I N E =======================================

Check_InTheirRange:

		move.w	$10(a0),d0
		move.w	$10(a1),d1
		add.w	(a2)+,d1
		cmp.w	d1,d0
		blt.s	loc_858C4
		add.w	(a2)+,d1
		cmp.w	d1,d0
		bge.s	loc_858C4
		move.w	$14(a0),d0
		move.w	$14(a1),d1
		add.w	(a2)+,d1
		cmp.w	d1,d0
		blt.s	loc_858C4
		add.w	(a2)+,d1
		cmp.w	d1,d0
		bge.s	loc_858C4
		moveq	#1,d0
		rts
; ---------------------------------------------------------------------------

loc_858C4:

		moveq	#0,d0
		rts
; End of function Check_InTheirRange


; =============== S U B R O U T I N E =======================================


Check_InMyRange:

		move.w	$10(a0),d0
		move.w	$10(a1),d1
		add.w	(a2)+,d0
		cmp.w	d0,d1
		blt.s	loc_858F4
		add.w	(a2)+,d0
		cmp.w	d0,d1
		bge.s	loc_858F4
		move.w	$14(a0),d0
		move.w	$14(a1),d1
		add.w	(a2)+,d0
		cmp.w	d0,d1
		blt.s	loc_858F4
		add.w	(a2)+,d0
		cmp.w	d0,d1
		bge.s	loc_858F4
		moveq	#1,d0
		rts
; ---------------------------------------------------------------------------

loc_858F4:

		moveq	#0,d0
		rts

; =============== S U B R O U T I N E =======================================


Run_PalRotationScript2:

		tst.b	(Update_PalRotation_Flag).w
		bne.s	locret_85A58
		subq.b	#1,$3A(a0)
		bpl.s	locret_85A58
		movea.l	(a1)+,a3		; Address of Palette animation data
		move.w	(a1)+,d0		; Number of colors to replace
		moveq	#0,d1
		move.b	$3B(a0),d1
		addq.b	#2,d1
		moveq	#0,d2
		move.b	(a1,d1.w),d2
		bpl.s	loc_85A3E
		moveq	#0,d1
		move.b	(a1),d2

loc_85A3E:
		move.b	d1,$3B(a0)
		move.b	1(a1,d1.w),$3A(a0)
		add.w	d2,d2
		move.w	(a3,d2.w),d2
		lea	(a3,d2.w),a3

loc_85A52:
		move.w	(a3)+,(a2)+
		dbf	d0,loc_85A52

locret_85A58:
		rts
; End of function Run_PalRotationScript2


; =============== S U B R O U T I N E =======================================


Child_GetPriority:

		movea.w	$46(a0),a1
		bclr	#7,$A(a0)
		btst	#7,$A(a1)
		beq.s	loc_85A72
		bset	#7,$A(a0)

loc_85A72:
		move.w	8(a1),8(a0)
		rts
; End of function Child_GetPriority


; =============== S U B R O U T I N E =======================================


Child_GetPriorityOnce:

		movea.w	$46(a0),a1
		btst	#7,$A(a1)
		beq.s	locret_85A8E
		bset	#7,$A(a0)
		move.l	(sp),(a0)

locret_85A8E:
		rts
; ---------------------------------------------------------------------------

Obj_Song_Fade_ToLevelMusic:
		move.w	#$78,$2E(a0)
		moveq	#-$1F,d0
		jsr	Play_Sound.w
		move.l	#loc_85B1E,(a0)

loc_85B1E:
		subq.w	#1,$2E(a0)
		bpl.s	locret_85A8E
		jsr	Obj_PlayLevelMusic.w
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

Obj_Song_Fade_Transition:

		move.w	#$5A,$2E(a0)
		moveq	#-$1F,d0
		jsr	Play_Sound.w
		move.l	#loc_85B44,(a0)

loc_85B44:
		subq.w	#1,$2E(a0)
		bpl.s	locret_85A8E
		move.b	$2C(a0),d0
		move.b	d0,(Level_music+$1).w
		jsr	Play_Sound.w
		jmp	Delete_Current_Sprite.w

; =============== S U B R O U T I N E =======================================

Obj_EndSignControl_HitHUD:	; NAT: yes
		move.l	#Obj_EndSignControlDoSign_HitHUD,$34(a0)
		bra.s	Obj_EndSignControl.common

Obj_EndSignControl:
		move.l	#Obj_EndSignControlDoSign,$34(a0)
.common		st	(End_Of_Level_Flag).w		; End of level is in effect
		bset	#4,$38(a0)
		move.w	#$77,$2E(a0)
		move.l	#Obj_EndSignControlWait,(a0)
		rts

; ---------------------------------------------------------------------------
PLC_EndSignStuff:	dc.w 2
		dc.l ArtNem_Monitors
		dc.w $9880
		dc.l ArtNem_SignpostStub
		dc.w $69A*32		; NAT: moved this! Make sure it wont break stuff
		dc.l ArtNem_FloatMonitors
		dc.w AT_FM*32
; ---------------------------------------------------------------------------

Obj_EndSignControlWait:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

Obj_EndSignControlDoSign_HitHUD:	; NAT: yes
		move.l	#Obj_EndSignControlAwaitStart_HitHUD,(a0)
		clr.b	MonContPos.w			; NAT: Move contents onscreen
		move.w	#30,$14(a0)			; set delay
		bra.s	Obj_EndSignControlDoSign.common

Obj_EndSignControlDoSign:
		move.l	#Obj_EndSignControlAwaitStart,(a0)
.common		clr.b	(Boss_flag).w
		lea	Child6_EndSign(pc),a2
		jsr	CreateChild6_Simple.w
		lea	PLC_EndSignStuff(pc),a1
		jsr	Load_PLC_Raw.w
		jmp	AfterBoss_Cleanup(pc)
; ---------------------------------------------------------------------------
Child6_EndSign:	dc.w 0
		dc.l Obj_EndSign
; ---------------------------------------------------------------------------

Obj_EndSignControlAwaitStart_HitHUD:
		subq.w	#1,$14(a0)			; NAT: Decrease delay
		bne.s	Obj_EndSignControlAwaitStart	; if not over, branch
		jsr	Boss_DisableHitMode		; NAT: Disable hit mode
		move.l	#Obj_EndSignControlAwaitStart,(a0)

Obj_EndSignControlAwaitStart:
		tst.b	(End_Of_Level_Flag).w
		bne.s	.rts
		move.b	#4,Game_mode.w
.rts		rts

		move.l	#Obj_EndSignControlDoStart,(a0)
		jsr	Restore_PlayerControl.w
		lea	(Player_2).w,a1
		jmp	Restore_PlayerControl2.w
; ---------------------------------------------------------------------------

Obj_EndSignControlDoStart:
		tst.b	(Title_Card_Out_Flag).w		; Wait for title card to finish
		beq.s	Obj_EndSignControlAwaitStart.rts
		jsr	Change_Act2Sizes(pc)
		jmp	Delete_Current_Sprite.w

; =============== S U B R O U T I N E =======================================


Check_CameraInRange:

		move.w	(Camera_Y_pos).w,d0
		cmp.w	(a1)+,d0
		blo.s	loc_85C74
		cmp.w	(a1)+,d0
		bhi.s	loc_85C74
		move.w	(Camera_X_pos).w,d1
		cmp.w	(a1)+,d1
		blo.s	loc_85C74
		cmp.w	(a1)+,d1
		bhi.s	loc_85C74
		bclr	#7,$27(a0)
		cmp.w	(a1),d0
		bls.s	loc_85C5E
		bset	#7,$27(a0)

loc_85C5E:
		bclr	#6,$27(a0)
		cmp.w	4(a1),d1
		bls.s	loc_85C70
		bset	#6,$27(a0)

loc_85C70:
		move.l	(sp),(a0)
		rts
; ---------------------------------------------------------------------------

loc_85C74:
		jsr	Delete_Sprite_If_Not_In_Range.w
		addq.w	#4,sp
		rts
; End of function Check_CameraInRange

; ---------------------------------------------------------------------------

loc_85C7E:

		move.w	(Camera_X_pos).w,(Camera_min_X_pos).w
		move.w	(Camera_target_max_Y_pos).w,d0
		cmp.w	(Camera_max_Y_pos).w,d0
		blo.s	locret_85CA2
		move.w	d0,(Camera_min_Y_pos).w
		move.w	$3A(a0),d0
		cmp.w	(Camera_X_pos).w,d0
		bhi.s	locret_85CA2
		movea.l	$34(a0),a1
		jsr	(a1)

locret_85CA2:

		rts
; =============== S U B R O U T I N E =======================================

Child1_Act2LevelSize:dc.w 2
		dc.l Obj_IncLevEndXGradual
		dc.w 0
		dc.l Obj_DecLevStartYGradual
		dc.w 0
		dc.l Obj_IncLevEndYGradual
		dc.w 0
; ---------------------------------------------------------------------------

Change_Act2Sizes:
		moveq	#0,d0
		move.b	(Current_zone).w,d0
		cmpi.b	#8,d0
		beq.s	locret_85EA8		; SOZ1 has a special event leading to SOZ2, so don't mess around there
		lsl.w	#4,d0
		lea	(LevelSizes).l,a1
		lea	8(a1,d0.w),a1			; Get level sizes for act 2
		move.w	(a1)+,(__u_FA94).w
		move.w	(a1)+,(__u_FA92).w
		move.w	(a1)+,(__u_FA96).w
		move.w	(a1)+,d1
		move.w	d1,(__u_FA98).w	; Put level sizes into the target size memory
		move.w	d1,(Camera_target_max_Y_pos).w
		cmpi.b	#$10,d0
		beq.s	locret_85EA8	; If we're in HCZ, don't immediately apply these changes. There's another event to do.
; End of function Change_Act2Sizes


; =============== S U B R O U T I N E =======================================


Make_LevelSizeObj:
		lea	Child1_Act2LevelSize(pc),a2
		jmp	CreateChild1_Normal.w
; End of function Make_LevelSizeObj

; ---------------------------------------------------------------------------

loc_85E64:
		move.b	#7,$39(a0)
		move.l	#loc_85E74,(a0)
		st	(Update_PalRotation_Flag).w

loc_85E74:
		subq.w	#1,$2E(a0)
		bpl.s	locret_85EA8
		move.w	$3A(a0),$2E(a0)
		lea	(Normal_palette).w,a1
		moveq	#$3F,d0

loc_85E86:
		bsr.w	sub_85EB4
		dbf	d0,loc_85E86
		subq.b	#1,$39(a0)
		bmi.s	loc_85E96
		rts
; ---------------------------------------------------------------------------

loc_85E96:
		tst.b	$2C(a0)
		beq.s	loc_85EAA
		move.l	#loc_85EE6,(a0)
		bset	#5,$38(a0)

locret_85EA8:
		rts
; ---------------------------------------------------------------------------

loc_85EAA:
		clr.b	(Update_PalRotation_Flag).w
		jmp	Go_Delete_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_85EB4:

		moveq	#$E,d2
		move.b	(a1),d3
		and.b	d2,d3
		cmp.b	d2,d3
		bhs.s	loc_85EC2
		addq.b	#2,d3
		move.b	d3,(a1)

loc_85EC2:
		addq.w	#1,a1
		move.b	(a1),d3
		move.b	d3,d4
		andi.b	#-$20,d3
		andi.b	#$E,d4
		cmpi.b	#-$20,d3
		bhs.s	loc_85EDA
		addi.b	#$20,d3

loc_85EDA:
		cmp.b	d2,d4
		bhs.s	loc_85EE0
		addq.b	#2,d4

loc_85EE0:
		or.b	d3,d4
		move.b	d4,(a1)+
.rts		rts
; End of function sub_85EB4

; ---------------------------------------------------------------------------

loc_85EE6:

		move.b	#7,$39(a0)
		move.w	#3,$2E(a0)
		move.l	#loc_85EF8,(a0)

loc_85EF8:
		subq.w	#1,$2E(a0)
		bpl.s	loc_85EE0.rts
		move.w	#3,$2E(a0)
		lea	(Normal_palette).w,a1
		lea	(Target_palette).w,a2
		moveq	#$3F,d0

loc_85F10:
		bsr.w	sub_85F2A
		dbf	d0,loc_85F10
		subq.b	#1,$39(a0)
		bpl.s	loc_85EE0.rts
		clr.b	(Update_PalRotation_Flag).w
		jmp	Go_Delete_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_85F2A:

		move.b	(a2)+,d2
		andi.b	#$E,d2
		move.b	(a1),d3
		cmp.b	d2,d3
		bls.s	loc_85F3A
		subq.b	#2,d3
		move.b	d3,(a1)

loc_85F3A:
		addq.w	#1,a1
		move.b	(a2)+,d2
		move.b	d2,d3
		andi.b	#-$20,d2
		andi.b	#$E,d3
		move.b	(a1),d4
		move.b	d4,d5
		andi.b	#-$20,d4
		andi.b	#$E,d5
		cmp.b	d2,d4
		bls.s	loc_85F5C
		subi.b	#$20,d4

loc_85F5C:
		cmp.b	d3,d5
		bls.s	loc_85F62
		subq.b	#2,d5

loc_85F62:
		or.b	d4,d5
		move.b	d5,(a1)+
		rts

; =============== S U B R O U T I N E =======================================


PLCLoad_AnimalsAndExplosion:

		lea	PLC_83D6C(pc),a1
		jmp	Load_PLC_Raw.w

; ---------------------------------------------------------------------------

AddRings:
		lea	(Ring_count).w,a2
		lea	(Update_HUD_ring_count).w,a3

loc_860FE:
loc_8610E:
		add.b	d0,(a2)
		cmp.b	(a2),d1
		bhs.s	loc_86116
		move.b	d1,(a2)

loc_86116:
		ori.b	#1,(a3)

loc_86132:

		moveq	#$33,d0
		jmp	Play_Sound.w
; ---------------------------------------------------------------------------

loc_8613A:
		moveq	#Mus_Continue,d0
		jmp	Play_Sound.w

; =============== S U B R O U T I N E =======================================


Perform_Art_Scaling:

		clr.w	(Software_Scaler_Unk).w
		move.l	a0,-(sp)
		jsr	Init_ArtScaling
		movea.l	(sp)+,a0
		move.l	a0,-(sp)
		move.w	$A(a0),d0
		jsr	(sub_2468A).l
		movea.l	(sp)+,a0
		move.w	(Software_Scaler_Unk).w,d3
		lsl.w	#4,d3
		move.l	#-$3000,d1
		move.w	$3A(a0),d2
		jmp	Add_To_DMA_Queue.w
; End of function Perform_Art_Scaling


; =============== S U B R O U T I N E =======================================


sub_86180:

		move.w	$18(a0),d0
		ext.l	d0
		lsl.l	#8,d0
		add.l	d0,$30(a0)
		move.w	$1A(a0),d0
		ext.l	d0
		lsl.l	#8,d0
		add.l	d0,$34(a0)
		rts
; End of function sub_86180


; =============== S U B R O U T I N E =======================================


sub_8619A:
		move.w	$30(a0),d2
		move.w	$34(a0),d3
		moveq	#0,d0
		move.b	$40(a0),d0
		addq.w	#4,d0
		move.l	#$100,d4
		divu.w	d0,d4
		sub.w	d4,d2
		sub.w	d4,d3
		move.w	d2,$10(a0)
		move.w	d3,$14(a0)
		rts
; End of function sub_8619A

; ---------------------------------------------------------------------------

loc_861C0:
		lea	(Player_1).w,a1
		moveq	#0,d0
		move.w	$10(a1),d0
		moveq	#0,d1
		move.w	$14(a1),d1

; =============== S U B R O U T I N E =======================================


sub_861D0:
		sub.w	$10(a0),d0
		smi	d2
		bpl.s	loc_861DA
		neg.w	d0

loc_861DA:
		sub.w	$14(a0),d1
		smi	d3
		bpl.s	loc_861E4
		neg.w	d1

loc_861E4:
		cmp.w	d1,d0
		scs	d4
		beq.s	loc_8621A
		bcc.s	loc_861EE
		exg	d0,d1

loc_861EE:
		swap	d1
		divu.w	d0,d1

loc_861F2:
		move.w	#$100,d0
		lsl.w	d5,d0
		moveq	#8,d6
		sub.w	d5,d6
		lsr.w	d6,d1

loc_861FE:
		tst.b	d4
		beq.s	loc_86204
		exg	d0,d1

loc_86204:
		tst.b	d2
		beq.s	loc_8620A
		neg.w	d0

loc_8620A:
		tst.b	d3
		beq.s	loc_86210
		neg.w	d1

loc_86210:
		move.w	d0,$18(a0)
		move.w	d1,$1A(a0)
		rts
; ---------------------------------------------------------------------------

loc_8621A:
		tst.w	d0
		beq.s	loc_861F2
		move.w	#$100,d0
		lsl.w	d5,d0
		move.w	#$100,d1
		lsl.w	d5,d1
		bra.s	loc_861FE
; End of function sub_861D0


; =============== S U B R O U T I N E =======================================


sub_8622C:

		moveq	#0,d0
		moveq	#0,d1
		moveq	#0,d2
		moveq	#0,d3
		moveq	#0,d4
		move.w	$10(a2),d0
		move.w	$14(a2),d1
		sub.w	$10(a1),d0
		bpl.s	loc_86248
		neg.w	d0
		moveq	#8,d2

loc_86248:
		sub.w	$14(a1),d1
		bpl.s	loc_86252
		neg.w	d1
		moveq	#4,d3

loc_86252:
		cmp.w	d0,d1
		bhs.s	loc_8625A
		exg	d0,d1
		moveq	#2,d4

loc_8625A:
		tst.w	d1
		beq.s	locret_8627E
		lsl.w	#5,d0
		divu.w	d1,d0
		add.w	d2,d3
		add.w	d3,d4
		move.w	off_8626E(pc,d4.w),d4
		jmp	off_8626E(pc,d4.w)
; ---------------------------------------------------------------------------
off_8626E:	dc.w locret_8627E-off_8626E

		dc.w loc_86280-off_8626E
		dc.w loc_86288-off_8626E
		dc.w loc_86290-off_8626E
		dc.w loc_86296-off_8626E
		dc.w loc_8629A-off_8626E
		dc.w loc_862A0-off_8626E
		dc.w loc_862A6-off_8626E
; ---------------------------------------------------------------------------

locret_8627E:

		rts
; End of function sub_8622C

; ---------------------------------------------------------------------------

loc_86280:
		subi.w	#$40,d0
		neg.w	d0
		rts
; ---------------------------------------------------------------------------

loc_86288:
		subi.w	#$80,d0
		neg.w	d0
		rts
; ---------------------------------------------------------------------------

loc_86290:
		addi.w	#$40,d0
		rts
; ---------------------------------------------------------------------------

loc_86296:
		neg.w	d0
		rts
; ---------------------------------------------------------------------------

loc_8629A:
		addi.w	#$C0,d0
		rts
; ---------------------------------------------------------------------------

loc_862A0:
		addi.w	#$80,d0
		rts
; ---------------------------------------------------------------------------

loc_862A6:
		subi.w	#$C0,d0
		neg.w	d0
		rts
; ---------------------------------------------------------------------------

Obj_8B:

		bset	#2,4(a0)

loc_862B4:
		clr.w	$A(a0)
		move.l	#Map_SpriteMask,$C(a0)
		move.b	#$20,7(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.l	#loc_862FE,(a0)
		btst	#3,d0
		beq.s	loc_862DE
		move.l	#loc_86308,(a0)

loc_862DE:
		move.w	d0,d1
		andi.w	#$F0,d0
		lsr.w	#2,d0
		move.b	d0,6(a0)
		lsr.w	#2,d0
		move.b	d0,$22(a0)
		andi.w	#7,d1
		add.w	d1,d1
		move.w	word_86324(pc,d1.w),8(a0)
		rts
; ---------------------------------------------------------------------------

loc_862FE:
		st	(ScrEvents_10).w
		cmp.w	#$801,Current_zone_and_act.w	; NAT: HACK
		bne.s	.nosoz

		tst.b	(End_Of_Level_Flag).w			; check if in end level
		bne.s	loc_8631E			; if yes, delete
.nosoz		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_86308:
		st	(ScrEvents_10).w
		movea.w	$46(a0),a1
		btst	#5,$38(a1)
		bne.s	loc_8631E
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_8631E:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------
word_86324:	dc.w prio(0), prio(1), prio(2), prio(3)
		dc.w prio(4), prio(5), prio(6), prio(7)
; ---------------------------------------------------------------------------

loc_86334:

		move.w	#$808,d0
		tst.w	$2E(a0)
		beq.s	loc_86346
		subq.w	#1,$2E(a0)
		move.w	#$4808,d0

loc_86346:
		btst	#5,(Player_1+$2A).w
		beq.s	loc_86358
		move.w	#$1F,$2E(a0)
		move.w	#$4848,d0

loc_86358:
		move.w	d0,(Ctrl_1_logical).w
		rts

; =============== S U B R O U T I N E =======================================


sub_8635E:

		move.w	d0,$1A(a1)
		bset	#1,$2A(a1)
		bclr	#3,$2A(a1)
		clr.b	$40(a1)
		clr.b	$3D(a1)
		move.b	#$10,$20(a1)
		move.b	#2,5(a1)
		moveq	#-$4F,d0
		jmp	Play_Sound_2.w
; End of function sub_8635E


; =============== S U B R O U T I N E =======================================


sub_8638A:

		lea	(Player_1).w,a1
		bsr.w	sub_8639C
		lea	(Player_2).w,a1
		tst.b	4(a1)
		bpl.s	locret_863BE
; End of function sub_8638A


; =============== S U B R O U T I N E =======================================


sub_8639C:
		move.w	$10(a0),d0
		bclr	#0,4(a1)
		bclr	#0,$2A(a1)
		cmp.w	$10(a1),d0
		bhs.s	locret_863BE
		bset	#0,4(a1)
		bset	#0,$2A(a1)

locret_863BE:

		rts
; End of function sub_8639C

; ---------------------------------------------------------------------------

loc_863C0:

		tst.l	(Player_2).w
		beq.s	loc_863E6
		move.b	#1,(Ctrl_2_locked).w
		clr.w	(CPU_Control_Ctr).w
		move.l	#loc_863D6,(a0)

loc_863D6:
		tst.b	(Ctrl_2_locked).w
		beq.s	loc_863E2
		clr.w	(Ctrl_2_logical).w
		rts
; ---------------------------------------------------------------------------

loc_863E2:
		clr.w	(Ctrl_2).w

loc_863E6:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

Obj_B3_2:

		lea	(Player_1).w,a1
		lea	word_86426(pc),a2
		jsr	(Check_InMyRange).l
		beq.s	locret_863BE

loc_86418:

		moveq	#0,d0
		move.w	$2C(a0),d0
		lsr.w	#1,d0
		rol.b	#1,d0
		jmp	StartNewLevel.w
; ---------------------------------------------------------------------------
word_86426:	dc.w  $FFF0,   $20, $FF80,  $100
; ---------------------------------------------------------------------------

loc_8642E:

		st	(ScrShake_Value).w
		move.l	#loc_86438,(a0)

loc_86438:
		tst.w	(ScrShake_Value).w
		beq.s	loc_86452
		move.b	(V_int_run_count+3).w,d1
		andi.b	#$F,d1
		bne.w	locret_863BE
		moveq	#$6F,d0
		jmp	Play_Sound_2.w
; ---------------------------------------------------------------------------

loc_86452:
		jmp	Delete_Current_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_86458:
		lea	$18(a0),a2
		move.w	$16(a0),d0
		subq.w	#1,d0
		move.w	$10(a0),d2
		move.w	$14(a0),d3

loc_8646A:
		move.b	(a1)+,d1
		ext.w	d1
		btst	#0,4(a0)
		beq.s	loc_86478
		neg.w	d1

loc_86478:
		add.w	d2,d1
		move.w	d1,(a2)+
		move.b	(a1)+,d1
		ext.w	d1
		add.w	d3,d1
		move.w	d1,(a2)+
		addq.w	#2,a2
		dbf	d0,loc_8646A
		rts
; End of function sub_86458

; ---------------------------------------------------------------------------

loc_8648C:
		addi.b	#50,(Ring_count).w
		move.b	#1,(Super_Hyper_palette_status).w
		move.b	#$F,(Palette_timer).w
		move.b	#1,(Super_Sonic_Knux_flag).w
		move.w	#60,(Super_Hyper_frame_count).w
		move.w	#$800,(Sonic_Knux_top_speed).w
		move.w	#$18,(Sonic_Knux_acceleration).w
		move.w	#$C0,(Sonic_Knux_deceleration).w
		move.b	#$1F,(Player_1+anim).w
		cmpi.w	#2,(Player_mode).w
		bne.s	.notTails
;.superTails:
		move.b	#0,(Super_Sonic_Knux_flag).w
		move.b	#1,(Super_Tails_flag).w
		move.b	#$29,(Player_1+anim).w
		move.w	#$800,(Tails_top_speed).w
		move.w	#$18,(Tails_acceleration).w
		move.w	#$C0,(Tails_deceleration).w
		move.l	#Obj_HyperTails_Birds,(Hyper_Sonic_stars).w
		bra.s	.continue
; ---------------------------------------------------------------------------
; loc_864F8:
.notTails:
		bhs.s	.hyperKnuckles
;.hyperSonic:
		move.l	#Map_SuperSonic,(Player_1+mappings).w
		move.b	#-1,(Super_Sonic_Knux_flag).w
		move.w	#$A00,(Sonic_Knux_top_speed).w
		move.w	#$30,(Sonic_Knux_acceleration).w
		move.w	#$100,(Sonic_Knux_deceleration).w
		move.l	#Obj_HyperSonic_Stars,(Hyper_Sonic_stars).w
		bra.s	.continue
; ---------------------------------------------------------------------------
; loc_86524:
.hyperKnuckles:
		; This is bugged: Knux gets his Hyper after-images, but isn't actually marked as Hyper
		;move.b	#-1,(Super_Sonic_Knux_flag).w		; Hyper
		move.l	#Obj_HyperSonicKnux_Trail,(Super_stars).w
; loc_8652C:
.continue:
		move.b	#$81,(Player_1+object_control).w
		move.b	#0,(Player_1+invincibility_timer).w
		bset	#Status_Invincible,(Player_1+status_secondary).w
		rts
; ---------------------------------------------------------------------------

Obj_81:

		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_86566(pc,d0.w),d1
		move.w	$10(a0),-(sp)
		jsr	off_86566(pc,d1.w)
		moveq	#$2B,d1
		moveq	#$18,d2
		moveq	#$18,d3
		move.w	(sp)+,d4
		jsr	SolidObjectFull.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
off_86566:	dc.w loc_8657A-off_86566

		dc.w loc_865D0-off_86566
		dc.w loc_8661E-off_86566
		dc.w loc_86626-off_86566
		dc.w loc_8662A-off_86566
		dc.w loc_866BA-off_86566
		dc.w loc_866CC-off_86566
		dc.w loc_866DA-off_86566
		dc.w loc_866EC-off_86566
		dc.w loc_86716-off_86566
; ---------------------------------------------------------------------------

loc_8657A:
		lea	ObjDat3_86B32(pc),a1
		jsr	SetUp_ObjAttributes.w
		btst	#1,4(a0)
		bne.s	loc_86592
		lea	ChildObjDat_86B5C(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_86592:
		move.b	#8,5(a0)
		move.w	(Camera_X_pos).w,d0
		addi.w	#$A0,d0
		move.w	d0,$10(a0)
		move.w	d0,$3E(a0)
		move.w	(Camera_Y_pos).w,d0
		subi.w	#$40,d0
		move.w	d0,$14(a0)
		move.w	#1,$3A(a0)
		jsr	Swing_Setup1.w
		lea	ChildObjDat_86B64(pc),a2
		jsr	CreateChild1_Normal.w
		lea	ChildObjDat_86B6C(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_865D0:
		btst	#1,$38(a0)
		beq.s	locret_8661C
		move.b	#4,5(a0)

; =============== S U B R O U T I N E =======================================


sub_865DE:
		cmpi.b	#2,(Current_zone).w
		beq.s	loc_865EA
		st	(Ctrl_2_locked).w

loc_865EA:
		move.b	#1,$22(a0)
		move.w	#$40,$2E(a0)
		st	(__u_FACD).w
		lea	ChildObjDat_86B7A(pc),a2
		jsr	CreateChild1_Normal.w
		lea	ChildObjDat_86B9A(pc),a2
		jsr	CreateChild1_Normal.w
		lea	Child6_CreateBossExplosion.w,a2
		jsr	CreateChild1_Normal.w
		move.b	#8,$2C(a1)

locret_8661C:

		rts
; End of function sub_865DE

; ---------------------------------------------------------------------------

loc_8661E:
		move.b	#6,d0
		bra.w	sub_868F8
; ---------------------------------------------------------------------------

loc_86626:
		bra.w	Check_TailsEndPose
; ---------------------------------------------------------------------------

loc_8662A:
		move.w	(Camera_X_pos).w,d0
		move.w	$3A(a0),d1
		bmi.s	loc_86642
		addi.w	#$110,d0
		cmp.w	$10(a0),d0
		blo.s	loc_8664C
		bra.w	loc_8664E
; ---------------------------------------------------------------------------

loc_86642:
		addi.w	#$30,d0
		cmp.w	$10(a0),d0
		blo.s	loc_8664E

loc_8664C:
		neg.w	d1

loc_8664E:

		move.w	d1,$3A(a0)
		add.w	d1,$10(a0)
		move.w	(Camera_Y_pos).w,d0
		addi.w	#$40,d0
		cmpi.b	#2,(Current_zone).w
		bne.s	loc_8666A
		subi.w	#$20,d0

loc_8666A:
		move.l	#$4000,d1
		cmp.w	$14(a0),d0
		bhi.s	loc_86678
		neg.l	d1

loc_86678:
		add.l	d1,$14(a0)
		btst	#1,$38(a0)
		beq.s	loc_86698
		moveq	#0,d0
		move.b	(Current_zone).w,d0
		move.b	byte_866A2(pc,d0.w),5(a0)
		move.w	a1,$44(a0)
		bsr.w	sub_865DE

loc_86698:
		jsr	Swing_UpAndDown.w
		jmp	MoveSprite2.w
; ---------------------------------------------------------------------------
byte_866A2:	dc.b $A
		dc.b $A
		dc.b $E
		dc.b $A
		dc.b $A
		dc.b $A
		dc.b $10
		dc.b $A
		dc.b $A
		dc.b $A
		dc.b $A
		dc.b $A
		dc.b $A
		dc.b $A
		dc.b $A
		dc.b $A
		dc.b $A
		dc.b $A
		dc.b $A
		dc.b $A
		dc.b $A
		dc.b $A
		dc.b $A
		dc.b $A
; ---------------------------------------------------------------------------

loc_866BA:
		move.b	#$C,d0
		bsr.w	sub_868F8
		jsr	Swing_UpAndDown.w
		jmp	MoveSprite2.w
; ---------------------------------------------------------------------------

loc_866CC:
		bsr.w	Check_TailsEndPose
		jsr	Swing_UpAndDown.w
		jmp	MoveSprite2.w
; ---------------------------------------------------------------------------

loc_866DA:
		move.b	#$C,d0
		bsr.w	sub_86984
		jsr	Swing_UpAndDown.w
		jmp	MoveSprite2.w
; ---------------------------------------------------------------------------

loc_866EC:
		move.b	#$12,d0
		bsr.w	sub_868F8

loc_866F4:
		jsr	Swing_UpAndDown.w
		move.w	(Camera_X_pos).w,d0
		subi.w	#$60,d0
		cmp.w	$10(a0),d0
		blo.s	loc_8670C
		st	(__u_FAA2).w
		rts
; ---------------------------------------------------------------------------

loc_8670C:
		subq.w	#2,$10(a0)
		jmp	MoveSprite2.w
; ---------------------------------------------------------------------------

loc_86716:
		bsr.w	Check_TailsEndPose
		bra.s	loc_866F4
; ---------------------------------------------------------------------------

loc_8671C:
		move.l	#loc_8672A,(a0)
		lea	word_86B3E(pc),a1
		jmp	SetUp_ObjAttributes3.w
; ---------------------------------------------------------------------------

loc_8672A:

		jsr	(sub_86A3E).l
		move.b	$2A(a0),d0
		andi.b	#$18,d0
		beq.s	loc_86750
		move.l	#loc_86754,(a0)
		movea.w	$46(a0),a1
		bset	#1,$38(a1)
		move.b	#$C,$22(a0)

loc_86750:
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_86754:

		bsr.w	sub_86A3E
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_8675C:
		move.l	#loc_86770,(a0)
		bset	#1,4(a0)
		lea	word_86B3E(pc),a1
		jmp	SetUp_ObjAttributes3.w
; ---------------------------------------------------------------------------

loc_86770:
		jsr	Refresh_ChildPosition.w
		bsr.w	sub_86A54
		lea	word_867C2(pc),a1
		jsr	Check_PlayerInRange.w
		tst.l	d0
		beq.s	loc_867BE
		tst.w	d0
		beq.s	loc_867A0
		movea.w	d0,a1
		tst.w	$1A(a1)
		bpl.s	loc_867A0
		cmpi.b	#2,$20(a1)
		beq.s	loc_867AA
		cmpi.b	#1,$38(a1)
		beq.s	loc_867AA

loc_867A0:

		swap	d0
		movea.w	d0,a1
		tst.w	$1A(a1)
		bpl.s	loc_867BE

loc_867AA:

		move.l	#loc_867CA,(a0)
		subq.b	#8,$43(a0)
		movea.w	$46(a0),a1
		bset	#1,$38(a1)

loc_867BE:

		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------
word_867C2:	dc.w  $FFE6,   $34, $FFE4,   $38
; ---------------------------------------------------------------------------

loc_867CA:
		jsr	Refresh_ChildPosition.w
		bsr.w	sub_86A54
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_867D6:

		lea	ObjDat3_86B44(pc),a1
		jsr	SetUp_ObjAttributes.w
		cmpi.w	#$400,(Current_zone_and_act).w
		bne.s	loc_867EC
		move.w	#$44E,$A(a0)

loc_867EC:
		move.l	#Obj_FlickerMove,(a0)
		bsr.w	sub_86A64
		moveq	#4,d0
		jsr	Set_IndexedVelocity.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_86802:

		lea	word_86B56(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_86810,(a0)

loc_86810:
		jsr	Refresh_ChildPosition.w
		lea	byte_86BF6(pc),a1
		jsr	Animate_RawNoSST.w
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_86820:

		lea	word_86B50(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_8683E,(a0)
		move.b	#8,$1E(a0)
		bsr.w	sub_86A7A
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_8683E:
		subq.w	#1,$2E(a0)
		bpl.s	loc_86850
		move.l	#loc_86854,(a0)
		move.w	#prio(1),8(a0)

loc_86850:
		jmp	Sprite_CheckDelete.w
; ---------------------------------------------------------------------------

loc_86854:
		jsr	MoveSprite_LightGravity.w
		jsr	ObjCheckFloorDist.w
		tst.w	d1
		bpl.s	loc_86888
		add.w	d1,$14(a0)
		move.w	$3E(a0),$1A(a0)
		jsr	Find_SonicTails.w
		move.w	#-$200,d1
		tst.b	(End_Of_Level_Flag).w
		beq.s	loc_86880
		tst.w	d0
		beq.s	loc_86880
		neg.w	d1

loc_86880:

		move.w	d1,$18(a0)
		bsr.w	sub_86B1E

loc_86888:

		moveq	#0,d0
		btst	#3,(V_int_run_count+3).w
		bne.s	loc_86894
		moveq	#1,d0

loc_86894:
		move.b	d0,$22(a0)
		jmp	Sprite_CheckDelete.w
; ---------------------------------------------------------------------------

loc_8689C:
		jsr	Refresh_ChildPosition.w
		subq.w	#1,$2E(a0)
		bpl.s	loc_868B2
		move.l	#loc_868B6,(a0)
		move.w	#prio(1),8(a0)

loc_868B2:
		jmp	Sprite_CheckDelete.w
; ---------------------------------------------------------------------------

loc_868B6:
		lea	(Player_1).w,a1
		move.w	#$300,d0
		move.w	#$100,d1
		moveq	#$10,d2
		move.w	#0,d3
		move.w	#-$30,d4
		sub.b	$2C(a0),d4
		bsr.w	sub_869F6
		jsr	MoveSprite2.w
		bsr.w	sub_86B1E
		tst.b	(End_Of_Level_Flag).w
		bne.s	loc_868F0
		move.l	#loc_868F2,(a0)
		bset	#0,4(a0)

loc_868F0:
		bra.s	loc_86888
; ---------------------------------------------------------------------------

loc_868F2:
		subq.w	#2,$10(a0)
		bra.s	loc_86888

; =============== S U B R O U T I N E =======================================


sub_868F8:

		subq.w	#1,$2E(a0)
		bpl.s	locret_86930
		lea	(Player_1).w,a1
		btst	#7,$2A(a1)
		bne.s	locret_86930
		btst	#1,$2A(a1)
		bne.s	locret_86930
		cmpi.b	#6,5(a1)
		bhs.s	locret_86930
		move.b	d0,5(a0)
		bsr.w	Set_PlayerEndingPose
		jsr	Create_New_Sprite.w
		bne.s	locret_86930
		move.l	#Obj_LevelResults,(a1)

locret_86930:

		rts
; End of function sub_868F8


; =============== S U B R O U T I N E =======================================


Check_TailsEndPose:
		lea	(Player_1).w,a1
		btst	#1,$2A(a1)
		bne.s	loc_8694A
		bsr.w	Set_PlayerEndingPose

loc_8694A:
		lea	(Player_2).w,a1
		btst	#1,$2A(a1)
		bne.s	locret_86930
		jmp	Set_PlayerEndingPose(pc)
; End of function Check_TailsEndPose


; =============== S U B R O U T I N E =======================================


sub_86984:
		subq.w	#1,$2E(a0)
		bpl.s	locret_869C4
		lea	(Player_1).w,a1
		cmpi.b	#6,5(a1)
		bhs.s	locret_869C4
		tst.b	4(a1)
		bpl.s	locret_869C4
		cmpi.b	#1,$38(a1)
		beq.s	loc_869AA
		tst.b	(Flying_carrying_Sonic_flag).w
		beq.s	locret_869C4

loc_869AA:
		move.w	#-$100,$18(a0)
		move.b	d0,5(a0)
		jsr	Create_New_Sprite.w
		bne.s	loc_869C2
		move.l	#Obj_LevelResults,(a1)

loc_869C2:
		moveq	#1,d0

locret_869C4:

		rts
; End of function sub_86984


; =============== S U B R O U T I N E =======================================


Set_PlayerEndingPose:
		move.b	#-$7F,$2E(a1)
		move.b	#$13,$20(a1)
		clr.b	$3D(a1)
		clr.w	$18(a1)
		clr.w	$1A(a1)
		clr.w	$1C(a1)
		bclr	#5,$2A(a0)
		bclr	#6,$2A(a0)
		bclr	#5,$2A(a1)

		move.b	default_y_radius(a1),d0		; NAT: Get y-rad of player to d0
		move.b	y_radius(a1),d1			; get current y-rad
		move.b	d0,y_radius(a1)			; save new radius
		sub.b	d1,d0				; sub radius from default
		ext.w	d0				; extend to word
		sub.w	d0,y_pos(a1)			; align player y-pos
		rts
; End of function Set_PlayerEndingPose


; =============== S U B R O U T I N E =======================================


sub_869F6:
		move.w	d2,d5
		move.w	$10(a1),d6
		add.w	d3,d6
		cmp.w	$10(a0),d6
		bhs.s	loc_86A06
		neg.w	d2

loc_86A06:
		move.w	$18(a0),d6
		add.w	d2,d6
		cmp.w	d0,d6
		bgt.s	loc_86A1A
		neg.w	d0
		cmp.w	d0,d6
		blt.s	loc_86A1A
		move.w	d6,$18(a0)

loc_86A1A:

		move.w	$14(a1),d6
		add.w	d4,d6
		cmp.w	$14(a0),d6
		bhs.s	loc_86A28
		neg.w	d5

loc_86A28:
		move.w	$1A(a0),d6
		add.w	d5,d6
		cmp.w	d1,d6
		bgt.s	locret_86A3C
		neg.w	d1
		cmp.w	d1,d6
		blt.s	loc_86A1A
		move.w	d6,$1A(a0)

locret_86A3C:
		rts
; End of function sub_869F6


; =============== S U B R O U T I N E =======================================


sub_86A3E:

		move.w	#$1B,d1
		move.w	#4,d2
		move.w	#6,d3
		move.w	$10(a0),d4
		jmp	SolidObjectFull.w
; End of function sub_86A3E


; =============== S U B R O U T I N E =======================================


sub_86A54:

		moveq	#5,d2
		moveq	#$1B,d1
		moveq	#9,d3
		move.w	$10(a0),d4
		jmp	SolidObjectFull.w
; End of function sub_86A54


; =============== S U B R O U T I N E =======================================


sub_86A64:

		moveq	#0,d0
		move.b	$2C(a0),d0
		lsr.w	#1,d0
		move.b	byte_86A74(pc,d0.w),$22(a0)
		rts
; End of function sub_86A64

; ---------------------------------------------------------------------------
byte_86A74:	dc.b 2
		dc.b 3
		dc.b $A
		dc.b 4
		dc.b $B
		dc.b 0

; =============== S U B R O U T I N E =======================================


sub_86A7A:
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	d0,d1
		andi.w	#6,d0
		lea	word_86B0E(pc),a1
		move.w	(a1,d0.w),d2
		move.w	d2,$1A(a0)
		move.w	d2,$3E(a0)
		movea.w	$46(a0),a1
		btst	#1,4(a1)
		beq.s	loc_86AB0
		move.l	#loc_8689C,(a0)
		addq.b	#8,$43(a0)
		clr.w	$1A(a0)

loc_86AB0:
		andi.w	#2,d0
		move.w	d0,d2
		cmpi.w	#$400,(Current_zone_and_act).w
		bne.s	loc_86AC0
		addq.w	#4,d2

loc_86AC0:
		move.w	word_86B16(pc,d2.w),$A(a0)
		moveq	#0,d2
		move.b	(Current_zone).w,d2
		add.w	d2,d2
		lea	(byte_2C7BA).l,a1
		adda.w	d2,a1
		lsr.w	#1,d0
		move.b	(a1,d0.w),d0
		lsl.w	#3,d0
		lea	(word_2C7EA).l,a2
		move.l	4(a2,d0.w),$C(a0)
		lsl.w	#2,d1
		move.w	d1,$2E(a0)
		movea.w	$46(a0),a1
		move.w	$10(a0),d0
		move.w	#$200,d1
		cmp.w	$10(a1),d0
		bhs.s	loc_86B04
		neg.w	d1

loc_86B04:
		move.w	d1,$18(a0)
		bsr.w	sub_86B1E
		rts
; End of function sub_86A7A

; ---------------------------------------------------------------------------
word_86B0E:	dc.w  $FC80, $FD00, $FD80, $FE00
word_86B16:	dc.w  $8580, $8592, $842E, $8440

; =============== S U B R O U T I N E =======================================


sub_86B1E:

		bclr	#0,4(a0)
		tst.w	$18(a0)
		bpl.s	locret_86B30
		bset	#0,4(a0)

locret_86B30:
		rts
; End of function sub_86B1E

; ---------------------------------------------------------------------------
ObjDat3_86B32:	dc.l Map_EggCapsule
		dc.w $8494
		dc.w prio(4)
		dc.b $20
		dc.b $20
		dc.b 0
		dc.b 0
word_86B3E:	dc.w prio(4)

		dc.b $10
		dc.b 8
		dc.b 5
		dc.b 0
ObjDat3_86B44:	dc.l Map_EggCapsule
		dc.w $8494
		dc.w prio(3)
		dc.b $C
		dc.b $C
		dc.b 0
		dc.b 0
word_86B50:	dc.w prio(5)
		dc.b 8
		dc.b 8
		dc.b 2
		dc.b 0
word_86B56:	dc.w prio(4)
		dc.b $14
		dc.b 4
		dc.b 6
		dc.b 0
ChildObjDat_86B5C:dc.w 0
		dc.l loc_8671C
		dc.w $DC
ChildObjDat_86B64:dc.w 0
		dc.l loc_8675C
		dc.w $24
ChildObjDat_86B6C:dc.w 1
		dc.l loc_86802
		dc.w $ECDC
		dc.l loc_86802
		dc.w $14DC
ChildObjDat_86B7A:dc.w 4

		dc.l loc_867D6
		dc.w $F8
		dc.l loc_867D6
		dc.w $F0F8
		dc.l loc_867D6
		dc.w $10F8
		dc.l loc_867D6
		dc.w $E8F8
		dc.l loc_867D6
		dc.w $18F8
ChildObjDat_86B9A:dc.w 8
		dc.l loc_86820
		dc.w $FC
		dc.l loc_86820
		dc.w $F8FC
		dc.l loc_86820
		dc.w $8FC
		dc.l loc_86820
		dc.w $10FC
		dc.l loc_86820
		dc.w $F0FC
		dc.l loc_86820
		dc.w $E8FC
		dc.l loc_86820
		dc.w $18FC
		dc.l loc_86820
		dc.w $FCFC
		dc.l loc_86820
		dc.w $4FC
		dc.l loc_86820
		dc.w $CFC
		dc.l loc_86820
		dc.w $F4FC
		dc.l loc_86820
		dc.w $ECFC
		dc.l loc_86820
		dc.w $14FC
		dc.l loc_86820
		dc.w $1CFC
		dc.l loc_86820
		dc.w $E4FC
byte_86BF6:	dc.b 0
		dc.b 6
		dc.b 7
		dc.b 8
		dc.b 9
		dc.b $FC
Map_EggCapsule:	include "General/Sprites/Robotnik/Map - Egg Capsule.asm"

; ---------------------------------------------------------------------------

Obj_8A:
		move.l	#Sprite_OnScreen_Test,(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		movea.l	off_86D12(pc,d0.w),a1
		move.l	#byte_86D2A,$C(a0)
		jmp	SetUp_ObjAttributes2.w

; ---------------------------------------------------------------------------
off_86D12:	dc.l word_86D1A
		dc.l word_86D22
word_86D1A:	dc.w $43E5
		dc.w 0
		dc.b 8
		dc.b $20
		dc.b 0
		dc.b 0
word_86D22:	dc.w $43F4
		dc.w $280
		dc.b 8
		dc.b $18
		dc.b 1
		dc.b 0
byte_86D2A:	dc.b	0,   4
		dc.b	0, $12
		dc.b	0,   2
		dc.b  $E0,   7
		dc.b	0,   7
		dc.b  $FF, $F8
		dc.b	0,   7
		dc.b  $10,   7
		dc.b  $FF, $F8
		dc.b	0,   2
		dc.b  $E8,   6
		dc.b	0,   0
		dc.b  $FF, $F8
		dc.b	0,   6
		dc.b	0,   6
		dc.b  $FF, $F8
; ---------------------------------------------------------------------------

loc_86D4A:

		movea.l	$3E(a0),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_86D5E,(a0)
		bset	#3,$2B(a0)

loc_86D5E:

		movea.l	$34(a0),a1
		jsr	(a1)
		jmp	Sprite_CheckDeleteTouchXY.w
; ---------------------------------------------------------------------------

Obj_Tulipon:

		jsr	Obj_WaitOffscreen.w
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_86D84(pc,d0.w),d1
		jsr	off_86D84(pc,d1.w)
		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------
off_86D84:	dc.w loc_86D8A-off_86D84

		dc.w loc_86DA2-off_86D84
		dc.w loc_86DC6-off_86D84
; ---------------------------------------------------------------------------

loc_86D8A:
		lea	ObjDat3_86E12(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.w	#$1F,$2E(a0)
		move.l	#loc_86DAE,$34(a0)

locret_86DA0:

		rts
; ---------------------------------------------------------------------------

loc_86DA2:
		tst.b	4(a0)
		bpl.w	locret_86DA0
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_86DAE:

		move.b	#4,5(a0)
		move.l	#byte_86E42,$30(a0)
		move.l	#loc_86DFC,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_86DC6:
		jsr	Animate_RawMultiDelay.w
		beq.s	locret_86DA0
		cmpi.b	#6,d0
		beq.s	loc_86DD8
		cmpi.b	#$E,d0
		bne.s	locret_86DA0

loc_86DD8:
		moveq	#$4D,d0
		jsr	Play_Sound_2.w
		lea	ChildObjDat_86E2A(pc),a2
		jsr	CreateChild2_Complex(pc)
		bne.s	locret_86DFA
		addq.b	#1,$39(a0)
		btst	#0,$39(a0)
		beq.s	locret_86DFA
		neg.w	$18(a1)

locret_86DFA:

		rts
; ---------------------------------------------------------------------------

loc_86DFC:
		move.b	#2,5(a0)
		move.w	#$78,$2E(a0)
		move.l	#loc_86DAE,$34(a0)
		rts
; ---------------------------------------------------------------------------
ObjDat3_86E12:	dc.l Map_Tulipon
		dc.w $252A
		dc.w prio(4)
		dc.b $C
		dc.b $18
		dc.b 0
		dc.b $23
ObjDat3_86E1E:	dc.l Map_Tulipon
		dc.w $252A
		dc.w prio(5)
		dc.b 8
		dc.b 8
		dc.b 4
		dc.b $98
ChildObjDat_86E2A:dc.w 0
		dc.l loc_86D4A
		dc.l ObjDat3_86E1E
		dc.l 0
		dc.l MoveSprite
		dc.b 0
		dc.b $F0
		dc.w $100
		dc.w $FB00
byte_86E42:	dc.b	0,   7
		dc.b	1,   9
		dc.b	2,   4
		dc.b	3,   4
		dc.b	0,   9
		dc.b	1,   9
		dc.b	2,   4
		dc.b	3,   4
		dc.b	0,   0
		dc.b  $F4,   0
; ---------------------------------------------------------------------------

Obj_RhinoBot:

		jsr	Obj_WaitOffscreen.w
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_86E76(pc,d0.w),d1
		jsr	off_86E76(pc,d1.w)
		lea	DPLCPtr_87132(pc),a2
		jsr	Perform_DPLC.w
		jmp	Sprite_CheckDeleteTouchSlotted.w
; ---------------------------------------------------------------------------
off_86E76:	dc.w loc_86E7E-off_86E76

		dc.w loc_86EC4-off_86E76
		dc.w loc_86EEA-off_86E76
		dc.w loc_86EEE-off_86E76
; ---------------------------------------------------------------------------

loc_86E7E:
		lea	ObjDat4_870FE(pc),a1
		jsr	SetUp_ObjAttributesSlotted.w
		move.b	#8,$1F(a0)
		move.b	#$10,$1E(a0)
		move.w	#-$10,d0
		move.w	#-$300,d1
		btst	#0,4(a0)
		beq.s	loc_86EB2
		neg.w	d0
		neg.w	d1
		bset	#3,$38(a0)
		bset	#2,$38(a0)

loc_86EB2:
		move.w	d0,$40(a0)
		move.w	d1,$3E(a0)
		move.l	#loc_86F40,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_86EC4:
		lea	loc_86F92(pc),a3
		bsr.w	sub_870A4
		lea	loc_86F74(pc),a3
		bsr.w	sub_870CA
		move.w	$40(a0),d0
		add.w	d0,$18(a0)
		jsr	MoveSprite2.w
		bsr.w	sub_86FF8
		bra.w	loc_8701C
; ---------------------------------------------------------------------------

loc_86EEA:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_86EEE:
		lea	loc_86FE8(pc),a3
		bsr.w	sub_870CA
		jmp	MoveSprite2.w
; ---------------------------------------------------------------------------

loc_86EFC:

		cmpi.w	#1,(Current_zone_and_act).w
		beq.s	loc_86F26
		jsr	Refresh_ChildPositionAdjusted.w
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_86F22(pc,d0.w),d1
		jsr	off_86F22(pc,d1.w)
		lea	DPLCPtr_87132(pc),a2
		jsr	Perform_DPLC.w
		jmp	Child_Remember_Draw_Sprite.w
; ---------------------------------------------------------------------------
off_86F22:	dc.w loc_86F2C-off_86F22
		dc.w loc_86F3C-off_86F22
; ---------------------------------------------------------------------------

loc_86F26:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_86F2C:
		lea	ObjDat4_87110(pc),a1
		jsr	SetUp_ObjAttributesSlotted.w
		move.l	#Go_Delete_SpriteSlotted3,$34(a0)

loc_86F3C:
		jmp	Animate_Raw.w
; ---------------------------------------------------------------------------

loc_86F40:

		bchg	#2,$38(a0)
		move.l	#loc_86F58,$34(a0)
		neg.w	$40(a0)
		neg.w	$3E(a0)
		rts
; ---------------------------------------------------------------------------

loc_86F58:

		bchg	#3,$38(a0)
		bchg	#0,4(a0)
		bclr	#1,$38(a0)
		move.l	#loc_86F40,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_86F74:

		bclr	#2,$38(a0)
		btst	#3,$38(a0)
		bne.s	loc_86F88
		bset	#2,$38(a0)

loc_86F88:
		clr.w	$18(a0)
		clr.w	$1A(a0)
		bra.s	loc_86F58
; ---------------------------------------------------------------------------

loc_86F92:
		move.b	#4,5(a0)
		move.b	#0,$22(a0)
		move.w	#$20,$2E(a0)
		move.l	#loc_86FCE,$34(a0)
		bset	#1,$38(a0)
		moveq	#$48,d0
		jsr	Play_Sound_2.w
		lea	ChildObjDat_8712A(pc),a2
		jsr	CreateChild1_Normal.w
		bne.s	locret_86FCC
		move.l	#byte_8714A,$30(a1)

locret_86FCC:
		rts
; ---------------------------------------------------------------------------

loc_86FCE:
		move.b	#6,5(a0)
		move.w	#$400,d0
		btst	#3,$38(a0)
		bne.s	loc_86FE2
		neg.w	d0

loc_86FE2:
		move.w	d0,$18(a0)
		rts
; ---------------------------------------------------------------------------

loc_86FE8:
		move.b	#2,5(a0)
		move.b	#0,$22(a0)
		bra.w	loc_86F74

; =============== S U B R O U T I N E =======================================


sub_86FF8:
		move.w	$18(a0),d0
		beq.s	loc_87016
		btst	#2,$38(a0)
		beq.s	loc_8700E
		cmp.w	$3E(a0),d0
		bge.s	loc_87016
		rts
; ---------------------------------------------------------------------------

loc_8700E:
		cmp.w	$3E(a0),d0
		ble.s	loc_87016
		rts
; ---------------------------------------------------------------------------

loc_87016:

		movea.l	$34(a0),a1
		jmp	(a1)
; End of function sub_86FF8

; ---------------------------------------------------------------------------

loc_8701C:
		moveq	#0,d1
		btst	#3,$38(a0)
		beq.s	loc_87054
		btst	#2,$38(a0)
		beq.s	loc_8703C
		cmpi.w	#$80,$18(a0)
		bgt.s	loc_8707E
		moveq	#1,d1
		bra.w	loc_8707E
; ---------------------------------------------------------------------------

loc_8703C:
		moveq	#1,d1
		cmpi.w	#$280,$18(a0)
		bgt.s	loc_8707E
		moveq	#2,d1
		bset	#1,$38(a0)
		beq.s	loc_87084
		bra.w	loc_8707E
; ---------------------------------------------------------------------------

loc_87054:
		btst	#2,$38(a0)
		bne.s	loc_8706A
		cmpi.w	#-$80,$18(a0)
		ble.s	loc_8707E
		moveq	#1,d1
		bra.w	loc_8707E
; ---------------------------------------------------------------------------

loc_8706A:
		moveq	#1,d1
		cmpi.w	#-$280,$18(a0)
		ble.s	loc_8707E
		moveq	#2,d1
		bset	#1,$38(a0)
		beq.s	loc_87084

loc_8707E:

		move.b	d1,$22(a0)
		rts
; ---------------------------------------------------------------------------

loc_87084:

		move.b	d1,$22(a0)
		moveq	#$48,d0
		jsr	Play_Sound_2.w
		lea	ChildObjDat_87122(pc),a2
		jsr	CreateChild1_Normal.w
		bne.s	locret_870A2
		move.l	#byte_8713A,$30(a1)

locret_870A2:
		rts

; =============== S U B R O U T I N E =======================================


sub_870A4:
		jsr	Find_SonicTails.w
		cmpi.w	#$20,d3
		bhi.s	locret_870C2
		cmpi.w	#$60,d2
		bhi.s	locret_870C2
		btst	#3,$38(a0)
		bne.s	loc_870BE
		subq.w	#2,d0

loc_870BE:
		tst.w	d0
		bne.s	loc_870C4

locret_870C2:
		rts
; ---------------------------------------------------------------------------

loc_870C4:
		jsr	(a3)
		addq.w	#4,sp
		rts
; End of function sub_870A4


; =============== S U B R O U T I N E =======================================


sub_870CA:

		moveq	#4,d0
		btst	#3,$38(a0)
		bne.s	loc_870D6
		neg.w	d0

loc_870D6:
		move.w	$10(a0),d3
		add.w	d0,d3
		move.l	a3,-(sp)
		jsr	ObjCheckFloorDist2.w
		movea.l	(sp)+,a3
		cmpi.w	#-1,d1
		blt.s	loc_870F8
		cmpi.w	#$C,d1
		bge.s	loc_870F8
		add.w	d1,$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_870F8:

		jsr	(a3)
		addq.w	#4,sp
		rts
; End of function sub_870CA

; ---------------------------------------------------------------------------
ObjDat4_870FE:	dc.w 1
		dc.w $2500
		dc.w $15
		dc.w 0
		dc.l Map_RhinoBot
		dc.w prio(5)
		dc.b $14
		dc.b $10
		dc.b 0
		dc.b $B
ObjDat4_87110:	dc.w 1
		dc.w $44A
		dc.w 6
		dc.w 2
		dc.l Map_RhinoBot
		dc.w prio(4)
		dc.b $C
		dc.b 8
		dc.b 4
		dc.b 0
ChildObjDat_87122:dc.w 0
		dc.l loc_86EFC
		dc.w $C08
ChildObjDat_8712A:dc.w 0
		dc.l loc_86EFC
		dc.w $1008
DPLCPtr_87132:	dc.l ArtUnc_AIZRhino

		dc.l DPLC_RhinoBot
byte_8713A:	dc.b	2,   4
		dc.b	4,   5
		dc.b	6,   7
		dc.b	4,   5
		dc.b	6,   7
		dc.b	4,   5
		dc.b	6,   7
		dc.b  $F4,   0
byte_8714A:	dc.b	2,   4
		dc.b	4,   5
		dc.b	6,   7
		dc.b	4,   5
		dc.b	6,   7
		dc.b  $F4,   0
; ---------------------------------------------------------------------------

Obj_MonkeyDude:

		jsr	Obj_WaitOffscreen.w
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_8716C(pc,d0.w),d1
		jsr	off_8716C(pc,d1.w)
		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------
off_8716C:	dc.w loc_87172-off_8716C

		dc.w loc_871BC-off_8716C
		dc.w loc_871DA-off_8716C
; ---------------------------------------------------------------------------

loc_87172:
		lea	ObjDat3_8765A(pc),a1
		jsr	SetUp_ObjAttributes.w
		moveq	#0,d0
		move.b	$2C(a0),d0
		lsr.w	#2,d0
		move.b	d0,$2C(a0)
		lsr.w	#1,d0
		move.b	d0,$39(a0)
		move.l	#byte_876B4,$30(a0)
		move.w	#$3B,$2E(a0)
		move.l	#loc_871C2,$34(a0)
		btst	#0,4(a0)
		bne.w	loc_871B4
		lea	ChildObjDat_87680(pc),a2
		jmp	CreateChild4_LinkListRepeated.w
; ---------------------------------------------------------------------------

loc_871B4:
		lea	ChildObjDat_87686(pc),a2
		jmp	CreateChild4_LinkListRepeated.w
; ---------------------------------------------------------------------------

loc_871BC:
		jmp	loc_85652.w
; ---------------------------------------------------------------------------

loc_871C2:
		move.b	#4,5(a0)
		clr.b	$23(a0)
		clr.b	$24(a0)
		move.l	#byte_876B8,$30(a0)
		rts
; ---------------------------------------------------------------------------

loc_871DA:
		jsr	Animate_RawMultiDelay.w
		tst.w	d2
		beq.s	locret_87202
		btst	#2,$38(a0)
		bne.s	loc_87204
		cmpi.b	#0,$22(a0)
		bne.s	locret_87202
		addq.w	#8,$14(a0)
		subq.b	#1,$39(a0)
		cmpi.b	#1,$39(a0)
		beq.s	loc_87218

locret_87202:

		rts
; ---------------------------------------------------------------------------

loc_87204:
		cmpi.b	#2,$22(a0)
		bne.s	locret_87202
		subq.b	#1,$39(a0)
		beq.s	loc_87218
		subq.w	#8,$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_87218:

		move.b	#2,5(a0)
		move.b	$2C(a0),$39(a0)
		bchg	#2,$38(a0)
		move.w	#$3B,$2E(a0)
		move.l	#byte_876B4,$30(a0)
		move.b	#0,$22(a0)
		clr.b	$23(a0)
		clr.b	$24(a0)
		rts
; ---------------------------------------------------------------------------

loc_87248:
		bset	#3,$38(a0)

loc_8724E:

		lea	word_87666(pc),a1
		jsr	SetUp_ObjAttributes3.w
		clr.b	5(a0)
		move.b	$2C(a0),d0
		add.b	d0,d0
		move.b	d0,$3B(a0)
		move.b	d0,$3A(a0)
		tst.b	$2C(a0)
		bne.s	loc_87292
		move.l	#loc_872CC,(a0)
		moveq	#$E,d0
		btst	#3,$38(a0)
		bne.s	loc_87280
		neg.w	d0

loc_87280:
		add.w	d0,$10(a0)
		subq.w	#2,$14(a0)
		move.w	$14(a0),$3E(a0)
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_87292:
		cmpi.b	#8,$2C(a0)
		beq.s	loc_872A4
		move.l	#loc_8741C,(a0)
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_872A4:
		move.l	#loc_8744C,(a0)
		move.b	#6,$22(a0)
		movea.w	$46(a0),a1
		movea.w	$46(a1),a1
		move.w	a1,$3E(a0)
		movea.w	$46(a1),a1
		movea.w	$46(a1),a1
		move.w	a1,$44(a0)
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_872CC:
		bsr.w	sub_87500
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_872E2(pc,d0.w),d1
		jsr	off_872E2(pc,d1.w)
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------
off_872E2:	dc.w loc_872EE-off_872E2

		dc.w loc_8732A-off_872E2
		dc.w loc_87382-off_872E2
		dc.w loc_873B4-off_872E2
		dc.w loc_873EA-off_872E2
		dc.w loc_87330-off_872E2
; ---------------------------------------------------------------------------

loc_872EE:
		move.b	$3C(a0),d0
		btst	#3,$38(a0)
		beq.s	loc_87308
		addq.b	#4,d0
		cmpi.b	#-$80,d0
		bhs.s	loc_87316
		move.b	d0,$3C(a0)
		rts
; ---------------------------------------------------------------------------

loc_87308:
		subq.b	#4,d0
		cmpi.b	#-$80,d0
		bls.s	loc_87316
		move.b	d0,$3C(a0)
		rts
; ---------------------------------------------------------------------------

loc_87316:

		move.b	#2,5(a0)

loc_8731C:
		bsr.w	sub_87638
		move.l	#loc_87370,$34(a0)

locret_87328:

		rts
; ---------------------------------------------------------------------------

loc_8732A:
		bsr.w	sub_87524
		beq.s	loc_87374

loc_87330:
		btst	#3,$38(a0)
		beq.s	loc_8734E
		move.b	$41(a0),d1
		bsr.w	sub_87540
		subi.b	#$20,d0
		cmpi.b	#$60,d0
		bhs.s	loc_87360
		bra.w	loc_8736C
; ---------------------------------------------------------------------------

loc_8734E:
		move.b	$41(a0),d1
		bsr.w	sub_87540
		subi.b	#-$80,d0
		cmpi.b	#$60,d0
		blo.s	loc_8736C

loc_87360:
		neg.w	$40(a0)
		move.b	$41(a0),d1
		bsr.w	sub_87540

loc_8736C:

		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_87370:
		bra.w	sub_87638
; ---------------------------------------------------------------------------

loc_87374:
		move.b	#4,5(a0)
		bset	#1,$38(a0)
		rts
; ---------------------------------------------------------------------------

loc_87382:
		btst	#3,$38(a0)
		beq.s	loc_87398
		moveq	#4,d1
		bsr.w	sub_87540
		cmpi.b	#-$40,d0
		bhs.s	loc_873A6
		rts
; ---------------------------------------------------------------------------

loc_87398:
		moveq	#-4,d1
		bsr.w	sub_87540
		cmpi.b	#$40,d0
		bls.s	loc_873A6
		rts
; ---------------------------------------------------------------------------

loc_873A6:

		move.b	#6,5(a0)
		bset	#2,$38(a0)
		rts
; ---------------------------------------------------------------------------

loc_873B4:
		btst	#3,$38(a0)
		beq.s	loc_873CA
		moveq	#-8,d1
		bsr.w	sub_87540
		moveq	#$60,d1
		cmp.b	d1,d0
		bls.s	loc_873D8
		rts
; ---------------------------------------------------------------------------

loc_873CA:
		moveq	#8,d1
		bsr.w	sub_87540
		moveq	#-$60,d1
		cmp.b	d1,d0
		bhs.s	loc_873D8
		rts
; ---------------------------------------------------------------------------

loc_873D8:

		move.b	#8,5(a0)
		move.b	d1,$3C(a0)
		bclr	#1,$38(a0)
		rts
; ---------------------------------------------------------------------------

loc_873EA:
		btst	#3,$38(a0)
		bne.s	loc_87400
		moveq	#-2,d1
		bsr.w	sub_87540
		moveq	#-$80,d1
		cmp.b	d1,d0
		bls.s	loc_8740E
		rts
; ---------------------------------------------------------------------------

loc_87400:
		moveq	#2,d1
		bsr.w	sub_87540
		moveq	#-$80,d1
		cmp.b	d1,d0
		bhs.s	loc_8740E
		rts
; ---------------------------------------------------------------------------

loc_8740E:

		move.b	#$A,5(a0)
		move.b	d1,$3C(a0)
		bra.w	loc_8731C
; ---------------------------------------------------------------------------

loc_8741C:
		bsr.w	sub_87518
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_87432(pc,d0.w),d1
		jsr	off_87432(pc,d1.w)
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------
off_87432:	dc.w loc_87438-off_87432

		dc.w loc_87442-off_87432
		dc.w loc_8743E-off_87432
; ---------------------------------------------------------------------------

loc_87438:
		moveq	#2,d1
		bsr.w	sub_8756A

loc_8743E:
		bra.w	loc_8754C
; ---------------------------------------------------------------------------

loc_87442:
		moveq	#4,d1
		bsr.w	sub_87592
		bra.w	loc_8754C
; ---------------------------------------------------------------------------

loc_8744C:
		bsr.w	sub_87518
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_87462(pc,d0.w),d1
		jsr	off_87462(pc,d1.w)
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------
off_87462:	dc.w loc_87468-off_87462

		dc.w loc_87472-off_87462
		dc.w loc_8746E-off_87462
; ---------------------------------------------------------------------------

loc_87468:
		moveq	#2,d1
		bsr.w	sub_8756A

loc_8746E:
		bra.w	loc_8754C
; ---------------------------------------------------------------------------

loc_87472:
		bsr.w	sub_875B4
		moveq	#4,d1
		bsr.w	sub_87592
		bra.w	loc_8754C
; ---------------------------------------------------------------------------

loc_87480:
		lea	word_8766C(pc),a1
		jsr	SetUp_ObjAttributes2.w
		move.l	#loc_874B6,(a0)
		move.l	#byte_876BD,$30(a0)
		move.l	#loc_874CA,$34(a0)
		move.b	#8,$1E(a0)
		move.w	#-$200,$18(a0)
		move.w	#-$400,$1A(a0)
		jmp	loc_1B662.w
; ---------------------------------------------------------------------------

loc_874B6:
		jsr	MoveSprite_LightGravity.w
		jsr	Animate_RawMultiDelay.w
		jsr	ObjHitFloor_DoRoutine.w
		jmp	loc_1B662.w
; ---------------------------------------------------------------------------

loc_874CA:
		move.l	#loc_874D2,(a0)
		rts
; ---------------------------------------------------------------------------

loc_874D2:
		jmp	loc_1B662.w
; ---------------------------------------------------------------------------
		movea.w	$46(a0),a1
		move.b	4(a1),d0
		btst	#3,$38(a0)
		beq.s	loc_874EC
		bchg	#0,d0

loc_874EC:
		move.w	#prio(4),8(a0)
		btst	#0,d0
		beq.s	locret_874FE
		move.w	#prio(6),8(a0)

locret_874FE:
		rts

; =============== S U B R O U T I N E =======================================


sub_87500:
		movea.w	$46(a0),a1
		move.w	$14(a1),d0
		subq.w	#2,d0
		tst.b	$22(a1)
		beq.s	loc_87512
		subq.w	#2,d0

loc_87512:
		move.w	d0,$14(a0)
		rts
; End of function sub_87500


; =============== S U B R O U T I N E =======================================


sub_87518:

		movea.w	$46(a0),a1
		move.w	8(a1),8(a0)
		rts
; End of function sub_87518


; =============== S U B R O U T I N E =======================================


sub_87524:
		jsr	Find_SonicTails.w
		cmpi.w	#$80,d2
		bhs.s	loc_8753C
		btst	#3,$38(a0)
		beq.s	loc_87538
		subq.w	#2,d0

loc_87538:
		tst.w	d0
		rts
; ---------------------------------------------------------------------------

loc_8753C:
		moveq	#1,d4
		rts
; End of function sub_87524


; =============== S U B R O U T I N E =======================================


sub_87540:

		move.b	$3C(a0),d0
		add.b	d1,d0
		move.b	d0,$3C(a0)
		rts
; End of function sub_87540

; ---------------------------------------------------------------------------

loc_8754C:

		subq.b	#1,$3B(a0)
		bne.s	loc_87562
		move.b	$3A(a0),$3B(a0)
		movea.w	$46(a0),a1
		move.b	$3C(a1),$3C(a0)

loc_87562:
		moveq	#5,d2
		jmp	MoveSprite_CircularSimple.w

; =============== S U B R O U T I N E =======================================


sub_8756A:

		movea.w	$46(a0),a1
		btst	#1,$38(a1)
		beq.s	locret_87590
		move.b	d1,5(a0)
		bset	#1,$38(a0)
		move.b	$3A(a0),d0
		lsr.b	#1,d0
		move.b	d0,$3A(a0)
		move.b	#1,$3B(a0)

locret_87590:
		rts
; End of function sub_8756A


; =============== S U B R O U T I N E =======================================


sub_87592:

		movea.w	$46(a0),a1
		btst	#1,$38(a1)
		bne.s	locret_875B2
		move.b	d1,5(a0)
		move.b	$3A(a0),d0
		add.b	d0,d0
		move.b	d0,$3A(a0)
		move.b	#1,$3B(a0)

locret_875B2:
		rts
; End of function sub_87592


; =============== S U B R O U T I N E =======================================


sub_875B4:
		btst	#3,$38(a0)
		beq.s	loc_875E0
		btst	#0,$38(a0)
		bne.w	locret_87328
		movea.w	$44(a0),a1
		btst	#2,$38(a1)
		beq.s	locret_875DE
		movea.w	$3E(a0),a1
		cmpi.b	#-$7C,$3C(a1)
		blo.s	loc_8760A

locret_875DE:

		rts
; ---------------------------------------------------------------------------

loc_875E0:
		btst	#0,$38(a0)
		bne.w	locret_87328
		movea.w	$44(a0),a1
		btst	#2,$38(a1)
		beq.s	locret_875DE
		movea.w	$3E(a0),a1
		cmpi.b	#$7C,$3C(a1)
		blo.w	locret_87328
		move.w	#$2548,$A(a0)

loc_8760A:
		bset	#0,$38(a0)
		move.b	#4,$22(a0)
		moveq	#$51,d0
		jsr	Play_Sound_2.w
		lea	(ChildObjDat_8769C).l,a2
		jsr	CreateChild2_Complex(pc)
		bne.s	locret_875DE
		btst	#3,$38(a0)
		beq.s	locret_875DE
		neg.w	$18(a1)
		rts
; End of function sub_875B4


; =============== S U B R O U T I N E =======================================


sub_87638:

		jsr	Random_Number.w
		move.w	(RNG_seed).w,d0
		moveq	#1,d1
		btst	#0,d0
		beq.s	loc_8764C
		neg.w	d1

loc_8764C:
		move.w	d1,$40(a0)
		andi.w	#$3C,d0
		move.w	d0,$2E(a0)
		rts
; End of function sub_87638

; ---------------------------------------------------------------------------
ObjDat3_8765A:	dc.l Map_MonkeyDude
		dc.w $2548
		dc.w prio(5)
		dc.b $20
		dc.b $20
		dc.b 0
		dc.b $B
word_87666:	dc.w prio(6)
		dc.b 4
		dc.b 4
		dc.b 3
		dc.b 0
word_8766C:	dc.w $A548
		dc.w prio(5)
		dc.b $20
		dc.b $20
		dc.b 6
		dc.b $B
ObjDat3_87674:	dc.l Map_MonkeyDude
		dc.w $548
		dc.w prio(5)
		dc.b $20
		dc.b $20
		dc.b 6
		dc.b $98
ChildObjDat_87680:dc.w 4
		dc.l loc_8724E
ChildObjDat_87686:dc.w 4
		dc.l loc_87248
		dc.w 0
		dc.l loc_8724E
		dc.w 8
		dc.w 0
		dc.l loc_87480
		dc.w 0
ChildObjDat_8769C:dc.w 0
		dc.l loc_86D4A
		dc.l ObjDat3_87674
		dc.w 0
		dc.w 0
		dc.l MoveSprite_LightGravity
		dc.w 0
		dc.w $FE00
		dc.w $FC00
byte_876B4:	dc.b	7,   0

		dc.b	1, $FC
byte_876B8:	dc.b	0,   7
		dc.b	2,   7
		dc.b  $FC
byte_876BD:	dc.b	8,  $F
		dc.b	8,  $F
		dc.b	9,  $F
		dc.b   $A,  $F
		dc.b  $F8,  $A
		dc.b	6, $7E
		dc.b  $FC
; ---------------------------------------------------------------------------

Obj_CaterKillerJr:

		jsr	Obj_WaitOffscreen.w
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_876E2(pc,d0.w),d1
		jsr	off_876E2(pc,d1.w)
		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------
off_876E2:	dc.w loc_876EC-off_876E2

		dc.w loc_87728-off_876E2
		dc.w loc_87728-off_876E2
		dc.w loc_87758-off_876E2
		dc.w loc_8777A-off_876E2
; ---------------------------------------------------------------------------

loc_876EC:
		lea	ObjDat3_87862(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.w	#-$100,$18(a0)
		lea	ChildObjDat_87898(pc),a2
		jsr	CreateChild3_NormalRepeated.w

loc_87702:

		move.b	#4,5(a0)
		move.b	#3,$39(a0)
		move.w	#$80,d0
		move.w	d0,$3E(a0)
		move.w	d0,$1A(a0)
		move.w	#8,$40(a0)
		bclr	#0,$38(a0)
		rts
; ---------------------------------------------------------------------------

loc_87728:

		jsr	Swing_UpAndDown_Count.w
		bne.s	loc_87738
		jsr	MoveSprite2.w
		bra.w	loc_8783E
; ---------------------------------------------------------------------------

loc_87738:
		move.b	#6,5(a0)
		move.w	#$100,d0
		move.w	d0,$3E(a0)
		move.w	d0,$1A(a0)
		move.w	#8,$40(a0)
		bclr	#0,$38(a0)
		rts
; ---------------------------------------------------------------------------

loc_87758:

		jsr	Swing_UpAndDown.w
		tst.w	d3
		beq.s	loc_87770
		move.b	#8,5(a0)
		neg.w	$18(a0)
		bchg	#0,4(a0)

loc_87770:
		jsr	MoveSprite2.w
		bra.w	loc_8783E
; ---------------------------------------------------------------------------

loc_8777A:

		jsr	Swing_UpAndDown.w
		tst.w	d3
		bne.s	loc_87702
		jsr	MoveSprite2.w
		bra.w	loc_8783E
; ---------------------------------------------------------------------------

loc_8778C:

		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_877A2(pc,d0.w),d1
		jsr	off_877A2(pc,d1.w)
		moveq	#0,d0
		jmp	Child_DrawTouch_Sprite_FlickerMove.w
; ---------------------------------------------------------------------------
off_877A2:	dc.w loc_877AC-off_877A2

		dc.w loc_877D8-off_877A2
		dc.w loc_87728-off_877A2
		dc.w loc_87758-off_877A2
		dc.w loc_8777A-off_877A2
; ---------------------------------------------------------------------------

loc_877AC:
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	off_877C6(pc,d0.w),d1
		lea	off_877C6(pc,d1.w),a1
		lsr.w	#1,d0
		move.b	byte_877D2(pc,d0.w),$2F(a0)
		jmp	SetUp_ObjAttributes.w
; ---------------------------------------------------------------------------
off_877C6:	dc.w ObjDat3_8786E-off_877C6

		dc.w ObjDat3_8786E-off_877C6
		dc.w ObjDat3_8786E-off_877C6
		dc.w ObjDat3_8787A-off_877C6
		dc.w ObjDat3_87886-off_877C6
		dc.w ObjDat3_87886-off_877C6
byte_877D2:	dc.b $B
		dc.b $17
		dc.b $23
		dc.b $2F
		dc.b $37
		dc.b $3F
; ---------------------------------------------------------------------------

loc_877D8:
		subq.w	#1,$2E(a0)
		bmi.s	loc_877E0
		rts
; ---------------------------------------------------------------------------

loc_877E0:
		move.b	#4,5(a0)
		moveq	#$40,d1
		moveq	#0,d0
		move.b	$2C(a0),d0
		addq.w	#2,d0
		lsl.w	#2,d0
		sub.w	d0,d1
		move.w	d1,$2E(a0)
		move.l	#loc_87854,$34(a0)
		move.w	#-$100,$18(a0)
		bra.w	loc_87702
; ---------------------------------------------------------------------------

loc_8780A:
		lea	word_87892(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_8782C,(a0)
		move.l	#Go_Delete_Sprite,$34(a0)
		bset	#4,$2B(a0)
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_8782C:
		jsr	Refresh_ChildPositionAdjusted.w
		lea	byte_878A8(pc),a1
		jsr	Animate_RawNoSSTMultiDelay.w
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_8783E:

		cmpi.l	#loc_8778C,(a0)
		bne.s	locret_87852
		cmpi.b	#6,$2C(a0)
		bhs.s	locret_87852
		jsr	Obj_Wait.w

locret_87852:

		rts
; ---------------------------------------------------------------------------

loc_87854:
		move.w	#$1A,$2E(a0)
		lea	ChildObjDat_878A0(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------
ObjDat3_87862:	dc.l Map_CaterKillerJr
		dc.w $A55F
		dc.w prio(5)
		dc.b 8
		dc.b 8
		dc.b 0
		dc.b $17
ObjDat3_8786E:	dc.l Map_CaterKillerJr
		dc.w $A55F
		dc.w prio(5)
		dc.b 8
		dc.b $C
		dc.b 1
		dc.b $97
ObjDat3_8787A:	dc.l Map_CaterKillerJr
		dc.w $A55F
		dc.w prio(5)
		dc.b 8
		dc.b 8
		dc.b 2
		dc.b $97
ObjDat3_87886:	dc.l Map_MonkeyDude
		dc.w $A548
		dc.w prio(5)
		dc.b 4
		dc.b 4
		dc.b 3
		dc.b $98
word_87892:	dc.w prio(4)
		dc.b $10
		dc.b $10
		dc.b 3
		dc.b 0
ChildObjDat_87898:dc.w 5
		dc.l loc_8778C
		dc.w 0
ChildObjDat_878A0:dc.w 0
		dc.l loc_8780A
		dc.w 0
byte_878A8:	dc.b	3,   2
		dc.b	3,   2
		dc.b	4,   3
		dc.b	5,   4
		dc.b  $F4,   0
; ---------------------------------------------------------------------------

Obj_Jawz:
		jsr	Obj_WaitOffscreen.w
		lea	ObjDat3_87918(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_878CE,(a0)
		move.w	#-$200,d4
		jmp	Set_VelocityXTrackSonic.w
; ---------------------------------------------------------------------------

loc_878CE:
		jsr	MoveSprite2.w
		lea	byte_87924(pc),a1
		jsr	Animate_RawNoSST.w
		moveq	#0,d0
		move.b	$29(a0),d0
		bne.s	loc_878E8
		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------

loc_878E8:
		add.w	d0,d0
		movea.w	loc_8790C+4(pc,d0.w),a1
		jsr	Check_PlayerAttack.w
		bne.s	loc_87904
		lea	(ChildObjDat_6BDB2).l,a2
		jsr	CreateChild1_Normal.w
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------

loc_87904:
		move.w	a1,$44(a0)
		jsr	EnemyDefeated(pc)

loc_8790C:
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
		dc.w Player_1, Player_2, Player_2
ObjDat3_87918:	dc.l Map_Jawz
		dc.w $A539
		dc.w prio(5)
		dc.b $1C
		dc.b $C
		dc.b 0
		dc.b $D7
byte_87924:	dc.b 0
		dc.b 0
		dc.b 1
		dc.b $FC
; ---------------------------------------------------------------------------

Obj_Blastoid:
		jsr	Obj_WaitOffscreen.w
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_87944(pc,d0.w),d1
		jsr	off_87944(pc,d1.w)
		bsr.w	sub_879A8
		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------
off_87944:	dc.w loc_8794A-off_87944

		dc.w loc_87952-off_87944
		dc.w loc_87976-off_87944
; ---------------------------------------------------------------------------

loc_8794A:
		lea	ObjDat3_879E0(pc),a1
		jmp	SetUp_ObjAttributes.w
; ---------------------------------------------------------------------------

loc_87952:
		jsr	Find_SonicTails.w
		cmpi.w	#$80,d2
		blo.s	loc_8795E
		rts
; ---------------------------------------------------------------------------

loc_8795E:
		move.b	#4,5(a0)
		move.l	#byte_87A10,$30(a0)
		move.l	#loc_879A0,$34(a0)

locret_87974:

		rts
; ---------------------------------------------------------------------------

loc_87976:
		jsr	Animate_RawMultiDelay.w
		tst.w	d2
		beq.s	locret_87974
		bmi.s	locret_87974
		cmpi.b	#1,$22(a0)
		bne.s	locret_87974
		tst.b	4(a0)
		bpl.w	locret_87974
		moveq	#$4D,d0
		jsr	Play_Sound_2.w
		lea	ChildObjDat_879F8(pc),a2
		jmp	CreateChild5_ComplexAdjusted(pc)
; ---------------------------------------------------------------------------

loc_879A0:
		move.b	#2,5(a0)
		rts

; =============== S U B R O U T I N E =======================================


sub_879A8:
		jsr	Check_PlayerCollision.w
		beq.w	locret_87974
		jsr	Check_PlayerAttack.w
		bne.s	loc_879C4
		tst.b	$34(a1)
		bne.w	locret_87974
		jmp	HurtCharacter_Directly.w
; ---------------------------------------------------------------------------

loc_879C4:
		addq.w	#4,sp
		move.b	$2C(a0),d0
		andi.w	#$F,d0
		lea	(Level_trigger_array).w,a3
		st	(a3,d0.w)
		jsr	EnemyDefeated(pc)
		jmp	Draw_Sprite.w
; End of function sub_879A8

; ---------------------------------------------------------------------------
ObjDat3_879E0:	dc.l Map_Blastoid
		dc.w $A539
		dc.w prio(5)
		dc.b $14
		dc.b $C
		dc.b 0
		dc.b $D7
ObjDat3_879EC:	dc.l Map_Blastoid
		dc.w $A539
		dc.w prio(5)
		dc.b 4
		dc.b 4
		dc.b 2
		dc.b $98
ChildObjDat_879F8:dc.w 0
		dc.l loc_86D4A
		dc.l ObjDat3_879EC
		dc.l word_87A1F
		dc.l Move_AnimateRaw
		dc.b $EC
		dc.b $F9
		dc.w $FE00
		dc.w $FF00
byte_87A10:	dc.b	0, $7F
		dc.b	1,   4
		dc.b	0,   9
		dc.b	1,   4
		dc.b	0,   9
		dc.b	1,   4
		dc.b	0, $3F
		dc.b  $F4
word_87A1F:	dc.w 2
		dc.w $3FC
		dc.b 0
; ---------------------------------------------------------------------------

Obj_Buggernaut:

		jsr	Obj_WaitOffscreen.w

loc_87A2A:

		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_87A3C(pc,d0.w),d1
		jsr	off_87A3C(pc,d1.w)
		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------
off_87A3C:	dc.w loc_87A42-off_87A3C

		dc.w loc_87A74-off_87A3C
		dc.w loc_87A92-off_87A3C
; ---------------------------------------------------------------------------

loc_87A42:
		lea	ObjDat3_87BA0(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#byte_87BBA,$30(a0)
		lea	ChildObjDat_87BB2(pc),a2
		jsr	CreateChild1_Normal.w
		addq.b	#1,$39(a0)

loc_87A5E:
		move.b	#2,5(a0)
		move.w	#$3F,$2E(a0)
		move.l	#loc_87A7C,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_87A74:
		jsr	Animate_Raw.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_87A7C:
		move.b	#4,5(a0)
		move.w	#$7F,$2E(a0)
		move.l	#loc_87A5E,$34(a0)

locret_87A90:
		rts
; ---------------------------------------------------------------------------

loc_87A92:
		tst.b	4(a0)
		bpl.s	locret_87A90
		jsr	Find_SonicTails.w
		jsr	Change_FlipX(pc)
		move.w	#$200,d0
		moveq	#$10,d1
		jsr	Chase_Object(pc)
		bsr.w	sub_87B88
		jsr	MoveSprite2.w
		jsr	Animate_Raw.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

Obj_Buggernaught_Baby:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_87ACE(pc,d0.w),d1
		jsr	off_87ACE(pc,d1.w)
		jmp	Sprite_CheckDeleteTouchXY.w
; ---------------------------------------------------------------------------
off_87ACE:	dc.w loc_87AD4-off_87ACE

		dc.w loc_87AE6-off_87ACE
		dc.w loc_87B4C-off_87ACE
; ---------------------------------------------------------------------------

loc_87AD4:
		lea	word_87BAC(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#byte_87BBF,$30(a0)
		rts
; ---------------------------------------------------------------------------

loc_87AE6:
		jsr	Animate_Raw.w
		movea.w	$46(a0),a1
		cmpi.l	#loc_87A2A,(a1)
		beq.s	loc_87AFC
		bsr.w	sub_87B56
		beq.s	loc_87B24

loc_87AFC:
		bclr	#0,4(a0)
		btst	#0,4(a1)
		beq.s	loc_87B10
		bset	#0,4(a0)

loc_87B10:
		move.w	#$200,d0
		moveq	#$20,d1
		jsr	Chase_Object(pc)
		bsr.w	sub_87B88
		jmp	MoveSprite2.w
; ---------------------------------------------------------------------------

loc_87B24:
		move.b	#4,5(a0)
		move.w	$10(a0),d0
		move.w	#$200,d1
		bset	#0,4(a0)
		cmp.w	(Player_1+x_pos).w,d0
		bhs.s	loc_87B46
		neg.w	d1
		bclr	#0,4(a0)

loc_87B46:
		move.w	d1,$18(a0)
		rts
; ---------------------------------------------------------------------------

loc_87B4C:
		jsr	Animate_Raw.w
		jmp	MoveSprite2.w

; =============== S U B R O U T I N E =======================================


sub_87B56:
		lea	(Dynamic_object_RAM+$4A).w,a2
		move.w	#$59,d0

loc_87B5E:
		cmpi.l	#loc_87A2A,(a2)
		beq.s	loc_87B72

loc_87B66:
		lea	next_object(a2),a2
		dbf	d0,loc_87B5E
		moveq	#0,d0
		rts
; ---------------------------------------------------------------------------

loc_87B72:
		move.b	$39(a2),d1
		addq.b	#1,d1
		cmpi.b	#4,d1
		bhi.s	loc_87B66
		move.b	d1,$39(a2)
		move.w	a2,$46(a0)
		rts
; End of function sub_87B56


; =============== S U B R O U T I N E =======================================


sub_87B88:

		move.w	$14(a0),d0
		move.w	(Water_level).w,d1
		subi.w	#8,d1
		cmp.w	d1,d0
		blo.s	locret_87B9E
		move.w	#-$200,$1A(a0)

locret_87B9E:
		rts
; End of function sub_87B88

; ---------------------------------------------------------------------------
ObjDat3_87BA0:	dc.l Map_Buggernaut
		dc.w $A44C
		dc.w prio(5)
		dc.b $10
		dc.b $C
		dc.b 0
		dc.b $17
word_87BAC:	dc.w prio(5)
		dc.b $C
		dc.b $C
		dc.b 3
		dc.b 0
ChildObjDat_87BB2:dc.w 0
		dc.l Obj_Buggernaught_Baby
		dc.w $2000
byte_87BBA:	dc.b	0,   0
		dc.b	1,   2
		dc.b  $FC
byte_87BBF:	dc.b	0,   3
		dc.b	4,   5
		dc.b  $FC
; ---------------------------------------------------------------------------

Obj_TurboSpiker:

		jsr	Obj_WaitOffscreen.w
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_87BDC(pc,d0.w),d1
		jsr	off_87BDC(pc,d1.w)
		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------
off_87BDC:	dc.w loc_87BEC-off_87BDC

		dc.w loc_87C48-off_87BDC
		dc.w loc_87CAE-off_87BDC
		dc.w loc_87CCE-off_87BDC
		dc.w loc_87CEC-off_87BDC
		dc.w loc_87CFA-off_87BDC
		dc.w loc_87D20-off_87BDC
		dc.w loc_87D3C-off_87BDC
; ---------------------------------------------------------------------------

loc_87BEC:
		lea	ObjDat3_87EB4(pc),a1
		jsr	SetUp_ObjAttributes.w
		bclr	#1,4(a0)
		beq.s	loc_87C0A
		move.b	#$A,5(a0)
		lea	ChildObjDat_87F1E(pc),a2
		jsr	CreateChild1_Normal.w

loc_87C0A:
		move.b	#$10,$1F(a0)
		move.b	#$F,$1E(a0)
		move.l	#byte_87F26,$30(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		add.w	d0,d0
		move.w	d0,$2E(a0)
		add.w	d0,d0
		move.w	d0,$3C(a0)
		move.l	#loc_87C72,$34(a0)
		move.w	#-$80,d4
		jsr	Set_VelocityXTrackSonic.w
		lea	ChildObjDat_87EE6(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_87C48:
		jsr	Find_SonicTails.w
		cmpi.w	#$60,d2
		bhs.s	loc_87C60
		btst	#0,4(a0)
		beq.s	loc_87C5C
		subq.w	#2,d0

loc_87C5C:
		tst.w	d0
		beq.s	loc_87C8E

loc_87C60:
		jsr	Animate_Raw.w
		jsr	MoveSprite2.w
		jsr	Obj_Wait.w
		jmp	ObjHitFloor2_DoRoutine.w
; ---------------------------------------------------------------------------

loc_87C72:
		move.b	5(a0),d0
		cmpi.b	#4,d0
		beq.s	locret_87C8C
		move.b	d0,$3A(a0)
		move.b	#4,5(a0)
		move.w	#$F,$2E(a0)

locret_87C8C:

		rts
; ---------------------------------------------------------------------------

loc_87C8E:
		move.b	#6,5(a0)
		move.w	#$F,$2E(a0)
		move.w	#$200,d0
		bchg	#0,4(a0)
		beq.s	loc_87CA8
		neg.w	d0

loc_87CA8:
		move.w	d0,$18(a0)
		rts
; ---------------------------------------------------------------------------

loc_87CAE:
		subq.w	#1,$2E(a0)
		bmi.s	loc_87CB6
		rts
; ---------------------------------------------------------------------------

loc_87CB6:
		move.b	$3A(a0),5(a0)
		neg.w	$18(a0)
		bchg	#0,4(a0)
		move.w	$3C(a0),$2E(a0)
		rts
; ---------------------------------------------------------------------------

loc_87CCE:
		subq.w	#1,$2E(a0)
		bmi.s	loc_87CD6
		rts
; ---------------------------------------------------------------------------

loc_87CD6:
		move.b	#8,5(a0)
		bset	#1,$38(a0)
		move.l	#byte_87F2B,$30(a0)
		rts
; ---------------------------------------------------------------------------

loc_87CEC:
		jsr	Animate_Raw.w
		jsr	MoveSprite2.w
		jmp	ObjHitFloor2_DoRoutine.w
; ---------------------------------------------------------------------------

loc_87CFA:
		jsr	Find_SonicTails.w
		cmpi.w	#$60,d2
		blo.s	loc_87D06
		rts
; ---------------------------------------------------------------------------

loc_87D06:
		move.b	#$C,5(a0)
		bset	#0,$38(a0)
		move.w	#3,$2E(a0)
		lea	ChildObjDat_87EFE(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_87D20:
		subq.w	#1,$2E(a0)
		bmi.s	loc_87D28
		rts
; ---------------------------------------------------------------------------

loc_87D28:
		move.b	#$E,5(a0)
		move.w	#prio(3),8(a0)
		move.w	#$F,$2E(a0)
		rts
; ---------------------------------------------------------------------------

loc_87D3C:
		subq.w	#1,$2E(a0)
		bmi.s	loc_87D44
		rts
; ---------------------------------------------------------------------------

loc_87D44:
		move.b	#2,5(a0)
		rts
; ---------------------------------------------------------------------------

loc_87D4C:
		lea	word_87EC0(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_87D5E,(a0)
		jmp	Child_DrawTouch_Sprite.w
; ---------------------------------------------------------------------------

loc_87D5E:
		jsr	Refresh_ChildPositionAdjusted.w
		movea.w	$46(a0),a1
		btst	#1,$38(a1)
		bne.s	loc_87D72
		jmp	Child_DrawTouch_Sprite.w
; ---------------------------------------------------------------------------

loc_87D72:
		move.l	#loc_87DA4,(a0)
		move.w	#$100,d0
		btst	#0,4(a0)
		beq.s	loc_87D86
		neg.w	d0

loc_87D86:
		move.w	d0,$18(a0)
		move.w	#-$400,$1A(a0)
		moveq	#-$5E,d0
		jsr	Play_Sound_2.w
		lea	ChildObjDat_87EEE(pc),a2
		jsr	CreateChild1_Normal.w
		jmp	Sprite_CheckDeleteTouchXY.w
; ---------------------------------------------------------------------------

loc_87DA4:
		jsr	MoveSprite2.w
		jmp	Sprite_CheckDeleteTouchXY.w
; ---------------------------------------------------------------------------

loc_87DAE:
		lea	word_87EC6(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_87DC0,(a0)
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_87DC0:
		jsr	Refresh_ChildPositionAdjusted.w
		movea.w	$46(a0),a1
		btst	#7,$2A(a1)
		bne.s	loc_87DE4
		bsr.w	sub_87DE8
		bchg	#0,$38(a0)
		beq.w	locret_87C8C
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_87DE4:
		jmp	Go_Delete_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_87DE8:
		move.b	(V_int_run_count+3).w,d0
		andi.b	#3,d0
		bne.s	locret_87E18
		lea	ChildObjDat_87EF6(pc),a2
		jsr	CreateChild1_Normal.w
		bne.s	locret_87E18
		jsr	Random_Number.w
		andi.w	#7,d0
		subq.w	#3,d0
		add.w	d0,$10(a1)
		swap	d0
		andi.w	#7,d0
		subq.w	#3,d0
		add.w	d0,$14(a1)

locret_87E18:

		rts
; End of function sub_87DE8

; ---------------------------------------------------------------------------

loc_87E1A:
		lea	word_87ECC(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_87E3E,(a0)
		move.l	#byte_87F30,$30(a0)
		move.l	#Go_Delete_Sprite,$34(a0)
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_87E3E:
		jsr	Animate_Raw.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_87E48:

		lea	word_87ED2(pc),a1
		jsr	SetUp_ObjAttributes2.w
		move.l	#loc_87E66,(a0)
		move.b	$2C(a0),$2F(a0)
		moveq	#$39,d0
		jsr	Play_Sound_2.w
		rts
; ---------------------------------------------------------------------------

loc_87E66:
		subq.w	#1,$2E(a0)
		bmi.s	loc_87E6E
		rts
; ---------------------------------------------------------------------------

loc_87E6E:
		move.l	#loc_87E86,(a0)
		move.l	#byte_87F37,$30(a0)
		move.l	#Go_Delete_Sprite,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_87E86:
		jsr	Animate_Raw.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_87E90:
		move.l	#loc_87E9E,(a0)
		lea	ObjDat3_87EDA(pc),a1
		jmp	SetUp_ObjAttributes.w
; ---------------------------------------------------------------------------

loc_87E9E:
		movea.w	$46(a0),a1
		btst	#0,$38(a1)
		bne.s	loc_87EAE
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_87EAE:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------
ObjDat3_87EB4:	dc.l Map_TurboSpiker
		dc.w $2500
		dc.w prio(5)
		dc.b $20
		dc.b $20
		dc.b 0
		dc.b $1A
word_87EC0:	dc.w prio(5)
		dc.b 8
		dc.b $10
		dc.b 3
		dc.b $9E
word_87EC6:	dc.w prio(4)
		dc.b 4
		dc.b 8
		dc.b 4
		dc.b 0
word_87ECC:	dc.w prio(5)
		dc.b 4
		dc.b 4
		dc.b 5
		dc.b 0
word_87ED2:	dc.w $8500
		dc.w prio(4)
		dc.b 8
		dc.b 8
		dc.b 8
		dc.b 0
ObjDat3_87EDA:	dc.l Map_TurboSpikerHidden
		dc.w $C001
		dc.w prio(3)
		dc.b $10
		dc.b $10
		dc.b 0
		dc.b 0
ChildObjDat_87EE6:dc.w 0
		dc.l loc_87D4C
		dc.w $400
ChildObjDat_87EEE:dc.w 0
		dc.l loc_87DAE
		dc.w $FC14
ChildObjDat_87EF6:dc.w 0
		dc.l loc_87E1A
		dc.w 4
ChildObjDat_87EFE:dc.w 4
		dc.l loc_87E48
		dc.w $4F8
		dc.l loc_87E48
		dc.w $FA00
		dc.l loc_87E48
		dc.w $600
		dc.l loc_87E48
		dc.w $F800
		dc.l loc_87E48
		dc.w $800
ChildObjDat_87F1E:dc.w 0
		dc.l loc_87E90
		dc.w 0
byte_87F26:	dc.b	5,   0
		dc.b	1,   2
		dc.b  $FC
byte_87F2B:	dc.b	1,   0
		dc.b	1,   2
		dc.b  $FC
byte_87F30:	dc.b	0,   5
		dc.b	5,   5
		dc.b	6,   7
		dc.b  $F4
byte_87F37:	dc.b	1,   8
		dc.b	9,  $A
		dc.b   $B,  $C
		dc.b   $D, $F4
		dc.b	0
Map_TurboSpikerHidden:	include "General/Sprites/Turbo Spiker/Map - Turbo Spiker Hidden.asm"

; ---------------------------------------------------------------------------

Obj_MegaChomper:
		jsr	Obj_WaitOffscreen.w
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_87F80(pc,d0.w),d1
		jsr	off_87F80(pc,d1.w)
		btst	#7,$2A(a0)
		bne.s	loc_87F76
		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------

loc_87F76:
		jsr	EnemyDefeated(pc)
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
off_87F80:	dc.w loc_87F88-off_87F80
		dc.w loc_87FAC-off_87F80
		dc.w loc_88024-off_87F80
		dc.w loc_88062-off_87F80
; ---------------------------------------------------------------------------

loc_87F88:
		lea	ObjDat3_8826C(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#byte_88278,$30(a0)
		clr.w	$42(a0)
		bclr	#1,4(a0)
		beq.s	locret_87FAA
		bset	#7,$A(a0)

locret_87FAA:

		rts
; ---------------------------------------------------------------------------

loc_87FAC:
		bsr.w	loc_8813A
		jsr	Animate_Raw.w
		jsr	Find_SonicTails.w
		move.b	(V_int_run_count+3).w,d4
		andi.b	#7,d4
		bne.s	loc_87FCE
		moveq	#1,d4
		tst.w	d1
		bne.s	loc_87FCA
		neg.w	d4

loc_87FCA:
		add.w	d4,$14(a0)

loc_87FCE:
		move.w	$14(a0),d4
		move.w	(Water_level).w,d5
		addq.w	#8,d5
		cmp.w	d5,d4
		bhi.s	loc_87FE4
		btst	#6,$2A(a1)
		beq.s	loc_87FFC

loc_87FE4:
		move.w	#$200,d0
		move.w	#8,d1
		jsr	(Chase_ObjectXOnly).l
		jsr	Change_FlipXWithVelocity.w
		jmp	MoveSprite2.w
; ---------------------------------------------------------------------------

loc_87FFC:
		move.b	#4,5(a0)
		move.w	#$200,d4
		bset	#0,4(a0)
		tst.w	d0
		bne.s	loc_88018
		neg.w	d4
		bclr	#0,4(a0)

loc_88018:
		move.w	d4,$18(a0)
		move.w	#-$400,$1A(a0)
		rts
; ---------------------------------------------------------------------------

loc_88024:
		bsr.w	loc_8813A
		jsr	Animate_Raw.w
		tst.w	$1A(a0)
		bmi.s	loc_88052
		move.w	$14(a0),d0
		cmp.w	(Water_level).w,d0
		blo.s	loc_88052
		move.w	$1A(a0),d0
		addi.w	#-$20,d0
		move.w	d0,$1A(a0)
		beq.s	loc_88056
		bmi.s	loc_88056
		jmp	MoveSprite2.w
; ---------------------------------------------------------------------------

loc_88052:

		jmp	MoveSprite_LightGravity.w
; ---------------------------------------------------------------------------

loc_88056:

		move.b	#2,5(a0)
		clr.w	$1A(a0)
		rts
; ---------------------------------------------------------------------------

loc_88062:
		move.b	#0,$22(a0)
		btst	#2,(V_int_run_count+3).w
		beq.s	loc_88076
		move.b	#2,$22(a0)

loc_88076:
		movea.w	$44(a0),a1
		cmpi.b	#4,5(a1)
		beq.w	loc_88108
		cmpi.b	#2,$20(a1)
		beq.w	loc_88108
		cmpi.b	#9,$20(a1)
		beq.w	loc_88108

		jsr	Check_LRControllerShake(pc)
		bne.w	loc_88108
		btst	#2,$38(a0)
		beq.s	loc_880AE
		cmpa.w	#Player_1,a1
		bne.s	.tails
		move.w	(Ctrl_1).w,d0
		andi.w	#-$7374,d0
		move.w	d0,(Ctrl_1_logical).w
		bra.s	loc_880AE

.tails		move.w	(Ctrl_2).w,d0
		andi.w	#-$7374,d0
		move.w	d0,(Ctrl_2_logical).w

loc_880AE:
		move.w	$10(a1),d0
		move.b	$42(a0),d1
		ext.w	d1
		move.b	$38(a0),d2
		andi.b	#1,d2
		move.b	4(a1),d3
		andi.b	#1,d3
		eor.b	d2,d3
		beq.s	loc_880DC
		bchg	#0,4(a0)
		bchg	#0,$38(a0)
		neg.b	$42(a0)

loc_880DC:
		add.w	d1,d0
		move.w	d0,$10(a0)
		move.w	$14(a1),d0
		move.b	$43(a0),d1
		ext.w	d1
		bpl.s	loc_880FA
		cmpi.b	#8,$20(a1)
		bne.s	loc_880FA
		addi.w	#$10,d1

loc_880FA:

		add.w	d1,d0
		move.w	d0,$14(a0)
		bsr.w	sub_881FE
		beq.w	locret_87FAA

loc_88108:
		bclr	#2,$38(a0)
		beq.s	loc_88114
		cmpa.w	#Player_1,a1
		bne.s	.tails
		clr.b	(Ctrl_1_locked).w
		bra.s	loc_88114

.tails		clr.b	(Ctrl_2_locked).w

loc_88114:
		move.l	#MoveChkDel,(a0)
		move.b	#2,$22(a0)
		move.w	#$200,d0
		btst	#0,4(a0)
		beq.s	loc_8812E
		neg.w	d0

loc_8812E:
		move.w	d0,$18(a0)
		move.w	#-$200,$1A(a0)
		rts
; ---------------------------------------------------------------------------

loc_8813A:
		move.b	$29(a0),d0
		beq.w	locret_87FAA
		clr.b	$29(a0)
		andi.w	#3,d0
		move.w	d0,d2
		lsl.w	#2,d0
		lea	word_881EA-4(pc),a2
		lea	(a2,d0.w),a2
		movea.w	(a2)+,a1
		move.w	a1,$44(a0)
		move.w	$14(a0),d1
		sub.w	$14(a1),d1
		cmpi.w	#-$10,d1
		blt.w	locret_87FAA
		cmpi.w	#$10,d1
		bge.w	locret_87FAA
		jsr	Check_PlayerAttack.w
		bne.w	loc_881F6
		cmpi.w	#1,d2
		bne.s	.tails
		clr.w	(Ctrl_1_logical).w
		st	(Ctrl_1_locked).w
		bset	#2,$38(a0)
		bra.s	loc_88190

.tails		clr.w	(Ctrl_2_logical).w
		st	(Ctrl_2_locked).w
		bset	#2,$38(a0)

loc_88190:
		movea.w	(a2)+,a3
		move.w	a3,$3E(a0)
		move.w	(a3),$46(a0)
		move.b	#6,5(a0)
		move.w	#prio(0),8(a0)
		move.w	#$3C,$2E(a0)
		move.w	$10(a0),d0
		sub.w	$10(a1),d0
		move.b	d0,$42(a0)
		bclr	#0,4(a0)
		tst.w	d0
		bpl.s	loc_881C8
		bset	#0,4(a0)

loc_881C8:
		move.w	$14(a0),d0
		sub.w	$14(a1),d0
		move.b	d0,$43(a0)
		bclr	#0,$38(a0)
		btst	#0,4(a1)
		beq.s	locret_881E8

loc_881E2:
		bset	#0,$38(a0)

locret_881E8:
		rts
; ---------------------------------------------------------------------------
word_881EA:	dc.w  $B000, $F604
		dc.w  $B04A, $F606
		dc.w  $B000, $F604
; ---------------------------------------------------------------------------

loc_881F6:
		bset	#7,$2A(a0)
		rts

; =============== S U B R O U T I N E =======================================


sub_881FE:
		subq.w	#1,$2E(a0)
		bpl.s	.idk
		move.w	#$3B,$2E(a0)
		ori.b	#1,(Update_HUD_ring_count).w
		bset	#7,$38(a0)

		cmp.w	#Player_1,a1
		bne.s	.tails
		subq.b	#1,Ring_count.w
		bpl.s	.ringsfx
		clr.b	Ring_count.w
		bra.s	.kill

.ringsfx	moveq	#$33,d0
		jsr	Play_Sound_2.w
		moveq	#0,d0
		rts
; ---------------------------------------------------------------------------

.idk		bclr	#7,$38(a0)
		moveq	#0,d0
		rts
; ---------------------------------------------------------------------------

.tails		subq.b	#1,Ring_count+1.w
		bpl.s	.ringsfx
		clr.b	Ring_count+1.w

.kill		movea.l	a0,a2
		movea.w	$44(a0),a1
		movea.l	a1,a0
		jsr	(Kill_Character).l
		movea.l	a2,a0
		moveq	#1,d0
		rts
; End of function sub_881FE

; ---------------------------------------------------------------------------
ObjDat3_8826C:	dc.l Map_MegaChomper
		dc.w $254D
		dc.w prio(5)
		dc.b $20
		dc.b $20
		dc.b 0
		dc.b $D7
byte_88278:	dc.b 2
		dc.b 0
		dc.b 1
		dc.b $FC
; ---------------------------------------------------------------------------

Obj_Poindexter:
		jsr	Obj_WaitOffscreen.w
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_88294(pc,d0.w),d1
		jsr	off_88294(pc,d1.w)
		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------
off_88294:	dc.w loc_88298-off_88294
		dc.w loc_882E6-off_88294
; ---------------------------------------------------------------------------

loc_88298:
		lea	ObjDat3_88320(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#byte_8832C,$30(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		add.w	d0,d0
		add.w	d0,d0
		move.w	d0,$2E(a0)
		add.w	d0,d0
		move.w	d0,$3A(a0)
		move.l	#loc_8830E,$34(a0)
		move.w	#-$40,d4
		jsr	Set_VelocityXTrackSonic.w
		move.w	#$20,d0
		move.w	d0,$3E(a0)
		move.w	d0,$1A(a0)
		move.w	#1,$40(a0)
		bclr	#0,$38(a0)
		rts
; ---------------------------------------------------------------------------

loc_882E6:
		jsr	Swing_UpAndDown.w
		jsr	MoveSprite2.w
		jsr	Animate_RawMultiDelay.w
		jsr	Obj_Wait.w
		move.b	#$A,$28(a0)
		cmpi.b	#2,$22(a0)
		bne.s	locret_8830C
		move.b	#-$7A,$28(a0)

locret_8830C:
		rts
; ---------------------------------------------------------------------------

loc_8830E:
		neg.w	$18(a0)
		bchg	#0,4(a0)
		move.w	$3A(a0),$2E(a0)
		rts
; ---------------------------------------------------------------------------
ObjDat3_88320:	dc.l Map_Poindexter
		dc.w $A559
		dc.w prio(5)
		dc.b $14
		dc.b $14
		dc.b 0
		dc.b 0
byte_8832C:	dc.b	0, $7F
		dc.b	1,   4
		dc.b	2, $3F
		dc.b	1,   4
		dc.b  $FC,   0
; ---------------------------------------------------------------------------

Obj_BubblesBadnik:

		jsr	Obj_WaitOffscreen.w
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_8836A(pc,d0.w),d1
		jsr	off_8836A(pc,d1.w)
		move.b	#$12,$28(a0)
		cmpi.b	#4,$22(a0)
		bne.s	loc_8835E
		move.b	#-$7A,$28(a0)

loc_8835E:
		lea	PLCPtr_88436(pc),a2
		jsr	Perform_DPLC.w
		jmp	Sprite_CheckDeleteTouchSlotted.w
; ---------------------------------------------------------------------------
off_8836A:	dc.w loc_88370-off_8836A

		dc.w loc_883AC-off_8836A
		dc.w loc_883E6-off_8836A
; ---------------------------------------------------------------------------

loc_88370:
		lea	ObjDat4_88424(pc),a1
		jsr	SetUp_ObjAttributesSlotted.w
		move.w	#-$80,$18(a0)
		btst	#0,4(a0)
		beq.s	loc_8838A
		neg.w	$18(a0)

loc_8838A:
		move.l	#byte_8844D,$30(a0)
		move.w	#$100,d0
		move.w	d0,$3E(a0)
		move.w	d0,$1A(a0)
		move.w	#2,$40(a0)
		bclr	#0,$38(a0)
		rts
; ---------------------------------------------------------------------------

loc_883AC:
		jsr	Animate_RawMultiDelay.w
		move.w	$1A(a0),d4
		jsr	Swing_UpAndDown.w
		tst.w	$1A(a0)
		bne.s	loc_883E0
		tst.w	d4
		bmi.s	loc_883E0
		move.b	#4,5(a0)
		move.l	#byte_8843E,$30(a0)
		move.l	#loc_88414,$34(a0)
		clr.b	$23(a0)
		clr.b	$24(a0)

loc_883E0:

		jmp	MoveSprite2.w
; ---------------------------------------------------------------------------

loc_883E6:
		jsr	Animate_RawMultiDelay.w
		beq.s	loc_883FC
		cmpi.b	#4,$23(a0)
		bne.s	loc_883FC
		moveq	#-$6C,d0
		jsr	Play_Sound_2.w

loc_883FC:

		jsr	Swing_UpAndDown.w
		tst.w	d3
		beq.s	loc_8840E
		neg.w	$18(a0)
		bchg	#0,4(a0)

loc_8840E:
		jmp	MoveSprite2.w
; ---------------------------------------------------------------------------

loc_88414:
		move.b	#2,5(a0)
		move.l	#byte_8844D,$30(a0)
		rts
; ---------------------------------------------------------------------------
ObjDat4_88424:	dc.w 1
		dc.w $A500
		dc.w $18
		dc.w 0
		dc.l Map_BubblesBadnik
		dc.w prio(5)
		dc.b $14
		dc.b $18
		dc.b 0
		dc.b 0
PLCPtr_88436:	dc.l ArtUnc_BubblesBadnik
		dc.l DPLC_BubblesBadnik
byte_8843E:	dc.b	0,  $F
		dc.b	0, $77
		dc.b	1,   3
		dc.b	2,   3
		dc.b	2,   3
		dc.b	1,   3
		dc.b	0, $77
		dc.b  $F4
byte_8844D:	dc.b	0, $7F

		dc.b	3,   3
		dc.b	4, $6B
		dc.b	4, $6B
		dc.b	3,   3
		dc.b	0, $7F
		dc.b  $FC
; ---------------------------------------------------------------------------

Obj_MGZMiniBoss:
		jsr	Obj_WaitOffscreen.w
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_88476(pc,d0.w),d1
		jsr	off_88476(pc,d1.w)
		bsr.w	sub_88A62

		move.w	$10(a0),d0		; NAT: Despawn code
		andi.w	#-$80,d0
		sub.w	(Camera_X_pos_coarse_back).w,d0
		cmpi.w	#$280,d0
		bhi.w	loc_8855A		; delete
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------
off_88476:	dc.w loc_88480-off_88476

		dc.w loc_884A2-off_88476
		dc.w loc_884D2-off_88476
		dc.w loc_884FA-off_88476
		dc.w loc_8852E-off_88476
; ---------------------------------------------------------------------------

loc_88480:
		st	BossHitMode.w		; NAT: Enable hit mode
		clr.w	BossHitsP1.w		; clear hits count

		lea	ObjDat3_88AF6(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.b	#$7F,$29(a0)
		move.b	#$28,$1E(a0)
		jsr	Swing_Setup1.w
		lea	ChildObjDat_88B2C(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_884A2:
		jsr	Swing_UpAndDown.w
		jsr	MoveSprite2.w
		jsr	Find_SonicTails.w
		cmpi.w	#$60,d2
		bhs.w	locret_884D0
		move.b	#4,5(a0)
		move.l	#byte_88B73,$30(a0)
		move.l	#loc_884E2,$34(a0)

locret_884D0:

		rts
; ---------------------------------------------------------------------------

loc_884D2:

		jsr	Swing_UpAndDown.w
		jsr	MoveSprite2.w
		jmp	Animate_RawGetFaster.w
; ---------------------------------------------------------------------------

loc_884E2:
		move.b	#6,5(a0)
		move.l	#byte_88B79,$30(a0)
		move.l	#loc_88514,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_884FA:

		jsr	Animate_Raw.w
		subq.w	#1,$14(a0)
		jsr	ObjCheckCeilingDist.w
		tst.w	d1
		bpl.s	locret_88512
		movea.l	$34(a0),a1
		jsr	(a1)

locret_88512:
		rts
; ---------------------------------------------------------------------------

loc_88514:
		move.b	#8,5(a0)
		st	(ScrShake_Value).w
		move.w	#$BF,$2E(a0)
		move.l	#loc_8855A,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_8852E:

		jsr	Animate_Raw.w
		moveq	#-2,d0
		move.b	(V_int_run_count+3).w,d1
		btst	#0,d1
		beq.s	loc_88540
		moveq	#1,d0

loc_88540:
		add.w	d0,$14(a0)
		andi.b	#7,d1
		bne.s	loc_88556
		moveq	#$6F,d0
		jsr	Play_Sound_2.w
		bsr.w	sub_88A32

loc_88556:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_8855A:
		clr.w	(ScrShake_Value).w
		st	(Level_trigger_array+8).w
		jsr	Boss_DisableHitMode		; NAT: Disable hit mode
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------

Obj_9F_1:
		lea	byte_8859C(pc),a1
		jsr	(Check_CameraInRange).l

		btst	#5,OptionsBits.w		; NAT: Check if bosses are on
		bne.s	.enabled			; if are, branch
		lea	.screen(pc),a1			; else, lock screen
		jmp	Boss_Force_End_2		;

.screen		dc.w $2E00, $2E00, $E10, $E10

.enabled	st	BossHitMode.w			; NAT: Enable hit mode
		clr.w	BossHitsP1.w			; clear hits count
		st	Boss_flag.w			; NAT: Enable boss mode
		move.l	#.ok,(a0)			; set new obj address

.ok		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_88588(pc,d0.w),d1
		jsr	off_88588(pc,d1.w)
		bsr.w	sub_88A62
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------
off_88588:	dc.w loc_885A4-off_88588

		dc.w loc_88604-off_88588
		dc.w loc_884D2-off_88588
		dc.w loc_884FA-off_88588
		dc.w loc_8852E-off_88588
		dc.w loc_8867A-off_88588
		dc.w loc_886EA-off_88588
		dc.w loc_88748-off_88588
		dc.w loc_8876A-off_88588
		dc.w loc_88790-off_88588
byte_8859C:	dc.w $D20
		dc.W $EC0
		dc.w $2B80
		dc.w $3080
; ---------------------------------------------------------------------------

loc_885A4:
		lea	ObjDat3_88AF6(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.b	#6,$29(a0)
		move.b	#$28,$1E(a0)
		move.w	#$2E00,(Camera_max_X_pos).w
		move.w	#$E10,(Camera_target_max_Y_pos).w
		move.w	#$2E00,$3A(a0)
		move.l	#loc_88616,$34(a0)
		jsr	Swing_Setup1.w
		bset	#1,$38(a0)
		lea	PLC_88B88(pc),a1
		jsr	Load_PLC_Raw.w
		jsr	Create_New_Sprite.w
		bne.s	loc_885FC
		move.l	#Obj_Song_Fade_Transition,(a1)
		move.b	#Mus_Minib_S3,$2C(a1)		; NAT: S3 variant

loc_885FC:
		lea	ChildObjDat_88B2C(pc),a2
		jsr	CreateChild1_Normal.w
		move.w	#$EBA,PlayerSpawn+2.w	; NAT: set respawn y-pos
; ---------------------------------------------------------------------------

Obj_MGZ2_Mini_NewPos:
		jsr	Random_Number.w		; NAT: Find new position for player respawn
		and.l	#$FFFF,d0
		divu	#320-$20,d0
		swap	d0
		add.w	Camera_X_Pos.w,d0
		add.w	#$10,d0			; NAT: This is the new position

		move.w	d0,PlayerSpawn.w	; save as x-pos of respawn
		sub.w	x_pos(a0),d0		; sub x-pos from it
		add.w	#$30,d0			; width: $60px
		cmp.w	#$60,d0			; check if too close to boss
		blo.s	Obj_MGZ2_Mini_NewPos	; branci if so
		rts
; ---------------------------------------------------------------------------

loc_88604:
		jsr	Swing_UpAndDown.w
		jsr	MoveSprite2.w
		jmp	(loc_85C7E).l
; ---------------------------------------------------------------------------

loc_88616:
		move.b	#4,5(a0)
		move.l	#byte_88B73,$30(a0)
		move.l	#loc_8862E,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_8862E:
		move.b	#6,5(a0)
		move.l	#byte_88B79,$30(a0)
		move.l	#loc_88646,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_88646:

		move.b	#8,5(a0)
		st	(ScrShake_Value).w
		move.w	#$7F,$2E(a0)
		move.l	#loc_88660,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_88660:
		move.b	#$A,5(a0)
		clr.w	(ScrShake_Value).w
		move.w	#$3F,$2E(a0)
		move.l	#loc_8867E,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_8867A:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_8867E:
		move.b	#$C,5(a0)
		bset	#1,4(a0)
		st	(ScrShake_Value).w
		move.w	#$7F,$2E(a0)
		move.l	#loc_88716,$34(a0)
		move.w	(Camera_X_pos).w,$10(a0)
		jsr	Random_Number.w
		andi.w	#$E,d0
		move.w	word_886DA(pc,d0.w),d1
		add.w	d1,$10(a0)
		subi.w	#$40,$14(a0)
		cmpi.b	#2,(Player_1+character_id).w
		bne.s	locret_886D8
		move.w	d0,d3
		lea	ChildObjDat_88B62(pc),a2
		jsr	CreateChild1_Normal.w
		cmpi.w	#8,d3
		bhs.s	locret_886D8
		bset	#0,4(a1)

locret_886D8:

		rts
; ---------------------------------------------------------------------------
word_886DA:	dc.w $30
		dc.w $48
		dc.w $60
		dc.w $78
		dc.w $C8
		dc.w $E0
		dc.w $F8
		dc.w $110
; ---------------------------------------------------------------------------

loc_886EA:
		jsr	Animate_Raw.w
		moveq	#2,d0
		move.b	(V_int_run_count+3).w,d1
		btst	#0,d1
		beq.s	loc_886FC
		moveq	#-1,d0

loc_886FC:
		add.w	d0,$14(a0)
		andi.b	#7,d1
		bne.s	loc_88712
		moveq	#$6F,d0
		jsr	Play_Sound_2.w
		bsr.w	sub_88A32
		jsr	Obj_MGZ2_Mini_NewPos(pc); NAT: find new position to respawn in

loc_88712:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_88716:
		move.b	#$E,5(a0)
		clr.w	(ScrShake_Value).w
		cmpi.b	#2,(Player_1+character_id).w
		beq.s	loc_88738
		move.w	#$2F,$2E(a0)
		move.l	#loc_88754,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_88738:
		move.w	#$17,$2E(a0)
		move.l	#loc_88776,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_88748:
		addq.w	#4,$14(a0)
		jsr	Animate_Raw.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_88754:
		move.b	#$10,5(a0)
		move.w	#$3F,$2E(a0)
		move.l	#loc_88776,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_8876A:
		jsr	Animate_Raw.w
		subq.w	#1,$14(a0)
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_88776:

		move.b	#$12,5(a0)
		move.w	#$3F,$2E(a0)
		move.l	#loc_887A4,$34(a0)
		jmp	Swing_Setup1.w
; ---------------------------------------------------------------------------

loc_88790:
		jsr	Swing_UpAndDown.w
		jsr	MoveSprite2.w
		jsr	Animate_Raw.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_887A4:
		bclr	#1,4(a0)
		move.w	#$1F,$2E(a0)
		move.l	#loc_887BA,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_887BA:
		move.b	#6,5(a0)
		move.l	#loc_88646,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_887CA:
		jsr	Obj_EndSignControl_HitHUD		; NAT: sex!
		lea	ChildObjDat_88B42(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_887DA:
	;	move.w	(Camera_X_pos).w,d0
	;	addq.w	#1,d0
	;	move.w	d0,(Camera_X_pos).w
	;	move.w	d0,(Camera_min_X_pos).w
	;	cmpi.w	#$2E00,d0
	;	blo.s	locret_88802
	;	jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_887F6:

		move.l	#loc_88804,(a0)
		move.b	#-$62,$28(a0)
		rts
; ---------------------------------------------------------------------------

loc_88804:
		movea.w	$46(a0),a1
		btst	#7,$2A(a1)
		bne.s	loc_8881A
		jsr	Refresh_ChildPositionAdjusted.w
		jmp	Add_SpriteToCollisionResponseList.w
; ---------------------------------------------------------------------------

loc_8881A:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_88820:
		lea	ObjDat3_88B02(pc),a1
		jsr	SetUp_ObjAttributes.w
		bset	#3,$2B(a0)
		jsr	Random_Number.w
		andi.b	#3,d0
		move.b	d0,$22(a0)
		movea.w	$46(a0),a1
		btst	#1,$38(a1)
		beq.s	loc_88854
		tst.b	d0
		bne.s	loc_88854
		lea	ObjDat3_88B0E(pc),a1
		jsr	SetUp_ObjAttributes.w

loc_88854:

		move.l	#MoveDraw_SpriteTimed2,(a0)
		move.w	#$5F,$2E(a0)
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------

loc_88864:
		lea	ObjDat3_88B20(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_888A6,(a0)
		move.w	(Camera_X_pos).w,d0
		addi.w	#$30,d0
		btst	#0,4(a0)
		beq.s	loc_88886
		addi.w	#$E0,d0

loc_88886:
		move.w	d0,$10(a0)
		move.w	(Camera_Y_pos).w,d0
		addi.w	#$F0,d0
		move.w	d0,$14(a0)
		move.w	d0,$3A(a0)
		clr.b	5(a0)
		move.w	#$F,$2E(a0)
		rts
; ---------------------------------------------------------------------------

loc_888A6:
		btst	#4,$38(a0)
		bne.w	loc_88942
		move.w	$10(a0),-(sp)
		bsr.w	sub_88976
		moveq	#0,d1
		move.b	7(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	6(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	(sp)+,d4
		jsr	SolidObjectFull.w
		swap	d6
		andi.w	#3,d6
		beq.s	loc_88926
		move.b	d6,d0
		andi.b	#1,d0
		beq.s	loc_88902
		bclr	#5,$2A(a0)
		lea	(Player_1).w,a1
		move.w	$14(a1),d0
		sub.w	$14(a0),d0
		addi.w	#$28,d0
		bmi.s	loc_88902
		jsr	sub_24280.w

loc_88902:

		andi.b	#2,d6
		beq.s	loc_88926
		bclr	#6,$2A(a0)
		lea	(Player_2).w,a1
		move.w	$14(a1),d0
		sub.w	$14(a0),d0
		addi.w	#$28,d0
		bmi.s	loc_88926
		jsr	sub_24280.w

loc_88926:

		subq.b	#1,$24(a0)
		bpl.s	loc_8893C
		move.b	#7,$24(a0)
		addq.b	#1,$22(a0)
		andi.b	#3,$22(a0)

loc_8893C:
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_88942:
		jsr	Displace_PlayerOffObject.w
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_8894C:

		lea	word_88B1A(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#Obj_FlickerMove,(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		lsr.w	#1,d0
		move.b	RawAni_88970(pc,d0.w),$22(a0)
		moveq	#4,d0
		jmp	Set_IndexedVelocity.w
; ---------------------------------------------------------------------------
RawAni_88970:	dc.b	4,   3,	  5,   6,   6,	 0

; =============== S U B R O U T I N E =======================================


sub_88976:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_88984(pc,d0.w),d1
		jmp	off_88984(pc,d1.w)
; End of function sub_88976

; ---------------------------------------------------------------------------
off_88984:	dc.w loc_8898E-off_88984

		dc.w loc_889A8-off_88984
		dc.w loc_889E8-off_88984
		dc.w loc_88A08-off_88984
		dc.w loc_88A18-off_88984
; ---------------------------------------------------------------------------

loc_8898E:
		subq.w	#4,$14(a0)
		subq.w	#1,$2E(a0)
		bpl.w	locret_884D0
		move.b	#2,5(a0)
		move.w	#$3F,$2E(a0)
		rts
; ---------------------------------------------------------------------------

loc_889A8:
		subq.w	#1,$2E(a0)
		bpl.w	locret_884D0
		move.b	#4,5(a0)
		move.w	#$100,d0
		btst	#0,4(a0)
		beq.s	loc_889C4
		neg.w	d0

loc_889C4:
		add.w	d0,$18(a0)
		move.w	#$DF,$2E(a0)
		move.w	#$100,d0
		move.w	d0,$3E(a0)
		move.w	d0,$1A(a0)
		move.w	#$10,$40(a0)
		bclr	#0,$38(a0)
		rts
; ---------------------------------------------------------------------------

loc_889E8:
		jsr	Swing_UpAndDown.w
		jsr	MoveSprite2.w
		subq.w	#1,$2E(a0)
		bpl.w	locret_884D0
		move.b	#6,5(a0)
		move.w	#$3F,$2E(a0)
		rts
; ---------------------------------------------------------------------------

loc_88A08:
		subq.w	#1,$2E(a0)
		bpl.w	locret_884D0
		move.b	#8,5(a0)
		rts
; ---------------------------------------------------------------------------

loc_88A18:
		move.w	$14(a0),d0
		addq.w	#2,d0
		move.w	d0,$14(a0)
		cmp.w	$3A(a0),d0
		blo.w	locret_884D0
		bset	#4,$38(a0)
		rts

; =============== S U B R O U T I N E =======================================


sub_88A32:

		lea	ChildObjDat_88B3A(pc),a2
		jsr	CreateChild1_Normal.w
		bne.s	locret_88A60
		jsr	Random_Number.w
		andi.w	#$1FF,d0
		move.w	(Camera_X_pos).w,d1
		subi.w	#$40,d1
		add.w	d0,d1
		move.w	d1,$10(a1)
		move.w	(Camera_Y_pos).w,d0
		subi.w	#$20,d0
		move.w	d0,$14(a1)

locret_88A60:
		rts
; End of function sub_88A32


; =============== S U B R O U T I N E =======================================


sub_88A62:

		tst.b	$28(a0)
		bne.s	locret_88AB2
		tst.b	$29(a0)
		beq.s	loc_88AB4
		tst.b	$20(a0)
		bne.s	loc_88A88
		move.b	#$20,$20(a0)
		moveq	#$6E,d0
		jsr	Play_Sound_2.w
		bset	#6,$2A(a0)

loc_88A88:
		moveq	#0,d0
		btst	#0,$20(a0)
		bne.s	loc_88A94
		addq.w	#6,d0

loc_88A94:
		lea	word_88AE4(pc),a1
		lea	word_88AEA(pc,d0.w),a2
		jsr	CopyWordData_3.w
		subq.b	#1,$20(a0)
		bne.s	locret_88AB2
		bclr	#6,$2A(a0)
		move.b	$25(a0),$28(a0)

locret_88AB2:

		rts
; ---------------------------------------------------------------------------

loc_88AB4:
		move.l	#Wait_FadeToLevelMusic,(a0)
		clr.w	(ScrShake_Value).w
		move.l	#loc_887CA,$34(a0)
	;	jsr	Create_New_Sprite.w
	;	bne.s	loc_88AD4
	;	move.l	#loc_887DA,(a1)

loc_88AD4:
		lea	Child6_CreateBossExplosion.w,a2
		jsr	CreateChild1_Normal.w
		jmp	BossDefeated_StopTimer.w
; End of function sub_88A62

; ---------------------------------------------------------------------------
word_88AE4:	dc.w $FC38
		dc.w $FC3A
		dc.w $FC3C
word_88AEA:	dc.w $CAA
		dc.w $866
		dc.w $644
		dc.w $EEE
		dc.w $EEE
		dc.w $EEE
ObjDat3_88AF6:	dc.l Map_MGZMiniBoss

		dc.w $254F
		dc.w prio(5)
		dc.b $28
		dc.b $C
		dc.b 0
		dc.b $10
ObjDat3_88B02:	dc.l Map_MGZEndBossDebris
		dc.w $4570
		dc.w prio(4)
		dc.b $20
		dc.b $20
		dc.b 0
		dc.b 0
ObjDat3_88B0E:	dc.l Map_MGZMinibossSpires
		dc.w $4500
		dc.w prio(4)
		dc.b 4
		dc.b $10
		dc.b 0
		dc.b $84
word_88B1A:	dc.w prio(5)
		dc.b $C
		dc.b $C
		dc.b 0
		dc.b 0
ObjDat3_88B20:	dc.l Map_MGZMovingSpikePlatform
		dc.w $4001
		dc.w prio(5)
		dc.b $18
		dc.b $30
		dc.b 0
		dc.b 0
ChildObjDat_88B2C:dc.w 1

		dc.l loc_887F6
		dc.w $E4EA
		dc.l loc_887F6
		dc.w $1CEA
ChildObjDat_88B3A:dc.w 0
		dc.l loc_88820
		dc.w 0
ChildObjDat_88B42:dc.w 4
		dc.l loc_8894C
		dc.w 0
		dc.l loc_8894C
		dc.w $E400
		dc.l loc_8894C
		dc.w $1C00
		dc.l loc_8894C
		dc.w $E4EA
		dc.l loc_8894C
		dc.w $1CEA
ChildObjDat_88B62:dc.w 0
		dc.l loc_88864
		dc.w 0
		dc.b	0,   5
		dc.b	1,   5
		dc.b	2,   5
		dc.b	3,   5
		dc.b  $FC
byte_88B73:	dc.b	5,   4

		dc.b	0,   1
		dc.b	2, $FC
byte_88B79:	dc.b	0,   0

		dc.b	1,   2
		dc.b  $FC
Map_MGZMinibossSpires:	include "Levels/MGZ/Misc Object Data/Map - Miniboss Spires.asm"

PLC_88B88:	dc.w 1
		dc.l ArtNem_BossExplosion
		dc.w $A000
		dc.l ArtNem_MGZSpire
		dc.w $A000
; ---------------------------------------------------------------------------

Obj_Spiker:
		jsr	Obj_WaitOffscreen.w
		moveq	#$A,d0
		bsr.w	sub_88DCE
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_88BB4(pc,d0.w),d1
		jsr	off_88BB4(pc,d1.w)
		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------
off_88BB4:	dc.w loc_88BC0-off_88BB4

		dc.w loc_88BD0-off_88BB4
		dc.w loc_88BEA-off_88BB4
		dc.w loc_88C04-off_88BB4
		dc.w loc_88C24-off_88BB4
		dc.w loc_88C38-off_88BB4
; ---------------------------------------------------------------------------

loc_88BC0:
		lea	ObjDat3_88DFA(pc),a1
		jsr	SetUp_ObjAttributes.w
		lea	ChildObjDat_88E1E(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_88BD0:
		jsr	Find_SonicTails.w
		cmpi.w	#$40,d2
		blo.s	loc_88BDC
		rts
; ---------------------------------------------------------------------------

loc_88BDC:
		move.b	#4,5(a0)
		move.w	#7,$2E(a0)
		rts
; ---------------------------------------------------------------------------

loc_88BEA:
		subq.w	#1,$14(a0)
		subq.w	#1,$2E(a0)
		bmi.s	loc_88BF6
		rts
; ---------------------------------------------------------------------------

loc_88BF6:
		move.b	#6,5(a0)
		bset	#2,$38(a0)
		rts
; ---------------------------------------------------------------------------

loc_88C04:
		jsr	Find_SonicTails.w
		cmpi.w	#$40,d2
		bhs.s	loc_88C10
		rts
; ---------------------------------------------------------------------------

loc_88C10:
		move.b	#8,5(a0)
		bclr	#2,$38(a0)
		move.w	#7,$2E(a0)
		rts
; ---------------------------------------------------------------------------

loc_88C24:
		addq.w	#1,$14(a0)
		subq.w	#1,$2E(a0)
		bmi.s	loc_88C30
		rts
; ---------------------------------------------------------------------------

loc_88C30:
		move.b	#2,5(a0)
		rts
; ---------------------------------------------------------------------------

loc_88C38:
		lea	byte_88E4A(pc),a1
		jsr	Animate_RawNoSSTMultiDelay.w
		tst.w	d2
		beq.s	locret_88C6C
		cmpi.b	#4,$23(a0)
		bne.s	locret_88C6C
		movea.w	$44(a0),a1
		move.w	#-$600,$1A(a1)
		bset	#1,$2A(a1)
		bclr	#3,$2A(a1)
		clr.b	$40(a1)
		move.b	#2,5(a1)

locret_88C6C:

		rts
; ---------------------------------------------------------------------------

loc_88C6E:
		move.b	$3A(a0),5(a0)
		move.b	#$A,$28(a0)
		rts
; ---------------------------------------------------------------------------

loc_88C7C:

		jsr	Refresh_ChildPosition.w
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_88C92(pc,d0.w),d1
		jsr	off_88C92(pc,d1.w)
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------
off_88C92:	dc.w loc_88C9A-off_88C92

		dc.w loc_88CB0-off_88C92
		dc.w loc_88CC6-off_88C92
		dc.w loc_88D02-off_88C92
; ---------------------------------------------------------------------------

loc_88C9A:
		lea	word_88E06(pc),a1
		jsr	SetUp_ObjAttributes3.w
		tst.b	$2C(a0)
		bne.s	locret_88CAE
		bset	#0,4(a0)

locret_88CAE:
		rts
; ---------------------------------------------------------------------------

loc_88CB0:
		movea.w	$46(a0),a1
		btst	#2,$38(a1)
		bne.s	loc_88CBE
		rts
; ---------------------------------------------------------------------------

loc_88CBE:
		move.b	#4,5(a0)
		rts
; ---------------------------------------------------------------------------

loc_88CC6:
		movea.w	$46(a0),a1
		btst	#2,$38(a1)
		beq.s	loc_88CFA
		jsr	Find_SonicTails.w
		cmpi.w	#$40,d2
		bhs.s	locret_88CE8
		tst.b	$2C(a0)
		beq.s	loc_88CE4
		subq.w	#2,d0

loc_88CE4:
		tst.w	d0
		beq.s	loc_88CEA

locret_88CE8:
		rts
; ---------------------------------------------------------------------------

loc_88CEA:
		move.b	#6,5(a0)
		move.l	#loc_88D28,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_88CFA:
		move.b	#2,5(a0)

locret_88D26:
		rts
; ---------------------------------------------------------------------------

loc_88D02:
		lea	byte_88E53(pc),a1
		jsr	Animate_RawNoSSTMultiDelay.w
		tst.w	d2
		beq.s	locret_88D26
		cmpi.b	#4,$22(a0)
		bne.s	locret_88D26
		moveq	#$4D,d0
		jsr	Play_Sound_2.w
		lea	ChildObjDat_88E32(pc),a2
		jmp	CreateChild5_ComplexAdjusted(pc)
; ---------------------------------------------------------------------------

loc_88D28:
		move.b	#4,5(a0)
		rts
; ---------------------------------------------------------------------------

loc_88D30:
		jsr	Refresh_ChildPosition.w
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_88D46(pc,d0.w),d1
		jsr	off_88D46(pc,d1.w)
		jmp	Child_DrawTouch_Sprite.w
; ---------------------------------------------------------------------------
off_88D46:	dc.w loc_88D4C-off_88D46

		dc.w loc_88D54-off_88D46
		dc.w loc_88D94-off_88D46
; ---------------------------------------------------------------------------

loc_88D4C:
		lea	word_88E0C(pc),a1
		jsr	SetUp_ObjAttributes3.w

loc_88D54:
		jsr	Check_PlayerCollision.w
		bne.s	loc_88D5C
		rts
; ---------------------------------------------------------------------------

loc_88D5C:
		bsr.w	sub_88DA6
		move.b	#4,5(a0)
		clr.b	$28(a0)
		move.w	#$08,$2E(a0)
		move.l	#loc_88D98,$34(a0)
		movea.w	$46(a0),a1
		bset	#3,$38(a1)
		move.b	#1,$22(a1)
		clr.b	$28(a1)
		move.w	$44(a0),$44(a1)
		rts
; ---------------------------------------------------------------------------

loc_88D94:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_88D98:
		move.b	#2,5(a0)
		move.b	#$CA,$28(a0)
		rts

; =============== S U B R O U T I N E =======================================


sub_88DA6:
		clr.w	$1A(a1)
		bset	#1,$2A(a1)
		addq.w	#6,$14(a1)
		move.b	#2,5(a1)
		clr.b	$40(a1)
		bclr	#4,$2A(a1)
		moveq	#-$4F,d0
		jmp	Play_Sound_2.w

; =============== S U B R O U T I N E =======================================


sub_88DCE:
		btst	#3,$38(a0)
		bne.s	loc_88DD8
		rts
; ---------------------------------------------------------------------------

loc_88DD8:
		bclr	#3,$38(a0)
		clr.b	$23(a0)
		clr.b	$24(a0)
		move.b	5(a0),$3A(a0)
		move.b	d0,5(a0)
		move.l	#loc_88C6E,$34(a0)
		rts
; End of function sub_88DCE

; ---------------------------------------------------------------------------
ObjDat3_88DFA:	dc.l Map_Spiker
		dc.w $2530
		dc.w prio(5)
		dc.b $20
		dc.b $10
		dc.b 0
		dc.b $A
word_88E06:	dc.w prio(5)
		dc.b $20
		dc.b 4
		dc.b 3
		dc.b 0
word_88E0C:	dc.w prio(4)
		dc.b $20
		dc.b 4
		dc.b 7
		dc.b $CA
ObjDat3_88E12:	dc.l Map_Spiker
		dc.w $530
		dc.w prio(5)
		dc.b 4
		dc.b 4
		dc.b 5
		dc.b $98
ChildObjDat_88E1E:dc.w 2
		dc.l loc_88C7C
		dc.w $F00C
		dc.l loc_88C7C
		dc.w $100C
		dc.l loc_88D30
		dc.w $F4
ChildObjDat_88E32:dc.w 0
		dc.l loc_86D4A
		dc.l ObjDat3_88E12
		dc.l byte_88E5C
		dc.l MoveSlowFall_AnimateRaw
		dc.b 4
		dc.b 0
		dc.w $200
		dc.w $FE00
byte_88E4A:	dc.b	1,   0
		dc.b	2,   1
		dc.b	1,   0
		dc.b	0,   5
		dc.b  $F4
byte_88E53:	dc.b	3,   1
		dc.b	3,  $F
		dc.b	4,   7
		dc.b	3, $3F
		dc.b  $F4
byte_88E5C:	dc.b	1,   5
		dc.b	6, $FC
; ---------------------------------------------------------------------------

Obj_Mantis:

		jsr	Obj_WaitOffscreen.w
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_88E78(pc,d0.w),d1
		jsr	off_88E78(pc,d1.w)
		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------
off_88E78:	dc.w loc_88E82-off_88E78

		dc.w loc_88E98-off_88E78
		dc.w loc_88EC4-off_88E78
		dc.w loc_88EFE-off_88E78
		dc.w loc_88F22-off_88E78
; ---------------------------------------------------------------------------

loc_88E82:
		lea	ObjDat3_88F8A(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.b	#$29,$1E(a0)
		lea	ChildObjDat_88F9C(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_88E98:
		jsr	Find_SonicTails.w
		bclr	#0,4(a0)
		tst.w	d0
		beq.s	loc_88EAC
		bset	#0,4(a0)

loc_88EAC:
		cmpi.w	#$40,d2
		blo.s	loc_88EB4
		rts
; ---------------------------------------------------------------------------

loc_88EB4:
		move.b	#4,5(a0)
		move.l	#loc_88EE8,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_88EC4:
		lea	byte_88FA4(pc),a1
		jsr	Animate_RawNoSSTMultiDelay.w
		tst.w	d2
		beq.s	locret_88EE0
		bmi.s	locret_88EE0
		moveq	#0,d0
		move.b	$23(a0),d0
		move.w	word_88EE2(pc,d0.w),d0
		add.w	d0,$14(a0)

locret_88EE0:

		rts
; ---------------------------------------------------------------------------
word_88EE2:	dc.w 0
		dc.w $FFFB
		dc.w $FFED
; ---------------------------------------------------------------------------

loc_88EE8:
		move.b	#6,5(a0)
		move.w	#-$600,$1A(a0)
		move.l	#loc_88F0E,$34(a0)

locret_88EFC:
		rts
; ---------------------------------------------------------------------------

loc_88EFE:
		jsr	MoveSprite.w
		tst.w	$1A(a0)
		bmi.s	locret_88EFC
		jmp	ObjHitFloor_DoRoutine.w
; ---------------------------------------------------------------------------

loc_88F0E:
		move.b	#8,5(a0)
		clr.w	$1A(a0)
		move.l	#loc_88F48,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_88F22:
		lea	byte_88FAB(pc),a1
		jsr	Animate_RawNoSSTMultiDelay.w
		tst.w	d2
		beq.s	locret_88F3E
		bmi.s	locret_88F3E
		moveq	#0,d0
		move.b	$23(a0),d0
		move.w	word_88F40(pc,d0.w),d0
		add.w	d0,$14(a0)

locret_88F3E:

		rts
; ---------------------------------------------------------------------------
word_88F40:	dc.w 0
		dc.w $12
		dc.w 6
		dc.w $FFFF
; ---------------------------------------------------------------------------

loc_88F48:
		move.b	#2,5(a0)
		rts
; ---------------------------------------------------------------------------

loc_88F50:
		jsr	Refresh_ChildPositionAdjusted.w
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_88F66(pc,d0.w),d1
		jsr	off_88F66(pc,d1.w)
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------
off_88F66:	dc.w loc_88F6A-off_88F66

		dc.w loc_88F72-off_88F66
; ---------------------------------------------------------------------------

loc_88F6A:
		lea	word_88F96(pc),a1
		jmp	SetUp_ObjAttributes3.w
; ---------------------------------------------------------------------------

loc_88F72:
		movea.w	$46(a0),a1
		move.b	#5,$22(a0)
		tst.w	$1A(a1)
		bmi.s	locret_88F88
		move.b	#4,$22(a0)

locret_88F88:
		rts
; ---------------------------------------------------------------------------
ObjDat3_88F8A:	dc.l Map_Mantis
		dc.w $254F
		dc.w prio(5)
		dc.b $14
		dc.b $1C
		dc.b 0
		dc.b $1A
word_88F96:	dc.w prio(4)
		dc.b 4
		dc.b 4
		dc.b 5
		dc.b 0
ChildObjDat_88F9C:dc.w 0
		dc.l loc_88F50
		dc.w $F7F5
byte_88FA4:	dc.b	0,   0
		dc.b	1,   2
		dc.b	2,   0
		dc.b  $F4
byte_88FAB:	dc.b	2,   0
		dc.b	1,   2
		dc.b	3,   2
		dc.b	0, $1F
		dc.b  $F4
; ---------------------------------------------------------------------------

Obj_Clamer:

		jsr	Obj_WaitOffscreen.w
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_88FD4(pc,d0.w),d1
		jsr	off_88FD4(pc,d1.w)
		lea	PLCPtr_89168(pc),a2
		jsr	Perform_DPLC.w
		jmp	Sprite_CheckDeleteTouchSlotted.w
; ---------------------------------------------------------------------------
off_88FD4:	dc.w loc_88FDC-off_88FD4

		dc.w loc_88FEC-off_88FD4
		dc.w loc_8904E-off_88FD4
		dc.w loc_89064-off_88FD4
; ---------------------------------------------------------------------------

loc_88FDC:
		lea	ObjDat4_89124(pc),a1
		jsr	SetUp_ObjAttributesSlotted.w
		lea	ChildObjDat_89148(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_88FEC:
		btst	#0,$38(a0)
		bne.s	loc_89014
		jsr	Find_SonicTails.w
		cmpi.w	#$60,d2
		bhs.s	loc_8900C
		btst	#0,4(a0)
		beq.s	loc_89008
		subq.w	#2,d0

loc_89008:
		tst.w	d0
		beq.s	loc_89036

loc_8900C:
		lea	byte_89170(pc),a1
		jmp	Animate_RawNoSSTMultiDelay.w
; ---------------------------------------------------------------------------

loc_89014:
		move.b	#4,5(a0)
		clr.b	$28(a0)
		bclr	#0,$38(a0)
		move.l	#loc_89056,$34(a0)
		clr.b	$23(a0)
		clr.b	$24(a0)
		rts
; ---------------------------------------------------------------------------

loc_89036:
		move.b	#6,5(a0)
		move.l	#loc_89056,$34(a0)
		clr.b	$23(a0)
		clr.b	$24(a0)

locret_8904C:

		rts
; ---------------------------------------------------------------------------

loc_8904E:
		lea	byte_89179(pc),a1
		jmp	Animate_RawNoSST.w
; ---------------------------------------------------------------------------

loc_89056:

		move.b	#2,5(a0)
		move.b	#$A,$28(a0)
		rts
; ---------------------------------------------------------------------------

loc_89064:
		lea	byte_89185(pc),a1
		jsr	Animate_RawNoSSTMultiDelay.w
		tst.w	d2
		beq.w	locret_8904C
		cmpi.b	#8,$22(a0)
		bne.w	locret_8904C
		tst.b	4(a0)
		bpl.w	locret_8904C
		lea	ChildObjDat_89150(pc),a2
		jmp	CreateChild5_ComplexAdjusted(pc)
; ---------------------------------------------------------------------------

loc_8908C:
		lea	word_89136(pc),a1
		jsr	SetUp_ObjAttributes3.w
		movea.w	$46(a0),a1
		move.b	4(a1),4(a0)
		clr.w	$A(a0)
		move.l	#loc_890AA,(a0)
		rts
; ---------------------------------------------------------------------------

loc_890AA:

		jsr	Check_PlayerCollision.w
		beq.s	loc_890C4
		move.l	#loc_890C8,(a0)
		bsr.w	sub_890D8
		movea.w	$46(a0),a1
		bset	#0,$38(a1)

loc_890C4:
		jmp	Child_DrawTouch_Sprite.w
; ---------------------------------------------------------------------------

loc_890C8:
		subq.w	#1,$2E(a0)
		bmi.s	loc_890D0
		rts
; ---------------------------------------------------------------------------

loc_890D0:
		move.l	#loc_890AA,(a0)
		rts

; =============== S U B R O U T I N E =======================================


sub_890D8:
		move.w	#$800,d0
		bclr	#0,$2A(a1)
		btst	#0,4(a0)
		beq.s	loc_890F2
		neg.w	d0
		bset	#0,$2A(a1)

loc_890F2:
		move.w	d0,$18(a1)
		move.w	d0,$1C(a1)
		move.w	#-$800,$1A(a1)
		bset	#1,$2A(a1)
		addq.w	#6,$14(a1)
		move.b	#$10,$20(a1)
		move.b	#2,5(a1)
		clr.b	$40(a1)
		moveq	#-$4F,d0
		jsr	Play_Sound_2.w
		rts
; End of function sub_890D8

; ---------------------------------------------------------------------------
ObjDat4_89124:	dc.w 1
		dc.w $A500
		dc.w $12
		dc.w 0
		dc.l Map_Clamer
		dc.w prio(5)
		dc.b $14
		dc.b $10
		dc.b 0
		dc.b $A
word_89136:	dc.w prio(5)
		dc.b 8
		dc.b 4
		dc.b $B
		dc.b $D7
ObjDat3_8913C:	dc.l Map_Clamer
		dc.w $A570
		dc.w prio(4)
		dc.b 8
		dc.b 8
		dc.b 9
		dc.b $98
ChildObjDat_89148:dc.w 0
		dc.l loc_8908C
		dc.w $F8
ChildObjDat_89150:dc.w 0
		dc.l loc_86D4A
		dc.l ObjDat3_8913C
		dc.l 0
		dc.l MoveSprite2
		dc.b $F0
		dc.b 2
		dc.w $FE00
		dc.w 0
PLCPtr_89168:	dc.l ArtUnc_Clamer
		dc.l DPLC_Clamer
byte_89170:	dc.b	1,   1
		dc.b	0, $5F
		dc.b	1,   1
		dc.b	2,   1
		dc.b  $FC
byte_89179:	dc.b	0,   0
		dc.b	1,   2
		dc.b	3,   4
		dc.b	3,   2
		dc.b	1,  $A
		dc.b	0, $F4
byte_89185:	dc.b	0,   2
		dc.b	5,   2
		dc.b	6,   2
		dc.b	7, $2F
		dc.b	8,   5
		dc.b	7, $1F
		dc.b	6,   2
		dc.b	5,   2
		dc.b	0, $1F
		dc.b  $F4
; ---------------------------------------------------------------------------

Obj_CNZBlastoid:

		jsr	Obj_WaitOffscreen.w
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_891B0(pc,d0.w),d1
		jsr	off_891B0(pc,d1.w)
		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------
off_891B0:	dc.w loc_891BA-off_891B0

		dc.w loc_891C2-off_891B0
		dc.w loc_891EE-off_891B0
		dc.w loc_8920E-off_891B0
		dc.w loc_8920E-off_891B0
; ---------------------------------------------------------------------------

loc_891BA:
		lea	ObjDat3_8933A(pc),a1
		jmp	SetUp_ObjAttributes.w
; ---------------------------------------------------------------------------

loc_891C2:
		jsr	Find_SonicTails.w
		cmpi.w	#$80,d2
		blo.s	loc_891CE
		rts
; ---------------------------------------------------------------------------

loc_891CE:
		move.b	#4,5(a0)
		move.l	#byte_89362,$30(a0)
		move.l	#loc_891F2,$34(a0)
		clr.b	$23(a0)
		clr.b	$24(a0)

locret_891EC:
		rts
; ---------------------------------------------------------------------------

loc_891EE:
		jmp	Animate_RawGetFaster.w
; ---------------------------------------------------------------------------

loc_891F2:
		move.b	#6,5(a0)
		move.w	#4,$2E(a0)
		move.l	#loc_89212,$34(a0)
		lea	ChildObjDat_89352(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_8920E:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_89212:
		move.b	#8,5(a0)
		moveq	#$68,d0
		bchg	#1,4(a0)
		bne.s	loc_89224
		neg.w	d0

loc_89224:
		add.w	d0,$14(a0)
		move.w	#$20,$2E(a0)
		move.l	#loc_8924E,$34(a0)
		moveq	#$79,d0
		jsr	Play_Sound_2.w
		tst.b	4(a0)
		bpl.w	locret_891EC
		lea	ChildObjDat_8935A(pc),a2
		jmp	CreateChild3_NormalRepeated.w
; ---------------------------------------------------------------------------

loc_8924E:
		move.b	#2,5(a0)
		rts
; ---------------------------------------------------------------------------

loc_89256:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_89268(pc,d0.w),d1
		jsr	off_89268(pc,d1.w)
		jmp	Child_DrawTouch_Sprite.w
; ---------------------------------------------------------------------------
off_89268:	dc.w loc_8926C-off_89268

		dc.w loc_89298-off_89268
; ---------------------------------------------------------------------------

loc_8926C:
		lea	word_89346(pc),a1
		jsr	SetUp_ObjAttributes3.w
		bset	#5,$2B(a0)
		move.l	#Go_Delete_Sprite,$34(a0)
		movea.w	$46(a0),a1
		moveq	#$34,d0
		btst	#1,4(a1)
		bne.s	loc_89292
		neg.w	d0

loc_89292:
		add.w	d0,$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_89298:
		lea	byte_89367(pc),a1
		jmp	Animate_RawNoSST.w
; ---------------------------------------------------------------------------

loc_892A0:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_892B2(pc,d0.w),d1
		jsr	off_892B2(pc,d1.w)
		jmp	Sprite_CheckDeleteTouchXY.w
; ---------------------------------------------------------------------------
off_892B2:	dc.w loc_892B8-off_892B2

		dc.w loc_892EE-off_892B2
		dc.w loc_89334-off_892B2
; ---------------------------------------------------------------------------

loc_892B8:
		lea	word_8934C(pc),a1
		jsr	SetUp_ObjAttributes3.w
		bset	#5,$2B(a0)
		movea.w	$46(a0),a1
		move.w	#$600,d0
		btst	#1,4(a1)
		bne.s	loc_892D8
		neg.w	d0

loc_892D8:
		move.w	d0,$1A(a0)
		move.w	#$600,d0
		tst.b	$2C(a0)
		bne.s	loc_892E8
		neg.w	d0

loc_892E8:
		move.w	d0,$18(a0)
		rts
; ---------------------------------------------------------------------------

loc_892EE:
		lea	byte_89372(pc),a1
		jsr	Animate_RawNoSST.w
		moveq	#$40,d0
		move.w	$18(a0),d1
		bmi.s	loc_89300
		neg.w	d0

loc_89300:
		add.w	d0,d1
		cmpi.w	#-$100,d1
		blt.s	loc_8930E
		cmpi.w	#$100,d1
		ble.s	loc_89328

loc_8930E:
		move.w	d1,$18(a0)
		moveq	#$40,d0
		move.w	$1A(a0),d1
		bmi.s	loc_8931C
		neg.w	d0

loc_8931C:
		add.w	d0,d1
		move.w	d1,$1A(a0)
		jmp	MoveSprite2.w
; ---------------------------------------------------------------------------

loc_89328:
		move.b	#4,5(a0)
		jmp	MoveSprite2.w
; ---------------------------------------------------------------------------

loc_89334:
		jmp	MoveSprite2.w
; ---------------------------------------------------------------------------
ObjDat3_8933A:	dc.l Map_CNZBlastoid
		dc.w $A524
		dc.w prio(5)
		dc.b $C
		dc.b $C
		dc.b 0
		dc.b $B
word_89346:	dc.w prio(4)
		dc.b $C
		dc.b $40
		dc.b 2
		dc.b $AB
word_8934C:	dc.w prio(5)
		dc.b 8
		dc.b 8
		dc.b 6
		dc.b $98
ChildObjDat_89352:dc.w 0
		dc.l loc_89256
		dc.w 0
ChildObjDat_8935A:dc.w 1
		dc.l loc_892A0
		dc.w 0
byte_89362:	dc.b	9, $10
		dc.b	0,   1
		dc.b  $FC
byte_89367:	dc.b	0,   2
		dc.b	8,   3
		dc.b	8,   4
		dc.b	8,   5
		dc.b	8,   2
		dc.b  $F4
byte_89372:	dc.b	3,   6
		dc.b	7, $FC
; ---------------------------------------------------------------------------

Obj_Batbot:

		jsr	Obj_WaitOffscreen.w
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_8938E(pc,d0.w),d1
		jsr	off_8938E(pc,d1.w)
		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------
off_8938E:	dc.w loc_89394-off_8938E

		dc.w loc_893A4-off_8938E
		dc.w loc_893CC-off_8938E
; ---------------------------------------------------------------------------

loc_89394:
		lea	ObjDat3_89454(pc),a1
		jsr	SetUp_ObjAttributes.w
		lea	ChildObjDat_8946C(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_893A4:
		jsr	Find_SonicTails.w
		cmpi.w	#$40,d2
		blo.s	loc_893B0
		rts
; ---------------------------------------------------------------------------

loc_893B0:
		move.b	#4,5(a0)
		bset	#3,$38(a0)
		move.w	#$200,d0
		tst.w	d0
		bne.s	loc_893C6
		neg.w	d0

loc_893C6:
		move.w	d0,$18(a0)
		rts
; ---------------------------------------------------------------------------

loc_893CC:
		lea	byte_8947A(pc),a1
		jsr	Animate_RawNoSST.w
		lea	(Player_1).w,a1
		move.w	#$200,d0
		moveq	#8,d1
		jsr	Chase_Object(pc)
		jmp	MoveSprite2.w
; ---------------------------------------------------------------------------

loc_893E8:
		jsr	Refresh_ChildPosition.w
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_893FE(pc,d0.w),d1
		jsr	off_893FE(pc,d1.w)
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------
off_893FE:	dc.w loc_89404-off_893FE

		dc.w loc_8940C-off_893FE
		dc.w loc_89426-off_893FE
; ---------------------------------------------------------------------------

loc_89404:
		lea	word_89460(pc),a1
		jmp	SetUp_ObjAttributes3.w
; ---------------------------------------------------------------------------

loc_8940C:

		movea.w	$46(a0),a1
		btst	#3,$38(a1)
		bne.s	loc_8941A
		rts
; ---------------------------------------------------------------------------

loc_8941A:
		move.b	#4,5(a0)
		addq.b	#1,$22(a0)
		rts
; ---------------------------------------------------------------------------

loc_89426:
		lea	byte_89480(pc),a1
		jmp	Animate_RawNoSSTMultiDelay.w
; ---------------------------------------------------------------------------

loc_8942E:
		jsr	Refresh_ChildPosition.w
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_89444(pc,d0.w),d1
		jsr	off_89444(pc,d1.w)
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------
off_89444:	dc.w loc_8944A-off_89444

		dc.w loc_8940C-off_89444
		dc.w locret_89452-off_89444
; ---------------------------------------------------------------------------

loc_8944A:
		lea	word_89466(pc),a1
		jmp	SetUp_ObjAttributes3.w
; ---------------------------------------------------------------------------

locret_89452:
		rts
; ---------------------------------------------------------------------------
ObjDat3_89454:	dc.l Map_Batbot
		dc.w $A552
		dc.w prio(5)
		dc.b $20
		dc.b 8
		dc.b 2
		dc.b $D
word_89460:	dc.w prio(4)
		dc.b 8
		dc.b 8
		dc.b 3
		dc.b 0
word_89466:	dc.w prio(4)
		dc.b 4
		dc.b 4
		dc.b 5
		dc.b 0
ChildObjDat_8946C:dc.w 1
		dc.l loc_893E8
		dc.w $10
		dc.l loc_8942E
		dc.w 3
byte_8947A:	dc.b	2,   0
		dc.b	1,   2
		dc.b	1, $FC
byte_89480:	dc.b	3, $1D
		dc.b	4,   2
		dc.b	3,   1
		dc.b	4,   2
		dc.b	3,  $E
		dc.b	4,   2
		dc.b  $FC,   0
; ---------------------------------------------------------------------------

Obj_Blaster:

		jsr	Obj_WaitOffscreen.w

loc_89494:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_894A6(pc,d0.w),d1
		jsr	off_894A6(pc,d1.w)
		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------
off_894A6:	dc.w loc_894B6-off_894A6

		dc.w loc_894F2-off_894A6
		dc.w loc_89552-off_894A6
		dc.w loc_8957A-off_894A6
		dc.w loc_895A4-off_894A6
		dc.w loc_895C6-off_894A6
		dc.w loc_895EC-off_894A6
		dc.w loc_895FA-off_894A6
; ---------------------------------------------------------------------------

loc_894B6:
		lea	ObjDat3_896FC(pc),a1
		jsr	SetUp_ObjAttributes.w
		bclr	#1,4(a0)
		beq.s	loc_894CA
		st	$3C(a0)

loc_894CA:
		move.b	#$E,$1E(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		add.w	d0,d0
		move.w	d0,$2E(a0)
		add.w	d0,d0
		move.w	d0,$3A(a0)
		move.l	#loc_8953C,$34(a0)
		move.w	#-$80,d4
		jmp	Set_VelocityXTrackSonic.w
; ---------------------------------------------------------------------------

loc_894F2:
		bsr.w	sub_896D6
		jsr	Find_SonicTails.w
		tst.w	d1
		bne.s	loc_89512
		cmpi.w	#$80,d2
		bhs.s	loc_89512
		btst	#0,4(a0)
		beq.s	loc_8950E
		subq.w	#2,d0

loc_8950E:
		tst.w	d0
		beq.s	loc_89528

loc_89512:

		lea	byte_8975E(pc),a1
		jsr	Animate_RawNoSSTMultiDelay.w
		jsr	MoveSprite2.w
		jsr	ObjHitFloor2_DoRoutine.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_89528:
		move.b	#6,5(a0)
		move.b	#0,$22(a0)
		move.b	#$10,$39(a0)
		rts
; ---------------------------------------------------------------------------

loc_8953C:

		move.b	#4,5(a0)
		move.w	#$20,$2E(a0)
		move.l	#loc_8955A,$34(a0)

locret_89550:

		rts
; ---------------------------------------------------------------------------

loc_89552:
		bsr.w	sub_896D6
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_8955A:
		neg.w	$18(a0)
		bchg	#0,4(a0)
		move.w	$3A(a0),$2E(a0)

loc_8956A:
		move.b	#2,5(a0)
		move.l	#loc_8953C,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_8957A:
		bsr.w	sub_896D6
		subq.b	#1,$39(a0)
		bpl.w	locret_89550
		move.b	#8,5(a0)
		move.l	#loc_8956A,$34(a0)
		lea	ChildObjDat_89726(pc),a2
		jsr	CreateChild1_Normal.w
		lea	ChildObjDat_8972E(pc),a2
		jmp	CreateChild5_ComplexAdjusted(pc)
; ---------------------------------------------------------------------------

loc_895A4:
		bsr.w	sub_896D6
		lea	byte_89768(pc),a1
		jsr	Animate_RawNoSSTMultiDelay.w
		tst.w	d2
		beq.s	locret_895C4
		cmpi.b	#6,$23(a0)
		bne.s	locret_895C4
		lea	ChildObjDat_89746(pc),a2
		jsr	CreateChild5_ComplexAdjusted(pc)

locret_895C4:

		rts
; ---------------------------------------------------------------------------

loc_895C6:
		addi.w	#-$20,$1A(a0)
		jsr	MoveSprite2.w
		jsr	ObjCheckCeilingDist.w
		tst.w	d1
		bpl.s	locret_895EA
		add.w	d1,$14(a0)
		move.b	#$C,5(a0)
		clr.w	$1A(a0)

locret_895EA:
		rts
; ---------------------------------------------------------------------------

loc_895EC:
		tst.b	(__u_F7C1).w
		bne.s	locret_895F8
		move.b	#$E,5(a0)

locret_895F8:
		rts
; ---------------------------------------------------------------------------

loc_895FA:
		addi.w	#$20,$1A(a0)
		jsr	MoveSprite2.w
		jsr	ObjCheckFloorDist.w
		tst.w	d1
		bpl.s	locret_89624
		add.w	d1,$14(a0)
		move.b	$3D(a0),5(a0)
		move.w	$3E(a0),$18(a0)
		clr.w	$1A(a0)

locret_89624:
		rts
; ---------------------------------------------------------------------------

loc_89626:
		lea	word_89708(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_8963E,(a0)
		move.l	#Go_Delete_Sprite,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_8963E:
		jsr	Refresh_ChildPositionAdjusted.w
		lea	byte_89763(pc),a1
		jsr	Animate_RawNoSST.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_89650:

		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_89662(pc,d0.w),d1
		jsr	off_89662(pc,d1.w)
		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------
off_89662:	dc.w loc_89666-off_89662

		dc.w loc_8968A-off_89662
; ---------------------------------------------------------------------------

loc_89666:
		lea	ObjDat3_896FC(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_8969E,$34(a0)
		move.b	#$E,$1E(a0)
		moveq	#8,d0
		jsr	Set_IndexedVelocity.w
		jmp	Change_FlipXWithVelocity.w
; ---------------------------------------------------------------------------

loc_8968A:
		jsr	MoveSprite_LightGravity.w
		tst.w	$1A(a0)
		bmi.w	locret_89550
		jmp	ObjHitFloor_DoRoutine.w
; ---------------------------------------------------------------------------

loc_8969E:
		move.l	#loc_89494,(a0)
		move.b	#2,5(a0)
		move.w	#$3F,$2E(a0)
		move.w	#$7F,$3A(a0)
		move.l	#loc_8953C,$34(a0)
		move.w	#-$80,d0
		btst	#0,4(a0)
		beq.s	loc_896CC
		neg.w	d0

loc_896CC:
		move.w	d0,$18(a0)
		clr.w	$1A(a0)
		rts

; =============== S U B R O U T I N E =======================================


sub_896D6:

		tst.b	$3C(a0)
		beq.s	locret_896FA
		tst.b	(__u_F7C1).w
		beq.s	locret_896FA
		move.b	5(a0),$3D(a0)
		move.b	#$A,5(a0)
		move.w	$18(a0),$3E(a0)
		clr.w	$18(a0)
		addq.w	#4,sp

locret_896FA:
		rts
; End of function sub_896D6

; ---------------------------------------------------------------------------
ObjDat3_896FC:	dc.l Map_Blaster

		dc.w $A506
		dc.w prio(5)
		dc.b $18
		dc.b $10
		dc.b 0
		dc.b $A
word_89708:	dc.w prio(4)
		dc.b 8
		dc.b 8
		dc.b 4
		dc.b 0
ObjDat3_8970E:	dc.l Map_Blaster
		dc.w $A506
		dc.w prio(5)
		dc.b 4
		dc.b 4
		dc.b 5
		dc.b $98
ObjDat3_8971A:	dc.l Map_Blaster
		dc.w $A506
		dc.w prio(4)
		dc.b 4
		dc.b 4
		dc.b 7
		dc.b 0
ChildObjDat_89726:dc.w 0
		dc.l loc_89626
		dc.w $E5EA
ChildObjDat_8972E:dc.w 0
		dc.l loc_86D4A
		dc.l ObjDat3_8970E
		dc.l byte_89771
		dc.l MoveFall_AnimateRaw
		dc.b $E0
		dc.b $E0
		dc.w $FE00
		dc.w $FC00
ChildObjDat_89746:dc.w 0
		dc.l loc_86D4A
		dc.l ObjDat3_8971A
		dc.l byte_89775
		dc.l MoveFall_AnimateRaw
		dc.b $F4
		dc.b $FC
		dc.w $100
		dc.w $FE00
byte_8975E:	dc.b	0, $17
		dc.b	1,   2
		dc.b  $FC
byte_89763:	dc.b	0,   4
		dc.b	4,   5
		dc.b  $F4
byte_89768:	dc.b	0,   1
		dc.b	0,   1
		dc.b	2,   5
		dc.b	0, $1F
		dc.b  $F4
byte_89771:	dc.b	1,   5
		dc.b	6, $FC
byte_89775:	dc.b	2,   7
		dc.b	8,   9
		dc.b   $A, $FC
		dc.b	0
Map_Blaster:	include "General/Sprites/Blaster/Map - Blaster.asm"

; ---------------------------------------------------------------------------

Obj_TechnoSqueek:

		jsr	Obj_WaitOffscreen.w

loc_89826:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_89838(pc,d0.w),d1
		jsr	off_89838(pc,d1.w)
		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------
off_89838:	dc.w loc_89842-off_89838

		dc.w loc_898DC-off_89838
		dc.w loc_8992E-off_89838
		dc.w loc_8995C-off_89838
		dc.w loc_899A0-off_89838
; ---------------------------------------------------------------------------

loc_89842:
		move.w	#$800,$2E(a0)
		move.l	#loc_89926,$34(a0)
		cmpi.b	#4,$2C(a0)
		beq.s	loc_8989E
		lea	ObjDat_89B06(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#byte_89B2C,$30(a0)
		bset	#0,4(a0)
		cmpi.b	#2,$2C(a0)
		bne.s	loc_8987C
		bset	#1,4(a0)

loc_8987C:
		lea	ChildObjDat_89B24(pc),a2
		jsr	CreateChild1_Normal.w
		move.w	#$400,d0
		move.w	d0,$3A(a0)
		move.w	d0,$18(a0)
		move.w	#$20,$3C(a0)
		bclr	#3,$38(a0)
		rts
; ---------------------------------------------------------------------------

loc_8989E:
		lea	ObjDat3_89B12(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.b	#6,5(a0)
		move.l	#byte_89B52,$30(a0)
		bset	#1,4(a0)
		lea	ChildObjDat_89B24(pc),a2
		jsr	CreateChild1_Normal.w
		move.w	#$400,d0
		move.w	d0,$3E(a0)
		move.w	d0,$1A(a0)
		move.w	#$20,$40(a0)
		bclr	#0,$38(a0)
		rts
; ---------------------------------------------------------------------------

loc_898DC:
		jsr	Animate_RawMultiDelayFlipX.w
		tst.w	d2
		beq.s	loc_898F2
		cmpi.b	#6,$23(a0)
		bne.s	loc_898F2
		bset	#1,$38(a0)

loc_898F2:

		jsr	Swing_LeftAndRight.w
		tst.w	$18(a0)
		beq.s	loc_89906
		jsr	MoveSprite2.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_89906:
		move.b	#4,5(a0)
		move.l	#byte_89B42,$30(a0)
		move.l	#loc_89932,$34(a0)

loc_8991C:

		clr.b	$23(a0)
		clr.b	$24(a0)
		rts
; ---------------------------------------------------------------------------

loc_89926:

		bclr	#5,$38(a0)

locret_8992C:

		rts
; ---------------------------------------------------------------------------

loc_8992E:
		jmp	Animate_RawAdjustFlipX(pc)
; ---------------------------------------------------------------------------

loc_89932:
		move.b	#2,5(a0)
		move.l	#byte_89B37,$30(a0)

loc_89940:
		bclr	#1,$38(a0)
		bset	#5,$38(a0)
		move.w	#$10,$2E(a0)
		move.l	#loc_89926,$34(a0)
		bra.s	loc_8991C
; ---------------------------------------------------------------------------

loc_8995C:
		jsr	Animate_RawMultiDelayFlipY(pc)
		tst.w	d2
		beq.s	loc_89972
		cmpi.b	#6,$23(a0)
		bne.s	loc_89972
		bset	#1,$38(a0)

loc_89972:

		jsr	Swing_UpAndDown.w
		tst.w	$1A(a0)
		beq.s	loc_89986
		jsr	MoveSprite2.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_89986:
		move.b	#8,5(a0)
		move.l	#byte_89B68,$30(a0)
		move.l	#loc_899A4,$34(a0)
		bra.w	loc_8991C
; ---------------------------------------------------------------------------

loc_899A0:
		jmp	Animate_RawAdjustFlipY(pc)
; ---------------------------------------------------------------------------

loc_899A4:
		move.b	#6,5(a0)
		move.l	#byte_89B5D,$30(a0)
		bra.s	loc_89940
; ---------------------------------------------------------------------------

loc_899B4:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_899C6(pc,d0.w),d1
		jsr	off_899C6(pc,d1.w)
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------
off_899C6:	dc.w loc_899CC-off_899C6

		dc.w loc_899E8-off_899C6
		dc.w loc_89A20-off_899C6
; ---------------------------------------------------------------------------

loc_899CC:
		lea	word_89B1E(pc),a1
		jsr	SetUp_ObjAttributes3.w
		movea.w	$46(a0),a1
		cmpi.b	#4,$2C(a1)
		bne.s	locret_899E6
		move.b	#4,5(a0)

locret_899E6:
		rts
; ---------------------------------------------------------------------------

loc_899E8:
		lea	byte_89B4D(pc),a1
		jsr	Animate_RawNoSST.w
		movea.w	$46(a0),a1
		moveq	#0,d0
		move.b	$22(a1),d0
		btst	#1,$38(a1)
		beq.s	loc_89A04
		moveq	#2,d0

loc_89A04:
		add.w	d0,d0
		move.w	word_89A1A(pc,d0.w),$42(a0)
		btst	#5,$38(a1)
		bne.w	locret_8992C
		jmp	Refresh_ChildPositionAdjusted.w
; ---------------------------------------------------------------------------
word_89A1A:	dc.w $1404
		dc.w $C04
		dc.w 4
; ---------------------------------------------------------------------------

loc_89A20:
		lea	byte_89B73(pc),a1
		jsr	Animate_RawNoSST.w
		movea.w	$46(a0),a1
		moveq	#0,d0
		move.b	$22(a1),d0
		subq.w	#5,d0
		btst	#1,$38(a1)
		beq.s	loc_89A3E
		moveq	#2,d0

loc_89A3E:
		add.w	d0,d0
		move.w	word_89A54(pc,d0.w),$42(a0)
		btst	#5,$38(a1)
		bne.w	locret_8992C
		jmp	Refresh_ChildPositionAdjusted.w
; ---------------------------------------------------------------------------
word_89A54:	dc.w $FC14
		dc.w $FC0C
		dc.w $FC00
; ---------------------------------------------------------------------------

loc_89A5A:

		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_89A6C(pc,d0.w),d1
		jsr	off_89A6C(pc,d1.w)
		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------
off_89A6C:	dc.w loc_89A70-off_89A6C

		dc.w loc_89AA2-off_89A6C
; ---------------------------------------------------------------------------

loc_89A70:
		lea	ObjDat_89B06(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.b	#7,$1E(a0)
		move.l	#loc_89AB6,$34(a0)
		move.w	#$90,d0
		jsr	Set_IndexedVelocity.w
		jsr	Change_FlipXWithVelocity.w
		clr.b	$2C(a0)
		lea	ChildObjDat_89B24(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_89AA2:
		jsr	MoveSprite_LightGravity.w
		tst.w	$1A(a0)
		bmi.w	locret_8992C
		jmp	ObjHitFloor_DoRoutine.w
; ---------------------------------------------------------------------------

loc_89AB6:
		move.l	#loc_89826,(a0)
		move.b	#2,5(a0)
		move.w	#$800,$2E(a0)
		move.l	#loc_89926,$34(a0)
		move.l	#byte_89B2C,$30(a0)
		move.w	#$400,d0
		move.w	d0,$3A(a0)
		bclr	#3,$38(a0)
		btst	#0,4(a0)
		bne.s	loc_89AF6
		neg.w	d0
		bset	#3,$38(a0)

loc_89AF6:
		move.w	d0,$18(a0)
		move.w	#$20,$3C(a0)
		clr.w	$1A(a0)
		rts
; ---------------------------------------------------------------------------
ObjDat_89B06:	dc.l Map_TechnoSqueek

		dc.w $A52E
		dc.w prio(5)
		dc.b $C
		dc.b 8
		dc.b 0
		dc.b $B
ObjDat3_89B12:	dc.l Map_TechnoSqueek
		dc.w $A52E
		dc.w prio(5)
		dc.b 8
		dc.b $C
		dc.b 5
		dc.b $B
word_89B1E:	dc.w prio(5)
		dc.b 8
		dc.b 4
		dc.b 2
		dc.b 0
ChildObjDat_89B24:dc.w 0

		dc.l loc_899B4
		dc.w $1404
byte_89B2C:	dc.b	0,   0

		dc.b	0, $17
		dc.b	1,   1
		dc.b  $41,   1
		dc.b	0, $1F
		dc.b  $F4
byte_89B37:	dc.b	0,   0
		dc.b	0, $37
		dc.b	1,   1
		dc.b  $41,   1
		dc.b	0, $1F
		dc.b  $F4
byte_89B42:	dc.b	3,   0
		dc.b	0,   1
		dc.b  $41,   0
		dc.b	0,   1
		dc.b  $41,   0
		dc.b  $F4
byte_89B4D:	dc.b	3,   2
		dc.b	3,   4
		dc.b  $FC
byte_89B52:	dc.b	5,   0
		dc.b	5, $17
		dc.b	6,   1
		dc.b  $46,   1
		dc.b	0, $1F
		dc.b  $F4
byte_89B5D:	dc.b	5,   0
		dc.b	5, $37
		dc.b	6,   1
		dc.b  $46,   1
		dc.b	5, $1F
		dc.b  $F4
byte_89B68:	dc.b	3,   5
		dc.b	5,   6
		dc.b  $46,   5
		dc.b	5,   6
		dc.b  $46,   5
		dc.b  $F4
byte_89B73:	dc.b	3,   7
		dc.b	8,   9
		dc.b  $FC
Map_TechnoSqueek:include "General/Sprites/Technosqueek/Map - Technosqueek.asm"

; ---------------------------------------------------------------------------

Obj_FBZEggPrison:

		lea	ObjDat3_89E78(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_89C14,(a0)
		lea	ChildObjDat_89EA8(pc),a2
		jsr	CreateChild1_Normal.w
		move.w	respawn_addr(a0),d0
		beq.s	locret_89C12
		movea.w	d0,a2
		btst	#0,(a2)
		beq.s	locret_89C12
		move.l	#loc_89C54,(a0)
		move.b	#1,$22(a0)
		bset	#5,$38(a0)

locret_89C12:

		rts
; ---------------------------------------------------------------------------

loc_89C14:

		btst	#1,$38(a0)
		beq.s	loc_89C54
		move.l	#loc_89C54,(a0)
		move.b	#1,$22(a0)
		move.w	respawn_addr(a0),d0
		beq.s	loc_89C34
		movea.w	d0,a2
		bset	#0,(a2)

loc_89C34:
		bsr.w	sub_89DAC
		lea	Child6_CreateBossExplosion.w,a2
		jsr	CreateChild6_Simple.w
		bne.s	loc_89C4C
		move.b	#8,$2C(a1)

loc_89C4C:
		lea	ChildObjDat_89EB0(pc),a2
		jsr	CreateChild1_Normal.w

loc_89C54:

		bsr.w	sub_89D9C
		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------

loc_89C5C:
		lea	(word_86B3E).l,a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_8672A,(a0)
		movea.w	$46(a0),a1
		btst	#5,$38(a1)
		beq.s	locret_89C84
		move.l	#loc_86754,(a0)
		move.b	#$C,$22(a0)

locret_89C84:
		rts
; ---------------------------------------------------------------------------

Obj_FBZSpringPlunger:

		lea	ObjDat3_89E84(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.b	#5,$22(a0)
		jsr	(sub_86A3E).l
		move.b	$2A(a0),d2
		andi.b	#$18,d2
		beq.s	loc_89CDE
		move.b	#6,$22(a0)
		btst	#3,d2
		beq.s	loc_89CC4
		move.b	#$C,$22(a0)
		lea	(Player_1).w,a1
		move.w	#-$A00,d0
		jsr	(sub_8635E).l

loc_89CC4:
		btst	#4,d2
		beq.s	loc_89CDE
		move.b	#$C,$22(a0)
		lea	(Player_2).w,a1
		move.w	#-$A00,d0
		jsr	(sub_8635E).l

loc_89CDE:

		jmp	Sprite_CheckDelete.w
; ---------------------------------------------------------------------------

loc_89D44:

		lea	ObjDat3_89E9C(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#Obj_Bouncing_Ring,(a0)
		move.b	#-1,(Ring_spill_anim_counter).w
		move.b	#8,$1E(a0)
		move.b	#8,$1F(a0)
		move.b	#-$7C,4(a0)
		moveq	#4,d0
		jsr	Set_IndexedVelocity.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_89D78:

		lea	word_89E90(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#Obj_FlickerMove,(a0)
		jsr	(sub_86A64).l
		moveq	#4,d0
		jsr	Set_IndexedVelocity.w
		jmp	Draw_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_89D9C:
		moveq	#$2B,d1
		moveq	#$18,d2
		moveq	#$18,d3
		move.w	$10(a0),d4
		jmp	SolidObjectFull.w
; End of function sub_89D9C


; =============== S U B R O U T I N E =======================================


sub_89DAC:
		moveq	#0,d0
		move.b	$2C(a0),d0
		add.w	d0,d0
		move.w	off_89DBC(pc,d0.w),d0
		jmp	off_89DBC(pc,d0.w)
; End of function sub_89DAC

; ---------------------------------------------------------------------------
off_89DBC:	dc.w loc_89DC4-off_89DBC, loc_89DCC-off_89DBC

		dc.w loc_89DDE-off_89DBC, loc_8F514-off_89DBC
; ---------------------------------------------------------------------------

loc_89DC4:
		rts		; NAT: No animals pls
; ---------------------------------------------------------------------------

loc_89DCC:
		move.w	#-$47,d0
		jsr	Play_Sound_2.w
		lea	ChildObjDat_89EF0(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_89DDE:
		lea	ChildObjDat_89F16(pc),a2
		jsr	CreateChild1_Normal.w
		lea	ChildObjDat_89F24(pc),a2
		jmp	CreateChild1_Normal.w

; =============== S U B R O U T I N E =======================================


sub_89DEE:
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	d0,d1
		andi.w	#6,d0
		lea	word_89E6C(pc),a1
		move.w	(a1,d0.w),d2
		move.w	d2,$1A(a0)
		move.w	d2,$3E(a0)
		andi.w	#2,d0
		move.w	d0,d2
		move.w	byte_89E74(pc,d2.w),$A(a0)
		moveq	#0,d2
		move.b	(Current_zone).w,d2
		add.w	d2,d2
		lea	(byte_2C7BA).l,a1
		adda.w	d2,a1
		lsr.w	#1,d0
		move.b	(a1,d0.w),d0
		lsl.w	#3,d0
		lea	(word_2C7EA).l,a2
		move.l	4(a2,d0.w),$C(a0)
		lsl.w	#2,d1
		move.w	d1,$2E(a0)
		movea.w	$46(a0),a1
		move.w	$10(a0),d0
		move.w	#$200,d1
		cmp.w	$10(a1),d0
		bhs.s	loc_89E54
		neg.w	d1

loc_89E54:
		move.w	d1,$18(a0)
		bclr	#0,4(a0)
		tst.w	$18(a0)
		bpl.s	locret_89E6A
		bset	#0,4(a0)

locret_89E6A:
		rts
; End of function sub_89DEE

; ---------------------------------------------------------------------------
word_89E6C:	dc.w  $FC80, $FD00, $FD80, $FE00
byte_89E74:	dc.b $85
		dc.b $80
		dc.b $85
		dc.b $92
ObjDat3_89E78:	dc.l Map_FBZEggCapsule

		dc.w 0
		dc.w prio(4)
		dc.b $20
		dc.b $28
		dc.b 0
		dc.b 0
ObjDat3_89E84:	dc.l Map_FBZEggCapsule

		dc.w 0
		dc.w prio(3)
		dc.b $10
		dc.b 8
		dc.b 5
		dc.b 0
word_89E90:	dc.w prio(2)
		dc.b 8
		dc.b 8
		dc.b 2
		dc.b 0
word_89E96:	dc.w prio(5)
		dc.b $20
		dc.b $28
		dc.b 0
		dc.b 0
ObjDat3_89E9C:	dc.l Map_Ring
		dc.w $A6BC
		dc.w prio(3)
		dc.b 8
		dc.b 8
		dc.b 0
		dc.b $47
ChildObjDat_89EA8:dc.w 0
		dc.l loc_89C5C
		dc.w $DC
ChildObjDat_89EB0:dc.w 4
		dc.l loc_89D78
		dc.w $F8
		dc.l loc_89D78
		dc.w $F0F8
		dc.l loc_89D78
		dc.w $10F8
		dc.l loc_89D78
		dc.w $E8F8
		dc.l loc_89D78
		dc.w $18F8
;ChildObjDat_89ED0:dc.w 4

;		dc.l loc_89CE2
;		dc.w $FC
;		dc.l loc_89CE2
;		dc.w $10FC
;		dc.l loc_89CE2
;		dc.w $F0FC
;		dc.l loc_89CE2
;		dc.w $1CFC
;		dc.l loc_89CE2
;		dc.w $E4FC
ChildObjDat_89EF0:dc.w 5
		dc.l loc_89D44
		dc.w $F8FC
		dc.l loc_89D44
		dc.w $8FC
		dc.l loc_89D44
		dc.w $10FC
		dc.l loc_89D44
		dc.w $F0FC
		dc.l loc_89D44
		dc.w $18FC
		dc.l loc_89D44
		dc.w $E8FC
ChildObjDat_89F16:dc.w 1
		dc.l loc_89650
		dc.w $E8FC
		dc.l loc_89650
		dc.w $18FC
ChildObjDat_89F24:dc.w 1
		dc.l loc_89A5A
		dc.w $F8FC
		dc.l loc_89A5A
		dc.w $8FC
; ---------------------------------------------------------------------------

Obj_ICZPathFollowPlatform:
		jsr	Obj_WaitOffscreen.w

loc_89F38:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_89F6A(pc,d0.w),d1
		move.w	$10(a0),-(sp)
		jsr	off_89F6A(pc,d1.w)
		moveq	#$2B,d1
		moveq	#$14,d2
		moveq	#$14,d3
		move.w	(sp)+,d4
		btst	#7,$2A(a0)
		bne.s	loc_89F64
		jsr	SolidObjectFull.w
		bsr.w	sub_8A3C4

loc_89F64:
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------
off_89F6A:	dc.w loc_89F7E-off_89F6A

		dc.w loc_89FB6-off_89F6A
		dc.w loc_89FD6-off_89F6A
		dc.w loc_89FF2-off_89F6A
		dc.w loc_8A036-off_89F6A
		dc.w loc_8A11C-off_89F6A
		dc.w locret_8A176-off_89F6A
		dc.w loc_8A178-off_89F6A
		dc.w loc_8A192-off_89F6A
		dc.w loc_8A1AE-off_89F6A
; ---------------------------------------------------------------------------

loc_89F7E:
		lea	ObjDat3_8A3E2(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.w	a0,(__u_FAA4).w
		move.b	#$20,$1F(a0)
		move.b	#$12,$1E(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		lsr.w	#1,d0
		move.b	byte_89FB2(pc,d0.w),5(a0)
		tst.w	d0
		bne.w	locret_8A034
		lea	ChildObjDat_8A436(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------
byte_89FB2:	dc.b 2
		dc.b 6
		dc.b $C
		dc.b $E
; ---------------------------------------------------------------------------

loc_89FB6:
		btst	#4,$2A(a0)		; NAT: check for tails
		bne.s	loc_89FC0
		btst	#3,$2A(a0)
		bne.s	loc_89FC0
		rts
; ---------------------------------------------------------------------------

loc_89FC0:
		move.b	#4,5(a0)
		move.w	#$F,$2E(a0)
		move.l	#loc_89FEA,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_89FD6:
		moveq	#1,d0
		btst	#0,(V_int_run_count+3).w
		beq.s	loc_89FE2
		neg.w	d0

loc_89FE2:
		add.w	d0,$10(a0)
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_89FEA:
		move.b	#$A,5(a0)
		rts
; ---------------------------------------------------------------------------

loc_89FF2:
		lea	(Player_2).w,a1
		btst	#6,$2A(a0)
		beq.s	.sonic
		move.b	(Ctrl_2).w,d0
		andi.b	#$C,d0
		bne.s	loc_8A00A

.sonic		lea	(Player_1).w,a1
		btst	#5,$2A(a0)
		beq.s	loc_8A004
		move.b	(Ctrl_1).w,d0
		andi.b	#$C,d0
		bne.s	loc_8A00A

loc_8A004:
		clr.b	$39(a0)
		rts
; ---------------------------------------------------------------------------

loc_8A00A:
		addq.b	#1,$39(a0)
		cmpi.b	#$10,$39(a0)
		blo.w	locret_8A034
		jsr	Find_SonicTails_2.w	; NAT: Making this check a little better
		moveq	#$80,d1
		tst.b	d0
		bmi.s	locret_8A034
		bne.s	loc_8A030
		neg.w	d1

loc_8A030:
		move.w	d1,$18(a0)
		move.b	#8,5(a0)		; <- MOTHERFUCKER was above the jump!!!

locret_8A034:
		rts
; ---------------------------------------------------------------------------

loc_8A036:
		cmpi.w	#-$100,(Camera_min_Y_pos).w
		bne.s	loc_8A046
		move.w	(Screen_Y_wrap_value).w,d0
		and.w	d0,$14(a0)

loc_8A046:
		jsr	MoveSprite2.w
		jsr	ObjCheckFloorDist.w
		cmpi.w	#8,d1
		bge.s	loc_8A09E
		move.b	d3,$26(a0)
		add.w	d1,$14(a0)
		move.b	d3,d0
		bpl.s	loc_8A066
		neg.b	d0

loc_8A066:
		andi.b	#-8,d0
		beq.s	loc_8A07C
		move.w	$18(a0),d0
		add.w	d3,d3
		ext.w	d3
		asr.w	#1,d3
		add.w	d3,d0
		bsr.w	sub_8A35A

loc_8A07C:
		tst.w	$18(a0)
		bmi.s	loc_8A090
		moveq	#$1C,d3
		jsr	ObjCheckRightWallDist.w
		tst.w	d1
		bmi.s	loc_8A0AA
		rts
; ---------------------------------------------------------------------------

loc_8A090:
		moveq	#-$1C,d3
		jsr	ObjCheckLeftWallDist.w
		tst.w	d1
		bmi.s	loc_8A0F4
		rts
; ---------------------------------------------------------------------------

loc_8A09E:
		move.b	#$A,5(a0)
		bra.w	sub_8A386
; ---------------------------------------------------------------------------

loc_8A0AA:
		move.b	#$C,5(a0)
		clr.b	(Fast_V_scroll_flag).w
		clr.l	$18(a0)
		tst.b	$2C(a0)
		beq.w	locret_8A034
		lea	ChildObjDat_8A42A(pc),a2
		jsr	CreateChild6_Simple.w
		jsr	Create_New_Sprite3.w
		bne.s	loc_8A0EC
		move.l	#Obj_Spring,(a1)
		move.w	#$5D5A,$10(a1)
		move.w	#$27A,$14(a1)
		move.b	#0,$2C(a1)

loc_8A0EC:
		jsr	Displace_PlayerOffObject.w
		jmp	loc_85088.w
; ---------------------------------------------------------------------------

loc_8A0F4:
		neg.w	$18(a0)		; NAT: Negate speed instead
	;	move.b	#$C,5(a0)
		rts
; ---------------------------------------------------------------------------
		dc.w 0
		dc.w 8
		dc.w $10
		dc.w $18
		dc.w $20
		dc.w $28
		dc.w $30
		dc.w $38
		dc.w $FFC8
		dc.w $FFD0
		dc.w $FFD8
		dc.w $FFE0
		dc.w $FFE8
		dc.w $FFF0
		dc.w $FFF8
		dc.w 0
; ---------------------------------------------------------------------------

loc_8A11C:
		bsr.w	sub_8A36C
		jsr	MoveSprite2.w
		jsr	ObjCheckFloorDist.w
		tst.w	d1
		bmi.s	loc_8A15E
		tst.w	$18(a0)
		beq.s	locret_8A15C
		bmi.s	loc_8A148
		moveq	#$20,d3
		jsr	ObjCheckRightWallDist.w
		tst.w	d1
		bmi.s	loc_8A154
		bra.w	locret_8A15C
; ---------------------------------------------------------------------------

loc_8A148:
		moveq	#-$20,d3
		jsr	ObjCheckLeftWallDist.w
		tst.w	d1
		bpl.s	locret_8A15C

loc_8A154:
		add.w	d1,$10(a0)
		clr.w	$18(a0)

locret_8A15C:
		rts
; ---------------------------------------------------------------------------

loc_8A15E:
		move.b	#8,5(a0)
		move.w	$1A(a0),d0
		btst	#6,d3
		beq.s	loc_8A170
		neg.w	d0

loc_8A170:
		move.w	d0,$18(a0)
		rts
; ---------------------------------------------------------------------------

locret_8A176:
		rts
; ---------------------------------------------------------------------------

loc_8A178:
		move.b	$2A(a0),d0
		andi.b	#$18,d0
		beq.s	locret_8A176
; ---------------------------------------------------------------------------

loc_8A184:
		move.b	#$10,5(a0)
		move.w	$14(a0),$3A(a0)
		rts
; ---------------------------------------------------------------------------

loc_8A192:
		move.b	$2A(a0),d0
		andi.b	#$18,d0
		beq.s	loc_8A1A2
		addq.w	#1,$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_8A1A2:
		move.b	#$12,5(a0)
		clr.w	$1A(a0)
		rts
; ---------------------------------------------------------------------------

loc_8A1AE:
		addi.w	#-$20,$1A(a0)
		jsr	MoveSprite2.w
		move.w	$14(a0),d0
		cmp.w	$3A(a0),d0
		bls.s	loc_8A1C6
		rts
; ---------------------------------------------------------------------------

loc_8A1C6:
		move.b	#$E,5(a0)
		move.w	$3A(a0),$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_8A1D4:
		lea	ObjDat3_8A412(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#AnimateRaw_MoveChkDel,(a0)
		move.l	#byte_8A43E,$30(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	word_8A200(pc,d0.w),$42(a0)
		jsr	Refresh_ChildPosition.w
		moveq	#8,d0
		jmp	Set_IndexedVelocity.w
; ---------------------------------------------------------------------------
word_8A200:	dc.w $ECF7
		dc.w $14F4
		dc.w $1400
		dc.w $C0C
		dc.w $F809
		dc.w $FCFA
; ---------------------------------------------------------------------------

loc_8A20C:
		lea	ObjDat3_8A41E(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_8A258,(a0)
		move.l	#byte_8A444,$30(a0)
		move.l	#Go_Delete_Sprite,$34(a0)
		move.w	#$5F,$2E(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	word_8A246(pc,d0.w),$42(a0)
		jsr	Refresh_ChildPosition.w
		moveq	#0,d0
		jmp	Set_IndexedVelocity.w
; ---------------------------------------------------------------------------
word_8A246:	dc.w $ECD0
		dc.w $8CC
		dc.w $F4EC
		dc.w $10E0
		dc.w $AFC
		dc.w $EC0C
		dc.w $818
		dc.w $F028
		dc.w $C34
; ---------------------------------------------------------------------------

loc_8A258:
		jsr	Animate_Raw.w
		jsr	MoveSprite.w
		jsr	Obj_Wait.w
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

Obj_ICZBreakableWall:

		lea	ObjDat3_8A406(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_8A280,(a0)
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_8A280:
		moveq	#$2B,d1
		moveq	#$40,d2
		moveq	#$70,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		cmpi.b	#2,(Player_1+character_id).w
		bne.s	loc_8A2A0
		swap	d6
		andi.w	#1,d6
		bne.s	loc_8A2E2

loc_8A2A0:
		movea.w	(__u_FAA4).w,a1
		cmpi.l	#loc_89F38,(a1)
		bne.s	loc_8A2DC
		move.w	$10(a1),d0
		move.w	$14(a1),d1
		and.w	(Screen_Y_wrap_value).w,d1
		move.w	$10(a0),d2
		move.w	$14(a0),d3
		lea	word_8A2FC(pc),a2
		add.w	(a2)+,d2
		cmp.w	d2,d0
		blo.s	loc_8A2DC
		add.w	(a2)+,d2
		cmp.w	d2,d0
		bhs.s	loc_8A2DC
		add.w	(a2)+,d3
		cmp.w	d3,d1
		blo.s	loc_8A2DC
		add.w	(a2)+,d3
		cmp.w	d3,d1
		blo.s	loc_8A2E2

loc_8A2DC:

		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_8A2E2:

		lea	ChildObjDat_8A430(pc),a2
		jsr	CreateChild6_Simple.w
		jsr	Go_Delete_Sprite.w
		moveq	#$59,d0
		jsr	Play_Sound_2.w
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------
word_8A2FC:	dc.w  $FFD0,   $60, $FFC0,   $80
; ---------------------------------------------------------------------------

loc_8A304:
		lea	ObjDat3_8A3FA(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_8A318,(a0)
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_8A318:
		movea.w	$46(a0),a1
		btst	#3,$2A(a1)
		beq.s	loc_8A32A
		move.l	#MoveChkDel,(a0)

loc_8A32A:
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

Obj_BB_1:
		jsr	Obj_WaitOffscreen.w
		lea	ObjDat3_8A3EE(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_8A344,(a0)

loc_8A344:
		moveq	#$1B,d1
		moveq	#$10,d2
		moveq	#$11,d3
		move.w	$10(a0),d4
		jsr	SolidObjectTop.w
		jmp	Sprite_OnScreen_Test.w

; =============== S U B R O U T I N E =======================================


sub_8A35A:
		cmpi.w	#-$C00,d0
		blt.s	locret_8A36A
		cmpi.w	#$C00,d0
		bgt.s	locret_8A36A
		move.w	d0,$18(a0)

locret_8A36A:
		rts
; End of function sub_8A35A


; =============== S U B R O U T I N E =======================================


sub_8A36C:
		move.w	$1A(a0),d0
		addi.w	#$38,d0
		cmpi.w	#-$C00,d0
		blt.s	locret_8A384
		cmpi.w	#$C00,d0
		bgt.s	locret_8A384
		move.w	d0,$1A(a0)

locret_8A384:

		rts
; End of function sub_8A36C


; =============== S U B R O U T I N E =======================================


sub_8A386:
		move.b	$26(a0),d3
		lsr.b	#3,d3
		andi.w	#$E,d3
		move.w	$18(a0),d1
		bpl.s	loc_8A398
		neg.w	d1

loc_8A398:
		move.w	off_8A3A0(pc,d3.w),d0
		jmp	off_8A3A0(pc,d0.w)
; End of function sub_8A386

; ---------------------------------------------------------------------------
off_8A3A0:	dc.w loc_8A3B0-off_8A3A0

		dc.w loc_8A3B6-off_8A3A0
		dc.w loc_8A3BE-off_8A3A0
		dc.w loc_8A3B6-off_8A3A0
		dc.w loc_8A3B0-off_8A3A0
		dc.w loc_8A3B6-off_8A3A0
		dc.w loc_8A3BE-off_8A3A0
		dc.w loc_8A3B6-off_8A3A0
; ---------------------------------------------------------------------------

loc_8A3B0:
		clr.w	$1A(a0)
		rts
; ---------------------------------------------------------------------------

loc_8A3B6:
		lsr.w	#1,d1
		move.w	d1,$1A(a0)
		rts
; ---------------------------------------------------------------------------

loc_8A3BE:
		move.w	d1,$1A(a0)
		rts

; =============== S U B R O U T I N E =======================================


sub_8A3C4:
		clr.b	(Fast_V_scroll_flag).w
		tst.w	$18(a0)
		bne.s	loc_8A3D4
		tst.w	$1A(a0)
		beq.s	locret_8A3E0

loc_8A3D4:
		btst	#3,$2A(a0)
		beq.s	locret_8A3E0
		st	(Fast_V_scroll_flag).w

locret_8A3E0:

		rts
; End of function sub_8A3C4

; ---------------------------------------------------------------------------
ObjDat3_8A3E2:	dc.l Map_ICZPlatforms
		dc.w $43B6
		dc.w prio(5)
		dc.b $20
		dc.b $14
		dc.b 0
		dc.b 0
ObjDat3_8A3EE:	dc.l Map_ICZPlatforms
		dc.w $4377
		dc.w prio(5)
		dc.b $10
		dc.b $10
		dc.b $1E
		dc.b 0
ObjDat3_8A3FA:	dc.l Map_ICZWallAndColumn
		dc.w $4001
		dc.w prio(5)
		dc.b $10
		dc.b $C
		dc.b 8
		dc.b 0
ObjDat3_8A406:	dc.l Map_ICZWallAndColumn
		dc.w $4001
		dc.w prio(5)
		dc.b $20
		dc.b $40
		dc.b 6
		dc.b 0
ObjDat3_8A412:	dc.l Map_ICZPlatforms
		dc.w $C3B6
		dc.w prio(1)
		dc.b 8
		dc.b 8
		dc.b $23
		dc.b 0
ObjDat3_8A41E:	dc.l Map_ICZPlatforms
		dc.w $C347
		dc.w prio(1)
		dc.b $C
		dc.b $C
		dc.b $1C
		dc.b 0
ChildObjDat_8A42A:dc.w 5
		dc.l loc_8A1D4
ChildObjDat_8A430:dc.w 8
		dc.l loc_8A20C
ChildObjDat_8A436:dc.w 0
		dc.l loc_8A304
		dc.w $F010
byte_8A43E:	dc.b	2, $23
		dc.b  $13, $24
		dc.b  $14, $FC
byte_8A444:	dc.b	2, $1C
		dc.b  $1D, $25
		dc.b  $26, $FC
; ---------------------------------------------------------------------------

Obj_ICZCrushingColumn:

		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_8A46E(pc,d0.w),d1
		move.w	$10(a0),-(sp)
		jsr	off_8A46E(pc,d1.w)
		moveq	#$2B,d1
		moveq	#$70,d2
		moveq	#$70,d3
		move.w	(sp)+,d4
		jsr	SolidObjectFull.w
		jmp	Sprite_CheckDelete.w
; ---------------------------------------------------------------------------
off_8A46E:	dc.w loc_8A488-off_8A46E

		dc.w loc_8A4C4-off_8A46E
		dc.w loc_8A4D6-off_8A46E
		dc.w loc_8A4DE-off_8A46E
		dc.w loc_8A504-off_8A46E
		dc.w loc_8A50C-off_8A46E
		dc.w loc_8A51C-off_8A46E
		dc.w loc_8A562-off_8A46E
		dc.w loc_8A586-off_8A46E
		dc.w loc_8A596-off_8A46E
		dc.w loc_8A5AC-off_8A46E
		dc.w loc_8A5C8-off_8A46E
		dc.w loc_8A5E4-off_8A46E
; ---------------------------------------------------------------------------

loc_8A488:
		lea	ObjDat3_8A626(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.b	#$70,$1E(a0)
		move.w	$14(a0),$3E(a0)
		move.w	#$1F,$2E(a0)
		cmpi.b	#3,$2C(a0)
		bhs.s	loc_8A4B8
		move.b	#$C,$22(a0)
		lea	ChildObjDat_8A638(pc),a2
		jsr	CreateChild1_Normal.w

loc_8A4B8:

		move.b	$2C(a0),d0
		add.b	d0,d0
		move.b	d0,5(a0)

locret_8A4C2:

		rts
; ---------------------------------------------------------------------------

loc_8A4C4:
		move.b	$2A(a0),d0
		andi.b	#$18,d0
		beq.s	locret_8A4C2

loc_8A4CE:
		move.b	#$C,5(a0)
		rts
; ---------------------------------------------------------------------------

loc_8A4D6:
		subq.w	#1,$2E(a0)
		bmi.s	loc_8A4CE
		rts
; ---------------------------------------------------------------------------

loc_8A4DE:
		lea	(Player_1).w,a1
		jsr	Find_OtherObject.w
		cmpi.w	#$28,d2
		blo.w	locret_8A4C2
		btst	#0,4(a0)
		beq.s	loc_8A4F8
		subq.w	#2,d0

loc_8A4F8:
		tst.w	d0
		beq.s	locret_8A4C2

loc_8A4FC:
		move.b	#$10,5(a0)
		rts
; ---------------------------------------------------------------------------

loc_8A504:
		subq.w	#1,$2E(a0)
		bmi.s	loc_8A4FC
		rts
; ---------------------------------------------------------------------------

loc_8A50C:
		cmpi.b	#2,(Player_1+character_id).w
		bne.s	loc_8A516
		rts
; ---------------------------------------------------------------------------

loc_8A516:
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------

loc_8A51C:
		move.w	$1A(a0),d0
		addi.w	#-$20,d0
		cmpi.w	#-$400,d0
		ble.s	loc_8A52E
		move.w	d0,$1A(a0)

loc_8A52E:
		jsr	MoveSprite2.w
		jsr	ObjCheckCeilingDist.w
		tst.w	d1
		bpl.w	locret_8A4C2

loc_8A540:
		add.w	d1,$14(a0)
		move.b	#$12,5(a0)
		move.w	#$1F,$2E(a0)
		move.l	#loc_8A59A,$34(a0)
		moveq	#-$6A,d0
		jmp	Play_Sound_2.w
; ---------------------------------------------------------------------------

loc_8A562:
		move.w	$1A(a0),d0
		addi.w	#$20,d0
		cmpi.w	#$400,d0
		bgt.s	loc_8A574
		move.w	d0,$1A(a0)

loc_8A574:
		jsr	MoveSprite2.w
		jsr	ObjCheckFloorDist.w
		tst.w	d1
		bmi.s	loc_8A540
		rts
; ---------------------------------------------------------------------------

loc_8A586:
		addq.w	#8,$14(a0)
		jsr	ObjCheckFloorDist.w
		tst.w	d1
		bmi.s	loc_8A540
		rts
; ---------------------------------------------------------------------------

loc_8A596:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_8A59A:
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.b	locret_8A5A6+1(pc,d0.w),5(a0)

locret_8A5A6:
		rts
; ---------------------------------------------------------------------------
		dc.b $16
		dc.b $16
		dc.b $18
		dc.b $14
; ---------------------------------------------------------------------------

loc_8A5AC:
		move.w	$14(a0),d0
		subq.w	#1,d0
		cmp.w	$3E(a0),d0
		bls.s	loc_8A5BE
		move.w	d0,$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_8A5BE:
		move.w	#$5F,$2E(a0)
		bra.w	loc_8A4B8
; ---------------------------------------------------------------------------

loc_8A5C8:
		move.w	$14(a0),d0
		addq.w	#1,d0
		cmp.w	$3E(a0),d0
		bhs.s	loc_8A5DA
		move.w	d0,$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_8A5DA:
		move.w	#$5F,$2E(a0)
		bra.w	loc_8A4B8
; ---------------------------------------------------------------------------

loc_8A5E4:
		lea	(Player_1).w,a1
		jsr	Find_OtherObject.w
		btst	#0,4(a0)
		beq.s	loc_8A5F6
		subq.w	#2,d0

loc_8A5F6:
		tst.w	d0
		bne.w	locret_8A4C2
		move.b	#$14,5(a0)
		rts
; ---------------------------------------------------------------------------

loc_8A604:
		move.l	#loc_8A612,(a0)
		lea	word_8A632(pc),a1
		jsr	SetUp_ObjAttributes3.w

loc_8A612:
		movea.w	$46(a0),a1
		move.w	$14(a1),d0
		addi.w	#$B0,d0
		move.w	d0,$14(a0)
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------
ObjDat3_8A626:	dc.l Map_ICZWallAndColumn
		dc.w $4001
		dc.w prio(5)
		dc.b $20
		dc.b $70
		dc.b 2
		dc.b 0
word_8A632:	dc.w prio(5)
		dc.b $20
		dc.b $40
		dc.b $D
		dc.b 0
ChildObjDat_8A638:dc.w 0
		dc.l loc_8A604
		dc.w 0
; ---------------------------------------------------------------------------

Obj_ICZFreezer:

		jsr	Obj_WaitOffscreen.w
		move.l	#loc_8A656,(a0)
		lea	ObjDat3_8AA96(pc),a1
		jsr	SetUp_ObjAttributes.w
		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------

loc_8A656:

		jsr	Find_SonicTails.w
		cmpi.w	#$40,d2
		bhs.s	loc_8A67A
		move.l	#loc_8A67E,(a0)
		clr.w	$2E(a0)
		clr.w	$30(a0)
		clr.b	$39(a0)
		moveq	#$7F,d0
		jsr	Play_Sound_2.w

loc_8A67A:
		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------

loc_8A67E:
		jsr	Find_SonicTails.w
		cmpi.w	#$40,d2
		bhs.s	loc_8A6C6
		subq.w	#1,$30(a0)
		bpl.s	loc_8A6AA
		moveq	#0,d0
		move.b	$39(a0),d0
		bchg	#1,d0
		move.b	d0,$39(a0)
		move.w	word_8A6DE(pc,d0.w),$30(a0)
		move.w	off_8A6E2(pc,d0.w),d0
		jsr	off_8A6E2(pc,d0.w)

loc_8A6AA:
		btst	#1,$38(a0)
		beq.s	loc_8A6C2
		subq.w	#1,$2E(a0)
		bpl.s	loc_8A6C2
		move.w	#1,$2E(a0)
		bsr.w	sub_8A708

loc_8A6C2:

		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------

loc_8A6C6:
		move.l	#loc_8A656,(a0)
		bclr	#1,$38(a0)
		moveq	#-$1C,d0
		jsr	Play_Sound_2.w
		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------
word_8A6DE:	dc.w $40
		dc.w $40
off_8A6E2:	dc.w loc_8A6E6-off_8A6E2

		dc.w loc_8A6EE-off_8A6E2
; ---------------------------------------------------------------------------

loc_8A6E6:
		bclr	#1,$38(a0)
		rts
; ---------------------------------------------------------------------------

loc_8A6EE:
		bset	#1,$38(a0)
		lea	ChildObjDat_8AAD2(pc),a2
		btst	#1,4(a0)
		beq.s	loc_8A704
		lea	ChildObjDat_8AADA(pc),a2

loc_8A704:
		jmp	CreateChild1_Normal.w

; =============== S U B R O U T I N E =======================================


sub_8A708:
		lea	ChildObjDat_8AAC2(pc),a2
		btst	#1,4(a0)
		beq.s	loc_8A718
		lea	ChildObjDat_8AACA(pc),a2

loc_8A718:
		jmp	CreateChild1_Normal.w
; End of function sub_8A708

; ---------------------------------------------------------------------------

loc_8A71C:

		lea	word_8AAA2(pc),a1
		jsr	SetUp_ObjAttributes2.w
		move.l	#loc_8A72C,(a0)

locret_8A72A:
		rts
; ---------------------------------------------------------------------------

loc_8A72C:
		bsr.w	sub_8A916
		jsr	Refresh_ChildPosition.w
		subq.b	#1,$3A(a0)
		bpl.w	locret_8A72A
		move.b	#2,$3A(a0)
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_8A748:

		move.l	#loc_8A75C,(a0)
		move.w	#$1F,$2E(a0)
		lea	ObjDat3_8AA96(pc),a1
		jmp	SetUp_ObjAttributes.w
; ---------------------------------------------------------------------------

loc_8A75C:
		movea.w	$46(a0),a1
		btst	#1,$38(a1)
		beq.s	loc_8A78C
		subq.w	#1,$2E(a0)
		bmi.s	loc_8A770
		rts
; ---------------------------------------------------------------------------

loc_8A770:
		move.l	#loc_8A778,(a0)
		rts
; ---------------------------------------------------------------------------

loc_8A778:
		movea.w	$46(a0),a1
		btst	#1,$38(a1)
		beq.s	loc_8A78C
		lea	word_8AA30(pc),a1
		bra.w	sub_8A9C6
; ---------------------------------------------------------------------------

loc_8A78C:

		move.l	#loc_8A7A2,(a0)
		move.w	#$1F,$2E(a0)
		move.l	#Go_Delete_Sprite,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_8A7A2:
		jsr	Obj_Wait.w
		lea	word_8AA30(pc),a1
		bra.w	sub_8A9C6
; ---------------------------------------------------------------------------

loc_8A7AE:
		lea	ObjDat3_8AAAA(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_8A80C,(a0)
		move.b	#$10,$1E(a0)
		movea.w	$44(a0),a1
		move.w	$10(a1),d0
		move.w	d0,$10(a0)
		move.w	$14(a1),$14(a0)
		btst	#0,4(a1)
		beq.s	loc_8A7E2
		bset	#0,4(a0)

loc_8A7E2:
		movea.w	$46(a0),a2
		move.w	#$200,d1
		cmp.w	$10(a2),d0
		bhs.s	loc_8A7F2
		neg.w	d1

loc_8A7F2:
		move.w	d1,$18(a0)
		move.w	#-$400,$1A(a0)
		move.w	#$7F,$2E(a0)
		move.l	#loc_8A88A,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_8A80C:
		move.w	(Camera_X_pos).w,d0
		tst.w	$18(a0)
		bmi.s	loc_8A824
		addi.w	#$128,d0
		cmp.w	$10(a0),d0
		blo.s	loc_8A82E
		bra.w	loc_8A832
; ---------------------------------------------------------------------------

loc_8A824:
		addi.w	#$20,d0
		cmp.w	$10(a0),d0
		blo.s	loc_8A832

loc_8A82E:
		clr.w	$18(a0)

loc_8A832:

		jsr	MoveSprite.w
		jsr	ObjCheckFloorDist.w
		tst.w	d1
		bpl.s	loc_8A84C
		add.w	d1,$14(a0)
		move.l	#loc_8A84C,(a0)

loc_8A84C:
		movea.w	$44(a0),a1
		cmp.b	#6,5(a1)			; check if dead
		bhs.s	FreezerRemove			; if so, remove object
		move.w	$10(a0),d0
		move.w	$14(a0),d1

loc_8A870:
		move.w	d0,$10(a1)
		move.w	d1,$14(a1)
		subq.w	#1,$2E(a0)
		bmi.s	loc_8A88A
		bsr.w	sub_8AA38	; do roll
		bne.s	loc_8A8BA
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_8A88A:

		movea.w	$44(a0),a1
		btst	#1,$2B(a1)
		movea.l	a0,a2
		movea.l	a1,a0
		jsr	(HurtCharacter).l
		cmpi.b	#$18,$20(a0)
		beq.s	loc_8A8B8
		move.w	#$200,d0
		btst	#0,4(a0)
		bne.s	loc_8A8B4
		neg.w	d0

loc_8A8B4:
		move.w	d0,$18(a0)

loc_8A8B8:
		movea.l	a2,a0

loc_8A8BA:
		movea.w	$44(a0),a1
		bset	#1,$2A(a1)
		clr.b	$2E(a1)
		move.b	#$78,$34(a1)

FreezerRemove:
		lea	ChildObjDat_8AAEA(pc),a2
		jsr	CreateChild1_Normal.w
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_8A8DC:

		lea	ObjDat3_8AAB6(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#AnimateRaw_MoveChkDel,(a0)
		move.l	#byte_8AB3E,$30(a0)
		cmpi.b	#8,$2C(a0)
		bhs.s	loc_8A902
		move.l	#byte_8AB34,$30(a0)

loc_8A902:
		jsr	Random_Number.w
		andi.b	#3,d0
		move.b	d0,$23(a0)
		moveq	#$C,d0
		jmp	Set_IndexedVelocity.w

; =============== S U B R O U T I N E =======================================


sub_8A916:
		subq.w	#1,$2E(a0)
		bpl.s	locret_8A96E
		move.w	#2,$2E(a0)
		moveq	#0,d0
		move.b	$39(a0),d0
		addq.b	#4,d0
		cmpi.b	#$48,d0
		bhs.s	loc_8A970
		move.b	d0,$39(a0)
		lea	byte_8A97A(pc,d0.w),a1
		move.b	(a1)+,$43(a0)
		move.b	(a1)+,$22(a0)
		move.b	(a1)+,d2
		jsr	Random_Number.w
		and.b	d2,d0
		move.w	d2,d3
		lsr.b	#1,d3
		sub.b	d3,d0
		move.b	d0,$42(a0)
		swap	d0
		and.b	d2,d0
		sub.b	d3,d0
		movea.w	$46(a0),a1
		btst	#1,4(a1)
		beq.s	loc_8A96A
		neg.b	$43(a0)

loc_8A96A:
		add.b	d0,$43(a0)

locret_8A96E:
		rts
; ---------------------------------------------------------------------------

loc_8A970:
		jsr	Delete_Current_Sprite.w
		addq.w	#4,sp
		rts
; End of function sub_8A916

; ---------------------------------------------------------------------------
byte_8A97A:	dc.b  $10, $16,	  3,   0
		dc.b  $10, $16,	  3,   0
		dc.b  $14, $16,	  3,   0
		dc.b  $18, $16,	  3,   0
		dc.b  $1C, $16,	  7,   0
		dc.b  $22, $17,	  7,   0
		dc.b  $26, $17,	  7,   0
		dc.b  $2E, $17,	  7,   0
		dc.b  $32, $17,	  7,   0
		dc.b  $3C, $18,	  7,   0
		dc.b  $40, $18,	 $F,   0
		dc.b  $4D, $19,	 $F,   0
		dc.b  $52, $19,	 $F,   0
		dc.b  $4B, $19,	 $F,   0
		dc.b  $44, $19,	 $F,   0
		dc.b  $42, $19,	 $F,   0
		dc.b  $3E, $18,	 $F,   0
		dc.b  $3B, $17,	 $F,   0
		dc.b  $38, $16,	 $F,   0

; =============== S U B R O U T I N E =======================================


sub_8A9C6:

		jsr	Check_PlayerInRange.w
		tst.l	d0
		beq.s	locret_8AA2E
		tst.w	d0
		beq.s	loc_8A9D8
		movea.w	d0,a4
		bsr.w	sub_8A9E0

loc_8A9D8:
		swap	d0
		tst.w	d0
		beq.s	locret_8AA2E
		movea.w	d0,a4
; End of function sub_8A9C6


; =============== S U B R O U T I N E =======================================


sub_8A9E0:
		tst.b	$2E(a4)
		bne.s	locret_8AA2E
		btst	#1,$2B(a4)
		bne.s	locret_8AA2E
		tst.b	$34(a4)
		bne.s	locret_8AA2E
		cmpi.b	#4,5(a4)
		bhs.s	locret_8AA2E
		move.b	#-$7F,$2E(a4)
		move.b	#$1A,$20(a4)
		bset	#1,$2A(a4)
		clr.b	$3D(a4)
		clr.w	$18(a4)
		clr.w	$1A(a4)
		clr.w	$1C(a4)
		move.l	d0,d4
		lea	ChildObjDat_8AAE2(pc),a2
		jsr	CreateChild1_Normal.w
		move.l	d4,d0
		move.w	a4,$44(a1)

locret_8AA2E:

		rts
; End of function sub_8A9E0

; ---------------------------------------------------------------------------
word_8AA30:	dc.w  $FFF0,   $20, $FFD8,   $50


; =============== S U B R O U T I N E =======================================


sub_8AA38:
		lea	(Player_1).w,a3
		cmpa.w	$44(a0),a3
		bne.s	loc_8AA46
		lea	(Player_2).w,a3

loc_8AA46:
		tst.w	$1A(a3)
		bmi.s	loc_8AA8A
		cmpi.b	#2,$20(a3)
		beq.s	loc_8AA5C
		cmpi.b	#9,$20(a3)
		bne.s	loc_8AA8A

loc_8AA5C:
		lea	word_8AA8E(pc),a1
		jsr	Check_PlayerInRange.w
		tst.l	d0
		beq.s	locret_8AA88
		tst.w	d0
		beq.s	loc_8AA74
		movea.w	d0,a4
		tst.b	$2E(a4)
		beq.s	loc_8AA82

loc_8AA74:
		swap	d0
		tst.w	d0
		beq.s	locret_8AA88
		movea.w	d0,a4
		tst.b	$2E(a4)
		bne.s	loc_8AA8A

loc_8AA82:
		neg.w	$1A(a3)
		moveq	#1,d0

locret_8AA88:

		rts
; ---------------------------------------------------------------------------

loc_8AA8A:

		moveq	#0,d0
		rts
; End of function sub_8AA38

; ---------------------------------------------------------------------------
word_8AA8E:	dc.w $FFE4,  $38,$FFE8,	 $30
ObjDat3_8AA96:	dc.l Map_ICZPlatforms

		dc.w $23B6
		dc.w prio(5)
		dc.b $10
		dc.b $C
		dc.b 6
		dc.b $9A
word_8AAA2:	dc.w $43B6
		dc.w prio(1)
		dc.b $C
		dc.b $C
		dc.b $16
		dc.b 0
ObjDat3_8AAAA:	dc.l Map_ICZPlatforms
		dc.w $43B6
		dc.w prio(1)
		dc.b $14
		dc.b $10
		dc.b 2
		dc.b 0
ObjDat3_8AAB6:	dc.l Map_ICZPlatforms
		dc.w $43B6
		dc.w prio(1)
		dc.b 4
		dc.b 4
		dc.b $C
		dc.b 0
ChildObjDat_8AAC2:dc.w 0
		dc.l loc_8A71C
		dc.w $C
ChildObjDat_8AACA:dc.w 0
		dc.l loc_8A71C
		dc.w $F4
ChildObjDat_8AAD2:dc.w 0
		dc.l loc_8A748
		dc.w $30
ChildObjDat_8AADA:dc.w 0
		dc.l loc_8A748
		dc.w $D0
ChildObjDat_8AAE2:dc.w 0
		dc.l loc_8A7AE
		dc.w 0
ChildObjDat_8AAEA:dc.w $B

		dc.l loc_8A8DC
		dc.w $F4F8
		dc.l loc_8A8DC
		dc.w $FCF8
		dc.l loc_8A8DC
		dc.w $4F8
		dc.l loc_8A8DC
		dc.w $CF8
		dc.l loc_8A8DC
		dc.w $F400
		dc.l loc_8A8DC
		dc.w $FC00
		dc.l loc_8A8DC
		dc.w $400
		dc.l loc_8A8DC
		dc.w $C00
		dc.l loc_8A8DC
		dc.w $F408
		dc.l loc_8A8DC
		dc.w $FC08
		dc.l loc_8A8DC
		dc.w $408
		dc.l loc_8A8DC
		dc.w $C08
byte_8AB34:	dc.b	0, $27

		dc.b  $23, $27
		dc.b  $13, $27
		dc.b  $24, $27
		dc.b  $14, $FC
byte_8AB3E:	dc.b	0, $27

		dc.b   $C, $27
		dc.b   $D, $27
		dc.b   $E, $FC
byte_8AB46:	dc.b	0, $27
		dc.b   $F, $27
		dc.b  $10, $27
		dc.b  $11, $FC
; ---------------------------------------------------------------------------

Obj_ICZSegmentColumn:

		lea	ObjDat3_8ACE2(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#Sprite_CheckDelete2,(a0)
		lea	ChildObjDat_8ACF4(pc),a2
		tst.b	$2C(a0)
		beq.s	loc_8AB6A
		lea	ChildObjDat_8ACFC(pc),a2

loc_8AB6A:
		jmp	CreateChild8_TreeListRepeated(pc)
; ---------------------------------------------------------------------------
		move.w	$10(a0),d0
		andi.w	#-$80,d0
		sub.w	(Camera_X_pos_coarse_back).w,d0
		cmpi.w	#$280,d0
		bhi.s	loc_8AB82
		rts
; ---------------------------------------------------------------------------

loc_8AB82:
		jmp	loc_850BA.w
; ---------------------------------------------------------------------------

loc_8AB86:

		lea	word_8ACEE(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_8ABB0,(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		cmpi.b	#6,d0
		bne.s	loc_8ABA6
		move.b	#3,$22(a0)

loc_8ABA6:
		lsl.w	#4,d0
		sub.w	d0,$14(a0)
		bra.w	loc_8ACCE
; ---------------------------------------------------------------------------

loc_8ABB0:

		tst.b	$2C(a0)
		beq.s	loc_8ABC2
		movea.w	$46(a0),a1
		btst	#0,$38(a1)
		bne.s	loc_8ABF8

loc_8ABC2:
		move.w	(Player_1+x_vel).w,-(sp)
		move.w	(Player_2+$18).w,-(sp)
		bsr.w	sub_8AC70
		move.l	(sp)+,d0
		moveq	#5,d1
		cmpi.b	#3,$22(a0)
		beq.s	loc_8ABF4
		tst.b	$2C(a0)
		bne.s	loc_8ABF4
		lea	(Player_1).w,a1
		bsr.w	sub_8AC80
		lea	(Player_2).w,a1
		swap	d0
		addq.b	#1,d1
		bsr.w	sub_8AC80

loc_8ABF4:

		bra.w	loc_8ACCE
; ---------------------------------------------------------------------------

loc_8ABF8:
		move.l	#loc_8AC1E,(a0)
		bset	#0,$38(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		lsl.w	#2,d0
		addi.w	#$F,d0
		move.w	d0,$2E(a0)
		move.l	#loc_8AC2A,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_8AC1E:
		bsr.w	sub_8AC70
		jsr	Obj_Wait.w
		bra.w	loc_8ACCE
; ---------------------------------------------------------------------------

loc_8AC2A:
		move.l	#loc_8AC44,(a0)
		move.w	#7,$2E(a0)
		move.l	#loc_8AC54,$34(a0)
		subq.b	#2,$2C(a0)
		rts
; ---------------------------------------------------------------------------

loc_8AC44:
		bsr.w	sub_8AC70
		addq.w	#4,$14(a0)
		jsr	Obj_Wait.w
		bra.w	loc_8ACCE
; ---------------------------------------------------------------------------

loc_8AC54:
		move.l	#loc_8ABB0,(a0)
		bclr	#0,$38(a0)
		move.w	#$10,(ScrShake_Value).w
		moveq	#-$6A,d0
		jsr	Play_Sound_2.w
		rts

; =============== S U B R O U T I N E =======================================


sub_8AC70:

		moveq	#$2B,d1
		moveq	#$10,d2
		moveq	#$10,d3
		move.w	$10(a0),d4
		jmp	SolidObjectFull.w
; End of function sub_8AC70


; =============== S U B R O U T I N E =======================================


sub_8AC80:

		btst	d1,$2A(a0)
		beq.s	locret_8ACCC
		move.w	d0,d3
		tst.w	d3
		bpl.s	loc_8AC8E
		neg.w	d3

loc_8AC8E:
		cmpi.b	#2,$20(a1)
		bne.s	locret_8ACCC
		cmpi.w	#$600,d3
		blo.s	locret_8ACCC
		move.w	d0,$18(a1)
		move.w	d0,$1C(a1)
		bclr	d1,$2A(a0)
		bclr	d1,$2A(a1)
		bset	#0,$38(a0)
		lea	ChildObjDat_8AAEA(pc),a2
		jsr	CreateChild1_Normal.w
		jsr	Displace_PlayerOffObject.w
		jsr	Go_Delete_Sprite.w
		moveq	#$59,d0
		jsr	Play_Sound_2.w
		addq.w	#4,sp

locret_8ACCC:

		rts
; End of function sub_8AC80

; ---------------------------------------------------------------------------

loc_8ACCE:

		movea.w	$44(a0),a1
		btst	#4,$38(a1)
		bne.w	loc_84F88.a
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
ObjDat3_8ACE2:	dc.l Map_ICZWallAndColumn
		dc.w $4001
		dc.w prio(5)
		dc.b $20
		dc.b $10
		dc.b $B
		dc.b 0
word_8ACEE:	dc.w prio(5)
		dc.b $20
		dc.b $10
		dc.b $A
		dc.b 0
ChildObjDat_8ACF4:dc.w 2
		dc.l loc_8AB86
		dc.w 0
ChildObjDat_8ACFC:dc.w 3
		dc.l loc_8AB86
		dc.w 0
; ---------------------------------------------------------------------------

Obj_ICZSwingingPlatform:

		lea	ObjDat3_8B138(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_8AD20,(a0)
		lea	ChildObjDat_8B164(pc),a2
		jsr	CreateChild1_Normal.w
		move.w	a1,$46(a0)
		rts
; ---------------------------------------------------------------------------

loc_8AD20:

		btst	#3,$38(a0)
		beq.s	loc_8AD3C
		move.l	#loc_8AD40,(a0)
		btst	#0,4(a0)
		beq.s	loc_8AD3C
		move.l	#loc_8ADCA,(a0)

loc_8AD3C:

		jmp	Sprite_CheckDeleteTouch2.w
; ---------------------------------------------------------------------------

loc_8AD40:
		move.w	$3E(a0),d0
		subi.w	#$10,d0
		move.w	d0,$3E(a0)
		move.w	$3C(a0),d1
		add.w	d0,d1
		scc	d2
		tst.w	d0
		bpl.s	loc_8AD5C
		tst.b	d2
		bne.s	loc_8AD82

loc_8AD5C:
		move.w	d1,$3C(a0)
		tst.b	$2C(a0)
		beq.s	loc_8AD72
		cmpi.w	#$4800,d1
		blo.s	loc_8AD72
		cmpi.w	#$200,d0
		bhs.s	loc_8AD9C

loc_8AD72:

		cmpi.w	#$6E00,d1
		bhs.s	loc_8AD7E
		moveq	#1,d2
		jsr	MoveSprite_CircularSimple.w

loc_8AD7E:
		jmp	Sprite_CheckDeleteTouch2.w
; ---------------------------------------------------------------------------

loc_8AD82:

		move.l	#loc_8AD20,(a0)
		bclr	#3,$38(a0)
		clr.w	$3C(a0)
		moveq	#1,d2
		jsr	MoveSprite_CircularSimple.w
		jmp	Sprite_CheckDeleteTouch2.w
; ---------------------------------------------------------------------------

loc_8AD9C:

		move.l	#loc_8AE0C,(a0)
		bset	#2,$38(a0)
		move.b	#$10,$1E(a0)
		move.w	#$400,d0
		btst	#0,4(a0)
		beq.s	loc_8ADBC
		neg.w	d0

loc_8ADBC:
		move.w	d0,$18(a0)
		move.w	#-$600,$1A(a0)
		jmp	Sprite_CheckDeleteTouch2.w
; ---------------------------------------------------------------------------

loc_8ADCA:
		move.w	$3E(a0),d0
		addi.w	#$10,d0
		move.w	d0,$3E(a0)
		move.w	$3C(a0),d1
		add.w	d0,d1
		scs	d2
		tst.w	d0
		bmi.s	loc_8ADE6
		tst.b	d2
		bne.s	loc_8AD82

loc_8ADE6:
		move.w	d1,$3C(a0)
		tst.b	$2C(a0)
		beq.s	loc_8ADFC
		cmpi.w	#-$4800,d1
		bhi.s	loc_8ADFC
		cmpi.w	#$200,d0
		bhs.s	loc_8AD9C

loc_8ADFC:

		cmpi.w	#-$6E00,d1
		bls.s	loc_8AE08
		moveq	#1,d2
		jsr	MoveSprite_CircularSimple.w

loc_8AE08:
		jmp	Sprite_CheckDeleteTouch2.w
; ---------------------------------------------------------------------------

loc_8AE0C:
		jsr	MoveSprite.w
		tst.w	$1A(a0)
		bmi.s	loc_8AE40
		jsr	ObjCheckFloorDist.w
		tst.w	d1
		bpl.s	loc_8AE40
		add.w	d1,$14(a0)
		move.w	$1A(a0),d0
		cmpi.w	#$100,d0
		blo.s	loc_8AE44
		asr.w	#2,d0
		neg.w	d0
		move.w	d0,$1A(a0)
		lea	ChildObjDat_8B17E(pc),a2
		jsr	CreateChild1_Normal.w

loc_8AE40:

		jmp	Sprite_CheckDeleteTouch2.w
; ---------------------------------------------------------------------------

loc_8AE44:
		move.l	#loc_8AE62,(a0)
		move.w	#$10,d0
		tst.w	$18(a0)
		bmi.s	loc_8AE56
		neg.w	d0

loc_8AE56:
		move.w	d0,$40(a0)
		clr.w	$1A(a0)
		jmp	Sprite_CheckDeleteTouch2.w
; ---------------------------------------------------------------------------

loc_8AE62:
		move.w	$18(a0),d0
		move.w	d0,d1
		add.w	$40(a0),d0
		eor.w	d0,d1
		bmi.s	loc_8AE96
		move.w	d0,$18(a0)
		move.w	$10(a0),d1
		jsr	MoveSprite2.w
		move.w	$10(a0),d0
		eor.w	d0,d1
		btst	#3,d1
		beq.s	loc_8AE92
		lea	ChildObjDat_8B18C(pc),a2
		jsr	CreateChild1_Normal.w

loc_8AE92:
		jmp	Sprite_CheckDeleteTouch2.w
; ---------------------------------------------------------------------------

loc_8AE96:
		move.l	#loc_8AEA0,(a0)
		jmp	Sprite_CheckDeleteTouch2.w
; ---------------------------------------------------------------------------

loc_8AEA0:
		jmp	Sprite_CheckDeleteTouch2.w
; ---------------------------------------------------------------------------

loc_8AEA4:
		lea	word_8B158(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_8AEB2,(a0)

loc_8AEB2:

		bsr.w	sub_8B080
		jmp	Child_Draw_Sprite2.w
; ---------------------------------------------------------------------------

loc_8AEBA:
		movea.w	$46(a0),a1
		btst	#3,$38(a1)
		bne.s	loc_8AECC
		move.l	#loc_8AEB2,(a0)

loc_8AECC:
		bsr.w	sub_8B054
		jmp	Child_Draw_Sprite2.w
; ---------------------------------------------------------------------------

loc_8AED4:
		lea	word_8B15E(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_8AEE2,(a0)

loc_8AEE2:
		bsr.w	sub_8B06A
		jmp	Child_Draw_Sprite2.w
; ---------------------------------------------------------------------------

loc_8AEEA:
		lea	word_8B144(pc),a1
		jsr	SetUp_ObjAttributes2.w
		move.l	#loc_8AF32,(a0)
		subi.w	#$80,$14(a0)
		movea.w	$46(a0),a1
		btst	#0,4(a1)
		beq.s	loc_8AF10
		bset	#0,4(a0)

loc_8AF10:
		bset	#6,4(a0)
		move.w	#7,$16(a0)
		lea	$1C(a0),a1
		moveq	#6,d6

loc_8AF22:
		move.w	#8,(a1)
		addq.w	#6,a1
		dbf	d6,loc_8AF22
		move.b	#8,$22(a0)

loc_8AF32:
		bsr.w	sub_8B114
		bsr.w	sub_8AFA2
		jmp	Child_Draw_Sprite2.w
; ---------------------------------------------------------------------------

loc_8AF3E:
		lea	ObjDat3_8B14C(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_8AF9E,(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	word_8AF86(pc,d0.w),d1
		neg.w	d1
		move.w	d1,$1A(a0)
		movea.w	$46(a0),a1
		btst	#0,4(a1)
		bne.s	loc_8AF6A
		neg.w	d1

loc_8AF6A:
		move.w	d1,$18(a0)
		lsr.w	#1,d0
		move.b	byte_8AF96(pc,d0.w),d0
		movea.w	$46(a0),a1
		move.w	(a1,d0.w),$10(a0)
		move.w	2(a1,d0.w),$14(a0)
		rts
; ---------------------------------------------------------------------------
word_8AF86:	dc.w $80
		dc.w $100
		dc.w $180
		dc.w $200
		dc.w $280
		dc.w $300
		dc.w $380
		dc.w $400
byte_8AF96:	dc.b $42
		dc.b $18
		dc.b $1E
		dc.b $24
		dc.b $2A
		dc.b $30
		dc.b $36
		dc.b $3C
; ---------------------------------------------------------------------------

loc_8AF9E:
		jmp	MoveChkDel.w

; =============== S U B R O U T I N E =======================================


sub_8AFA2:
		movea.w	$46(a0),a1
		lea	$18(a0),a2
		move.w	$10(a0),d0
		move.w	$10(a1),d1
		sub.w	d0,d1
		swap	d0
		swap	d1
		move.w	$14(a0),d0
		move.w	$14(a1),d1
		sub.w	d0,d1
		moveq	#0,d5
		moveq	#6,d6

loc_8AFC6:
		move.l	d1,d2
		move.w	off_8AFE0(pc,d5.w),d4
		jsr	off_8AFE0(pc,d4.w)
		move.l	d0,(a2)
		swap	d2
		add.l	d2,(a2)+
		addq.w	#2,a2
		addq.w	#2,d5
		dbf	d6,loc_8AFC6
		rts
; End of function sub_8AFA2

; ---------------------------------------------------------------------------
off_8AFE0:	dc.w loc_8AFF0-off_8AFE0

		dc.w loc_8AFF8-off_8AFE0
		dc.w loc_8B000-off_8AFE0
		dc.w loc_8B014-off_8AFE0
		dc.w loc_8B01C-off_8AFE0
		dc.w loc_8B030-off_8AFE0
		dc.w loc_8B044-off_8AFE0
		dc.w locret_8B052-off_8AFE0
; ---------------------------------------------------------------------------

loc_8AFF0:
		asr.w	#3,d2
		swap	d2
		asr.w	#3,d2
		rts
; ---------------------------------------------------------------------------

loc_8AFF8:
		asr.w	#2,d2
		swap	d2
		asr.w	#2,d2
		rts
; ---------------------------------------------------------------------------

loc_8B000:
		asr.w	#2,d2
		move.w	d2,d3
		asr.w	#1,d2
		add.w	d3,d2
		swap	d2
		asr.w	#2,d2
		move.w	d2,d3
		asr.w	#1,d2
		add.w	d3,d2
		rts
; ---------------------------------------------------------------------------

loc_8B014:
		asr.w	#1,d2
		swap	d2
		asr.w	#1,d2
		rts
; ---------------------------------------------------------------------------

loc_8B01C:
		asr.w	#1,d2
		move.w	d2,d3
		asr.w	#2,d2
		add.w	d3,d2
		swap	d2
		asr.w	#1,d2
		move.w	d2,d3
		asr.w	#2,d2
		add.w	d3,d2
		rts
; ---------------------------------------------------------------------------

loc_8B030:
		asr.w	#1,d2
		move.w	d2,d3
		asr.w	#1,d2
		add.w	d3,d2
		swap	d2
		asr.w	#1,d2
		move.w	d2,d3
		asr.w	#1,d2
		add.w	d3,d2
		rts
; ---------------------------------------------------------------------------

loc_8B044:
		move.w	d2,d3
		asr.w	#3,d3
		sub.w	d3,d2
		swap	d2
		move.w	d2,d3
		asr.w	#3,d3
		sub.w	d3,d2

locret_8B052:
		rts

; =============== S U B R O U T I N E =======================================


sub_8B054:

		move.w	$10(a0),-(sp)
		jsr	Refresh_ChildPosition.w
		moveq	#$2B,d1
		moveq	#8,d2
		moveq	#8,d3
		move.w	(sp)+,d4
		jmp	SolidObjectFull.w
; End of function sub_8B054


; =============== S U B R O U T I N E =======================================


sub_8B06A:
		move.w	$10(a0),-(sp)
		jsr	Refresh_ChildPositionAdjusted.w
		moveq	#$F,d1
		moveq	#8,d2
		moveq	#8,d3
		move.w	(sp)+,d4
		jmp	SolidObjectFull.w
; End of function sub_8B06A


; =============== S U B R O U T I N E =======================================


sub_8B080:
		move.b	$2A(a0),$39(a0)
		bsr.s	sub_8B054
		move.b	$39(a0),d0
		move.b	$2A(a0),d1
		andi.b	#$18,d1
		beq.s	locret_8B0AE
		movea.w	$46(a0),a2
		lea	(Player_1).w,a1
		moveq	#3,d2
		bsr.s	sub_8B0B0
		lea	(Player_2).w,a1
		moveq	#4,d2
		bsr.s	sub_8B0B0

locret_8B0AE:

		rts
; End of function sub_8B080


; =============== S U B R O U T I N E =======================================


sub_8B0B0:

		btst	d2,d1
		beq.s	locret_8B0AE
		move.w	$18(a1),d3
		smi	d4
		cmpi.w	#-$200,d3
		ble.s	loc_8B0C6
		cmpi.w	#$200,d3
		blt.s	locret_8B0AE

loc_8B0C6:
	;	btst	d2,d0
	;	beq.s	loc_8B0CC
	;	asr.w	#1,d3

loc_8B0CC:
		btst	#0,4(a2)
		beq.s	loc_8B0D6
		not.b	d4

loc_8B0D6:
		tst.b	d4
		bne.s	locret_8B0AE
		move.l	#loc_8AEBA,(a0)
		bset	#3,$38(a2)
		asr.w	#1,d3
		bmi.s	loc_8B0F8
	;	cmpi.w	#$400,d3
	;	ble.s	loc_8B102
		move.w	#$400,d3		; NAT: Set max speed anyway
		bra.s	loc_8B102
; ---------------------------------------------------------------------------

loc_8B0F8:
	;	cmpi.w	#-$400,d3
	;	bge.s	loc_8B102
		move.w	#-$400,d3		; NAT: Set max speed anyway

loc_8B102:

		move.w	d3,$3E(a2)
		asl.w	#1,d3
		move.w	d3,$18(a1)
		move.w	d3,$1C(a1)
		addq.w	#4,sp

locret_8B112:
		rts
; End of function sub_8B0B0


; =============== S U B R O U T I N E =======================================


sub_8B114:
		movea.w	$46(a0),a1
		btst	#2,$38(a1)
		beq.s	locret_8B112
		move.w	$10(a0),$2A(a0)
		move.w	$14(a0),$2C(a0)
		lea	ChildObjDat_8B178(pc),a2
		jsr	CreateChild6_Simple.w
		jmp	Go_Delete_Sprite_2.w
; End of function sub_8B114

; ---------------------------------------------------------------------------
ObjDat3_8B138:	dc.l Map_ICZPlatforms
		dc.w $23B6
		dc.w prio(1)
		dc.b $20
		dc.b $10
		dc.b 7
		dc.b 0
word_8B144:	dc.w $43B6
		dc.w prio(5)
		dc.b $80
		dc.b $80
		dc.b 8
		dc.b 0
ObjDat3_8B14C:	dc.l Map_ICZPlatforms
		dc.w $43B6
		dc.w prio(5)
		dc.b 8
		dc.b 8
		dc.b 8
		dc.b 0
word_8B158:	dc.w prio(6)
		dc.b $20
		dc.b $10
		dc.b $27
		dc.b 0
word_8B15E:	dc.w prio(6)
		dc.b $30
		dc.b 8
		dc.b $27
		dc.b 0
ChildObjDat_8B164:dc.w 2
		dc.l loc_8AEA4
		dc.w 8
		dc.l loc_8AED4
		dc.w $1CF8
		dc.l loc_8AEEA
		dc.w 0
ChildObjDat_8B178:dc.w 7
		dc.l loc_8AF3E
ChildObjDat_8B17E:dc.w 1
		dc.l Obj_ICZSnowdust
		dc.w $1C10
		dc.l Obj_ICZSnowdust
		dc.w $1410
ChildObjDat_8B18C:dc.w 0
		dc.l Obj_ICZSnowdust
		dc.w $1C10
; ---------------------------------------------------------------------------

Obj_ICZStalagtite:

		jsr	Obj_WaitOffscreen.w
		lea	ObjDat3_8B27A(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_8B1AE,(a0)
		move.b	#$10,$1E(a0)
		rts
; ---------------------------------------------------------------------------

loc_8B1AE:
		bsr.w	sub_8B26A
		jsr	Find_SonicTails.w
		cmpi.w	#$70,d2
		bhs.s	loc_8B1D0
		move.l	#loc_8B1D4,(a0)
		move.w	#$F,$2E(a0)
		move.l	#loc_8B1EC,$34(a0)

loc_8B1D0:
		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------

loc_8B1D4:
		moveq	#2,d0
		btst	#0,(V_int_run_count+3).w
		beq.s	loc_8B1E0
		neg.w	d0

loc_8B1E0:
		add.w	d0,$10(a0)
		jsr	Obj_Wait.w
		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------

loc_8B1EC:
		move.l	#loc_8B1FA,(a0)
		move.b	#-$7E,$28(a0)
		rts
; ---------------------------------------------------------------------------

loc_8B1FA:
		jsr	MoveSprite.w
		jsr	ObjCheckCeilingDist.w
		tst.w	d1
		bpl.s	loc_8B224
		move.l	#loc_8B228,(a0)
		clr.b	$28(a0)
		lea	ChildObjDat_8B292(pc),a2
		jsr	CreateChild6_Simple.w
		moveq	#$5D,d0
		jsr	Play_Sound_2.w

loc_8B224:
		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------

loc_8B228:
		bsr.w	sub_8B26A
		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------

loc_8B230:

		lea	ObjDat3_8B286(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#AnimateRaw_MoveChkDel,(a0)
		move.l	#byte_8AB46,$30(a0)
		cmpi.b	#6,$2C(a0)
		bhs.s	loc_8B256
		move.l	#byte_8AB3E,$30(a0)

loc_8B256:
		jsr	Random_Number.w
		andi.b	#3,d0
		move.b	d0,$23(a0)
		moveq	#0,d0
		jmp	Set_IndexedVelocity.w

; =============== S U B R O U T I N E =======================================


sub_8B26A:

		moveq	#$1B,d1
		moveq	#$20,d2
		moveq	#$20,d3
		move.w	$10(a0),d4
		jmp	SolidObjectFull.w
; End of function sub_8B26A

; ---------------------------------------------------------------------------
ObjDat3_8B27A:	dc.l Map_ICZWallAndColumn
		dc.w $4001
		dc.w prio(5)
		dc.b $10
		dc.b $20
		dc.b 7
		dc.b 0
ObjDat3_8B286:	dc.l Map_ICZPlatforms
		dc.w $C3B6
		dc.w prio(5)
		dc.b 4
		dc.b 4
		dc.b $F
		dc.b 0
ChildObjDat_8B292:dc.w $B
		dc.l loc_8B230
		dc.w $27
		dc.b   $F, $27
		dc.b  $10, $27
		dc.b  $11, $FC
; ---------------------------------------------------------------------------

Obj_ICZIceSpikes:

		jsr	Obj_WaitOffscreen.w
		lea	ObjDat3_8B350(pc),a1
		jsr	SetUp_ObjAttributes.w
		tst.b	$2C(a0)
		bne.s	loc_8B2CC
		move.l	#loc_8B2DA,(a0)
		lea	ChildObjDat_8B35C(pc),a2
		btst	#1,4(a0)
		beq.s	loc_8B2C8
		lea	ChildObjDat_8B364(pc),a2

loc_8B2C8:
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_8B2CC:
		move.l	#loc_8B2EE,(a0)
		move.b	#-$6E,$28(a0)
		rts
; ---------------------------------------------------------------------------

loc_8B2DA:
		moveq	#$17,d1
		moveq	#8,d2
		moveq	#8,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------

loc_8B2EE:
		jsr	Find_SonicTails.w
		cmpi.w	#$40,d2
		bhs.s	loc_8B30C
		move.l	#loc_8B310,(a0)
		move.w	#$F,$2E(a0)
		move.l	#loc_8B328,$34(a0)

loc_8B30C:
		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------

loc_8B310:
		moveq	#2,d0
		btst	#0,(V_int_run_count+3).w
		beq.s	loc_8B31C
		neg.w	d0

loc_8B31C:
		add.w	d0,$10(a0)
		jsr	Obj_Wait.w
		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------

loc_8B328:
		move.l	#MoveTouchChkDel,(a0)

locret_8B32E:
		rts
; ---------------------------------------------------------------------------

loc_8B330:

		move.b	#-$68,$28(a0)
		jsr	Add_SpriteToCollisionResponseList.w
		movea.w	$46(a0),a1
		btst	#7,$2A(a1)
		beq.w	locret_8B32E
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------
ObjDat3_8B350:	dc.l Map_ICZWallAndColumn
		dc.w $4001
		dc.w prio(5)
		dc.b $C
		dc.b $10
		dc.b 5
		dc.b 0
ChildObjDat_8B35C:dc.w 0
		dc.l loc_8B330
		dc.w $C
ChildObjDat_8B364:dc.w 0
		dc.l loc_8B330
		dc.w $F4
; ---------------------------------------------------------------------------

Obj_ICZIceCube:

		jsr	Obj_WaitOffscreen.w
		move.l	#loc_8B384,(a0)
		lea	ObjDat3_8B46C(pc),a1
		jsr	SetUp_ObjAttributes.w
		jmp	Sprite_OnScreen_Test.w
; ---------------------------------------------------------------------------

loc_8B384:
		move.b	(Player_1+anim).w,$3A(a0)
		move.b	(Player_2+anim).w,$3B(a0)
		moveq	#$23,d1
		moveq	#$10,d2
		moveq	#$10,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		pea	Sprite_OnScreen_Test

; =============== S U B R O U T I N E =======================================


sub_8B3AA:
		move.b	$2A(a0),d0
		btst	#3,d0
		beq.s	loc_8B3C0
		lea	(Player_1).w,a1
		cmpi.b	#2,$3A(a0)
		beq.s	loc_8B3D2

loc_8B3C0:
		btst	#4,d0
		beq.s	locret_8B430
		lea	(Player_2).w,a1
		cmpi.b	#2,$3B(a0)
		bne.s	locret_8B430

loc_8B3D2:
		bset	#2,$2A(a1)
		move.b	#$E,$1E(a1)
		move.b	#7,$1F(a1)
		move.b	#2,$20(a1)
		move.w	#-$300,$1A(a1)
		move.b	#2,5(a1)

		btst	#4,$2A(a0)
		beq.s	.chksonic
		lea	(Player_2).w,a1
		bset	#1,$2A(a1)
		bclr	#3,$2A(a1)

.chksonic	btst	#3,$2A(a0)		; NAT: Fixed sonic
		beq.s	loc_8B41A
		lea	(Player_1).w,a1
		bset	#1,$2A(a1)
		bclr	#3,$2A(a1)

loc_8B41A:
		lea	ChildObjDat_8B480(pc),a2
		jsr	CreateChild1_Normal.w
		moveq	#$6E,d0
		jsr	Play_Sound_2.w
		jsr	Go_Delete_Sprite.w

locret_8B430:

		rts
; End of function sub_8B3AA

; ---------------------------------------------------------------------------

loc_8B432:

		lea	word_8B478(pc),a1
		jsr	SetUp_ObjAttributes2.w
		move.l	#AnimateRaw_MoveChkDel,(a0)
		move.l	#byte_8AB34,$30(a0)
		cmpi.b	#$C,$2C(a0)
		blo.s	loc_8B458
		move.l	#byte_8AB3E,$30(a0)

loc_8B458:
		jsr	Random_Number.w
		andi.b	#3,d0
		move.b	d0,$23(a0)
		moveq	#0,d0
		jmp	Set_IndexedVelocity.w
; ---------------------------------------------------------------------------
ObjDat3_8B46C:	dc.l Map_ICZPlatforms
		dc.w $43B6
		dc.w prio(1)
		dc.b $18
		dc.b $10
		dc.b 3
		dc.b $2E
word_8B478:	dc.w $C3B6
		dc.w prio(5)
		dc.b $20
		dc.b $20
		dc.b $12
		dc.b 0
ChildObjDat_8B480:dc.w $B
		dc.l loc_8B432
		dc.w $F8
		dc.l loc_8B432
		dc.w 8
		dc.l loc_8B432
		dc.w $F0F8
		dc.l loc_8B432
		dc.w $10F8
		dc.l loc_8B432
		dc.w $F008
		dc.l loc_8B432
		dc.w $1008
		dc.l loc_8B432
		dc.w 0
		dc.l loc_8B432
		dc.w 0
		dc.l loc_8B432
		dc.w 0
		dc.l loc_8B432
		dc.w 0
		dc.l loc_8B432
		dc.w 0
		dc.l loc_8B432
		dc.w 0
; ---------------------------------------------------------------------------

Obj_ICZHarmfulIce:

		jsr	Obj_WaitOffscreen.w
		lea	ObjDat3_8B532(pc),a1
		move.l	#Sprite_CheckDeleteTouch,(a0)
		tst.b	$2C(a0)
		beq.s	loc_8B4E8
		lea	ObjDat3_8B53E(pc),a1
		move.l	#loc_8B4EC,(a0)

loc_8B4E8:
		jmp	SetUp_ObjAttributes.w
; ---------------------------------------------------------------------------

loc_8B4EC:
		moveq	#0,d0
		move.b	$29(a0),d0
		bne.s	loc_8B4F8
		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------

loc_8B4F8:
		add.w	d0,d0
		movea.w	loc_8B526+4(pc,d0.w),a1
		btst	#1,$2B(a1)
		bne.s	loc_8B512
		movea.l	a0,a2
		movea.l	a1,a0
		jsr	(HurtCharacter).l
		movea.l	a2,a0

loc_8B512:
		lea	ChildObjDat_8B54A(pc),a2
		jsr	CreateChild6_Simple.w
		jsr	Go_Delete_Sprite.w
		moveq	#-$80,d0
		jsr	Play_Sound_2.w

loc_8B526:
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
		dc.w $B000
		dc.w $B04A
		dc.w $B04A
ObjDat3_8B532:	dc.l Map_ICZPlatforms
		dc.w $43B6
		dc.w prio(5)
		dc.b $10
		dc.b $18
		dc.b 5
		dc.b $82
ObjDat3_8B53E:	dc.l Map_ICZPlatforms
		dc.w $43B6
		dc.w prio(5)
		dc.b $10
		dc.b $10
		dc.b 4
		dc.b $D7
ChildObjDat_8B54A:dc.w $B
		dc.l loc_8B230
; ---------------------------------------------------------------------------

Obj_ICZ_SnowPile:
		tst.b	OptionsBits.w		; NAT: Check if alternate layout
		bmi.w	loc_8B608		; if is, delete
		jsr	Obj_WaitOffscreen.w

		moveq	#0,d0
		move.b	$2C(a0),d0
		bclr	#7,d0
		lea	off_8B7F4(pc),a1
		lea	(a1,d0.w),a2
		move.l	(a2)+,(a0)
		movea.l	(a2)+,a1
		jmp	SetUp_ObjAttributes.w
; ---------------------------------------------------------------------------

loc_8B56E:
		lea	word_8B590(pc),a1
		jsr	Check_PlayerInRange.w
		tst.l	d0
		beq.s	loc_8B58C
		tst.w	d0
		beq.s	loc_8B582
		bsr.w	sub_8B598

loc_8B582:
		swap	d0
		tst.w	d0
		beq.s	loc_8B58C
		bsr.w	sub_8B598

loc_8B58C:

		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------
word_8B590:	dc.w  $FFD8,   $50, $FFE8,   $20

; =============== S U B R O U T I N E =======================================


sub_8B598:

		movea.w	d0,a3
		move.w	d0,$44(a0)
		cmpi.b	#9,$20(a3)
		beq.s	loc_8B5C6
		btst	#1,$2A(a3)
		bne.s	locret_8B5C4
		move.w	$18(a3),d2
		move.w	d2,d3
		bpl.s	loc_8B5B8
		neg.w	d2

loc_8B5B8:
		cmpi.w	#$600,d2
		bhs.s	loc_8B5C6
		asr.w	#1,d3
		move.w	d3,$1C(a3)

locret_8B5C4:
		rts
; ---------------------------------------------------------------------------

loc_8B5C6:

		move.w	a3,$44(a0)
		lea	ChildObjDat_8B84C(pc),a2
		jsr	CreateChild1_Normal.w
		jsr	Go_Delete_Sprite.w
		addq.w	#4,sp

locret_8B5DA:
		rts
; End of function sub_8B598

; ---------------------------------------------------------------------------

loc_8B5DC:
		lea	word_8B60E(pc),a1
		jsr	Check_PlayerInRange.w
		tst.w	d0
		bne.s	loc_8B5EC
		jmp	Sprite_CheckDelete.w
; ---------------------------------------------------------------------------

loc_8B5EC:
		move.w	d0,$44(a0)
		beq.s	loc_8B608
		movea.w	d0,a1
		move.w	#$800,$18(a1)
		move.w	#$800,$1C(a1)
		lea	ChildObjDat_8B872(pc),a2
		jsr	CreateChild1_Normal.w

loc_8B608:
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------
word_8B60E:	dc.w  $FFF8,   $10, $FFF0,   $20
; ---------------------------------------------------------------------------

loc_8B616:
		lea	word_8B658(pc),a1
		jsr	Check_PlayerInRange.w
		tst.w	d0
		bne.s	loc_8B626
		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------

loc_8B626:
		move.w	d0,$44(a0)
		beq.s	loc_8B652
		movea.w	d0,a1
		move.w	#$800,$18(a1)
		move.w	#$800,$1C(a1)
		lea	ChildObjDat_8B880(pc),a2
		jsr	CreateChild1_Normal.w
		btst	#7,$2C(a0)
		beq.s	loc_8B652
		move.w	#$600,d0
		jsr	StartNewLevel.w

loc_8B652:
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------
word_8B658:	dc.w  $FFF8,   $10, $FFF0,   $20
; ---------------------------------------------------------------------------

loc_8B660:

		move.w	a0,(__u_FAAE).w
		btst	#5,$38(a0)
		bne.s	loc_8B6A8
		move.w	(Camera_X_pos_copy).w,$10(a0)
		move.w	(Camera_Y_pos_copy).w,$14(a0)
		subq.w	#8,$14(a0)
		subq.w	#1,$2E(a0)
		bpl.s	locret_8B6A6
		move.w	#8,$2E(a0)
		move.b	(__u_FAAD).w,d0
		addq.b	#1,d0
		cmpi.b	#$3C,d0
		bhi.s	locret_8B6A6
		move.b	d0,(__u_FAAD).w
		jsr	Create_New_Sprite.w
		bne.s	locret_8B6A6
		move.l	#loc_8B6AE,(a1)

locret_8B6A6:

		rts
; ---------------------------------------------------------------------------

loc_8B6A8:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_8B6AE:
		lea	ObjDat3_8B838(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_8B720,(a0)
		jsr	Random_Number.w
		andi.w	#$1FF,d0
		cmpi.w	#$140,d0
		blo.s	loc_8B6D2
		andi.w	#$3F,d0
		lsl.w	#2,d0

loc_8B6D2:
		add.w	(Camera_X_pos).w,d0
		cmpi.w	#$380,d0
		blo.s	loc_8B756
		move.w	d0,$10(a0)
		move.w	(Camera_Y_pos).w,d0
		subq.w	#4,d0
		move.w	d0,$14(a0)
		swap	d0
		move.w	d0,d1
		andi.w	#3,d0
		move.b	RawAni_8B714(pc,d0.w),$22(a0)
		add.w	d0,d0
		move.w	word_8B718(pc,d0.w),8(a0)
		andi.w	#$3C,d1
		subi.w	#$20,d1
		move.w	d1,$18(a0)
		move.w	#$100,$1A(a0)
		rts
; ---------------------------------------------------------------------------
RawAni_8B714:	dc.b   $B, $10,	 $B,  $B
word_8B718:	dc.w prio(1), prio(7), prio(1), prio(1)
; ---------------------------------------------------------------------------

loc_8B720:
		jsr	MoveSprite2.w
		tst.b	4(a0)
		bmi.s	loc_8B732
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_8B732:
		move.l	#loc_8B73A,(a0)
		rts
; ---------------------------------------------------------------------------

loc_8B73A:
		jsr	MoveSprite2.w
		tst.b	4(a0)
		bpl.s	loc_8B756
		bchg	#0,$38(a0)
		bne.w	locret_8B5DA
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_8B756:

		move.b	(__u_FAAD).w,d0
		subq.b	#1,d0
		bmi.s	loc_8B762
		move.b	d0,(__u_FAAD).w

loc_8B762:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_8B768:

		lea	word_8B844(pc),a1
		jsr	SetUp_ObjAttributes2.w
		move.l	#loc_8B786,(a0)
		move.l	#loc_8B790,$34(a0)
		bsr.w	sub_8B7A0
		jsr	Refresh_ChildPositionAdjusted.w

loc_8B786:
		jsr	Obj_Wait.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_8B790:
		move.l	#loc_8B798,(a0)
		rts
; ---------------------------------------------------------------------------

loc_8B798:
		jsr	MoveSprite_LightGravity.w
		jmp	Sprite_CheckDeleteXY.w

; =============== S U B R O U T I N E =======================================


sub_8B7A0:
		movea.w	$46(a0),a1
		move.w	$44(a1),d0
		beq.s	locret_8B7DA
		movea.w	d0,a2
		lea	word_8B7DC(pc),a3
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	d0,$2E(a0)
		add.w	d0,d0
		move.l	(a3,d0.w),$18(a0)
		btst	#0,4(a2)
		beq.s	locret_8B7DA
		bset	#0,4(a0)
		bset	#0,4(a1)
		neg.w	$18(a0)

locret_8B7DA:

		rts
; End of function sub_8B7A0

; ---------------------------------------------------------------------------
word_8B7DC:	dc.w  $FD00, $FE00
		dc.w  $FC00, $FD00
		dc.w  $FC00, $FD80
		dc.w  $FD80, $FE00
		dc.w  $FE00, $FE80
		dc.w  $FE00, $FF00
off_8B7F4:	dc.l loc_8B56E
		dc.l ObjDat3_8B814
		dc.l loc_8B5DC
		dc.l ObjDat3_8B820
		dc.l loc_8B616
		dc.l ObjDat3_8B82C
		dc.l loc_8B660
		dc.l ObjDat3_8B838
ObjDat3_8B814:	dc.l Map_ICZPlatforms
		dc.w $4377
		dc.w prio(1)
		dc.b $18
		dc.b 8
		dc.b $20
		dc.b 0
ObjDat3_8B820:	dc.l Map_ICZPlatforms
		dc.w $C377
		dc.w prio(1)
		dc.b 8
		dc.b $10
		dc.b $21
		dc.b 0
ObjDat3_8B82C:	dc.l Map_ICZPlatforms
		dc.w $C377
		dc.w prio(1)
		dc.b $10
		dc.b $10
		dc.b $22
		dc.b 0
ObjDat3_8B838:	dc.l Map_ICZPlatforms

		dc.w $43B6
		dc.w prio(1)
		dc.b 4
		dc.b 4
		dc.b $B
		dc.b 0
word_8B844:	dc.w $43B6
		dc.w prio(1)
		dc.b 8
		dc.b 8
		dc.b 9
		dc.b 0
ChildObjDat_8B84C:dc.w 5
		dc.l loc_8B768
		dc.w $F8F8
		dc.l loc_8B768
		dc.w $8F8
		dc.l loc_8B768
		dc.w $E800
		dc.l loc_8B768
		dc.w $F800
		dc.l loc_8B768
		dc.w $800
		dc.l loc_8B768
		dc.w $1800
ChildObjDat_8B872:dc.w 1
		dc.l loc_8B768
		dc.w $F8
		dc.l loc_8B768
		dc.w 8
ChildObjDat_8B880:dc.w 3
		dc.l loc_8B768
		dc.w $F8F8
		dc.l loc_8B768
		dc.w 8
		dc.l loc_8B768
		dc.w $8F8
		dc.l loc_8B768
		dc.w $808
; ---------------------------------------------------------------------------

Obj_ICZ_TensionPlatform:

		lea	ObjDat3_8BABC(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_8B8B6,(a0)
		move.w	$14(a0),$30(a0)
		lea	ChildObjDat_8BAD0(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_8B8B6:
		bsr.w	sub_8B950
		bsr.w	sub_8BA1C
		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------

loc_8B8C2:

		lea	word_8BAC8(pc),a1
		jsr	SetUp_ObjAttributes2.w
		move.l	#loc_8B8F2,(a0)
		tst.b	$2C(a0)
		beq.s	loc_8B8DC
		bset	#0,4(a0)

loc_8B8DC:
		bset	#6,4(a0)
		move.w	#2,$16(a0)
		bsr.w	sub_8B8FA
		move.b	#8,$22(a0)

loc_8B8F2:
		bsr.w	sub_8B930
		jmp	Child_Draw_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_8B8FA:
		lea	$18(a0),a1
		move.w	$10(a0),d0
		move.w	$14(a0),d1
		moveq	#0,d2
		moveq	#1,d3

loc_8B90A:
		move.w	d0,d4
		move.w	word_8B92C(pc,d2.w),d5
		btst	#0,4(a0)
		beq.s	loc_8B91A
		neg.w	d5

loc_8B91A:
		add.w	d5,d4
		move.w	d4,(a1)+
		move.w	d1,(a1)+
		move.w	#8,(a1)+
		addq.w	#2,d2
		dbf	d3,loc_8B90A
		rts
; End of function sub_8B8FA

; ---------------------------------------------------------------------------
word_8B92C:	dc.w $C
		dc.w $18

; =============== S U B R O U T I N E =======================================


sub_8B930:
		movea.w	$46(a0),a1
		lea	$1A(a0),a2
		move.w	$14(a0),d0
		move.w	$14(a1),d1
		move.w	d1,d2
		sub.w	d0,d1
		asr.w	#1,d1
		add.w	d0,d1
		move.w	d1,(a2)
		addq.w	#6,a2
		move.w	d2,(a2)
		rts
; End of function sub_8B930


; =============== S U B R O U T I N E =======================================


sub_8B950:
		btst	#2,$38(a0)
		beq.s	locret_8B9D6
		move.w	#$80,d0
		move.w	$14(a0),d1
		move.w	$1A(a0),d2
		move.b	$39(a0),d3
		sub.w	$32(a0),d1
		scs	$39(a0)
		bcs.s	loc_8B978
		neg.w	d0
		bra.w	loc_8B97A
; ---------------------------------------------------------------------------

loc_8B978:
		neg.w	d1

loc_8B97A:
		cmp.b	$39(a0),d3
		beq.s	loc_8B9AA
		add.w	d0,d2
		add.w	d0,d2
		cmpi.w	#-$80,d2
		bge.s	loc_8B998
		cmpi.w	#-$400,d2
		bgt.s	loc_8B9AA
		bsr.w	sub_8B9D8
		bra.w	loc_8B9AA
; ---------------------------------------------------------------------------

loc_8B998:
		cmpi.w	#$80,d2
		bgt.s	loc_8B9AA
		cmpi.w	#1,d1
		bhi.s	loc_8B9AA
		bclr	#2,$38(a0)

loc_8B9AA:

		add.w	d0,d2
		move.w	#-$900,d3
		cmp.w	d3,d2
		bge.s	loc_8B9B8
		bra.w	loc_8B9BE
; ---------------------------------------------------------------------------

loc_8B9B8:
		neg.w	d3
		cmp.w	d3,d2
		ble.s	loc_8B9C0

loc_8B9BE:
		move.w	d3,d2

loc_8B9C0:
		move.w	d2,$1A(a0)
		jsr	MoveSprite2.w
		cmpi.w	#$50,d1
		blo.s	locret_8B9D6
		move.w	#-$100,$1A(a0)

locret_8B9D6:

		rts
; End of function sub_8B950


; =============== S U B R O U T I N E =======================================


sub_8B9D8:
		move.b	$3A(a0),d3
		andi.b	#$18,d3
		beq.s	locret_8BA1A
		btst	#3,d3
		beq.s	loc_8B9F0
		lea	(Player_1).w,a1
		bsr.w	sub_8B9FA

loc_8B9F0:
		btst	#4,d3
		beq.s	locret_8BA1A
		lea	(Player_2).w,a1
; End of function sub_8B9D8


; =============== S U B R O U T I N E =======================================


sub_8B9FA:
		move.w	d2,$1A(a1)
		bset	#1,$2A(a1)
		bclr	#3,$2A(a1)
		clr.b	$40(a1)
		move.b	#$10,$20(a1)
		move.b	#2,5(a1)

locret_8BA1A:

		rts
; End of function sub_8B9FA


; =============== S U B R O U T I N E =======================================


sub_8BA1C:
		move.b	$2A(a0),$3A(a0)
		move.w	(Player_1+y_vel).w,-(sp)
		move.w	(Player_2+$1A).w,-(sp)
		moveq	#$23,d1
		moveq	#$14,d2
		moveq	#$B,d3
		move.w	$10(a0),d4
		jsr	SolidObjectTop.w
		move.l	(sp)+,d0
		move.b	$2A(a0),d1
		move.b	$3A(a0),d2
		move.b	d1,$3A(a0)
		eor.b	d1,d2
		andi.b	#$18,d2
		beq.s	locret_8BA7C
		bsr.w	sub_8BA9E
		bset	#2,$38(a0)
		clr.b	$39(a0)
		moveq	#3,d4
		btst	d4,d2
		beq.s	loc_8BA6C
		lea	(Player_1).w,a1
		bsr.s	sub_8BA7E

loc_8BA6C:
		moveq	#4,d4
		btst	d4,d2
		beq.s	locret_8BA7C
		swap	d0
		lea	(Player_2).w,a1
		bra.s	sub_8BA7E

locret_8BA7C:

		rts

; =============== S U B R O U T I N E =======================================


sub_8BA7E:
		move.w	$1A(a0),d5
		btst	d4,d1
		bne.s	loc_8BA90
		tst.w	d0
		bpl.s	loc_8BA90
		add.w	d5,$1A(a1)

		tst.w	$40(a1)		; check if player was jumping
		beq.s	.nojump		; if not, branch
		cmp.w	#-$280,$14(a1)	; check if speed if higher than this
		bge.s	.nojump		; if not, branch
		move.w	#-$280,$14(a1)	; cap y-speed
.nojump		rts

		neg.w	d0

loc_8BA90:
		tst.w	$40(a1)		; check if player was jumping
		bne.s	.jump		; if so, branch

		add.w	d0,d5
		move.w	d5,d6
		asr.w	#2,d6
		sub.w	d6,d5
		move.w	d5,$1A(a0)
.jump		rts

; =============== S U B R O U T I N E =======================================


sub_8BA9E:
		moveq	#0,d5
		btst	#3,d1
		beq.s	loc_8BAA8
		addq.w	#8,d5

loc_8BAA8:
		btst	#4,d1
		beq.s	loc_8BAB0
		addq.w	#8,d5

loc_8BAB0:
		move.w	$30(a0),d3
		add.w	d5,d3
		move.w	d3,$32(a0)
		rts
; End of function sub_8BA9E

; ---------------------------------------------------------------------------
ObjDat3_8BABC:	dc.l Map_ICZPlatforms
		dc.w $4377
		dc.w prio(5)
		dc.b $18
		dc.b $C
		dc.b $1F
		dc.b 0
word_8BAC8:	dc.w $43B6
		dc.w prio(5)
		dc.b $40
		dc.b $40
		dc.b 8
		dc.b 0
ChildObjDat_8BAD0:dc.w 1
		dc.l loc_8B8C2
		dc.w $C800
		dc.l loc_8B8C2
		dc.w $3800
; ---------------------------------------------------------------------------

Obj_Penguinator:

		jsr	Obj_WaitOffscreen.w
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_8BAFE(pc,d0.w),d1
		jsr	off_8BAFE(pc,d1.w)
		lea	DPLCPtr_8BE02(pc),a2
		jsr	Perform_DPLC.w
		jmp	Sprite_CheckDeleteTouchSlotted.w
; ---------------------------------------------------------------------------
off_8BAFE:	dc.w loc_8BB0E-off_8BAFE

		dc.w loc_8BB6A-off_8BAFE
		dc.w loc_8BC04-off_8BAFE
		dc.w loc_8BC1E-off_8BAFE
		dc.w loc_8BC6C-off_8BAFE
		dc.w loc_8BCBA-off_8BAFE
		dc.w loc_8BCF4-off_8BAFE
		dc.w loc_8BD3C-off_8BAFE
; ---------------------------------------------------------------------------

loc_8BB0E:
		lea	ObjDat4_8BDDC(pc),a1
		jsr	SetUp_ObjAttributesSlotted.w
		bclr	#1,4(a0)
		beq.s	loc_8BB24
		bset	#7,$A(a0)

loc_8BB24:

		move.b	#2,5(a0)
		move.b	#$F,$1E(a0)
		move.b	#4,$1F(a0)
		bclr	#5,$38(a0)
		clr.b	$23(a0)
		clr.b	$24(a0)
		clr.w	$2E(a0)
		move.l	#byte_8BE0A,$30(a0)
		move.l	#loc_8BBF4,$34(a0)
		moveq	#2,d0
		btst	#0,4(a0)
		bne.s	loc_8BB64
		neg.w	d0

loc_8BB64:
		move.w	d0,$40(a0)
		rts
; ---------------------------------------------------------------------------

loc_8BB6A:
		jsr	Animate_RawGetFaster.w
		beq.s	loc_8BB78
		cmpi.b	#2,$2E(a0)
		bls.s	loc_8BB90

loc_8BB78:
		move.w	$40(a0),d0
		move.w	$18(a0),d1
		add.w	d0,d1
		move.w	d1,$18(a0)
		jsr	MoveSprite2.w
		jmp	ObjHitFloor2_DoRoutine.w
; ---------------------------------------------------------------------------

loc_8BB90:
		jsr	ObjCheckFloorDist.w
		tst.b	d3
		beq.s	loc_8BBAC
		btst	#0,4(a0)
		beq.s	loc_8BBA6
		bchg	#6,d3

loc_8BBA6:
		btst	#6,d3
		beq.s	loc_8BBE0

loc_8BBAC:

		move.b	#4,5(a0)
		move.w	#-$200,d0
		move.w	#$40,d1
		btst	#0,4(a0)
		beq.s	loc_8BBC6
		neg.w	d0
		neg.w	d1

loc_8BBC6:
		move.w	d0,$18(a0)
		move.w	d1,$40(a0)
		move.l	#byte_8BE11,$30(a0)
		move.l	#loc_8BC08,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_8BBE0:
		move.b	#$E,5(a0)
		move.w	#$40,$2E(a0)
		move.l	#loc_8BBAC,$34(a0)

loc_8BBF4:


		neg.w	$18(a0)
		neg.w	$40(a0)
		bchg	#0,4(a0)
		rts
; ---------------------------------------------------------------------------

loc_8BC04:
		jmp	Move_AnimateRaw.w
; ---------------------------------------------------------------------------

loc_8BC08:


		move.b	#6,5(a0)
		move.b	#$B,$1E(a0)
		move.l	#loc_8BC26,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_8BC1E:
		jsr	MoveSprite_LightGravity.w
		jmp	ObjHitFloor_DoRoutine.w
; ---------------------------------------------------------------------------

loc_8BC26:
		tst.b	d3
		move.b	d3,d4
		bpl.s	loc_8BC2E
		neg.b	d4

loc_8BC2E:
		andi.b	#-8,d4
		beq.s	loc_8BC52
		tst.w	$18(a0)
		bmi.s	loc_8BC3E
		bchg	#6,d3

loc_8BC3E:
		btst	#6,d3
		bne.s	loc_8BC52
		neg.w	$18(a0)
		neg.w	$40(a0)
		bchg	#0,4(a0)

loc_8BC52:

		move.b	#8,5(a0)
		move.w	#$20,$2E(a0)
		move.l	#loc_8BC94,$34(a0)
		clr.w	$1A(a0)
		rts
; ---------------------------------------------------------------------------

loc_8BC6C:
		bsr.w	sub_8BD88
		cmpi.w	#-2,d1
		blt.w	loc_8BBF4
		cmpi.w	#$C,d1
		bge.s	loc_8BC08
		add.w	d1,$14(a0)
		bsr.w	sub_8BD9C
		bsr.w	sub_8BDC2
		jsr	MoveSprite2.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_8BC94:
		move.b	#$A,5(a0)
		moveq	#8,d0
		sub.b	$22(a0),d0
		move.b	d0,$23(a0)
		clr.b	$24(a0)
		move.l	#byte_8BE16,$30(a0)
		move.l	#loc_8BCDC,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_8BCBA:
		bsr.w	sub_8BD88
		cmpi.w	#-2,d1
		blt.w	loc_8BBF4
		cmpi.w	#$C,d1
		bge.w	loc_8BC08
		add.w	d1,$14(a0)
		jsr	MoveSprite2.w
		jmp	Animate_Raw.w
; ---------------------------------------------------------------------------

loc_8BCDC:
		move.b	#$C,5(a0)
		move.b	#0,$22(a0)
		move.b	#$F,$1E(a0)
		subq.w	#4,$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_8BCF4:
		move.w	$18(a0),d0
		add.w	$40(a0),d0
		move.w	d0,$18(a0)
		beq.s	loc_8BD1C
		bsr.w	sub_8BD88
		cmpi.w	#-2,d1
		blt.s	loc_8BD1C
		cmpi.w	#$C,d1
		bge.s	loc_8BD1C
		add.w	d1,$14(a0)
		jmp	MoveSprite2.w
; ---------------------------------------------------------------------------

loc_8BD1C:

		move.b	#$E,5(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	d0,$2E(a0)
		move.l	#loc_8BB24,$34(a0)
		bchg	#0,4(a0)
		rts
; ---------------------------------------------------------------------------

loc_8BD3C:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

Obj_ICZSnowdust:

		lea	ObjDat3_8BDEE(pc),a1
		jsr	SetUp_ObjAttributes.w
		jsr	Refresh_ChildPositionAdjusted.w
		moveq	#0,d0
		move.b	$2C(a0),d0
		beq.s	loc_8BD6C
		move.l	#Obj_Wait,(a0)
		lsl.w	#2,d0
		subq.w	#1,d0
		move.w	d0,$2E(a0)
		move.l	#loc_8BD6C,$34(a0)

locret_8BD6A:
		rts
; ---------------------------------------------------------------------------

loc_8BD6C:

		move.l	#loc_8BD7A,(a0)
		move.l	#Go_Delete_Sprite,$34(a0)

loc_8BD7A:
		lea	byte_8BE1F(pc),a1
		jsr	Animate_RawNoSST.w
		jmp	Draw_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_8BD88:

		move.w	$18(a0),d3
		ext.l	d3
		lsl.l	#8,d3
		add.l	$10(a0),d3
		swap	d3
		jmp	ObjCheckFloorDist2.w
; End of function sub_8BD88


; =============== S U B R O U T I N E =======================================


sub_8BD9C:
		moveq	#4,d0
		tst.b	d3
		beq.s	loc_8BDAC
		lsr.b	#3,d3
		andi.w	#$F,d3
		move.b	RawAni_8BDB2(pc,d3.w),d0

loc_8BDAC:
		move.b	d0,$22(a0)
		rts
; End of function sub_8BD9C

; ---------------------------------------------------------------------------
RawAni_8BDB2:	dc.b   4,  5,  6,  6,  7,  7,  8,  8,  8,  8,  7,  7,  6,  6,  5,  4

; =============== S U B R O U T I N E =======================================


sub_8BDC2:
		move.w	$2E(a0),d0
		andi.w	#3,d0
		bne.s	locret_8BD6A
		moveq	#-$38,d0
		jsr	Play_Sound_2.w
		lea	ChildObjDat_8BDFA(pc),a2
		jmp	CreateChild1_Normal.w
; End of function sub_8BDC2

; ---------------------------------------------------------------------------
ObjDat4_8BDDC:	dc.w 3
		dc.w $2500
		dc.w $12
		dc.w 0
		dc.l Map_Penguinator
		dc.w prio(5)
		dc.b $14
		dc.b $10
		dc.b 0
		dc.b $1A
ObjDat3_8BDEE:	dc.l Map_ICZSnowdust
		dc.w $2558
		dc.w prio(0)
		dc.b 4
		dc.b $18
		dc.b 0
		dc.b 0
ChildObjDat_8BDFA:dc.w 0
		dc.l Obj_ICZSnowdust
		dc.w $C
DPLCPtr_8BE02:	dc.l ArtUnc_Penguinator
		dc.l DPLC_Penguinator
byte_8BE0A:	dc.b	7, $10
		dc.b	0,   1
		dc.b	0,   2
		dc.b  $FC
byte_8BE11:	dc.b	3,   3
		dc.b	3,   4
		dc.b  $F4
byte_8BE16:	dc.b	3,   8
		dc.b	8,   7
		dc.b	6,   5
		dc.b	4,   3
		dc.b  $F4
byte_8BE1F:	dc.b	0,   0,	  0,   1,   2,	 3,   4,   5,	4,   3,	  2,   1,   0, $F4,   0

; ---------------------------------------------------------------------------

Obj_StarPointer:

		jsr	Obj_WaitOffscreen.w
		lea	ObjDat3_8BF8E(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_8BE74,(a0)
		bclr	#1,4(a0)
		beq.s	loc_8BE50
		bset	#7,$A(a0)

loc_8BE50:
		moveq	#0,d0
		move.b	$2C(a0),d0
		andi.w	#6,d0
		move.w	word_8BE6C(pc,d0.w),d4
		jsr	Set_VelocityXTrackSonic.w
		lea	ChildObjDat_8BFA0(pc),a2
		jmp	CreateChild3_NormalRepeated.w
; ---------------------------------------------------------------------------
word_8BE6C:	dc.w  $FFC0, $FFA0, $FF80, $FF00
; ---------------------------------------------------------------------------

loc_8BE74:
		jsr	MoveSprite2.w
		jsr	Find_SonicTails.w
		cmpi.w	#$80,d2
		bhs.s	loc_8BE92
		btst	#0,4(a0)
		beq.s	loc_8BE8E
		subq.w	#2,d0

loc_8BE8E:
		tst.w	d0
		beq.s	loc_8BE96

loc_8BE92:
		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------

loc_8BE96:
		move.l	#loc_8BEA6,(a0)
		bset	#1,$38(a0)
		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------

loc_8BEA6:
		jsr	MoveSprite2.w
		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------

loc_8BEB0:
		lea	word_8BF9A(pc),a1
		jsr	SetUp_ObjAttributes3.w
		bset	#3,$2B(a0)
		move.b	#8,$1F(a0)
		move.l	#loc_8BEE6,(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		lsr.b	#1,d0
		move.b	byte_8BEE2(pc,d0.w),$3C(a0)
		move.l	#loc_8BF64,$34(a0)
		rts
; ---------------------------------------------------------------------------
byte_8BEE2:	dc.b 0
		dc.b $40
		dc.b $80
		dc.b $C0
; ---------------------------------------------------------------------------

loc_8BEE6:
		btst	#0,(V_int_run_count+3).w
		bne.s	loc_8BF3E
		movea.w	$46(a0),a1
		btst	#0,4(a1)
		beq.s	loc_8BF02
		addq.b	#1,$3C(a0)
		bra.w	loc_8BF06
; ---------------------------------------------------------------------------

loc_8BF02:
		subq.b	#1,$3C(a0)

loc_8BF06:
		bne.s	loc_8BF3E
		btst	#1,$38(a1)
		beq.s	loc_8BF3E
		move.l	#loc_8BF4C,(a0)
		move.w	$18(a1),d0
		asl.w	#1,d0
		move.l	#ObjHitWall_DoRoutine,$30(a0)
		move.w	#8,$44(a0)
		move.w	d0,$18(a0)
		bpl.s	loc_8BF3E
		move.l	#ObjHitWall2_DoRoutine,$30(a0)
		move.w	#-8,$44(a0)

loc_8BF3E:

		bsr.w	sub_8BF80
		moveq	#4,d2
		jsr	MoveSprite_CircularSimple.w
		jmp	Child_DrawTouch_Sprite.w
; ---------------------------------------------------------------------------

loc_8BF4C:
		jsr	MoveSprite2.w
		movea.l	$30(a0),a1
		move.w	$44(a0),d3
		jsr	(a1)
		bsr.w	sub_8BF80
		jmp	Sprite_CheckDeleteTouchXY.w
; ---------------------------------------------------------------------------

loc_8BF64:
		move.l	#loc_8BF74,(a0)
		move.l	#Go_Delete_Sprite,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_8BF74:
		lea	byte_8BFA8(pc),a1
		jsr	Animate_RawNoSST.w
		jmp	Sprite_CheckDeleteTouchXY.w

; =============== S U B R O U T I N E =======================================


sub_8BF80:

		tst.b	$28(a0)
		bne.s	locret_8BF8C
		movea.l	$34(a0),a1
		jsr	(a1)

locret_8BF8C:
		rts
; End of function sub_8BF80

; ---------------------------------------------------------------------------
ObjDat3_8BF8E:	dc.l Map_StarPointer
		dc.w $2548
		dc.w prio(5)
		dc.b 8
		dc.b 8
		dc.b 0
		dc.b $B
word_8BF9A:	dc.w prio(5)
		dc.b 8
		dc.b 8
		dc.b 1
		dc.b $8B
ChildObjDat_8BFA0:dc.w 3
		dc.l loc_8BEB0
		dc.w 0
byte_8BFA8:	dc.b	3,   1,	  2,   3, $F4,	 0
; ---------------------------------------------------------------------------

Obj_SnaleBlaster:

		jsr	Obj_WaitOffscreen.w
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_8BFC6(pc,d0.w),d1
		jsr	off_8BFC6(pc,d1.w)
		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------
off_8BFC6:	dc.w loc_8BFD4-off_8BFC6

		dc.w loc_8BFF2-off_8BFC6
		dc.w loc_8C026-off_8BFC6
		dc.w loc_8C052-off_8BFC6
		dc.w loc_8C0AA-off_8BFC6
		dc.w loc_8C0D4-off_8BFC6
		dc.w loc_8C0F4-off_8BFC6
; ---------------------------------------------------------------------------

loc_8BFD4:
		lea	ObjDat3_8C266(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.w	#$20,$2E(a0)
		move.l	#loc_8C00E,$34(a0)
		lea	ChildObjDat_8C28A(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_8BFF2:
		move.b	#$1A,$28(a0)
		clr.b	$29(a0)
		btst	#1,$38(a0)

loc_8C002:
		bne.s	loc_8C00A
		move.b	#$7F,$29(a0)

loc_8C00A:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_8C00E:
		move.b	#4,5(a0)
		move.l	#byte_8C2B6,$30(a0)
		move.l	#loc_8C030,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_8C026:
		move.b	#$1A,$28(a0)
		jmp	Animate_Raw.w
; ---------------------------------------------------------------------------

loc_8C030:
		move.w	#-2,$40(a0)
		move.l	#byte_8C2C0,$30(a0)

loc_8C03E:
		move.b	#6,5(a0)
		move.b	#2,$39(a0)
		bclr	#1,$38(a0)
		rts
; ---------------------------------------------------------------------------

loc_8C052:
		move.b	#$1A,$28(a0)
		move.b	#$7F,$29(a0)
		bsr.w	sub_8C23C
		jsr	Animate_RawMultiDelay.w
		tst.w	d2
		beq.s	locret_8C088
		moveq	#3,d0
		tst.w	$40(a0)
		bmi.s	loc_8C074
		moveq	#4,d0

loc_8C074:
		cmp.b	$22(a0),d0
		bne.s	locret_8C088
		move.w	$40(a0),d0
		add.w	d0,$14(a0)
		subq.b	#1,$39(a0)
		bmi.s	loc_8C08A

locret_8C088:

		rts
; ---------------------------------------------------------------------------

loc_8C08A:
		move.b	#2,5(a0)
		move.w	#$90,$2E(a0)
		bset	#1,$38(a0)
		move.l	#loc_8C03E,$34(a0)
		neg.w	$40(a0)
		rts
; ---------------------------------------------------------------------------

loc_8C0AA:
		move.b	#$7F,$29(a0)
		subq.b	#1,$22(a0)
		beq.s	loc_8C0B8
		rts
; ---------------------------------------------------------------------------

loc_8C0B8:
		move.b	#$A,5(a0)
		move.b	#$7F,$29(a0)
		move.w	#$3B,$2E(a0)
		move.l	#loc_8C0DE,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_8C0D4:
		move.b	#$7F,$29(a0)
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_8C0DE:
		move.b	#$C,5(a0)
		move.w	#$F,$2E(a0)
		move.l	#loc_8C0F8,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_8C0F4:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_8C0F8:
		move.b	#$1A,$28(a0)
		move.b	#$7F,$29(a0)
		move.w	#2,$2E(a0)
		addq.b	#1,$22(a0)
		cmpi.b	#3,$22(a0)
		blo.s	locret_8C11C
		move.b	#6,5(a0)

locret_8C11C:
		rts
; ---------------------------------------------------------------------------

loc_8C11E:
		jsr	Refresh_ChildPositionAdjusted.w
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_8C134(pc,d0.w),d1
		jsr	off_8C134(pc,d1.w)
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------
off_8C134:	dc.w loc_8C13A-off_8C134

		dc.w loc_8C144-off_8C134
		dc.w loc_8ED3E-off_8C134
; ---------------------------------------------------------------------------

loc_8C13A:
		lea	word_8C272(pc),a1
		jmp	SetUp_ObjAttributes3.w
; ---------------------------------------------------------------------------

loc_8C144:
		movea.w	$46(a0),a1
		btst	#1,$38(a1)
		bne.s	loc_8C152
		rts
; ---------------------------------------------------------------------------

loc_8C152:
		move.b	#4,5(a0)
		move.l	#byte_8C2C5,$30(a0)
		move.l	#loc_8C16A,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_8C16A:
		move.b	#2,5(a0)
		movea.w	$46(a0),a1
		bclr	#1,$38(a1)
		rts
; ---------------------------------------------------------------------------

loc_8C17C:

		jsr	Refresh_ChildPositionAdjusted.w
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_8C192(pc,d0.w),d1
		jsr	off_8C192(pc,d1.w)
		jmp	Child_DrawTouch_Sprite.w
; ---------------------------------------------------------------------------
off_8C192:	dc.w loc_8C19A-off_8C192

		dc.w loc_8C1A4-off_8C192
		dc.w loc_8C1D8-off_8C192
		dc.w loc_8C226-off_8C192
; ---------------------------------------------------------------------------

loc_8C19A:
		lea	word_8C278(pc),a1
		jmp	SetUp_ObjAttributes3.w
; ---------------------------------------------------------------------------

loc_8C1A4:
		movea.w	$46(a0),a1
		btst	#1,$38(a1)
		bne.s	loc_8C1B2
		rts
; ---------------------------------------------------------------------------

loc_8C1B2:
		move.b	#4,5(a0)
		move.l	#byte_8C2D0,$30(a0)
		tst.b	$2C(a0)
		beq.s	loc_8C1CE
		move.l	#byte_8C2D9,$30(a0)

loc_8C1CE:
		move.l	#loc_8C21E,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_8C1D8:
		jsr	Animate_RawMultiDelay.w
		tst.w	d2
		beq.s	locret_8C21C
		bmi.s	locret_8C21C
		cmpi.b	#4,$23(a0)
		bne.s	locret_8C21C
		tst.b	4(a0)
		bpl.s	locret_8C21C
		moveq	#$4D,d0
		jsr	Play_Sound_2.w
		lea	ChildObjDat_8C29E(pc),a2
		jsr	(CreateChild2_Complex).l
		movea.w	$46(a0),a2
		btst	#0,4(a2)
		beq.s	loc_8C212
		neg.w	$18(a1)

loc_8C212:
		tst.b	$2C(a0)
		beq.s	locret_8C21C
		neg.w	$1A(a1)

locret_8C21C:

		rts
; ---------------------------------------------------------------------------

loc_8C21E:
		move.b	#6,5(a0)
		rts
; ---------------------------------------------------------------------------

loc_8C226:
		movea.w	$46(a0),a1
		btst	#1,$38(a1)
		beq.s	loc_8C234
		rts
; ---------------------------------------------------------------------------

loc_8C234:
		move.b	#2,5(a0)
		rts

; =============== S U B R O U T I N E =======================================


sub_8C23C:
		jsr	Find_SonicTails.w
		cmpi.w	#$30,d2
		bhs.s	locret_8C254
		cmpi.w	#$30,d3
		bhs.s	locret_8C254
		cmpi.b	#2,$20(a1)
		beq.s	loc_8C256

locret_8C254:
		rts
; ---------------------------------------------------------------------------

loc_8C256:
		move.b	#8,5(a0)
		move.b	#3,$22(a0)
		addq.w	#4,sp
		rts
; End of function sub_8C23C

; ---------------------------------------------------------------------------
ObjDat3_8C266:	dc.l Map_SnaleBlaster
		dc.w $2524
		dc.w prio(4)
		dc.b $10
		dc.b $10
		dc.b 0
		dc.b $B
word_8C272:	dc.w prio(3)
		dc.b 4
		dc.b $C
		dc.b 5
		dc.b 0
word_8C278:	dc.w prio(4)
		dc.b 4
		dc.b 4
		dc.b 7
		dc.b 0
ObjDat3_8C27E:	dc.l Map_SnaleBlaster
		dc.w $8524
		dc.w prio(4)
		dc.b 4
		dc.b 4
		dc.b 9
		dc.b $98
ChildObjDat_8C28A:dc.w 2
		dc.l loc_8C17C
		dc.w $F800
		dc.l loc_8C17C
		dc.w $F807
		dc.l loc_8C11E
		dc.w $F804
ChildObjDat_8C29E:dc.w 0
		dc.l loc_86D4A
		dc.l ObjDat3_8C27E
		dc.l 0
		dc.l MoveSprite2
		dc.b 0
		dc.b 0
		dc.w $FE00
		dc.w $FF00
byte_8C2B6:	dc.b 5
		dc.b 0
		dc.b 1
		dc.b 2
		dc.b 3
		dc.b 4
		dc.b 4
		dc.b 4
		dc.b 4
		dc.b $F4
byte_8C2C0:	dc.b 4
		dc.b $F
		dc.b 3
		dc.b $F
		dc.b $FC
byte_8C2C5:	dc.b 5
		dc.b 2
		dc.b 6
		dc.b 2
		dc.b $A
		dc.b $5F
		dc.b 6
		dc.b 2
		dc.b 5
		dc.b 2
		dc.b $F4
byte_8C2D0:	dc.b 7
		dc.b 2
		dc.b 7
		dc.b $1F
		dc.b 8
		dc.b 3
		dc.b 7
		dc.b 0
		dc.b $F4
byte_8C2D9:	dc.b 7
		dc.b 2
		dc.b 7
		dc.b $2F
		dc.b 8
		dc.b 3
		dc.b 7
		dc.b 0
		dc.b $F4
; ---------------------------------------------------------------------------

Obj_Ribot:
		jsr	Obj_WaitOffscreen.w
.code		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_8C2FA(pc,d0.w),d1
		jsr	off_8C2FA(pc,d1.w)
		jsr	Sprite_CheckDeleteTouch.w

		tst.b	(End_Of_Level_Flag).w			; NAT: check if title card is showing
		beq.s	.noexp				; if not, skip
		move.l	#Obj_Explosion,(a0)		; load explosion object
		move.b	#6,5(a0)			; no sound
		bset	#7,$2A(a0)			; tell objects we are dead

.noexp		cmp.l	#.code,(a0)			; NAT: check if the object has changed
		beq.s	.rts				; if not, branch
		subq.b	#1,SpecialEnemyCtr.w		; NAT: Decrease enemy counter
.rts		rts
; ---------------------------------------------------------------------------

off_8C2FA:	dc.w loc_8C2FE-off_8C2FA
		dc.w loc_8C34E-off_8C2FA
; ---------------------------------------------------------------------------

loc_8C2FE:
		addq.b	#1,SpecialEnemyCtr.w		; NAT: Increase enemy counter
		lea	ObjDat3_8C5CA(pc),a1
		jsr	SetUp_ObjAttributes.w
		bset	#2,$38(a0)
		move.b	$2C(a0),d0
		subq.b	#2,d0
		beq.s	loc_8C32A
		bpl.s	loc_8C33C
		move.l	#byte_8C626,$30(a0)
		lea	ChildObjDat_8C5E2(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_8C32A:
		move.l	#byte_8C626,$30(a0)
		lea	ChildObjDat_8C5F0(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_8C33C:
		move.l	#byte_8C62C,$30(a0)
		lea	ChildObjDat_8C5FE(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_8C34E:
		bclr	#2,$38(a0)
		beq.s	loc_8C36C
		andi.b	#-4,$38(a0)
		moveq	#0,d0
		bchg	#3,$38(a0)
		beq.s	loc_8C368
		moveq	#1,d0

loc_8C368:
		bset	d0,$38(a0)

loc_8C36C:
		jmp	Animate_Raw.w
; ---------------------------------------------------------------------------

loc_8C370:

		moveq	#0,d2
		movea.w	$46(a0),a1
		move.b	$2C(a1),d2
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_8C38C(pc,d0.w),d1
		jsr	off_8C38C(pc,d1.w)
		jmp	Child_DrawTouch_Sprite.w
; ---------------------------------------------------------------------------
off_8C38C:	dc.w loc_8C396-off_8C38C

		dc.w loc_8C3BC-off_8C38C
		dc.w loc_8C428-off_8C38C
		dc.w loc_8C48E-off_8C38C
		dc.w loc_8C4BA-off_8C38C
; ---------------------------------------------------------------------------

loc_8C396:
		lea	word_8C5D6(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.b	#8,$1E(a0)
		move.b	#-$10,$43(a0)
		move.w	$10(a0),$3E(a0)
		move.w	$14(a0),$40(a0)
		bra.w	loc_8C594
; ---------------------------------------------------------------------------

loc_8C3BC:
		move.w	off_8C3C4(pc,d2.w),d3
		jmp	off_8C3C4(pc,d3.w)
; ---------------------------------------------------------------------------
off_8C3C4:	dc.w loc_8C3CA-off_8C3C4

		dc.w loc_8C3EC-off_8C3C4
		dc.w loc_8C41E-off_8C3C4
; ---------------------------------------------------------------------------

loc_8C3CA:
	; NAT: Check if parent has moved
		move.w	$14(a1),d0
		sub.w	$40(a0),d0
		add.w	d0,$40(a0)
		add.w	d0,$14(a0)

		moveq	#0,d0
		tst.b	$2C(a0)
		bne.s	loc_8C3D4
		moveq	#1,d0

loc_8C3D4:
		btst	d0,$38(a1)
		bne.s	loc_8C3DC
		rts
; ---------------------------------------------------------------------------

loc_8C3DC:
		move.b	#4,5(a0)
		move.l	#loc_8C456,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_8C3EC:
		moveq	#0,d0
		move.w	#$400,d1
		tst.b	$2C(a0)
		bne.s	loc_8C3FC
		moveq	#1,d0
		neg.w	d1

loc_8C3FC:
		btst	d0,$38(a1)
		bne.s	loc_8C404

locret_8C402:
		rts
; ---------------------------------------------------------------------------

loc_8C404:
		move.b	#4,5(a0)
		move.w	d1,$18(a0)
		move.w	#$F,$2E(a0)
		move.l	#loc_8C46A,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_8C41E:
		addq.b	#2,$3C(a0)
		moveq	#2,d2
		jmp	MoveSprite_CircularSimpleOffset(pc)
; ---------------------------------------------------------------------------

loc_8C428:
		move.w	off_8C430(pc,d2.w),d3
		jmp	off_8C430(pc,d3.w)
; ---------------------------------------------------------------------------
off_8C430:	dc.w loc_8C436-off_8C430

		dc.w loc_8C484-off_8C430
		dc.w loc_8C436-off_8C430
; ---------------------------------------------------------------------------

loc_8C436:
	; NAT: Check if parent has moved
		move.w	$14(a1),d0
		sub.w	$40(a0),d0
		add.w	d0,$40(a0)
		add.w	d0,$14(a0)

		move.w	$14(a0),d0
		sub.w	$40(a0),d0
		cmpi.w	#$80,d0
		bhs.s	loc_8C46A
		jsr	MoveSprite.w
		tst.w	$1A(a0)
		bmi.s	locret_8C482
		jmp	ObjHitFloor_DoRoutine.w
; ---------------------------------------------------------------------------

loc_8C456:
		move.w	$1A(a0),d0
		cmpi.w	#$100,d0
		blo.s	loc_8C46A
		asr.w	#2,d0
		neg.w	d0
		move.w	d0,$1A(a0)
		rts
; ---------------------------------------------------------------------------

loc_8C46A:
		move.b	#6,5(a0)
		move.w	#$10,$2E(a0)
		move.l	#loc_8C4A0,$34(a0)
		clr.w	$1A(a0)

locret_8C482:
		rts
; ---------------------------------------------------------------------------

loc_8C484:
		jsr	MoveSprite2.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_8C48E:
	; NAT: Check if parent has moved
		move.w	$14(a1),d0
		sub.w	$40(a0),d0
		add.w	d0,$40(a0)
		add.w	d0,$14(a0)
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_8C4A0:
		move.b	#8,5(a0)
		neg.w	$18(a0)
		move.w	#$F,$2E(a0)
		move.l	#loc_8C4DA,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_8C4BA:
		move.w	off_8C4C2(pc,d2.w),d3
		jmp	off_8C4C2(pc,d3.w)
; ---------------------------------------------------------------------------
off_8C4C2:	dc.w loc_8C4C8-off_8C4C2

		dc.w loc_8C4F8-off_8C4C2
		dc.w loc_8C4C8-off_8C4C2
; ---------------------------------------------------------------------------

loc_8C4C8:
	; NAT: Check if parent has moved
		move.w	$14(a1),d0
		sub.w	$40(a0),d0
		add.w	d0,$40(a0)
		add.w	d0,$14(a0)

		move.w	$14(a0),d0
		subq.w	#2,d0
		cmp.w	$40(a0),d0
		bls.s	loc_8C4DA
		move.w	d0,$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_8C4DA:
		move.b	#2,5(a0)
		move.w	$3E(a0),$10(a0)
		move.w	$40(a0),$14(a0)
		movea.w	$46(a0),a1
		bset	#2,$38(a1)
		rts
; ---------------------------------------------------------------------------

loc_8C4F8:
		jsr	MoveSprite2.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_8C502:

		lea	word_8C5DC(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_8C522,(a0)
		move.w	$10(a0),$3E(a0)
		move.w	$14(a0),$40(a0)

	; NAT: we need to get the position of the Ribot in order to translate the y-position if it moves
		movea.w	$46(a0),a1
		movea.w	$46(a1),a1
		move.w	$14(a1),$3A(a0)
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_8C522:
		movea.w	$46(a0),a1		; NAT: Get parent to a1
		movea.w	$46(a1),a2		; get its parent to a2
		move.w	$14(a2),d0		; load y-pos to d0
		sub.w	$3A(a0),d0		; sub the old value from d0
		add.w	d0,$40(a0)		; add it to original y-pos
		add.w	d0,$3A(a0)		; also offset the old object y-pos (aka save it)

		move.w	$10(a1),d2
		move.w	$14(a1),d3
		sub.w	$3E(a0),d2
		sub.w	$40(a0),d3
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	off_8C548(pc,d0.w),d1
		jsr	off_8C548(pc,d1.w)
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------
off_8C548:	dc.w loc_8C54E-off_8C548

		dc.w loc_8C568-off_8C548
		dc.w loc_8C57E-off_8C548
; ---------------------------------------------------------------------------

loc_8C54E:
		asr.w	#2,d2
		neg.w	d2
		add.w	$10(a1),d2
		move.w	d2,$10(a0)
		asr.w	#2,d3
		neg.w	d3
		add.w	$14(a1),d3
		move.w	d3,$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_8C568:
		asr.w	#1,d2
		add.w	$3E(a0),d2
		move.w	d2,$10(a0)
		asr.w	#1,d3
		add.w	$40(a0),d3
		move.w	d3,$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_8C57E:
		asr.w	#2,d2
		add.w	$3E(a0),d2
		move.w	d2,$10(a0)
		asr.w	#2,d3
		add.w	$40(a0),d3
		move.w	d3,$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_8C594:
		movea.w	$46(a0),a1
		move.b	$2C(a1),d0
		subq.b	#2,d0
		beq.s	loc_8C5AC
		bpl.s	loc_8C5C0
		lea	ChildObjDat_8C606(pc),a2
		jmp	CreateChild3_NormalRepeated.w
; ---------------------------------------------------------------------------

loc_8C5AC:
		lea	ChildObjDat_8C60E(pc),a2
		tst.b	$2C(a0)
		beq.s	loc_8C5BA
		lea	ChildObjDat_8C616(pc),a2

loc_8C5BA:
		jmp	CreateChild3_NormalRepeated.w
; ---------------------------------------------------------------------------

loc_8C5C0:
		lea	ChildObjDat_8C61E(pc),a2
		jmp	CreateChild3_NormalRepeated.w
; ---------------------------------------------------------------------------
ObjDat3_8C5CA:	dc.l Map_Ribot
		dc.w $2547
		dc.w prio(5)
		dc.b $10
		dc.b $C
		dc.b 0
		dc.b $B
word_8C5D6:	dc.w prio(4)
		dc.b 8
		dc.b 8
		dc.b 7
		dc.b $97
word_8C5DC:	dc.w prio(4)
		dc.b 4
		dc.b 4
		dc.b 6
		dc.b 0
ChildObjDat_8C5E2:dc.w 1
		dc.l loc_8C370
		dc.w $F40C
		dc.l loc_8C370
		dc.w $C0C
ChildObjDat_8C5F0:dc.w 1
		dc.l loc_8C370
		dc.w $E800
		dc.l loc_8C370
		dc.w $1800
ChildObjDat_8C5FE:dc.w 0
		dc.l loc_8C370
		dc.w $F0
ChildObjDat_8C606:dc.w 2
		dc.l loc_8C502
		dc.w $F4
ChildObjDat_8C60E:dc.w 2
		dc.l loc_8C502
		dc.w $C00
ChildObjDat_8C616:dc.w 2
		dc.l loc_8C502
		dc.w $F400
ChildObjDat_8C61E:dc.w 2
		dc.l loc_8C502
		dc.w 0
byte_8C626:	dc.b 7

		dc.b 0
		dc.b 1
		dc.b 2
		dc.b 1
		dc.b $FC
byte_8C62C:	dc.b 7
		dc.b 3
		dc.b 4
		dc.b 5
		dc.b 4
		dc.b $FC
; ---------------------------------------------------------------------------

Obj_Orbinaut:

		jsr	Obj_WaitOffscreen.w
.code		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_8C64A(pc,d0.w),d1
		jsr	off_8C64A(pc,d1.w)
		jsr	Sprite_CheckDeleteTouch.w

		tst.b	(End_Of_Level_Flag).w			; NAT: check if title card is showing
		beq.s	.noexp				; if not, skip
		move.l	#Obj_Explosion,(a0)		; load explosion object
		move.b	#6,5(a0)			; no sound
		bset	#7,$2A(a0)			; tell objects we are dead

.noexp		cmp.l	#.code,(a0)			; NAT: check if the object has changed
		beq.s	.rts				; if not, branch
		subq.b	#1,SpecialEnemyCtr.w		; NAT: Decrease enemy counter
.rts		rts
; ---------------------------------------------------------------------------
off_8C64A:	dc.w loc_8C64E-off_8C64A
		dc.w loc_8C662-off_8C64A
; ---------------------------------------------------------------------------

loc_8C64E:
		addq.b	#1,SpecialEnemyCtr.w		; NAT: Increase enemy counter
		lea	ObjDat3_8C6F2(pc),a1
		jsr	SetUp_ObjAttributes.w
		lea	ChildObjDat_8C704(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_8C662:
		move.w	Player_1+x_pos.w,d0		; NAT: Choose who to track
		sub.w	x_pos(a0),d0
		bpl.s	.abs1x
		neg.w	d0
.abs1x		lsr.w	#1,d0

		move.w	Player_1+y_pos.w,d2
		sub.w	y_pos(a0),d2
		bpl.s	.abs1y
		neg.w	d2
.abs1y		add.w	d2,d0

		move.w	Player_2+x_pos.w,d1
		sub.w	x_pos(a0),d1
		bpl.s	.abs2x
		neg.w	d1
.abs2x		lsr.w	#1,d1

		move.w	Player_2+y_pos.w,d2
		sub.w	y_pos(a0),d2
		bpl.s	.abs2y
		neg.w	d2
.abs2y		add.w	d2,d1

		lea	(Player_1).w,a1
		cmp.w	d1,d0
		ble.s	.trakcsonic
		lea	(Player_2).w,a1

.trakcsonic	jsr	Find_OtherObject.w
		bclr	#0,4(a0)
		move.w	#-$80,d1
		tst.w	d0
		beq.s	loc_8C680
		bset	#0,4(a0)
		neg.w	d1

loc_8C680:
		bsr.w	sub_8C6D4
		move.w	d1,$18(a0)
		jmp	MoveSprite2.w
; ---------------------------------------------------------------------------

loc_8C692:

		lea	word_8C6FE(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_8C6B0,(a0)
		move.b	$2C(a0),d0
		lsl.b	#5,d0
		move.b	d0,$3C(a0)
		jmp	Child_DrawTouch_Sprite.w
; ---------------------------------------------------------------------------

loc_8C6B0:
		movea.w	$46(a0),a1
		bsr.w	sub_8C6D4
		beq.s	loc_8C6CA
		moveq	#8,d0
		btst	#0,4(a1)
		beq.s	loc_8C6C6
		moveq	#-8,d0

loc_8C6C6:
		add.b	d0,$3C(a0)

loc_8C6CA:
		moveq	#4,d2
		jsr	MoveSprite_CircularSimple.w
		jmp	Child_DrawTouch_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_8C6D4:
		btst	#1,$2A(a1)
		bne.s	loc_8C6EC
		tst.w	$18(a1)
		bne.s	locret_8C6F0
		tst.w	$1A(a1)
		bne.s	locret_8C6F0

loc_8C6EC:
		moveq	#0,d1

locret_8C6F0:
		rts

; ---------------------------------------------------------------------------
ObjDat3_8C6F2:	dc.l Map_Orbinaut
		dc.w $256E
		dc.w prio(5)
		dc.b 8
		dc.b 8
		dc.b 0
		dc.b $B
word_8C6FE:	dc.w prio(5)
		dc.b 8
		dc.b 8
		dc.b 1
		dc.b $8B
ChildObjDat_8C704:dc.w 3
		dc.l loc_8C692
		dc.w $10
		dc.l loc_8C692
		dc.w $1000
		dc.l loc_8C692
		dc.w $F0
		dc.l loc_8C692
		dc.b $F0
		dc.b 0
		dc.b 0
		dc.b 5
		dc.b 1
		dc.b 5
		dc.b 2
		dc.b 5
		dc.b 3
		dc.b 5
		dc.b $FC
		dc.b 0
; ---------------------------------------------------------------------------

Obj_Corkey:
		jsr	Obj_WaitOffscreen.w
.code		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_8C740(pc,d0.w),d1
		jsr	off_8C740(pc,d1.w)
		jsr	Sprite_CheckDeleteTouch.w

		tst.b	(End_Of_Level_Flag).w			; NAT: check if title card is showing
		beq.s	.noexp				; if not, skip
		move.l	#Obj_Explosion,(a0)		; load explosion object
		move.b	#6,5(a0)			; no sound
		bset	#7,$2A(a0)			; tell objects we are dead

.noexp		cmp.l	#.code,(a0)			; NAT: check if the object has changed
		beq.s	.rts				; if not, branch
		subq.b	#1,SpecialEnemyCtr.w		; NAT: Decrease enemy counter
.rts		rts

; ---------------------------------------------------------------------------
off_8C740:	dc.w loc_8C746-off_8C740
		dc.w loc_8C79C-off_8C740
		dc.w loc_8C7CC-off_8C740
		dc.w Obj_Corkey_NatSpec-off_8C740	; NAT: Special mode
; ---------------------------------------------------------------------------

loc_8C746:
		addq.b	#1,SpecialEnemyCtr.w		; NAT: Increase enemy counter
		lea	ObjDat3_8C8F4(pc),a1
		jsr	SetUp_ObjAttributes.w
		moveq	#-1,d0
		btst	#0,4(a0)
		beq.s	loc_8C75C
		neg.w	d0

loc_8C75C:
		move.w	d0,$40(a0)
		move.b	$2C(a0),d0

		cmp.b	#$FF,d0			; NAT: Special flag
		bne.s	.nots			; if not, branch
		move.b	#6,5(a0)		; new routine
		and.w	#$FFFE,x_pos(a0)	; just to be sure :V
		moveq	#$28,d0			; load subtype

.nots		move.b	d0,$2F(a0)
		move.l	#loc_8C7BC,$34(a0)
		add.b	d0,d0
		move.b	d0,$2C(a0)
		lea	ChildObjDat_8C90E(pc),a2
		jsr	CreateChild1_Normal.w

loc_8C780:
		jsr	Random_Number.w
		andi.w	#$3F,d0
		move.w	d0,d1
		andi.w	#$30,d1
		bne.s	loc_8C796
		ori.w	#$30,d0

loc_8C796:
		move.w	d0,$3A(a0)
		rts
; ---------------------------------------------------------------------------

Obj_Corkey_NatSpec:
		move.w	Camera_X_Pos.w,d0		; NAT: Load camera x to d0
		add.w	#320/2,d0			; load centre
		moveq	#-2,d1				; move by 2px

		cmp.w	x_pos(a0),d0			; check if obj is centered
		bne.s	.nostop				; branch if not stop
		move.b	#2,5(a0)			; new routine
		rts

.nostop		bmi.s	.noneg				; if object is to the left of the screen, branch
		neg.w	d1				; negate offset
.noneg		add.w	d1,x_pos(a0)			; offset x-pos
		rts
; ---------------------------------------------------------------------------

loc_8C79C:
		subq.w	#1,$3A(a0)
		bmi.s	loc_8C7AE
		move.w	$40(a0),d0
		add.w	d0,$10(a0)
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_8C7AE:
		move.b	#4,5(a0)
		bset	#1,$38(a0)
		rts
; ---------------------------------------------------------------------------

loc_8C7BC:
		neg.w	$40(a0)
		clr.b	$2E(a0)
		move.b	$2C(a0),$2F(a0)
		rts
; ---------------------------------------------------------------------------

loc_8C7CC:
		btst	#1,$38(a0)
		beq.s	loc_8C7D6
		rts
; ---------------------------------------------------------------------------

loc_8C7D6:
		move.b	#2,5(a0)
		bra.s	loc_8C780
; ---------------------------------------------------------------------------

loc_8C7DE:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_8C7F0(pc,d0.w),d1
		jsr	off_8C7F0(pc,d1.w)
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------
off_8C7F0:	dc.w loc_8C7F8-off_8C7F0

		dc.w loc_8C802-off_8C7F0
		dc.w loc_8C82C-off_8C7F0
		dc.w loc_8C8A8-off_8C7F0
; ---------------------------------------------------------------------------

loc_8C7F8:
		lea	word_8C900(pc),a1
		jmp	SetUp_ObjAttributes3.w
; ---------------------------------------------------------------------------

loc_8C802:
		jsr	Refresh_ChildPositionAdjusted.w
		movea.w	$46(a0),a1
		btst	#1,$38(a1)
		beq.s	locret_8C82A
		move.b	#4,5(a0)
		move.l	#loc_8C88C,$34(a0)
		move.l	#byte_8C92E,$30(a0)

locret_8C82A:
		rts
; ---------------------------------------------------------------------------

loc_8C82C:
		jsr	Animate_RawGetFaster.w
		tst.w	d2
		bpl.s	locret_8C84E
		cmpi.b	#4,$2F(a0)
		beq.s	loc_8C850
		cmpi.b	#5,$2F(a0)
		beq.s	loc_8C864
		cmpi.b	#6,$2F(a0)
		beq.s	loc_8C878

locret_8C84E:
		rts
; ---------------------------------------------------------------------------

loc_8C850:
		lea	ChildObjDat_8C916(pc),a2
		jsr	CreateChild1_Normal.w
		move.l	#byte_8C933,$30(a1)
		rts
; ---------------------------------------------------------------------------

loc_8C864:
		lea	ChildObjDat_8C91E(pc),a2
		jsr	CreateChild1_Normal.w
		move.l	#byte_8C93C,$30(a1)
		rts
; ---------------------------------------------------------------------------

loc_8C878:
		lea	ChildObjDat_8C926(pc),a2
		jsr	CreateChild1_Normal.w
		move.l	#byte_8C945,$30(a1)
		rts
; ---------------------------------------------------------------------------

loc_8C88C:
		move.b	#6,5(a0)
		move.b	#2,$22(a0)
		move.w	#7,$2E(a0)
		move.l	#loc_8C8AE,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_8C8A8:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_8C8AE:
		move.b	#2,5(a0)
		move.b	#1,$22(a0)
		movea.w	$46(a0),a1
		bclr	#1,$38(a1)
		rts
; ---------------------------------------------------------------------------

loc_8C8C6:

		lea	word_8C906(pc),a1
		jsr	SetUp_ObjAttributes2.w
		move.l	#loc_8C8E6,(a0)
		move.l	#Go_Delete_Sprite,$34(a0)
		moveq	#$5E,d0
		jsr	Play_Sound_2.w

loc_8C8E6:
		addq.w	#1,$3A(a0)
		jsr	Animate_RawMultiDelay.w
		jmp	Child_DrawTouch_Sprite.w
; ---------------------------------------------------------------------------
ObjDat3_8C8F4:	dc.l Map_Corkey
		dc.w $2558
		dc.w prio(5)
		dc.b $10
		dc.b $C
		dc.b 0
		dc.b $B
word_8C900:	dc.w prio(5)
		dc.b 8
		dc.b 4
		dc.b 1
		dc.b 0
word_8C906:	dc.w $558
		dc.w prio(5)
		dc.b 4
		dc.b $50
		dc.b 0
		dc.b $A0
ChildObjDat_8C90E:dc.w 0
		dc.l loc_8C7DE
		dc.w $C
ChildObjDat_8C916:dc.w 0
		dc.l loc_8C8C6
		dc.w $FC54
ChildObjDat_8C91E:dc.w 0
		dc.l loc_8C8C6
		dc.w $454
ChildObjDat_8C926:dc.w 0
		dc.l loc_8C8C6
		dc.w $54
byte_8C92E:	dc.b 7
		dc.b $10
		dc.b 1
		dc.b 3
		dc.b $FC
byte_8C933:	dc.b 6
		dc.b 0
		dc.b 6
		dc.b 0
		dc.b 7
		dc.b 4
		dc.b 5
		dc.b 0
		dc.b $F4
byte_8C93C:	dc.b 5
		dc.b 0
		dc.b 5
		dc.b 0
		dc.b 7
		dc.b 4
		dc.b 6
		dc.b 0
		dc.b $F4
byte_8C945:	dc.b 4
		dc.b 0
		dc.b 5
		dc.b 0
		dc.b 7
		dc.b 0
		dc.b 4
		dc.b 0
		dc.b 5
		dc.b 0
		dc.b 7
		dc.b 0
		dc.b 4
		dc.b 0
		dc.b 5
		dc.b 0
		dc.b 7
		dc.b 0
		dc.b 4
		dc.b 0
		dc.b 5
		dc.b 0
		dc.b 7
		dc.b 0
		dc.b 4
		dc.b 0
		dc.b 5
		dc.b 0
		dc.b 7
		dc.b 0
		dc.b 6
		dc.b 3
		dc.b $F4
; ---------------------------------------------------------------------------

Obj_Flybot767:
		jsr	Obj_WaitOffscreen.w
.code		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_8C988(pc,d0.w),d1
		jsr	off_8C988(pc,d1.w)
		lea	DPLCPtr_8CB22(pc),a2
		jsr	Perform_DPLC.w
		jsr	Sprite_CheckDeleteTouchSlotted.w

		cmp.l	#.code,(a0)			; NAT: check if the object has changed
		beq.s	.rts				; if not, branch
		subq.b	#1,SpecialEnemyCtr.w		; NAT: Decrease enemy counter
.rts		rts

; ---------------------------------------------------------------------------
off_8C988:	dc.w loc_8C994-off_8C988

		dc.w loc_8C9B2-off_8C988
		dc.w loc_8CA16-off_8C988
		dc.w loc_8CA60-off_8C988
		dc.w loc_8CA96-off_8C988
		dc.w loc_8CADA-off_8C988
; ---------------------------------------------------------------------------

loc_8C994:
		lea	ObjDat4_8CB10(pc),a1
		jsr	SetUp_ObjAttributesSlotted.w
		move.l	#byte_8CB2A,$30(a0)
		move.b	#0,$42(a0)
		move.b	#-$40,$43(a0)
		addq.b	#1,SpecialEnemyCtr.w		; NAT: Increase enemy counter
		rts
; ---------------------------------------------------------------------------

loc_8C9B2:
		move.w	parent3(a0),a1
		move.w	#$200,d0
		moveq	#$10,d1
		jsr	Chase_ObjectXOnly(pc)
		move.w	#$100,d0
		moveq	#$10,d1
		jsr	Chase_ObjectYOnly(pc)
		jsr	MoveSprite2.w
		move.w	parent3(a0),a1
		jsr	Find_OtherObject.w
		tst.w	d1
		beq.s	loc_8C9E2
		cmpi.w	#$60,d2
		blo.s	loc_8C9EC

loc_8C9E2:
		jsr	Change_FlipXWithVelocity.w
		jmp	Animate_Raw.w
; ---------------------------------------------------------------------------

loc_8C9EC:
		move.b	#4,5(a0)
		clr.w	$1A(a0)
		move.w	$14(a0),$44(a0)
		clr.b	$23(a0)
		clr.b	$24(a0)
		move.l	#byte_8CB36,$30(a0)
		move.l	#loc_8CA22,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_8CA16:
		jsr	MoveSprite2.w
		jmp	Animate_Raw.w
; ---------------------------------------------------------------------------

loc_8CA22:
		move.b	#6,5(a0)
		move.w	parent3(a0),a1
		jsr	Find_OtherObject.w
		move.w	#$200,d1
		bset	#0,4(a0)
		tst.w	d0
		bne.s	loc_8CA46
		neg.w	d1
		bclr	#0,4(a0)

loc_8CA46:
		move.w	d1,$18(a0)
		move.l	#byte_8CB3F,$30(a0)
		move.w	#$200,$1A(a0)
		move.w	#$20,$2E(a0)
		rts
; ---------------------------------------------------------------------------

loc_8CA60:
		jsr	MoveSprite2.w
		subq.w	#1,$2E(a0)
		bpl.s	loc_8CA74
		jsr	Find_SonicTails.w
		tst.w	d1
		beq.s	loc_8CA7A

loc_8CA74:
		jmp	Animate_Raw.w
; ---------------------------------------------------------------------------

loc_8CA7A:
		move.b	#8,5(a0)
		move.l	#byte_8CB4B,$30(a0)
		clr.b	$23(a0)
		clr.b	$24(a0)
		neg.w	$1A(a0)
		rts
; ---------------------------------------------------------------------------

loc_8CA96:
		jsr	MoveSprite2.w
		move.w	$14(a0),d0
		cmp.w	$44(a0),d0
		blo.s	loc_8CAAC
		jmp	Animate_Raw.w
; ---------------------------------------------------------------------------

loc_8CAAC:
		move.b	#$A,5(a0)
		move.l	#byte_8CB2A,$30(a0)
		clr.b	$23(a0)
		clr.b	$24(a0)
		clr.w	$18(a0)
		clr.w	$1A(a0)
		move.w	#$1F,$2E(a0)
		move.l	#loc_8CB08,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_8CADA:
		move.w	parent3(a0),a1
		move.w	#$200,d0
		moveq	#$10,d1
		jsr	Chase_ObjectXOnly(pc)
		move.w	#$100,d0
		moveq	#$10,d1
		jsr	Chase_ObjectYOnly(pc)
		jsr	MoveSprite2.w
		jsr	Change_FlipXWithVelocity.w
		jsr	Animate_Raw.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_8CB08:
		move.b	#2,5(a0)
		rts
; ---------------------------------------------------------------------------
ObjDat4_8CB10:	dc.w 2
		dc.w $A500
		dc.w $C
		dc.w 0
		dc.l Map_Flybot767
		dc.w prio(5)
		dc.b $10
		dc.b $10
		dc.b 0
		dc.b $1A
DPLCPtr_8CB22:	dc.l ArtUnc_Flybot
		dc.l DPLC_Flybot
byte_8CB2A:	dc.b 4

		dc.b 0
		dc.b 1
		dc.b 2
		dc.b 3
		dc.b 4
		dc.b 5
		dc.b 6
		dc.b 7
		dc.b 8
		dc.b 9
		dc.b $FC
byte_8CB36:	dc.b 2
		dc.b $A
		dc.b $A
		dc.b $B
		dc.b $C
		dc.b $D
		dc.b $E
		dc.b $F
		dc.b $F4
byte_8CB3F:	dc.b 3
		dc.b $10
		dc.b $10
		dc.b $11
		dc.b $12
		dc.b $13
		dc.b $F8
		dc.b 8
		dc.b 3
		dc.b $13
		dc.b $13
		dc.b $FC
byte_8CB4B:	dc.b 3
		dc.b $A
		dc.b $A
		dc.b $14
		dc.b $F8
		dc.b 6
		dc.b 3
		dc.b $14
		dc.b $14
		dc.b $FC
		dc.b 0
; ---------------------------------------------------------------------------

Obj_C3_1:
		cmpi.b	#2,(Player_1+character_id).w
		beq.s	loc_8CB90
		lea	word_8CB96(pc),a1
		jsr	Check_CameraInRange(pc)
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_8CB80(pc,d0.w),d1
		jsr	off_8CB80(pc,d1.w)
		jsr	(sub_8D1FC).l
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------
off_8CB80:	dc.w loc_8CB9E-off_8CB80

		dc.w loc_8CBF2-off_8CB80
		dc.w loc_8CC2E-off_8CB80
		dc.w loc_8CC5A-off_8CB80
		dc.w loc_8CC84-off_8CB80
		dc.w loc_8CCB4-off_8CB80
		dc.w loc_8CCE8-off_8CB80
		dc.w loc_8CD30-off_8CB80
; ---------------------------------------------------------------------------

loc_8CB90:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------
word_8CB96:	dc.w   $500,  $5E0, $3820, $3AC0
; ---------------------------------------------------------------------------

loc_8CB9E:
		lea	ObjDat3_8D230(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.b	#$7F,$29(a0)
		st	(__u_FAAB).w
		jsr	Swing_Setup1.w
		move.w	#$3820,(Camera_min_X_pos).w
		move.w	#$3AE8,(Camera_max_X_pos).w
		moveq	#$60,d0
		jsr	Load_PLC.w
		lea	(ArtKosM_LBZMinibossBox).l,a1
		move.w	#-$7540,d2
		jsr	Queue_Kos_Module.w
		lea	(Child1_MakeRoboHead3).l,a2
		jsr	CreateChild1_Normal.w
		lea	ChildObjDat_8D254(pc),a2
		jmp	CreateChild3_NormalRepeated.w
; ---------------------------------------------------------------------------

loc_8CBF2:
		lea	(Player_1).w,a1		; NAT: Check both players
		bsr.s	.chk
		lea	(Player_2).w,a1
		bsr.s	.chk
		jsr	Swing_UpAndDown.w
		jmp	MoveSprite2.w

.chk		jsr	Find_OtherObject.w
		tst.w	d1
		beq.s	loc_8CC20

loc_8CC00:
		cmpi.w	#$70,d2
		bhs.s	loc_8CC14
		cmpi.w	#$60,d3
		bhs.s	loc_8CC14
		btst	#1,$2A(a1)
		beq.s	loc_8CC20

loc_8CC14:
		rts
; ---------------------------------------------------------------------------

loc_8CC20:
		addq.w	#4,sp			; NAT: do not return
		move.b	#4,5(a0)
		move.w	#-$400,$1A(a0)
		rts
; ---------------------------------------------------------------------------

loc_8CC2E:
		cmpi.w	#$300,$14(a0)
		blo.s	loc_8CC3C
		jmp	MoveSprite2.w
; ---------------------------------------------------------------------------

loc_8CC3C:
		move.b	#6,5(a0)
		bset	#0,4(a0)
		move.w	#$3EC0,$10(a0)
		move.w	#$1A0,$14(a0)
		jmp	Swing_Setup1.w
; ---------------------------------------------------------------------------

loc_8CC5A:
		cmpi.w	#$3B40,(Camera_X_pos).w
		blo.s	locret_8CC76
		lea	(Player_2).w,a2		; NAT: I dont even
		lea	(Player_1).w,a1
		cmpi.w	#$1C0,$14(a2)
		blo.s	.sunak
		btst	#1,$2A(a2)
		beq.s	loc_8CC78


.sunak		cmpi.w	#$1C0,$14(a1)
		blo.s	locret_8CC76
		btst	#1,$2A(a1)
		beq.s	loc_8CC78

locret_8CC76:

		rts
; ---------------------------------------------------------------------------

loc_8CC78:
		move.b	#8,5(a0)
		st	(ScrEvents_1).w
		rts
; ---------------------------------------------------------------------------

loc_8CC84:
		tst.w	(ScrEvents_1).w
		beq.s	loc_8CC8C
		rts
; ---------------------------------------------------------------------------

loc_8CC8C:
		move.b	#$A,5(a0)
		lea	(ArtKosM_LBZMinibossBox).l,a1
		move.w	#-$7540,d2
		jsr	Queue_Kos_Module.w
		move.w	#$3EA0,(__u_FA92).w
		lea	Child6_IncLevX.w,a2
		jmp	CreateChild6_Simple.w
; ---------------------------------------------------------------------------

loc_8CCB4:
		move.w	(Camera_X_pos).w,d0
	;	cmpi.w	#$3E50,d0		; NAT: Do not move camera min pos
	;	bhs.s	loc_8CCC2
		move.w	#$3B60,(Camera_min_X_pos).w

loc_8CCC2:
		jsr	Find_SonicTails.w
		cmpi.w	#$60,d2
		blo.s	loc_8CCDA
		jsr	Swing_UpAndDown.w
		jmp	MoveSprite2.w
; ---------------------------------------------------------------------------

loc_8CCDA:
		move.b	#$C,5(a0)
		move.w	#-$400,$1A(a0)
		move.w	#$3DC0,(Camera_min_X_pos).w
		rts
; ---------------------------------------------------------------------------

loc_8CCE8:
		cmpi.w	#$12C,$14(a0)
		bls.s	loc_8CCF6
		jmp	MoveSprite2.w
; ---------------------------------------------------------------------------

loc_8CCF6:
		move.b	#$E,5(a0)
		move.w	#$12C,$14(a0)
		bset	#1,$38(a0)
		move.w	#$200,$18(a0)
		move.w	#$200,$1A(a0)
		lea	(ArtKosM_LBZMiniboss).l,a1
		move.w	#-$6540,d2
		jsr	Queue_Kos_Module.w
		lea	(Child1_MakeRoboShipFlame).l,a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_8CD30:
		jsr	MoveSprite2.w
		cmpi.w	#$1B8,$14(a0)
		bhs.s	loc_8CD40
		rts
; ---------------------------------------------------------------------------

loc_8CD40:
		move.l	#loc_8CD4C,(a0)
		clr.w	$1A(a0)
		rts
; ---------------------------------------------------------------------------

loc_8CD4C:
		jsr	MoveSprite2.w
		jsr	(sub_8D1FC).l
		jmp	Sprite_CheckDeleteTouch2.w
; ---------------------------------------------------------------------------

loc_8CD5C:
		move.l	#loc_8CD6C,(a0)
		lea	ChildObjDat_8D25C(pc),a2
		jmp	CreateChild3_NormalRepeated.w
; ---------------------------------------------------------------------------

loc_8CD6C:
		movea.w	$46(a0),a1
		btst	#1,$38(a1)
		beq.s	loc_8CD92
		move.l	#Obj_Wait,(a0)
		move.w	#$1F,$2E(a0)
		move.l	#loc_8CD98,$34(a0)
		move.w	#$160,$14(a0)

loc_8CD92:
		jmp	Refresh_ChildPosition.w
; ---------------------------------------------------------------------------

loc_8CD98:
		btst	#5,OptionsBits.w		; NAT: Check if bosses are on
		beq.s	loc_8CD9C			; if not, branch
		bsr.w	sub_8D116

loc_8CD9C:
		bset	#3,$38(a0)
		btst	#5,OptionsBits.w		; NAT: Check if bosses are on
		beq.s	.noboss				; if not, branch

		moveq	#$50,d0
		jsr	Play_Sound_2.w
		move.b	#$80,BossHitMode.w		; NAT: Enable hit mode
		clr.w	BossHitsP1.w			; clear hits count

.noboss		lea	ChildObjDat_8D264(pc),a2
		jsr	CreateChild1_Normal.w
		jmp	Go_Delete_Sprite_2.w
; ---------------------------------------------------------------------------

Obj_C4_1:
		cmpi.b	#2,(Player_1+character_id).w
		beq.s	loc_8CDEA
		tst.b	(__u_FAAB).w
		bne.s	loc_8CDEA
		move.l	#loc_8CDF2,(a0)
		move.w	#$3EA0,(Camera_max_X_pos).w
		move.w	#$3C00,(Camera_min_X_pos).w
		lea	ChildObjDat_8D25C(pc),a2
		jsr	CreateChild3_NormalRepeated.w
		bsr.w	sub_8D116
		bra.w	sub_8D0EA
; ---------------------------------------------------------------------------

loc_8CDEA:

		move.l	#Delete_Sprite_If_Not_In_Range,(a0)
		rts
; ---------------------------------------------------------------------------

loc_8CDF2:
		lea	(Player_1).w,a1
		jsr	Find_OtherObject.w
		cmpi.w	#$70,d2
		bhs.s	loc_8CE1C
		move.l	#Obj_Wait,(a0)
		move.w	#$3DA0,(Camera_min_X_pos).w
		move.w	#$1F,$2E(a0)
		move.l	#loc_8CD9C,$34(a0)

loc_8CE1C:
		move.w	$10(a0),d0
		andi.w	#-$80,d0
		sub.w	(Camera_X_pos_coarse_back).w,d0
		cmpi.w	#$280,d0
		bhi.s	loc_8CE30
		rts
; ---------------------------------------------------------------------------

loc_8CE30:
		jmp	loc_85088.w
; ---------------------------------------------------------------------------

loc_8CE34:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_8CE58(pc,d0.w),d1
		jsr	off_8CE58(pc,d1.w)
		movea.w	$46(a0),a1
		btst	#7,$2A(a1)
		bne.s	loc_8CE54
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_8CE54:
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------
off_8CE58:	dc.w loc_8CE64-off_8CE58

		dc.w loc_8CE72-off_8CE58
		dc.w loc_8CE9A-off_8CE58
		dc.w loc_8CEA8-off_8CE58
		dc.w loc_8CEF4-off_8CE58
		dc.w loc_8CF0A-off_8CE58
; ---------------------------------------------------------------------------

loc_8CE64:
		lea	ObjDat3_8D23C(pc),a1
		jsr	SetUp_ObjAttributes.w
		bra.w	loc_8D12C
; ---------------------------------------------------------------------------

loc_8CE72:
		movea.w	$46(a0),a1
		btst	#3,$38(a1)
		bne.s	loc_8CE84
		jmp	Refresh_ChildPosition.w
; ---------------------------------------------------------------------------

loc_8CE84:
		move.b	#4,5(a0)
		cmpi.b	#2,(Player_1+character_id).w
		beq.s	locret_8CE98
		move.w	#$55,(ScrEvents_1).w

locret_8CE98:
		rts
; ---------------------------------------------------------------------------

loc_8CE9A:
		subq.w	#1,$2E(a0)
		bpl.s	locret_8CEA6
		move.b	#6,5(a0)

locret_8CEA6:
		rts
; ---------------------------------------------------------------------------

loc_8CEA8:
		jmp	Animate_Raw.w
; ---------------------------------------------------------------------------

loc_8CEAE:
		move.b	#8,5(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		subi.w	#$C,d0
		move.w	word_8CEEC(pc,d0.w),$1A(a0)
		add.w	d0,d0
		move.l	off_8CEDC(pc,d0.w),$30(a0)
		move.l	#loc_8CF10,$34(a0)
		move.w	#$5F,$2E(a0)
		rts
; ---------------------------------------------------------------------------
off_8CEDC:	dc.l byte_8D28A
		dc.l byte_8D28A
		dc.l byte_8D28F
		dc.l byte_8D28F
word_8CEEC:	dc.w  $FFC0,   $40, $FFC0,   $40
; ---------------------------------------------------------------------------

loc_8CEF4:
		jsr	MoveSprite2.w
		subq.w	#1,$2E(a0)
		bmi.s	loc_8CF02
		rts
; ---------------------------------------------------------------------------

loc_8CF02:
		move.b	#$A,5(a0)

locret_8CF08:
		rts
; ---------------------------------------------------------------------------

loc_8CF0A:
		jmp	Animate_Raw.w
; ---------------------------------------------------------------------------

loc_8CF10:
		move.l	#loc_8CF1E,(a0)
		move.w	#prio(7),8(a0)
		rts
; ---------------------------------------------------------------------------

loc_8CF1E:
		move.w	$10(a0),d0
		andi.w	#-$80,d0
		sub.w	(Camera_X_pos_coarse_back).w,d0
		cmpi.w	#$280,d0
		bhi.s	loc_8CF36
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_8CF36:
		cmpi.b	#2,(Player_1+character_id).w
		beq.s	loc_8CF52
		cmpi.b	#$C,$2C(a0)
		bne.s	loc_8CF5C
		lea	(PLC_83D3A).l,a1
		jsr	Load_PLC_Raw.w

loc_8CF52:
		lea	PLC_8CF62(pc),a1
		jsr	Load_PLC_Raw.w

loc_8CF5C:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------
PLC_8CF62:	dc.w 0
		dc.l ArtNem_Bubbles
		dc.w $8B80
		dc.l ArtNem_LBZMisc
		dc.w $7860
word_8CF70:	dc.w   $7B6,  $9C0, $3BA0, $3CA0
		dc.w   $7B6,  $936, $3BC0, $3C80
; ---------------------------------------------------------------------------

Obj_C5_1:
		lea	word_8CF70(pc),a1
		jsr	(Check_CameraInRange).l
		move.w	(a1)+,(Camera_min_Y_pos).w
		move.w	(a1),(Camera_max_Y_pos).w
		move.w	(a1)+,(Camera_target_max_Y_pos).w
		move.w	(a1)+,(Camera_min_X_pos).w
		move.w	(a1)+,(Camera_max_X_pos).w

		btst	#5,OptionsBits.w		; NAT: Check if bosses are on
		bne.s	.enabled			; if are, branch
		jmp	Boss_Force_End_3		; no boss for u

.enabled	bsr.w	sub_8D0EA
		lea	ChildObjDat_8D26C(pc),a2
		jsr	CreateChild1_Normal.w
		move.l	#loc_8CFB2,(a0)

loc_8CFB2:
		cmpi.w	#$932,(Camera_Y_pos).w
		blo.s	locret_8CFC6
		move.l	#loc_8CFC8,(a0)
		bset	#1,$38(a0)

locret_8CFC6:
		rts
; ---------------------------------------------------------------------------

loc_8CFC8:
		move.b	$38(a0),d0
		andi.b	#5,d0
		cmpi.b	#5,d0
		bne.w	locret_8CF08
		move.l	#loc_8D018,(a0)
		move.w	#$1F,$2E(a0)
		move.w	#$A80,d0
		move.w	d0,(__u_FA98).w
		move.w	d0,(Camera_target_max_Y_pos).w
		jsr	Create_New_Sprite.w
		bne.s	loc_8CFFE
		move.l	#Obj_Song_Fade_ToLevelMusic,(a1)

loc_8CFFE:
		clr.b	(Update_HUD_timer).w
		lea	Child6_IncLevY.w,a2
		jsr	CreateChild6_Simple.w
		lea	ChildObjDat_8D27A(pc),a2
		jmp	CreateChild6_Simple.w
; ---------------------------------------------------------------------------

loc_8D018:
		subq.w	#1,$2E(a0)
		bmi.s	loc_8D020
		rts
; ---------------------------------------------------------------------------

loc_8D020:
		move.l	#loc_8D02E,(a0)
		move.w	#$55,(ScrEvents_1).w
		rts
; ---------------------------------------------------------------------------

loc_8D02E:
		cmpi.w	#$A7C,(Camera_Y_pos).w
		blo.s	locret_8D044
		move.l	#Wait_FadeToLevelMusic,(a0)
		move.l	#Obj_EndSignControl_HitHUD,$34(a0)	; NAT: Create sign instead

locret_8D044:
		rts
; ---------------------------------------------------------------------------

loc_8D046:
		move.l	#loc_8D056,(a0)
		lea	ChildObjDat_8D25C(pc),a2
		jmp	CreateChild3_NormalRepeated.w
; ---------------------------------------------------------------------------

loc_8D056:
		movea.w	$46(a0),a1
		btst	#1,$38(a1)
		beq.s	locret_8D044
		move.l	#Obj_Wait,(a0)
		move.w	#$77,$2E(a0)
		move.l	#loc_8D082,$34(a0)
		tst.b	$2C(a0)
		bne.s	locret_8D044
		bra.w	sub_8D116
; ---------------------------------------------------------------------------

loc_8D082:
		bset	#3,$38(a0)
		moveq	#$50,d0
		jsr	Play_Sound_2.w

		move.b	#$80,BossHitMode.w		; NAT: Enable hit mode
		clr.w	BossHitsP1.w			; clear hits count
		lea	ChildObjDat_8D264(pc),a2
		jsr	CreateChild1_Normal.w
		bne.s	loc_8D0AA

		movea.w	$46(a0),a2
		move.w	a2,$46(a1)
		move.b	$2C(a0),$2C(a1)

loc_8D0AA:
		jmp	Go_Delete_Sprite_2.w
; ---------------------------------------------------------------------------

loc_8D0AE:
		move.l	#Obj_Wait,(a0)
		move.w	#$FF,$2E(a0)
		move.l	#Go_Delete_Sprite,$34(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	word_8D0E0(pc,d0.w),$10(a0)
		move.w	#$A20,$14(a0)
		lea	Child6_CreateBossExplosion.w,a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------
word_8D0E0:	dc.w $3C40
		dc.w $3C80
		dc.w $3CC0
		dc.w $3D00
		dc.w $3D40

; =============== S U B R O U T I N E =======================================

sub_8D0EA:
		lea	(ArtKosM_LBZMiniboss).l,a1
		move.w	#-$6540,d2
		jsr	Queue_Kos_Module.w
		lea	(ArtKosM_LBZMinibossBox).l,a1
		move.w	#-$7540,d2
		jsr	Queue_Kos_Module.w
		lea	PLC_83D64.w,a1
		jmp	Load_PLC_Raw.w

; =============== S U B R O U T I N E =======================================

sub_8D116:
		jsr	Create_New_Sprite.w
		bne.s	locret_8D12A
		move.l	#Obj_Song_Fade_Transition,(a1)
		move.b	#Mus_Minib_SK,$2C(a1)

		cmp.b	#7,Current_zone.w
		bhs.s	locret_8D12A

		cmp.b	#4,Current_zone.w
		beq.s	locret_8D12A
		move.b	#Mus_Minib_S3,$2C(a1)		; NAT: S3 variant

locret_8D12A:
		rts
; ---------------------------------------------------------------------------

loc_8D12C:
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	word_8D170(pc,d0.w),$2E(a0)
		add.w	d0,d0
		move.l	off_8D184(pc,d0.w),$30(a0)
		move.l	off_8D1AC(pc,d0.w),$34(a0)
		lea	byte_8D1D4(pc),a1
		adda.w	d0,a1
		move.b	(a1)+,$22(a0)
		move.b	(a1)+,d1
		or.b	d1,4(a0)
		move.b	(a1)+,d1
		move.b	d1,$42(a0)
		ext.w	d1
		add.w	d1,$10(a0)
		move.b	(a1)+,d1
		move.b	d1,$43(a0)
		ext.w	d1
		add.w	d1,$14(a0)
		rts
; ---------------------------------------------------------------------------
word_8D170:	dc.w 0
		dc.w 0
		dc.w $10
		dc.w $10
		dc.w $10
		dc.w $10
		dc.w $40
		dc.w $50
		dc.w $70
		dc.w $60
off_8D184:	dc.l byte_8D280
		dc.l byte_8D280
		dc.l byte_8D285
		dc.l byte_8D285
		dc.l byte_8D285
		dc.l byte_8D285
		dc.l byte_8D294
		dc.l byte_8D294
		dc.l byte_8D298
		dc.l byte_8D298
off_8D1AC:	dc.l Go_Delete_Sprite
		dc.l Go_Delete_Sprite
		dc.l Go_Delete_Sprite
		dc.l Go_Delete_Sprite
		dc.l Go_Delete_Sprite
		dc.l Go_Delete_Sprite
		dc.l loc_8CEAE
		dc.l loc_8CEAE
		dc.l loc_8CEAE
		dc.l loc_8CEAE
byte_8D1D4:	dc.b	6,   0,	$F0,   0
		dc.b	6,   2,	$10,   0
		dc.b	9,   0,	  0, $14
		dc.b	9,   1,	  0,  $C
		dc.b	9,   0,	  0, $F4
		dc.b	9,   1,	  0, $EC
		dc.b	0,   0,	$F4, $F0
		dc.b	0,   3,	 $C, $10
		dc.b	3,   0,	$14, $F4
		dc.b	3,   3,	$EC,  $C

; =============== S U B R O U T I N E =======================================

sub_8D1FC:
		tst.b	$28(a0)
		bne.s	locret_8D22E
		tst.b	$20(a0)
		bne.s	loc_8D21C
		move.b	#$20,$20(a0)
		moveq	#$6E,d0
		jsr	Play_Sound_2.w
		bset	#6,$2A(a0)

loc_8D21C:
		subq.b	#1,$20(a0)
		bne.s	locret_8D22E
		bclr	#6,$2A(a0)
		move.b	$25(a0),$28(a0)

locret_8D22E:
		rts

; ---------------------------------------------------------------------------
ObjDat3_8D230:	dc.l Map_RobotnikShip
		dc.w $52E
		dc.w prio(2)
		dc.b $20
		dc.b $20
		dc.b $A
		dc.b $F
ObjDat3_8D23C:	dc.l Map_LBZMinibossBox
		dc.w $4456
		dc.w prio(2)
		dc.b $14
		dc.b $14
		dc.b 0
		dc.b 0
		dc.l Map_Ring
		dc.w $A6BC
		dc.w prio(0)
		dc.b 8
		dc.b 8
		dc.b 0
		dc.b 0
ChildObjDat_8D254:dc.w 0
		dc.l loc_8CD5C
		dc.w $34
ChildObjDat_8D25C:dc.w 9

		dc.l loc_8CE34
		dc.w 0
ChildObjDat_8D264:dc.w 0

		dc.l Obj_LBZMiniboss
		dc.w 0
ChildObjDat_8D26C:dc.w 1
		dc.l loc_8D046
		dc.w $E000
		dc.l loc_8D046
		dc.w $2000
ChildObjDat_8D27A:dc.w 4
		dc.l loc_8D0AE
byte_8D280:	dc.b 0
		dc.b 6
		dc.b 7
		dc.b 8
		dc.b $F4
byte_8D285:	dc.b 0
		dc.b 9
		dc.b $A
		dc.b $B
		dc.b $F4
byte_8D28A:	dc.b 5
		dc.b 0
		dc.b 1
		dc.b 2
		dc.b $F4
byte_8D28F:	dc.b 5
		dc.b 3
		dc.b 4
		dc.b 5
		dc.b $F4
byte_8D294:	dc.b 0
		dc.b 0
		dc.b 0
		dc.b $F4
byte_8D298:	dc.b 0
		dc.b 3
		dc.b 3
		dc.b $F4
; ---------------------------------------------------------------------------

Obj_C6_1:

		move.w	a0,(ScrEvents_Routine2).w
		lea	ObjDat3_8D562(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_8D2B6,(a0)
		bset	#0,4(a0)

loc_8D2B6:
		moveq	#0,d0
		move.b	$29(a0),d0
		beq.w	loc_8D33E
		clr.b	$29(a0)
		cmpi.b	#2,d0
		beq.w	loc_8D33E
		lea	(Player_1).w,a1
		tst.b	$2E(a1)
		bne.w	loc_8D33E
		move.l	#loc_8D370,(a0)
		move.b	#-$7D,$2E(a1)
		bclr	#0,4(a1)
		bclr	#0,$2A(a1)
		move.b	#5,$20(a1)
		bset	#7,$A(a1)
		move.w	#-$100,$1A(a0)
		move.w	#$3F,$2E(a0)
		move.l	#loc_8D344,$34(a0)
		moveq	#-$30,d0
		jsr	Play_Sound_2.w
		st	(Anim_Counters+$F).w
		move.w	#$6000,(__u_FA92).w
		lea	Child6_IncLevX.w,a2
		jsr	CreateChild6_Simple.w
		lea	(Child1_MakeRoboShipFlame).l,a2
		jsr	CreateChild1_Normal.w
		jsr	sub_8D53E(pc)

loc_8D33E:

		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------

loc_8D344:
		move.l	#loc_8D36A,(a0)
		move.w	$14(a0),$3A(a0)
		move.w	#$100,$18(a0)
		move.w	#$1DF,$2E(a0)
		move.l	#loc_8D38A,$34(a0)
		jmp	Swing_Setup1.w
; ---------------------------------------------------------------------------


loc_8D36A:

		jsr	Swing_UpAndDown.w

loc_8D370:
		jsr	MoveSprite2.w
		bsr.w	sub_8D506
		jsr	Obj_Wait.w
		jsr	sub_8D53E(pc)
		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------

loc_8D38A:
		move.w	#$3F,$2E(a0)
		clr.w	$18(a0)
		move.l	#loc_8D39E,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_8D39E:
		move.l	#loc_8D3AC,(a0)
		move.w	#$100,$18(a0)
		rts
; ---------------------------------------------------------------------------

loc_8D3AC:
		jsr	Swing_UpAndDown.w
		jsr	MoveSprite2.w
		bsr.w	sub_8D506
		movea.w	(__u_FAA4).w,a1
		move.w	$10(a1),d0
		sub.w	$10(a0),d0
		cmpi.w	#$50,d0
		bhs.s	loc_8D3E8
		bset	#1,$38(a1)
		move.l	#loc_8D36A,(a0)
		move.w	#$1F,$2E(a0)
		move.l	#loc_8D3F2,$34(a0)

loc_8D3E8:
		jsr	sub_8D53E(pc)
		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------

loc_8D3F2:
		move.l	#loc_8D40E,(a0)
		move.w	#-$200,$18(a0)
		move.w	#-$200,$1A(a0)
		moveq	#$49,d0
		jmp	Play_Sound_2.w
; ---------------------------------------------------------------------------

loc_8D40E:
		jsr	MoveSprite_LightGravity.w
		bsr.w	sub_8D506
		tst.w	$1A(a0)
		bmi.s	loc_8D446
		move.w	$14(a0),d0
		cmp.w	$3A(a0),d0
		blo.s	loc_8D446
		move.l	#loc_8D36A,(a0)
		clr.w	$18(a0)
		move.w	#$5F,$2E(a0)
		move.l	#loc_8D450,$34(a0)
		jsr	Swing_Setup1.w

loc_8D446:

		jsr	sub_8D53E(pc)
		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------

loc_8D450:
		move.l	#loc_8D36A,(a0)
		st	(ScrShake_Value).w
		st	(ScrEvents_2).w
		move.w	#$FF,$2E(a0)
		move.l	#loc_8D46E,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_8D46E:
		move.l	#loc_8D47C,(a0)
		move.w	#$100,$18(a0)

locret_8D47A:
		rts
; ---------------------------------------------------------------------------

loc_8D47C:
		jsr	Swing_UpAndDown.w
		jsr	MoveSprite2.w
		bsr.w	sub_8D506
		cmpi.w	#$4440,$10(a0)
		blo.s	loc_8D4C2
		move.l	#loc_8D4CC,(a0)
		clr.w	(ScrShake_Value).w
		lea	(Player_1).w,a1
		clr.b	$2E(a1)
		bset	#1,$2A(a1)
		move.w	#-$100,$18(a1)
		move.w	#-$600,$1A(a1)
		move.b	#2,$20(a1)
		clr.b	$40(a1)

loc_8D4C2:
		jsr	sub_8D53E(pc)
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_8D4CC:
		tst.b	4(a0)
		bpl.s	loc_8D4E4
		jsr	Swing_UpAndDown.w
		jsr	MoveSprite2.w
		jmp	Sprite_CheckDeleteTouch2.w
; ---------------------------------------------------------------------------

loc_8D4E4:
		jsr	Create_New_Sprite.w
		bne.w	locret_8D47A
		move.l	#Obj_LBZ_FinalBoss1,(a1)
		move.w	#$44A0,$10(a1)
		move.w	#$780,$14(a1)
		jmp	Go_Delete_Sprite_2.w

; =============== S U B R O U T I N E =======================================


sub_8D506:

		lea	(Player_1).w,a1
		move.w	$10(a0),d0
		subq.w	#4,d0
		move.w	d0,$10(a1)
		move.w	$14(a0),d0
		subi.w	#$12,d0
		move.w	d0,$14(a1)
		rts
; End of function sub_8D506

; ---------------------------------------------------------------------------
		lea	(Player_2).w,a1
		tst.l	(a1)
		beq.s	loc_8D538
		tst.b	4(a1)
		bpl.s	loc_8D532
		rts
; ---------------------------------------------------------------------------

loc_8D532:
		clr.l	(a1)
		clr.l	(Tails_tails).w

loc_8D538:
		jmp	Delete_Current_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_8D53E:

		lea	(Player_1).w,a1
		moveq	#0,d0
		move.b	$38(a1),d0
		move.b	RawAni_8D55C(pc,d0.w),$22(a1)
		add.w	d0,d0
		movea.w	word_8D55E(pc,d0.w),a2
		clr.b	(a2)
		jmp	Player_Load_PLC.w
; End of function sub_8D53E

; ---------------------------------------------------------------------------
RawAni_8D55C:	dc.b  $BA, $AD
word_8D55E:	dc.w $F766
		dc.w $F7DE
ObjDat3_8D562:	dc.l Map_RobotnikShip
		dc.w $852E
		dc.w prio(1)
		dc.b $20
		dc.b $20
		dc.b $A
		dc.b $CA
		dc.w 0
		dc.l Obj_C6_1
		dc.w 0
		dc.b 0
		dc.b 5
		dc.b 1
		dc.b 5
		dc.b 2
		dc.b 5
		dc.b 3
		dc.b 5
		dc.b $FC
		dc.b 0
; ---------------------------------------------------------------------------

Obj_Madmole:

		jsr	Obj_WaitOffscreen.w
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_8D59E(pc,d0.w),d1
		jsr	off_8D59E(pc,d1.w)
		bsr.w	sub_8D876
		jmp	Sprite_CheckDelete.w
; ---------------------------------------------------------------------------
off_8D59E:	dc.w loc_8D5A6-off_8D59E

		dc.w loc_8D5B0-off_8D59E
		dc.w loc_8D5D4-off_8D59E
		dc.w loc_8D5F4-off_8D59E
; ---------------------------------------------------------------------------

loc_8D5A6:
		lea	ObjDat3_8D9A8(pc),a1
		jmp	SetUp_ObjAttributes.w
; ---------------------------------------------------------------------------

loc_8D5B0:
		jsr	Find_SonicTails.w
		cmpi.w	#$A0,d2
		blo.s	loc_8D5BE
		rts
; ---------------------------------------------------------------------------

loc_8D5BE:
		move.b	#4,5(a0)
		bset	#1,$38(a0)
		lea	ChildObjDat_8D9C0(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_8D5D4:
		btst	#1,$38(a0)
		beq.s	loc_8D5DE
		rts
; ---------------------------------------------------------------------------

loc_8D5DE:
		move.b	#6,5(a0)
		move.w	#$3C,$2E(a0)
		move.l	#loc_8D5FA,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_8D5F4:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_8D5FA:
		move.b	#2,5(a0)
		rts
; ---------------------------------------------------------------------------

loc_8D602:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_8D616(pc,d0.w),d1
		jsr	off_8D616(pc,d1.w)
		jmp	Child_DrawTouch_Sprite.w
; ---------------------------------------------------------------------------
off_8D616:	dc.w loc_8D620-off_8D616

		dc.w loc_8D636-off_8D616
		dc.w loc_8D656-off_8D616
		dc.w loc_8D67A-off_8D616
		dc.w loc_8D6CA-off_8D616
; ---------------------------------------------------------------------------

loc_8D620:
		lea	word_8D9B4(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.w	#-$100,$1A(a0)
		move.w	#$1F,$2E(a0)

loc_8D636:
		bsr.w	sub_8D886
		jsr	MoveSprite2.w
		subq.w	#1,$2E(a0)
		bmi.s	loc_8D648
		rts
; ---------------------------------------------------------------------------

loc_8D648:
		move.b	#4,5(a0)
		move.w	#$1F,$2E(a0)
		rts
; ---------------------------------------------------------------------------

loc_8D656:
		bsr.w	sub_8D886
		subq.w	#1,$2E(a0)
		bmi.s	loc_8D662
		rts
; ---------------------------------------------------------------------------

loc_8D662:
		move.b	#6,5(a0)
		move.l	#byte_8D9D8,$30(a0)
		move.l	#loc_8D680,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_8D67A:
		jmp	Animate_Raw.w
; ---------------------------------------------------------------------------

loc_8D680:
		move.l	#byte_8D9DD,$30(a0)
		move.l	#loc_8D6AE,$34(a0)
		moveq	#$52,d0
		jsr	Play_Sound_2.w
		lea	ChildObjDat_8D9C8(pc),a2
		btst	#0,4(a0)
		beq.s	loc_8D6A8
		lea	ChildObjDat_8D9D0(pc),a2

loc_8D6A8:
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_8D6AE:
		move.b	#8,5(a0)
		move.w	#$100,$1A(a0)
		move.w	#$1F,$2E(a0)
		move.l	#loc_8D6D6,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_8D6CA:
		jsr	MoveSprite2.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_8D6D6:
		movea.w	$46(a0),a1
		bclr	#1,$38(a1)
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------

loc_8D6E6:

		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_8D73C(pc,d0.w),d1
		jsr	off_8D73C(pc,d1.w)
		move.w	$10(a0),d0
		andi.w	#-$80,d0
		sub.w	(Camera_X_pos_coarse_back).w,d0
		cmpi.w	#$280,d0
		bhi.s	loc_8D724
		move.w	$14(a0),d0
		sub.w	(Camera_Y_pos).w,d0
		addi.w	#$80,d0
		cmpi.w	#$200,d0
		bhi.s	loc_8D724
		jsr	Add_SpriteToCollisionResponseList.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_8D724:

		move.w	$44(a0),d0
		beq.s	loc_8D736
		movea.w	d0,a1
		bset	#1,$2A(a1)
		clr.b	$2E(a1)

loc_8D736:
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------
off_8D73C:	dc.w loc_8D746-off_8D73C

		dc.w loc_8D768-off_8D73C
		dc.w loc_8D778-off_8D73C
		dc.w loc_8D79C-off_8D73C
		dc.w loc_8D7A8-off_8D73C
; ---------------------------------------------------------------------------

loc_8D746:
		lea	word_8D9BA(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.b	#$18,$1F(a0)
		move.b	#8,$1E(a0)
		move.l	#byte_8D9E7,$30(a0)
		bra.w	loc_8D89E
; ---------------------------------------------------------------------------

loc_8D768:
		bsr.w	sub_8D8E6
		jsr	MoveSprite2.w
		jmp	Animate_Raw.w
; ---------------------------------------------------------------------------

loc_8D778:
		bsr.w	sub_8D94A
		jsr	MoveSprite_LightGravity.w
		tst.w	$1A(a0)
		bmi.s	loc_8D78E
		jsr	ObjHitFloor_DoRoutine.w

loc_8D78E:
		jmp	Animate_Raw.w
; ---------------------------------------------------------------------------

loc_8D794:
		move.w	#-$500,$1A(a0)
		rts
; ---------------------------------------------------------------------------

loc_8D79C:
		jsr	MoveSprite2.w
		jmp	Animate_Raw.w
; ---------------------------------------------------------------------------

loc_8D7A8:
		movea.w	$44(a0),a1
		bclr	#0,4(a1)
		tst.w	$18(a0)
		bmi.s	loc_8D7BE
		bset	#0,4(a1)

loc_8D7BE:
		tst.b	$2E(a1)
		beq.s	loc_8D83E
		moveq	#8,d1
		move.w	$10(a0),d0
		btst	#0,4(a1)
		bne.s	loc_8D7D4
		neg.w	d1

loc_8D7D4:
		add.w	d1,d0
		move.w	d0,$10(a1)
		move.w	$14(a0),d0
		addi.w	#8,d0
		move.w	d0,$14(a1)
		jsr	MoveSprite_LightGravity.w
		tst.w	$18(a0)
		bmi.s	loc_8D800
		move.w	#$18,d3
		jsr	ObjCheckRightWallDist.w
		bra.w	loc_8D80A
; ---------------------------------------------------------------------------

loc_8D800:
		move.w	#-$18,d3
		jsr	ObjCheckLeftWallDist.w

loc_8D80A:
		tst.w	d1
		bmi.s	loc_8D820
		tst.w	$1A(a0)
		bmi.s	loc_8D81A
		jsr	ObjHitFloor_DoRoutine.w

loc_8D81A:
		jmp	Animate_Raw.w
; ---------------------------------------------------------------------------

loc_8D820:
		movea.w	$44(a0),a1
		move.w	$18(a0),d0
		neg.w	d0
		move.w	d0,$18(a1)
		asr.w	#1,d0
		move.w	d0,$18(a0)

loc_8D834:
		bset	#1,$2A(a1)
		clr.b	$2E(a1)

loc_8D83E:
		move.b	#6,5(a0)
		rts
; ---------------------------------------------------------------------------

loc_8D846:
		cmpi.w	#$A00,$1A(a0)
		bge.s	loc_8D85E
		move.w	#-$500,$1A(a0)
		moveq	#-$52,d0
		jmp	Play_Sound_2.w
; ---------------------------------------------------------------------------

loc_8D85E:
		movea.w	$44(a0),a1
		move.w	#-$200,$1A(a0)
		move.w	#-$300,$1A(a1)
		move.w	$18(a0),$18(a1)
		bra.s	loc_8D834

; =============== S U B R O U T I N E =======================================


sub_8D876:
		moveq	#$1F,d1
		moveq	#4,d2
		moveq	#5,d3
		move.w	$10(a0),d4
		jmp	SolidObjectFull.w
; End of function sub_8D876


; =============== S U B R O U T I N E =======================================


sub_8D886:

		jsr	Find_SonicTails.w
		bclr	#0,4(a0)
		tst.w	d0
		beq.s	locret_8D89C
		bset	#0,4(a0)

locret_8D89C:
		rts
; End of function sub_8D886

; ---------------------------------------------------------------------------

loc_8D89E:
		jsr	Random_Number.w
		moveq	#0,d2
		tst.b	d0
		bpl.s	loc_8D8BA
		addq.w	#4,d2
		move.b	#4,5(a0)
		move.l	#loc_8D794,$34(a0)

loc_8D8BA:
		lea	word_8D8DE(pc,d2.w),a1
		move.w	(a1)+,d0
		movea.w	$46(a0),a2
		btst	#0,4(a2)
		beq.s	loc_8D8D4
		neg.w	d0
		bset	#0,4(a0)

loc_8D8D4:
		move.w	d0,$18(a0)
		move.w	(a1)+,$1A(a0)
		rts
; ---------------------------------------------------------------------------
word_8D8DE:	dc.w  $FA00,	 0
		dc.w  $FC80,  $200

; =============== S U B R O U T I N E =======================================


sub_8D8E6:
		move.b	$29(a0),d0
		beq.w	locret_8D942
		clr.b	$29(a0)
		andi.w	#3,d0
		add.w	d0,d0
		lea	locret_8D942(pc,d0.w),a1
		movea.w	(a1)+,a2
		btst	#1,$2B(a2)
		bne.s	locret_8D942
		tst.b	$2E(a2)
		bne.s	locret_8D942
		move.w	a2,$44(a0)
		move.b	#6,5(a0)
		moveq	#-$52,d0
		jsr	Play_Sound_2.w
		move.w	$18(a0),d0
		lsl.w	#1,d0
		move.w	d0,$18(a2)
		move.w	d0,$1C(a2)
		move.w	#-$200,$1A(a2)
		bset	#1,$2A(a2)
		move.b	#$1A,$20(a2)
		clr.b	$3D(a2)

locret_8D942:

		rts
; End of function sub_8D8E6

; ---------------------------------------------------------------------------
		dc.w $B000
		dc.w $B04A
		dc.w $B04A

; =============== S U B R O U T I N E =======================================


sub_8D94A:
		move.b	$29(a0),d0
		beq.w	locret_8D9A6
		clr.b	$29(a0)
		andi.w	#3,d0
		add.w	d0,d0
		lea	locret_8D942(pc,d0.w),a1
		movea.w	(a1)+,a2
		btst	#1,$2B(a2)
		bne.s	locret_8D9A6
		tst.b	$2E(a2)
		bne.s	locret_8D9A6
		move.w	a2,$44(a0)
		move.b	#8,5(a0)
		move.w	#prio(0),8(a0)
		move.l	#loc_8D846,$34(a0)
		moveq	#-$52,d0
		jsr	Play_Sound_2.w
		bset	#1,$2A(a2)
		move.b	#1,$2E(a2)
		move.b	#$1A,$20(a2)
		clr.b	$3D(a2)

locret_8D9A6:

		rts
; End of function sub_8D94A

; ---------------------------------------------------------------------------
ObjDat3_8D9A8:	dc.l Map_Madmole
		dc.w $545
		dc.w prio(5)
		dc.b $18
		dc.b 4
		dc.b $D
		dc.b 0
word_8D9B4:	dc.w prio(5)
		dc.b $C
		dc.b $C
		dc.b 0
		dc.b $B
word_8D9BA:	dc.w prio(5)
		dc.b 8
		dc.b 8
		dc.b 5
		dc.b $D8
ChildObjDat_8D9C0:dc.w 0
		dc.l loc_8D602
		dc.w $10
ChildObjDat_8D9C8:dc.w 0
		dc.l loc_8D6E6
		dc.w $F2F4
ChildObjDat_8D9D0:dc.w 0
		dc.l loc_8D6E6
		dc.w $EF4
byte_8D9D8:	dc.b 2
		dc.b 0
		dc.b 1
		dc.b 2
		dc.b $F4
byte_8D9DD:	dc.b 2
		dc.b 3
		dc.b 3
		dc.b 4
		dc.b 4
		dc.b 4
		dc.b 4
		dc.b 4
		dc.b 4
		dc.b $F4
byte_8D9E7:	dc.b 2
		dc.b 5
		dc.b 6
		dc.b 7
		dc.b 8
		dc.b 9
		dc.b $A
		dc.b $B
		dc.b $C
		dc.b $FC
		dc.b 0
Map_Madmole:	include "General/Sprites/Madmole/Map - Madmole.asm"

; ---------------------------------------------------------------------------

Obj_Mushmeanie:

		jsr	Obj_WaitOffscreen.w
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_8DB14(pc,d0.w),d1
		jsr	off_8DB14(pc,d1.w)
		bsr.w	sub_8DC6E
		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------
off_8DB14:	dc.w loc_8DB1E-off_8DB14

		dc.w loc_8DB3E-off_8DB14
		dc.w loc_8DB64-off_8DB14
		dc.w loc_8DB94-off_8DB14
		dc.w loc_8DBEC-off_8DB14
; ---------------------------------------------------------------------------

loc_8DB1E:
		lea	ObjDat3_8DCCA(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.b	#2,$39(a0)
		move.b	#$12,$1E(a0)
		lea	ChildObjDat_8DCDE(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_8DB3E:
		jsr	Find_SonicTails.w
		cmpi.w	#$80,d2
		blo.s	loc_8DB4C
		rts
; ---------------------------------------------------------------------------

loc_8DB4C:
		move.b	#4,5(a0)
		move.l	#byte_8DCE6,$30(a0)
		move.l	#loc_8DB76,$34(a0)

locret_8DB62:
		rts
; ---------------------------------------------------------------------------

loc_8DB64:
		jsr	Animate_RawMultiDelay.w
		tst.w	d2
		bne.s	loc_8DB70
		rts
; ---------------------------------------------------------------------------

loc_8DB70:
		subq.w	#3,$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_8DB76:

		move.b	#6,5(a0)
		move.w	#-$300,$1A(a0)
		move.l	#loc_8DBD4,$34(a0)
		move.w	#-$100,d4
		jmp	Set_VelocityXTrackSonic.w
; ---------------------------------------------------------------------------

loc_8DB94:
		jsr	MoveSprite_LightGravity.w
		tst.w	$18(a0)
		bmi.s	loc_8DBAC
		moveq	#8,d3
		jsr	ObjCheckRightWallDist.w
		bra.w	loc_8DBB4
; ---------------------------------------------------------------------------

loc_8DBAC:
		moveq	#-8,d3
		jsr	ObjCheckLeftWallDist.w

loc_8DBB4:
		tst.w	d1
		bpl.s	loc_8DBC6
		add.w	d1,$10(a0)
		neg.w	$18(a0)
		bchg	#0,4(a0)

loc_8DBC6:
		tst.w	$1A(a0)
		bmi.w	locret_8DB62
		jmp	ObjHitFloor_DoRoutine.w
; ---------------------------------------------------------------------------

loc_8DBD4:
		move.b	#8,5(a0)
		move.l	#byte_8DCED,$30(a0)
		move.l	#loc_8DB76,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_8DBEC:
		jsr	Animate_RawMultiDelay.w
		tst.w	d2
		bne.s	loc_8DBF8
		rts
; ---------------------------------------------------------------------------

loc_8DBF8:
		moveq	#0,d0
		move.b	$23(a0),d0
		move.w	word_8DC08(pc,d0.w),d0
		add.w	d0,$14(a0)
		rts
; ---------------------------------------------------------------------------
word_8DC08:	dc.w $FFFD
		dc.w 3
		dc.w 3
		dc.w $FFFD
		dc.w $FFFD
		dc.w $FFFD
; ---------------------------------------------------------------------------

loc_8DC14:
		lea	word_8DCD6(pc),a1
		jsr	SetUp_ObjAttributes2.w
		move.l	#loc_8DC24,(a0)

loc_8DC24:
		movea.w	$46(a0),a1
		move.w	$10(a1),$10(a0)
		move.w	$14(a1),$14(a0)
		btst	#6,$2A(a1)
		bne.s	loc_8DC42
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_8DC42:
		move.l	#loc_8DC62,(a0)
		movea.w	$44(a1),a2
		move.w	#$200,d0
		tst.w	$18(a2)
		bmi.s	loc_8DC58
		neg.w	d0

loc_8DC58:
		move.w	d0,$18(a0)
		move.w	#-$200,$1A(a0)

loc_8DC62:
		jsr	MoveSprite_LightGravity.w
		jmp	Sprite_CheckDeleteXY.w

; =============== S U B R O U T I N E =======================================


sub_8DC6E:
		tst.b	$20(a0)
		beq.s	loc_8DC80
		subq.b	#1,$20(a0)
		bne.s	locret_8DCC2
		move.b	#-$29,$28(a0)

loc_8DC80:
		jsr	Check_PlayerCollision.w
		beq.s	locret_8DCC2
		jsr	Check_PlayerAttack.w
		bne.s	loc_8DC9C
		tst.b	$34(a1)
		bne.s	locret_8DCC2
		jmp	HurtCharacter_Directly.w
; ---------------------------------------------------------------------------

loc_8DC9C:
		subq.b	#1,$39(a0)
		beq.s	loc_8DCC4
		clr.b	$28(a0)
		clr.b	$29(a0)
		move.b	#$20,$20(a0)
		bset	#6,$2A(a0)
		neg.w	$18(a1)
		neg.w	$1A(a1)
		neg.w	$1C(a1)

locret_8DCC2:

		rts
; ---------------------------------------------------------------------------

loc_8DCC4:
		jmp	(EnemyDefeated).l
; End of function sub_8DC6E

; ---------------------------------------------------------------------------
ObjDat3_8DCCA:	dc.l Map_Mushmeanie
		dc.w $256D
		dc.w prio(5)
		dc.b 8
		dc.b 8
		dc.b 1
		dc.b $D7
word_8DCD6:	dc.w $456D
		dc.w prio(4)
		dc.b $C
		dc.b 8
		dc.b 0
		dc.b 0
ChildObjDat_8DCDE:dc.w 0
		dc.l loc_8DC14
		dc.w 0
byte_8DCE6:	dc.b 1
		dc.b 2
		dc.b 2
		dc.b 2
		dc.b 3
		dc.b 0
		dc.b $F4
byte_8DCED:	dc.b 3
		dc.b 2
		dc.b 2
		dc.b 2
		dc.b 1
		dc.b 2
		dc.b 2
		dc.b 2
		dc.b 3
		dc.b 0
		dc.b $F4
Map_Mushmeanie:	include "General/Sprites/Mushmeanie/Map - Mushmeanie.asm"

; ---------------------------------------------------------------------------

Obj_Dragonfly:

		jsr	Obj_WaitOffscreen.w
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_8DD4C(pc,d0.w),d1
		jsr	off_8DD4C(pc,d1.w)
		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------
off_8DD4C:	dc.w loc_8DD52-off_8DD4C

		dc.w loc_8DDAA-off_8DD4C
		dc.w loc_8DDE6-off_8DD4C
; ---------------------------------------------------------------------------

loc_8DD52:
		lea	ObjDat3_8DF96(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#byte_8DFCE,$30(a0)
		lea	ChildObjDat_8DFAE(pc),a2
		jsr	CreateChild1_Normal.w
		lea	ChildObjDat_8DFB6(pc),a2
		jsr	CreateChild4_LinkListRepeated.w
		move.w	#$200,d0
		move.w	d0,$3E(a0)
		move.w	d0,$1A(a0)
		move.w	#8,$40(a0)
		bclr	#0,$38(a0)

loc_8DD90:
		move.w	#$200,d0
		move.w	d0,$3A(a0)
		move.w	d0,$18(a0)
		move.w	#$20,$3C(a0)
		bclr	#3,$38(a0)
		rts
; ---------------------------------------------------------------------------

loc_8DDAA:
		jsr	Animate_Raw.w
		jsr	Swing_LeftAndRight.w
		jsr	Swing_UpAndDown.w
		jsr	MoveSprite2.w
		tst.w	$1A(a0)
		beq.s	loc_8DDCA
		rts
; ---------------------------------------------------------------------------

loc_8DDCA:
		move.b	#4,5(a0)
		move.w	#$F,$2E(a0)
		move.l	#loc_8DDF8,$34(a0)
		bset	#2,$38(a0)
		rts
; ---------------------------------------------------------------------------

loc_8DDE6:
		jsr	Swing_LeftAndRight.w
		jsr	MoveSprite2.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_8DDF8:
		move.b	#2,5(a0)
		bclr	#2,$38(a0)
		clr.b	$23(a0)
		clr.b	$24(a0)
		move.l	#byte_8DFC2,$30(a0)
		bchg	#1,$38(a0)
		bne.s	locret_8DE24
		move.l	#byte_8DFCE,$30(a0)

locret_8DE24:
		rts
; ---------------------------------------------------------------------------

loc_8DE26:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_8DE3A(pc,d0.w),d1
		jsr	off_8DE3A(pc,d1.w)
		jmp	Child_DrawTouch_Sprite.w
; ---------------------------------------------------------------------------
off_8DE3A:	dc.w loc_8DE44-off_8DE3A

		dc.w loc_8DE74-off_8DE3A
		dc.w loc_8DE8A-off_8DE3A
		dc.w loc_8DEB6-off_8DE3A
		dc.w loc_8DEF4-off_8DE3A
; ---------------------------------------------------------------------------

loc_8DE44:
		lea	word_8DFA8(pc),a1
		jsr	SetUp_ObjAttributes3.w
		bset	#1,4(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		cmpi.b	#$C,d0
		bne.s	loc_8DE66
		move.b	#6,$22(a0)

loc_8DE66:
		move.w	d0,$2E(a0)
		move.b	#1,$42(a0)
		bra.w	loc_8DF68
; ---------------------------------------------------------------------------

loc_8DE74:
		bsr.w	sub_8DF80
		subq.w	#1,$2E(a0)
		bmi.s	loc_8DE80
		rts
; ---------------------------------------------------------------------------

loc_8DE80:
		move.b	#4,5(a0)
		bra.w	loc_8DD90
; ---------------------------------------------------------------------------

loc_8DE8A:
		bsr.w	sub_8DF80
		jsr	Swing_LeftAndRight.w
		jsr	MoveSprite2.w
		movea.w	$46(a0),a1
		btst	#2,$38(a1)
		bne.s	loc_8DEA8
		rts
; ---------------------------------------------------------------------------

loc_8DEA8:
		move.b	#6,5(a0)
		bset	#2,$38(a0)
		rts
; ---------------------------------------------------------------------------

loc_8DEB6:
		jsr	Swing_LeftAndRight.w
		jsr	MoveSprite2.w
		movea.w	$46(a0),a1
		move.w	$14(a0),d0
		move.b	$42(a0),d1
		ext.w	d1
		add.w	d1,d0
		cmp.w	$14(a1),d0
		beq.s	loc_8DEDE
		move.w	d0,$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_8DEDE:
		move.w	$14(a1),$14(a0)
		move.b	#8,5(a0)
		neg.b	$42(a0)
		neg.b	$43(a0)
		rts
; ---------------------------------------------------------------------------

loc_8DEF4:
		jsr	Swing_LeftAndRight.w
		jsr	MoveSprite2.w
		movea.w	$46(a0),a1
		move.w	$14(a1),d0
		move.b	$43(a0),d1
		ext.w	d1
		bmi.s	loc_8DF1A
		add.w	d1,d0
		cmp.w	$14(a0),d0
		bls.s	loc_8DF24
		rts
; ---------------------------------------------------------------------------

loc_8DF1A:
		add.w	d1,d0
		cmp.w	$14(a0),d0
		bhs.s	loc_8DF24
		rts
; ---------------------------------------------------------------------------

loc_8DF24:

		move.b	#4,5(a0)
		move.w	d0,$14(a0)
		bchg	#1,4(a0)
		bclr	#2,$38(a0)
		rts
; ---------------------------------------------------------------------------

loc_8DF3C:
		lea	word_8DFA2(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_8DF52,(a0)
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_8DF52:
		jsr	Refresh_ChildPosition.w
		lea	byte_8DFBC(pc),a1
		jsr	Animate_RawNoSST.w
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_8DF68:
		moveq	#0,d0
		move.b	$2C(a0),d0
		lsr.w	#1,d0
		move.b	byte_8DF78(pc,d0.w),$43(a0)
		rts
; ---------------------------------------------------------------------------
byte_8DF78:	dc.b $F4
		dc.b $FB
		dc.b $FB
		dc.b $FB
		dc.b $FB
		dc.b $FB
		dc.b $FB
		dc.b 0

; =============== S U B R O U T I N E =======================================


sub_8DF80:

		movea.w	$46(a0),a1
		move.w	$14(a1),d0
		move.b	$43(a0),d1
		ext.w	d1
		add.w	d1,d0
		move.w	d0,$14(a0)
		rts
; End of function sub_8DF80

; ---------------------------------------------------------------------------
ObjDat3_8DF96:	dc.l Map_Dragonfly
		dc.w $A538
		dc.w prio(5)
		dc.b 8
		dc.b 8
		dc.b 4
		dc.b $17
word_8DFA2:	dc.w prio(5)
		dc.b $20
		dc.b 8
		dc.b 7
		dc.b 0
word_8DFA8:	dc.w prio(5)
		dc.b 4
		dc.b 4
		dc.b 5
		dc.b $98
ChildObjDat_8DFAE:dc.w 0
		dc.l loc_8DF3C
		dc.w 0
ChildObjDat_8DFB6:dc.w 6
		dc.l loc_8DE26
byte_8DFBC:	dc.b	0,   7,	  9,   8,   9, $FC
byte_8DFC2:	dc.b 3
		dc.b 0
		dc.b 1
		dc.b 2
		dc.b 3
		dc.b 4
		dc.b $F8
		dc.b 8
		dc.b $7F
		dc.b 4
		dc.b 4
		dc.b $FC
byte_8DFCE:	dc.b 3

		dc.b 4
		dc.b 3
		dc.b 2
		dc.b 1
		dc.b 0
		dc.b $F8
		dc.b 8
		dc.b $7F
		dc.b 0
		dc.b 0
		dc.b $FC
Map_Dragonfly:	include "General/Sprites/Robotnik/Map - Dragonfly.asm"

; ---------------------------------------------------------------------------

Obj_Butterdroid:

		jsr	Obj_WaitOffscreen.w
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_8E0C2(pc,d0.w),d1
		jsr	off_8E0C2(pc,d1.w)
		lea	DPLCPtr_8E11C(pc),a2
		jsr	Perform_DPLC.w
		jmp	Sprite_CheckDeleteTouchSlotted.w
; ---------------------------------------------------------------------------
off_8E0C2:	dc.w loc_8E0C6-off_8E0C2

		dc.w loc_8E0DA-off_8E0C2
; ---------------------------------------------------------------------------

loc_8E0C6:
		lea	ObjDat4_8E10A(pc),a1
		jsr	SetUp_ObjAttributesSlotted.w
		move.l	#byte_8E124,$30(a0)
		rts
; ---------------------------------------------------------------------------

loc_8E0DA:
		jsr	Find_SonicTails.w
		bclr	#0,4(a0)
		tst.w	d0
		beq.s	loc_8E0F0
		bset	#0,4(a0)

loc_8E0F0:
		move.w	#$100,d0
		move.w	#4,d1
		jsr	(Chase_Object).l
		jsr	MoveSprite2.w
		jmp	Animate_Raw.w
; ---------------------------------------------------------------------------
ObjDat4_8E10A:	dc.w 3
		dc.w $A514
		dc.w 9
		dc.w 0
		dc.l Map_Butterdroid
		dc.w prio(5)
		dc.b $C
		dc.b $C
		dc.b 0
		dc.b $17
DPLCPtr_8E11C:	dc.l ArtUnc_Butterdroid
		dc.l DPLC_Butterdroid
byte_8E124:	dc.b 7
		dc.b 0
		dc.b 1
		dc.b 2
		dc.b 3
		dc.b 4
		dc.b 3
		dc.b 2
		dc.b 1
		dc.b $FC
Map_Butterdroid:include "General/Sprites/Butterdroid/Map - Butterdroid.asm"

DPLC_Butterdroid:	include "General/Sprites/Butterdroid/DPLC - Butterdroid.asm"

; ---------------------------------------------------------------------------

Obj_Cluckoid:

		jsr	Obj_WaitOffscreen.w
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_8E1A2(pc,d0.w),d1
		jsr	off_8E1A2(pc,d1.w)
		lea	DPLCPtr_8E410(pc),a2
		jsr	Perform_DPLC.w
		jmp	Sprite_CheckDeleteTouchSlotted.w
; ---------------------------------------------------------------------------
off_8E1A2:	dc.w loc_8E1AA-off_8E1A2

		dc.w loc_8E1BE-off_8E1A2
		dc.w loc_8E1E2-off_8E1A2
		dc.w loc_8E21A-off_8E1A2
; ---------------------------------------------------------------------------

loc_8E1AA:
		lea	ObjDat4_8E3D8(pc),a1
		jsr	SetUp_ObjAttributesSlotted.w
		lea	ChildObjDat_8E402(pc),a2
		jmp	(CreateChild10_NormalAdjusted).l
; ---------------------------------------------------------------------------

loc_8E1BE:
		jsr	Find_SonicTails.w
		cmpi.w	#$80,d2
		bhs.s	locret_8E1D0
		cmpi.w	#$40,d3
		blo.s	loc_8E1D2

locret_8E1D0:
		rts
; ---------------------------------------------------------------------------

loc_8E1D2:
		move.b	#4,5(a0)
		move.l	#loc_8E20C,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_8E1E2:
		cmpi.b	#7,$22(a0)
		blo.s	loc_8E202
		bset	#7,$38(a0)
		bne.s	loc_8E1FA
		moveq	#-$69,d0
		jsr	Play_Sound_2.w

loc_8E1FA:
		bsr.w	sub_8E37C
		bsr.w	sub_8E2D4

loc_8E202:
		lea	byte_8E418(pc),a1
		jmp	Animate_RawNoSSTMultiDelay.w
; ---------------------------------------------------------------------------

loc_8E20C:
		move.b	#6,5(a0)
		move.w	#$60,$2E(a0)
		rts
; ---------------------------------------------------------------------------

loc_8E21A:
		subq.w	#1,$2E(a0)
		bmi.s	loc_8E222
		rts
; ---------------------------------------------------------------------------

loc_8E222:
		move.b	#2,5(a0)
		move.b	#0,$22(a0)
		bclr	#7,$38(a0)

locret_8E234:
		rts
; ---------------------------------------------------------------------------

loc_8E236:
		lea	ObjDat3_8E3F6(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_8E250,(a0)
		bsr.w	sub_8E2EA
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_8E250:
		tst.b	4(a0)
		bpl.s	loc_8E2B8
		moveq	#0,d1
		move.w	$18(a0),d0
		add.w	$40(a0),d0
		cmpi.w	#-$80,d0
		blt.s	loc_8E274
		cmpi.w	#$80,d0
		bgt.s	loc_8E274
		bset	#0,d1
		bra.w	loc_8E278
; ---------------------------------------------------------------------------

loc_8E274:

		move.w	d0,$18(a0)

loc_8E278:
		move.w	$1A(a0),d0
		addi.w	#8,d0
		bmi.s	loc_8E290
		cmpi.w	#$80,d0
		blt.s	loc_8E290
		bset	#1,d1
		bra.w	loc_8E294
; ---------------------------------------------------------------------------

loc_8E290:

		move.w	d0,$1A(a0)

loc_8E294:
		cmpi.b	#3,d1
		bne.s	loc_8E2A6
		move.l	#loc_3DBE0,(a0)
		move.w	#2,$34(a0)

loc_8E2A6:
		jsr	(sub_3DC3A).l
		jsr	MoveSprite2.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_8E2B8:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_8E2BE:
		lea	ObjDat3_8E3EA(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_8E2CE,(a0)

loc_8E2CE:
		jmp	Child_Draw_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_8E2D4:
		move.b	(V_int_run_count+3).w,d0
		andi.b	#7,d0
		bne.w	locret_8E234
		lea	ChildObjDat_8E40A(pc),a2
		jmp	CreateChild6_Simple.w
; End of function sub_8E2D4


; =============== S U B R O U T I N E =======================================


sub_8E2EA:
		jsr	Random_Number.w
		movea.w	$46(a0),a1
		move.w	d0,d1
		moveq	#0,d2
		move.b	$2C(a1),d2
		lsl.w	#5,d2
		lea	word_8E438(pc),a2
		adda.w	d2,a2
		andi.w	#$1C,d1
		adda.w	d1,a2
		move.w	(a2)+,d2
		move.w	(a2)+,d3
		beq.s	loc_8E35C
		andi.w	#6,d0
		move.w	word_8E364(pc,d0.w),d0
		move.w	#-$20,d4
		btst	#0,4(a1)
		bne.s	loc_8E330
		bset	#0,4(a0)
		neg.w	d0
		neg.w	d2
		neg.w	d4

loc_8E330:
		move.w	d0,$18(a0)
		add.w	d2,$10(a0)
		add.w	d3,$14(a0)
		move.w	d4,$40(a0)
		swap	d0
		moveq	#0,d2
		tst.w	d0
		bpl.s	loc_8E34A
		moveq	#4,d2

loc_8E34A:
		andi.w	#6,d0
		move.w	word_8E36C(pc,d0.w),$1A(a0)
		move.l	off_8E374(pc,d2.w),$C(a0)
		rts
; ---------------------------------------------------------------------------

loc_8E35C:
		addq.w	#4,sp
		jmp	Delete_Current_Sprite.w
; End of function sub_8E2EA

; ---------------------------------------------------------------------------
word_8E364:	dc.w $600
		dc.w $700
		dc.w $800
		dc.w $900
word_8E36C:	dc.w $FE80
		dc.w $FE00
		dc.w $FD80
		dc.w $FD00
off_8E374:	dc.l Map_MHZPollen
		dc.l Map_MHZBigLeaves

; =============== S U B R O U T I N E =======================================


sub_8E37C:
		lea	(Player_1).w,a1
		bsr.w	sub_8E388
		lea	(Player_2).w,a1
; End of function sub_8E37C


; =============== S U B R O U T I N E =======================================


sub_8E388:
		cmpi.b	#8,$20(a1)
		beq.s	locret_8E3D6
		tst.b	$3D(a1)
		bne.s	locret_8E3D6
		tst.b	$2E(a1)
		bne.s	locret_8E3D6
		jsr	Find_OtherObject.w
		cmpi.w	#$100,d2
		bhs.s	locret_8E3D6
		cmpi.w	#$40,d3
		bhs.s	locret_8E3D6
		move.w	d0,d4
		btst	#0,4(a0)
		bne.s	loc_8E3BA
		subq.w	#2,d4

loc_8E3BA:
		tst.w	d4
		beq.s	locret_8E3D6
		lsr.w	#4,d2
		andi.w	#$F,d2
		subi.w	#$F,d2
		neg.w	d2
		addq.w	#1,d2
		tst.w	d0
		bne.s	loc_8E3D2
		neg.w	d2

loc_8E3D2:
		add.w	d2,$10(a1)

locret_8E3D6:
		rts
; End of function sub_8E388

; ---------------------------------------------------------------------------
ObjDat4_8E3D8:	dc.w 1
		dc.w $A500
		dc.w $11
		dc.w 2
		dc.l Map_Cluckoid
		dc.w prio(5)
		dc.b $14
		dc.b $10
		dc.b 0
		dc.b $1A
ObjDat3_8E3EA:	dc.l Map_CluckoidArrow
		dc.w $A522
		dc.w prio(5)
		dc.b $10
		dc.b $C
		dc.b 0
		dc.b 0
ObjDat3_8E3F6:	dc.l Map_MHZPollen
		dc.w $E363
		dc.w prio(0)
		dc.b 8
		dc.b 8
		dc.b 0
		dc.b 0
ChildObjDat_8E402:dc.w 0
		dc.l loc_8E2BE
		dc.w $1C
ChildObjDat_8E40A:dc.w 0
		dc.l loc_8E236
DPLCPtr_8E410:	dc.l ArtUnc_Cluckoid
		dc.l DPLC_Cluckoid
byte_8E418:	dc.b 0
		dc.b 7
		dc.b 1
		dc.b 7
		dc.b 2
		dc.b 7
		dc.b 3
		dc.b 7
		dc.b 4
		dc.b $2F
		dc.b 5
		dc.b 2
		dc.b 6
		dc.b 2
		dc.b 7
		dc.b 2
		dc.b 8
		dc.b 2
		dc.b 9
		dc.b 7
		dc.b $A
		dc.b 7
		dc.b $B
		dc.b 7
		dc.b $C
		dc.b 7
		dc.b $D
		dc.b $1F
		dc.b 0
		dc.b $F
		dc.b $F4
		dc.b 0
word_8E438:	dc.w	$10,   $28
		dc.w	$20,   $28
		dc.w	$30,   $28
		dc.w	$40,   $28
		dc.w	$50,   $28
		dc.w	$60,   $28
		dc.w	$70,   $28
		dc.w	$80,   $28
		dc.w	$10,   $28
		dc.w	$18,   $28
		dc.w	$30,   $48
		dc.w	$40,   $48
		dc.w	$50,   $48
		dc.w	$60,   $48
		dc.w	$70,   $48
		dc.w	$80,   $48
		dc.w	$10,   $28
		dc.w	$14,   $28
		dc.w	$18,   $28
		dc.w	$1C,   $28
		dc.w	$20,   $28
		dc.w	  0,	 0
		dc.w	  0,	 0
		dc.w	  0,	 0
		dc.w	$10,   $28
		dc.w	$18,   $28
		dc.w	$20,   $28
		dc.w	$30,   $48
		dc.w	$40,   $48
		dc.w	$50,   $48
		dc.w	$60,   $48
		dc.w	$80,   $68
DPLC_Cluckoid:	include "General/Sprites/Cluckoid/DPLC - Cluckoid.asm"

Map_CluckoidArrow:	include "General/Sprites/Cluckoid/Map - Cluckoid Arrow.asm"

Map_Cluckoid:	include "General/Sprites/Cluckoid/Map - Cluckoid.asm"

; ---------------------------------------------------------------------------

Obj_Skorp:

		jsr	Obj_WaitOffscreen.w
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_8E66A(pc,d0.w),d1
		jsr	off_8E66A(pc,d1.w)
		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------
off_8E66A:	dc.w loc_8E670-off_8E66A

		dc.w loc_8E6B8-off_8E66A
		dc.w loc_8E732-off_8E66A
; ---------------------------------------------------------------------------

loc_8E670:
		lea	ObjDat3_8EA48(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.b	#$B,$1E(a0)
		move.l	#loc_8E706,$34(a0)
		move.w	#-$80,d0
		btst	#0,4(a0)
		beq.s	loc_8E696
		neg.w	d0

loc_8E696:
		move.w	d0,$18(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		subq.w	#1,d0
		move.w	d0,$2E(a0)
		add.w	d0,d0
		addq.w	#1,d0
		move.w	d0,$3A(a0)
		lea	ChildObjDat_8EA5A(pc),a2
		jmp	CreateChild4_LinkListRepeated.w
; ---------------------------------------------------------------------------

loc_8E6B8:
		lea	(Player_1).w,a1
		jsr	Find_OtherObject.w
		btst	#0,4(a0)
		sne	d4
		tst.w	d0
		beq.s	loc_8E6D0
		not.b	d4

loc_8E6D0:
		tst.b	d4
		bne.s	loc_8E6E6
		cmpi.w	#$20,d2
		blo.s	loc_8E6E6
		cmpi.w	#$80,d2
		bhs.s	loc_8E6E6
		cmpi.w	#$28,d3
		blo.s	loc_8E718

loc_8E6E6:

		lea	byte_8EA60(pc),a1
		jsr	Animate_RawNoSST.w
		jsr	MoveSprite2.w
		jsr	ObjHitFloor2_DoRoutine.w
		bne.w	locret_8E716
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_8E706:
		neg.w	$18(a0)
		bchg	#0,4(a0)
		move.w	$3A(a0),$2E(a0)

locret_8E716:
		rts
; ---------------------------------------------------------------------------

loc_8E718:
		move.b	#4,5(a0)
		bset	#1,$38(a0)
		move.w	$10(a1),$3E(a0)
		move.w	$14(a1),$40(a0)
		rts
; ---------------------------------------------------------------------------

loc_8E732:
		btst	#1,$38(a0)
		beq.s	loc_8E73C
		rts
; ---------------------------------------------------------------------------

loc_8E73C:
		move.b	#2,5(a0)
		rts
; ---------------------------------------------------------------------------

loc_8E744:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_8E778(pc,d0.w),d1
		jsr	off_8E778(pc,d1.w)
		movea.w	$44(a0),a1
		btst	#7,$2A(a1)
		bne.s	loc_8E772
		cmpi.b	#$A,$2C(a0)
		bne.s	loc_8E76C
		jsr	Add_SpriteToCollisionResponseList.w

loc_8E76C:
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_8E772:
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------
off_8E778:	dc.w loc_8E78C-off_8E778

		dc.w loc_8E7D4-off_8E778
		dc.w loc_8E828-off_8E778
		dc.w loc_8E868-off_8E778
		dc.w loc_8E88C-off_8E778
		dc.w loc_8E8C4-off_8E778
		dc.w loc_8E8BE-off_8E778
		dc.w loc_8E8BE-off_8E778
		dc.w loc_8E918-off_8E778
		dc.w loc_8E958-off_8E778
; ---------------------------------------------------------------------------

loc_8E78C:
		lea	word_8EA54(pc),a1
		jsr	SetUp_ObjAttributes3.w
		movea.w	$46(a0),a1
		move.b	$2C(a0),d0
		bne.s	loc_8E7B2
		move.b	#8,$42(a0)
		move.b	#-$10,$43(a0)
		move.w	$46(a0),$44(a1)

loc_8E7B2:
		move.w	$44(a1),$44(a0)
		cmpi.b	#$A,d0
		bne.s	loc_8E7D0
		move.b	#4,$22(a0)
		move.w	#prio(2),8(a0)
		move.b	#-$79,$28(a0)

loc_8E7D0:
		bsr.w	sub_8E982

loc_8E7D4:
		jsr	(Change_FlipXUseParent).l
		tst.b	$2C(a0)
		beq.s	loc_8E7F8
		movea.w	$44(a0),a1
		btst	#1,$38(a1)
		bne.s	loc_8E80E
		bsr.w	sub_8EA1C
		moveq	#5,d2
		jmp	(MoveSprite_CircularSimpleCheckFlip).l
; ---------------------------------------------------------------------------

loc_8E7F8:
		jsr	Refresh_ChildPositionAdjusted.w
		movea.w	$46(a0),a1
		moveq	#0,d0

loc_8E804:
		move.b	$22(a1),d0
		sub.w	d0,$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_8E80E:
		move.b	#4,5(a0)
		move.l	#loc_8E87C,$34(a0)
		movea.w	$44(a0),a1
		andi.b	#-$D,$38(a1)
		rts
; ---------------------------------------------------------------------------

loc_8E828:
		moveq	#0,d0
		move.b	$2C(a0),d0
		lsr.w	#1,d0
		move.b	byte_8E862(pc,d0.w),d1
		move.b	$3C(a0),d2
		subq.b	#8,d2
		cmp.b	d1,d2
		bhi.s	loc_8E856
		move.b	#6,5(a0)
		move.b	d1,d2
		cmpi.b	#5,d0
		bne.s	loc_8E856
		movea.w	$44(a0),a1
		bset	#3,$38(a1)

loc_8E856:

		move.b	d2,$3C(a0)
		moveq	#5,d2
		jmp	(MoveSprite_CircularSimpleCheckFlip).l
; ---------------------------------------------------------------------------
byte_8E862:	dc.b 0
		dc.b $68
		dc.b $58
		dc.b $48
		dc.b $38
		dc.b $38
; ---------------------------------------------------------------------------

loc_8E868:
		movea.w	$44(a0),a1
		btst	#3,$38(a1)
		bne.s	loc_8E876
		rts
; ---------------------------------------------------------------------------

loc_8E876:
		movea.l	$34(a0),a1
		jmp	(a1)
; ---------------------------------------------------------------------------

loc_8E87C:
		move.b	#8,5(a0)
		rts
; ---------------------------------------------------------------------------

loc_8E884:
		move.b	#$10,5(a0)
		rts
; ---------------------------------------------------------------------------

loc_8E88C:
		move.b	$3C(a0),d0
		addi.b	#$10,d0
		bpl.s	loc_8E8B2
		move.b	#$C,5(a0)
		move.w	#$F,$2E(a0)
		move.l	#loc_8E8CA,$34(a0)
		bsr.w	sub_8E9A4
		move.b	#-$80,d0

loc_8E8B2:
		move.b	d0,$3C(a0)
		moveq	#5,d2
		jmp	(MoveSprite_CircularSimpleCheckFlip).l
; ---------------------------------------------------------------------------

loc_8E8BE:
		jsr	MoveSprite2.w

loc_8E8C4:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_8E8CA:
		move.b	#$A,5(a0)
		move.w	#$F,$2E(a0)
		move.l	#loc_8E8E0,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_8E8E0:
		move.b	#$E,5(a0)
		neg.w	$18(a0)
		neg.w	$1A(a0)
		move.w	#$F,$2E(a0)
		move.l	#loc_8E8FE,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_8E8FE:
		move.b	#4,5(a0)
		move.l	#loc_8E884,$34(a0)
		movea.w	$44(a0),a1
		bclr	#3,$38(a1)
		rts
; ---------------------------------------------------------------------------

loc_8E918:
		moveq	#0,d0
		move.b	$2C(a0),d0
		lsr.w	#1,d0
		move.b	byte_8E952(pc,d0.w),d1
		move.b	$3C(a0),d2
		addq.b	#8,d2
		cmp.b	d1,d2
		blo.s	loc_8E946
		move.b	#$12,5(a0)
		move.b	d1,d2
		cmpi.b	#5,d0
		bne.s	loc_8E946
		movea.w	$44(a0),a1
		bset	#2,$38(a1)

loc_8E946:

		move.b	d2,$3C(a0)
		moveq	#5,d2
		jmp	(MoveSprite_CircularSimpleCheckFlip).l
; ---------------------------------------------------------------------------
byte_8E952:	dc.b 0
		dc.b $90
		dc.b $A0
		dc.b $B0
		dc.b $B8
		dc.b $C0
; ---------------------------------------------------------------------------

loc_8E958:
		movea.w	$44(a0),a1
		btst	#2,$38(a1)
		bne.s	loc_8E966
		rts
; ---------------------------------------------------------------------------

loc_8E966:
		move.b	#2,5(a0)
		movea.w	$44(a0),a1
		bclr	#1,$38(a1)
		clr.b	$3B(a0)
		bclr	#0,$38(a0)
		rts

; =============== S U B R O U T I N E =======================================


sub_8E982:
		moveq	#0,d0
		move.b	$2C(a0),d0
		lsr.b	#1,d0
		move.b	byte_8E992(pc,d0.w),$3C(a0)
		rts
; End of function sub_8E982

; ---------------------------------------------------------------------------
byte_8E992:	dc.b 0
		dc.b $90
		dc.b $A0
		dc.b $B0
		dc.b $B8
		dc.b $C0
; ---------------------------------------------------------------------------
		move.b	$2C(a0),d0
		lsr.b	#1,d0
		move.b	d0,$2E(a0)
		rts

; =============== S U B R O U T I N E =======================================


sub_8E9A4:
		movea.w	$44(a0),a1
		move.w	$3E(a1),d0
		sub.w	$10(a0),d0
		smi	d2
		bpl.s	loc_8E9B6
		neg.w	d0

loc_8E9B6:
		move.w	$40(a1),d1
		sub.w	$14(a0),d1
		smi	d3
		bpl.s	loc_8E9C4
		neg.w	d1

loc_8E9C4:
		moveq	#0,d4
		move.b	$2C(a0),d4
		move.w	off_8E9D2(pc,d4.w),d4
		jmp	off_8E9D2(pc,d4.w)
; End of function sub_8E9A4

; ---------------------------------------------------------------------------
off_8E9D2:	dc.w loc_8E9DE-off_8E9D2

		dc.w loc_8E9DE-off_8E9D2
		dc.w loc_8E9E6-off_8E9D2
		dc.w loc_8E9EE-off_8E9D2
		dc.w loc_8E9F6-off_8E9D2
		dc.w loc_8EA02-off_8E9D2
; ---------------------------------------------------------------------------

loc_8E9DE:
		move.w	#$3333,d4
		bra.w	loc_8E9FA
; ---------------------------------------------------------------------------

loc_8E9E6:
		move.w	#$6666,d4
		bra.w	loc_8E9FA
; ---------------------------------------------------------------------------

loc_8E9EE:
		move.w	#-$6667,d4
		bra.w	loc_8E9FA
; ---------------------------------------------------------------------------

loc_8E9F6:
		move.w	#-$3334,d4

loc_8E9FA:

		mulu.w	d4,d0
		swap	d0
		mulu.w	d4,d1
		swap	d1

loc_8EA02:
		asl.w	#4,d0
		tst.b	d2
		beq.s	loc_8EA0A
		neg.w	d0

loc_8EA0A:
		move.w	d0,$18(a0)
		asl.w	#4,d1
		tst.b	d3
		beq.s	loc_8EA16
		neg.w	d1

loc_8EA16:
		move.w	d1,$1A(a0)
		rts

; =============== S U B R O U T I N E =======================================


sub_8EA1C:
		subq.b	#1,$3B(a0)
		bpl.s	loc_8EA2E
		move.b	#$10,$3B(a0)
		bchg	#0,$38(a0)

loc_8EA2E:
		btst	#0,$3B(a0)
		bne.s	locret_8EA46
		moveq	#1,d0
		btst	#0,$38(a0)
		bne.s	loc_8EA42
		neg.w	d0

loc_8EA42:
		add.b	d0,$3C(a0)

locret_8EA46:
		rts
; End of function sub_8EA1C

; ---------------------------------------------------------------------------
ObjDat3_8EA48:	dc.l Map_Skorp
		dc.w $2536
		dc.w prio(3)
		dc.b $10
		dc.b $14
		dc.b 0
		dc.b 6
word_8EA54:	dc.w prio(3)
		dc.b $10
		dc.b $14
		dc.b 3
		dc.b 0
ChildObjDat_8EA5A:dc.w 5
		dc.l loc_8E744
byte_8EA60:	dc.b	9,   1,	  0,   1,   2, $FC
; ---------------------------------------------------------------------------

Obj_Sandworm:

		jsr	Obj_WaitOffscreen.w
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_8EA80(pc,d0.w),d1
		jsr	off_8EA80(pc,d1.w)
		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------
off_8EA80:	dc.w loc_8EA88-off_8EA80

		dc.w loc_8EACC-off_8EA80
		dc.w loc_8EB2E-off_8EA80
		dc.w loc_8EACC-off_8EA80
; ---------------------------------------------------------------------------

loc_8EA88:
		lea	ObjDat3_8ED44(pc),a1
		jsr	SetUp_ObjAttributes.w
		bset	#7,$38(a0)
		move.l	#byte_8ED8C,$30(a0)
		lea	ChildObjDat_8ED66(pc),a2
		jsr	CreateChild6_Simple.w

loc_8EAAA:

		move.w	#$7F,$2E(a0)
		move.l	#loc_8EAD2,$34(a0)
		btst	#7,$38(a0)
		beq.w	locret_8EBE0
		lea	ChildObjDat_8ED6C(pc),a2
		jmp	CreateChild3_NormalRepeated.w
; ---------------------------------------------------------------------------

loc_8EACC:

		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_8EAD2:
		move.b	#4,5(a0)
		move.b	#-$75,$28(a0)
		btst	#7,$38(a0)
		beq.s	loc_8EAEC
		move.b	#$B,$28(a0)

loc_8EAEC:
		move.w	$14(a0),$3A(a0)
		move.w	#-$400,$1A(a0)
		moveq	#-$60,d0
		move.w	#-$200,d1
		btst	#0,4(a0)
		beq.s	loc_8EB0A
		neg.w	d0
		neg.w	d1

loc_8EB0A:
		add.w	d0,$10(a0)
		move.w	d1,$18(a0)
		btst	#7,$38(a0)
		beq.w	locret_8EBE0
		moveq	#$6C,d0
		jsr	Play_Sound_2.w
		lea	ChildObjDat_8ED74(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_8EB2E:

		jsr	Animate_Raw.w
		jsr	MoveSprite_LightGravity.w
		move.w	$3A(a0),d0
		cmp.w	$14(a0),d0
		bhi.w	locret_8EBE0
		move.b	#6,5(a0)
		clr.b	$28(a0)
		move.w	d0,$14(a0)
		move.w	#$3F,$2E(a0)
		move.l	#loc_8EB7E,$34(a0)
		btst	#7,$38(a0)
		beq.w	locret_8EBE0
		moveq	#$6C,d0
		jsr	Play_Sound_2.w
		lea	ChildObjDat_8ED74(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_8EB7E:
		move.b	#2,5(a0)
		bchg	#0,4(a0)
		bra.w	loc_8EAAA
; ---------------------------------------------------------------------------

loc_8EB8E:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_8EBA4(pc,d0.w),d1
		jsr	off_8EBA4(pc,d1.w)
		moveq	#0,d0
		jmp	Child_DrawTouch_Sprite_FlickerMove.w
; ---------------------------------------------------------------------------
off_8EBA4:	dc.w loc_8EBAC-off_8EBA4

		dc.w loc_8EACC-off_8EBA4
		dc.w loc_8EB2E-off_8EBA4
		dc.w loc_8EACC-off_8EBA4
; ---------------------------------------------------------------------------

loc_8EBAC:
		lea	word_8ED60(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#byte_8ED90,$30(a0)
		jsr	(Change_FlipXUseParent).l
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	d0,d1
		add.w	d0,d0
		add.w	d1,d0
		addq.w	#6,d0
		subq.w	#1,d0
		move.w	d0,$2E(a0)
		move.l	#loc_8EAAA,$34(a0)

locret_8EBE0:

		rts
; ---------------------------------------------------------------------------

loc_8EBE2:
		lea	word_8ED50(pc),a1
		jsr	SetUp_ObjAttributes2.w
		move.l	#loc_8EC1C,(a0)
		move.l	#loc_8EC22,$34(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		lsl.w	#2,d0
		move.w	d0,d1
		movea.w	$46(a0),a1
		btst	#0,4(a1)
		bne.s	loc_8EC12
		neg.w	d0

loc_8EC12:
		add.w	d0,$10(a0)
		subq.w	#1,d1
		move.w	d1,$2E(a0)

loc_8EC1C:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_8EC22:
		move.l	#loc_8EC46,(a0)
		move.l	#byte_8ED88,$30(a0)
		move.w	#-$80,$1A(a0)
		move.w	#$F,$2E(a0)
		move.l	#loc_8EC5E,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_8EC46:
		jsr	Animate_Raw.w
		jsr	MoveSprite2.w
		jsr	Obj_Wait.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_8EC5E:
		move.w	#$40,$1A(a0)
		move.w	#$1F,$2E(a0)
		move.l	#Go_Delete_Sprite,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_8EC74:

		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_8EC88(pc,d0.w),d1
		jsr	off_8EC88(pc,d1.w)
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
off_8EC88:	dc.w loc_8EC92-off_8EC88

		dc.w loc_8ECB0-off_8EC88
		dc.w loc_8ECDA-off_8EC88
		dc.w loc_8ED02-off_8EC88
		dc.w loc_8ED3E-off_8EC88
; ---------------------------------------------------------------------------

loc_8EC92:
		lea	word_8ED58(pc),a1
		jsr	SetUp_ObjAttributes2.w
		moveq	#0,d0
		move.b	$2C(a0),d0
		add.w	d0,d0
		move.w	d0,$2E(a0)
		move.l	#loc_8ECB6,$34(a0)

loc_8ECB0:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_8ECB6:
		move.b	#4,5(a0)
		move.l	#byte_8ED94,$30(a0)
		move.w	#-$400,$1A(a0)
		move.w	#7,$2E(a0)
		move.l	#loc_8ECEC,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_8ECDA:
		jsr	Animate_Raw.w
		jsr	MoveSprite2.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_8ECEC:
		move.b	#6,5(a0)
		move.w	#$17,$2E(a0)
		move.l	#loc_8ED1E,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_8ED02:
		moveq	#8,d0
		btst	#0,$2F(a0)
		bne.s	loc_8ED0E
		neg.w	d0

loc_8ED0E:
		add.w	d0,$14(a0)
		jsr	Animate_Raw.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_8ED1E:
		move.b	#8,5(a0)
		clr.b	$24(a0)
		clr.b	$23(a0)
		move.l	#byte_8ED98,$30(a0)
		move.l	#Go_Delete_Sprite,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_8ED3E:
		jmp	Animate_RawMultiDelay.w
; ---------------------------------------------------------------------------
ObjDat3_8ED44:	dc.l Map_Sandworm
		dc.w $2557
		dc.w prio(5)
		dc.b 8
		dc.b $C
		dc.b 0
		dc.b 0
word_8ED50:	dc.w $4557
		dc.w prio(4)
		dc.b 8
		dc.b 4
		dc.b 3
		dc.b 0
word_8ED58:	dc.w $4557
		dc.w prio(4)
		dc.b 4
		dc.b $10
		dc.b 5
		dc.b 0
word_8ED60:	dc.w prio(5)
		dc.b 8
		dc.b 8
		dc.b 1
		dc.b 0
ChildObjDat_8ED66:dc.w 4
		dc.l loc_8EB8E
ChildObjDat_8ED6C:dc.w 7
		dc.l loc_8EBE2
		dc.w $F8
ChildObjDat_8ED74:dc.w 2

		dc.l loc_8EC74
		dc.w 4
		dc.l loc_8EC74
		dc.w $FC04
		dc.l loc_8EC74
		dc.w $404
byte_8ED88:	dc.b 1
		dc.b 3
		dc.b 4
		dc.b $FC
byte_8ED8C:	dc.b 9
		dc.b 0
		dc.b 2
		dc.b $FC
byte_8ED90:	dc.b $7E
		dc.b 1
		dc.b 1
		dc.b $FC
byte_8ED94:	dc.b 1
		dc.b 5
		dc.b 6
		dc.b $FC
byte_8ED98:	dc.b 7
		dc.b 3
		dc.b 7
		dc.b 3
		dc.b 8
		dc.b 5
		dc.b $F4
		dc.b 0
; ---------------------------------------------------------------------------

Obj_Rockn:

		jsr	Obj_WaitOffscreen.w
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_8EDBA(pc,d0.w),d1
		jsr	off_8EDBA(pc,d1.w)
		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------
off_8EDBA:	dc.w loc_8EDC0-off_8EDBA

		dc.w loc_8EE1C-off_8EDBA
		dc.w loc_8EE3A-off_8EDBA
; ---------------------------------------------------------------------------

loc_8EDC0:
		lea	ObjDat3_8F04E(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.b	#7,$1E(a0)
		move.b	$2C(a0),d0
		bne.s	loc_8EDE4
		clr.w	$3A(a0)
		move.w	#$7FFF,$3C(a0)
		bra.w	loc_8EE02
; ---------------------------------------------------------------------------

loc_8EDE4:
		move.b	d0,d1
		andi.w	#$F0,d0
		neg.w	d0
		add.w	$10(a0),d0
		move.w	d0,$3A(a0)
		andi.w	#$F,d1
		lsl.w	#4,d1
		add.w	$10(a0),d1
		move.w	d1,$3C(a0)

loc_8EE02:
		moveq	#-$80,d0
		btst	#0,4(a0)
		beq.s	loc_8EE0E
		neg.w	d0

loc_8EE0E:
		move.w	d0,$18(a0)
		lea	ChildObjDat_8F072(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_8EE1C:
		btst	#2,$38(a0)
		beq.s	locret_8EE38
		move.b	#4,5(a0)
		move.b	#-$27,$28(a0)
		move.l	#loc_8EF1C,$34(a0)

locret_8EE38:

		rts
; ---------------------------------------------------------------------------

loc_8EE3A:
		lea	(byte_8F080).l,a1
		jsr	Animate_RawNoSST.w
		bclr	#0,$38(a0)
		lea	(Player_1).w,a1
		move.w	$10(a1),d0
		cmp.w	$3A(a0),d0
		blo.s	loc_8EE86
		cmp.w	$3C(a0),d0
		bhs.s	loc_8EE86
		move.w	$14(a1),d1
		sub.w	$14(a0),d1
		bpl.s	loc_8EE6C
		neg.w	d1

loc_8EE6C:
		cmpi.w	#$10,d1
		bhs.s	loc_8EE86
		bset	#0,$38(a0)
		moveq	#-$80,d1
		sub.w	$10(a0),d0
		bcs.s	loc_8EE82
		neg.w	d1

loc_8EE82:
		move.w	d1,$18(a0)

loc_8EE86:

		tst.w	$18(a0)
		beq.s	loc_8EE92
		jsr	ObjHitFloor2_DoRoutine.w

loc_8EE92:
		move.w	$10(a0),d0
		move.w	$18(a0),d1
		bne.s	loc_8EEA6
		btst	#0,$38(a0)
		bne.s	loc_8EEDC
		tst.w	d1

loc_8EEA6:
		bmi.s	loc_8EEBC
		move.w	#$80,d1
		bset	#0,4(a0)
		cmp.w	$3C(a0),d0
		bhs.s	loc_8EECA
		bra.w	loc_8EED2
; ---------------------------------------------------------------------------

loc_8EEBC:
		moveq	#-$80,d1
		bclr	#0,4(a0)
		cmp.w	$3A(a0),d0
		bhs.s	loc_8EED2

loc_8EECA:
		neg.w	d1
		bchg	#0,4(a0)

loc_8EED2:

		move.w	d1,$18(a0)
		jsr	MoveSprite2.w

loc_8EEDC:
		lea	word_8EF14(pc),a1
		jsr	Check_PlayerInRange.w
		tst.w	d0
		beq.s	loc_8EEEE
		bsr.w	sub_8EEF4

loc_8EEEE:
		swap	d0
		tst.w	d0
		beq.s	locret_8EF12

; =============== S U B R O U T I N E =======================================


sub_8EEF4:
		movea.w	d0,a1
		jsr	Check_PlayerAttack.w
		beq.s	locret_8EF12
		btst	#1,$2A(a1)
		bne.s	locret_8EF12
		move.w	a1,$44(a0)
		jsr	(EnemyDefeated).l
		addq.w	#4,sp

locret_8EF12:

		rts
; End of function sub_8EEF4

; ---------------------------------------------------------------------------
word_8EF14:	dc.w  $FFD7,   $52, $FFF0,   $20
; ---------------------------------------------------------------------------

loc_8EF1C:
		btst	#0,$38(a0)
		bne.s	loc_8EF36
		moveq	#-$80,d0
		bchg	#0,4(a0)
		bne.s	loc_8EF30
		neg.w	d0

loc_8EF30:
		move.w	d0,$18(a0)
		rts
; ---------------------------------------------------------------------------

loc_8EF36:
		clr.w	$18(a0)
		rts
; ---------------------------------------------------------------------------

loc_8EF3C:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_8EF7A(pc,d0.w),d1
		move.w	$10(a0),-(sp)
		jsr	off_8EF7A(pc,d1.w)
		moveq	#$23,d1
		moveq	#$10,d2
		moveq	#$11,d3
		move.w	(sp)+,d4
		movea.w	$46(a0),a1
		btst	#7,$2A(a1)
		bne.s	loc_8EF6E
		jsr	SolidObjectFull.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_8EF6E:
		jsr	Displace_PlayerOffObject.w
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------
off_8EF7A:	dc.w loc_8EF84-off_8EF7A

		dc.w loc_8EF94-off_8EF7A
		dc.w loc_8EFC4-off_8EF7A
		dc.w loc_8EFD8-off_8EF7A
		dc.w loc_8EFF6-off_8EF7A
; ---------------------------------------------------------------------------

loc_8EF84:
		lea	ObjDat3_8F05A(pc),a1
		jsr	SetUp_ObjAttributes.w
		jmp	Refresh_ChildPositionAdjusted.w
; ---------------------------------------------------------------------------

loc_8EF94:
		lea	(Player_1).w,a1
		jsr	Find_OtherObject.w
		cmpi.w	#$28,d2
		bhi.w	locret_8EE38
		cmpi.w	#$40,d3
		bhi.w	locret_8EE38
		move.b	#4,5(a0)
		move.w	#7,$2E(a0)
		lea	ChildObjDat_8F07A(pc),a2
		jmp	CreateChild6_Simple.w
; ---------------------------------------------------------------------------

loc_8EFC4:
		subq.w	#1,$2E(a0)
		bpl.s	locret_8EFD6
		move.b	#6,5(a0)
		move.w	#7,$2E(a0)

locret_8EFD6:
		rts
; ---------------------------------------------------------------------------

loc_8EFD8:
		subq.w	#2,$14(a0)
		subq.w	#1,$2E(a0)
		bmi.s	loc_8EFE4
		rts
; ---------------------------------------------------------------------------

loc_8EFE4:
		move.b	#8,5(a0)
		movea.w	$46(a0),a1
		bset	#2,$38(a1)
		rts
; ---------------------------------------------------------------------------

loc_8EFF6:
		movea.w	$46(a0),a1
		moveq	#-$18,d0
		tst.b	$22(a1)
		beq.s	loc_8F004
		moveq	#-$17,d0

loc_8F004:
		move.b	d0,$43(a0)
		jmp	Refresh_ChildPositionAdjusted.w
; ---------------------------------------------------------------------------

loc_8F00E:
		lea	ObjDat3_8F066(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_8F024,(a0)
		move.w	#5,$2E(a0)

loc_8F024:
		subq.w	#1,$2E(a0)
		bpl.s	loc_8F036
		move.l	#loc_8F042,(a0)
		move.b	#3,$22(a0)

loc_8F036:
		jsr	Refresh_ChildPositionAdjusted.w
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_8F042:
		jsr	Refresh_ChildPositionAdjusted.w
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------
ObjDat3_8F04E:	dc.l Map_Rockn
		dc.w $2500
		dc.w prio(5)
		dc.b $10
		dc.b 8
		dc.b 0
		dc.b 0
ObjDat3_8F05A:	dc.l Map_SOZBreakableSandRock
		dc.w $43D9
		dc.w prio(4)
		dc.b $18
		dc.b $10
		dc.b 0
		dc.b 0
ObjDat3_8F066:	dc.l Map_Rockn
		dc.w $2500
		dc.w prio(3)
		dc.b $18
		dc.b $10
		dc.b 4
		dc.b 0
ChildObjDat_8F072:dc.w 0
		dc.l loc_8EF3C
		dc.w $F8
ChildObjDat_8F07A:dc.w 0
		dc.l loc_8F00E
byte_8F080:	dc.b	8,   0,	  1,   0,   2, $FC
Map_Rockn:include "General/Sprites/Rockn/Map - Rock'n.asm"
; ---------------------------------------------------------------------------

Obj_SOZ_Ghosts:		; NAT: Add ghosts back
		move.l	#loc_8F0CA,(a0)
		move.w	#$120,$10(a0)
		move.w	#$A0,$14(a0)

loc_8F0CA:
		tst.b	(Last_star_post_hit).w
		beq.w	locret_8F436

loc_8F0DA:
		moveq	#0,d0
		move.b	(__u_F7C3).w,d0
		beq.s	loc_8F112
		move.b	byte_8F118(pc,d0.w),d0
		move.b	(__u_FAAD).w,d1
		cmp.b	d0,d1
		bhs.w	locret_8F436
		subq.w	#1,$3A(a0)
		bpl.w	locret_8F436
		addq.b	#1,d1
		move.b	d1,(__u_FAAD).w
		cmp.b	d0,d1
		bhs.s	loc_8F108
		move.w	#$3F,$3A(a0)

loc_8F108:
		lea	ChildObjDat_8F674(pc),a2
		jmp	CreateChild6_Simple.w
; ---------------------------------------------------------------------------

loc_8F112:
		clr.b	(__u_FAAD).w
		rts
; ---------------------------------------------------------------------------
byte_8F118:	dc.b 0
		dc.b 1
		dc.b 2
		dc.b 2
		dc.b 3
		dc.b 3
; ---------------------------------------------------------------------------

loc_8F11E:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_8F19A(pc,d0.w),d1
		jsr	off_8F19A(pc,d1.w)
		lea	DPLCPtr_8F67A(pc),a2
		jsr	Perform_DPLC.w
		tst.b	4(a0)
		bpl.s	loc_8F16A
		tst.b	(__u_F7C3).w
		beq.s	loc_8F174
		jsr	Check_PlayerCollision.w
		beq.s	loc_8F15E
		jsr	Check_PlayerAttack.w
		bne.s	loc_8F174
		tst.b	$34(a1)
		bne.s	loc_8F15E
		jsr	HurtCharacter_Directly.w

loc_8F15E:

		jsr	Add_SpriteToCollisionResponseList.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_8F16A:

		subq.b	#1,(__u_FAAD).w
		jmp	Go_Delete_SpriteSlotted2.w
; ---------------------------------------------------------------------------

loc_8F174:

		move.l	#loc_8F37A,(a0)
		move.l	#loc_8F16A,$34(a0)
		lea	byte_8F6BF(pc),a1
		jsr	Set_Raw_Animation.w
		moveq	#-$76,d0
		jsr	Play_Sound_2.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------
off_8F19A:	dc.w loc_8F1AC-off_8F19A

		dc.w loc_8F1DA-off_8F19A
		dc.w loc_8F1FE-off_8F19A
		dc.w loc_8F226-off_8F19A
		dc.w loc_8F26E-off_8F19A
		dc.w loc_8F2BE-off_8F19A
		dc.w loc_8F2E0-off_8F19A
		dc.w loc_8F322-off_8F19A
		dc.w loc_8F36E-off_8F19A
; ---------------------------------------------------------------------------

loc_8F1AC:
		lea	ObjDat4_8F61C(pc),a1
		jsr	SetUp_ObjAttributesSlotted.w
		bclr	#2,4(a0)
		bset	#7,4(a0)
		move.b	(__u_F7C3).w,$42(a0)
		move.b	(__u_FAAD).w,$43(a0)
		bsr.w	sub_8F538
		moveq	#-$6E,d0
		jsr	Play_Sound_2.w

loc_8F1DA:
		jsr	Animate_RawMultiDelay.w
		tst.w	d2
		beq.s	locret_8F1F2
		cmpi.b	#5,(__u_F7C3).w
		beq.s	loc_8F1F4
		move.b	#4,5(a0)

locret_8F1F2:
		rts
; ---------------------------------------------------------------------------

loc_8F1F4:

		move.b	#$C,5(a0)
		bra.w	loc_8F58E
; ---------------------------------------------------------------------------

loc_8F1FE:
		jsr	Animate_RawMultiDelay.w
		jsr	Swing_UpAndDown.w
		jsr	MoveSprite2.w
		bsr.w	sub_8F4F0
		move.b	(__u_F7C3).w,d0
		cmp.b	$42(a0),d0
		beq.s	locret_8F224
		move.b	#6,5(a0)

locret_8F224:
		rts
; ---------------------------------------------------------------------------

loc_8F226:
		jsr	Animate_RawMultiDelay.w
		jsr	Swing_UpAndDown.w
		tst.w	d3
		bne.s	loc_8F240
		jsr	MoveSprite2.w
		bra.w	sub_8F4F0
; ---------------------------------------------------------------------------

loc_8F240:
		move.b	#8,5(a0)
		moveq	#0,d0
		move.b	(__u_F7C3).w,d0
		move.b	byte_8F268(pc,d0.w),d1
		beq.w	locret_8F436
		move.b	d0,$42(a0)
		cmpi.b	#5,d0
		beq.s	loc_8F1F4
		move.b	#4,5(a0)
		bra.w	loc_8F58E
; ---------------------------------------------------------------------------
byte_8F268:	dc.b 0
		dc.b 0
		dc.b 0
		dc.b 1
		dc.b 0
		dc.b 1
; ---------------------------------------------------------------------------

loc_8F26E:
		jsr	Swing_UpAndDown.w
		jsr	MoveSprite2.w
		bsr.w	sub_8F4F0
		jsr	Animate_RawMultiDelay.w
		beq.s	locret_8F2B0
		cmpi.b	#2,$23(a0)
		bne.s	locret_8F2B0
		move.b	#$A,5(a0)
		move.b	(__u_F7C3).w,d0
		move.b	d0,$42(a0)
		add.w	d0,d0
		andi.w	#$C,d0
		movea.l	off_8F2B2(pc,d0.w),a1
		move.b	(a1),$22(a0)
		jsr	Set_Raw_Animation.w

locret_8F2B0:

		rts
; ---------------------------------------------------------------------------
off_8F2B2:	dc.l byte_8F6CC
		dc.l byte_8F6CC
		dc.l byte_8F6D4
; ---------------------------------------------------------------------------

loc_8F2BE:
		jsr	Swing_UpAndDown.w
		jsr	MoveSprite2.w
		bsr.w	sub_8F4F0
		jsr	Animate_RawMultiDelay.w
		tst.w	d2
		beq.s	locret_8F2DE
		move.b	#4,5(a0)

locret_8F2DE:
		rts
; ---------------------------------------------------------------------------

loc_8F2E0:
		jsr	Animate_RawMultiDelay.w
		jsr	Swing_UpAndDown.w
		jsr	MoveSprite2.w
		move.w	$10(a0),d0
		tst.w	$18(a0)
		bmi.s	loc_8F304
		cmpi.w	#$1A0,d0
		bhi.s	loc_8F30A
		rts
; ---------------------------------------------------------------------------

loc_8F304:
		cmpi.w	#$A0,d0
		bhs.s	locret_8F320

loc_8F30A:
		move.b	#$E,5(a0)
		bchg	#0,4(a0)
		neg.w	$18(a0)
		move.w	#$3B,$2E(a0)

locret_8F320:
		rts
; ---------------------------------------------------------------------------

loc_8F322:
		jsr	Animate_RawMultiDelay.w
		subq.w	#1,$2E(a0)
		bpl.w	locret_8F436
		move.b	#$10,5(a0)
		move.b	#-$29,$28(a0)
		bset	#2,4(a0)
		move.w	(Camera_X_pos).w,d0
		move.w	$10(a0),d1
		subi.w	#$80,d1
		add.w	d1,d0
		move.w	d0,$10(a0)
		move.w	(Camera_Y_pos).w,d0
		move.w	$14(a0),d1
		subi.w	#$80,d1
		add.w	d1,d0
		move.w	d0,$14(a0)
		move.w	#$100,$1A(a0)
		rts
; ---------------------------------------------------------------------------

loc_8F36E:
		jsr	Animate_RawMultiDelay.w
		jmp	MoveSprite2.w
; ---------------------------------------------------------------------------

loc_8F37A:
		jsr	Animate_RawMultiDelay.w
		lea	DPLCPtr_8F67A(pc),a2
		jsr	Perform_DPLC.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

Obj_AB_2:
		moveq	#0,d0
		move.b	$2C(a0),d0
		movea.l	off_8F3BE(pc,d0.w),a1
		jsr	Check_PlayerInRange.w
		tst.l	d0
		beq.w	locret_8F436
	;	tst.w	d0			; NAT: WTF is this shit Naka
	;	beq.w	locret_8F436		; NAT: Ohwait, it was checking for Sonic only
		moveq	#0,d0
		move.b	$2C(a0),d0
		movea.l	off_8F3C6(pc,d0.w),a1
		jsr	(a1)
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------
off_8F3BE:	dc.l word_8F3CE
		dc.l word_8F3D6
off_8F3C6:	dc.l loc_8F3DE
		dc.l loc_8F3F0
word_8F3CE:	dc.w  $FFF0,   $20, $FFC0,   $80
word_8F3D6:	dc.w  $FFF0,   $20, $FF80,  $100
; ---------------------------------------------------------------------------

loc_8F3DE:
		lea	PLC_8F3E8(pc),a1
		jmp	Load_PLC_Raw.w
; ---------------------------------------------------------------------------
PLC_8F3E8:	dc.w 0
		dc.l ArtNem_EggCapsule
		dc.w $A6C0
; ---------------------------------------------------------------------------

loc_8F3F0:
		jmp	(LoadEnemyArt).l
; ---------------------------------------------------------------------------

Obj_AC_2_SOZ2_Ghost_Capsule:
		lea	ObjDat3_8F62E(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_89C14,(a0)

loc_8F406:
		move.b	#3,$2C(a0)
		lea	ChildObjDat_8F646(pc),a2
		jsr	CreateChild1_Normal.w
		tst.b	(Last_star_post_hit).w
		bne.s	loc_8F424
		cmpi.b	#2,(Player_1+character_id).w
		bne.s	locret_8F436

loc_8F424:
		move.l	#loc_89C54,(a0)
		move.b	#1,$22(a0)
		bset	#5,$38(a0)

locret_8F436:

		rts
; ---------------------------------------------------------------------------

loc_8F438:
		lea	(word_86B3E).l,a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_8672A,(a0)
		tst.b	OptionsBits.w		; NAT: If in altered mode, run extra code
		bpl.s	locret_8F45C
		move.l	#loc_86754,(a0)
		move.b	#$C,$22(a0)

locret_8F45C:
		rts
; ---------------------------------------------------------------------------

loc_8F45E:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_8F488(pc,d0.w),d1
		jsr	off_8F488(pc,d1.w)
		tst.b	$2C(a0)
		bne.s	loc_8F482
		lea	DPLCPtr_8F67A(pc),a2
		jsr	Perform_DPLC.w
		jmp	Sprite_CheckDeleteSlotted.w
; ---------------------------------------------------------------------------

loc_8F482:
		jmp	Sprite_CheckDelete.w
; ---------------------------------------------------------------------------
off_8F488:	dc.w loc_8F48E-off_8F488

		dc.w loc_8F4D8-off_8F488
		dc.w loc_8F4E2-off_8F488
; ---------------------------------------------------------------------------

loc_8F48E:
		moveq	#0,d0
		move.b	$2C(a0),d0
		add.w	d0,d0
		lea	word_8F4C0(pc,d0.w),a1
		move.w	(a1)+,$18(a0)
		move.w	(a1)+,$40(a0)
		jsr	Change_FlipXWithVelocity.w
		tst.w	d0
		bne.s	loc_8F4B6
		lea	ObjDat4_8F61C(pc),a1
		jmp	SetUp_ObjAttributesSlotted.w
; ---------------------------------------------------------------------------

loc_8F4B6:
		lea	ObjDat3_8F63A(pc),a1
		jmp	SetUp_ObjAttributes.w
; ---------------------------------------------------------------------------
word_8F4C0:	dc.w  $FE00, $FFE0
		dc.w   $200, $FFE0
		dc.w  $FD80, $FFE8
		dc.w   $280, $FFE8
		dc.w  $FD00, $FFF0
		dc.w   $300, $FFF0
; ---------------------------------------------------------------------------

loc_8F4D8:
		lea	byte_8F68E(pc),a1
		jsr	Animate_RawNoSST.w

loc_8F4E2:
		move.w	$40(a0),d0
		add.w	d0,$1A(a0)
		jmp	MoveSprite2.w

; =============== S U B R O U T I N E =======================================


sub_8F4F0:

		move.w	$10(a0),d0
		tst.w	$18(a0)
		bmi.s	loc_8F502
		cmpi.w	#$1A0,d0
		bhi.s	loc_8F508
		rts
; ---------------------------------------------------------------------------

loc_8F502:
		cmpi.w	#$A0,d0
		bhs.s	locret_8F512

loc_8F508:
		bchg	#0,4(a0)
		neg.w	$18(a0)

locret_8F512:
		rts
; End of function sub_8F4F0

; ---------------------------------------------------------------------------

loc_8F514:
		move.b	#1,(Last_star_post_hit).w
	;	lea	(SOZ2_Start).l,a1
	;	move.w	(a1)+,(Saved_X_pos).w
	;	move.w	(a1)+,(Saved_Y_pos).w
	;	jsr	(Save_Level_Data).l
		lea	ChildObjDat_8F64E(pc),a2
		jmp	CreateChild1_Normal.w

; =============== S U B R O U T I N E =======================================


sub_8F538:
		jsr	Random_Number.w
		andi.w	#$FF,d0
		subi.w	#$7F,d0
		add.w	d0,$10(a0)
		moveq	#0,d1
		move.b	(__u_F7C3).w,d1
		add.w	d1,d1
		move.w	word_8F582(pc,d1.w),d2
		cmpi.w	#$120,d0
		bhs.s	loc_8F564
		bset	#0,4(a0)
		neg.w	d2

loc_8F564:
		move.w	d2,$18(a0)
		andi.w	#$C,d1
		move.l	off_8F576(pc,d1.w),$30(a0)
		bra.s	loc_8F58E
; ---------------------------------------------------------------------------
off_8F576:	dc.l byte_8F682
		dc.l byte_8F695
		dc.l byte_8F6AA
word_8F582:	dc.w $FF00
		dc.w $FF00
		dc.w $FF00
		dc.w $FE80
		dc.w $FE80
		dc.w $FE00
; ---------------------------------------------------------------------------

loc_8F58E:

		moveq	#0,d0
		move.b	(__u_F7C3).w,d0
		add.w	d0,d0
		move.w	word_8F582(pc,d0.w),d1
		tst.w	$18(a0)
		bmi.s	loc_8F5A2
		neg.w	d1

loc_8F5A2:
		move.w	d1,$18(a0)
		add.w	d0,d0
		movea.l	off_8F5C8(pc,d0.w),a1
		bclr	#0,$38(a0)
		jsr	(a1)
		tst.w	$1A(a0)
		bpl.s	loc_8F5C2
		bset	#0,$38(a0)
		neg.w	d0

loc_8F5C2:
		move.w	d0,$1A(a0)
		rts
; End of function sub_8F538

; ---------------------------------------------------------------------------
off_8F5C8:	dc.l loc_8F5E0
		dc.l loc_8F5E0
		dc.l loc_8F5E0
		dc.l loc_8F5F0
		dc.l loc_8F5F0
		dc.l loc_8F606
; ---------------------------------------------------------------------------

loc_8F5E0:
		move.w	#$40,d0
		move.w	d0,$3E(a0)
		move.w	#4,$40(a0)
		rts
; ---------------------------------------------------------------------------

loc_8F5F0:
		move.w	#$80,d0
		move.w	d0,$3E(a0)
		move.w	#8,$40(a0)
		bclr	#0,$38(a0)
		rts
; ---------------------------------------------------------------------------

loc_8F606:
		move.w	#$C0,d0
		move.w	d0,$3E(a0)
		move.w	#$10,$40(a0)
		bclr	#0,$38(a0)
		rts
; ---------------------------------------------------------------------------
ObjDat4_8F61C:	dc.w 2

		dc.w $A500
		dc.w $12
		dc.w 0
		dc.l Map_SOZGhosts
		dc.w prio(0)
		dc.b $10
		dc.b $14
		dc.b 0
		dc.b 0
ObjDat3_8F62E:	dc.l Map_EggCapsule
		dc.w $8536
		dc.w prio(3)
		dc.b $30
		dc.b $20
		dc.b 0
		dc.b 0
ObjDat3_8F63A:	dc.l Map_SOZGhosts
		dc.w $A500
		dc.w prio(4)
		dc.b $30
		dc.b $20
		dc.b 0
		dc.b 0
ChildObjDat_8F646:dc.w 0
		dc.l loc_8F438
		dc.w $DC
ChildObjDat_8F64E:dc.w 5
		dc.l loc_8F45E
		dc.w $F8FC
		dc.l loc_8F45E
		dc.w $8FC
		dc.l loc_8F45E
		dc.w $10FC
		dc.l loc_8F45E
		dc.w $F0FC
		dc.l loc_8F45E
		dc.w $18FC
		dc.l loc_8F45E
		dc.w $E8FC
ChildObjDat_8F674:dc.w 0
		dc.l loc_8F11E
DPLCPtr_8F67A:	dc.l ArtUnc_SOZGhosts

		dc.l DPLC_SOZGhosts
byte_8F682:	dc.b  $11,   3
		dc.b  $11,   3
		dc.b  $10,   3
		dc.b   $F,   4
		dc.b   $E,   4
		dc.b  $F8,  $C
byte_8F68E:	dc.b 0
		dc.b 3
		dc.b 1
		dc.b 3
		dc.b 2
		dc.b 4
		dc.b $FC
byte_8F695:	dc.b  $11,   3
		dc.b  $11,   3
		dc.b  $10,   3
		dc.b   $F,   4
		dc.b   $E,   4
		dc.b   $D,   4
		dc.b  $F8,  $E
		dc.b	5,   3
		dc.b	6,   3
		dc.b	7,   4
		dc.b  $FC
byte_8F6AA:	dc.b  $11,   3
		dc.b  $11,   3
		dc.b  $10,   3
		dc.b   $F,   4
		dc.b   $E,   4
		dc.b   $D,   4
		dc.b  $F8,  $E
		dc.b   $A,   3
		dc.b   $B,   3
		dc.b   $C,   4
		dc.b  $FC
byte_8F6BF:	dc.b   $D,   4
		dc.b   $D,   4
		dc.b   $E,   4
		dc.b   $F,   4
		dc.b  $10,   3
		dc.b  $11,   3
		dc.b  $F4
byte_8F6CC:	dc.b	3,   7
		dc.b	3,   7
		dc.b	4,   7
		dc.b  $F8, $D7
byte_8F6D4:	dc.b	8,   7
		dc.b	8,   7
		dc.b	9,   7
		dc.b  $F8, $E4
DPLC_SOZGhosts:	include "General/Sprites/SOZ Ghosts/DPLC - SOZ Ghosts.asm"

; ---------------------------------------------------------------------------

Obj_Fireworm:

		jsr	Obj_WaitOffscreen.w
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_8F76A(pc,d0.w),d1
		jsr	off_8F76A(pc,d1.w)
		jmp	Sprite_CheckDelete.w
; ---------------------------------------------------------------------------
off_8F76A:	dc.w loc_8F770-off_8F76A

		dc.w loc_8F77A-off_8F76A
		dc.w locret_8F7A2-off_8F76A
; ---------------------------------------------------------------------------

loc_8F770:
		lea	ObjDat3_8F9DE(pc),a1
		jmp	SetUp_ObjAttributes.w
; ---------------------------------------------------------------------------

loc_8F77A:
		jsr	Find_SonicTails.w
		cmpi.w	#$80,d2
		blo.s	loc_8F788
		rts
; ---------------------------------------------------------------------------

loc_8F788:
		move.b	#4,5(a0)
		lea	ChildObjDat_8FA0E(pc),a2
		jsr	CreateChild1_Normal.w
		bne.s	locret_8F7A0
		move.b	$2C(a0),$2C(a1)

locret_8F7A0:
		rts
; ---------------------------------------------------------------------------

locret_8F7A2:
		rts
; ---------------------------------------------------------------------------

loc_8F7A4:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_8F7E0(pc,d0.w),d1
		jsr	off_8F7E0(pc,d1.w)
		lea	DPLCPtr_8FA38(pc),a2
		jsr	Perform_DPLC.w
		move.w	$10(a0),d0
		andi.w	#-$80,d0
		sub.w	(Camera_X_pos_coarse_back).w,d0
		cmpi.w	#$280,d0
		bhi.s	loc_8F7DA
		jsr	Add_SpriteToCollisionResponseList.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_8F7DA:
		jmp	Go_Delete_SpriteSlotted2.w
; ---------------------------------------------------------------------------
off_8F7E0:	dc.w loc_8F7EA-off_8F7E0

		dc.w loc_8F7F4-off_8F7E0
		dc.w loc_8F812-off_8F7E0
		dc.w loc_8F862-off_8F7E0
		dc.w loc_8F89A-off_8F7E0
; ---------------------------------------------------------------------------

loc_8F7EA:
		lea	ObjDat4_8F9EA(pc),a1
		jsr	SetUp_ObjAttributesSlotted.w

loc_8F7F4:
		move.b	#4,5(a0)
		move.w	#3,$2E(a0)
		move.l	#loc_8F81E,$34(a0)
		move.w	#-$100,d4
		jmp	Set_VelocityXTrackSonic.w
; ---------------------------------------------------------------------------

loc_8F812:
		jsr	MoveSprite2.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_8F81E:
		move.b	#1,$22(a0)
		lea	ChildObjDat_8FA16(pc),a2
		jsr	CreateChild1_Normal.w

loc_8F82E:
		move.b	#6,5(a0)
		move.w	#-$100,$42(a0)
		move.l	#byte_8FA40,$30(a0)

loc_8F842:
		move.b	#8,$39(a0)
		move.w	#$80,d0
		move.w	d0,$3E(a0)
		move.w	d0,$1A(a0)
		move.w	#8,$40(a0)
		bclr	#0,$38(a0)
		rts
; ---------------------------------------------------------------------------

loc_8F862:

		jsr	Swing_UpAndDown_Count.w
		bne.s	loc_8F876
		jsr	MoveSprite2.w
		jmp	Animate_RawMultiDelay.w
; ---------------------------------------------------------------------------

loc_8F876:
		move.b	#8,5(a0)
		move.w	$18(a0),$44(a0)
		move.w	$42(a0),$1A(a0)
		neg.w	$42(a0)
		clr.w	$2E(a0)
		clr.b	$23(a0)
		clr.b	$24(a0)
		rts
; ---------------------------------------------------------------------------

loc_8F89A:

		lea	byte_8FA4D(pc),a1
		jsr	Animate_RawNoSSTMultiDelayFlipX.w
		addq.w	#1,$2E(a0)
		tst.w	$44(a0)
		bmi.s	loc_8F8C6
		move.w	$18(a0),d0
		subi.w	#$10,d0
		cmpi.w	#-$100,d0
		ble.s	loc_8F8DE
		move.w	d0,$18(a0)
		jmp	MoveSprite2.w
; ---------------------------------------------------------------------------

loc_8F8C6:
		move.w	$18(a0),d0
		addi.w	#$10,d0
		cmpi.w	#$100,d0
		bge.s	loc_8F8DE
		move.w	d0,$18(a0)
		jmp	MoveSprite2.w
; ---------------------------------------------------------------------------

loc_8F8DE:

		move.b	#6,5(a0)
		clr.b	$23(a0)
		clr.b	$24(a0)
		bra.w	loc_8F842
; ---------------------------------------------------------------------------

loc_8F8F0:

		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_8F906(pc,d0.w),d1
		jsr	off_8F906(pc,d1.w)
		moveq	#0,d0
		jmp	Child_DrawTouch_Sprite_FlickerMove.w
; ---------------------------------------------------------------------------
off_8F906:	dc.w loc_8F910-off_8F906

		dc.w loc_8F948-off_8F906
		dc.w loc_8F948-off_8F906
		dc.w loc_8F862-off_8F906
		dc.w loc_8F89A-off_8F906
; ---------------------------------------------------------------------------

loc_8F910:
		lea	ObjDat3_8F9FC(pc),a1
		jsr	SetUp_ObjAttributes.w
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	word_8F940(pc,d0.w),$2E(a0)
		move.l	#loc_8F94E,$34(a0)
		movea.w	$46(a0),a1
		move.w	$18(a1),$18(a0)
		move.b	4(a1),4(a0)
		rts
; ---------------------------------------------------------------------------
word_8F940:	dc.w $B
		dc.w $16
		dc.w $21
		dc.w $2C
; ---------------------------------------------------------------------------

loc_8F948:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_8F94E:
		lea	ChildObjDat_8FA30(pc),a2
		jsr	CreateChild1_Normal.w
		bra.w	loc_8F82E
; ---------------------------------------------------------------------------

loc_8F95C:
		jsr	Refresh_ChildPositionAdjusted.w
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_8F976(pc,d0.w),d1
		jsr	off_8F976(pc,d1.w)
		jmp	Child_DrawTouch_Sprite.w
; ---------------------------------------------------------------------------
off_8F976:	dc.w loc_8F97C-off_8F976

		dc.w loc_8F99E-off_8F976
		dc.w loc_8F9C8-off_8F976
; ---------------------------------------------------------------------------

loc_8F97C:
		lea	word_8FA08(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#byte_8FA56,$30(a0)
		move.l	#loc_8F9A4,$34(a0)
		bset	#4,$2B(a0)
		rts
; ---------------------------------------------------------------------------

loc_8F99E:
		jmp	Animate_Raw.w
; ---------------------------------------------------------------------------

loc_8F9A4:

		move.b	#4,5(a0)
		move.b	#7,$22(a0)
		jsr	Random_Number.w
		andi.w	#$3F,d0
		move.w	d0,$2E(a0)
		move.l	#loc_8F9CE,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_8F9C8:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_8F9CE:
		move.b	#2,5(a0)
		move.l	#loc_8F9A4,$34(a0)
		rts
; ---------------------------------------------------------------------------
ObjDat3_8F9DE:	dc.l Map_FirewormSegments
		dc.w $E512
		dc.w prio(5)
		dc.b $C
		dc.b $C
		dc.b 0
		dc.b 0
ObjDat4_8F9EA:	dc.w 1
		dc.w $A500
		dc.w 9
		dc.w 0
		dc.l Map_Fireworm
		dc.w prio(3)
		dc.b $C
		dc.b $C
		dc.b 0
		dc.b $1A
ObjDat3_8F9FC:	dc.l Map_FirewormSegments
		dc.w $A512
		dc.w prio(4)
		dc.b 8
		dc.b 8
		dc.b 1
		dc.b $98
word_8FA08:	dc.w prio(3)
		dc.b 8
		dc.b 8
		dc.b 3
		dc.b $98
ChildObjDat_8FA0E:dc.w 0
		dc.l loc_8F7A4
		dc.w $F8
ChildObjDat_8FA16:dc.w 3
		dc.l loc_8F8F0
		dc.w 0
		dc.l loc_8F8F0
		dc.w 0
		dc.l loc_8F8F0
		dc.w 0
		dc.l loc_8F8F0
		dc.w 0
ChildObjDat_8FA30:dc.w 0
		dc.l loc_8F95C
		dc.w $F2
DPLCPtr_8FA38:	dc.l ArtUnc_Fireworm
		dc.l DPLC_Fireworm
byte_8FA40:	dc.b	1,   3
		dc.b	1,   6
		dc.b	2,   8
		dc.b	3,   1
		dc.b  $F8,  $A
		dc.b	3, $7F
		dc.b  $FC
byte_8FA4D:	dc.b	3,   7
		dc.b	2,   7
		dc.b  $42,   7
		dc.b	3, $7F
		dc.b  $FC
byte_8FA56:	dc.b	3,   4
		dc.b	4,   5
		dc.b	6, $F4
Map_FirewormSegments:	include "General/Sprites/Fireworm/Map - Fireworm Segments.asm"

DPLC_Fireworm:	include "General/Sprites/Fireworm/DPLC - Fireworm.asm"

Map_Fireworm:	include "General/Sprites/Fireworm/Map - Fireworm.asm"

; ---------------------------------------------------------------------------

Obj_LRZExplodingRock:

		jsr	Obj_WaitOffscreen.w
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_8FB3C(pc,d0.w),d1
		jsr	off_8FB3C(pc,d1.w)
		move.w	$10(a0),d0
		andi.w	#-$80,d0
		sub.w	(Camera_X_pos_coarse_back).w,d0
		cmpi.w	#$280,d0
		bhi.s	loc_8FB2A
		btst	#7,$2A(a0)
		bne.s	loc_8FB36
		moveq	#$17,d1
		moveq	#$C,d2
		moveq	#$B,d3
		move.w	$10(a0),d4
		jsr	SolidObjectFull.w
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_8FB2A:
		jsr	Displace_PlayerOffObject.w
		jmp	loc_85088.w
; ---------------------------------------------------------------------------

loc_8FB36:
		jmp	Displace_PlayerOffObject.w
; ---------------------------------------------------------------------------
off_8FB3C:	dc.w loc_8FB42-off_8FB3C

		dc.w loc_8FB4C-off_8FB3C
		dc.w loc_8FB70-off_8FB3C
; ---------------------------------------------------------------------------

loc_8FB42:
		lea	ObjDat3_8FBC4(pc),a1
		jmp	SetUp_ObjAttributes.w
; ---------------------------------------------------------------------------

loc_8FB4C:
		jsr	Find_SonicTails.w
		cmpi.w	#$40,d2
		bhs.s	locret_8FB6E
		move.b	#4,5(a0)
		move.l	#byte_8FC30,$30(a0)
		move.l	#loc_8FB76,$34(a0)

locret_8FB6E:
		rts
; ---------------------------------------------------------------------------

loc_8FB70:
		jmp	Animate_RawMultiDelay.w
; ---------------------------------------------------------------------------

loc_8FB76:
		move.l	#Obj_Explosion,(a0)
		bset	#7,$2A(a0)
		clr.b	5(a0)
		lea	ChildObjDat_8FBD6(pc),a2
		jmp	(CreateChild2_Complex).l
; ---------------------------------------------------------------------------

loc_8FB90:

		movea.l	$3E(a0),a1
		jsr	SetUp_ObjAttributes3.w
		bset	#3,$2B(a0)
		move.l	#loc_86D5E,(a0)
		move.b	$2C(a0),d0
		lsr.b	#2,d0
		addq.b	#6,d0
		move.b	d0,$22(a0)
		jmp	Sprite_CheckDeleteTouchXY.w
; ---------------------------------------------------------------------------

loc_8FBB8:

		jsr	MoveSprite.w
		jmp	Animate_Raw.w
; ---------------------------------------------------------------------------
ObjDat3_8FBC4:	dc.l Map_LRZExplodingRock
		dc.w $530
		dc.w prio(5)
		dc.b $C
		dc.b $C
		dc.b 0
		dc.b 0
word_8FBD0:	dc.w prio(5)

		dc.b 8
		dc.b 4
		dc.b 0
		dc.b $98
ChildObjDat_8FBD6:dc.w 3
		dc.l loc_8FB90
		dc.l word_8FBD0
		dc.l byte_8FC8B
		dc.l loc_8FBB8
		dc.b $FC
		dc.b 4
		dc.w $FC00
		dc.w $FE00
		dc.l loc_8FB90
		dc.l word_8FBD0
		dc.l byte_8FC8B
		dc.l loc_8FBB8
		dc.b 4
		dc.b 4
		dc.w $400
		dc.w $FE00
		dc.l loc_8FB90
		dc.l word_8FBD0
		dc.l byte_8FC87
		dc.l loc_8FBB8
		dc.b $F8
		dc.b $F8
		dc.w $FE00
		dc.w $FC00
		dc.l loc_8FB90
		dc.l word_8FBD0
		dc.l byte_8FC87
		dc.l loc_8FBB8
		dc.b 8
		dc.b $F8
		dc.w $200
		dc.w $FC00
byte_8FC30:	dc.b	0,   7
		dc.b	1,   7
		dc.b	2,   7
		dc.b	3, $2F
		dc.b	4,   5
		dc.b	3,   5
		dc.b	4,   4
		dc.b	3,   4
		dc.b	4,   3
		dc.b	3,   3
		dc.b	4,   2
		dc.b	3,   2
		dc.b	4,   1
		dc.b	3,   1
		dc.b	4,   0
		dc.b	3,   0
		dc.b	4,   0
		dc.b	3,   0
		dc.b	4,   0
		dc.b	3,   0
		dc.b	4,   0
		dc.b	3,   0
		dc.b	4,   0
		dc.b	3,   0
		dc.b	4,   0
		dc.b	3,   0
		dc.b	4,   0
		dc.b	3,   0
		dc.b	4,   0
		dc.b	3,   0
		dc.b	4,   0
		dc.b	3,   0
		dc.b	4,   0
		dc.b	3,   0
		dc.b	4,   0
		dc.b	3,   0
		dc.b	4,   0
		dc.b	3,   0
		dc.b	4,   0
		dc.b	3,   0
		dc.b	4,   0
		dc.b	3,   0
		dc.b	5, $1F
		dc.b  $F4
byte_8FC87:	dc.b 0

		dc.b 6
		dc.b 8
		dc.b $FC
byte_8FC8B:	dc.b 0

		dc.b 7
		dc.b 9
		dc.b $FC
		dc.b 0
Map_LRZExplodingRock:include "Levels/LRZ/Misc Object Data/Map - Exploding Rock.asm"

; ---------------------------------------------------------------------------

Obj_Toxomister:

		jsr	Obj_WaitOffscreen.w
		lea	ObjDat3_9002E(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_8FD76,(a0)
		bset	#6,4(a0)
		move.w	#1,$16(a0)
		lea	$18(a0),a1
		move.w	$10(a0),(a1)+
		move.w	$14(a0),d0
		moveq	#$18,d1
		btst	#1,4(a0)
		beq.s	loc_8FD6A
		neg.w	d1

loc_8FD6A:
		add.w	d1,d0
		move.w	d0,(a1)+
		move.w	#0,(a1)+
		bsr.w	sub_8FF72

loc_8FD76:

		movea.w	$44(a0),a1
		btst	#7,$2A(a1)
		beq.s	loc_8FD96
		move.l	#loc_8FDA0,(a0)
		move.w	#$1F,$2E(a0)
		move.l	#loc_8FDB0,$34(a0)

loc_8FD96:
		bsr.w	sub_8FF5A
		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------

loc_8FDA0:
		bsr.w	sub_8FF5A
		jsr	Obj_Wait.w
		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------

loc_8FDB0:
		move.l	#loc_8FD76,(a0)
		bra.w	sub_8FF72
; ---------------------------------------------------------------------------

loc_8FDBA:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_8FDCE(pc,d0.w),d1
		jsr	off_8FDCE(pc,d1.w)
		jmp	Child_AddToTouchList.w
; ---------------------------------------------------------------------------
off_8FDCE:	dc.w loc_8FDD8-off_8FDCE

		dc.w loc_8FE06-off_8FDCE
		dc.w loc_8FE26-off_8FDCE
		dc.w loc_8FE06-off_8FDCE
		dc.w loc_8FE50-off_8FDCE
; ---------------------------------------------------------------------------

loc_8FDD8:
		lea	word_9003A(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.b	#-$28,$28(a0)
		move.b	#$18,$1E(a0)
		move.w	#$6F,$2E(a0)
		move.l	#loc_8FE10,$34(a0)
		lea	ChildObjDat_90048(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_8FE06:
		bsr.w	sub_8FF8C
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_8FE10:
		move.b	#4,5(a0)
		move.w	#$40,$1A(a0)
		move.l	#loc_8FE36,$34(a0)

locret_8FE24:

		rts
; ---------------------------------------------------------------------------

loc_8FE26:
		bsr.w	sub_8FF8C
		jsr	MoveSprite2.w
		jmp	ObjHitFloor_DoRoutine.w
; ---------------------------------------------------------------------------

loc_8FE36:
		move.b	#6,5(a0)
		clr.w	$1A(a0)
		move.w	#$7F,$2E(a0)
		move.l	#Go_Delete_Sprite,$34(a0)
		rts
; ---------------------------------------------------------------------------

loc_8FE50:
		movea.w	$44(a0),a1
		cmp.b	#6,5(a1)		; NAT: check if dead
		bhs.s	loc_8FE82		; if so, branch
		cmpi.b	#9,$20(a1)
		beq.s	loc_8FE82
		jsr	(Check_LRControllerShake).l
		bne.s	loc_8FE88
		movea.w	$44(a0),a1
		move.w	$10(a1),$10(a0)
		move.w	$14(a1),$14(a0)
		bsr.w	sub_8FFE0
		jsr	(sub_881FE).l
		beq.w	locret_8FE24

loc_8FE82:
		bset	#2,$38(a0)

loc_8FE88:
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------

loc_8FE8E:

		lea	word_9003A(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_8FEC8,(a0)
		move.l	#byte_90074,$30(a0)
		move.b	$2C(a0),d0
		subi.b	#$C,d0
		neg.b	d0
		move.b	d0,$2C(a0)
		lsl.b	#2,d0
		move.b	d0,$2F(a0)
		move.l	#loc_8FED4,$34(a0)
		jmp	Child_CheckParent.w
; ---------------------------------------------------------------------------

loc_8FEC8:
		jsr	Obj_Wait.w
		jmp	Child_CheckParent.w
; ---------------------------------------------------------------------------

loc_8FED4:
		move.l	#loc_8FEDC,(a0)
		rts
; ---------------------------------------------------------------------------

loc_8FEDC:
		movea.w	$46(a0),a1
		btst	#7,$2A(a1)
		bne.s	loc_8FF12
		jsr	Refresh_ChildPosition.w
		jsr	Animate_Raw.w
		btst	#0,(V_int_run_count+3).w
		sne	d0
		btst	#0,$2C(a0)
		beq.s	loc_8FF06
		not.b	d0

loc_8FF06:
		tst.b	d0
		bne.w	locret_8FE24
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_8FF12:
		clr.w	$18(a0)
		btst	#2,$38(a1)
		beq.s	loc_8FF22
		bsr.w	loc_90002

loc_8FF22:
		clr.w	$1A(a0)
		move.l	#loc_8FF42,(a0)
		move.l	#byte_90085,$30(a0)
		move.l	#Go_Delete_Sprite,$34(a0)
		jmp	Sprite_CheckDeleteXY.w
; ---------------------------------------------------------------------------

loc_8FF42:
		addi.w	#-$10,$1A(a0)
		jsr	MoveSprite2.w
		jsr	Animate_Raw.w
		jmp	Sprite_CheckDeleteXY.w

; =============== S U B R O U T I N E =======================================


sub_8FF5A:

		move.b	(V_int_run_count+3).w,d0
		andi.b	#7,d0
		bne.s	locret_8FF8A
		jsr	Find_SonicTails.w
		jmp	(Change_FlipX).l
; End of function sub_8FF5A


; =============== S U B R O U T I N E =======================================


sub_8FF72:

		moveq	#-$69,d0
		jsr	Play_Sound_2.w
		lea	ChildObjDat_90040(pc),a2
		jsr	(CreateChild10_NormalAdjusted).l
		bne.s	locret_8FF8A
		move.w	a1,$44(a0)

locret_8FF8A:
		rts
; End of function sub_8FF72


; =============== S U B R O U T I N E =======================================


sub_8FF8C:

		move.b	$29(a0),d0
		beq.w	locret_8FE24
		clr.b	$29(a0)
		andi.w	#3,d0
		lsl.w	#2,d0
		lea	loc_8FFCC+4(pc,d0.w),a1
		movea.w	(a1)+,a2
		cmpi.b	#2,$20(a2)
		beq.s	locret_8FF8A
		btst	#6,$2B(a2)
		bne.s	locret_8FF8A
		move.w	a2,$44(a0)
		movea.w	(a1)+,a2
		move.w	a2,$3E(a0)
		move.w	(a2),$3A(a0)
		move.b	#8,5(a0)

loc_8FFCC:
		move.w	#$3B,$2E(a0)
		rts
; End of function sub_8FF8C

; ---------------------------------------------------------------------------
		dc.w  $B000, $F604
		dc.w  $B04A, $F606
		dc.w  $B000, $F604

; =============== S U B R O U T I N E =======================================


sub_8FFE0:
		move.w	$18(a1),d0
		asr.w	#3,d0
		sub.w	d0,$18(a1)
		moveq	#$1C,d0
		btst	#1,$2A(a1)
		beq.s	loc_8FFF6
		moveq	#$1A,d0

loc_8FFF6:
		move.w	(a1,d0.w),d1
		asr.w	#3,d1
		sub.w	d1,(a1,d0.w)
		rts
; End of function sub_8FFE0

; ---------------------------------------------------------------------------

loc_90002:
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	byte_90020(pc,d0.w),d0
		movea.w	$44(a1),a2
		btst	#0,4(a2)
		bne.s	loc_9001A
		neg.w	d0

loc_9001A:
		move.w	d0,$18(a0)
		rts
; ---------------------------------------------------------------------------
byte_90020:	dc.b	1,   0,	  1, $80
		dc.b	2,   0,	  1, $80
		dc.b	1,   0,	  2,   0
		dc.b	1, $80
ObjDat3_9002E:	dc.l Map_Toxomister
		dc.w $A562
		dc.w prio(5)
		dc.b 8
		dc.b 8
		dc.b 1
		dc.b $18
word_9003A:	dc.w prio(0)

		dc.b 8
		dc.b 8
		dc.b 2
		dc.b 0
ChildObjDat_90040:dc.w 0
		dc.l loc_8FDBA
		dc.w $F408
ChildObjDat_90048:dc.w 6
		dc.l loc_8FE8E
		dc.w $F404
		dc.l loc_8FE8E
		dc.w $C04
		dc.l loc_8FE8E
		dc.w $F8FC
		dc.l loc_8FE8E
		dc.w $8FC
		dc.l loc_8FE8E
		dc.w $FC
		dc.l loc_8FE8E
		dc.w $FC04
		dc.l loc_8FE8E
		dc.w $404
byte_90074:	dc.b 7
		dc.b 2
		dc.b 3
		dc.b 4
		dc.b 5
		dc.b 6
		dc.b 7
		dc.b $F8
		dc.b 9
		dc.b 7
		dc.b 6
		dc.b 5
		dc.b 4
		dc.b 5
		dc.b 6
		dc.b 7
		dc.b $FC
byte_90085:	dc.b 7
		dc.b 7
		dc.b 6
		dc.b 5
		dc.b 4
		dc.b 3
		dc.b 2
		dc.b $F4
		dc.b 0
Map_Toxomister:	include "General/Sprites/Toxomister/Map - Toxomister.asm"

; ---------------------------------------------------------------------------

Obj_LRZRockCrusher:
		lea	word_901B8(pc),a1
		tst.b	$2C(a0)
		beq.s	loc_900FE
		lea	word_901C4(pc),a1

loc_900FE:
		jsr	(Check_CameraInRange).l
		move.l	#loc_901D0,(a0)
		st	BossHitMode.w		; NAT: Enable hit mode
		clr.w	BossHitsP1.w		; clear hits count

		move.w	(Camera_target_max_Y_pos).w,(__u_FA98).w
		move.w	(Camera_min_Y_pos).w,(__u_FA96).w
		move.w	(Camera_min_X_pos).w,(__u_FA94).w
		move.w	(Camera_max_X_pos).w,(__u_FA92).w
		move.w	(a1),$1C(a0)
		move.w	(a1)+,(Camera_max_X_pos).w
		move.w	(a1)+,(Camera_target_max_Y_pos).w

		lea	Word_901F2(pc),a1		; Load data to a1
		jsr	Boss_Lock_Screen		; NAT: Lock screen

		lea	ObjDat3_90608(pc),a1
		jsr	SetUp_ObjAttributes.w
		clr.b	5(a0)
		move.b	#$7F,$29(a0)
		move.b	#$40,$1E(a0)
		tst.b	$2C(a0)
		beq.s	loc_90154
		bset	#7,$A(a0)

loc_90154:
		lea	ChildObjDat_9067A(pc),a2
		jsr	CreateChild6_Simple.w
		bne.s	loc_90188
		move.b	#-$75,$2C(a1)
		tst.b	$2C(a0)
		bne.s	loc_9017C
		move.w	#$F40,$10(a1)
		move.w	#$760,$14(a1)
		bra.w	loc_90188
; ---------------------------------------------------------------------------

loc_9017C:
		move.w	#$540,$10(a1)
		move.w	#$860,$14(a1)

loc_90188:

		lea	(ArtKosM_LRZRockCrusher).l,a1
		move.w	#-$5A40,d2
		jsr	Queue_Kos_Module.w
		lea	PLC_83D64.w,a1
		jsr	Load_PLC_Raw.w
		lea	Pal_LRZRockCrusher(pc),a1
		jsr	PalLoad_Line1.w
		lea	ChildObjDat_90626(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------
word_901B8:	dc.w $5E0
		dc.w $740
		dc.w $DC0
		dc.w $EC0
		dc.w $EA0
		dc.w $6A0

word_901C4:	dc.w $680
		dc.w $880
		dc.w $400
		dc.w $780
		dc.w $4A0
		dc.w $790

Word_901F2:	dc.w $EA0, $EA0, $6A0, $6A0
; ---------------------------------------------------------------------------

loc_901D0:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_901EA(pc,d0.w),d1
		jsr	off_901EA(pc,d1.w)
		jsr	(sub_905A8).l
		jmp	Draw_And_Touch_Sprite.w
; ---------------------------------------------------------------------------
off_901EA:	dc.w loc_901F4-off_901EA

		dc.w loc_9026E-off_901EA
		dc.w loc_902F0-off_901EA
		dc.w loc_902FE-off_901EA
		dc.w loc_90338-off_901EA
; ---------------------------------------------------------------------------

loc_901F4:
		btst	#0,$27(a0)
		bne.s	loc_90210
		move.w	(Camera_target_max_Y_pos).w,d0
		cmp.w	(Camera_max_Y_pos).w,d0
		bne.s	loc_90210
		move.w	d0,(Camera_min_Y_pos).w
		bset	#0,$27(a0)

loc_90210:

		btst	#1,$27(a0)
		bne.s	loc_9022E
	;	move.w	(Camera_X_pos).w,(Camera_min_X_pos).w
		move.w	$1C(a0),d0
		cmp.w	(Camera_X_pos).w,d0
		bhi.s	loc_9022E
		bset	#1,$27(a0)

loc_9022E:
		move.b	$27(a0),d0
		and.b	#3,d0
		cmp.b	#3,d0
		bne.s	locret_9026C

		move.b	#2,5(a0)
		clr.b	$27(a0)
		clr.w	$1C(a0)
		clr.b	$26(a0)
		bset	#2,$38(a0)
		jsr	Create_New_Sprite.w
		bne.s	locret_9026C
		move.l	#loc_90502,(a1)
		move.b	$2C(a0),$2C(a1)
		move.w	a0,$46(a1)

locret_9026C:

		rts
; ---------------------------------------------------------------------------

loc_9026E:
		moveq	#-$34,d0
		jsr	sub_85E52.w
		moveq	#1,d0
		bchg	#0,$38(a0)
		beq.s	loc_90282
		neg.w	d0

loc_90282:
		add.w	d0,$14(a0)
		jsr	ObjCheckFloorDist.w
		tst.w	d1
		bpl.s	loc_902BE
		move.w	$10(a0),d0
		andi.w	#-$80,d0
		sub.w	(Camera_X_pos_coarse_back).w,d0
		cmpi.w	#$280,d0
		bhi.s	loc_902B6
		move.w	$14(a0),d0
		sub.w	(Camera_Y_pos).w,d0
		addi.w	#$80,d0
		cmpi.w	#$200,d0
		bls.s	locret_9026C

loc_902B6:
		clr.b	(ScrShake_Value).w
		bra.w	loc_90368
; ---------------------------------------------------------------------------

loc_902BE:
		move.b	#4,5(a0)
		ori.b	#$28,$38(a0)
		move.w	#$27,$2E(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	word_902EC(pc,d0.w),$3A(a0)
		move.w	(__u_FA98).w,(Camera_target_max_Y_pos).w
		lea	Child7_ChangeLevSize(pc),a2
		jmp	(CreateChild7_Normal2).l
; ---------------------------------------------------------------------------
word_902EC:	dc.w $850
		dc.w $950
; ---------------------------------------------------------------------------

loc_902F0:
		subq.w	#1,$2E(a0)
		bpl.s	locret_902FC
		move.b	#6,5(a0)

locret_902FC:
		rts
; ---------------------------------------------------------------------------

loc_902FE:
		jsr	MoveSprite.w
		move.w	$14(a0),d0
		cmp.w	$3A(a0),d0
		bhs.s	loc_90310
		rts
; ---------------------------------------------------------------------------

loc_90310:
		move.b	#8,5(a0)
		move.w	#$40,$1A(a0)
		move.w	#$7F,$2E(a0)
		move.l	#loc_90352,$34(a0)
		lea	Child6_CreateBossExplosion.w,a2
		jmp	CreateChild6_Simple.w
; ---------------------------------------------------------------------------

loc_90338:
		cmpi.w	#$40,$2E(a0)
		bne.s	loc_90346
		bset	#7,$2A(a0)

loc_90346:
		jsr	MoveSprite2.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_90352:
		move.l	#Obj_Wait,(a0)
		move.w	#$BF,$2E(a0)
		move.l	#Go_Delete_Sprite,$34(a0)

Obj_LRZrockCrusher_Reload:
		lea	(ArtKosM_FirewormSegments).l,a1	; NAT: Sex
		move.w	#-$5DC0,d2
		jsr	Queue_Kos_Module.w
		lea	(ArtKosM_Iwamodoki).l,a1
		move.w	#-$5A00,d2
		jsr	Queue_Kos_Module.w
		lea	(Pal_LRZ1).l,a1
		jsr	PalLoad_Line1.w
		jmp	Boss_DisableHitMode		; NAT: Disable hit mode
; ---------------------------------------------------------------------------

loc_90368:
		bsr.s	Obj_LRZrockCrusher_Reload
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------

loc_9039A:

		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_903C2(pc,d0.w),d1
		jsr	off_903C2(pc,d1.w)
		cmpi.b	#8,$2C(a0)
		blo.s	loc_903BA
		move.b	#$7F,$29(a0)
		bsr.w	sub_905A8

loc_903BA:
		moveq	#0,d0
		jmp	Child_DrawTouch_Sprite_FlickerMove.w
; ---------------------------------------------------------------------------
off_903C2:	dc.w loc_903CC-off_903C2

		dc.w loc_903F4-off_903C2
		dc.w loc_90408-off_903C2
		dc.w loc_90436-off_903C2
		dc.w loc_904B4-off_903C2
; ---------------------------------------------------------------------------

loc_903CC:
		lea	word_90614(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.b	$2C(a0),d0
		cmpi.b	#8,d0
		blo.s	loc_903EC
		move.b	#2,$22(a0)
		move.b	#$12,$28(a0)

loc_903EC:
		andi.b	#4,d0
		move.b	d0,$2E(a0)

loc_903F4:
		movea.w	$46(a0),a1
		btst	#2,$38(a1)
		beq.w	locret_9026C
		move.b	#4,5(a0)

loc_90408:
		subq.b	#1,$2E(a0)
		bmi.s	loc_90426
		movea.w	$46(a0),a1
		btst	#3,$38(a1)
		beq.s	loc_90420
		move.b	#8,5(a0)

loc_90420:
		jmp	Refresh_ChildPosition.w
; ---------------------------------------------------------------------------

loc_90426:
		move.b	#6,5(a0)
		move.b	#2,$39(a0)
		clr.b	$40(a0)

loc_90436:
		move.b	$40(a0),d0
		add.b	d0,$43(a0)
		subq.b	#1,$2E(a0)
		bpl.s	loc_9048A
		subq.b	#1,$39(a0)
		bmi.s	loc_90490
		move.b	$2C(a0),d3
		andi.w	#8,d3
		bne.s	loc_9046E
		btst	#2,$38(a0)
		beq.s	loc_9046E
		bchg	#1,$38(a0)
		bne.s	loc_9046E
		lea	ChildObjDat_90658(pc),a2
		jsr	CreateChild3_NormalRepeated.w

loc_9046E:

		lsr.w	#1,d3
		moveq	#0,d1
		bchg	#2,$38(a0)
		beq.s	loc_9047C
		moveq	#2,d1

loc_9047C:
		add.w	d1,d3
		lea	byte_904AC(pc,d3.w),a1
		move.b	(a1)+,$2E(a0)
		move.b	(a1)+,$40(a0)

loc_9048A:
		jmp	Refresh_ChildPosition.w
; ---------------------------------------------------------------------------

loc_90490:
		move.b	#4,5(a0)
		move.b	$2C(a0),d0
		andi.b	#8,d0
		lsr.b	#1,d0
		addq.b	#4,d0
		move.b	d0,$2E(a0)
		jmp	Refresh_ChildPosition.w
; ---------------------------------------------------------------------------
byte_904AC:	dc.b	1,   8
		dc.b	3, $FC
		dc.b	3, $FC
		dc.b	7,   2
; ---------------------------------------------------------------------------

loc_904B4:
		jmp	Refresh_ChildPosition.w
; ---------------------------------------------------------------------------

loc_904BA:
		lea	ObjDat3_9061A(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_43A6C,(a0)
		bset	#7,4(a0)
		jsr	Random_Number.w
		andi.w	#$1FF,d0
		move.w	#$200,d1
		tst.b	$2C(a0)
		beq.s	loc_904E8
		neg.w	d0
		neg.w	d1

loc_904E8:
		add.w	d1,d0
		move.w	d0,$18(a0)
		swap	d0
		andi.w	#$1FF,d0
		move.w	#$300,d1
		add.w	d1,d0
		neg.w	d0
		move.w	d0,$1A(a0)
		rts
; ---------------------------------------------------------------------------

loc_90502:
		move.l	#loc_90512,(a0)
		move.w	#$B3,$2E(a0)
		st	(ScrShake_Value).w

loc_90512:
		subq.w	#1,$2E(a0)
		bpl.w	locret_9026C
		tst.b	$2C(a0)
		bne.s	loc_9056E
		st	(ScrEvents_8).w
		clr.b	(ScrShake_Value).w
		jsr	Create_New_Sprite.w
		bne.s	loc_90548
		move.l	#Obj_LRZCollapsingBridge,(a1)
		move.b	#1,$32(a1)
		move.w	#$F00,$10(a1)
		move.w	#$760,$14(a1)

loc_90548:
		jsr	Create_New_Sprite.w
		bne.s	loc_90568
		move.l	#Obj_LRZCollapsingBridge,(a1)
		move.b	#1,$32(a1)
		move.w	#$F80,$10(a1)
		move.w	#$760,$14(a1)

loc_90568:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_9056E:
		st	(ScrEvents_8+$1).w
		jsr	Create_New_Sprite.w
		bne.s	loc_90592
		move.l	#Obj_LRZCollapsingBridge,(a1)
		move.b	#1,$32(a1)
		move.w	#$540,$10(a1)
		move.w	#$860,$14(a1)

loc_90592:
		move.w	(__u_FA98).w,(Camera_target_max_Y_pos).w
		lea	Child7_ChangeLevSize(pc),a2
		jsr	(CreateChild7_Normal2).l
		jmp	Delete_Current_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_905A8:

		tst.b	$28(a0)
		bne.s	locret_905E6
		tst.b	$20(a0)
		bne.s	loc_905C8
		move.b	#$40,$20(a0)		; NAT: more delay pls?
		moveq	#$6E,d0
		jsr	Play_Sound_2.w
		move.b	#$7F,$29(a0)

loc_905C8:
		moveq	#0,d0
		btst	#0,$20(a0)
		bne.s	loc_905D6
		addi.w	#6,d0

loc_905D6:
		bsr.w	sub_905E8
		subq.b	#1,$20(a0)
		bne.s	locret_905E6
		move.b	$25(a0),$28(a0)

locret_905E6:

		rts
; End of function sub_905A8


; =============== S U B R O U T I N E =======================================


sub_905E8:
		lea	word_905F6(pc),a1
		lea	word_905FC(pc,d0.w),a2
		jmp	CopyWordData_3.w
; End of function sub_905E8

; ---------------------------------------------------------------------------
word_905F6:	dc.w $FC36
		dc.w $FC3A
		dc.w $FC3C
word_905FC:	dc.w $20
		dc.w $866
		dc.w $644
		dc.w $EEE
		dc.w $AAA
		dc.w $CCC
ObjDat3_90608:	dc.l Map_LRZRockCrusher
		dc.w $252E
		dc.w prio(3)
		dc.b $80
		dc.b $40
		dc.b 0
		dc.b $10
word_90614:	dc.w prio(4)
		dc.b $C
		dc.b $14
		dc.b 1
		dc.b $8B
ObjDat3_9061A:	dc.l Map_LRZRockDebris
		dc.w $C0D3
		dc.w prio(0)
		dc.b 4
		dc.b 4
		dc.b 0
		dc.b 0
ChildObjDat_90626:dc.w 7
		dc.l loc_9039A
		dc.w $E41C
		dc.l loc_9039A
		dc.w $1C1C
		dc.l loc_9039A
		dc.w $DC1C
		dc.l loc_9039A
		dc.w $241C
		dc.l loc_9039A
		dc.w $E4DC
		dc.l loc_9039A
		dc.w $1CDC
		dc.l loc_9039A
		dc.w $DCDC
		dc.l loc_9039A
		dc.w $24DC
ChildObjDat_90658:dc.w 1
		dc.l loc_904BA
		dc.w $C
Child7_ChangeLevSize:dc.w 3

		dc.l Obj_DecLevStartYGradual
		dc.w 0
		dc.l Obj_IncLevEndYGradual
		dc.w 0
		dc.l Obj_DecLevStartXGradual
		dc.w 0
		dc.l Obj_IncLevEndXGradual
		dc.w 0
ChildObjDat_9067A:dc.w 0
		dc.l Obj_8B
Pal_LRZRockCrusher:	binclude "Levels/LRZ/Palettes/Rock Crusher.bin"
	even

; ---------------------------------------------------------------------------

Obj_B0_2:
		lea	ObjDat3_90FAC(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_90700,(a0)
		move.w	a0,(__u_FABA).w
		move.b	#-$10,(__u_FABC).w
		move.b	#-$18,(__u_FABC+$1).w
		lea	(off_914CE).l,a1
		lea	(PalRotation_Data).w,a2
		move.l	(a1)+,(a2)+
		move.l	(a1)+,(a2)+
		clr.w	(a2)
		move.w	#$1640,$10(a0)
		move.w	#$340,$14(a0)
		move.w	#$1F3F,(PalCyc_Counters+$2).w
		lea	(Collected_emeralds_array).w,a1
		moveq	#3,d0
		moveq	#6,d1

loc_906EA:
		cmp.b	(a1)+,d0
		bne.s	loc_90700
		dbf	d1,loc_906EA
		st	$26(a0)
		lea	ChildObjDat_90FE4(pc),a2
		jsr	CreateChild6_Simple.w

loc_90700:

		tst.b	4(a0)
		bpl.s	loc_9072E
		tst.b	$26(a0)
		bne.s	loc_9071A
		move.l	#$6A00660,(Normal_palette_line_4+$2).w
		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------

loc_9071A:
		lea	off_914CE(pc),a1
		lea	(Normal_palette_line_4+$2).w,a2
		jsr	(Run_PalRotationScript2).l

loc_9072E:

		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------

loc_90734:
		lea	word_90FB8(pc),a1
		jsr	SetUp_ObjAttributes2.w
		move.l	#loc_90744,(a0)

loc_90744:
		movea.w	$46(a0),a1
		move.w	$10(a1),$10(a0)
		move.w	$14(a1),$14(a0)
		moveq	#0,d0
		move.b	$3B(a1),d0
		lsr.w	#1,d0
		move.b	RawAni_90768(pc,d0.w),$22(a0)
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------
RawAni_90768:	dc.b  $1D, $1D,	$1D,  $C,  $D,	$E, $1D,  $F, $10, $11,	$1D, $1D
; ---------------------------------------------------------------------------

Obj_B4_2:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

Obj_B5_2:
		lea	(ArtKosM_HPZSmallEmeralds).l,a1
		move.w	#-$6A80,d2
		jsr	Queue_Kos_Module.w
		lea	(ArtKosM_Teleporter).l,a1
		move.w	#-$6F00,d2
		jsr	Queue_Kos_Module.w
		lea	Pal_CutsceneKnux1.w,a1
		cmpi.w	#3,(Player_mode).w
		bne.s	loc_90998
		lea	(Pal_SonicTails).l,a1

loc_90998:
		lea	(Target_palette_line_2).w,a2
		moveq	#7,d0

loc_9099E:
		move.l	(a1)+,(a2)+
		dbf	d0,loc_9099E
		lea	(Pal_HPZ2_B).l,a1
		lea	(Target_palette_line_3).w,a2
		moveq	#$F,d6

loc_909B0:
		move.l	(a1)+,(a2)+
		dbf	d6,loc_909B0
		move.l	#$6A00660,(Target_palette_line_4+$2).w
		jsr	Create_New_Sprite.w
		bne.s	loc_909CC
		move.l	#Obj_B0_2,(a1)

loc_909CC:
		jsr	Create_New_Sprite.w
		bne.s	loc_909EA
		move.l	#Obj_SSZHPZTeleporter,(a1)
		move.w	#$1640,$10(a1)
		move.w	#$3C7,$14(a1)
		move.w	a1,$44(a0)

loc_909EA:
		bra.s	loc_90A10
		moveq	#0,d2
		moveq	#6,d3

loc_909F4:
		jsr	Create_New_Sprite.w
		move.l	#Obj_B4_2,(a1)
		move.b	d2,$2C(a1)
		addq.w	#1,d2
		dbf	d3,loc_909F4

loc_90A0A:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_90A10:
		move.l	#loc_90A72,(a0)
		move.w	#$1F,$2E(a0)
		lea	(Collected_emeralds_array).w,a2
		moveq	#2,d1
		moveq	#0,d2
		moveq	#6,d3

loc_90A26:
		cmp.b	(a2)+,d1
		bhi.s	loc_90A3A
		jsr	Create_New_Sprite.w
		move.l	#Obj_B4_2,(a1)
		move.b	d2,$2C(a1)

loc_90A3A:
		addq.w	#1,d2
		dbf	d3,loc_90A26
		lea	(Player_1).w,a1
		bsr.w	sub_90A4C
		lea	(Player_2).w,a1

; =============== S U B R O U T I N E =======================================


sub_90A4C:
		move.b	#-$7D,$2E(a1)
		bset	#7,$A(a1)
		move.b	#0,$22(a1)
		move.b	#$1C,$20(a1)
		move.w	#$1640,$10(a1)
		move.w	#$3A3,$14(a1)
		rts
; End of function sub_90A4C

; ---------------------------------------------------------------------------

loc_90A72:
		subq.w	#1,$2E(a0)
		bpl.s	locret_90A92
		move.l	#loc_90A94,(a0)
		jsr	Create_New_Sprite.w
		bne.s	locret_90A92
		move.l	#loc_90CA2,(a1)
		move.b	#7,$2C(a1)

locret_90A92:

		rts
; ---------------------------------------------------------------------------

loc_90A94:
		bclr	#0,(__u_FAB8).w
		beq.w	locret_90C32
		lea	(Collected_emeralds_array).w,a1
		lea	byte_90B1A(pc),a2
		lea	(__u_FA82).w,a3
		lea	word_90B0C(pc),a4
		lea	(__u_FAB0).w,a5
		moveq	#0,d0
		moveq	#0,d1
		moveq	#0,d2
		moveq	#6,d3

loc_90ABA:
		move.b	(a2)+,d0
		move.b	(a1,d0.w),d4
		beq.s	loc_90AD2
		cmpi.b	#1,d4
		bne.s	loc_90AD2
		move.b	d0,(a5)+
		add.w	d0,d0
		move.w	(a4,d0.w),(a3)+
		moveq	#1,d1

loc_90AD2:

		cmpi.b	#2,d4
		bne.s	loc_90ADA
		moveq	#1,d2

loc_90ADA:
		dbf	d3,loc_90ABA
		clr.w	(a3)
		tst.w	d1
		bne.s	loc_90AF2
		tst.w	d2
		bne.s	loc_90AEE
		bset	#5,$38(a0)

loc_90AEE:
		bra.w	loc_90C16
; ---------------------------------------------------------------------------

loc_90AF2:
		move.l	#loc_90B22,(a0)
		move.w	#$21F,$2E(a0)
		lea	word_90FEA(pc),a2
		jmp	CreateChild6_Simple.w
; ---------------------------------------------------------------------------
word_90B0C:	dc.w $15A0
		dc.w $1540
		dc.w $1600
		dc.w $1520
		dc.w $1620
		dc.w $1520
		dc.w $1620
byte_90B1A:	dc.b 5
		dc.b 3
		dc.b 1
		dc.b 0
		dc.b 2
		dc.b 4
		dc.b 6
		dc.b 0
; ---------------------------------------------------------------------------

loc_90B22:
		subq.w	#1,$2E(a0)
		bpl.w	locret_90C32
		move.l	#loc_90BF4,$34(a0)

loc_90B32:
		move.l	#loc_90BD2,(a0)
		st	(Scroll_lock).w
		moveq	#0,d0
		move.b	$39(a0),d0
		addq.b	#1,$39(a0)
		lea	(__u_FAB0).w,a1
		moveq	#0,d1
		move.b	(a1,d0.w),d1
		move.b	d1,$3C(a0)
		add.w	d0,d0
		lea	(__u_FA82).w,a1
		move.w	(a1,d0.w),$3A(a0)
		bne.s	loc_90B72
		move.l	#loc_90C16,$34(a0)
		move.w	#$15A0,$3A(a0)
		moveq	#2,d1

loc_90B72:
		add.w	d1,d1
		lea	byte_90BBC(pc,d1.w),a2
		lea	(Player_1).w,a1
		bsr.w	sub_90B84
		lea	(Player_2).w,a1

; =============== S U B R O U T I N E =======================================


sub_90B84:
		bclr	#0,4(a1)
		bclr	#0,$2A(a1)
		tst.b	(a2)
		beq.s	loc_90BA0
		bset	#0,4(a1)
		bset	#0,$2A(a1)

loc_90BA0:
		moveq	#0,d0
		move.b	1(a2),d0
		add.b	$38(a1),d0
		move.b	RawAni_90BCA(pc,d0.w),$22(a1)
		move.l	a2,-(sp)
		jsr	Player_Load_PLC2.w
		movea.l	(sp)+,a2
		rts
; End of function sub_90B84

; ---------------------------------------------------------------------------
byte_90BBC:	dc.b	1,   4
		dc.b	1,   0
		dc.b	0,   0
		dc.b	1,   4
		dc.b	0,   4
		dc.b	1,   0
		dc.b	0,   0
RawAni_90BCA:	dc.b  $BA, $AD,	$56,   0, $C4, $B0, $D6,   0
; ---------------------------------------------------------------------------

loc_90BD2:
		move.w	(Camera_X_pos).w,d0
		moveq	#-$10,d1
		sub.w	$3A(a0),d0
		bpl.s	loc_90BE2
		neg.w	d0
		neg.w	d1

loc_90BE2:
		cmpi.w	#$10,d0
		blo.s	loc_90BEE
		add.w	d1,(Camera_X_pos).w
		rts
; ---------------------------------------------------------------------------

loc_90BEE:
		movea.l	$34(a0),a1
		jmp	(a1)
; ---------------------------------------------------------------------------

loc_90BF4:
		move.l	#loc_90C2A,(a0)
		move.w	#$1F,$2E(a0)
		jsr	Create_New_Sprite.w
		bne.s	locret_90C14
		move.l	#loc_90CA2,(a1)
		move.b	$3C(a0),$2C(a1)

locret_90C14:
		rts
; ---------------------------------------------------------------------------

loc_90C16:

		move.l	#loc_90C34,(a0)
		clr.b	(Scroll_lock).w
		clr.b	(Player_1+$2E).w
		clr.b	(Player_2+$2E).w
		rts
; ---------------------------------------------------------------------------

loc_90C2A:
		subq.w	#1,$2E(a0)
		bmi.w	loc_90B32

locret_90C32:

		rts
; ---------------------------------------------------------------------------

loc_90C34:
		lea	(Player_1).w,a1
		move.w	$10(a1),d0
		subi.w	#$1640,d0
		bpl.s	loc_90C44
		neg.w	d0

loc_90C44:
		cmpi.w	#8,d0
		blo.s	loc_90C58
		cmpi.w	#$18,d0
		blo.s	locret_90CA0
		bset	#3,$38(a0)
		rts
; ---------------------------------------------------------------------------

loc_90C58:
		bclr	#3,$38(a0)
		beq.s	locret_90CA0
		movea.w	$44(a0),a1
		btst	#3,$2A(a1)
		beq.s	locret_90CA0
		btst	#5,$38(a0)
		beq.s	locret_90CA0
		moveq	#-$51,d0
		jsr	Play_Sound_2.w
		st	(Restart_level_flag).w
	;	move.b	(Saved2_last_star_post_hit).w,(Last_star_post_hit).w
	;	move.w	(Saved2_zone_and_act).w,(Current_zone_and_act).w
	;	move.w	(Saved2_apparent_zone_and_act).w,(Apparent_zone_and_act).w
	;	move.b	(Player_1+status_secondary).w,(Saved2_status_secondary).w
		ori.b	#-$80,(Last_star_post_hit).w

locret_90CA0:

		rts
; ---------------------------------------------------------------------------

loc_90CA2:

		lea	ObjDat3_90FCC(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_90CF4,(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		lsl.w	#2,d0
		lea	word_90CD4(pc,d0.w),a1
		move.w	(a1)+,$10(a0)
		move.w	(a1)+,$3A(a0)
		move.w	(Camera_Y_pos).w,d0
		subi.w	#$80,d0
		move.w	d0,$14(a0)
		rts
; ---------------------------------------------------------------------------
word_90CD4:	dc.w  $1640,  $300
		dc.w  $15E0,  $328
		dc.w  $16A0,  $328
		dc.w  $15A0,  $2D8
		dc.w  $16E0,  $2D8
		dc.w  $1550,  $318
		dc.w  $1730,  $318
		dc.w  $1640,  $340
; ---------------------------------------------------------------------------

loc_90CF4:
		move.w	$14(a0),d0
		addi.w	#$10,d0
		move.w	d0,$14(a0)
		cmp.w	$3A(a0),d0
		blo.s	loc_90D20
		move.l	#loc_90D30,(a0)
		move.w	#$3F,$2E(a0)
		move.w	#8,(ScrShake_Value).w
		moveq	#$54,d0
		jsr	Play_Sound_2.w

loc_90D20:

		btst	#0,(V_int_run_count+3).w
		bne.w	locret_90C32
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_90D30:
		subq.w	#1,$2E(a0)
		bmi.s	loc_90D42
		cmpi.w	#$20,$2E(a0)
		bne.s	loc_90D20
		bsr.w	sub_90E9A

loc_90D42:
		move.l	#loc_90D52,(a0)
		move.l	#loc_90D5E,$34(a0)
		bra.s	loc_90D20
; ---------------------------------------------------------------------------

loc_90D52:
		lea	byte_90FF6(pc),a1
		jsr	Animate_RawNoSST.w
		bra.s	loc_90D20
; ---------------------------------------------------------------------------

loc_90D5E:
		bset	#0,(__u_FAB8).w
		move.w	$44(a0),d0
		beq.s	loc_90D72
		movea.w	d0,a1
		bset	#5,$38(a1)

loc_90D72:
		jmp	Go_Delete_Sprite.w
; ---------------------------------------------------------------------------

loc_90D78:
		move.l	#loc_90DA2,(a0)
		bset	#2,4(a0)
		move.w	#-$80,$1A(a0)
		move.w	#$7F,$2E(a0)
		moveq	#-$48,d0
		jsr	Play_Sound_2.w
		lea	ChildObjDat_90FF0(pc),a2
		jsr	CreateChild6_Simple.w

loc_90DA2:
		jsr	MoveSprite2.w
		subq.w	#1,$2E(a0)
		bpl.s	locret_90DD6
		move.l	#loc_90DDC,(a0)
		lea	(Player_1).w,a1
		bsr.w	sub_90DC0
		lea	(Player_2).w,a1

; =============== S U B R O U T I N E =======================================


sub_90DC0:
		moveq	#0,d0
		move.b	$38(a1),d0
		move.b	byte_90DD8(pc,d0.w),$22(a1)
		move.l	a2,-(sp)
		jsr	Player_Load_PLC2.w
		movea.l	(sp)+,a2

locret_90DD6:
locret_90DFA:
		rts

; ---------------------------------------------------------------------------
byte_90DD8:	dc.b $C4
		dc.b $B0
		dc.b $D6
		dc.b 0
; ---------------------------------------------------------------------------

loc_90DDC:
		cmpi.b	#$7F,$27(a0)
		bne.s	locret_90DFA
		bset	#2,$38(a0)
		bset	#7,$38(a0)
		bne.s	locret_90DFA
		moveq	#-$64,d0
		jmp	Play_Sound_2.w
; ---------------------------------------------------------------------------

loc_90DFC:
		lea	ObjDat3_90FD8(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_90E1C,(a0)
		bset	#7,4(a0)
		move.w	#$7F,$2E(a0)
		bsr.w	sub_90F0A

loc_90E1C:
		move.w	$3A(a0),d0
		addi.w	#$10,d0
		move.w	d0,$3A(a0)
		cmpi.w	#$1800,d0
		blo.s	loc_90E34
		move.l	#loc_90E4E,(a0)

loc_90E34:

		addq.b	#4,$3C(a0)
		jsr	(MoveSprite_Circular).l

loc_90E3E:

		btst	#0,(V_int_run_count+3).w
		bne.w	locret_90C32
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_90E4E:
		move.b	$3D(a0),d0
		sub.b	$3C(a0),d0
		cmpi.b	#4,d0
		blo.s	loc_90E5E
		bra.s	loc_90E34
; ---------------------------------------------------------------------------

loc_90E5E:
		move.l	#loc_90E72,(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		movea.w	$46(a0),a1
		bset	d0,$27(a1)

loc_90E72:
		movea.w	$46(a0),a1
		btst	#2,$38(a1)
		beq.s	loc_90E3E
		move.l	#loc_90E86,(a0)
		bra.s	loc_90E3E
; ---------------------------------------------------------------------------

loc_90E86:
		tst.b	4(a0)
		bpl.s	loc_90E94
		jsr	MoveSprite2.w
		bra.s	loc_90E3E
; ---------------------------------------------------------------------------

loc_90E94:
		jmp	Delete_Current_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_90E9A:
		cmpi.b	#7,$2C(a0)
		bne.s	loc_90ED0
		lea	(Player_1).w,a1
		bsr.w	sub_90EAE
		lea	(Player_2).w,a1
; End of function sub_90E9A


; =============== S U B R O U T I N E =======================================


sub_90EAE:
		moveq	#0,d0
		move.b	$38(a1),d0
		cmpi.b	#1,d0
		bne.s	loc_90EBE
		addq.w	#4,$14(a1)

loc_90EBE:
		move.b	RawAni_90F06(pc,d0.w),$22(a1)
		move.b	#5,$20(a1)
		jmp	Player_Load_PLC2.w
; End of function sub_90EAE

; ---------------------------------------------------------------------------

loc_90ED0:
		lea	(Collected_emeralds_array).w,a1
		moveq	#0,d0
		move.b	$2C(a0),d0
		addq.b	#1,(a1,d0.w)
		jsr	Create_New_Sprite.w
		bne.s	loc_90EFC
		move.l	#Obj_B4_2,(a1)
		move.b	$2C(a0),$2C(a1)
		bset	#7,$38(a1)
		move.w	a1,$44(a0)

loc_90EFC:
		rts
; ---------------------------------------------------------------------------
RawAni_90F06:	dc.b  $BA, $AD,	$56,   0

; =============== S U B R O U T I N E =======================================


sub_90F0A:
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	d0,d1
		lsr.w	#1,d0
		move.b	d0,$2C(a0)
		move.b	byte_90F64(pc,d0.w),$3C(a0)
		move.b	byte_90F6C(pc,d0.w),$3D(a0)
		lea	(Collected_emeralds_array).w,a1
		move.b	(a1,d0.w),d2
		beq.s	loc_90F54
		cmpi.b	#2,d2
		bhs.s	loc_90F54
		move.b	d0,$22(a0)
		add.w	d1,d1
		move.l	word_90F74(pc,d1.w),$18(a0)
		cmpi.w	#3,(Player_mode).w
		bne.s	loc_90F4A
		addq.w	#2,d1

loc_90F4A:
		move.w	word_90F90(pc,d1.w),d2
		move.w	d2,$A(a0)
		rts
; ---------------------------------------------------------------------------

loc_90F54:

		movea.w	$46(a0),a1
		bset	d0,$27(a1)
		addq.w	#4,sp
		jmp	Delete_Current_Sprite.w
; End of function sub_90F0A

; ---------------------------------------------------------------------------
byte_90F64:	dc.b 0
		dc.b $24
		dc.b $48
		dc.b $6C
		dc.b $90
		dc.b $B4
		dc.b $D8
		dc.b 0
byte_90F6C:	dc.b $80
		dc.b $86
		dc.b $7A
		dc.b $8C
		dc.b $74
		dc.b $92
		dc.b $6E
		dc.b 0
word_90F74:	dc.w	  0, $FC00
		dc.w  $FF08, $FC20
		dc.w	$F8, $FC20
		dc.w  $FE20, $FC7C
		dc.w   $1E0, $FC7C
		dc.w  $FD54, $FD0C
		dc.w   $2AC, $FD0C
word_90F90:	dc.w $C4AC
		dc.w $C4AC
		dc.w $84AC
		dc.w $A4AC
		dc.w $C4AC
		dc.w $C4AC
		dc.w $84AC
		dc.w $A4AC
		dc.w $84AC
		dc.w $A4AC
		dc.w $84AC
		dc.w $A4AC
		dc.w $E4AC
		dc.w $E4AC
ObjDat3_90FAC:	dc.l Map_HPZEmeraldMisc
		dc.w $63B5
		dc.w prio(4)
		dc.b $20
		dc.b $18
		dc.b $B
		dc.b 0
word_90FB8:	dc.w $43B5
		dc.w prio(3)
		dc.b $10
		dc.b $10
		dc.b $C
		dc.b 0
ObjDat3_90FC0:	dc.l Map_HPZEmeraldMisc
		dc.w 0
		dc.w prio(1)
		dc.b $18
		dc.b $10
		dc.b $1E
		dc.b 0
ObjDat3_90FCC:	dc.l Map_HPZEmeraldMisc
		dc.w $83B5
		dc.w prio(0)
		dc.b $10
		dc.b $80
		dc.b 8
		dc.b 0
ObjDat3_90FD8:	dc.l Map_HPZChaosEmeralds
		dc.w $A4AC
		dc.w prio(3)
		dc.b 4
		dc.b 4
		dc.b 0
		dc.b 0
ChildObjDat_90FE4:dc.w 0
		dc.l loc_90734
word_90FEA:	dc.w 0
		dc.l loc_90D78
ChildObjDat_90FF0:dc.w 6
		dc.l loc_90DFC
byte_90FF6:	dc.b	0, $1D,	$1F, $1D, $20, $1D, $21, $1D, $22, $1D,	$23, $1D, $24, $1D, $F4,   0

Map_HPZEmeraldMisc:	include "Levels/HPZ/Misc Object Data/Map - Emerald Misc Art.asm"

Map_HPZChaosEmeralds:	include "Levels/HPZ/Misc Object Data/Map - Chaos Emeralds.asm"

off_914CE:	dc.l off_914EE

		dc.w 1
		dc.b 0
		dc.b $F
		dc.b 1
		dc.b 9
		dc.b 2
		dc.b 9
		dc.b 3
		dc.b 7
		dc.b 4
		dc.b 7
		dc.b 5
		dc.b 5
		dc.b 6
		dc.b 5
		dc.b 5
		dc.b 5
		dc.b 4
		dc.b 7
		dc.b 3
		dc.b 7
		dc.b 2
		dc.b 9
		dc.b 1
		dc.b 9
		dc.b $FF
		dc.b $FC
off_914EE:	dc.w word_914FC-off_914EE

		dc.w word_91500-off_914EE
		dc.w word_91504-off_914EE
		dc.w word_91508-off_914EE
		dc.w word_9150C-off_914EE
		dc.w word_91510-off_914EE
		dc.w word_91514-off_914EE
word_914FC:	dc.w $6A0
		dc.w $660
word_91500:	dc.w $8C0
		dc.w $680
word_91504:	dc.w $AC0
		dc.w $680
word_91508:	dc.w $CE0
		dc.w $880
word_9150C:	dc.w $CE6
		dc.w $6A2
word_91510:	dc.w $CE8
		dc.w $AC0
word_91514:	dc.w $EEC
		dc.w $CE8
; ---------------------------------------------------------------------------

Obj_EggRobo:

		jsr	Obj_WaitOffscreen.w
		bsr.w	sub_9185E
		movea.l	(a0),a1
		jmp	(a1)
; ---------------------------------------------------------------------------

loc_91526:
		tst.b	(End_Of_Level_Flag).w			; NAT: Check for end-of-level
		bne.s	loc_91598			; if yes, delete

		move.b	$40(a0),d0
		subi.b	#3,d0
		cmpi.b	#4,d0
		blo.s	loc_91548
		cmp.b	$41(a0),d0
		beq.s	loc_91548
		move.b	d0,$40(a0)
		move.b	d0,$41(a0)
		jsr	(Perform_Art_Scaling).l

loc_91548:

		move.w	$3C(a0),d0
		subq.w	#1,d0
		move.w	d0,$3C(a0)
		add.w	d0,$1A(a0)
		bpl.s	loc_9155E
		tst.b	4(a0)
		bpl.s	loc_91570

loc_9155E:
		jsr	(sub_86180).l
		jsr	(sub_8619A).l
		jmp	Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_91570:
		move.b	$2C(a0),d0
		andi.w	#$F0,d0
		lsr.w	#4,d0
		move.w	(__u_FA82).w,d1
		bset	d0,d1
		move.w	d1,(__u_FA82).w
		lea	(ArtKosM_EggRoboBadnik).l,a1
		move.w	#-$6000,d2
		jsr	Queue_Kos_Module.w

loc_91598:
		jmp	Delete_Current_Sprite.w
; ---------------------------------------------------------------------------

loc_9159A:
		bsr.w	sub_91988
		move.w	$30(a0),$32(a0)
		move.w	$14(a0),$30(a0)
		jsr	Swing_UpAndDown.w
		jsr	MoveSprite2.w
		lea	(Player_1).w,a1
		jsr	Find_OtherObject.w
		jsr	(Change_FlipX).l
		cmpi.w	#8,d3
		bhi.s	loc_915D8
		move.l	#loc_915DE,(a0)
		bset	#1,$38(a0)

loc_915D8:
		tst.b	(End_Of_Level_Flag).w			; NAT: Check for end-of-level
		beq.s	.noexp				; if not, skip
.exp		move.l	#Obj_Explosion,(a0)		; turn this into an explosion
		move.b	#6,5(a0)
		bset	#7,$2A(a0)			; tell objects we are dead
.noexp		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------

loc_915DE:
		tst.b	(End_Of_Level_Flag).w			; NAT: Check for end-of-level
		bne.s	loc_915D8.exp			; if yes, skip
		bsr.w	sub_91988
		btst	#1,$38(a0)
		bne.s	loc_915F0
		move.l	#loc_9159A,(a0)

loc_915F0:
		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------

loc_915F6:
		move.b	(V_int_run_count+3).w,d0
		andi.b	#$F,d0
		bne.s	loc_91648
		tst.b	4(a0)
		bpl.s	loc_91648
	;	lea	ChildObjDat_919E6(pc),a2	; NAT: Noo animals bad
	;	jsr	CreateChild6_Simple.w
		subq.b	#1,$39(a0)
		bpl.s	loc_91648
		move.l	#loc_9164E,(a0)
		lea	ObjDat3_919A6(pc),a1
		jsr	SetUp_ObjAttributes.w
		bclr	#7,$A(a0)
		move.w	#-$300,d0
		btst	#0,4(a0)
		beq.s	loc_9163A
		neg.w	d0

loc_9163A:
		move.w	d0,$18(a0)
		lea	ChildObjDat_919D0(pc),a2
		jsr	CreateChild1_Normal.w

loc_91648:

		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------

loc_9164E:
		bsr.w	sub_91988
		addi.w	#-$10,$1A(a0)
		jsr	MoveSprite2.w
		move.w	$1A(a0),d0
		cmpi.w	#-$200,d0
		bgt.s	loc_91678
		move.l	#loc_9167E,(a0)
		clr.w	$18(a0)
		bset	#7,$A(a0)

loc_91678:
		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------

loc_9167E:
		bsr.w	sub_91988
		addi.w	#$20,$1A(a0)
		jsr	MoveSprite2.w
		move.w	$1A(a0),d0
		cmpi.w	#$100,d0
		blt.s	loc_916A2
		move.l	#loc_9159A,(a0)
		bsr.w	sub_918E2

loc_916A2:
		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------

loc_916A8:
		lea	word_919BE(pc),a1
		jsr	SetUp_ObjAttributes3.w
		movea.w	$46(a0),a1
		btst	#2,4(a1)
		bne.s	loc_916C4
		bclr	#2,4(a0)

loc_916C4:
		move.l	#loc_916CC,(a0)
		rts
; ---------------------------------------------------------------------------

loc_916CC:
		jsr	Refresh_ChildPositionAdjusted.w
		moveq	#6,d0
		move.w	$1A(a1),d1
		bmi.s	loc_916E4
		moveq	#5,d0
		cmpi.w	#$20,d1
		blo.s	loc_916E4
		moveq	#4,d0

loc_916E4:

		move.b	d0,$22(a0)
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_916EE:
		lea	word_919C4(pc),a1
		jsr	SetUp_ObjAttributes3.w
		movea.w	$46(a0),a1
		btst	#2,4(a1)
		bne.s	loc_9170A
		bclr	#2,4(a0)

loc_9170A:
		move.l	#loc_91712,(a0)
		rts
; ---------------------------------------------------------------------------

loc_91712:

		bsr.w	sub_91930
		btst	#1,$38(a1)
		beq.s	loc_91734
		move.l	#loc_9173A,(a0)
		move.w	#$5F,$2E(a0)
		lea	ChildObjDat_919DE(pc),a2
		jsr	(CreateChild10_NormalAdjusted).l

loc_91734:
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_9173A:
		subq.w	#1,$2E(a0)
		bpl.s	loc_91750
		move.l	#loc_91712,(a0)
		movea.w	$46(a0),a1
		bclr	#1,$38(a1)

loc_91750:
		jmp	Child_Draw_Sprite.w
; ---------------------------------------------------------------------------

loc_91756:
		lea	word_919CA(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_9176C,(a0)
		move.w	#$1F,$2E(a0)

loc_9176C:
		moveq	#0,d0
		btst	#0,(V_int_run_count+3).w
		beq.s	loc_91778
		moveq	#7,d0

loc_91778:
		move.b	d0,$22(a0)
		subq.w	#1,$2E(a0)
		bpl.s	loc_917AE
		move.l	#loc_917B4,(a0)
		move.b	#7,$22(a0)
		move.b	#-$64,$28(a0)
		move.w	#-$800,d0
		btst	#0,4(a0)
		beq.s	loc_917A2
		neg.w	d0

loc_917A2:
		move.w	d0,$18(a0)
		moveq	#$5E,d0
		jsr	Play_Sound_2.w

loc_917AE:
		jmp	Child_DrawTouch_Sprite.w
; ---------------------------------------------------------------------------

loc_917B4:
		jsr	MoveSprite2.w
		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------

loc_917C0:
		move.l	#Obj_Animal,(a0)
		addq.b	#2,5(a0)
		jsr	Random_Number.w
		move.w	#$580,$A(a0)
		andi.w	#1,d0
		beq.s	loc_917E2
		move.w	#$592,$A(a0)

loc_917E2:
		move.b	d0,$30(a0)
		lsl.w	#3,d0
		lea	(word_2C7EA).l,a1
		adda.w	d0,a1
		move.w	(a1)+,d1
		movea.w	$46(a0),a2
		btst	#0,4(a2)
		beq.s	loc_91800
		neg.w	d1

loc_91800:
		move.w	d1,$18(a0)
		move.w	(a1)+,$34(a0)
		move.l	(a1)+,$C(a0)
		swap	d0
		andi.w	#$1FF,d0
		cmpi.w	#$100,d0
		bhs.s	loc_9181C
		move.w	#$100,d0

loc_9181C:
		neg.w	d0
		move.w	d0,$1A(a0)
		move.b	#$C,$1E(a0)
		move.b	#4,4(a0)
		bset	#0,4(a0)
		move.w	#prio(6),8(a0)
		move.b	#8,7(a0)
		move.b	#7,$24(a0)
		move.b	#1,$22(a0)
		move.b	$30(a0),d0
		add.b	d0,d0
		addq.b	#4,d0
		move.b	d0,5(a0)
		jmp	Draw_Sprite.w

; =============== S U B R O U T I N E =======================================


sub_9185E:
		move.b	$2C(a0),d0
		andi.w	#$F,d0
		move.w	off_9186E(pc,d0.w),d0
		jmp	off_9186E(pc,d0.w)
; End of function sub_9185E

; ---------------------------------------------------------------------------
off_9186E:	dc.w loc_91874-off_9186E

		dc.w loc_918C4-off_9186E
		dc.w loc_918FC-off_9186E
; ---------------------------------------------------------------------------

loc_91874:
		lea	ObjDat3_9199A(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_91526,(a0)
		move.w	#-$6000,$3A(a0)
		move.w	#-$80,d0
		btst	#0,4(a0)
		bne.s	loc_91898
		neg.w	d0

loc_91898:
		move.w	d0,$18(a0)
		move.w	$10(a0),$30(a0)
		move.w	$14(a0),$34(a0)
		move.b	#$7F,$40(a0)
		move.l	#ArtScaled_EggRoboFly,$42(a0)
		btst	#0,4(a0)
		move.w	#$180,$1A(a0)

locret_918C2:
		rts
; ---------------------------------------------------------------------------

loc_918C4:
		bsr.w	sub_91914
		lea	ObjDat3_919A6(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_9159A,(a0)
		lea	ChildObjDat_919D0(pc),a2
		jsr	CreateChild1_Normal.w

; =============== S U B R O U T I N E =======================================


sub_918E2:
		move.w	#$100,d0
		move.w	d0,$3E(a0)
		move.w	d0,$1A(a0)
		move.w	#8,$40(a0)
		bclr	#0,$38(a0)
		rts
; End of function sub_918E2

; ---------------------------------------------------------------------------

loc_918FC:
		lea	ObjDat3_919B2(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.l	#loc_915F6,(a0)
		move.b	#4,$39(a0)
		rts

; =============== S U B R O U T I N E =======================================


sub_91914:
		move.b	$2C(a0),d0
		andi.w	#$F0,d0
		lsr.w	#4,d0
		move.w	(__u_FA82).w,d1
		btst	d0,d1
		bne.w	locret_918C2
		addq.w	#8,sp
		jmp	loc_85088.w
; End of function sub_91914


; =============== S U B R O U T I N E =======================================


sub_91930:
		movea.w	$46(a0),a1
		move.w	$10(a1),d0
		move.b	$42(a0),d1
		ext.w	d1
		bclr	#0,4(a0)
		btst	#0,4(a1)
		beq.s	loc_91954
		neg.w	d1
		bset	#0,4(a0)

loc_91954:
		add.w	d1,d0
		move.w	d0,$10(a0)
		move.w	$32(a1),d0
		bne.s	loc_91964
		move.w	$14(a1),d0

loc_91964:
		move.b	$43(a0),d1
		ext.w	d1
		bclr	#1,4(a0)
		btst	#1,4(a1)
		beq.s	loc_91980
		neg.w	d1
		bset	#1,4(a0)

loc_91980:
		add.w	d1,d0
		move.w	d0,$14(a0)
		rts
; End of function sub_91930


; =============== S U B R O U T I N E =======================================


sub_91988:

		moveq	#1,d0
		btst	#0,(V_int_run_count+3).w
		beq.s	loc_91994
		moveq	#3,d0

loc_91994:
		move.b	d0,$22(a0)
		rts
; End of function sub_91988

; ---------------------------------------------------------------------------
ObjDat3_9199A:	dc.l Map_ScaledArt
		dc.w $A500
		dc.w prio(5)
		dc.b $20
		dc.b $20
		dc.b 0
		dc.b 0
ObjDat3_919A6:	dc.l Map_EggRobo

		dc.w $8500
		dc.w prio(5)
		dc.b $14
		dc.b $18
		dc.b 1
		dc.b 6
ObjDat3_919B2:	dc.l Map_EggRobo
		dc.w $8500
		dc.w prio(5)
		dc.b 4
		dc.b 4
		dc.b 0
		dc.b 0
word_919BE:	dc.w prio(5)
		dc.b $C
		dc.b $10
		dc.b 6
		dc.b 0
word_919C4:	dc.w prio(5)
		dc.b $10
		dc.b $C
		dc.b 2
		dc.b 0
word_919CA:	dc.w prio(5)
		dc.b $20
		dc.b 4
		dc.b 7
		dc.b 0
ChildObjDat_919D0:dc.w 1

		dc.l loc_916A8
		dc.b $F4
		dc.b $1C
		dc.l loc_916EE
		dc.b $E4
		dc.b $FC
ChildObjDat_919DE:dc.w 0
		dc.l loc_91756
		dc.b $B
		dc.b $FC
ChildObjDat_919E6:dc.w 0
		dc.l loc_917C0
; ---------------------------------------------------------------------------

Obj_Spikebonker:

		jsr	Obj_WaitOffscreen.w
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_91A06(pc,d0.w),d1
		jsr	off_91A06(pc,d1.w)
		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------
off_91A06:	dc.w loc_91A0C-off_91A06

		dc.w loc_91A6A-off_91A06
		dc.w loc_91AC2-off_91A06
; ---------------------------------------------------------------------------

loc_91A0C:
		lea	ObjDat3_91C1A(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.w	#-$80,d0
		btst	#0,4(a0)
		beq.s	loc_91A24
		neg.w	d0

loc_91A24:
		move.w	d0,$18(a0)
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	d0,d1
		subq.w	#1,d0
		move.w	d0,$2E(a0)
		add.w	d1,d1
		subq.w	#1,d1
		move.w	d1,$3A(a0)
		move.l	#loc_91AB0,$34(a0)
		lea	ChildObjDat_91C2C(pc),a2
		jsr	CreateChild1_Normal.w
		move.w	#$40,d0
		move.w	d0,$3E(a0)
		move.w	d0,$1A(a0)
		move.w	#4,$40(a0)
		bclr	#0,$38(a0)
		rts
; ---------------------------------------------------------------------------

loc_91A6A:
		lea	(Player_1).w,a1
		jsr	Find_OtherObject.w
		cmpi.w	#$60,d2
		bhs.s	loc_91A88
		btst	#0,4(a0)
		beq.s	loc_91A84
		subq.w	#2,d0

loc_91A84:
		tst.w	d0
		beq.s	loc_91A9A

loc_91A88:
		jsr	Swing_UpAndDown.w
		jsr	MoveSprite2.w
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_91A9A:
		move.b	#4,5(a0)
		bset	#3,$38(a0)
		moveq	#-$76,d0
		jmp	Play_Sound_2.w
; ---------------------------------------------------------------------------

loc_91AB0:
		neg.w	$18(a0)
		bchg	#0,4(a0)
		move.w	$3A(a0),$2E(a0)
		rts
; ---------------------------------------------------------------------------

loc_91AC2:
		btst	#3,$38(a0)
		bne.s	locret_91AD0
		move.b	#2,5(a0)

locret_91AD0:
		rts
; ---------------------------------------------------------------------------

loc_91AD2:
		lea	word_91C26(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_91AEC,(a0)
		lea	ChildObjDat_91C34(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_91AEC:

		jsr	Refresh_ChildPositionAdjusted.w
		movea.w	$44(a0),a1
		move.b	$3C(a1),d0
		bne.s	loc_91B08
		movea.w	$46(a0),a2
		btst	#3,$38(a2)
		bne.s	loc_91B14

loc_91B08:
		subq.b	#8,d0
		move.b	d0,$3C(a1)
		jmp	Child_CheckParent.w
; ---------------------------------------------------------------------------

loc_91B14:
		move.l	#loc_91B3E,(a0)
		moveq	#-4,d0
		btst	#0,4(a0)
		beq.s	loc_91B26
		neg.w	d0

loc_91B26:
		move.w	d0,$18(a0)
		move.w	#$1F,$2E(a0)
		move.l	#loc_91B68,$34(a0)
		jmp	Child_CheckParent.w
; ---------------------------------------------------------------------------

loc_91B3E:

		move.w	$10(a0),d0
		add.w	$18(a0),d0
		move.w	d0,$10(a0)
		jsr	Obj_Wait.w
		jmp	Child_CheckParent.w
; ---------------------------------------------------------------------------

loc_91B56:
		move.l	#loc_91AEC,(a0)
		movea.w	$46(a0),a1
		bclr	#3,$38(a1)
		rts
; ---------------------------------------------------------------------------

loc_91B68:
		move.l	#loc_91B70,(a0)
		rts
; ---------------------------------------------------------------------------

loc_91B70:
		movea.w	$44(a0),a1
		move.b	$3C(a1),d0
		cmpi.b	#-$80,d0
		beq.s	loc_91B8A
		subq.b	#8,d0
		move.b	d0,$3C(a1)
		jmp	Child_CheckParent.w
; ---------------------------------------------------------------------------

loc_91B8A:
		move.l	#loc_91B3E,(a0)
		neg.w	$18(a0)
		move.w	#$1F,$2E(a0)
		move.l	#loc_91B56,$34(a0)
		jmp	Child_CheckParent.w
; ---------------------------------------------------------------------------

loc_91BA8:
		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_91BBC(pc,d0.w),d1
		jsr	off_91BBC(pc,d1.w)
		jmp	Child_DrawTouch_Sprite.w
; ---------------------------------------------------------------------------
off_91BBC:	dc.w loc_91BC0-off_91BBC

		dc.w loc_91BD4-off_91BBC
; ---------------------------------------------------------------------------

loc_91BC0:
		lea	word_91C26(pc),a1
		jsr	SetUp_ObjAttributes3.w
		movea.w	$46(a0),a1
		move.w	a0,$44(a1)
		rts
; ---------------------------------------------------------------------------

loc_91BD4:
		move.b	$3C(a0),d0
		bsr.w	sub_91BFA
		move.w	#prio(4),8(a0)
		addi.b	#$40,d0
		bpl.s	loc_91BEE
		move.w	#prio(5),8(a0)

loc_91BEE:
		lea	(AngleLookup_1).l,a1
		jmp	(MoveSprite_AngleXLookupOffset).l

; =============== S U B R O U T I N E =======================================


sub_91BFA:
		moveq	#0,d1

loc_91BFC:
		lea	byte_91C0E(pc,d1.w),a1
		cmp.b	(a1)+,d0
		bls.s	loc_91C08
		addq.w	#2,d1
		bra.s	loc_91BFC
; ---------------------------------------------------------------------------

loc_91C08:
		move.b	(a1),$22(a0)
		rts
; End of function sub_91BFA

; ---------------------------------------------------------------------------
byte_91C0E:	dc.b 0
		dc.b 1
		dc.b $30
		dc.b 1
		dc.b $50
		dc.b 2
		dc.b $B0
		dc.b 3
		dc.b $D0
		dc.b 2
		dc.b $FF
		dc.b 1
ObjDat3_91C1A:	dc.l Map_Spikebonker
		dc.w $A500
		dc.w prio(5)
		dc.b $10
		dc.b $14
		dc.b 0
		dc.b $1A
word_91C26:	dc.w prio(4)

		dc.b $10
		dc.b $10
		dc.b 1
		dc.b $9A
ChildObjDat_91C2C:dc.w 0
		dc.l loc_91AD2
		dc.w $14
ChildObjDat_91C34:dc.w 0
		dc.l loc_91BA8
		dc.w 0
; ---------------------------------------------------------------------------

Obj_Chainspike:
		jsr	Obj_WaitOffscreen.w
		tst.b	(End_Of_Level_Flag).w		; NAT: Check for end-of-level
		beq.s	.nope			; if no, skip
		move.l	#Obj_Explosion,(a0)	; turn this into an explosion
		move.b	#6,5(a0)
		bset	#7,$2A(a0)			; tell objects we are dead

.nope		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_91C56(pc,d0.w),d1
		jsr	off_91C56(pc,d1.w)
		jmp	Sprite_CheckDeleteTouch.w
; ---------------------------------------------------------------------------
off_91C56:	dc.w loc_91C62-off_91C56

		dc.w loc_91C9A-off_91C56
		dc.w loc_91CC2-off_91C56
		dc.w loc_91D0C-off_91C56
		dc.w loc_91D20-off_91C56
		dc.w loc_91D36-off_91C56
; ---------------------------------------------------------------------------

loc_91C62:
		lea	ObjDat3_91EDA(pc),a1
		jsr	SetUp_ObjAttributes.w
		move.w	#-$1200,d0
		move.w	#$180,d1
		btst	#0,4(a0)
		beq.s	loc_91C80
		neg.w	d0
		neg.w	d1

loc_91C80:
		move.w	d0,$3E(a0)
		move.w	d1,$3C(a0)
		move.l	#loc_91CA6,$34(a0)
		lea	ChildObjDat_91EEC(pc),a2
		jmp	CreateChild1_Normal.w
; ---------------------------------------------------------------------------

loc_91C9A:
		jsr	(sub_91E7E).l
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_91CA6:

		move.b	#4,5(a0)
		move.w	$3E(a0),$18(a0)
		move.w	$3C(a0),$40(a0)
		moveq	#$74,d0
		jmp	Play_Sound_2.w
; ---------------------------------------------------------------------------

loc_91CC2:
		jsr	(sub_91E7E).l
		move.w	$18(a0),d0
		moveq	#$C,d2
		move.w	$40(a0),d1
		bmi.s	loc_91CD6
		neg.w	d2

loc_91CD6:
		add.w	d2,d1
		move.w	d1,$40(a0)
		add.w	d1,d0
		smi	d2
		tst.w	$3E(a0)
		bpl.s	loc_91CE8
		not.b	d2

loc_91CE8:
		tst.b	d2
		bne.s	loc_91CF6
		move.w	d0,$18(a0)
		jmp	MoveSprite2.w
; ---------------------------------------------------------------------------

loc_91CF6:
		move.b	#2,5(a0)
		move.w	#$77,$2E(a0)
		neg.w	$3E(a0)
		neg.w	$3C(a0)
		rts
; ---------------------------------------------------------------------------

loc_91D0C:
		jmp	Animate_RawGetFaster.w
; ---------------------------------------------------------------------------

loc_91D12:
		move.b	#8,5(a0)
		bset	#1,$38(a0)
		rts
; ---------------------------------------------------------------------------

loc_91D20:
		btst	#1,$38(a0)
		bne.s	locret_91D34
		move.b	#$A,5(a0)
		move.b	#$1F,$39(a0)

locret_91D34:
		rts
; ---------------------------------------------------------------------------

loc_91D36:
		subq.b	#1,$39(a0)
		bpl.s	locret_91D50
		move.b	$3A(a0),5(a0)
		move.w	$26(a0),$2E(a0)
		move.l	#loc_91CA6,$34(a0)

locret_91D50:
		rts
; ---------------------------------------------------------------------------

loc_91D52:

		moveq	#0,d0
		move.b	5(a0),d0
		move.w	off_91D66(pc,d0.w),d1
		jsr	off_91D66(pc,d1.w)
		jmp	Child_DrawTouch_Sprite.w
; ---------------------------------------------------------------------------
off_91D66:	dc.w loc_91D6C-off_91D66

		dc.w loc_91D8C-off_91D66
		dc.w loc_91DE2-off_91D66
; ---------------------------------------------------------------------------

loc_91D6C:
		lea	word_91EE6(pc),a1
		jsr	SetUp_ObjAttributes3.w
		move.l	#loc_91E46,$34(a0)
		tst.b	$2C(a0)
		beq.s	locret_91D8A
		bset	#1,4(a0)

locret_91D8A:
		rts
; ---------------------------------------------------------------------------

loc_91D8C:
		jsr	Refresh_ChildPosition.w
		movea.w	$46(a0),a1
		btst	#1,$38(a1)
		beq.s	locret_91DE0
		btst	#1,4(a1)
		sne	d0
		tst.b	$2C(a0)
		beq.s	loc_91DAE
		not.b	d0

loc_91DAE:
		tst.b	d0
		bne.s	locret_91DE0
		move.b	#4,5(a0)
		move.b	#$18,$28(a0)
		move.b	#-1,$29(a0)
		moveq	#8,d0
		btst	#1,4(a1)
		beq.s	loc_91DD0
		neg.w	d0

loc_91DD0:
		move.w	d0,$1A(a0)
		move.w	$14(a0),$3A(a0)
		move.w	#$17,$2E(a0)

locret_91DE0:

		rts
; ---------------------------------------------------------------------------

loc_91DE2:
		move.w	$14(a0),d0
		add.w	$1A(a0),d0
		move.w	d0,$14(a0)
		bsr.w	sub_91EB0
		cmp.w	$3A(a0),d0
		beq.s	loc_91E22
		btst	#1,4(a0)
		sne	d0
		tst.w	$1A(a0)
		bmi.s	loc_91E08
		not.b	d0

loc_91E08:
		tst.b	d0
		beq.s	loc_91E1C
		jsr	ObjCheckFloorDist.w
		tst.w	d1
		bmi.s	loc_91E46
		tst.b	$28(a0)
		beq.s	loc_91E40

loc_91E1C:
		jmp	Obj_Wait.w
; ---------------------------------------------------------------------------

loc_91E22:
		move.b	#2,5(a0)
		move.b	#-$68,$28(a0)
		move.b	#2,$22(a0)
		movea.w	$46(a0),a1
		bclr	#1,$38(a1)
		rts
; ---------------------------------------------------------------------------

loc_91E40:
		move.b	#$18,$28(a0)

loc_91E46:

		move.w	#$5F,$2E(a0)
		move.w	$1A(a0),d0
		asr.w	#2,d0
		neg.w	d0
		move.w	d0,$1A(a0)
		rts
; ---------------------------------------------------------------------------

loc_91E5A:

		move.b	#-$68,$28(a0)
		move.b	#8,7(a0)
		move.b	#8,6(a0)
		move.l	#loc_91E72,(a0)

loc_91E72:
		jsr	Refresh_ChildPosition.w
		jmp	Child_AddToTouchList.w

; =============== S U B R O U T I N E =======================================


sub_91E7E:

		jsr	Find_SonicTails.w
		cmpi.w	#$10,d2
		bhs.s	locret_91EAE
		move.b	5(a0),$3A(a0)
		move.b	#6,5(a0)
		move.w	$2E(a0),$26(a0)
		move.l	#byte_91F06,$30(a0)
		move.l	#loc_91D12,$34(a0)
		addq.w	#4,sp

locret_91EAE:
		rts
; End of function sub_91E7E


; =============== S U B R O U T I N E =======================================


sub_91EB0:
		move.w	$3A(a0),d1
		sub.w	d0,d1
		bpl.s	loc_91EBA
		neg.w	d1

loc_91EBA:
		moveq	#0,d2
		moveq	#$18,d3
		moveq	#3,d4

loc_91EC0:
		add.w	d3,d2
		cmp.w	d2,d1
		bls.s	loc_91ECC
		dbf	d4,loc_91EC0
		moveq	#0,d4

loc_91ECC:
		move.b	RawAni_91ED4(pc,d4.w),$22(a0)
		rts
; End of function sub_91EB0

; ---------------------------------------------------------------------------
RawAni_91ED4:	dc.b	7,   6,	  5,   4,   2,	 0
ObjDat3_91EDA:	dc.l Map_Chainspike
		dc.w $A542
		dc.w prio(5)
		dc.b $18
		dc.b $C
		dc.b 0
		dc.b $1A
word_91EE6:	dc.w prio(5)
		dc.b 8
		dc.b $80
		dc.b 2
		dc.b $98
ChildObjDat_91EEC:dc.w 3
		dc.l loc_91D52
		dc.w $14
		dc.l loc_91D52
		dc.w $EC
		dc.l loc_91E5A
		dc.w $1400
		dc.l loc_91E5A
		dc.w $EC00
byte_91F06:	dc.b 5
		dc.b 6
		dc.b 0
		dc.b 3
		dc.b $FC
		dc.b $FF

; ===========================================================================
; ---------------------------------------------------------------------------
; Various custom routines
; ---------------------------------------------------------------------------
		include "General/ModeSetup.asm"
		include "General/Modes.asm"
		include "General/Mode HUD.asm"
		include "General/Render.asm"
		include "General/Debug.asm"

; ===========================================================================
; ---------------------------------------------------------------------------
; Various minigame files
; ---------------------------------------------------------------------------
		include "General/Mini/CNZ1.asm"
		include "General/Mini/AIZ2.asm"
		include "General/Mini/LBZ1.asm"
		include "General/Mini/HPZ.asm"

; ===========================================================================
; ---------------------------------------------------------------------------
; Range lists
; ---------------------------------------------------------------------------

LevelSpawnBoxes:dc.w Boxes_AIZ1-Ranges_AIZ1,Boxes_AIZ2-Ranges_AIZ2
		dc.w Boxes_HCZ1-Ranges_HCZ1,Boxes_HCZ2-Ranges_HCZ2
		dc.w Boxes_MGZ1-Ranges_MGZ1,Boxes_MGZ2-Ranges_MGZ2
		dc.w Boxes_CNZ1-Ranges_CNZ1,Boxes_CNZ2-Ranges_CNZ2
		dc.w Boxes_FBZ1-Ranges_FBZ1,Boxes_FBZ2-Ranges_FBZ2
		dc.w Boxes_ICZ1-Ranges_ICZ1,Boxes_ICZ2-Ranges_ICZ2
		dc.w Boxes_LBZ1-Ranges_LBZ1,Boxes_LBZ2-Ranges_LBZ2
		dc.w Boxes_MHZ1-Ranges_MHZ1,Boxes_MHZ2-Ranges_MHZ2
		dc.w Boxes_SOZ1-Ranges_SOZ1,Boxes_SOZ2-Ranges_SOZ2
		dc.w Boxes_LRZ1-Ranges_LRZ1,Boxes_LRZ2-Ranges_LRZ2
		dc.w Boxes_SSZ-Ranges_SSZ,Boxes_SSZ-Ranges_SSZ
		dc.w Boxes_DEZ1-Ranges_DEZ1,Boxes_DEZ2-Ranges_DEZ2
		dc.l 0, 0
	if oazflag=1
		dc.w Boxes_OAZ1-Ranges_OAZ1, Boxes_OAZ2-Ranges_OAZ2		; See "OAZ/Includes.asm"
	else
		dc.w 0, 0
	endif
		dc.w [14] 0
		dc.w 0, Boxes_HPZ-Ranges_HPZ

LevelRanges:	dc.l Ranges_AIZ1, Ranges_AIZ2
		dc.l Ranges_HCZ1, Ranges_HCZ2
		dc.l Ranges_MGZ1, Ranges_MGZ2
		dc.l Ranges_CNZ1, Ranges_CNZ2
		dc.l Ranges_FBZ1, Ranges_FBZ2
		dc.l Ranges_ICZ1, Ranges_ICZ2
		dc.l Ranges_LBZ1, Ranges_LBZ2
		dc.l Ranges_MHZ1, Ranges_MHZ2
		dc.l Ranges_SOZ1, Ranges_SOZ2
		dc.l Ranges_LRZ1, Ranges_LRZ2
		dc.l Ranges_SSZ, Ranges_SSZ
		dc.l Ranges_DEZ1, Ranges_DEZ2
		dc.l 0, 0, 0, 0
	if oazflag=1
		dc.l Ranges_OAZ1, Ranges_OAZ2		; See "OAZ/Includes.asm"
	else
		dc.l 0, 0
	endif
		dc.l [14] 0
		dc.l 0, Ranges_HPZ
		dc.l Ranges_Empty
; ===========================================================================

	if oazflag=0
Oaz1_Palette:
Oaz2_Palette:
	dc.b "tHeRe lIEs A seCret UnTOLd, hidDeN UnDEr a WaTerFAll, IN acT4"
	even
	endif
Ranges_AIZ1:	binclude "Levels/AIZ/Directions/1a.bin"
Boxes_AIZ1:	binclude "Levels/AIZ/Directions/1b.bin"

Ranges_AIZA:	binclude "Levels/AIZ/Directions/aa.bin"
Boxes_AIZA:	binclude "Levels/AIZ/Directions/ab.bin"

Ranges_AIZ2:	binclude "Levels/AIZ/Directions/2a.bin"
Boxes_AIZ2:	binclude "Levels/AIZ/Directions/2b.bin"

Ranges_AIZS:	binclude "Levels/AIZ/Directions/ba.bin"
Boxes_AIZS:	binclude "Levels/AIZ/Directions/bb.bin"

Ranges_HCZ1:	binclude "Levels/HCZ/Directions/1a.bin"
Boxes_HCZ1:	binclude "Levels/HCZ/Directions/1b.bin"

Ranges_HCZ2:	binclude "Levels/HCZ/Directions/2a.bin"
Boxes_HCZ2:	binclude "Levels/HCZ/Directions/2b.bin"

Ranges_MGZ1:	binclude "Levels/MGZ/Directions/1a.bin"
Boxes_MGZ1:	binclude "Levels/MGZ/Directions/1b.bin"

Ranges_MGZS:	binclude "Levels/MGZ/Directions/sa.bin"
Boxes_MGZS:	binclude "Levels/MGZ/Directions/sb.bin"

Ranges_MGZ2:	binclude "Levels/MGZ/Directions/2a.bin"
Boxes_MGZ2:	binclude "Levels/MGZ/Directions/2b.bin"

Ranges_MGZA:	binclude "Levels/MGZ/Directions/aa.bin"
Boxes_MGZA:	binclude "Levels/MGZ/Directions/ab.bin"

Ranges_CNZ1:	binclude "Levels/CNZ/Directions/1a.bin"
Boxes_CNZ1:	binclude "Levels/CNZ/Directions/1b.bin"

Ranges_CNZ2:	binclude "Levels/CNZ/Directions/2a.bin"
Boxes_CNZ2:	binclude "Levels/CNZ/Directions/2b.bin"

Ranges_CNZB:	binclude "Levels/CNZ/Directions/ba.bin"
Boxes_CNZB:	binclude "Levels/CNZ/Directions/bb.bin"

Ranges_FBZ1:	binclude "Levels/FBZ/Directions/1a.bin"
Boxes_FBZ1:	binclude "Levels/FBZ/Directions/1b.bin"

Ranges_FBZA:	binclude "Levels/FBZ/Directions/aa.bin"
Boxes_FBZA:	binclude "Levels/FBZ/Directions/ab.bin"

Ranges_FBZ2:	binclude "Levels/FBZ/Directions/2a.bin"
Boxes_FBZ2:	binclude "Levels/FBZ/Directions/2b.bin"

Ranges_FBZB:	binclude "Levels/FBZ/Directions/ba.bin"
Boxes_FBZB:	binclude "Levels/FBZ/Directions/bb.bin"

Ranges_ICZ1:	binclude "Levels/ICZ/Directions/1a.bin"
Boxes_ICZ1:	binclude "Levels/ICZ/Directions/1b.bin"

Ranges_ICZA:	binclude "Levels/ICZ/Directions/aa.bin"
Boxes_ICZA:	binclude "Levels/ICZ/Directions/ab.bin"

Ranges_ICZ2:	binclude "Levels/ICZ/Directions/2a.bin"
Boxes_ICZ2:	binclude "Levels/ICZ/Directions/2b.bin"

Ranges_LBZ1:	binclude "Levels/LBZ/Directions/1a.bin"
Boxes_LBZ1:	binclude "Levels/LBZ/Directions/1b.bin"

Ranges_LBZK:	binclude "Levels/LBZ/Directions/ka.bin"
Boxes_LBZK:	binclude "Levels/LBZ/Directions/kb.bin"

Ranges_LBZ2:	binclude "Levels/LBZ/Directions/2a.bin"
Boxes_LBZ2:	binclude "Levels/LBZ/Directions/2b.bin"

Ranges_LBZB:	binclude "Levels/LBZ/Directions/ba.bin"
Boxes_LBZB:	binclude "Levels/LBZ/Directions/bb.bin"

Ranges_MHZ2:	binclude "Levels/MHZ/Directions/2a.bin"
Boxes_MHZ2:	binclude "Levels/MHZ/Directions/2b.bin"

Ranges_MHZ1:	binclude "Levels/MHZ/Directions/1a.bin"
Boxes_MHZ1:	binclude "Levels/MHZ/Directions/1b.bin"

Ranges_SOZ1:	binclude "Levels/SOZ/Directions/1a.bin"
Boxes_SOZ1:	binclude "Levels/SOZ/Directions/1b.bin"

Ranges_SOZ2:	binclude "Levels/SOZ/Directions/2a.bin"
Boxes_SOZ2:	binclude "Levels/SOZ/Directions/2b.bin"

Ranges_SOZS:	binclude "Levels/SOZ/Directions/ta.bin"
Boxes_SOZS:	binclude "Levels/SOZ/Directions/tb.bin"

Ranges_SOZB:	binclude "Levels/SOZ/Directions/ba.bin"
Boxes_SOZB:	binclude "Levels/SOZ/Directions/bb.bin"

Ranges_LRZ1:	binclude "Levels/LRZ/Directions/1a.bin"
Boxes_LRZ1:	binclude "Levels/LRZ/Directions/1b.bin"

Ranges_LRZ2:	binclude "Levels/LRZ/Directions/2a.bin"
Boxes_LRZ2:	binclude "Levels/LRZ/Directions/2b.bin"

Ranges_DEZ1:	binclude "Levels/DEZ/Directions/1a.bin"
Boxes_DEZ1:	binclude "Levels/DEZ/Directions/1b.bin"

Ranges_DEZ2:	binclude "Levels/DEZ/Directions/2a.bin"
Boxes_DEZ2:	binclude "Levels/DEZ/Directions/2b.bin"

Ranges_HPZ:	binclude "Levels/HPZ/Directions/1a.bin"
Boxes_HPZ:	binclude "Levels/HPZ/Directions/1b.bin"

Ranges_SSZ:	binclude "Levels/SSZ/Directions/1a.bin"
Ranges_Empty equ	*-$A
Boxes_SSZ:	binclude "Levels/SSZ/Directions/1b.bin"

	if oazflag=1
Ranges_OAZ1:	binclude "Levels/OAZ/Data/Act 1/Directions/1a.bin"
Boxes_OAZ1:	binclude "Levels/OAZ/Data/Act 1/Directions/1b.bin"

Ranges_OAZ2:	binclude "Levels/OAZ/Data/Act 2/Directions/2a.bin"
Boxes_OAZ2:	binclude "Levels/OAZ/Data/Act 2/Directions/2b.bin"
	endif
; ===========================================================================
; ---------------------------------------------------------------------------
; swaps stuff
; ---------------------------------------------------------------------------
		include	"General/Swaps.asm"

; ===========================================================================
; ---------------------------------------------------------------------------
; layout fixes
; ---------------------------------------------------------------------------
		include	"Levels/LayoutFixes.asm"

; ===========================================================================
; ---------------------------------------------------------------------------
; Ominous Alcazar Zone (a.k.a. Vertigo Castel Zone) includes
; ---------------------------------------------------------------------------

		include	"Levels\OAZ\Includes.asm"

; ===========================================================================
; ---------------------------------------------------------------------------
; SEGA PCM Sample Include
; ---------------------------------------------------------------------------

SegaPCM:	binclude "Screen SEGA\SEGA PCM.wav",$3A
SegaPCM_End:	even

; ===========================================================================

; macro for declaring a "main level load block" (MLLB)
levartptrs macro plc1,plc2,palette,art1,art2,map16x161,map16x162,map128x1281,map128x1282
	dc.l (plc1<<24)|art1
	dc.l (plc2<<24)|art2
	dc.l (palette<<24)|map16x161
	dc.l (palette<<24)|map16x162
	dc.l map128x1281
	dc.l map128x1282
    endm

; 1st PLC, 1st 8x8 data, 2nd PLC, 2nd 8x8 data
; pallete, 1st 16x16 data, palette (unused), 2nd 16x16 data
; 1st 128x128 data, 2nd 128x128 data

;	1st PLC		palette                          2nd 8x8 data                                     2nd 16x16 data                                      2nd 128x128 data
;		2nd PLC           1st 8x8 data                                    1st 16x16 data                                    1st 128x128 data

LevelLoadBlock:
	levartptrs $B,  $B,  $A,  AIZ1_8x8_Primary_KosM, AIZ1_8x8_Secondary_KosM, AIZ1_16x16_Primary_Kos, AIZ1_16x16_Secondary_Kos, AIZ1_128x128_Kos,         AIZ1_128x128_Kos			; ANGEL ISLAND ZONE ACT 1
	levartptrs $C,  $C,  $B,  AIZ2_8x8_Primary_KosM, AIZ2_8x8_Secondary_KosM, AIZ2_16x16_Primary_Kos, AIZ2_16x16_Secondary_Kos, AIZ2_128x128_Kos,         AIZ2_128x128_Kos			; ANGEL ISLAND ZONE ACT 2
	levartptrs $E,  $F,  $C,  HCZ_8x8_Primary_KosM,  HCZ1_8x8_Secondary_KosM, HCZ_16x16_Primary_Kos,  HCZ1_16x16_Secondary_Kos, HCZ_128x128_Primary_Kos,  HCZ1_128x128_Secondary_Kos	; HYDROCITY ZONE ACT 1
	levartptrs $10, $11, $D,  HCZ_8x8_Primary_KosM,  HCZ2_8x8_Secondary_KosM, HCZ_16x16_Primary_Kos,  HCZ2_16x16_Secondary_Kos, HCZ_128x128_Primary_Kos,  HCZ2_128x128_Secondary_Kos	; HYDROCITY ZONE ACT 2
	levartptrs $12, $12, $E,  MGZ_8x8_Primary_KosM,  MGZ1_8x8_Secondary_KosM, MGZ_16x16_Primary_Kos,  MGZ1_16x16_Secondary_Kos, MGZ_128x128_Primary_Kos,  MGZ1_128x128_Secondary_Kos	; MARBLE GARDEN ZONE ACT 1
	levartptrs $14, $14, $F,  MGZ_8x8_Primary_KosM,  MGZ2_8x8_Secondary_KosM, MGZ_16x16_Primary_Kos,  MGZ2_16x16_Secondary_Kos, MGZ_128x128_Primary_Kos,  MGZ2_128x128_Secondary_Kos	; MARBLE GARDEN ZONE ACT 2
	levartptrs $16, $16, $10, CNZ_8x8_KosM,          CNZ_8x8_KosM,            CNZ_16x16_Kos,          CNZ_16x16_Kos,            CNZ_128x128_Kos,          CNZ_128x128_Kos			; CARNIVAL NIGHT ZONE ACT 1
	levartptrs $16, $16, $11, CNZ_8x8_KosM,          CNZ_8x8_KosM,            CNZ_16x16_Kos,          CNZ_16x16_Kos,            CNZ_128x128_Kos,          CNZ_128x128_Kos			; CARNIVAL NIGHT ZONE ACT 2
	levartptrs $1A, $1A, $12, ArtKosM_FBZ,           ArtKosM_FBZ,             FBZ_16x16_Kos,          FBZ_16x16_Kos,            FBZ_128x128_Kos,          FBZ_128x128_Kos			; FLYING BATTERY ZONE ACT 1
	levartptrs $1C, $1C, $13, ArtKosM_FBZ,           ArtKosM_FBZ,             FBZ_16x16_Kos,          FBZ_16x16_Kos,            FBZ_128x128_Kos,          FBZ_128x128_Kos			; FLYING BATTERY ZONE ACT 2
	levartptrs $1E, $1E, $14, ICZ_8x8_Primary_KosM,  ICZ1_8x8_Secondary_KosM, ICZ_16x16_Primary_Kos,  ICZ1_16x16_Secondary_Kos, ICZ_128x128_Primary_Kos,  ICZ1_128x128_Secondary_Kos	; ICE CAP ZONE ACT 1
	levartptrs $20, $20, $15, ICZ_8x8_Primary_KosM,  ICZ2_8x8_Secondary_KosM, ICZ_16x16_Primary_Kos,  ICZ2_16x16_Secondary_Kos, ICZ_128x128_Primary_Kos,  ICZ2_128x128_Secondary_Kos	; ICE CAP ZONE ACT 2
	levartptrs $22, $22, $16, LBZ_8x8_Primary_KosM,  LBZ1_8x8_Secondary_KosM, LBZ_16x16_Primary_Kos,  LBZ1_16x16_Secondary_Kos, LBZ1_128x128_Kos,         LBZ1_128x128_Kos			; LAUNCH BASE ZONE ACT 1
	levartptrs $24, $25, $17, LBZ_8x8_Primary_KosM,  LBZ2_8x8_Secondary_KosM, LBZ_16x16_Primary_Kos,  LBZ2_16x16_Secondary_Kos, LBZ2_128x128_Kos,         LBZ2_128x128_Kos			; LAUNCH BASE ZONE ACT 2
	levartptrs $26, $26, $18, ArtKosM_MHZ_Primary,   ArtKosM_MHZ_Secondary,   MHZ_16x16_Primary_Kos,  MHZ_16x16_Secondary_Kos,  MHZ_128x128_Primary_Kos,  MHZ_128x128_Secondary_Kos		; MUSHROOM HILL ZONE ACT 1
	levartptrs $28, $28, $19, ArtKosM_MHZ_Primary,   ArtKosM_MHZ_Secondary,   MHZ_16x16_Primary_Kos,  MHZ_16x16_Secondary_Kos,  MHZ_128x128_Primary_Kos,  MHZ_128x128_Secondary_Kos		; MUSHROOM HILL ZONE ACT 2
	levartptrs $2A, $2A, $1A, ArtKosM_SOZ_Primary,   ArtKosM_SOZ1_Secondary,  SOZ_16x16_Primary_Kos,  SOZ1_16x16_Secondary_Kos, SOZ_128x128_Kos,          SOZ_128x128_Kos			; SANDOPOLIS ZONE ACT 1
	levartptrs $2C, $2C, $1B, ArtKosM_SOZ_Primary,   ArtKosM_SOZ2_Secondary,  SOZ_16x16_Primary_Kos,  SOZ2_16x16_Secondary_Kos, SOZ_128x128_Kos,          SOZ_128x128_Kos			; SANDOPOLIS ZONE ACT 2
	levartptrs $2E, $2F, $1C, ArtKosM_LRZ_Primary,   ArtKosM_LRZ1_Secondary,  LRZ_16x16_Primary_Kos,  LRZ1_16x16_Secondary_Kos, LRZ_128x128_Primary_Kos,  LRZ1_128x128_Secondary_Kos	; LAVA REEF ZONE ACT 1
	levartptrs $30, $30, $1D, ArtKosM_LRZ_Primary,   ArtKosM_LRZ2_Secondary,  LRZ_16x16_Primary_Kos,  LRZ2_16x16_Secondary_Kos, LRZ_128x128_Primary_Kos,  LRZ2_128x128_Secondary_Kos	; LAVA REEF ZONE ACT 2
	levartptrs $32, $32, $1E, ArtKosM_SSZ1_Primary,  ArtKosM_SSZ1_Secondary,  SSZ1_16x16_Primary_Kos, SSZ1_16x16_Secondary_Kos, SSZ1_128x128_Primary_Kos, SSZ1_128x128_Secondary_Kos	; SKY SANCTUARY ZONE (SONIC/TAILS)
	levartptrs $34, $34, $1F, ArtKosM_SSZ2,          ArtKosM_SSZ2,            SSZ2_16x16_Kos,         SSZ2_16x16_Kos,           SSZ2_128x128_Kos,         SSZ2_128x128_Kos			; SKY SANCTUARY ZONE (KNUCKLES)
	levartptrs $36, $36, $20, ArtKosM_DEZ_Primary,   ArtKosM_DEZ1_Secondary,  DEZ_16x16_Primary_Kos,  DEZ1_16x16_Secondary_Kos, DEZ_128x128_Kos,          DEZ_128x128_Kos			; DEATH EGG ZONE ACT 1
	levartptrs $38, $38, $21, ArtKosM_DEZ_Primary,   ArtKosM_DEZ2_Secondary,  DEZ_16x16_Primary_Kos,  DEZ2_16x16_Secondary_Kos, DEZ_128x128_Kos,          DEZ_128x128_Kos			; DEATH EGG ZONE ACT 2
	levartptrs $3A, $3A, $22, ArtKosM_DDZ,           ArtKosM_DDZ,             DDZ_16x16_Kos,          DDZ_16x16_Kos,            DDZ_128x128_Kos,          DDZ_128x128_Kos			; DOOMSDAY ZONE
	levartptrs $3C, $3C, $23, ArtKosM_DDZ,           ArtKosM_DDZ,             DDZ_16x16_Kos,          DDZ_16x16_Kos,            DDZ_128x128_Kos,          DDZ_128x128_Kos			; DOOMSDAY ZONE (unused)

	levartptrs $B,  $B,  $2A, AIZ1_8x8_Primary_KosM, AIZ1_8x8_MainLevel_KosM, AIZ1_16x16_Primary_Kos, AIZ1_16x16_MainLevel_Kos, AIZ1_128x128_Kos,         AIZ1_128x128_Kos			; SONIC/TAILS INTRO
	levartptrs $40, $40, $25, ArtKosM_SSZ2,          ArtKosM_SSZ2,            SSZ2_16x16_Kos,         SSZ2_16x16_Kos,           SSZ2_128x128_Kos,         SSZ2_128x128_Kos			; SONIC/TAILS ENDING

	if oazflag=1
	levartptrs $41, $41, $26, OAZ1_8x8_KosM, OAZ1_8x8_KosM, OAZ1_16x16_Kos, OAZ1_16x16_Kos, OAZ1_128x128_Kos, OAZ1_128x128_Kos			; OAZ 1
	levartptrs $42, $42, $27, OAZ2_8x8_KosM, OAZ2_8x8_KosM, OAZ2_16x16_Kos, OAZ2_16x16_Kos, OAZ2_128x128_Kos, OAZ2_128x128_Kos			; OAZ 2
	else
	levartptrs $B,  $B,  $2A, AIZ1_8x8_Primary_KosM, AIZ1_8x8_MainLevel_KosM, AIZ1_16x16_Primary_Kos, AIZ1_16x16_MainLevel_Kos, AIZ1_128x128_Kos,         AIZ1_128x128_Kos			; SONIC/TAILS INTRO
	levartptrs $40, $40, $25, ArtKosM_SSZ2,          ArtKosM_SSZ2,            SSZ2_16x16_Kos,         SSZ2_16x16_Kos,           SSZ2_128x128_Kos,         SSZ2_128x128_Kos			; SONIC/TAILS ENDING
	endif
	levartptrs $43, $43, $28, BPZ_8x8_KosM,          BPZ_8x8_KosM,            BPZ_16x16_Kos,          BPZ_16x16_Kos,            BPZ_128x128_Kos,          BPZ_128x128_Kos			; BALLOON PARK ZONE
	levartptrs $43, $43, $29, BPZ_8x8_KosM,          BPZ_8x8_KosM,            BPZ_16x16_Kos,          BPZ_16x16_Kos,            BPZ_128x128_Kos,          BPZ_128x128_Kos			; BALLOON PARK ZONE (unused)
	levartptrs $44, $44, $34, DPZ_8x8_KosM,          DPZ_8x8_KosM,            DPZ_16x16_Kos,          DPZ_16x16_Kos,            DPZ_128x128_Kos,          DPZ_128x128_Kos			; DESERT PALACE ZONE
	levartptrs $44, $44, $34, DPZ_8x8_KosM,          DPZ_8x8_KosM,            DPZ_16x16_Kos,          DPZ_16x16_Kos,            DPZ_128x128_Kos,          DPZ_128x128_Kos			; DESERT PALACE ZONE (unused)
	levartptrs $45, $45, $35, CGZ_8x8_KosM,          CGZ_8x8_KosM,            CGZ_16x16_Kos,          CGZ_16x16_Kos,            CGZ_128x128_Kos,          CGZ_128x128_Kos			; CHROME GADGET ZONE
	levartptrs $45, $45, $35, CGZ_8x8_KosM,          CGZ_8x8_KosM,            CGZ_16x16_Kos,          CGZ_16x16_Kos,            CGZ_128x128_Kos,          CGZ_128x128_Kos			; CHROME GADGET ZONE (unused)
	levartptrs $46, $46, $36, EMZ_8x8_KosM,          EMZ_8x8_KosM,            EMZ_16x16_Kos,          EMZ_16x16_Kos,            EMZ_128x128_Kos,          EMZ_128x128_Kos			; ENDLESS MINE ZONE
	levartptrs $46, $46, $36, EMZ_8x8_KosM,          EMZ_8x8_KosM,            EMZ_16x16_Kos,          EMZ_16x16_Kos,            EMZ_128x128_Kos,          EMZ_128x128_Kos			; ENDLESS MINE ZONE (unused)

	levartptrs $47, $47, $33, Gumball_8x8_KosM,      Gumball_8x8_KosM,        Gumball_16x16_Kos,      Gumball_16x16_Kos,        Gumball_128x128_Kos,      Gumball_128x128_Kos		; GUMBALL
	levartptrs $47, $47, $33, Gumball_8x8_KosM,      Gumball_8x8_KosM,        Gumball_16x16_Kos,      Gumball_16x16_Kos,        Gumball_128x128_Kos,      Gumball_128x128_Kos		; GUMBALL (unused)
	levartptrs $50, $50, $37, ArtKosM_Pachinko,      ArtKosM_Pachinko,        Pachinko_16x16_Kos,     Pachinko_16x16_Kos,       Pachinko_128x128_Kos,     Pachinko_128x128_Kos		; PACHINKO
	levartptrs $50, $50, $37, ArtKosM_Pachinko,      ArtKosM_Pachinko,        Pachinko_16x16_Kos,     Pachinko_16x16_Kos,       Pachinko_128x128_Kos,     Pachinko_128x128_Kos		; PACHINKO (unused)
	levartptrs $51, $51, $38, ArtKosM_Slots,         ArtKosM_Slots,           Slots_16x16_Kos,        Slots_16x16_Kos,          Slots_128x128_Kos,        Slots_128x128_Kos			; SLOTS
	levartptrs $51, $51, $38, ArtKosM_Slots,         ArtKosM_Slots,           Slots_16x16_Kos,        Slots_16x16_Kos,          Slots_128x128_Kos,        Slots_128x128_Kos			; SLOTS (unused)

	levartptrs $48, $48, $3E, ArtKosM_HPZ_Primary,   ArtKosM_LRZ3_Secondary,  HPZ_16x16_Primary_Kos,  LRZ3_16x16_Secondary_Kos, HPZ_128x128_Primary_Kos,  LRZ3_128x128_Secondary_Kos	; LAVA REEF ZONE BOSS
	levartptrs $48, $48, $3F, ArtKosM_HPZ_Primary,   ArtKosM_HPZ_Secondary,   HPZ_16x16_Primary_Kos,  HPZ_16x16_Secondary_Kos,  HPZ_128x128_Primary_Kos,  HPZ_128x128_Secondary_Kos		; HIDDEN PALACE ZONE
	levartptrs $4C, $4C, $40, ArtKosM_DEZ3,          ArtKosM_DEZ3,            DEZ3_16x16_Kos,         DEZ3_16x16_Kos,           DEZ3_128x128_Kos,         DEZ3_128x128_Kos			; SONIC/TAILS FINAL BOSS
	levartptrs $48, $48, $3F, ArtKosM_HPZ_Primary,   ArtKosM_HPZ_Secondary,   HPZ_16x16_Primary_Kos,  HPZ_16x16_Secondary_Kos,  HPZ_128x128_Primary_Kos,  HPZ_128x128_Secondary_Kos		; SPECIAL STAGE HUB

; ---------------------------------------------------------------------------
	include "General/PLC.asm"

DebugMode:
		rts

Sprite_Listing3:include "Levels/Misc/Object list - Sonic 3.asm"
Sprite_ListingK:include "Levels/Misc/Object list - Sonic & Knuckles.asm"

AngleArray:	binclude "Levels/Misc/angles.bin"
	even

HeightMaps:	binclude "Levels/Misc/Height Maps.bin"
	even
HeightMapsRot:	binclude "Levels/Misc/Height Maps Rotated.bin"
	even

SolidIndexes:	dc.l Solid_AIZ1
		dc.l Solid_AIZ2
		dc.l Solid_HCZ1
		dc.l Solid_HCZ2
		dc.l Solid_MGZ1
		dc.l Solid_MGZ2
		dc.l Solid_CNZ
		dc.l Solid_CNZ
		dc.l Solid_FBZ
		dc.l Solid_FBZ
		dc.l Solid_ICZ1
		dc.l Solid_ICZ2
		dc.l Solid_LBZ1
		dc.l Solid_LBZ2
		dc.l Solid_MHZ
		dc.l Solid_MHZ
		dc.l Solid_SOZ
		dc.l Solid_SOZ
		dc.l Solid_LRZ1
		dc.l Solid_LRZ2
		dc.l Solid_SSZ1
		dc.l Solid_SSZ2
		dc.l Solid_DEZ
		dc.l Solid_DEZ
		dc.l Solid_DDZ
		dc.l Solid_DDZ
		dc.l Solid_Pachinko_Special
		dc.l Solid_Pachinko_Special
	if oazflag=1
		dc.l OAZ1_Collision		; See "OAZ/Inludes.asm"
		dc.l OAZ2_Collision		; See "OAZ/Inludes.asm"
	else
		dc.l 0,0
	endif
		dc.l Solid_BPZ
		dc.l Solid_BPZ
		dc.l Solid_DPZ
		dc.l Solid_DPZ
		dc.l Solid_CGZ
		dc.l Solid_CGZ
		dc.l Solid_EMZ
		dc.l Solid_EMZ
		dc.l Solid_Gumball_Special
		dc.l Solid_Gumball_Special
		dc.l Solid_Pachinko_Special
		dc.l Solid_Pachinko_Special
		dc.l Solid_Slots_Special
		dc.l Solid_Slots_Special
		dc.l Solid_LRZBoss
		dc.l Solid_HPZ
		dc.l Solid_HPZ
		dc.l Solid_HPZ

Solid_AIZ1:		binclude "Levels/AIZ/Collision/1.bin.il"
	even
Solid_AIZ2:		binclude "Levels/AIZ/Collision/2.bin.il"
	even
Solid_HCZ1:		binclude "Levels/HCZ/Collision/1.bin.il"
	even
Solid_HCZ2:		binclude "Levels/HCZ/Collision/2.bin.il"
	even
Solid_MGZ1:		binclude "Levels/MGZ/Collision/1.bin.il"
	even
Solid_MGZ2:		binclude "Levels/MGZ/Collision/2.bin.il"
	even
Solid_CNZ:		binclude "Levels/CNZ/Collision/1.bin.il"
	even
Solid_ICZ1:		binclude "Levels/ICZ/Collision/1.bin.il"
	even
Solid_ICZ2:		binclude "Levels/ICZ/Collision/2.bin.il"
	even
Solid_LBZ1:		binclude "Levels/LBZ/Collision/1.bin.il"
	even
Solid_LBZ2:		binclude "Levels/LBZ/Collision/2.bin.il"
	even
Solid_ALZ:	;	binclude "Levels/ALZ/Collision/1.bin"
	even
Solid_BPZ:	;	binclude "Levels/BPZ/Collision/1.bin"
	even
Solid_DPZ:	;	binclude "Levels/DPZ/Collision/1.bin"
	even
Solid_CGZ:	;	binclude "Levels/CGZ/Collision/1.bin"
	even
Solid_EMZ:	;	binclude "Levels/EMZ/Collision/1.bin"
	even
Solid_Gumball_Special:;	binclude "Levels/Gumball/Collision/1.bin"
	even
Layout_ALZ:	;	binclude "Levels/ALZ/Layout/1.bin"
	even
Layout_BPZ:	;	binclude "Levels/BPZ/Layout/1.bin"
	even
Layout_DPZ:	;	binclude "Levels/DPZ/Layout/1.bin"
	even
Layout_CGZ:	;	binclude "Levels/CGZ/Layout/1.bin"
	even
Layout_EMZ:	;	binclude "Levels/EMZ/Layout/1.bin"
	even
Layout_Gumball_Special:;binclude "Levels/Gumball/Layout/1.bin"
	even
Solid_FBZ:		binclude "Levels/FBZ/Collision/1.bin"
	even
Solid_MHZ:		binclude "Levels/MHZ/Collision/1.bin"
	even
Solid_Unknown:		binclude "Levels/Misc/Unknown Collision.bin"
	even
Solid_SOZ:		binclude "Levels/SOZ/Collision/1.bin"
	even
Solid_LRZ1:		binclude "Levels/LRZ/Collision/1.bin"
	even
Solid_LRZ2:		binclude "Levels/LRZ/Collision/2.bin"
	even
Solid_SSZ1:		binclude "Levels/SSZ/Collision/1.bin"
	even
Solid_SSZ2:		binclude "Levels/SSZ/Collision/2.bin"
	even
Solid_DEZ:		binclude "Levels/DEZ/Collision/1.bin"
	even
Solid_DDZ:		binclude "Levels/DDZ/Collision/1.bin"
	even
Solid_Pachinko_Special:;binclude "Levels/Pachinko/Collision/1.bin"
	even
Solid_Slots_Special:;	binclude "Levels/Slots/Collision/1.bin"
	even
Solid_LRZBoss:		binclude "Levels/LRZ/Collision/3.bin"
	even
Solid_HPZ:		binclude "Levels/HPZ/Collision/1.bin"
	even
LevelPtrs:	dc.l Layout_AIZ1	; 0
		dc.l Layout_AIZ2	; 1
		dc.l Layout_HCZ1	; 2
		dc.l Layout_HCZ2	; 3
		dc.l Layout_MGZ1	; 4
		dc.l Layout_MGZ2	; 5
		dc.l Layout_CNZ1	; 6
		dc.l Layout_CNZ2	; 7
		dc.l Layout_FBZ1	; 8
		dc.l Layout_FBZ2	; 9
		dc.l Layout_ICZ1	; 10
		dc.l Layout_ICZ2	; 11
		dc.l Layout_LBZ1	; 12
		dc.l Layout_LBZ2	; 13
		dc.l Layout_MHZ1	; 14
		dc.l Layout_MHZ2	; 15
		dc.l Layout_SOZ1	; 16
		dc.l Layout_SOZ2	; 17
		dc.l Layout_LRZ1	; 18
		dc.l Layout_LRZ2	; 19
		dc.l Layout_SSZ1	; 20
		dc.l Layout_SSZ2	; 21
		dc.l Layout_DEZ1	; 22
		dc.l Layout_DEZ2	; 23
		dc.l Layout_DDZ		; 24
		dc.l Layout_DDZ		; 25
		dc.l Layout_SSZ2	; 26
		dc.l Layout_SSZ2	; 27
	if oazflag=1
		dc.l OAZ1_Layout	; 28	See "OAZ/Includes.asm"
		dc.l OAZ2_Layout	; 29	See "OAZ/Includes.asm"
	else
		dc.l 0,0
	endif
		dc.l Layout_BPZ		; 30
		dc.l Layout_BPZ		; 31
		dc.l Layout_DPZ		; 32
		dc.l Layout_DPZ		; 33
		dc.l Layout_CGZ		; 34
		dc.l Layout_CGZ		; 35
		dc.l Layout_EMZ		; 36
		dc.l Layout_EMZ		; 37
		dc.l Layout_Gumball_Special; 38
		dc.l Layout_Gumball_Special; 39
		dc.l Layout_Pachinko_Special; 40
		dc.l Layout_Pachinko_Special; 41
		dc.l Layout_Slots_Special; 42
		dc.l Layout_Slots_Special; 43
		dc.l Layout_LRZBoss	; 44
		dc.l Layout_HPZ		; 45
		dc.l Layout_DEZBoss	; 46
		dc.l Layout_HPZ		; 47
Layout_AIZ1:	binclude "Levels/AIZ/Layout/1.kos"
	even
Layout_AIZ2:	binclude "Levels/AIZ/Layout/2.kos"
	even
Layout_HCZ1:	binclude "Levels/HCZ/Layout/1.kos"
	even
Layout_HCZ2:	binclude "Levels/HCZ/Layout/2.kos"
	even
Layout_MGZ1:	binclude "Levels/MGZ/Layout/1.kos"
	even
Layout_MGZ2:	binclude "Levels/MGZ/Layout/2.kos"
	even
Layout_CNZ1:	binclude "Levels/CNZ/Layout/1.kos"
	even
Layout_CNZ2:	binclude "Levels/CNZ/Layout/2.kos"
	even
Layout_ICZ1:	binclude "Levels/ICZ/Layout/1.kos"
	even
Layout_ICZ2:	binclude "Levels/ICZ/Layout/2.kos"
	even
Layout_LBZ1:	binclude "Levels/LBZ/Layout/1.kos"
	even
Layout_LBZ2:	binclude "Levels/LBZ/Layout/2.kos"
	even
Layout_FBZ1:	binclude "Levels/FBZ/Layout/1.kos"
	even
Layout_FBZ2:	binclude "Levels/FBZ/Layout/2.kos"
	even
Layout_MHZ1:	binclude "Levels/MHZ/Layout/1.kos"
	even
Layout_MHZ2:	binclude "Levels/MHZ/Layout/2.kos"
	even
Layout_SOZ1:	binclude "Levels/SOZ/Layout/1.kos"
	even
Layout_SOZ2:	binclude "Levels/SOZ/Layout/2.kos"
	even
Layout_LRZ1:	binclude "Levels/LRZ/Layout/1.kos"
	even
Layout_LRZ2:	binclude "Levels/LRZ/Layout/2.kos"
	even
Layout_SSZ1:	binclude "Levels/SSZ/Layout/1.kos"
	even
Layout_SSZ2:	binclude "Levels/SSZ/Layout/2.kos"
	even
Layout_DEZ1:	binclude "Levels/DEZ/Layout/1.kos"
	even
Layout_DEZ2:	binclude "Levels/DEZ/Layout/2.kos"
	even
Layout_DDZ:;	binclude "Levels/DDZ/Layout/1.kos"
	even
Layout_Pachinko_Special:
	even
Layout_Slots_Special:
	even
Layout_LRZBoss:	binclude "Levels/LRZ/Layout/3.kos"
	even
Layout_HPZ:	binclude "Levels/HPZ/Layout/1.kos"
	even
Layout_DEZBoss:	binclude "Levels/DEZ/Layout/3.kos"
	even
MHZ_Custom_Layout:binclude "Levels/MHZ/Layout/3.bin"
	even

PalPoint:	include "Levels/Misc/Palette pointers.asm"
Pal_Unknown1:	binclude "Levels/Misc/Palettes/Unknown 1.bin"
	even

Pal_Unknown2: binclude "Levels/Misc/Palettes/Unknown 2.bin"
	even

Pal_Unknown3: binclude "Levels/Misc/Palettes/Unknown 3.bin"
	even

Pal_SonicTails: binclude "General/Sprites/Sonic/Palettes/SonicAndTails.bin"
	even

Pal_SonicTailsS2:	binclude "General/Sprites/Sonic/Palettes/SonicAndTailsS2.bin"
	even

Pal_Knuckles:	binclude "General/Sprites/Knuckles/Palettes/Main.bin"
	even

Pal_AIZIntro:	binclude "Levels/AIZ/Palettes/Intro.bin"
	even

Pal_AIZ:	binclude "Levels/AIZ/Palettes/Main.bin"
	even

Pal_AIZFire:	binclude "Levels/AIZ/Palettes/Fire.bin"
	even

Pal_AIZBoss:	binclude "Levels/AIZ/Palettes/Boss.bin"
	even

Pal_AIZ_Water:	binclude "Levels/AIZ/Palettes/Water.bin"
	even

Pal_AIZ2_Water:	binclude "Levels/AIZ/Palettes/Act 2 Water.bin"
	even

Pal_HCZ1:	binclude "Levels/HCZ/Palettes/1.bin"
	even

Pal_HCZ2:	binclude "Levels/HCZ/Palettes/2.bin"
	even

Pal_HCZ1_Water:	binclude "Levels/HCZ/Palettes/Act 1 Water.bin"
	even

Pal_HCZ2_Water:	binclude "Levels/HCZ/Palettes/Act 2 Water.bin"
	even

Pal_MGZ:	binclude "Levels/MGZ/Palettes/Main.bin"
	even


Pal_CNZ:	binclude "Levels/CNZ/Palettes/Main.bin"
	even

Pal_CNZ_Water:	binclude "Levels/CNZ/Palettes/Water.bin"
	even

Pal_FBZ1:	binclude "Levels/FBZ/Palettes/FBZ1.bin"
	even

Pal_FBZ2:	binclude "Levels/FBZ/Palettes/FBZ2.bin"
	even

Pal_ICZ1:	binclude "Levels/ICZ/Palettes/1.bin"
	even

Pal_ICZ2:	binclude "Levels/ICZ/Palettes/2.bin"
	even


Pal_ICZ2_Water:	binclude "Levels/ICZ/Palettes/Act 2 Water.bin"
	even

Pal_LBZ1:	binclude "Levels/LBZ/Palettes/1.bin"
	even


Pal_LBZ2:	binclude "Levels/LBZ/Palettes/2.bin"
	even

Pal_LBZ_Water:	binclude "Levels/LBZ/Palettes/Act 2 Water.bin"
	even


Pal_LBZ_Water2:	binclude "Levels/LBZ/Palettes/Act 2 Water 2.bin"
	even

Pal_MHZ1:	binclude "Levels/MHZ/Palettes/1.bin"
	even

Pal_MHZ2:	binclude "Levels/MHZ/Palettes/2.bin"
	even


Pal_SOZ1:	binclude "Levels/SOZ/Palettes/1.bin"
	even

Pal_S0Z2:	binclude "Levels/SOZ/Palettes/2.bin"
	even

Pal_SOZ1_Clone:	binclude "Levels/SOZ/Palettes/Act 1 Clone.bin"
	even

Pal_SOZ2_Extra:	binclude "Levels/SOZ/Palettes/Act 2 Extra.bin"
	even

Pal_LRZ1:	binclude "Levels/LRZ/Palettes/1.bin"
	even


Pal_LRZ2:	binclude "Levels/LRZ/Palettes/2.bin"
	even


Pal_SSZ1:	binclude "Levels/SSZ/Palettes/1.bin"
	even


Pal_SSZ2:	binclude "Levels/SSZ/Palettes/2.bin"
	even

Pal_EndingObjects:;	binclude "General/Ending/Palettes/Objects.bin"
	even


Pal_Ending1:;	binclude "General/Ending/Palettes/Ending 1.bin"
	even


Pal_Ending2:;	binclude "General/Ending/Palettes/Ending 2.bin"
	even


Pal_DEZ1:	binclude "Levels/DEZ/Palettes/1.bin"
	even

Pal_DEZ2:	binclude "Levels/DEZ/Palettes/2.bin"
	even

Pal_DDZ:	binclude "Levels/DDZ/Palettes/Main.bin"
	even


Pal_ALZ:;	binclude "Levels/ALZ/Palettes/Main.bin"
	even


Pal_BPZ:;	binclude "Levels/BPZ/Palettes/Main.bin"
	even


Pal_DPZ:;	binclude "Levels/DPZ/Palettes/Main.bin"
	even

Pal_CGZ:;	binclude "Levels/CGZ/Palettes/Main.bin"
	even

Pal_EMZ:;	binclude "Levels/EMZ/Palettes/Main.bin"
	even

Pal_Gumball_Special:
	even

Pal_Pachinko_Special:
	even

Pal_Slot_Special:
	even

Pal_LRZBoss:	binclude "Levels/LRZ/Palettes/Boss Act.bin"
	even

Pal_HPZ_A:	binclude "Levels/HPZ/Palettes/1_A.bin"
	even


Pal_HPZ_B:	binclude "Levels/HPZ/Palettes/1_B.bin"
	even

Pal_DEZBoss:	binclude "Levels/DEZ/Palettes/Boss.bin"
	even


ArtUnc_AirCountDown:binclude "General/Sprites/Air Countdown/Air Countdown.bin"
	even

ArtUnc_SONICMILES:binclude "General/Sprites/S2Menu/SONICMILES.bin"
	even

ArtUnc_SStageSonic:;binclude "General/Sprites/Sonic/Art/SStage Sonic.bin"
;	even
Map_SStageSonic
PLC_SStageSonic
;	include "General/Sprites/Sonic/Map - SStage Sonic.asm"

ArtUnc_SStageKnuckles:;binclude "General/Sprites/Knuckles/Art/SStage Knuckles.bin"
;	even

Map_SStageKnuckles
PLC_SStageKnuckles
;	include "General/Sprites/Knuckles/Map - SStage Knuckles.asm"

ArtNem_SStageShadow:	;binclude "General/Special Stage/Nemesis Art/Shadow.bin"
	even
ArtNem_GetBlueSpheres:	;binclude "General/Special Stage/Nemesis Art/Get Blue Spheres.bin"
	even
ArtNem_GBSArrow:	;binclude "General/Special Stage/Nemesis Art/Get Blue Spheres Arrow.bin"
	even
ArtNem_SStageDigits:	;binclude "General/Special Stage/Nemesis Art/Digits.bin"
	even
ArtNem_SStageIcons:	;binclude "General/Special Stage/Nemesis Art/Icons.bin"
	even
ArtNem_SStageSphere:	;binclude "General/Special Stage/Nemesis Art/Sphere.bin"
	even
ArtNem_SStageRing:	;binclude "General/Special Stage/Nemesis Art/Ring.bin"
	even
ArtKosM_SStageChaosEmerald:;binclude "General/Special Stage/KosinskiM Art/Special Stage Chaos Emerald.bin"
	even
ArtKosM_SStageSuperEmerald:;binclude "General/Special Stage/KosinskiM Art/Special Stage Super Emerald.bin"
	even
MapEni_SStageBG:	;binclude "General/Special Stage/Enigma Map/BG.bin"
	even
ArtNem_SStageBG:	;binclude "General/Special Stage/Nemesis Art/BG.bin"
	even
MapEni_SStageLayout:	;binclude "General/Special Stage/Enigma Map/Layout.bin"
	even
ArtNem_SStageLayout:	;binclude "General/Special Stage/Nemesis Art/Layout.bin"
	even
SStageKos_PerspectiveMaps:;	binclude "General/Special Stage/Layout/Perspective Maps.bin"
	even

ArtUnc_AniFBZ__0:	binclude "Levels/FBZ/Animated Tiles/0.bin"
	even
ArtUnc_AniFBZ__1:	binclude "Levels/FBZ/Animated Tiles/1.bin"
	even
ArtUnc_AniFBZ__2:	binclude "Levels/FBZ/Animated Tiles/2.bin"
	even
ArtUnc_AniFBZ__3:	binclude "Levels/FBZ/Animated Tiles/3.bin"
	even
ArtUnc_AniFBZ__4:	binclude "Levels/FBZ/Animated Tiles/4.bin"
	even
ArtUnc_AniMHZ__BG:	binclude "Levels/MHZ/Animated Tiles/BG 1.bin"
	even
ArtUnc_AniMHZ__BG2:	binclude "Levels/MHZ/Animated Tiles/BG 2.bin"
	even
ArtUnc_AniMHZ__0:	binclude "Levels/MHZ/Animated Tiles/0.bin"
	even
ArtUnc_AniMHZ__1:	binclude "Levels/MHZ/Animated Tiles/1.bin"
	even
ArtUnc_AniMHZ__2:	binclude "Levels/MHZ/Animated Tiles/2.bin"
	even
ArtUnc_AniMHZ__3:	binclude "Levels/MHZ/Animated Tiles/3.bin"
	even
ArtUnc_AniSOZ1_BG:	binclude "Levels/SOZ/Animated Tiles/Act1 BG 1.bin"
	even
ArtUnc_AniSOZ1_BG2:	binclude "Levels/SOZ/Animated Tiles/Act1 BG 2.bin"
	even
ArtUnc_AniSOZ2_BG:	binclude "Levels/SOZ/Animated Tiles/Act2 BG.bin"
	even
ArtUnc_AniLRZ__BG:	binclude "Levels/LRZ/Animated Tiles/BG 1.bin"
	even
ArtUnc_AniLRZ__BG2:	binclude "Levels/LRZ/Animated Tiles/BG 2.bin"
	even
ArtUnc_AniLRZ1_0:	binclude "Levels/LRZ/Animated Tiles/Act1 0.bin"
	even
ArtUnc_AniLRZ1_1:	binclude "Levels/LRZ/Animated Tiles/Act1 1.bin"
	even
ArtUnc_AniLRZ2_0:	binclude "Levels/LRZ/Animated Tiles/Act2 0.bin"
	even
ArtUnc_AniLRZ2_1:	binclude "Levels/LRZ/Animated Tiles/Act2 1.bin"
	even
ArtUnc_AniHPZ__0:	binclude "Levels/HPZ/Animated Tiles/0.bin"
	even
ArtUnc_AniHPZ__1:	binclude "Levels/HPZ/Animated Tiles/1.bin"
	even
ArtUnc_AniHPZ__2:	binclude "Levels/HPZ/Animated Tiles/2.bin"
	even
ArtUnc_AniHPZ__3:	binclude "Levels/HPZ/Animated Tiles/3.bin"
	even
ArtUnc_AniSSZ__0:	binclude "Levels/SSZ/Animated Tiles/0.bin"
	even
ArtUnc_AniSSZ__1:	binclude "Levels/SSZ/Animated Tiles/1.bin"
	even
ArtUnc_AniSSZ__2:	binclude "Levels/SSZ/Animated Tiles/2.bin"
	even
ArtUnc_AniSSZ__3:	binclude "Levels/SSZ/Animated Tiles/3.bin"
	even
ArtUnc_AniSSZ__4:	binclude "Levels/SSZ/Animated Tiles/4.bin"
	even
ArtUnc_AniSSZ__5:	binclude "Levels/SSZ/Animated Tiles/5.bin"
	even
ArtUnc_AniDEZ__0:	binclude "Levels/DEZ/Animated Tiles/0.bin"
	even
ArtUnc_AniDEZ__1:	binclude "Levels/DEZ/Animated Tiles/1.bin"
	even
ArtUnc_AniDEZ__2:	binclude "Levels/DEZ/Animated Tiles/2.bin"
	even
ArtUnc_AniDEZ__3:	binclude "Levels/DEZ/Animated Tiles/3.bin"
	even
ArtUnc_AniDEZ__4:	binclude "Levels/DEZ/Animated Tiles/4.bin"
	even
ArtUnc_AniDEZ__5:	binclude "Levels/DEZ/Animated Tiles/5.bin"
	even
ArtUnc_AniDEZ__6:	binclude "Levels/DEZ/Animated Tiles/6.bin"
	even
ArtUnc_AniDEZ__7:	binclude "Levels/DEZ/Animated Tiles/7.bin"
	even
ArtUnc_AniPachinko:
	even
ArtNem_S22POptions:binclude "General/Sprites/S2Menu/2P Options.bin"
	even

MapEni_S22POptions:binclude "General/Sprites/S2Menu/2P Options Enigma.bin"
	even

LRZ1_Rock_Placement:	binclude "Levels/LRZ/Misc/Act 1 Rock Placement.bin"
	even

LRZ2_Rock_Placement:	binclude "Levels/LRZ/Misc/Act 2 Rock Placement.bin"
	even

Map_SKTitle_SonicFall:
	even
Map_SKTitle_DeathEgg:
	even
Map_SKTitle_Banner:
	even
Map_SKTitle_Mountain:
	even
MapEni_SKTitle_Sega:
	even
MapEni_SKTitle_Frame1:;				binclude "General/Title/Enigma Map/SK SonicKnux Frame 1.bin"
	even
MapEni_SKTitle_Frame2:;				binclude "General/Title/Enigma Map/SK SonicKnux Frame 2.bin"
	even
MapEni_SKTitle_Frame3:;				binclude "General/Title/Enigma Map/SK SonicKnux Frame 3.bin"
	even
MapEni_SKTitle_Frame4:;				binclude "General/Title/Enigma Map/SK SonicKnux Frame 4.bin"
	even
MapEni_SKTitle_Background:	;	binclude "General/Title/Enigma Map/SK Background.bin"
	even
ArtKos_BigSEGA:					binclude "General/Title/Kosinski Art/SK Big SEGA.bin"
	even
ArtKos_SKTitleScreenBG:		;	binclude "General/Title/Kosinski Art/SK Screen Background.bin"
	even
ArtKosM_SonicKnuxStand:		;	binclude "General/Title/KosinskiM Art/SK Sonic Knuckles.bin"
	even
ArtKosM_SonicLand:		;		binclude "General/Title/KosinskiM Art/SK Sonic Land Frames.bin"
	even
ArtKos_SKTitle_SonicFall:	;	binclude "General/Title/Kosinski Art/SK Sonic Falling.bin"
	even
ArtKos_SKTitle_DeathEgg:	;	binclude "General/Title/Kosinski Art/SK Death Egg.bin"
	even
ArtKos_SKTitle_Mountain:	;	binclude "General/Title/Kosinski Art/SK Mountain Sprite.bin"
	even
ArtKosM_SKTitle_Banner:		;	binclude "General/Title/KosinskiM Art/SK Banner.bin"
	even
ArtKos_SKTitle_SonKnuxHand:	;	binclude "General/Title/Kosinski Art/SK Sonic and Knuckles Hands.bin"
	even
ArtKosM_SKTitle_Menu:		;	binclude "General/Title/KosinskiM Art/SK Menu.bin"
	even
ArtNem_Title_ANDKnuckles:	;binclude "General/Title/Nemesis Art/SK ANDKnuckles.bin"
	even
ArtKosM_ResultsKNUCKLES:binclude "General/Sprites/Results/Results KNUCKLES.bin"
	even
ArtKosM_ResultsGeneral:	binclude "General/Sprites/Results/Results General.kosm"
	even
ArtKosM_TitleCardNum1:	binclude "General/Sprites/Title Card/Title Card Number 1.bin"
	even

ArtKosM_TitleCardNum2:	binclude "General/Sprites/Title Card/Title Card Number 2.bin"
	even

ArtKosM_TitleCardRedAct:	binclude "General/Sprites/Title Card/Title Card Red ACT.bin"
	even
ArtKosM_FBZTitleCard:	binclude "Levels/FBZ/KosinskiM Art/Title Card.bin"
	even
ArtKosM_BonusTitleCard:	;binclude "General/Sprites/Title Card/Bonus Title Card.bin"
	even
ArtNem_BossExplosion:	binclude "General/Sprites/Boss Explosion/Boss Explosion.kosm"
	even

ArtNem_RobotnikShip:	binclude "General/Sprites/Robotnik/Ship.kosm"
	even

ArtNem_FBZRobtonikHead:	binclude "General/Sprites/Robotnik/FBZ Robotnik Head.kosm"
	even
ArtNem_FBZRobtonikStand:	binclude "General/Sprites/Robotnik/FBZ Robotnik Stand.kosm"
	even

ArtNem_FBZRobtonikRun:	binclude "General/Sprites/Robotnik/FBZ Robotnik Run.kosm"
	even

ArtUnc_SSEntryRing:	;binclude "General/Sprites/SS Entry/Entry Ring.bin"
	even
ArtUnc_SSEntryFlash:	;binclude "General/Sprites/SS Entry/Entry Flash.bin"
	even
ArtKosM_BadnikExplosion:;	binclude "General/Sprites/Enemy Misc/Badnik Explosion.bin"
	even	; NAT: WTF, this is just the normal explosion graphics, except its KosM instead of Nemesis???
ArtNem_FBZMinibossUnused:;	binclude "Levels/FBZ/Nemesis Art/Miniboss Unused.kosm"
	even
ArtNem_FBZ2Subboss:	binclude "Levels/FBZ/Nemesis Art/Act 2 Subboss.kosm"
	even

ArtNem_FBZEndBoss:	binclude "Levels/FBZ/Nemesis Art/End Boss.kosm"
	even
ArtKosM_Blaster:	binclude "General/Sprites/Blaster/Blaster.bin"
	even
ArtKosM_Technosqueek:	binclude "General/Sprites/Technosqueek/Technosqueek.bin"
	even
ArtUnc_EndSigns:	binclude "General/Sprites/Signpost/End Signs.bin"
	even
ArtNem_SignpostStub:	binclude "General/Sprites/Signpost/Stub.kosm"
	even
ArtNem_EggCapsule:	binclude "General/Sprites/Robotnik/Egg Capsule.kosm"
	even

ArtNem_BlueSphereText:;	binclude "General/Blue Sphere/Nemesis Art/Large Text.bin"
	even

ArtNem_FBZEndBossFlame:	binclude "Levels/FBZ/Nemesis Art/End Boss Flame.kosm"
	even
ArtKosM_ANDKnuckles:;dc.w $4C0
ArtKos_ANDKnuckles:; binclude "General/Title/Kosinski Art/SK ANDKnuckles Subtitle.bin"
	even

ArtNem_Knux_Ending_Pose:;	binclude "General/Ending/Nemesis Art/Knuckles Ending Pose.bin"
	even

SFX_Padding:
	;	align $20000
;	if MOMPASS=1
;		message "Sonic pad has $\{*-SFX_Padding} bytes free before."
;	endif

ArtUnc_Sonic:	binclude "General/Sprites/Sonic/Art/Sonic.bin"
	even
ArtUnc_Knux:	binclude "General/Sprites/Knuckles/Art/Knuckles.bin"
	even
ArtUnc_Tails:	binclude "General/Sprites/Tails/Art/Tails.bin"
	even
ArtUnc_Tails_Tail:binclude "General/Sprites/Tails/Art/Tails tails.bin"
ArtUnc_Sonic_Extra:binclude "General/Sprites/Sonic/Art/Sonic Extra.bin"
	even
ArtUnc_Tails_Extra:binclude "General/Sprites/Tails/Art/Tails Extra.bin"
	even

Art_Arrows:	binclude "General\Battle\Arrows Art.bin"
		even
Map_Sonic:	include "General/Sprites/Sonic/Map - Sonic.asm"

PLC_Sonic:	include "General/Sprites/Sonic/Sonic pattern load cues.asm"

Map_Tails:	include "General/Sprites/Tails/Map - Tails Fixed.asm"

PLC_Tails:	include "General/Sprites/Tails/Tails pattern load cues.asm"

Map_Knuckles:	include "General/Sprites/Knuckles/Map - Knuckles.asm"

PLC_Knuckles:	include "General/Sprites/Knuckles/Knuckles pattern load cues.asm"

		include "Sound/Z80 Sound Driver.asm"
		even

; ===========================================================================
; ---------------------------------------------------------------------------
; Sound Test
; ---------------------------------------------------------------------------
; SoundTest:
		include	"Screen Sound Test\Source - Sound Test.asm"

; ===========================================================================

ArtKosM_HyperSonicStars:;binclude "General/Sprites/Sonic/Art/Hyper Sonic Stars.bin"
	even
ArtKosM_SuperTailsBirds:;binclude "General/Sprites/Tails/Art/Super Tails birds.bin"
	even
ArtNem_FBZMisc:	binclude "Levels/FBZ/Nemesis Art/Misc Art 1.kosm"
	even

ArtNem_FBZOutdoors:	binclude "Levels/FBZ/Nemesis Art/Outdoors.kosm"
	even
ArtNem_FBZMisc2:	binclude "Levels/FBZ/Nemesis Art/Misc Art 2.kosm"
	even
ArtNem_MHZMisc:	binclude "Levels/MHZ/Nemesis Art/Misc Art.kosm"
	even
ArtNem_SOZMisc:	binclude "Levels/SOZ/Nemesis Art/Misc Art.kosm"
	even

ArtNem_SOZTile:	binclude "Levels/SOZ/Nemesis Art/Tile.kosm"
	even
ArtNem_SOZ2Extra:	binclude "Levels/SOZ/Nemesis Art/Act 2 Extra Art.kosm"
	even
ArtNem_LRZMisc:	binclude "Levels/LRZ/Nemesis Art/Misc Art.kosm"
	even
ArtNem_LRZSpikes:	binclude "Levels/LRZ/Nemesis Art/Spike Crush.kosm"
	even
ArtNem_LRZBigSpike:	binclude "Levels/LRZ/Nemesis Art/Big Spike Ball.kosm"
	even
ArtNem_LRZ2Misc:	binclude "Levels/LRZ/Nemesis Art/Act 2 Misc Art.kosm"
	even
ArtNem_LRZ2Drum:	binclude "Levels/LRZ/Nemesis Art/Act 2 Spinning Drum.kosm"
	even
ArtNem_SSZMisc:	binclude "Levels/SSZ/Nemesis Art/Misc.kosm"
	even
ArtKosM_SSZSpiralRamp:	binclude "Levels/SSZ/KosinskiM Art/Spiral Ramp.bin"
	even
ArtNem_DEZMisc:	binclude "Levels/DEZ/Nemesis Art/Misc Art.kosm"
	even

ArtNem_DEZMiniboss:	binclude "Levels/DEZ/Nemesis Art/Miniboss.kosm"
	even
ArtNem_DEZ2Extra:	binclude "Levels/DEZ/Nemesis Art/Act 2 Extra Art.kosm"
	even
ArtNem_PachinkoMain:	;binclude "Levels/Pachinko/Nemesis Art/Main.bin"
	even
ArtKos_PachinkoBG1:	;	binclude "Levels/Pachinko/Kosinski Art/Animated BG 1.bin"
	even
ArtKos_PachinkoBG2:	;	binclude "Levels/Pachinko/Kosinski Art/Animated BG 2.bin"
	even
PalKos_Pachinko:	;	binclude "Levels/Pachinko/Palettes/Compressed Pal.bin"
	even
ArtNem_SlotsBlocks:	;binclude "Levels/Slots/Nemesis Art/Blocks.bin"
	even
ArtUnc_SlotOptions:	;	binclude "Levels/Slots/Uncompressed Art/Options.bin"
	even
ArtKosM_SSZTeleport:		binclude "Levels/SSZ/KosinskiM Art/Teleporter Beam.bin"
	even
ArtNem_ICZTeleport:	binclude "Levels/ICZ/Nemesis Art/Teleporter Beam.kosm"
	even
ArtKosM_MHZEndBossPillar:		binclude "Levels/MHZ/KosinskiM Art/End Boss Pillar.bin"
	even
ArtKosM_MHZShipPropeller:		binclude "Levels/MHZ/KosinskiM Art/Ship Propeller.bin"
	even
ArtKosM_LRZ2DeathEggBG:		binclude "Levels/LRZ/KosinskiM Art/BG Death Egg.bin"
	even
ArtUnc_DEZFBLaser:	binclude "Levels/DEZ/Uncompressed Art/Final Boss Laser.bin"
	even

ArtKos_SaveScreen:;binclude "General/Save Menu/Kosinski Art/SK Extra.bin"
	even
ArtKosM_SSResultsSUPER:		;binclude "General/Special Stage/KosinskiM Art/SSResults SUPER.bin"
	even
ArtKosM_SSResultsSUPERk:	;	binclude "General/Special Stage/KosinskiM Art/SSResults SUPER (K).bin"
	even
ArtKosM_SSResultsHYPER:		;binclude "General/Special Stage/KosinskiM Art/SSResults HYPER.bin"
	even
ArtKosM_SSResultsHYPERk:	;	binclude "General/Special Stage/KosinskiM Art/SSResults HYPER (K).bin"
	even
ArtKosM_ResultsSONIC:	binclude "General/Sprites/Results/Results SONIC.bin"
	even
ArtKosM_SSResults:	dc.b  $12, $A0
ArtKos_SSResultsGeneral:	;	binclude "General/Special Stage/Kosinski Art/SSResults General.bin"
	even
ArtKos_SSResultsTKIcons:	;	binclude "General/Special Stage/Kosinski Art/SSResults Tails Knuckles Icons.bin"
	even
ArtKosM_TitleCardSKZone:binclude "General/Sprites/Title Card/Title Card SK Zone.bin"
	even
ArtKosM_TitleCardS3KZone:binclude "General/Sprites/Title Card/Title Card S3K Zone.bin"
	even
ArtKosM_MHZTitleCard:binclude "Levels/MHZ/KosinskiM Art/Title Card.bin"
	even
ArtKosM_SOZTitleCard:binclude "Levels/SOZ/KosinskiM Art/Title Card.bin"
	even
ArtKosM_LRZTitleCard:binclude "Levels/LRZ/KosinskiM Art/Title Card.bin"
	even
ArtKosM_SSZTitleCard:binclude "Levels/SSZ/KosinskiM Art/Title Card.bin"
	even
ArtKosM_DEZTitleCard:binclude "Levels/DEZ/KosinskiM Art/Title Card.bin"
	even
ArtKosM_DDZTitleCard:binclude "Levels/DDZ/KosinskiM Art/Title Card.bin"
	even
ArtKosM_HPZTitleCard:binclude "Levels/HPZ/KosinskiM Art/Title Card.bin"
	even
ArtKosM_OAZTitleCard:
	if oazflag=1
	binclude "Levels/OAZ/Data/Title Card.kosm"
	even
	endif
ArtKos_SaveScreenSKZone:;	binclude "General/Save Menu/Kosinski Art/SK Zone Art.bin"
	even
ArtKos_SaveScreenPortrait:;	binclude "General/Save Menu/Kosinski Art/Portraits.bin"
	even
DemoDat_MHZ:;	binclude "Levels/MHZ/Demodata/1.bin"
	even

DemoDat_FBZ:;	binclude "Levels/FBZ/Demodata/1.bin"
	even

DemoDat_SOZ:;	binclude "Levels/SOZ/Demodata/1.bin"
	even

DemoDat_SpecialStage:;	binclude "General/Special Stage/Demodata/1.bin"
	even
ArtKosM_EggRoboHead:dc.w $400
	even
ArtKos_EggRoboHead:		binclude "General/Sprites/Robotnik/Egg Robo Head.bin"
	even
ArtNem_EggRoboRun:	binclude "General/Sprites/Robotnik/Egg Robo Run.kosm"
	even
ArtNem_EggRoboStand:	binclude "General/Sprites/Robotnik/Egg Robo Stand.kosm"
	even
ArtKosM_KnuxFinalBossCrane:		binclude "General/Sprites/Robotnik/Robotnik Ship Crane.bin"
	even
ArtKosM_IslandLiftGfx:	;	binclude "General/Ending/KosinskiM Art/Island Lift Animated Tiles.bin"
	even
ArtKosM_EndingAnimals:	;	binclude "General/Ending/KosinskiM Art/Pelican and Dolphin.bin"
	even
ArtKosM_EggRoboSKEnding:;		binclude "General/Ending/KosinskiM Art/Egg Robo.bin"
	even
ArtKosM_NormalSonicEndPose:;		binclude "General/Ending/KosinskiM Art/Normal Sonic Ending Pose.bin"
	even
ArtKosM_SuperSonicEndPose:;	binclude "General/Ending/KosinskiM Art/Super Sonic Ending Pose.bin"
	even
ArtKosM_SonicPlaneEnding:;		binclude "General/Ending/KosinskiM Art/Sonic Plane Ending.bin"
	even
ArtKosM_RobotnikSmug:	;dc.w	  $7A0
ArtKos_RobotnikSmug:	;binclude "General/Ending/Kosinski Art/Robotnik Standing Smug.bin"
	even
ArtKosM_SonicPlane:;	binclude "General/Ending/KosinskiM Art/Sonic Plane.bin"
	even
ArtKosM_KnuxEnding:;	binclude "General/Sprites/Knuckles/Cutscene/Knuckles Ending Cutscene.bin"
	even
ArtKosM_SKPoseBanner:	;dc.w	  $900
ArtKos_SKPoseBanner:;	binclude "General/Ending/Kosinski Art/Sonic Knuckles Pose Banner.bin"
	even
ArtKosM_S3PoseBanner:;	binclude "General/Ending/KosinskiM Art/Sonic 3 Pose Banner.bin"
	even
ArtUnc_KnuxIntroLay:;	binclude "General/Sprites/Knuckles/Cutscene/Intro Laying.bin"
	even
ArtKosM_KnuxIntroBomb:	;	binclude "General/Sprites/Knuckles/Cutscene/Knuckles Intro Bomb.bin"
	even
ArtKosM_FBZExitHall:	binclude "Levels/FBZ/KosinskiM Art/Exit Hall.bin"
	even
ArtKosM_FBZMiniboss:		binclude "Levels/FBZ/KosinskiM Art/Miniboss.bin"
	even
ArtKosM_FBZCloud:		binclude "Levels/FBZ/KosinskiM Art/Cloud.bin"
	even
ArtKosM_FBZBossPillar:			binclude "Levels/FBZ/KosinskiM Art/Before Boss Pillar.bin"
	even
ArtKosM_FBZExitDoor:	binclude "Levels/FBZ/KosinskiM Art/Exit Door.bin"
	even
ArtNem_FBZEggCapsule:	binclude "Levels/FBZ/Nemesis Art/Egg Capsule.kosm"
	even

ArtKosM_FBZButton:		binclude "Levels/FBZ/KosinskiM Art/Button.bin"
	even
ArtKosM_Madmole:		binclude "General/Sprites/Madmole/Madmole.bin"
	even

ArtKosM_Mushmeanie:		binclude "General/Sprites/Mushmeanie/Mushmeanie.bin"
	even

ArtKosM_Dragonfly:		binclude "General/Sprites/Dragonfly/Dragonfly.bin"
	even

ArtKosM_CluckoidArrow:	binclude "General/Sprites/Cluckoid/Cluckoid Arrow.bin"
	even
ArtUnc_Butterdroid:	binclude "General/Sprites/Butterdroid/Butterdroid.bin"
	even
ArtUnc_Cluckoid:	binclude "General/Sprites/Cluckoid/Cluckoid.bin"
	even
ArtKosM_MHZMiniboss:	binclude "Levels/MHZ/KosinskiM Art/Miniboss.bin"
	even
ArtKosM_MHZMinibossLog:	binclude "Levels/MHZ/KosinskiM Art/Miniboss Log.bin"
	even
ArtKosM_MHZEndBossSpikes:	binclude "Levels/MHZ/KosinskiM Art/End Boss Spikes.bin"
	even
ArtKosM_MHZKnuxPeer:	binclude "General/Sprites/Knuckles/Cutscene/Knuckles Peering.bin"
	even
ArtUnc_MHZKnuxPress:	binclude "General/Sprites/Knuckles/Cutscene/MHZ2 Press.bin"
	even
ArtKosM_MHZKnuxSwitch:	binclude "General/Sprites/Knuckles/Cutscene/Knuckles MHZ Switch.bin"
	even
ArtKosM_MHZEndBoss:	binclude "Levels/MHZ/KosinskiM Art/End Boss.bin"
	even
ArtKosM_Skorp:binclude "General/Sprites/Skorp/Skorp.bin"
	even
ArtKosM_Sandworm:binclude "General/Sprites/Sandworm/Sandworm.bin"
	even
ArtKosM_Rockn:binclude "General/Sprites/Rockn/Rock'n.bin"
	even
ArtUnc_SOZGhosts:	binclude "General/Sprites/SOZ Ghosts/SOZ Ghosts.bin"
	even
ArtKosM_SOZMiniboss:	binclude "Levels/SOZ/KosinskiM Art/Miniboss.bin"
	even
ArtKosM_SOZSand:	binclude "Levels/SOZ/KosinskiM Art/Sand Particles.bin"
	even
ArtKosM_SOZEndBoss:	binclude "Levels/SOZ/KosinskiM Art/End Boss.bin"
	even
ArtUnc_Fireworm:	binclude "General/Sprites/Fireworm/Fireworm.bin"
	even
ArtKosM_FirewormSegments:binclude "General/Sprites/Fireworm/Fireworm Segments.bin"
	even
ArtKosM_Iwamodoki:binclude "General/Sprites/Iwamodoki/Iwamodoki.bin"
	even
ArtKosM_Toxomister:binclude "General/Sprites/Toxomister/Toxomister.bin"
	even
ArtKosM_LRZRockCrusher:	binclude "Levels/LRZ/KosinskiM Art/Rock Crusher.bin"
	even
ArtKosM_LRZMiniboss:	binclude "Levels/LRZ/KosinskiM Art/Miniboss.bin"
	even
ArtKosM_LRZ3Autoscroll:	binclude "Levels/LRZ/KosinskiM Art/Autoscroll.bin"
	even
ArtKosM_LRZ3DeathEggFlash:	binclude "Levels/LRZ/KosinskiM Art/Death Egg Flash.bin"
	even
ArtKosM_LRZ3PlatformDebris:	binclude "Levels/LRZ/KosinskiM Art/Platform Debris.bin"
	even
ArtKosM_LRZEndBoss:	binclude "Levels/LRZ/KosinskiM Art/End Boss.bin"
	even
ArtKosM_LRZKnuxBoulder:	binclude "Levels/LRZ/KosinskiM Art/Knuckles Boulder.bin"
	even
ArtUnc_HPZKnucklesGrab:	binclude "General/Sprites/Knuckles/Cutscene/HPZ Emerald Grab.bin"
	even
ArtKosM_HPZKnuxDizzy:	binclude "Levels/HPZ/KosinskiM Art/Knuckles Dizzy Stars.bin"
	even
ArtNem_HPZEmeraldMisc:	binclude "Levels/HPZ/Nemesis Art/Emerald Misc Art.kosm"
	even
ArtNem_HPZGrayEmerald:	binclude "Levels/HPZ/Nemesis Art/Gray Emerald.kosm"
	even
ArtKosM_Teleporter:binclude "General/Sprites/Teleporter/Teleporter.bin"
	even

ArtKosM_HPZSmallEmeralds:	binclude "Levels/HPZ/KosinskiM Art/Special Stage Emeralds.bin"
	even
ArtUnc_MechaSonic:	binclude "General/Sprites/Mecha Sonic/Mecha Sonic.bin"
	even
ArtKosM_EggRoboBadnik:binclude "General/Sprites/Egg Robo Badnik/Egg Robo Badnik.bin"
	even

ArtScaled_EggRoboFly:	binclude "General/Sprites/Robotnik/Egg Robo Fly Scaled.bin"
	even
ArtKosM_MechaSonicHead:	binclude "General/Sprites/Mecha Sonic/Mecha Sonic Head.bin"
	even
ArtUnc_SSZDeathEggCloud:	binclude "General/Sprites/SSZ Death Egg Cloud/SSZ Death Egg Cloud.bin"
	even
ArtKosM_SSZDeathEggSmall:	binclude "Levels/SSZ/KosinskiM Art/Death Egg Small.bin"
	even
ArtUnc_SSZKnucklesTired:	binclude "General/Sprites/Knuckles/Cutscene/SSZ Tired.bin"
	even
ArtKosM_SSZGHZMisc:	binclude "Levels/SSZ/KosinskiM Art/GHZ Ball and Chain.bin"
	even
ArtKosM_SSZMTZOrbs:	binclude "Levels/SSZ/KosinskiM Art/MTZ Orbs.bin"
	even
ArtKosM_MechaSonicExtra:	binclude "General/Sprites/Mecha Sonic/Mecha Sonic Extra Art.bin"
	even
ArtKosM_HPZMasterEmerald:	dc.w	 $880
	even
ArtKos_HPZMasterEmerald:	binclude "Levels/HPZ/Kosinski Art/Master Emerald.bin"
	even
ArtKosM_Spikebonker:binclude "General/Sprites/Spikebonker/Spikebonker.bin"
	even
ArtKosM_Chainspike:binclude "General/Sprites/Chainspike/Chainspike.bin"
	even
ArtKosM_DEZMinibossMisc:	binclude "Levels/DEZ/KosinskiM Art/Miniboss Misc Art.bin"
	even
ArtKosM_DEZEndBoss:	binclude "Levels/DEZ/KosinskiM Art/End Boss.bin"
	even
ArtKosM_DEZFinalBossMisc:	binclude "Levels/DEZ/KosinskiM Art/Final Boss Misc Art.bin"
	even
ArtKosM_MasterEmerald:	binclude "General/Sprites/Master Emerald/Master Emerald.bin"
	even
ArtKosM_DEZFinalBossDebris:	binclude "Levels/DEZ/KosinskiM Art/Final Boss Debris.bin"
	even
ArtKosM_DDZMisc:	binclude "Levels/DDZ/KosinskiM Art/Misc Art.bin"
	even
AngleLookup_1:	dc.b    0,   0,   1,   1,   1,   1,   2,   2,   2,   3,   3,   3,   3,   4,   4,   4,   5,   5,   5,   5
		dc.b    6,   6,   6,   6,   7,   7,   7,   7,   8,   8,   8,   8,   8,   9,   9,   9,   9,   9,  $A,  $A
		dc.b   $A,  $A,  $A,  $A,  $B,  $B,  $B,  $B,  $B,  $B,  $B,  $B,  $B,  $C,  $C,  $C,  $C,  $C,  $C,  $C
		dc.b   $C,  $C,  $C,  $C
AngleLookup_2:	dc.b    0,   1,   1,   2,   2,   3,   4,   4,   5,   5,   6,   6,   7,   8,   8,   9,   9,  $A,  $A,  $B
		dc.b   $B,  $C,  $C,  $D,  $D,  $E,  $E,  $F,  $F, $10, $10, $11, $11, $11, $12, $12, $13, $13, $13, $14
		dc.b  $14, $14, $15, $15, $15, $15, $16, $16, $16, $16, $17, $17, $17, $17, $17, $17, $18, $18, $18, $18
		dc.b  $18, $18, $18, $18
AngleLookup_3:	dc.b    0,   1,   2,   3,   4,   4,   5,   6,   7,   8,   9,  $A,  $A,  $B,  $C,  $D,  $E,  $F,  $F, $10
		dc.b  $11, $12, $13, $13, $14, $15, $15, $16, $17, $18, $18, $19, $19, $1A, $1B, $1B, $1C, $1C, $1D, $1D
		dc.b  $1E, $1E, $1F, $1F, $20, $20, $21, $21, $21, $22, $22, $22, $22, $23, $23, $23, $23, $23, $24, $24
		dc.b  $24, $24, $24, $24
	even
Map_Spikebonker:include "General/Sprites/Spikebonker/Map - Spikebonker.asm"

Map_Chainspike:	include "General/Sprites/Chainspike/Map - Chainspike.asm"

Map_EggRobo:	include "General/Sprites/Robotnik/Map - Eggrobo.asm"

Map_DEZMiniboss:	include "Levels/DEZ/Misc Object Data/Map - Miniboss.asm"

Map_MechaSonic:	include "General/Sprites/Mecha Sonic/Map - Mecha Sonic.asm"

Map_MechaSonicExtra:	include "General/Sprites/Mecha Sonic/Map - Mecha Sonic Extra.asm"

DPLC_MechaSonic:	include "General/Sprites/Mecha Sonic/DPLC - Mecha Sonic.asm"

Map_SpriteMask:	include "General/Sprites/Level Misc/Map - Sprite Mask.asm"

Map_DEZEndBoss:	include "Levels/DEZ/Misc Object Data/Map - End Boss.asm"

Map_MHZEndBoss:	include "Levels/MHZ/Misc Object Data/Map - End Boss.asm"

Map_MHZMiniboss:	include "Levels/MHZ/Misc Object Data/Map - Miniboss.asm"

Map_MHZMinibossTree:	include "Levels/MHZ/Misc Object Data/Map - Miniboss Tree.asm"

Map_MHZMinibossLog:	include "Levels/MHZ/Misc Object Data/Map - Miniboss Log.asm"

Map_EggRoboStand:	include "General/Sprites/Robotnik/Map - Egg Robo Stand.asm"

Map_EggRoboRun:	include "General/Sprites/Robotnik/Map - Egg Robo Run.asm"

Map_Skorp:	include "General/Sprites/Skorp/Map - Skorp.asm"

Map_Sandworm:	include "General/Sprites/Sandworm/Map - Sandworm.asm"

Map_LRZRockCrusher:	include "Levels/LRZ/Misc Object Data/Map - Rock Crusher.asm"

Map_SSZMTZOrbs:	include "Levels/SSZ/Misc Object Data/Map - MTZ Orbs.asm"

Map_SSZGHZMisc:	include "Levels/SSZ/Misc Object Data/Map - GHZ Misc.asm"

Map_LRZMiniboss:	include "Levels/LRZ/Misc Object Data/Map - Miniboss.asm"

Map_FBZEggCapsule:	include "Levels/FBZ/Misc Object Data/Map - Egg Capsule.asm"

Map_SOZGhosts:	include "General/Sprites/SOZ Ghosts/Map - SOZ Ghosts.asm"

Map_LRZEndBoss:	;include "Levels/LRZ/Misc Object Data/Map - End Boss.asm"

Map_LRZ3Platform:;	include "Levels/LRZ/Misc Object Data/Map - Act 3 Platform.asm"

Map_LRZ3Autoscroll:;	include "Levels/LRZ/Misc Object Data/Map - Act 3 Autoscroll.asm"

Map_LRZ3DeathEggFlash:;	include "Levels/LRZ/Misc Object Data/Map - Act 3 Death Egg Flash.asm"

Map_LRZ3Debris:;	include "Levels/LRZ/Misc Object Data/Map - Act 3 Platform Debris.asm"

Map_DEZFinalBossMisc:	include "Levels/DEZ/Misc Object Data/Map - Final Boss Misc.asm"

Map_BossMasterEmerald:	dc.w 4

		dc.b	0, $24,	  0,   5, $E8,	$E
		dc.b	0,   0,	$FF, $E0, $E8,	$E
		dc.b	8,   0,	  0,   0,   0,	 4
		dc.b	0,  $C,	$FF, $E0,   0,	$E
		dc.b	0,  $E,	$FF, $F0,   0,	 4
		dc.b	0, $1A,	  0, $10,   0,	 2
		dc.b  $E8,  $F,	  0, $1C, $FF, $F0
		dc.b	8,   5,	  0, $2C, $FF, $F0
Map_DEZFinalBossDebris:	include "Levels/DEZ/Misc Object Data/Map - Final Boss Debris.asm"
	even
ArtKosM_CreditsText:	binclude "General\Ending\KosinskiM Art/Credits.kosm"
	even		; NAT: Credits text include

ArtKosM_StarPost_Stars1:;binclude "General/Sprites/Starpost/Starpost Stars 1.bin"
	even
ArtKosM_StarPostStars2:;binclude "General/Sprites/Starpost/Starpost Stars 2.bin"
	even
ArtKosM_StarPostStars3:;binclude "General/Sprites/Starpost/Starpost Stars 3.bin"
	even
ArtKosM_MGZFloatDevice:binclude "General/Boss/MGZ2 Floating Device.kosm"
	even
MapEni_BlueSphereTitleFG:;binclude "General/Blue Sphere/Enigma Map/Title FG.bin"
	even
ArtKos_BlueSphereChar:	;binclude "General/Blue Sphere/Kosinski Art/Characters.bin"
	even
Map_BlueSphereCharSprite:	;include "General/Blue Sphere/Map - Character Sprites.asm"
	even
ArtKos_BlueSphereCharSprite:	;binclude "General/Blue Sphere/Kosinski Art/Character Sprites.bin"
	even
ArtKos_BlueSphereNormalText:	;binclude "General/Blue Sphere/Kosinski Art/Normal Text.bin"
	even
MapEni_BlueSphereTitleBG:	;binclude "General/Blue Sphere/Enigma Map/Title BG.bin"
	even

ArtNem_BlueSphereSKLogo:	;binclude "General/Blue Sphere/Nemesis Art/SK Logo.bin"
	even

ArtNem_BlueSphereTails:	;binclude "General/Blue Sphere/Nemesis Art/Tails Pose.bin"
	even
ArtNem_MilesLifeIcon:	binclude "General/Sprites/HUD Icon/Miles Life Icon.kosm"
	even
ArtUnc_Invincibility:	binclude "General/Sprites/Shields/Invincibility.bin"
	even

ArtUnc_DashDust:binclude "General/Sprites/Dash Dust/Dash Dust.bin"
	even

ArtUnc_SuperSonicKnux_Stars:binclude "General/Sprites/Shields/Super Sonic and Knuckles Stars.bin"
	even

ArtUnc_InstaShield:binclude "General/Sprites/Shields/Insta-Shield.bin"
	even
ArtUnc_FireShield:binclude "General/Sprites/Shields/Fire Shield.bin"
	even
ArtUnc_LightningShield:binclude "General/Sprites/Shields/Lightning Shield.bin"
	even

ArtUnc_Obj_Lightning_Shield_Sparks:
	binclude "General/Sprites/Shields/Sparks.bin"
ArtUnc_Obj_Lightning_Shield_Sparks_end
	even

ArtUnc_BubbleShield:binclude "General/Sprites/Shields/Bubble Shield.bin"
	even
ArtNem_GrayButton:binclude "General/Sprites/Buttons/Gray Button.kosm"
	even

ArtNem_DiagonalSpring:	binclude "General/Sprites/Level Misc/Diagonal Spring.kosm"
	even

ArtNem_SonicLifeIcon:binclude "General/Sprites/HUD Icon/Sonic life icon.kosm"
	even

ArtNem_KnucklesLifeIcon:binclude "General/Sprites/HUD Icon/Knuckles life icon.kosm"
	even
ArtNem_Monitors:binclude "General/Sprites/Monitors/Monitors.kosm"
	even
ArtNem_FloatMonitors:binclude "General/Sprites/Monitors/Float.kosm"
	even

ArtNem_S2Signpost:
	even
ArtNem_Bubbles:	binclude "General/Sprites/Bubbles/Bubbles.kosm"
	even

ArtNem_GameOver:
	even
ArtNem_Explosion:binclude "General/Sprites/Enemy Misc/Explosion.kosm"
	even

ArtNem_SpikesSprings:	binclude "General/Sprites/Level Misc/SpikesSprings.kosm"
	even

ArtNem_Ring:	binclude "General/Sprites/Ring/Ring.kosm"
	even
ArtKosM_SignGO:	binclude "General/Sprites/HUD/GO.kosm"		; NAT: art
	even
ArtKosM_Timer:	binclude "General/Sprites/HUD/HUD_Timer.kosm"	; MJ: "TIMER" art
	even
ArtNem_BonusStage:;	binclude "General/Sprites/Bonus/Bonus Stage.bin"
	even

FBZ_16x16_Kos:	binclude "Levels/FBZ/Blocks/Primary.bin"
	even
ArtKosM_FBZ:	binclude "Levels/FBZ/Tiles/Primary.bin"
	even
FBZ_128x128_Kos:binclude "Levels/FBZ/Chunks/Primary.bin"
	even

MHZ_16x16_Primary_Kos:binclude "Levels/MHZ/Blocks/Primary.bin"
	even
ArtKosM_MHZ_Primary:binclude "Levels/MHZ/Tiles/Primary.bin"
	even
MHZ_128x128_Primary_Kos:binclude "Levels/MHZ/Chunks/Primary.bin"
	even
MHZ_16x16_Secondary_Kos:binclude "Levels/MHZ/Blocks/Secondary.bin"
	even
ArtKosM_MHZ_Secondary:binclude "Levels/MHZ/Tiles/Secondary.bin"
	even
MHZ_128x128_Secondary_Kos:binclude "Levels/MHZ/Chunks/Secondary.bin"
	even
MHZ_16x16_Custom_Kos:binclude "Levels/MHZ/Blocks/Custom.bin"
	even
ArtKosM_MHZ_Custom: binclude "Levels/MHZ/Tiles/Custom.bin"
	even
MHZ_128x128_Custom_Kos:binclude "Levels/MHZ/Chunks/Custom.bin"
	even

SOZ_16x16_Primary_Kos:binclude "Levels/SOZ/Blocks/Primary.bin"
	even
ArtKosM_SOZ_Primary:binclude "Levels/SOZ/Tiles/Primary.bin"
	even
SOZ_128x128_Kos:binclude "Levels/SOZ/Chunks/Primary.bin"
	even

SOZ1_16x16_Secondary_Kos:binclude "Levels/SOZ/Blocks/Act 1 Secondary.bin"
	even
ArtKosM_SOZ1_Secondary:binclude "Levels/SOZ/Tiles/Act 1 Secondary.bin"
	even
SOZ1_16x16_Custom_Kos:binclude "Levels/SOZ/Blocks/Act 1 Custom.bin"
	even
ArtKosM_SOZ1_Custom:binclude "Levels/SOZ/Tiles/Act 1 Custom.bin"
	even

SOZ2_16x16_Secondary_Kos:binclude "Levels/SOZ/Blocks/Act 2 Secondary.bin"
	even
ArtKosM_SOZ2_Secondary:binclude "Levels/SOZ/Tiles/Act 2 Secondary.bin"
	even
SOZ2_16x16_Custom_Kos:binclude "Levels/SOZ/Blocks/Act 2 Custom.bin"
	even
ArtKosM_SOZ2_Custom:binclude "Levels/SOZ/Tiles/Act 2 Custom.bin"
	even

LRZ_16x16_Primary_Kos:binclude "Levels/LRZ/Blocks/Primary.bin"
	even
ArtKosM_LRZ_Primary:binclude "Levels/LRZ/Tiles/Primary.bin"
	even
LRZ_128x128_Primary_Kos:binclude "Levels/LRZ/Chunks/Primary.bin"
	even
LRZ1_16x16_Secondary_Kos:binclude "Levels/LRZ/Blocks/Act 1 Secondary.bin"
	even
ArtKosM_LRZ1_Secondary:binclude "Levels/LRZ/Tiles/Act 1 Secondary.bin"
	even
LRZ1_128x128_Secondary_Kos:binclude "Levels/LRZ/Chunks/Act 1 Secondary.bin"
	even

LRZ2_16x16_Secondary_Kos:binclude "Levels/LRZ/Blocks/Act 2 Secondary.bin"
	even
ArtKosM_LRZ2_Secondary:binclude "Levels/LRZ/Tiles/Act 2 Secondary.bin"
	even
LRZ2_128x128_Secondary_Kos:binclude "Levels/LRZ/Chunks/Act 2 Secondary.bin"
	even

HPZ_16x16_Primary_Kos:binclude "Levels/HPZ/Blocks/Primary.bin"
	even
ArtKosM_HPZ_Primary:binclude "Levels/HPZ/Tiles/Primary.bin"
	even
HPZ_128x128_Primary_Kos:binclude "Levels/HPZ/Chunks/Primary.bin"
	even

LRZ3_16x16_Secondary_Kos:;binclude "Levels/LRZ/Blocks/Act 3 Secondary.bin"
	even
ArtKosM_LRZ3_Secondary:;binclude "Levels/LRZ/Tiles/Boss Secondary.bin"
	even
LRZ3_128x128_Secondary_Kos:;binclude "Levels/LRZ/Chunks/Act 3 Secondary.bin"
	even

HPZ_16x16_Secondary_Kos:binclude "Levels/HPZ/Blocks/Secondary.bin"
	even
ArtKosM_HPZ_Secondary:binclude "Levels/HPZ/Tiles/Secondary.bin"
	even
HPZ_128x128_Secondary_Kos:binclude "Levels/HPZ/Chunks/Secondary.bin"
	even

SSZ1_16x16_Primary_Kos:binclude "Levels/SSZ/Blocks/Act 1 Primary.bin"
	even
ArtKosM_SSZ1_Primary:binclude "Levels/SSZ/Tiles/Act 1 Primary.bin"
	even

SSZ1_128x128_Primary_Kos:binclude "Levels/SSZ/Chunks/Act 1 Primary.bin"
	even
SSZ1_16x16_Secondary_Kos:binclude "Levels/SSZ/Blocks/Act 1 Secondary.bin"
	even
ArtKosM_SSZ1_Secondary:binclude "Levels/SSZ/Tiles/Act 1 Secondary.bin"
	even

SSZ1_128x128_Secondary_Kos:binclude "Levels/SSZ/Chunks/Act 1 Secondary.bin"
	even
SSZ1_16x16_Custom_Kos:binclude "Levels/SSZ/Blocks/Act 1 Custom.bin"
	even
ArtKosM_SSZ1_Custom:binclude "Levels/SSZ/Tiles/Act 1 Custom.bin"
	even
SSZ1_128x128_Custom_Kos:binclude "Levels/SSZ/Chunks/Act 1 Custom.bin"
	even

SSZ2_16x16_Kos:	;binclude "Levels/SSZ/Blocks/Act 2.bin"
	even
ArtKosM_SSZ2:	;binclude "Levels/SSZ/Tiles/Act 2.bin"
	even
SSZ2_128x128_Kos:;binclude "Levels/SSZ/Chunks/Act 2.bin"
	even

DEZ_16x16_Primary_Kos:binclude "Levels/DEZ/Blocks/Primary.bin"
	even
ArtKosM_DEZ_Primary:binclude "Levels/DEZ/Tiles/Primary.bin"
	even
DEZ_128x128_Kos:binclude "Levels/DEZ/Chunks/Primary.bin"
	even

DEZ1_16x16_Secondary_Kos:binclude "Levels/DEZ/Blocks/Act 1 Secondary.bin"
	even
ArtKosM_DEZ1_Secondary:binclude "Levels/DEZ/Tiles/Act 1 Secondary.bin"
	even

DEZ2_16x16_Secondary_Kos:binclude "Levels/DEZ/Blocks/Act 2 Secondary.bin"
	even
ArtKosM_DEZ2_Secondary:binclude "Levels/DEZ/Tiles/Act 2 Secondary.bin"
	even

DEZ3_16x16_Kos:	binclude "Levels/DEZ/Blocks/Act 3.bin"
	even
ArtKosM_DEZ3:	binclude "Levels/DEZ/Tiles/Final Boss Act.bin"
	even
DEZ3_128x128_Kos:binclude "Levels/DEZ/Chunks/Act 3.bin"
	even

DDZ_16x16_Kos:	;binclude "Levels/DDZ/Blocks/Primary.bin"
	even
ArtKosM_DDZ:	;binclude "Levels/DDZ/Tiles/Primary.bin"
	even
DDZ_128x128_Kos:;binclude "Levels/DDZ/Chunks/Primary.bin"
	even

Pachinko_16x16_Kos:;binclude "Levels/Pachinko/Blocks/Primary.bin"
	even
ArtKosM_Pachinko:;binclude "Levels/Pachinko/Tiles/Pachinko.bin"
	even
Pachinko_128x128_Kos:;binclude "Levels/Pachinko/Chunks/Primary.bin"
	even

Slots_16x16_Kos:;binclude "Levels/Slots/Blocks/Primary.bin"
	even
ArtKosM_Slots:	;binclude "Levels/Slots/Tiles/Slots.bin"
	even
Slots_128x128_Kos:;binclude "Levels/Slots/Chunks/Primary.bin"
	even

Character_Speeds:	dc.w   $600,   $10,  $20, 0		; Sonic
			dc.w   $4C0,   $1C,  $70, 0		; Tails
			dc.w   $580,   $10, $200, 0		; Knuckles
Sonic_Start_Locations:
; 		include "Levels/Misc/Sonic Start Positions.asm"
		binclude "Levels/AIZ/Start Location/Sonic/1.bin"
	even
		binclude "Levels/AIZ/Start Location/Sonic/2.bin"
	even
		binclude "Levels/HCZ/Start Location/Sonic/1.bin"
	even
		binclude "Levels/HCZ/Start Location/Sonic/2.bin"
	even
		binclude "Levels/MGZ/Start Location/Sonic/1.bin"
	even
		binclude "Levels/MGZ/Start Location/Sonic/2.bin"
	even
		binclude "Levels/CNZ/Start Location/Sonic/1.bin"
	even
		binclude "Levels/CNZ/Start Location/Sonic/2.bin"
	even
		binclude "Levels/FBZ/Start Location/Sonic/1.bin"
	even
		binclude "Levels/FBZ/Start Location/Sonic/2.bin"
	even
		binclude "Levels/ICZ/Start Location/Sonic/1.bin"
	even
		binclude "Levels/ICZ/Start Location/Sonic/2.bin"
	even
		binclude "Levels/LBZ/Start Location/Sonic/1.bin"
	even
		binclude "Levels/LBZ/Start Location/Sonic/2.bin"
	even
		binclude "Levels/MHZ/Start Location/Sonic/1.bin"
	even
		binclude "Levels/MHZ/Start Location/Sonic/2.bin"
	even
		binclude "Levels/SOZ/Start Location/Sonic/1.bin"
	even
SOZ2_Start:	binclude "Levels/SOZ/Start Location/Sonic/2.bin"
	even
		binclude "Levels/LRZ/Start Location/Sonic/1.bin"
	even
		binclude "Levels/LRZ/Start Location/Sonic/2.bin"
	even
		binclude "Levels/SSZ/Start Location/Sonic/1.bin"
	even
		binclude "Levels/SSZ/Start Location/Sonic/2.bin"
	even
		binclude "Levels/DEZ/Start Location/Sonic/1.bin"
	even
		binclude "Levels/DEZ/Start Location/Sonic/2.bin"
	even
		binclude "Levels/DDZ/Start Location/Sonic/1.bin"
	even
		binclude "Levels/DDZ/Start Location/Sonic/2.bin"
	even
		binclude "Levels/AIZ/Start Location/Sonic/Intro.bin"
	even
		binclude "Levels/SSZ/Start Location/Sonic/Ending.bin"
	even
		binclude "levels/OAZ/Data/Act 1/Start Pos.bin"		; OAZ
	even
		binclude "levels/OAZ/Data/Act 2/Start Pos.bin"		; OAZ
	even
		binclude "Levels/BPZ/Start Location/Sonic/1.bin"
	even
		binclude "Levels/BPZ/Start Location/Sonic/2.bin"
	even
		binclude "Levels/DPZ/Start Location/Sonic/1.bin"
	even
		binclude "Levels/DPZ/Start Location/Sonic/2.bin"
	even
		binclude "Levels/CGZ/Start Location/Sonic/1.bin"
	even
		binclude "Levels/CGZ/Start Location/Sonic/2.bin"
	even
		binclude "Levels/EMZ/Start Location/Sonic/1.bin"
	even
		binclude "Levels/EMZ/Start Location/Sonic/2.bin"
	even
		binclude "Levels/Gumball/Start Location/Sonic/1.bin"
	even
		binclude "Levels/Gumball/Start Location/Sonic/2.bin"
	even
		binclude "Levels/Pachinko/Start Location/Sonic/1.bin"
	even
		binclude "Levels/Pachinko/Start Location/Sonic/2.bin"
	even
		binclude "Levels/Slots/Start Location/Sonic/1.bin"
	even
		binclude "Levels/Slots/Start Location/Sonic/2.bin"
	even
		binclude "Levels/LRZ/Start Location/Sonic/Boss.bin"
	even
		binclude "Levels/HPZ/Start Location/Sonic/1.bin"
	even
		binclude "Levels/DEZ/Start Location/Sonic/Boss.bin"
	even
		binclude "Levels/HPZ/Start Location/Sonic/Special Stage.bin"
	even
Knux_Start_Locations:
; 		include "Levels/Misc/Knuckles Start Positions.asm"
		binclude "Levels/AIZ/Start Location/Knuckles/1.bin"
	even
		binclude "Levels/AIZ/Start Location/Knuckles/2.bin"
	even
		binclude "Levels/HCZ/Start Location/Knuckles/1.bin"
	even
		binclude "Levels/HCZ/Start Location/Knuckles/2.bin"
	even
		binclude "Levels/MGZ/Start Location/Knuckles/1.bin"
	even
		binclude "Levels/MGZ/Start Location/Knuckles/2.bin"
	even
		binclude "Levels/CNZ/Start Location/Knuckles/1.bin"
	even
		binclude "Levels/CNZ/Start Location/Knuckles/2.bin"
	even
		binclude "Levels/FBZ/Start Location/Knuckles/1.bin"
	even
		binclude "Levels/FBZ/Start Location/Knuckles/2.bin"
	even
		binclude "Levels/ICZ/Start Location/Knuckles/1.bin"
	even
		binclude "Levels/ICZ/Start Location/Knuckles/2.bin"
	even
		binclude "Levels/LBZ/Start Location/Knuckles/1.bin"
	even
		binclude "Levels/LBZ/Start Location/Knuckles/2.bin"
	even
		binclude "Levels/MHZ/Start Location/Knuckles/1.bin"
	even
		binclude "Levels/MHZ/Start Location/Knuckles/2.bin"
	even
		binclude "Levels/SOZ/Start Location/Knuckles/1.bin"
	even
		binclude "Levels/SOZ/Start Location/Knuckles/2.bin"
	even
		binclude "Levels/LRZ/Start Location/Knuckles/1.bin"
	even
		binclude "Levels/LRZ/Start Location/Knuckles/2.bin"
	even
		binclude "Levels/SSZ/Start Location/Knuckles/1.bin"
	even
		binclude "Levels/SSZ/Start Location/Knuckles/2.bin"
	even
		binclude "Levels/DEZ/Start Location/Knuckles/1.bin"
	even
		binclude "Levels/DEZ/Start Location/Knuckles/2.bin"
	even
		binclude "Levels/DDZ/Start Location/Knuckles/1.bin"
	even
		binclude "Levels/DDZ/Start Location/Knuckles/2.bin"
	even
		binclude "Levels/AIZ/Start Location/Knuckles/Intro.bin"
	even
		binclude "Levels/SSZ/Start Location/Knuckles/Ending.bin"
	even
		binclude "Levels/ALZ/Start Location/Knuckles/1.bin"
	even
		binclude "Levels/ALZ/Start Location/Knuckles/2.bin"
	even
		binclude "Levels/BPZ/Start Location/Knuckles/1.bin"
	even
		binclude "Levels/BPZ/Start Location/Knuckles/2.bin"
	even
		binclude "Levels/DPZ/Start Location/Knuckles/1.bin"
	even
		binclude "Levels/DPZ/Start Location/Knuckles/2.bin"
	even
		binclude "Levels/CGZ/Start Location/Knuckles/1.bin"
	even
		binclude "Levels/CGZ/Start Location/Knuckles/2.bin"
	even
		binclude "Levels/EMZ/Start Location/Knuckles/1.bin"
	even
		binclude "Levels/EMZ/Start Location/Knuckles/2.bin"
	even
		binclude "Levels/Gumball/Start Location/Knuckles/1.bin"
	even
		binclude "Levels/Gumball/Start Location/Knuckles/2.bin"
	even
		binclude "Levels/Pachinko/Start Location/Knuckles/1.bin"
	even
		binclude "Levels/Pachinko/Start Location/Knuckles/2.bin"
	even
		binclude "Levels/Slots/Start Location/Knuckles/1.bin"
	even
		binclude "Levels/Slots/Start Location/Knuckles/2.bin"
	even
		binclude "Levels/LRZ/Start Location/Knuckles/Boss.bin"
	even
		binclude "Levels/HPZ/Start Location/Knuckles/1.bin"
	even
		binclude "Levels/DEZ/Start Location/Knuckles/Boss.bin"
	even
		binclude "Levels/HPZ/Start Location/Knuckles/Special Stage.bin"
	even
SpriteLocPtrs:	dc.l AIZ1_Sprites
		dc.l AIZ2_Sprites
		dc.l HCZ1_Sprites
		dc.l HCZ2_Sprites
		dc.l MGZ1_Sprites
		dc.l MGZ2_Sprites
		dc.l CNZ1_Sprites
		dc.l CNZ2_Sprites
		dc.l FBZ1_Sprites
		dc.l FBZ2_Sprites
		dc.l ICZ1_Sprites
		dc.l ICZ2_Sprites
		dc.l LBZ1_Sprites
		dc.l LBZ2_Sprites
		dc.l MHZ1_Sprites
		dc.l MHZ2_Sprites
		dc.l SOZ1_Sprites
		dc.l SOZ2_Sprites
		dc.l LRZ1_Sprites
		dc.l LRZ2_Sprites
		dc.l SSZ1_Sprites
		dc.l SSZ2_SPrites
		dc.l DEZ1_Sprites
		dc.l DEZ2_Sprites
		dc.l DDZ1_Sprites
		dc.l DDZ2_Sprites
		dc.l Ending_Sprites
		dc.l Ending_Sprites
	if oazflag=1
		dc.l OAZ1_Objects		; See "OAZ/Includes.asm"
		dc.l OAZ2_Objects		; See "OAZ/Includes.asm"
	else
		dc.l 0,0
	endif
		dc.l BPZ_Sprites
		dc.l BPZ_Sprites
		dc.l DPZ_Sprites
		dc.l DPZ_Sprites
		dc.l CGZ_Sprites
		dc.l CGZ_Sprites
		dc.l EMZ_Sprites
		dc.l EMZ_Sprites
		dc.l Gumball_Sprites
		dc.l Gumball_Sprites
		dc.l Pachinko_Sprites
		dc.l Pachinko_Sprites
		dc.l Slots_Sprites
		dc.l Slots_Sprites
		dc.l LRZ3_Sprites
		dc.l HPZ_Sprites
		dc.l DEZ3_Sprites
		dc.l HPZMini_Sprites
RingLocPtrs:	dc.l AIZ1_Rings
		dc.l AIZ2_Rings
		dc.l HCZ1_Rings
		dc.l HCZ2_Rings
		dc.l MGZ1_Rings
		dc.l MGZ2_Rings
		dc.l CNZ1_Rings
		dc.l CNZ2_Rings
		dc.l FBZ1_Rings
		dc.l FBZ2_Rings
		dc.l ICZ1_Rings
		dc.l ICZ2_Rings
		dc.l LBZ1_Rings
		dc.l LBZ2_Rings
		dc.l MHZ1_Rings
		dc.l MHZ2_Rings
		dc.l SOZ1_Rings
		dc.l SOZ2_Rings
		dc.l LRZ1_Rings
		dc.l LRZ2_Rings
		dc.l SSZ1_Rings
		dc.l SSZ2_Rings
		dc.l DEZ1_Rings
		dc.l DEZ2_Rings
		dc.l DDZ1_Rings
		dc.l DDZ2_Rings
		dc.l Ending_Rings
		dc.l Ending_Rings
	if oazflag=1
		dc.l OAZ1_Rings			; See "OAZ/Includes.asm"
		dc.l OAZ2_Rings			; See "OAZ/Includes.asm"
	else
		dc.l 0,0
	endif
		dc.l BPZ_Rings
		dc.l BPZ_Rings
		dc.l DPZ_Rings
		dc.l DPZ_Rings
		dc.l CGZ_Rings
		dc.l CGZ_Rings
		dc.l EMZ_Rings
		dc.l EMZ_Rings
		dc.l Gumball_Rings
		dc.l Gumball_Rings
		dc.l Pachinko_Rings
		dc.l Pachinko_Rings
		dc.l Slots_Rings
		dc.l Slots_Rings
		dc.l LRZ3_Rings
		dc.l HPZ_Rings
		dc.l DEZ3_Rings
		dc.l DEZ3_Rings
AutoTunnel_Data:	dc.l AutoTunnel_00
		dc.l AutoTunnel_01_02
		dc.l AutoTunnel_01_02
		dc.l AutoTunnel_03
		dc.l AutoTunnel_04
		dc.l AutoTunnel_05
		dc.l AutoTunnel_06
		dc.l AutoTunnel_07
		dc.l AutoTunnel_08
		dc.l AutoTunnel_09
		dc.l AutoTunnel_0A
		dc.l AutoTunnel_0B
		dc.l AutoTunnel_0C
		dc.l AutoTunnel_0D
		dc.l AutoTunnel_0E
		dc.l AutoTunnel_0F
		dc.l AutoTunnel_10
		dc.l AutoTunnel_11
		dc.l AutoTunnel_12
		dc.l AutoTunnel_13
		dc.l AutoTunnel_14
		dc.l AutoTunnel_15		; LRZ2 first
		dc.l AutoTunnel_16
		dc.l AutoTunnel_17
		dc.l AutoTunnel_18
		dc.l AutoTunnel_19
		dc.l AutoTunnel_1A		; NAT: Custom
		dc.l AutoTunnel_1B		; NAT: Custom
		dc.l SpriteTerminatB
		dc.l SpriteTerminatB
		dc.l SpriteTerminatB
		dc.l SpriteTerminatB
FBZSnakePlatform_Data:	dc.l word_1EE2D4

		dc.l word_1EE2E4
		dc.l word_1EE2F4
		dc.l word_1EE310
		dc.l word_1EE330
		dc.l word_1EE350
		dc.l word_1EE36C
		dc.l word_1EE398
		dc.l SpriteTerminat7
		dc.l SpriteTerminat7
		dc.l SpriteTerminat7
		dc.l SpriteTerminat7
		dc.l SpriteTerminat7
		dc.l SpriteTerminat7
		dc.l SpriteTerminat7
		dc.l SpriteTerminat7
SOZRockRideInfo:dc.l word_1F6C70
		dc.l word_1F6C78
		dc.l word_1F6C82
		dc.l word_1F6C8E
		dc.l word_1F6C9A
		dc.l word_1F6CA6
		dc.l word_1F6CB0
		dc.l word_1F6CBC
		dc.l word_1F6CC2
		dc.l word_1F6CCA
		dc.l word_1F6CD4
		dc.l word_1F6CDA
		dc.l word_1F6CDA
		dc.l word_1F6CDA
		dc.l word_1F6CDA
		dc.l word_1F6CDA
		dc.l word_1F6CDA
		dc.l word_1F6CDA
		dc.l word_1F6CDA
		dc.l word_1F6CDA
		dc.l word_1F6CDA
		dc.l word_1F6CDA
		dc.l word_1F6CDA
		dc.l word_1F6CDA
		dc.l word_1F6CDA
		dc.l word_1F6CDA
		dc.l word_1F6CDA
		dc.l word_1F6CDA
		dc.l word_1F6CDA
		dc.l word_1F6CDA
		dc.l word_1F6CDA
		dc.l word_1F6CDA
DEZTunnelPaths:	dc.l word_1FB49E
		dc.l word_1FB518
		dc.l word_1FB5B2
		dc.l word_1FB5B2
		dc.l word_1FB5F0
		dc.l word_1FB646
		dc.l word_1FB6B4
		dc.l word_1FB6CE
SSCompressedLayoutPtrs:
;		dc.l SSLayoutData1_Kos
;		dc.l SSLayoutData2_Kos
SlotBonusLayout:
;		binclude "Levels/Slots/SSLayout/Bonus Player Start.bin"
	even
;		binclude "Levels/Slots/SSLayout/Bonus Layout.bin"
	even

byte_1E4484:	dc.b    1,   3,   1,   3,   8,   3,   8,   5,   1,   3,   6,   4,   1,   7,   6,   5,   8,   6,   4,   3
		dc.b    4,   3,   4,   5,   8,   4,   5,   3,   7,   3,   8,   3,   6,   5,   6,   7,   4,   3,   7,   5
		dc.b    6,   4,   6,   4,   7,   3,   3,   5,   4,   3,   4,   6,   3,   4,   3,   7,   4,   3,   4,   3
		dc.b    4,   3,   4,   3
byte_1E44C4:	dc.b  $50, $32,	$28, $23, $23, $1E, $1E, $14, $14,  $A,	 $A,  $A,  $A,	 5,   5,   5

SpriteTerminat1:dc.w  $FFFF,	 0,	0
AIZ1_Sprites:	binclude "Levels/AIZ/Object Pos/1.bin"
	even
AIZ2_Sprites:	binclude "Levels/AIZ/Object Pos/2.bin"
	even
AIZ1_Rings:	binclude "Levels/AIZ/Ring Pos/1.bin"
	even
AIZ2_Rings:	binclude "Levels/AIZ/Ring Pos/2.bin"
	even
SpriteTerminat2:dc.w  $FFFF,	 0,	0
HCZ1_Sprites:	binclude "Levels/HCZ/Object Pos/1.bin"
	even
HCZ2_Sprites:	binclude "Levels/HCZ/Object Pos/2.bin"
	even
HCZ1_Rings:	binclude "Levels/HCZ/Ring Pos/1.bin"
	even
HCZ2_Rings:	binclude "Levels/HCZ/Ring Pos/2.bin"
	even
SpriteTerminat3:dc.w  $FFFF,	 0,	0
MGZ1_Sprites:	binclude "Levels/MGZ/Object Pos/1.bin"
	even
MGZ1_Rings:	binclude "Levels/MGZ/Ring Pos/1.bin"
	even
SpriteTerminat4:dc.w  $FFFF,	 0,	0
MGZ2_Sprites:	binclude "Levels/MGZ/Object Pos/2.bin"
	even
MGZ2_Rings:	binclude "Levels/MGZ/Ring Pos/2.bin"
	even
SpriteTerminat5:dc.w  $FFFF,	 0,	0
CNZ1_Sprites:	binclude "Levels/CNZ/Object Pos/1.bin"
	even
CNZ2_Sprites:	binclude "Levels/CNZ/Object Pos/2.bin"
	even
CNZ1_Rings:	binclude "Levels/CNZ/Ring Pos/1.bin"
	even
CNZ2_Rings:	binclude "Levels/CNZ/Ring Pos/2.bin"
	even
SpriteTerminat6:dc.w  $FFFF,	 0,	0
FBZ1_Sprites:	binclude "Levels/FBZ/Object Pos/1.bin"
	even
FBZ2_Sprites:	binclude "Levels/FBZ/Object Pos/2.bin"
	even
FBZ1_Rings:	binclude "Levels/FBZ/Ring Pos/1.bin"
	even
FBZ2_Rings:	binclude "Levels/FBZ/Ring Pos/2.bin"
	even
word_1EE2D4:	dc.w $10F1
		dc.w $118C
		dc.w $118C
		dc.w $770
		dc.w $10F1
		dc.w $770
		dc.w $FFFF
		dc.w $3C
word_1EE2E4:	dc.w $1174
		dc.w $120F
		dc.w $1174
		dc.w $7F0
		dc.w $120F
		dc.w $7F0
		dc.w $FFFF
		dc.w $3C
word_1EE2F4:	dc.w $C56
		dc.w $D64
		dc.w $D64
		dc.w $420
		dc.w $C56
		dc.w $420
		dc.w $C56
		dc.w $510
		dc.w $D64
		dc.w $510
		dc.w $D64
		dc.w $420
		dc.w $FFFF
		dc.w 0
word_1EE310:	dc.w $B64
		dc.w $CE3
		dc.w $C1A
		dc.w $317
		dc.w $CE3
		dc.w $317
		dc.w $CE3
		dc.w $3C8
		dc.w $B64
		dc.w $3C8
		dc.w $B64
		dc.w $317
		dc.w $C1A
		dc.w $317
		dc.w $FFFF
		dc.w 0
word_1EE330:	dc.w $B64
		dc.w $CE3
		dc.w $C1B
		dc.w $3C8
		dc.w $B65
		dc.w $3C8
		dc.w $B65
		dc.w $317
		dc.w $CE3
		dc.w $317
		dc.w $CE3
		dc.w $3C8
		dc.w $C1B
		dc.w $3C8
		dc.w $FFFF
		dc.w 0
word_1EE350:	dc.w $C56
		dc.w $D64
		dc.w $C56
		dc.w $510
		dc.w $D64
		dc.w $510
		dc.w $D64
		dc.w $420
		dc.w $C56
		dc.w $420
		dc.w $C56
		dc.w $510
		dc.w $FFFF
		dc.w 0
word_1EE36C:	dc.w $1D79
		dc.w $1EEB
		dc.w $1EEB
		dc.w $213
		dc.w $1EEB
		dc.w $400
		dc.w $1D79
		dc.w $400
		dc.w $1D79
		dc.w $319
		dc.w $1E82
		dc.w $319
		dc.w $1E82
		dc.w $369
		dc.w $1E1E
		dc.w $369
		dc.w $1E1E
		dc.w $213
		dc.w $1EEB
		dc.w $213
		dc.w $FFFF
		dc.w 0
word_1EE398:	dc.w $1D79
		dc.w $1EEB
		dc.w $1E82
		dc.w $319
		dc.w $1E82
		dc.w $369
		dc.w $1E1E
		dc.w $369
		dc.w $1E1E
		dc.w $213
		dc.w $1EEB
		dc.w $213
		dc.w $1EEB
		dc.w $400
		dc.w $1D79
		dc.w $400
		dc.w $1D79
		dc.w $319
		dc.w $1E82
		dc.w $319
		dc.w $FFFF
		dc.w 0
SpriteTerminat7:dc.w  $FFFF,	 0,	0
ICZ1_Sprites:	binclude "Levels/ICZ/Object Pos/1.bin"
	even
ICZ2_Sprites:	binclude "Levels/ICZ/Object Pos/2.bin"
	even
ICZ1_Rings:	binclude "Levels/ICZ/Ring Pos/1.bin"
	even
ICZ2_Rings:	binclude "Levels/ICZ/Ring Pos/2.bin"
	even
SpriteTerminat8:dc.w  $FFFF,	 0,	0
LBZ1_Sprites:	binclude "Levels/LBZ/Object Pos/1.bin"
	even
LBZ2_Sprites:	binclude "Levels/LBZ/Object Pos/2.bin"
	even
LBZ1_Rings:	binclude "Levels/LBZ/Ring Pos/1.bin"
	even
LBZ2_Rings:	binclude "Levels/LBZ/Ring Pos/2.bin"
	even

AutoTunnelLBZ1_0	macro x, y, yfnl
	dc.w $38
	dc.w x, y
	dc.w x+$08, y
	dc.w x+$10, y
	dc.w x+$18, y
	dc.w x+$20, y
	dc.w x+$70, y
	dc.w x+$90, y+$0C
	dc.w x+$A0, y+$2C
	dc.w x+$96, y+$4C
	dc.w x+$76, y+$5E
	dc.w x+$56, y+$5E
	dc.w x+$46, y+$58
	dc.w x+$30, y+$38
	dc.w x+$30, y-yfnl
    endm

AutoTunnelLBZ1_1	macro x, y
	dc.w $28
	dc.w x-$10, y
	dc.w x+$70, y
	dc.w x+$90, y+$0C
	dc.w x+$A0, y+$2C
	dc.w x+$96, y+$4C
	dc.w x+$76, y+$5E
	dc.w x+$56, y+$58
	dc.w x+$46, y+$58
	dc.w x+$30, y+$38
	dc.w x+$30, y-$28
    endm

AutoTunnel_00:	dc.w $C
		dc.w   $F60,  $578
		dc.w   $F60,  $548
		dc.w   $F60,  $378
AutoTunnel_01_02:AutoTunnelLBZ1_0 $D40, $770, $E8
AutoTunnel_03:	AutoTunnelLBZ1_1 $D40, $770
AutoTunnel_1A:	AutoTunnelLBZ1_0 $7C0, $B70, $38
AutoTunnel_1B:	AutoTunnelLBZ1_1 $7C0, $B70

AutoTunnel_04:	dc.w $38
		dc.w  $2CC0,  $9F0
		dc.w  $2CC8,  $9F0
		dc.w  $2CD0,  $9F0
		dc.w  $2CD8,  $9F0
		dc.w  $2CE0,  $9F0
		dc.w  $2D30,  $9F0
		dc.w  $2D50,  $9FC
		dc.w  $2D60,  $A1C
		dc.w  $2D56,  $A3C
		dc.w  $2D36,  $A4E
		dc.w  $2D16,  $A4E
		dc.w  $2D06,  $A48
		dc.w  $2CF0,  $A28
		dc.w  $2CF0,  $908
AutoTunnel_05:	dc.w $28
		dc.w  $2CB0,  $9F0
		dc.w  $2D30,  $9F0
		dc.w  $2D50,  $9FC
		dc.w  $2D60,  $A1C
		dc.w  $2D56,  $A3C
		dc.w  $2D36,  $A4E
		dc.w  $2D16,  $A4E
		dc.w  $2D06,  $A48
		dc.w  $2CF0,  $A28
		dc.w  $2CF0,  $9C8
AutoTunnel_06:	dc.w $38
		dc.w  $3640,  $A70
		dc.w  $3648,  $A70
		dc.w  $3650,  $A70
		dc.w  $3658,  $A70
		dc.w  $3660,  $A70
		dc.w  $36B0,  $A70
		dc.w  $36D0,  $A7C
		dc.w  $36E0,  $A9C
		dc.w  $36D6,  $ABC
		dc.w  $36B6,  $ACE
		dc.w  $3696,  $ACE
		dc.w  $3686,  $AC8
		dc.w  $3670,  $AA8
		dc.w  $3670,  $988
AutoTunnel_07:	dc.w $28
		dc.w  $3630,  $A70
		dc.w  $36B0,  $A70
		dc.w  $36D0,  $A7C
		dc.w  $36E0,  $A9C
		dc.w  $36D6,  $ABC
		dc.w  $36B6,  $ACE
		dc.w  $3696,  $ACE
		dc.w  $3686,  $AC8
		dc.w  $3670,  $AA8
		dc.w  $3670,  $A48
AutoTunnel_08:	dc.w $38
		dc.w  $37C0,  $7F0
		dc.w  $37C8,  $7F0
		dc.w  $37D0,  $7F0
		dc.w  $37D8,  $7F0
		dc.w  $37E0,  $7F0
		dc.w  $3830,  $7F0
		dc.w  $3850,  $7FC
		dc.w  $3860,  $81C
		dc.w  $3856,  $83C
		dc.w  $3836,  $84E
		dc.w  $3816,  $84E
		dc.w  $3806,  $848
		dc.w  $37F0,  $828
		dc.w  $37F0,  $708
AutoTunnel_09:	dc.w $28
		dc.w  $37B0,  $7F0
		dc.w  $3830,  $7F0
		dc.w  $3850,  $7FC
		dc.w  $3860,  $81C
		dc.w  $3856,  $83C
		dc.w  $3836,  $84E
		dc.w  $3816,  $84E
		dc.w  $3806,  $848
		dc.w  $37F0,  $828
		dc.w  $37F0,  $7C8
AutoTunnel_0A:	dc.w $38
		dc.w  $29C0,  $470
		dc.w  $29C8,  $470
		dc.w  $29D0,  $470
		dc.w  $29D8,  $470
		dc.w  $29E0,  $470
		dc.w  $2A30,  $470
		dc.w  $2A50,  $47C
		dc.w  $2A60,  $49C
		dc.w  $2A56,  $4BC
		dc.w  $2A36,  $4CE
		dc.w  $2A16,  $4CE
		dc.w  $2A06,  $4C8
		dc.w  $29F0,  $4A8
		dc.w  $29F0,  $388
AutoTunnel_0B:	dc.w $28
		dc.w  $29B0,  $470
		dc.w  $2A30,  $470
		dc.w  $2A50,  $47C
		dc.w  $2A60,  $49C
		dc.w  $2A56,  $4BC
		dc.w  $2A36,  $4CE
		dc.w  $2A16,  $4CE
		dc.w  $2A06,  $4C8
		dc.w  $29F0,  $4A8
		dc.w  $29F0,  $448
AutoTunnel_0C:	dc.w $104
		dc.w  $26C0,  $530
		dc.w  $26C0,  $6E0
		dc.w  $26B2,  $700
		dc.w  $2692,  $710
		dc.w  $25F2,  $710
		dc.w  $25D2,  $704
		dc.w  $25C0,  $6E4
		dc.w  $25C0,  $4B4
		dc.w  $25B0,  $484
		dc.w  $2590,  $464
		dc.w  $2560,  $450
		dc.w  $24D0,  $450
		dc.w  $2490,  $43B
		dc.w  $2450,  $41F
		dc.w  $2400,  $410
		dc.w  $2300,  $410
		dc.w  $22D0,  $415
		dc.w  $22A0,  $42B
		dc.w  $2280,  $448
		dc.w  $2240,  $468
		dc.w  $2200,  $470
		dc.w  $21C0,  $468
		dc.w  $2180,  $448
		dc.w  $2160,  $42B
		dc.w  $2130,  $415
		dc.w  $2100,  $410
		dc.w  $20D0,  $415
		dc.w  $20A0,  $42B
		dc.w  $2080,  $448
		dc.w  $2040,  $468
		dc.w  $2000,  $470
		dc.w  $1FC0,  $468
		dc.w  $1F80,  $448
		dc.w  $1F60,  $42B
		dc.w  $1F30,  $415
		dc.w  $1F00,  $410
		dc.w  $1ED0,  $415
		dc.w  $1EA0,  $42B
		dc.w  $1E80,  $448
		dc.w  $1E40,  $468
		dc.w  $1E00,  $470
		dc.w  $1C70,  $470
		dc.w  $1C40,  $440
		dc.w  $1C40,  $320
		dc.w  $1C50,  $300
		dc.w  $1C70,  $2F0
		dc.w  $1F80,  $2F0
		dc.w  $1FD0,  $2E4
		dc.w  $2000,  $2C8
		dc.w  $2020,  $2AB
		dc.w  $2040,  $29A
		dc.w  $2080,  $290
		dc.w  $20C0,  $2A7
		dc.w  $2170,  $357
		dc.w  $21B0,  $370
		dc.w  $2400,  $370
		dc.w  $2440,  $380
		dc.w  $2480,  $390
		dc.w  $24B0,  $384
		dc.w  $24C0,  $364
		dc.w  $24C0,   $C4
		dc.w  $2490,   $90
		dc.w  $2450,   $9C
		dc.w  $2440,   $CC
		dc.w  $2440,   $FC
AutoTunnel_0D:	dc.w $64
		dc.w  $33C0,  $130
		dc.w  $33C0,  $1E0
		dc.w  $33D0,  $200
		dc.w  $3400,  $210
		dc.w  $3450,  $220
		dc.w  $34A0,  $270
		dc.w  $34C0,  $2A0
		dc.w  $34C0,  $460
		dc.w  $34CE,  $480
		dc.w  $34F0,  $490
		dc.w  $3710,  $490
		dc.w  $372E,  $480
		dc.w  $3740,  $460
		dc.w  $3740,  $330
		dc.w  $3720,  $310
		dc.w  $35F0,  $310
		dc.w  $35CE,  $300
		dc.w  $35C0,  $2E0
		dc.w  $35C0,   $40
		dc.w  $35CC,   $20
		dc.w  $3600,   $10
		dc.w  $3690,   $10
		dc.w  $36B4,   $20
		dc.w  $36C0,   $40
		dc.w  $36C0,   $80
AutoTunnel_0E:	dc.w $38
		dc.w  $14C0,  $AB0
		dc.w  $14C0,  $B60
		dc.w  $14D0,  $B80
		dc.w  $14F0,  $B90
		dc.w  $1610,  $B90
		dc.w  $1630,  $B80
		dc.w  $1640,  $B60
		dc.w  $1640,  $8C0
		dc.w  $1650,  $8A0
		dc.w  $1670,  $890
		dc.w  $1890,  $890
		dc.w  $18B0,  $89C
		dc.w  $18C0,  $8BC
		dc.w  $18C0,  $8FC
AutoTunnel_0F:	dc.w $38
		dc.w  $3840,  $730
		dc.w  $3840,  $860
		dc.w  $3832,  $880
		dc.w  $3802,  $890
		dc.w  $37D2,  $884
		dc.w  $37C0,  $864
		dc.w  $37C0,  $3D4
		dc.w  $37D0,  $3B4
		dc.w  $37F0,  $39C
		dc.w  $3820,  $390
		dc.w  $3990,  $390
		dc.w  $39B0,  $39C
		dc.w  $39C0,  $3BC
		dc.w  $39C0,  $3FC
AutoTunnel_10:	dc.w $7C
		dc.w   $F60,  $5C8
		dc.w   $F60,  $950
		dc.w   $F64,  $980
		dc.w   $F68,  $990
		dc.w   $F73,  $9B0
		dc.w   $F82,  $9D0
		dc.w   $F8C,  $9E0
		dc.w   $F98,  $9F0
		dc.w   $FA5,  $A00
		dc.w   $FB5,  $A10
		dc.w   $FC5,  $A1C
		dc.w   $FD5,  $A28
		dc.w   $FF5,  $A38
		dc.w  $1005,  $A40
		dc.w  $1025,  $A4A
		dc.w  $1035,  $A4C
		dc.w  $1055,  $A50
		dc.w  $1265,  $A50
		dc.w  $12A5,  $A48
		dc.w  $12C5,  $A3C
		dc.w  $12E5,  $A2C
		dc.w  $12F5,  $A20
		dc.w  $1305,  $A14
		dc.w  $1315,  $A08
		dc.w  $1320,  $9F8
		dc.w  $132F,  $9E8
		dc.w  $1343,  $9C8
		dc.w  $1350,  $9A8
		dc.w  $135A,  $988
		dc.w  $1360,  $958
		dc.w  $1360,  $878
AutoTunnel_11:	dc.w $7C
		dc.w  $3760,  $1C8
		dc.w  $3760,  $510
		dc.w  $375A,  $540
		dc.w  $3750,  $560
		dc.w  $3743,  $580
		dc.w  $372F,  $5A0
		dc.w  $3720,  $5B0
		dc.w  $3715,  $5C0
		dc.w  $3705,  $5CC
		dc.w  $36F5,  $5D8
		dc.w  $36E5,  $5E4
		dc.w  $36C5,  $5F4
		dc.w  $36A5,  $600
		dc.w  $3665,  $608
		dc.w  $3655,  $608
		dc.w  $3635,  $604
		dc.w  $3625,  $602
		dc.w  $3605,  $5F8
		dc.w  $35F5,  $5F0
		dc.w  $35D5,  $5E0
		dc.w  $35C5,  $5D4
		dc.w  $35B5,  $5C8
		dc.w  $35A5,  $5B8
		dc.w  $3598,  $5A8
		dc.w  $358C,  $598
		dc.w  $3582,  $588
		dc.w  $3573,  $568
		dc.w  $3568,  $548
		dc.w  $3564,  $538
		dc.w  $3560,  $508
		dc.w  $3560,  $478
AutoTunnel_12:	dc.w $7C
		dc.w  $3460,  $5C8
		dc.w  $3460,  $690
		dc.w  $345A,  $6C0
		dc.w  $3450,  $6E0
		dc.w  $3443,  $700
		dc.w  $342F,  $720
		dc.w  $3420,  $730
		dc.w  $3415,  $740
		dc.w  $3405,  $74C
		dc.w  $33F5,  $758
		dc.w  $33E5,  $764
		dc.w  $33C5,  $774
		dc.w  $33A5,  $780
		dc.w  $3365,  $788
		dc.w  $3355,  $788
		dc.w  $3335,  $784
		dc.w  $3325,  $782
		dc.w  $3305,  $778
		dc.w  $32F5,  $770
		dc.w  $32D5,  $760
		dc.w  $32C5,  $754
		dc.w  $32B5,  $748
		dc.w  $32A5,  $738
		dc.w  $3298,  $728
		dc.w  $328C,  $718
		dc.w  $3282,  $708
		dc.w  $3273,  $6E8
		dc.w  $3268,  $6C8
		dc.w  $3264,  $6B8
		dc.w  $3260,  $688
		dc.w  $3260,  $5F8
AutoTunnel_13:	dc.w $28
		dc.w  $1C70,  $730
		dc.w  $1C70,  $6C0
		dc.w  $1C62,  $6A0
		dc.w  $1C42,  $692
		dc.w  $1C32,  $692
		dc.w  $1C12,  $69B
		dc.w  $1C00,  $6BB
		dc.w  $1C08,  $6DB
		dc.w  $1C28,  $6F0
		dc.w  $1CA8,  $6F0
AutoTunnel_14:	dc.w $28
		dc.w  $3670,  $830
		dc.w  $3670,  $7C0
		dc.w  $3662,  $7A0
		dc.w  $3642,  $792
		dc.w  $3632,  $792
		dc.w  $3612,  $79B
		dc.w  $3600,  $7BB
		dc.w  $3608,  $7DB
		dc.w  $3628,  $7F0
		dc.w  $36A8,  $7F0
SpriteTerminat9:dc.w  $FFFF,	 0,	0
MHZ1_Sprites:	binclude "Levels/MHZ/Object Pos/1.bin"
	even
MHZ2_Sprites:	binclude "Levels/MHZ/Object Pos/2.bin"
	even
MHZ1_Rings:	binclude "Levels/MHZ/Ring Pos/1.bin"
	even
MHZ2_Rings:	binclude "Levels/MHZ/Ring Pos/2.bin"
	even
SpriteTerminatA:dc.w  $FFFF,	 0,	0
SOZ1_Sprites:	binclude "Levels/SOZ/Object Pos/1.bin"
	even
SOZ2_Sprites:	binclude "Levels/SOZ/Object Pos/2.bin"
	even
SOZ1_Rings:	binclude "Levels/SOZ/Ring Pos/1.bin"
	even
SOZ2_Rings:	binclude "Levels/SOZ/Ring Pos/2.bin"
	even
word_1F6C70:	dc.w   $A68, $13A0
		dc.w   $D00, $FFFF
word_1F6C78:	dc.w   $A70, $19C0
		dc.w   $AD2, $1AF0
		dc.w  $FFFF
word_1F6C82:	dc.w   $470, $1F40
		dc.w   $490, $1FA0
		dc.w   $D00, $FFFF
word_1F6C8E:	dc.w   $AD0, $2D80
		dc.w   $B00, $2E30
		dc.w   $D00, $FFFF
word_1F6C9A:	dc.w   $450, $24C0
		dc.w   $4F0, $2560
		dc.w   $D00, $FFFF
word_1F6CA6:	dc.w   $270, $1600
		dc.w   $2D2, $1730
		dc.w  $FFFF
word_1F6CB0:	dc.w   $A68, $2740
		dc.w   $A80, $2838
		dc.w   $D00, $FFFF
word_1F6CBC:	dc.w   $5EC, $47F0
		dc.w  $FFFF
word_1F6CC2:	dc.w   $4E0, $4620
		dc.w   $600, $FFFF
word_1F6CCA:	dc.w   $630,  $460
		dc.w   $652,  $4F0
		dc.w  $FFFF
word_1F6CD4:	dc.w   $6F0, $2D70
		dc.w  $FFFF
word_1F6CDA:	dc.w $FFFF
AutoTunnel_15:	dc.w	$30, $11B8
		dc.w   $6F0, $1270
		dc.w   $6F0, $128C
		dc.w   $6F3, $12A1
		dc.w   $6FE, $12AD
		dc.w   $710, $12B0
		dc.w   $728, $12B0
		dc.w   $8B0, $12AC
		dc.w   $8D1, $12A0
		dc.w   $8E3, $128C
		dc.w   $8EE, $1270
		dc.w   $8F0, $11B8
		dc.w   $8F0
AutoTunnel_16:	dc.w	$80, $17B8
		dc.w   $B70, $1870
		dc.w   $B70, $1890
		dc.w   $B6D, $18A0
		dc.w   $B63, $18AD
		dc.w   $B53, $18B0
		dc.w   $B33, $18B0
		dc.w   $8B0, $18B2
		dc.w   $893, $18BC
		dc.w   $880, $18CE
		dc.w   $872, $18F0
		dc.w   $870, $1A70
		dc.w   $870, $1A90
		dc.w   $86D, $1AA2
		dc.w   $862, $1AAE
		dc.w   $84E, $1AB0
		dc.w   $830, $1AB0
		dc.w   $6B0, $1AB2
		dc.w   $692, $1ABD
		dc.w   $67E, $1AD2
		dc.w   $671, $1AF0
		dc.w   $670, $1B70
		dc.w   $670, $1B90
		dc.w   $66D, $1BA2
		dc.w   $662, $1BAF
		dc.w   $64E, $1BB0
		dc.w   $630, $1BB0
		dc.w   $4B0, $1BB0
		dc.w   $495, $1BA2
		dc.w   $47E, $1B8D
		dc.w   $471, $1B70
		dc.w   $470, $1AB8
		dc.w   $470
AutoTunnel_17:	dc.w	$2C, $22B8
		dc.w	$70, $2370
		dc.w	$70, $2390
		dc.w	$73, $23A1
		dc.w	$7E, $23AD
		dc.w	$90, $23B0
		dc.w	$B0, $23B0
		dc.w   $1B0, $23B2
		dc.w   $1D1, $23BF
		dc.w   $1E4, $23D6
		dc.w   $1F0, $2448
		dc.w   $1F0
AutoTunnel_18:	dc.w	$58, $2D48
		dc.w   $7F0, $2CF0
		dc.w   $7F0, $2CD0
		dc.w   $7EE, $2CBD
		dc.w   $7E3, $2CB2
		dc.w   $7D0, $2CB0
		dc.w   $7B0, $2CB0
		dc.w   $430, $2CB1
		dc.w   $411, $2CBB
		dc.w   $3FF, $2CCF
		dc.w   $3F2, $2CF0
		dc.w   $3F0, $2D70
		dc.w   $3F0, $2D90
		dc.w   $3ED, $2DA2
		dc.w   $3E2, $2DAF
		dc.w   $3CE, $2DB0
		dc.w   $3B0, $2DB0
		dc.w   $330, $2DB2
		dc.w   $311, $2DBC
		dc.w   $2FE, $2DD1
		dc.w   $2F1, $2DEF
		dc.w   $2F0, $30F0
		dc.w   $2F0
AutoTunnel_19:	dc.w	$30, $3A38
		dc.w   $3F0, $3AF0
		dc.w   $3F0, $3B10
		dc.w   $3EE, $3B23
		dc.w   $3E0, $3B2F
		dc.w   $3CA, $3B30
		dc.w   $3B0, $3B30
		dc.w   $230, $3B32
		dc.w   $211, $3B3C
		dc.w   $1FF, $3B50
		dc.w   $1F2, $3B70
		dc.w   $1F0, $3BC8
		dc.w   $1F0
SpriteTerminatB:dc.w  $FFFF,	 0,	0
ArtUnc_MonitorFans:binclude "General\Sprites\Monitors\Fan.unc"
	even
LRZ1_Sprites:	binclude "Levels/LRZ/Object Pos/1.bin"
	even
LRZ2_Sprites:	binclude "Levels/LRZ/Object Pos/2.bin"
	even
LRZ1_Rings:	binclude "Levels/LRZ/Ring Pos/1.bin"
	even
LRZ2_Rings:	binclude "Levels/LRZ/Ring Pos/2.bin"
	even
SpriteTerminatC:dc.w  $FFFF,	 0,	0
SSZ1_Sprites:	binclude "Levels/SSZ/Object Pos/1.bin"
	even
SSZ2_SPrites:	binclude "Levels/SSZ/Object Pos/2.bin"
	even
SSZ1_Rings:	binclude "Levels/SSZ/Ring Pos/1.bin"
	even
SSZ2_Rings:	binclude "Levels/SSZ/Ring Pos/2.bin"
	even
SpriteTerminatD:dc.w  $FFFF,	 0,	0
DEZ1_Sprites:	binclude "Levels/DEZ/Object Pos/1.bin"
	even
DEZ2_Sprites:	binclude "Levels/DEZ/Object Pos/2.bin"
	even
DEZ1_Rings:	binclude "Levels/DEZ/Ring Pos/1.bin"
	even
DEZ2_Rings:	binclude "Levels/DEZ/Ring Pos/2.bin"
	even
word_1FB49E:	dc.w $1E
		dc.w  $1B80,  $331
		dc.w  $1BD8,  $328
		dc.w  $1C8C,  $328
		dc.w  $8004,  $400
		dc.w  $8108,  $800
		dc.w  $80FC, $7C80
		dc.w  $80FC, $7C40
		dc.w  $81F8, $3880
		dc.w  $8004,  $480
		dc.w  $8108, $8840
		dc.w  $81F8, $B840
		dc.w  $8108, $C840
		dc.w  $8004, $44C0
		dc.w  $8108, $C800
		dc.w  $81F8, $7880
		dc.w  $8004,  $440
		dc.w  $80FC, $BC80
		dc.w  $8108,  $800
		dc.w  $81F8, $7840
		dc.w  $8004, $C400
		dc.w  $8108,  $800
		dc.w  $8004,  $840
		dc.w  $8108, $4840
		dc.w  $8004, $4480
		dc.w  $81F8, $F880
		dc.w  $80FC, $7C00
		dc.w  $81F8, $F880
		dc.w  $202C,  $1A8
		dc.w  $81F8, $7880
		dc.w  $20D4,  $1A8
word_1FB518:	dc.w $26
		dc.w  $2B80,  $3B1
		dc.w  $2BD8,  $3A8
		dc.w  $2C78,  $3A8
		dc.w  $8004,  $4C0
		dc.w  $8108, $C8C0
		dc.w  $8004, $C400
		dc.w  $81F8, $7840
		dc.w  $8108, $C800
		dc.w  $8004,  $480
		dc.w  $81F8, $F800
		dc.w  $8108, $88C0
		dc.w  $8004, $C440
		dc.w  $8108, $48C0
		dc.w  $8004, $C440
		dc.w  $81F8, $B840
		dc.w  $80FC, $3C80
		dc.w  $81F8, $7800
		dc.w  $80FC, $FC40
		dc.w  $81F8, $38C0
		dc.w  $80FC, $BC40
		dc.w  $81F8, $38C0
		dc.w  $80FC, $BC40
		dc.w  $81F8, $38C0
		dc.w  $80FC, $BC40
		dc.w  $81F8, $38C0
		dc.w  $80FC, $BC80
		dc.w  $3044,  $268
		dc.w  $81F8, $7880
		dc.w  $80FC, $7CC0
		dc.w  $81F8, $B880
		dc.w  $8108,  $800
		dc.w  $8004,  $440
		dc.w  $81F8, $B880
		dc.w  $80FC, $7CC0
		dc.w  $81F8, $B880
		dc.w  $3140,  $228
		dc.w  $81F8, $7880
		dc.w  $31D0,  $228
word_1FB5B2:	dc.w $F
		dc.w  $1D00,  $1B1
		dc.w  $1D54,  $1A8
		dc.w  $1E08,  $1A8
		dc.w  $8004,  $400
		dc.w  $8108,  $800
		dc.w  $81F8, $7880
		dc.w  $81F8, $78C0
		dc.w  $80FC, $BC40
		dc.w  $8108, $C8C0
		dc.w  $8108, $C800
		dc.w  $1F44,  $228
		dc.w  $81F8, $7840
		dc.w  $8108, $C8C0
		dc.w  $81F8, $3880
		dc.w  $204C,  $228
word_1FB5F0:	dc.w $15
		dc.w  $2B80,  $5B1
		dc.w  $2BD8,  $5A8
		dc.w  $2C80,  $5A8
		dc.w  $8108,  $800
		dc.w  $8004,  $400
		dc.w  $2CC8,  $5A8
		dc.w  $80FC, $7C40
		dc.w  $8004, $C440
		dc.w  $8108, $4840
		dc.w  $8108, $4880
		dc.w  $80FC, $FC80
		dc.w  $81F8, $7800
		dc.w  $8108, $8880
		dc.w  $8004, $8400
		dc.w  $2EBC,  $668
		dc.w  $81F8, $7800
		dc.w  $80FC, $FC80
		dc.w  $8108,  $8C0
		dc.w  $8004, $C000
		dc.w  $2F08,  $628
		dc.w  $2F44,  $628
word_1FB646:	dc.w $1B
		dc.w  $2F00,  $8F1
		dc.w  $2EA8,  $8E8
		dc.w  $2DF4,  $8E8
		dc.w  $80FC, $FCC0
		dc.w  $81F8, $B880
		dc.w  $80FC, $7C00
		dc.w  $80FC, $FC00
		dc.w  $8108, $8840
		dc.w  $8004, $4000
		dc.w  $8108,  $880
		dc.w  $8004, $8480
		dc.w  $81F8, $F840
		dc.w  $80FC, $40C0
		dc.w  $8108, $48C0
		dc.w  $81F8, $3840
		dc.w  $2C34,  $9DC
		dc.w  $8004, $C440
		dc.w  $2D34,  $9AC
		dc.w  $8108, $4880
		dc.w  $81F8, $F800
		dc.w  $8108, $8880
		dc.w  $2C88,  $96C
		dc.w  $80FC, $FC00
		dc.w  $81F8, $F8C0
		dc.w  $8108, $48C0
		dc.w  $81F8, $3800
		dc.w  $2AB0,  $968
word_1FB6B4:	dc.w 6
		dc.w  $2C00,  $6B1
		dc.w  $2BA8,  $6A8
		dc.w  $2AF4,  $688
		dc.w  $8304, $8480
		dc.w  $8304, $8480
		dc.w  $2A40,  $4E8
word_1FB6CE:	dc.w 9
		dc.w  $2500,  $38E
		dc.w  $24A8,  $398
		dc.w  $240C,  $398
		dc.w  $8204, $8480
		dc.w  $8204, $8480
		dc.w  $8204, $8480
		dc.w  $8204, $84C0
		dc.w  $8204, $C400
		dc.w  $24D8,  $638
SpriteTerminatE:dc.w  $FFFF,	 0,	0
DDZ1_Sprites:	;binclude "Levels/DDZ/Object Pos/1.bin"
	even
DDZ2_Sprites:	;binclude "Levels/DDZ/Object Pos/2.bin"
	even
DDZ1_Rings:	;binclude "Levels/DDZ/Ring Pos/1.bin"
	even
DDZ2_Rings:	;binclude "Levels/DDZ/Ring Pos/2.bin"
	even
SpriteTerminatF:;dc.w  $FFFF,	 0,	0
Ending_Sprites:	;binclude "Levels/SSZ/Object Pos/Ending.bin"
	even
Ending_Rings:	;binclude "Levels/SSZ/Ring Pos/Ending.bin"
	even
SpriteTerminatG:;dc.w  $FFFF,	 0,	0
ALZ_Sprites:	;binclude "Levels/ALZ/Object Pos/1.bin"
	even
ALZ_Rings:	;binclude "Levels/ALZ/Ring Pos/1.bin"
	even
SpriteTerminatH:;dc.w  $FFFF,	 0,	0
BPZ_Sprites:	;binclude "Levels/BPZ/Object Pos/1.bin"
	even
BPZ_Rings:	;binclude "Levels/BPZ/Ring Pos/1.bin"
	even
SpriteTerminatI:;dc.w  $FFFF,	 0,	0
DPZ_Sprites:	;binclude "Levels/DPZ/Object Pos/1.bin"
	even
DPZ_Rings:	;binclude "Levels/DPZ/Ring Pos/1.bin"
	even
SpriteTerminatJ:;dc.w  $FFFF,	 0,	0
CGZ_Sprites:	;binclude "Levels/CGZ/Object Pos/1.bin"
	even
CGZ_Rings:	;binclude "Levels/CGZ/Ring Pos/1.bin"
	even
SpriteTerminatK:;dc.w  $FFFF,	 0,	0
EMZ_Sprites:	;binclude "Levels/EMZ/Object Pos/1.bin"
	even
EMZ_Rings:	;binclude "Levels/EMZ/Ring Pos/1.bin"
	even
SpriteTerminatL:;dc.w  $FFFF,	 0,	0
Gumball_Sprites:;binclude "Levels/Gumball/Object Pos/1.bin"
	even
Gumball_Rings:	;binclude "Levels/Gumball/Ring Pos/1.bin"
	even
SpriteTerminatM:;dc.w  $FFFF,	 0,	0
Pachinko_Sprites:;binclude "Levels/Pachinko/Object Pos/1.bin"
	even
Pachinko_Rings:	;binclude "Levels/Pachinko/Ring Pos/1.bin"
	even
SpriteTerminatN:;dc.w  $FFFF,	 0,	0
Slots_Sprites:;	binclude "Levels/Slots/Object Pos/1.bin"
	even
Slots_Rings:	;binclude "Levels/Slots/Ring Pos/1.bin"
	even
SpriteTerminatO:;dc.w  $FFFF,	 0,	0

LRZ3_Sprites:	binclude "Levels/LRZ/Object Pos/3.bin"
	even
HPZ_Sprites:	binclude "Levels/HPZ/Object Pos/1.bin"
	even
DEZ3_Sprites:	binclude "Levels/DEZ/Object Pos/3.bin"
	even
LRZ3_Rings:	binclude "Levels/LRZ/Ring Pos/3.bin"
	even
HPZ_Rings:	binclude "Levels/HPZ/Ring Pos/1.bin"
	even
HPZMini_Sprites:binclude "Levels/HPZ/Object Pos/Mini.bin"
	even
DEZ3_Rings:	binclude "Levels/DEZ/Ring Pos/3.bin"
	even
SSLayoutData1_Kos:	;	binclude "General/Special Stage/Layout/SK Set 1.bin"
	even
SSLayoutData2_Kos:	;	binclude "General/Special Stage/Layout/SK Set 2.bin"
	even
		include "Lockon S3/LockOn Data.asm"

; ===========================================================================
; ---------------------------------------------------------------------------
; Pause Game subroutine
; ---------------------------------------------------------------------------
; LevelSetup: ScreenEvents: VInt_DrawLevel: VInt_VRAMWrite:
	include "General/ScreenEvents.asm"

; ===========================================================================
; ---------------------------------------------------------------------------
; Pause Game subroutine
; ---------------------------------------------------------------------------
; Pause_Game:
		include	"General\Pause\Includes.asm"	; Pause menu art/mappings/etc

; ===========================================================================
; ---------------------------------------------------------------------------
; SEGA/Intro Screens
; ---------------------------------------------------------------------------
; SEGAScreen:
		include	"Screen SEGA\Source - SEGA.asm"
; Intro:
		include	"Screen Intro\Source - Intro.asm"

; ===========================================================================
; ---------------------------------------------------------------------------
; Special Stage
; ---------------------------------------------------------------------------
; SpecialStage:
		include "Special Stage\Source - Special Stage.asm"

; ===========================================================================
; ---------------------------------------------------------------------------
; SRAM management
; ---------------------------------------------------------------------------
;		include	"Main Menu\SRAM.asm"

; ===========================================================================
; ---------------------------------------------------------------------------
; New Main Menu
; ---------------------------------------------------------------------------
; MainMenu:
		include	"Main Menu\Source.asm"
; Menu_SpecialStage:
		include "Main Menu\Special Stage\Menu Special Stage.asm"

; ===========================================================================
; ---------------------------------------------------------------------------
; New Title Screen
; ---------------------------------------------------------------------------
; TitleScreen:
		include	"Title Screen\Source.asm"

; ===========================================================================
; ---------------------------------------------------------------------------
; Disclaimer Screen
; ---------------------------------------------------------------------------
; Disclaimer:
		include	"Screen Disclaim\Source - Disclaim.asm"

; ===========================================================================
; ---------------------------------------------------------------------------
; Twizzler Decompression
; ---------------------------------------------------------------------------
; TwizDec: TwimDec:
		include	"General\Twizzler.asm"

; ===========================================================================
; ---------------------------------------------------------------------------
; Museum
; ---------------------------------------------------------------------------
; Museum:
		include	"Screen Museum\Source - Museum.asm"
; ===========================================================================
; ---------------------------------------------------------------------------
; PCM Driver
; ---------------------------------------------------------------------------
; PlayPCM:
		include	"Sound\PCM\Includes.asm"
CheckBanks:	dc.l "3kBR"
EndOfROM:
		include "General/Debugger.asm"
		include "General/ErrorHandler.asm"
		END
