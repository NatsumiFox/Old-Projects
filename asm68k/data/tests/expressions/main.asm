; ===========================================================================
; ---------------------------------------------------------------------------
; Test for the expression parser
; ---------------------------------------------------------------------------

; ---------------------------------------------------------------------------
; BASIC TESTS
; ---------------------------------------------------------------------------

	dc.q 12345678
	dc.q $12345678
	dc.q 0xDEADBEEF
	dc.q 0FEEDFACEh
	dc.q %01010110101101010101010101
	dc.q 0b1010100110010101010111100
	dc.q 11010101010101010101010101b
	dc.q "TEST"

; ---------------------------------------------------------------------------
; MATH TESTS
; ---------------------------------------------------------------------------

	dc.q 1 + $123
	dc.q -1 + -$12
	dc.q 0b11010101/0x12
	dc.q ((1234<1)<<0) | ((1234>1)<<1) | ((1234==1)<<2) | ((1234=1)<<3) | ((1234!=1)<<4) | ((1234<>1)<<5) | ((1234<=1)<<6) | ((1234>=1)<<7)
	dc.q $1234>>4<<5
	dc.q +++++++8
	dc.q -------10101b
	dc.q (5)/(-(2^$1234)++((~69)))-(-1-(!1234)<<((1==4)+1))+(($FFFF1)%(((((($1234567)&$FE)))|((1234<42576)))))

; ---------------------------------------------------------------------------
; EXPRESSION TESTS
; ---------------------------------------------------------------------------

	dc.q **2
	dc.q (*)*(*>>4)

test1	equ $1000
	dc.q test1
	dc.q test1<<16
	dc.q 12*(test1-($FFFF0000/test1))
	dc.q test1*"DERP!"

; ---------------------------------------------------------------------------
; ASSEMBLY TESTS
; ---------------------------------------------------------------------------

test:
.derp:
	pea	(*)(pc)
	pea	*+(34)(pc)
	pea	(12)+*(pc,d0.w)
	pea	1234+*.w
	pea	*
	pea	strlen("1234")(a0)
	pea	(strlen("12345"))
	pea	test:derp(pc,d0.w)
