//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5485
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace S2ObjectDefinitions.Common
{
    using SonicRetro.SonLVL.API;
    
    
    public class Spikes : SonicRetro.SonLVL.API.ObjectDefinition
    {
        
        private SonicRetro.SonLVL.API.Sprite unkimg;
        
        private SonicRetro.SonLVL.API.Sprite horiz1;
        
        private SonicRetro.SonLVL.API.Sprite horiz2;
        
        private SonicRetro.SonLVL.API.Sprite horiz3;
        
        private SonicRetro.SonLVL.API.Sprite horiz4;
        
        private SonicRetro.SonLVL.API.Sprite vert1;
        
        private SonicRetro.SonLVL.API.Sprite vert2;
        
        private SonicRetro.SonLVL.API.Sprite vert3;
        
        private SonicRetro.SonLVL.API.Sprite vert4;
        
        public override void Init(SonicRetro.SonLVL.API.ObjectData data)
        {
            SonicRetro.SonLVL.API.MultiFileIndexer<byte> artfiles = null;
            this.unkimg = SonicRetro.SonLVL.API.ObjectHelper.UnknownObject;
            artfiles = new SonicRetro.SonLVL.API.MultiFileIndexer<byte>();
            artfiles.AddFile(new System.Collections.Generic.List<byte>(SonicRetro.SonLVL.API.ObjectHelper.OpenArtFile("..\\levels\\common\\Spikes\\art.nem", SonicRetro.SonLVL.API.CompressionType.Nemesis)), -1);
            this.horiz1 = SonicRetro.SonLVL.API.ObjectHelper.MapASMToBmp(artfiles.ToArray(), "..\\levels\\common\\Spikes\\map.asm", 0, 1, SonicRetro.SonLVL.API.EngineVersion.Invalid);
            artfiles = new SonicRetro.SonLVL.API.MultiFileIndexer<byte>();
            artfiles.AddFile(new System.Collections.Generic.List<byte>(SonicRetro.SonLVL.API.ObjectHelper.OpenArtFile("..\\levels\\common\\Spikes\\art.nem", SonicRetro.SonLVL.API.CompressionType.Nemesis)), -1);
            this.horiz2 = SonicRetro.SonLVL.API.ObjectHelper.MapASMToBmp(artfiles.ToArray(), "..\\levels\\common\\Spikes\\map.asm", 1, 1, SonicRetro.SonLVL.API.EngineVersion.Invalid);
            artfiles = new SonicRetro.SonLVL.API.MultiFileIndexer<byte>();
            artfiles.AddFile(new System.Collections.Generic.List<byte>(SonicRetro.SonLVL.API.ObjectHelper.OpenArtFile("..\\levels\\common\\Spikes\\art.nem", SonicRetro.SonLVL.API.CompressionType.Nemesis)), -1);
            this.horiz3 = SonicRetro.SonLVL.API.ObjectHelper.MapASMToBmp(artfiles.ToArray(), "..\\levels\\common\\Spikes\\map.asm", 2, 1, SonicRetro.SonLVL.API.EngineVersion.Invalid);
            artfiles = new SonicRetro.SonLVL.API.MultiFileIndexer<byte>();
            artfiles.AddFile(new System.Collections.Generic.List<byte>(SonicRetro.SonLVL.API.ObjectHelper.OpenArtFile("..\\levels\\common\\Spikes\\art.nem", SonicRetro.SonLVL.API.CompressionType.Nemesis)), -1);
            this.horiz4 = SonicRetro.SonLVL.API.ObjectHelper.MapASMToBmp(artfiles.ToArray(), "..\\levels\\common\\Spikes\\map.asm", 3, 1, SonicRetro.SonLVL.API.EngineVersion.Invalid);
            artfiles = new SonicRetro.SonLVL.API.MultiFileIndexer<byte>();
            artfiles.AddFile(new System.Collections.Generic.List<byte>(SonicRetro.SonLVL.API.ObjectHelper.OpenArtFile("..\\levels\\common\\Spikes\\art.nem", SonicRetro.SonLVL.API.CompressionType.Nemesis)), -1);
            this.vert1 = SonicRetro.SonLVL.API.ObjectHelper.MapASMToBmp(artfiles.ToArray(), "..\\levels\\common\\Spikes\\map.asm", 4, 1, SonicRetro.SonLVL.API.EngineVersion.Invalid);
            artfiles = new SonicRetro.SonLVL.API.MultiFileIndexer<byte>();
            artfiles.AddFile(new System.Collections.Generic.List<byte>(SonicRetro.SonLVL.API.ObjectHelper.OpenArtFile("..\\levels\\common\\Spikes\\art.nem", SonicRetro.SonLVL.API.CompressionType.Nemesis)), -1);
            this.vert2 = SonicRetro.SonLVL.API.ObjectHelper.MapASMToBmp(artfiles.ToArray(), "..\\levels\\common\\Spikes\\map.asm", 5, 1, SonicRetro.SonLVL.API.EngineVersion.Invalid);
            artfiles = new SonicRetro.SonLVL.API.MultiFileIndexer<byte>();
            artfiles.AddFile(new System.Collections.Generic.List<byte>(SonicRetro.SonLVL.API.ObjectHelper.OpenArtFile("..\\levels\\common\\Spikes\\art.nem", SonicRetro.SonLVL.API.CompressionType.Nemesis)), -1);
            this.vert3 = SonicRetro.SonLVL.API.ObjectHelper.MapASMToBmp(artfiles.ToArray(), "..\\levels\\common\\Spikes\\map.asm", 6, 1, SonicRetro.SonLVL.API.EngineVersion.Invalid);
            artfiles = new SonicRetro.SonLVL.API.MultiFileIndexer<byte>();
            artfiles.AddFile(new System.Collections.Generic.List<byte>(SonicRetro.SonLVL.API.ObjectHelper.OpenArtFile("..\\levels\\common\\Spikes\\art.nem", SonicRetro.SonLVL.API.CompressionType.Nemesis)), -1);
            this.vert4 = SonicRetro.SonLVL.API.ObjectHelper.MapASMToBmp(artfiles.ToArray(), "..\\levels\\common\\Spikes\\map.asm", 7, 1, SonicRetro.SonLVL.API.EngineVersion.Invalid);
        }
        
        public override string Name
        {
            get
            {
                return "Spikes";
            }
        }
        
        public override System.Collections.ObjectModel.ReadOnlyCollection<byte> Subtypes
        {
            get
            {
                return new System.Collections.ObjectModel.ReadOnlyCollection<byte>(new byte[] {
                            0,
                            16,
                            32,
                            48,
                            64,
                            80,
                            96,
                            112});
            }
        }
        
        public override string SubtypeName(byte subtype)
        {
            if ((subtype == 0))
            {
                return "One Horizontal";
            }
            if ((subtype == 16))
            {
                return "Two Horizontal";
            }
            if ((subtype == 32))
            {
                return "Three Horizontal";
            }
            if ((subtype == 48))
            {
                return "Four Horizontal";
            }
            if ((subtype == 64))
            {
                return "One Vertical";
            }
            if ((subtype == 80))
            {
                return "Two Vertical";
            }
            if ((subtype == 96))
            {
                return "Three Vertical";
            }
            if ((subtype == 112))
            {
                return "Four Vertical";
            }
            return "";
        }
        
        public override SonicRetro.SonLVL.API.Sprite Image
        {
            get
            {
                return this.horiz1;
            }
        }
        
        public override SonicRetro.SonLVL.API.Sprite SubtypeImage(byte subtype)
        {
            if ((subtype == 0))
            {
                return this.horiz1;
            }
            if ((subtype == 16))
            {
                return this.horiz2;
            }
            if ((subtype == 32))
            {
                return this.horiz3;
            }
            if ((subtype == 48))
            {
                return this.horiz4;
            }
            if ((subtype == 64))
            {
                return this.vert1;
            }
            if ((subtype == 80))
            {
                return this.vert2;
            }
            if ((subtype == 96))
            {
                return this.vert3;
            }
            if ((subtype == 112))
            {
                return this.vert4;
            }
            return this.Image;
        }
        
        public override SonicRetro.SonLVL.API.Sprite GetSprite(SonicRetro.SonLVL.API.ObjectEntry obj)
        {
            SonicRetro.SonLVL.API.S3KObjectEntry obj2 = ((SonicRetro.SonLVL.API.S3KObjectEntry)(obj));
            if (((((int)(Spikes.GetDirection(obj2))) == 0) 
                        && (((int)(Spikes.GetCount(obj2))) == 1)))
            {
                SonicRetro.SonLVL.API.BitmapBits bits;
                int xoff;
                int yoff;
                System.Collections.Generic.List<SonicRetro.SonLVL.API.Sprite> sprs = new System.Collections.Generic.List<SonicRetro.SonLVL.API.Sprite>();
                xoff = 0;
                if (obj2.XFlip)
                {
                    xoff = (0 - xoff);
                }
                yoff = 0;
                if (obj2.YFlip)
                {
                    yoff = (0 - yoff);
                }
                bits = new SonicRetro.SonLVL.API.BitmapBits(this.horiz1.Image);
                bits.Flip(obj2.XFlip, obj2.YFlip);
                sprs.Add(new SonicRetro.SonLVL.API.Sprite(bits, new System.Drawing.Point((this.horiz1.X + xoff), (this.horiz1.Y + yoff))));
                SonicRetro.SonLVL.API.Sprite spr = new SonicRetro.SonLVL.API.Sprite(sprs.ToArray());
                spr.Offset = new System.Drawing.Point((obj2.X + spr.X), (obj2.Y + spr.Y));
                return spr;
            }
            if (((((int)(Spikes.GetDirection(obj2))) == 0) 
                        && (((int)(Spikes.GetCount(obj2))) == 2)))
            {
                SonicRetro.SonLVL.API.BitmapBits bits;
                int xoff;
                int yoff;
                System.Collections.Generic.List<SonicRetro.SonLVL.API.Sprite> sprs = new System.Collections.Generic.List<SonicRetro.SonLVL.API.Sprite>();
                xoff = 0;
                if (obj2.XFlip)
                {
                    xoff = (0 - xoff);
                }
                yoff = 0;
                if (obj2.YFlip)
                {
                    yoff = (0 - yoff);
                }
                bits = new SonicRetro.SonLVL.API.BitmapBits(this.horiz2.Image);
                bits.Flip(obj2.XFlip, obj2.YFlip);
                sprs.Add(new SonicRetro.SonLVL.API.Sprite(bits, new System.Drawing.Point((this.horiz2.X + xoff), (this.horiz2.Y + yoff))));
                SonicRetro.SonLVL.API.Sprite spr = new SonicRetro.SonLVL.API.Sprite(sprs.ToArray());
                spr.Offset = new System.Drawing.Point((obj2.X + spr.X), (obj2.Y + spr.Y));
                return spr;
            }
            if (((((int)(Spikes.GetDirection(obj2))) == 0) 
                        && (((int)(Spikes.GetCount(obj2))) == 3)))
            {
                SonicRetro.SonLVL.API.BitmapBits bits;
                int xoff;
                int yoff;
                System.Collections.Generic.List<SonicRetro.SonLVL.API.Sprite> sprs = new System.Collections.Generic.List<SonicRetro.SonLVL.API.Sprite>();
                xoff = 0;
                if (obj2.XFlip)
                {
                    xoff = (0 - xoff);
                }
                yoff = 0;
                if (obj2.YFlip)
                {
                    yoff = (0 - yoff);
                }
                bits = new SonicRetro.SonLVL.API.BitmapBits(this.horiz3.Image);
                bits.Flip(obj2.XFlip, obj2.YFlip);
                sprs.Add(new SonicRetro.SonLVL.API.Sprite(bits, new System.Drawing.Point((this.horiz3.X + xoff), (this.horiz3.Y + yoff))));
                SonicRetro.SonLVL.API.Sprite spr = new SonicRetro.SonLVL.API.Sprite(sprs.ToArray());
                spr.Offset = new System.Drawing.Point((obj2.X + spr.X), (obj2.Y + spr.Y));
                return spr;
            }
            if (((((int)(Spikes.GetDirection(obj2))) == 0) 
                        && (((int)(Spikes.GetCount(obj2))) == 4)))
            {
                SonicRetro.SonLVL.API.BitmapBits bits;
                int xoff;
                int yoff;
                System.Collections.Generic.List<SonicRetro.SonLVL.API.Sprite> sprs = new System.Collections.Generic.List<SonicRetro.SonLVL.API.Sprite>();
                xoff = 0;
                if (obj2.XFlip)
                {
                    xoff = (0 - xoff);
                }
                yoff = 0;
                if (obj2.YFlip)
                {
                    yoff = (0 - yoff);
                }
                bits = new SonicRetro.SonLVL.API.BitmapBits(this.horiz4.Image);
                bits.Flip(obj2.XFlip, obj2.YFlip);
                sprs.Add(new SonicRetro.SonLVL.API.Sprite(bits, new System.Drawing.Point((this.horiz4.X + xoff), (this.horiz4.Y + yoff))));
                SonicRetro.SonLVL.API.Sprite spr = new SonicRetro.SonLVL.API.Sprite(sprs.ToArray());
                spr.Offset = new System.Drawing.Point((obj2.X + spr.X), (obj2.Y + spr.Y));
                return spr;
            }
            if (((((int)(Spikes.GetDirection(obj2))) == 1) 
                        && (((int)(Spikes.GetCount(obj2))) == 1)))
            {
                SonicRetro.SonLVL.API.BitmapBits bits;
                int xoff;
                int yoff;
                System.Collections.Generic.List<SonicRetro.SonLVL.API.Sprite> sprs = new System.Collections.Generic.List<SonicRetro.SonLVL.API.Sprite>();
                xoff = 0;
                if (obj2.XFlip)
                {
                    xoff = (0 - xoff);
                }
                yoff = 0;
                if (obj2.YFlip)
                {
                    yoff = (0 - yoff);
                }
                bits = new SonicRetro.SonLVL.API.BitmapBits(this.vert1.Image);
                bits.Flip(obj2.XFlip, obj2.YFlip);
                sprs.Add(new SonicRetro.SonLVL.API.Sprite(bits, new System.Drawing.Point((this.vert1.X + xoff), (this.vert1.Y + yoff))));
                SonicRetro.SonLVL.API.Sprite spr = new SonicRetro.SonLVL.API.Sprite(sprs.ToArray());
                spr.Offset = new System.Drawing.Point((obj2.X + spr.X), (obj2.Y + spr.Y));
                return spr;
            }
            if (((((int)(Spikes.GetDirection(obj2))) == 1) 
                        && (((int)(Spikes.GetCount(obj2))) == 2)))
            {
                SonicRetro.SonLVL.API.BitmapBits bits;
                int xoff;
                int yoff;
                System.Collections.Generic.List<SonicRetro.SonLVL.API.Sprite> sprs = new System.Collections.Generic.List<SonicRetro.SonLVL.API.Sprite>();
                xoff = 0;
                if (obj2.XFlip)
                {
                    xoff = (0 - xoff);
                }
                yoff = 0;
                if (obj2.YFlip)
                {
                    yoff = (0 - yoff);
                }
                bits = new SonicRetro.SonLVL.API.BitmapBits(this.vert2.Image);
                bits.Flip(obj2.XFlip, obj2.YFlip);
                sprs.Add(new SonicRetro.SonLVL.API.Sprite(bits, new System.Drawing.Point((this.vert2.X + xoff), (this.vert2.Y + yoff))));
                SonicRetro.SonLVL.API.Sprite spr = new SonicRetro.SonLVL.API.Sprite(sprs.ToArray());
                spr.Offset = new System.Drawing.Point((obj2.X + spr.X), (obj2.Y + spr.Y));
                return spr;
            }
            if (((((int)(Spikes.GetDirection(obj2))) == 1) 
                        && (((int)(Spikes.GetCount(obj2))) == 3)))
            {
                SonicRetro.SonLVL.API.BitmapBits bits;
                int xoff;
                int yoff;
                System.Collections.Generic.List<SonicRetro.SonLVL.API.Sprite> sprs = new System.Collections.Generic.List<SonicRetro.SonLVL.API.Sprite>();
                xoff = 0;
                if (obj2.XFlip)
                {
                    xoff = (0 - xoff);
                }
                yoff = 0;
                if (obj2.YFlip)
                {
                    yoff = (0 - yoff);
                }
                bits = new SonicRetro.SonLVL.API.BitmapBits(this.vert3.Image);
                bits.Flip(obj2.XFlip, obj2.YFlip);
                sprs.Add(new SonicRetro.SonLVL.API.Sprite(bits, new System.Drawing.Point((this.vert3.X + xoff), (this.vert3.Y + yoff))));
                SonicRetro.SonLVL.API.Sprite spr = new SonicRetro.SonLVL.API.Sprite(sprs.ToArray());
                spr.Offset = new System.Drawing.Point((obj2.X + spr.X), (obj2.Y + spr.Y));
                return spr;
            }
            if (((((int)(Spikes.GetDirection(obj2))) == 1) 
                        && (((int)(Spikes.GetCount(obj2))) == 4)))
            {
                SonicRetro.SonLVL.API.BitmapBits bits;
                int xoff;
                int yoff;
                System.Collections.Generic.List<SonicRetro.SonLVL.API.Sprite> sprs = new System.Collections.Generic.List<SonicRetro.SonLVL.API.Sprite>();
                xoff = 0;
                if (obj2.XFlip)
                {
                    xoff = (0 - xoff);
                }
                yoff = 0;
                if (obj2.YFlip)
                {
                    yoff = (0 - yoff);
                }
                bits = new SonicRetro.SonLVL.API.BitmapBits(this.vert4.Image);
                bits.Flip(obj2.XFlip, obj2.YFlip);
                sprs.Add(new SonicRetro.SonLVL.API.Sprite(bits, new System.Drawing.Point((this.vert4.X + xoff), (this.vert4.Y + yoff))));
                SonicRetro.SonLVL.API.Sprite spr = new SonicRetro.SonLVL.API.Sprite(sprs.ToArray());
                spr.Offset = new System.Drawing.Point((obj2.X + spr.X), (obj2.Y + spr.Y));
                return spr;
            }
            SonicRetro.SonLVL.API.BitmapBits unkbits = new SonicRetro.SonLVL.API.BitmapBits(this.unkimg.Image);
            unkbits.Flip(obj2.XFlip, obj2.YFlip);
            SonicRetro.SonLVL.API.Sprite unkspr = new SonicRetro.SonLVL.API.Sprite(unkbits, this.unkimg.Offset);
            unkspr.Offset = new System.Drawing.Point((obj2.X + unkspr.X), (obj2.Y + unkspr.Y));
            return unkspr;
        }
        
        public override System.Drawing.Rectangle GetBounds(SonicRetro.SonLVL.API.ObjectEntry obj, System.Drawing.Point camera)
        {
            SonicRetro.SonLVL.API.S3KObjectEntry obj2 = ((SonicRetro.SonLVL.API.S3KObjectEntry)(obj));
            if (((((int)(Spikes.GetDirection(obj2))) == 0) 
                        && (((int)(Spikes.GetCount(obj2))) == 1)))
            {
                System.Drawing.Rectangle rect = System.Drawing.Rectangle.Empty;
                int xoff;
                int yoff;
                xoff = 0;
                if (obj2.XFlip)
                {
                    xoff = (0 - xoff);
                }
                xoff = (xoff - camera.X);
                yoff = 0;
                if (obj2.YFlip)
                {
                    yoff = (0 - yoff);
                }
                yoff = (yoff - camera.Y);
                rect = new System.Drawing.Rectangle((obj2.X 
                                + (this.horiz1.Offset.X + xoff)), (obj2.Y 
                                + (this.horiz1.Offset.Y + yoff)), this.horiz1.Image.Width, this.horiz1.Image.Height);
                return rect;
            }
            if (((((int)(Spikes.GetDirection(obj2))) == 0) 
                        && (((int)(Spikes.GetCount(obj2))) == 2)))
            {
                System.Drawing.Rectangle rect = System.Drawing.Rectangle.Empty;
                int xoff;
                int yoff;
                xoff = 0;
                if (obj2.XFlip)
                {
                    xoff = (0 - xoff);
                }
                xoff = (xoff - camera.X);
                yoff = 0;
                if (obj2.YFlip)
                {
                    yoff = (0 - yoff);
                }
                yoff = (yoff - camera.Y);
                rect = new System.Drawing.Rectangle((obj2.X 
                                + (this.horiz2.Offset.X + xoff)), (obj2.Y 
                                + (this.horiz2.Offset.Y + yoff)), this.horiz2.Image.Width, this.horiz2.Image.Height);
                return rect;
            }
            if (((((int)(Spikes.GetDirection(obj2))) == 0) 
                        && (((int)(Spikes.GetCount(obj2))) == 3)))
            {
                System.Drawing.Rectangle rect = System.Drawing.Rectangle.Empty;
                int xoff;
                int yoff;
                xoff = 0;
                if (obj2.XFlip)
                {
                    xoff = (0 - xoff);
                }
                xoff = (xoff - camera.X);
                yoff = 0;
                if (obj2.YFlip)
                {
                    yoff = (0 - yoff);
                }
                yoff = (yoff - camera.Y);
                rect = new System.Drawing.Rectangle((obj2.X 
                                + (this.horiz3.Offset.X + xoff)), (obj2.Y 
                                + (this.horiz3.Offset.Y + yoff)), this.horiz3.Image.Width, this.horiz3.Image.Height);
                return rect;
            }
            if (((((int)(Spikes.GetDirection(obj2))) == 0) 
                        && (((int)(Spikes.GetCount(obj2))) == 4)))
            {
                System.Drawing.Rectangle rect = System.Drawing.Rectangle.Empty;
                int xoff;
                int yoff;
                xoff = 0;
                if (obj2.XFlip)
                {
                    xoff = (0 - xoff);
                }
                xoff = (xoff - camera.X);
                yoff = 0;
                if (obj2.YFlip)
                {
                    yoff = (0 - yoff);
                }
                yoff = (yoff - camera.Y);
                rect = new System.Drawing.Rectangle((obj2.X 
                                + (this.horiz4.Offset.X + xoff)), (obj2.Y 
                                + (this.horiz4.Offset.Y + yoff)), this.horiz4.Image.Width, this.horiz4.Image.Height);
                return rect;
            }
            if (((((int)(Spikes.GetDirection(obj2))) == 1) 
                        && (((int)(Spikes.GetCount(obj2))) == 1)))
            {
                System.Drawing.Rectangle rect = System.Drawing.Rectangle.Empty;
                int xoff;
                int yoff;
                xoff = 0;
                if (obj2.XFlip)
                {
                    xoff = (0 - xoff);
                }
                xoff = (xoff - camera.X);
                yoff = 0;
                if (obj2.YFlip)
                {
                    yoff = (0 - yoff);
                }
                yoff = (yoff - camera.Y);
                rect = new System.Drawing.Rectangle((obj2.X 
                                + (this.vert1.Offset.X + xoff)), (obj2.Y 
                                + (this.vert1.Offset.Y + yoff)), this.vert1.Image.Width, this.vert1.Image.Height);
                return rect;
            }
            if (((((int)(Spikes.GetDirection(obj2))) == 1) 
                        && (((int)(Spikes.GetCount(obj2))) == 2)))
            {
                System.Drawing.Rectangle rect = System.Drawing.Rectangle.Empty;
                int xoff;
                int yoff;
                xoff = 0;
                if (obj2.XFlip)
                {
                    xoff = (0 - xoff);
                }
                xoff = (xoff - camera.X);
                yoff = 0;
                if (obj2.YFlip)
                {
                    yoff = (0 - yoff);
                }
                yoff = (yoff - camera.Y);
                rect = new System.Drawing.Rectangle((obj2.X 
                                + (this.vert2.Offset.X + xoff)), (obj2.Y 
                                + (this.vert2.Offset.Y + yoff)), this.vert2.Image.Width, this.vert2.Image.Height);
                return rect;
            }
            if (((((int)(Spikes.GetDirection(obj2))) == 1) 
                        && (((int)(Spikes.GetCount(obj2))) == 3)))
            {
                System.Drawing.Rectangle rect = System.Drawing.Rectangle.Empty;
                int xoff;
                int yoff;
                xoff = 0;
                if (obj2.XFlip)
                {
                    xoff = (0 - xoff);
                }
                xoff = (xoff - camera.X);
                yoff = 0;
                if (obj2.YFlip)
                {
                    yoff = (0 - yoff);
                }
                yoff = (yoff - camera.Y);
                rect = new System.Drawing.Rectangle((obj2.X 
                                + (this.vert3.Offset.X + xoff)), (obj2.Y 
                                + (this.vert3.Offset.Y + yoff)), this.vert3.Image.Width, this.vert3.Image.Height);
                return rect;
            }
            if (((((int)(Spikes.GetDirection(obj2))) == 1) 
                        && (((int)(Spikes.GetCount(obj2))) == 4)))
            {
                System.Drawing.Rectangle rect = System.Drawing.Rectangle.Empty;
                int xoff;
                int yoff;
                xoff = 0;
                if (obj2.XFlip)
                {
                    xoff = (0 - xoff);
                }
                xoff = (xoff - camera.X);
                yoff = 0;
                if (obj2.YFlip)
                {
                    yoff = (0 - yoff);
                }
                yoff = (yoff - camera.Y);
                rect = new System.Drawing.Rectangle((obj2.X 
                                + (this.vert4.Offset.X + xoff)), (obj2.Y 
                                + (this.vert4.Offset.Y + yoff)), this.vert4.Image.Width, this.vert4.Image.Height);
                return rect;
            }
            return new System.Drawing.Rectangle(((obj2.X + this.unkimg.Offset.X) 
                            - camera.X), ((obj2.Y + this.unkimg.Offset.Y) 
                            - camera.Y), this.unkimg.Image.Width, this.unkimg.Image.Height);
        }
        
        public override bool RememberState
        {
            get
            {
                return false;
            }
        }
        
        public override byte DefaultSubtype
        {
            get
            {
                return 0;
            }
        }
        
        public override bool Debug
        {
            get
            {
                return false;
            }
        }
        
        private SonicRetro.SonLVL.API.PropertySpec[] customProperties = new SonicRetro.SonLVL.API.PropertySpec[] {
                new SonicRetro.SonLVL.API.PropertySpec("Count", typeof(int), "Extended", null, null, new System.Func<SonicRetro.SonLVL.API.ObjectEntry, object>(Spikes.GetCount), new System.Action<SonicRetro.SonLVL.API.ObjectEntry, object>(Spikes.SetCount)),
                new SonicRetro.SonLVL.API.PropertySpec("Movement", typeof(int), "Extended", null, null, typeof(SpikeMovementConverter), new System.Func<SonicRetro.SonLVL.API.ObjectEntry, object>(Spikes.GetMovement), new System.Action<SonicRetro.SonLVL.API.ObjectEntry, object>(Spikes.SetMovement)),
                new SonicRetro.SonLVL.API.PropertySpec("Direction", typeof(int), "Extended", null, null, typeof(DirectionConverter), new System.Func<SonicRetro.SonLVL.API.ObjectEntry, object>(Spikes.GetDirection), new System.Action<SonicRetro.SonLVL.API.ObjectEntry, object>(Spikes.SetDirection))};
        
        public override SonicRetro.SonLVL.API.PropertySpec[] CustomProperties
        {
            get
            {
                return this.customProperties;
            }
        }
        
        private static object GetCount(SonicRetro.SonLVL.API.ObjectEntry _obj)
        {
            SonicRetro.SonLVL.API.S3KObjectEntry obj = ((SonicRetro.SonLVL.API.S3KObjectEntry)(_obj));
return ((obj.SubType & 0x30) >> 4) + 1;
        }
        
        private static void SetCount(SonicRetro.SonLVL.API.ObjectEntry _obj, object _val)
        {
            SonicRetro.SonLVL.API.S3KObjectEntry obj = ((SonicRetro.SonLVL.API.S3KObjectEntry)(_obj));
            int value = ((int)(_val));

                value = System.Math.Max(1, value);
        value = System.Math.Min(4, value);
        value--;
        obj.SubType = (byte)((obj.SubType & ~0x30) | (value << 4));
      
        }
        
        private static object GetMovement(SonicRetro.SonLVL.API.ObjectEntry _obj)
        {
            SonicRetro.SonLVL.API.S3KObjectEntry obj = ((SonicRetro.SonLVL.API.S3KObjectEntry)(_obj));
            return SonicRetro.SonLVL.API.ObjectHelper.ShiftRight((obj.SubType & 3), 0);
        }
        
        private static void SetMovement(SonicRetro.SonLVL.API.ObjectEntry _obj, object _val)
        {
            SonicRetro.SonLVL.API.S3KObjectEntry obj = ((SonicRetro.SonLVL.API.S3KObjectEntry)(_obj));
            int value = ((int)(_val));
            obj.SubType = SonicRetro.SonLVL.API.ObjectHelper.SetSubtypeMask(obj.SubType, ((byte)(SonicRetro.SonLVL.API.ObjectHelper.ShiftLeft(((byte)(value)), 0))), 3);
        }
        
        private static object GetDirection(SonicRetro.SonLVL.API.ObjectEntry _obj)
        {
            SonicRetro.SonLVL.API.S3KObjectEntry obj = ((SonicRetro.SonLVL.API.S3KObjectEntry)(_obj));
            return SonicRetro.SonLVL.API.ObjectHelper.ShiftRight((obj.SubType & 64), 6);
        }
        
        private static void SetDirection(SonicRetro.SonLVL.API.ObjectEntry _obj, object _val)
        {
            SonicRetro.SonLVL.API.S3KObjectEntry obj = ((SonicRetro.SonLVL.API.S3KObjectEntry)(_obj));
            int value = ((int)(_val));
            obj.SubType = SonicRetro.SonLVL.API.ObjectHelper.SetSubtypeMask(obj.SubType, ((byte)(SonicRetro.SonLVL.API.ObjectHelper.ShiftLeft(((byte)(value)), 6))), 64);
        }
    }
    
    public class SpikeMovementConverter : System.ComponentModel.TypeConverter
    {
        
        private System.Collections.Generic.Dictionary<string, int> values = new System.Collections.Generic.Dictionary<string, int>();
        
        public SpikeMovementConverter()
        {
            this.values.Add("Stationary", 0);
            this.values.Add("Vertical", 1);
            this.values.Add("Horizontal", 2);
            this.values.Add("Invalid", 3);
        }
        
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType)
        {
            if ((sourceType == typeof(string)))
            {
                return true;
            }
            return base.CanConvertFrom(context, sourceType);
        }
        
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType)
        {
            if ((destinationType == typeof(int)))
            {
                return true;
            }
            return base.CanConvertTo(context, destinationType);
        }
        
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)
        {
            if ((value.GetType() == typeof(string)))
            {
                if (this.values.ContainsKey(((string)(value))))
                {
                    return this.values[((string)(value))];
                }
                else
                {
                    return int.Parse(((string)(value)));
                }
            }
            return base.ConvertFrom(context, culture, value);
        }
        
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType)
        {
            if (((destinationType == typeof(string)) 
                        && (value.GetType() == typeof(int))))
            {
                if (this.values.ContainsValue(((int)(value))))
                {
                    return this.values.GetKey(((int)(value)));
                }
                else
                {
                    return value.ToString();
                }
            }
            return base.ConvertTo(context, culture, value, destinationType);
        }
        
        public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context)
        {
            return new System.ComponentModel.TypeConverter.StandardValuesCollection(this.values.Keys);
        }
        
        public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context)
        {
            return true;
        }
    }
    
    public class DirectionConverter : System.ComponentModel.TypeConverter
    {
        
        private System.Collections.Generic.Dictionary<string, int> values = new System.Collections.Generic.Dictionary<string, int>();
        
        public DirectionConverter()
        {
            this.values.Add("Horizontal", 0);
            this.values.Add("Vertical", 1);
        }
        
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType)
        {
            if ((sourceType == typeof(string)))
            {
                return true;
            }
            return base.CanConvertFrom(context, sourceType);
        }
        
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType)
        {
            if ((destinationType == typeof(int)))
            {
                return true;
            }
            return base.CanConvertTo(context, destinationType);
        }
        
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)
        {
            if ((value.GetType() == typeof(string)))
            {
                if (this.values.ContainsKey(((string)(value))))
                {
                    return this.values[((string)(value))];
                }
                else
                {
                    return int.Parse(((string)(value)));
                }
            }
            return base.ConvertFrom(context, culture, value);
        }
        
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType)
        {
            if (((destinationType == typeof(string)) 
                        && (value.GetType() == typeof(int))))
            {
                if (this.values.ContainsValue(((int)(value))))
                {
                    return this.values.GetKey(((int)(value)));
                }
                else
                {
                    return value.ToString();
                }
            }
            return base.ConvertTo(context, culture, value, destinationType);
        }
        
        public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context)
        {
            return new System.ComponentModel.TypeConverter.StandardValuesCollection(this.values.Keys);
        }
        
        public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context)
        {
            return true;
        }
    }
}
